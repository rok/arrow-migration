{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13214495",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495",
    "key": "ARROW-4502",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "performance",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": 259200,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
            "name": "eerhardt",
            "key": "eerhardt",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
            },
            "displayName": "Eric Erhardt",
            "active": true,
            "timeZone": "America/North_Dakota/New_Salem"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 82800,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
            "name": "eerhardt",
            "key": "eerhardt",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
            },
            "displayName": "Eric Erhardt",
            "active": true,
            "timeZone": "America/North_Dakota/New_Salem"
        },
        "subtasks": [
            {
                "id": "13215270",
                "key": "ARROW-4543",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13215270",
                "fields": {
                    "summary": "[C#] Update Flat Buffers code to latest version",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
            "name": "eerhardt",
            "key": "eerhardt",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
            },
            "displayName": "Eric Erhardt",
            "active": true,
            "timeZone": "America/North_Dakota/New_Salem"
        },
        "aggregateprogress": {
            "progress": 33600,
            "total": 116400,
            "percent": 28
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4502/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 50,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/202860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736\n \n \n   - Update to the latest Google FlatBuffers code to support Spans/Memory.\r\n   \r\n   - Add a constructor for ArrowStreamReader that takes a ReadOnlyMemory<byte>.\r\n   - Add a synchronous ReadNextRecordBatch() method.\r\n   \r\n   - Since we are now enabling Spans with FlatBuffers, we need to change the way we write to streams in the ArrowStreamWriter to use Memory<byte> instead of byte[]. This API is in netcoreapp2.1, but not in netstandard, so cross compile for netcoreapp2.1 and add a shim for netstandard.\r\n   \r\n   Unit tests are coming. I currently haven't found a great way to \"read\" arrow streams out of thin air. My initial thought is to use the writer to write some made up data, and then read it in using the reader and ensure the values coming back are the same. @wesm - does that sound like a good approach? I was using a binary file (that was written by PyArrow) locally to test this out.\r\n   \r\n   I also plan on adding some benchmark tests to compare between the Stream and the ReadOnlyMemory implementations, but again am having trouble with \"how to get the stream to read?\".\r\n   \r\n   @stephentoub @pgovind @chutchinson \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T20:55:34.076+0000",
                    "updated": "2019-02-22T20:55:34.076+0000",
                    "started": "2019-02-22T20:55:34.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202860",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on issue #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#issuecomment-466705322\n \n \n   I've added the initial approach for testing the `ArrowStreamReader`. Let me know if you think this approach looks decent, and if so I'll fill out the rest.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-23T22:32:36.305+0000",
                    "updated": "2019-02-23T22:32:36.305+0000",
                    "started": "2019-02-23T22:32:36.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203088",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259637777\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReader.cs\n ##########\n @@ -13,203 +13,41 @@\n // See the License for the specific language governing permissions and\n // limitations under the License.\n \n-using FlatBuffers;\n-using System;\n-using System.Buffers.Binary;\n using System.IO;\n-using System.Linq;\n using System.Threading;\n using System.Threading.Tasks;\n \n namespace Apache.Arrow.Ipc\n {\n+    /// <summary>\n+    /// Implements an <see cref=\"ArrowStreamReader\"/> that can read Arrow files.\n+    /// </summary>\n     public class ArrowFileReader : ArrowStreamReader\n     {\n+        private ArrowFileReaderImplementation Implementation =>\n+            (ArrowFileReaderImplementation)_implementation;\n \n-        public bool IsFileValid { get; protected set; }\n+        public bool IsFileValid => Implementation.IsFileValid;\n \n-        /// <summary>\n-        /// When using GetNextRecordBatch this value \n-        /// is to remember what index is next\n-        /// </summary>\n-        private int _recordBatchIndex;\n-\n-        /// <summary>\n-        /// Notes what byte position where the footer data is in the stream\n-        /// </summary>\n-        private int _footerStartPostion;\n-\n-        private ArrowFooter _footer;\n-\n-        public async Task<int> RecordBatchCountAsync()\n+        public ArrowFileReader(Stream stream)\n+            : base(new ArrowFileReaderImplementation(stream))\n         {\n-            if (!HasReadSchema)\n-            {\n-                await ReadSchemaAsync();\n-            }\n-\n-            return _footer.RecordBatchCount;\n-        }\n-\n-        public ArrowFileReader(Stream stream) : base(stream)\n-        {\n-            if (!stream.CanSeek)\n-            {\n-                throw new ArgumentException(\"Stream must be seekable.\", nameof(stream));\n-            }\n-\n-            if (!stream.CanRead)\n-            {\n-                throw new ArgumentException(\"Stream must be readable.\");\n-            }\n-\n-            IsFileValid = false;\n         }\n \n         public static ArrowFileReader FromFile(string filename)\n         {\n-            var stream = new FileStream(filename, FileMode.Open);\n+            var stream = new FileStream(filename, FileMode.Open, FileAccess.Read);\n             return new ArrowFileReader(stream);\n         }\n \n-        protected override async Task<Schema> ReadSchemaAsync()\n+        public Task<int> RecordBatchCountAsync()\n \n Review comment:\n   Consider making these return `ValueTask<T>` instead.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:06:29.128+0000",
                    "updated": "2019-02-24T20:06:29.128+0000",
                    "started": "2019-02-24T20:06:29.127+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203292",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259637787\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -0,0 +1,195 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Buffers.Binary;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowFileReaderImplementation : ArrowStreamReaderImplementation\n \n Review comment:\n   sealed?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:06:50.159+0000",
                    "updated": "2019-02-24T20:06:50.159+0000",
                    "started": "2019-02-24T20:06:50.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203293",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259637820\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -0,0 +1,195 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Buffers.Binary;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowFileReaderImplementation : ArrowStreamReaderImplementation\n+    {\n+        public bool IsFileValid { get; private set; }\n+\n+        /// <summary>\n+        /// When using GetNextRecordBatch this value \n+        /// is to remember what index is next\n+        /// </summary>\n+        private int _recordBatchIndex;\n+\n+        /// <summary>\n+        /// Notes what byte position where the footer data is in the stream\n+        /// </summary>\n+        private int _footerStartPostion;\n+\n+        private ArrowFooter _footer;\n+\n+        public ArrowFileReaderImplementation(Stream stream) : base(stream)\n+        {\n+        }\n+\n+        public async Task<int> RecordBatchCountAsync()\n+        {\n+            if (!HasReadSchema)\n+            {\n+                await ReadSchemaAsync();\n \n Review comment:\n   As this is a library that could be used in a wide variety of contexts, we should use `.ConfigureAwait(false)` on all awaits.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:07:39.479+0000",
                    "updated": "2019-02-24T20:07:39.479+0000",
                    "started": "2019-02-24T20:07:39.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203294",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259637975\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -0,0 +1,195 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Buffers.Binary;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowFileReaderImplementation : ArrowStreamReaderImplementation\n+    {\n+        public bool IsFileValid { get; private set; }\n+\n+        /// <summary>\n+        /// When using GetNextRecordBatch this value \n+        /// is to remember what index is next\n+        /// </summary>\n+        private int _recordBatchIndex;\n+\n+        /// <summary>\n+        /// Notes what byte position where the footer data is in the stream\n+        /// </summary>\n+        private int _footerStartPostion;\n+\n+        private ArrowFooter _footer;\n+\n+        public ArrowFileReaderImplementation(Stream stream) : base(stream)\n+        {\n+        }\n+\n+        public async Task<int> RecordBatchCountAsync()\n+        {\n+            if (!HasReadSchema)\n+            {\n+                await ReadSchemaAsync();\n+            }\n+\n+            return _footer.RecordBatchCount;\n+        }\n+\n+        protected override async Task ReadSchemaAsync()\n+        {\n+            if (HasReadSchema)\n+            {\n+                return;\n+            }\n+\n+            await ValidateFileAsync();\n+\n+            var bytesRead = 0;\n+            var footerLength = 0;\n+\n+            await Buffers.RentReturnAsync(4, async (buffer) =>\n+            {\n+                BaseStream.Position = BaseStream.Length - ArrowFileConstants.Magic.Length - 4;\n+\n+                bytesRead = await BaseStream.ReadAsync(buffer, 0, 4);\n \n Review comment:\n   Ideally this would wrap the `byte[]` into a `Memory<byte>` in order to use the newer `ReadAsync` overload on `Stream`.  The reason for that is that newer overload returns a `ValueTask<int>` rather than ` Task<int>`, which has two benefits:\r\n   1) It allows for the stream to avoid allocating a `Task<int>` object just to return the `Int32` value when the operation completes synchronously.  Most stream implementations will benefit from this, including `FileStream`.\r\n   2) It allows for the stream implementation to pool an object that backs the `ValueTask<int>` and thus have amortized-zero-allocation even for asynchronously completing operations.  `NetworkStream`, for example, does this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:12:17.654+0000",
                    "updated": "2019-02-24T20:12:17.654+0000",
                    "started": "2019-02-24T20:12:17.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203295",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638066\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -0,0 +1,195 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Buffers.Binary;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowFileReaderImplementation : ArrowStreamReaderImplementation\n+    {\n+        public bool IsFileValid { get; private set; }\n+\n+        /// <summary>\n+        /// When using GetNextRecordBatch this value \n+        /// is to remember what index is next\n+        /// </summary>\n+        private int _recordBatchIndex;\n+\n+        /// <summary>\n+        /// Notes what byte position where the footer data is in the stream\n+        /// </summary>\n+        private int _footerStartPostion;\n+\n+        private ArrowFooter _footer;\n+\n+        public ArrowFileReaderImplementation(Stream stream) : base(stream)\n+        {\n+        }\n+\n+        public async Task<int> RecordBatchCountAsync()\n+        {\n+            if (!HasReadSchema)\n+            {\n+                await ReadSchemaAsync();\n+            }\n+\n+            return _footer.RecordBatchCount;\n+        }\n+\n+        protected override async Task ReadSchemaAsync()\n+        {\n+            if (HasReadSchema)\n+            {\n+                return;\n+            }\n+\n+            await ValidateFileAsync();\n+\n+            var bytesRead = 0;\n+            var footerLength = 0;\n+\n+            await Buffers.RentReturnAsync(4, async (buffer) =>\n+            {\n+                BaseStream.Position = BaseStream.Length - ArrowFileConstants.Magic.Length - 4;\n+\n+                bytesRead = await BaseStream.ReadAsync(buffer, 0, 4);\n+                footerLength = BinaryPrimitives.ReadInt32LittleEndian(buffer);\n+\n+                if (bytesRead != 4) throw new InvalidDataException(\n+                    $\"Failed to read footer length. Read <{bytesRead}>, expected 4.\");\n+\n+                if (footerLength <= 0) throw new InvalidDataException(\n+                    $\"Footer length has invalid size <{footerLength}>\");\n+            });\n+\n+            await Buffers.RentReturnAsync(footerLength, async (buffer) =>\n+            {\n+                _footerStartPostion = (int)BaseStream.Length - footerLength - ArrowFileConstants.Magic.Length - 4;\n+\n+                BaseStream.Position = _footerStartPostion;\n+\n+                bytesRead = await BaseStream.ReadAsync(buffer, 0, footerLength);\n+\n+                if (bytesRead != footerLength)\n+                {\n+                    throw new InvalidDataException(\n+                        $\"Failed to read footer. Read <{bytesRead}> bytes, expected <{footerLength}>.\");\n+                }\n+\n+                // Deserialize the footer from the footer flatbuffer\n+\n+                _footer = new ArrowFooter(Flatbuf.Footer.GetRootAsFooter(new ByteBuffer(buffer)));\n+\n+                Schema = _footer.Schema;\n+            });\n+        }\n+\n+        public async Task<RecordBatch> ReadRecordBatchAsync(int index, CancellationToken cancellationToken)\n+        {\n+            await ReadSchemaAsync();\n+\n+            if (index >= _footer.RecordBatchCount)\n+            {\n+                throw new ArgumentOutOfRangeException(nameof(index));\n+            }\n+\n+            var block = _footer.GetRecordBatchBlock(index);\n+\n+            BaseStream.Position = block.Offset;\n+\n+            return await ReadRecordBatchAsync(cancellationToken);\n+        }\n+\n+        public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken)\n+        {\n+            await ReadSchemaAsync();\n+\n+            if (_recordBatchIndex >= _footer.RecordBatchCount)\n+            {\n+                return null;\n+            }\n+\n+            var result = await ReadRecordBatchAsync(_recordBatchIndex, cancellationToken);\n+            _recordBatchIndex++;\n+\n+            return result;\n+        }\n+\n+        /// <summary>\n+        /// Check if file format is valid. If it's valid don't run the validation again.\n+        /// </summary>\n+        private async Task ValidateFileAsync()\n+        {\n+            if (IsFileValid)\n+            {\n+                return;\n+            }\n+\n+            await ValidateMagicAsync();\n+\n+            IsFileValid = true;\n+        }\n+\n+        private async Task ValidateMagicAsync()\n+        {\n+            var startingPosition = BaseStream.Position;\n+            var magicLength = ArrowFileConstants.Magic.Length;\n+\n+            try\n+            {\n+                await Buffers.RentReturnAsync(magicLength, async (buffer) =>\n+                {\n+                    // Seek to the beginning of the stream\n+\n+                    BaseStream.Position = 0;\n+\n+                    // Read beginning of stream\n+\n+                    await BaseStream.ReadAsync(buffer, 0, magicLength);\n+\n+                    if (!ArrowFileConstants.Magic.SequenceEqual(buffer.Take(magicLength)))\n \n Review comment:\n   What is `Take` here?  Is that LINQ's `Take`?  If so, that's fairly expensive way to get a span to compare against, both in time and allocation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:15:00.112+0000",
                    "updated": "2019-02-24T20:15:00.112+0000",
                    "started": "2019-02-24T20:15:00.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203297",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638211\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n ##########\n @@ -0,0 +1,207 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal abstract class ArrowReaderImplementation : IDisposable\n+    {\n+        public Schema Schema { get; protected set; }\n+        protected bool HasReadSchema => Schema != null;\n+\n+        public void Dispose()\n+        {\n+            Dispose(true);\n+            GC.SuppressFinalize(this);\n+        }\n+\n+        protected virtual void Dispose(bool disposing)\n+        {\n+        }\n+\n+        public abstract Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);\n+        public abstract RecordBatch ReadNextRecordBatch();\n+\n+        protected abstract ArrowBuffer CreateArrowBuffer(ReadOnlyMemory<byte> data);\n+\n+        protected static T ReadMessage<T>(ByteBuffer bb)\n+            where T : struct, IFlatbufferObject\n+        {\n+            var returnType = typeof(T);\n+            var msg = Flatbuf.Message.GetRootAsMessage(bb);\n+\n+            if (MatchEnum(msg.HeaderType, returnType))\n+            {\n+                return msg.Header<T>().Value;\n+            }\n+            else\n+            {\n+                throw new Exception($\"Requested type '{returnType.Name}' \" +\n+                                    $\"did not match type found at offset => '{msg.HeaderType}'\");\n+            }\n+        }\n+\n+        private static bool MatchEnum(Flatbuf.MessageHeader messageHeader, Type flatBuffType)\n+        {\n+            switch (messageHeader)\n+            {\n+                case Flatbuf.MessageHeader.RecordBatch:\n+                    return flatBuffType == typeof(Flatbuf.RecordBatch);\n+                case Flatbuf.MessageHeader.DictionaryBatch:\n+                    return flatBuffType == typeof(Flatbuf.DictionaryBatch);\n+                case Flatbuf.MessageHeader.Schema:\n+                    return flatBuffType == typeof(Flatbuf.Schema);\n+                case Flatbuf.MessageHeader.Tensor:\n+                    return flatBuffType == typeof(Flatbuf.Tensor);\n+                case Flatbuf.MessageHeader.NONE:\n+                    throw new ArgumentException(\"MessageHeader NONE has no matching flatbuf types\", nameof(messageHeader));\n+                default:\n+                    throw new ArgumentException($\"Unexpected MessageHeader value\", nameof(messageHeader));\n+            }\n+        }\n+\n+        protected RecordBatch CreateArrowObjectFromMessage(Flatbuf.Message message, ByteBuffer bodyByteBuffer)\n+        {\n+            switch (message.HeaderType)\n+            {\n+                case Flatbuf.MessageHeader.Schema:\n+                    // TODO: Read schema and verify equality?\n+                    break;\n+                case Flatbuf.MessageHeader.DictionaryBatch:\n+                    // TODO: not supported currently\n+                    Debug.WriteLine(\"Dictionaries are not yet supported.\");\n+                    break;\n+                case Flatbuf.MessageHeader.RecordBatch:\n+                    var rb = message.Header<Flatbuf.RecordBatch>().Value;\n+                    var arrays = BuildArrays(Schema, bodyByteBuffer, rb);\n+                    return new RecordBatch(Schema, arrays, (int)rb.Length);\n+                default:\n+                    // NOTE: Skip unsupported message type\n+                    Debug.WriteLine($\"Skipping unsupported message type '{message.HeaderType}'\");\n+                    break;\n+            }\n+\n+            return null;\n+        }\n+\n+        private IEnumerable<IArrowArray> BuildArrays(\n+            Schema schema,\n+            ByteBuffer messageBuffer,\n+            Flatbuf.RecordBatch recordBatchMessage)\n+        {\n+            var arrays = new List<ArrayData>();\n+            var bufferIndex = 0;\n+\n+            for (var n = 0; n < recordBatchMessage.NodesLength; n++)\n+            {\n+                var field = schema.GetFieldByIndex(n);\n+                var fieldNode = recordBatchMessage.Nodes(n).GetValueOrDefault();\n+\n+                if (field.DataType.IsFixedPrimitive())\n+                    arrays.Add(LoadPrimitiveField(field, fieldNode, recordBatchMessage, messageBuffer, ref bufferIndex));\n+                else\n+                    arrays.Add(LoadVariableField(field, fieldNode, recordBatchMessage, messageBuffer, ref bufferIndex));\n+            }\n+\n+            return arrays.Select(ArrowArrayFactory.BuildArray);\n \n Review comment:\n   C# doesn't yet cache delegates for method groups, unfortunately.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:19:22.369+0000",
                    "updated": "2019-02-24T20:19:22.369+0000",
                    "started": "2019-02-24T20:19:22.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203298",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638357\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowReaderImplementation.cs\n ##########\n @@ -0,0 +1,207 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal abstract class ArrowReaderImplementation : IDisposable\n+    {\n+        public Schema Schema { get; protected set; }\n+        protected bool HasReadSchema => Schema != null;\n+\n+        public void Dispose()\n+        {\n+            Dispose(true);\n+            GC.SuppressFinalize(this);\n+        }\n+\n+        protected virtual void Dispose(bool disposing)\n+        {\n+        }\n+\n+        public abstract Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken);\n+        public abstract RecordBatch ReadNextRecordBatch();\n+\n+        protected abstract ArrowBuffer CreateArrowBuffer(ReadOnlyMemory<byte> data);\n+\n+        protected static T ReadMessage<T>(ByteBuffer bb)\n+            where T : struct, IFlatbufferObject\n+        {\n+            var returnType = typeof(T);\n+            var msg = Flatbuf.Message.GetRootAsMessage(bb);\n+\n+            if (MatchEnum(msg.HeaderType, returnType))\n+            {\n+                return msg.Header<T>().Value;\n+            }\n+            else\n+            {\n+                throw new Exception($\"Requested type '{returnType.Name}' \" +\n+                                    $\"did not match type found at offset => '{msg.HeaderType}'\");\n+            }\n+        }\n+\n+        private static bool MatchEnum(Flatbuf.MessageHeader messageHeader, Type flatBuffType)\n+        {\n+            switch (messageHeader)\n+            {\n+                case Flatbuf.MessageHeader.RecordBatch:\n+                    return flatBuffType == typeof(Flatbuf.RecordBatch);\n+                case Flatbuf.MessageHeader.DictionaryBatch:\n+                    return flatBuffType == typeof(Flatbuf.DictionaryBatch);\n+                case Flatbuf.MessageHeader.Schema:\n+                    return flatBuffType == typeof(Flatbuf.Schema);\n+                case Flatbuf.MessageHeader.Tensor:\n+                    return flatBuffType == typeof(Flatbuf.Tensor);\n+                case Flatbuf.MessageHeader.NONE:\n+                    throw new ArgumentException(\"MessageHeader NONE has no matching flatbuf types\", nameof(messageHeader));\n+                default:\n+                    throw new ArgumentException($\"Unexpected MessageHeader value\", nameof(messageHeader));\n+            }\n+        }\n+\n+        protected RecordBatch CreateArrowObjectFromMessage(Flatbuf.Message message, ByteBuffer bodyByteBuffer)\n+        {\n+            switch (message.HeaderType)\n+            {\n+                case Flatbuf.MessageHeader.Schema:\n+                    // TODO: Read schema and verify equality?\n+                    break;\n+                case Flatbuf.MessageHeader.DictionaryBatch:\n+                    // TODO: not supported currently\n+                    Debug.WriteLine(\"Dictionaries are not yet supported.\");\n+                    break;\n+                case Flatbuf.MessageHeader.RecordBatch:\n+                    var rb = message.Header<Flatbuf.RecordBatch>().Value;\n+                    var arrays = BuildArrays(Schema, bodyByteBuffer, rb);\n+                    return new RecordBatch(Schema, arrays, (int)rb.Length);\n+                default:\n+                    // NOTE: Skip unsupported message type\n+                    Debug.WriteLine($\"Skipping unsupported message type '{message.HeaderType}'\");\n+                    break;\n+            }\n+\n+            return null;\n+        }\n+\n+        private IEnumerable<IArrowArray> BuildArrays(\n+            Schema schema,\n+            ByteBuffer messageBuffer,\n+            Flatbuf.RecordBatch recordBatchMessage)\n+        {\n+            var arrays = new List<ArrayData>();\n \n Review comment:\n   This seems to have some unnecessary costs:\r\n   - We're building up a List but we appear to know the exact length needed in advance.\r\n   - We're building up one thing but then using LINQ to convert it to something else.\r\n   \r\n   Instead, why not do something like:\r\n   ```C#\r\n   var arrays = new IArrowArray[recordBachMessage.NodesLength];\r\n   int bufferIndex = 0;\r\n   for (int n = 0; n < recordBackMessage.NodesLength; n++)\r\n   {\r\n       int field = schema.GetFieldByIndex(n);\r\n       var fieldNode = recordBatchMessage.Nodes(n).GetValueOrDefault();\r\n       arrays[n] = field.DataType.IsFixedPrimitive() ?\r\n           LoadPrimitiveField(field, fieldNode, recordBatchMessage, messageBuffer, ref bufferIndex) :\r\n           LoadVariableField(field, fieldNode, recordBatchMessage, messageBuffer, ref bufferIndex);\r\n   }\r\n   return arrays;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:22:39.514+0000",
                    "updated": "2019-02-24T20:22:39.514+0000",
                    "started": "2019-02-24T20:22:39.513+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203299",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638419\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs\n ##########\n @@ -14,282 +14,61 @@\n // limitations under the License.\n \n using System;\n-using System.Buffers;\n-using System.Collections.Generic;\n-using System.Diagnostics;\n using System.IO;\n-using System.Linq;\n using System.Threading;\n using System.Threading.Tasks;\n \n namespace Apache.Arrow.Ipc\n {\n+    /// <summary>\n+    /// Represents a reader that can read Arrow streams.\n+    /// </summary>\n     public class ArrowStreamReader : IArrowReader, IDisposable\n     {\n-        public Schema Schema { get; protected set; }\n-        public Stream BaseStream { get; }\n+        private protected readonly ArrowReaderImplementation _implementation;\n \n-        protected ArrayPool<byte> Buffers { get; }\n+        public Schema Schema => _implementation.Schema;\n \n         public ArrowStreamReader(Stream stream)\n \n Review comment:\n   I wonder if this should instead be a factory method, such that if, for example, it was given a FileStream, it could then return the implementation optimized for files, or if a MemoryStream, the one for memory, etc?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:24:28.461+0000",
                    "updated": "2019-02-24T20:24:28.461+0000",
                    "started": "2019-02-24T20:24:28.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203301",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638419\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs\n ##########\n @@ -14,282 +14,61 @@\n // limitations under the License.\n \n using System;\n-using System.Buffers;\n-using System.Collections.Generic;\n-using System.Diagnostics;\n using System.IO;\n-using System.Linq;\n using System.Threading;\n using System.Threading.Tasks;\n \n namespace Apache.Arrow.Ipc\n {\n+    /// <summary>\n+    /// Represents a reader that can read Arrow streams.\n+    /// </summary>\n     public class ArrowStreamReader : IArrowReader, IDisposable\n     {\n-        public Schema Schema { get; protected set; }\n-        public Stream BaseStream { get; }\n+        private protected readonly ArrowReaderImplementation _implementation;\n \n-        protected ArrayPool<byte> Buffers { get; }\n+        public Schema Schema => _implementation.Schema;\n \n         public ArrowStreamReader(Stream stream)\n \n Review comment:\n   I wonder if this should instead be a factory method, such that if, for example, it was given a FileStream, it could then return the implementation optimized for files, or if a MemoryStream, the one for memory, etc?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:24:49.554+0000",
                    "updated": "2019-02-24T20:24:49.554+0000",
                    "started": "2019-02-24T20:24:49.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203302",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638459\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReader.cs\n ##########\n @@ -14,282 +14,61 @@\n // limitations under the License.\n \n using System;\n-using System.Buffers;\n-using System.Collections.Generic;\n-using System.Diagnostics;\n using System.IO;\n-using System.Linq;\n using System.Threading;\n using System.Threading.Tasks;\n \n namespace Apache.Arrow.Ipc\n {\n+    /// <summary>\n+    /// Represents a reader that can read Arrow streams.\n+    /// </summary>\n     public class ArrowStreamReader : IArrowReader, IDisposable\n     {\n-        public Schema Schema { get; protected set; }\n-        public Stream BaseStream { get; }\n+        private protected readonly ArrowReaderImplementation _implementation;\n \n-        protected ArrayPool<byte> Buffers { get; }\n+        public Schema Schema => _implementation.Schema;\n \n         public ArrowStreamReader(Stream stream)\n         {\n-            BaseStream = stream ?? throw new ArgumentNullException(nameof(stream));\n-            Buffers = ArrayPool<byte>.Create();\n-            Schema = null;\n-        }\n-\n-        protected bool HasReadSchema => Schema != null;\n+            if (stream == null)\n+                throw new ArgumentNullException(nameof(stream));\n \n-        public virtual async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken = default)\n-        {\n-            // TODO: Loop until a record batch is read.\n-            cancellationToken.ThrowIfCancellationRequested();\n-            return await ReadRecordBatchAsync(cancellationToken);\n+            _implementation = new ArrowStreamReaderImplementation(stream);\n \n Review comment:\n   Should this type test the stream and use the previously shown specialized implementation for FileStream?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:25:16.403+0000",
                    "updated": "2019-02-24T20:25:16.403+0000",
                    "started": "2019-02-24T20:25:16.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203303",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638547\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -0,0 +1,154 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Buffers;\n+using System.IO;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowStreamReaderImplementation : ArrowReaderImplementation\n+    {\n+        public Stream BaseStream { get; }\n+        protected ArrayPool<byte> Buffers { get; }\n+\n+        public ArrowStreamReaderImplementation(Stream stream)\n+        {\n+            BaseStream = stream;\n+            Buffers = ArrayPool<byte>.Create();\n \n Review comment:\n   Why use Create rather than the Shared instance?  This is going to add a lot of overhead for each stream reader, plus the implementation returned by Create isn't as good as the one for Shared.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:27:16.587+0000",
                    "updated": "2019-02-24T20:27:16.587+0000",
                    "started": "2019-02-24T20:27:16.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203304",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638595\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -0,0 +1,154 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Buffers;\n+using System.IO;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowStreamReaderImplementation : ArrowReaderImplementation\n+    {\n+        public Stream BaseStream { get; }\n+        protected ArrayPool<byte> Buffers { get; }\n+\n+        public ArrowStreamReaderImplementation(Stream stream)\n+        {\n+            BaseStream = stream;\n+            Buffers = ArrayPool<byte>.Create();\n+        }\n+\n+        protected override void Dispose(bool disposing)\n+        {\n+            if (disposing)\n+            {\n+                BaseStream.Dispose();\n+            }\n+        }\n+\n+        public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken)\n+        {\n+            // TODO: Loop until a record batch is read.\n+            cancellationToken.ThrowIfCancellationRequested();\n+            return await ReadRecordBatchAsync(cancellationToken);\n+        }\n+\n+        public override RecordBatch ReadNextRecordBatch()\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        protected async Task<RecordBatch> ReadRecordBatchAsync(CancellationToken cancellationToken = default)\n+        {\n+            await ReadSchemaAsync();\n+\n+            var bytesRead = 0;\n+\n+            byte[] lengthBuffer = null;\n+            byte[] messageBuff = null;\n+            byte[] bodyBuff = null;\n+\n+            try\n+            {\n+                // Get Length of record batch for message header.\n+\n+                lengthBuffer = Buffers.Rent(4);\n+                bytesRead += await BaseStream.ReadAsync(lengthBuffer, 0, 4, cancellationToken);\n \n Review comment:\n   As noted earlier, especially since this is dealing with an arbitrary stream, it'd be better to use the Memory-based overloads for all of these ReadAsyncs.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:28:42.496+0000",
                    "updated": "2019-02-24T20:28:42.496+0000",
                    "started": "2019-02-24T20:28:42.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203305",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638642\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -0,0 +1,154 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Buffers;\n+using System.IO;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowStreamReaderImplementation : ArrowReaderImplementation\n+    {\n+        public Stream BaseStream { get; }\n+        protected ArrayPool<byte> Buffers { get; }\n+\n+        public ArrowStreamReaderImplementation(Stream stream)\n+        {\n+            BaseStream = stream;\n+            Buffers = ArrayPool<byte>.Create();\n+        }\n+\n+        protected override void Dispose(bool disposing)\n+        {\n+            if (disposing)\n+            {\n+                BaseStream.Dispose();\n+            }\n+        }\n+\n+        public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken)\n+        {\n+            // TODO: Loop until a record batch is read.\n+            cancellationToken.ThrowIfCancellationRequested();\n+            return await ReadRecordBatchAsync(cancellationToken);\n+        }\n+\n+        public override RecordBatch ReadNextRecordBatch()\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        protected async Task<RecordBatch> ReadRecordBatchAsync(CancellationToken cancellationToken = default)\n+        {\n+            await ReadSchemaAsync();\n+\n+            var bytesRead = 0;\n+\n+            byte[] lengthBuffer = null;\n+            byte[] messageBuff = null;\n+            byte[] bodyBuff = null;\n+\n+            try\n+            {\n+                // Get Length of record batch for message header.\n+\n+                lengthBuffer = Buffers.Rent(4);\n+                bytesRead += await BaseStream.ReadAsync(lengthBuffer, 0, 4, cancellationToken);\n+                var messageLength = BitConverter.ToInt32(lengthBuffer, 0);\n+\n+                if (messageLength == 0)\n+                {\n+                    //reached the end\n+                    return null;\n+                }\n+\n+                messageBuff = Buffers.Rent(messageLength);\n+                bytesRead += await BaseStream.ReadAsync(messageBuff, 0, messageLength, cancellationToken);\n+                var message = Flatbuf.Message.GetRootAsMessage(new FlatBuffers.ByteBuffer(messageBuff));\n+\n+                bodyBuff = Buffers.Rent((int)message.BodyLength);\n+                var bodybb = new FlatBuffers.ByteBuffer(bodyBuff);\n+                bytesRead += await BaseStream.ReadAsync(bodyBuff, 0, (int)message.BodyLength, cancellationToken);\n+\n+                return CreateArrowObjectFromMessage(message, bodybb);\n+            }\n+            finally\n+            {\n+                if (lengthBuffer != null)\n+                {\n+                    Buffers.Return(lengthBuffer);\n+                }\n \n Review comment:\n   It'd be better to return the buffer as soon as we're done with it, so that it can be reused sooner, potentially even immediately when we try to rent the next one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:29:54.319+0000",
                    "updated": "2019-02-24T20:29:54.319+0000",
                    "started": "2019-02-24T20:29:54.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203307",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638691\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -0,0 +1,154 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Buffers;\n+using System.IO;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowStreamReaderImplementation : ArrowReaderImplementation\n+    {\n+        public Stream BaseStream { get; }\n+        protected ArrayPool<byte> Buffers { get; }\n+\n+        public ArrowStreamReaderImplementation(Stream stream)\n+        {\n+            BaseStream = stream;\n+            Buffers = ArrayPool<byte>.Create();\n+        }\n+\n+        protected override void Dispose(bool disposing)\n+        {\n+            if (disposing)\n+            {\n+                BaseStream.Dispose();\n+            }\n+        }\n+\n+        public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken)\n+        {\n+            // TODO: Loop until a record batch is read.\n+            cancellationToken.ThrowIfCancellationRequested();\n+            return await ReadRecordBatchAsync(cancellationToken);\n+        }\n+\n+        public override RecordBatch ReadNextRecordBatch()\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        protected async Task<RecordBatch> ReadRecordBatchAsync(CancellationToken cancellationToken = default)\n+        {\n+            await ReadSchemaAsync();\n+\n+            var bytesRead = 0;\n+\n+            byte[] lengthBuffer = null;\n+            byte[] messageBuff = null;\n+            byte[] bodyBuff = null;\n+\n+            try\n+            {\n+                // Get Length of record batch for message header.\n+\n+                lengthBuffer = Buffers.Rent(4);\n+                bytesRead += await BaseStream.ReadAsync(lengthBuffer, 0, 4, cancellationToken);\n+                var messageLength = BitConverter.ToInt32(lengthBuffer, 0);\n+\n+                if (messageLength == 0)\n+                {\n+                    //reached the end\n+                    return null;\n+                }\n+\n+                messageBuff = Buffers.Rent(messageLength);\n+                bytesRead += await BaseStream.ReadAsync(messageBuff, 0, messageLength, cancellationToken);\n+                var message = Flatbuf.Message.GetRootAsMessage(new FlatBuffers.ByteBuffer(messageBuff));\n+\n+                bodyBuff = Buffers.Rent((int)message.BodyLength);\n+                var bodybb = new FlatBuffers.ByteBuffer(bodyBuff);\n+                bytesRead += await BaseStream.ReadAsync(bodyBuff, 0, (int)message.BodyLength, cancellationToken);\n+\n+                return CreateArrowObjectFromMessage(message, bodybb);\n \n Review comment:\n   `message` here is created around a `ByteBuffer` that wraps `messageBuff`, and then presumably this \"ArrowObject\" will wrap that.  Does that end up making a copy of the original data, or does it store a reference to the original byte[]?  If the former, fine.  If the latter, this is dangerous, as we then proceed to return that buffer back to the pool.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:31:20.020+0000",
                    "updated": "2019-02-24T20:31:20.020+0000",
                    "started": "2019-02-24T20:31:20.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203308",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638691\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowStreamReaderImplementation.cs\n ##########\n @@ -0,0 +1,154 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using System;\n+using System.Buffers;\n+using System.IO;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowStreamReaderImplementation : ArrowReaderImplementation\n+    {\n+        public Stream BaseStream { get; }\n+        protected ArrayPool<byte> Buffers { get; }\n+\n+        public ArrowStreamReaderImplementation(Stream stream)\n+        {\n+            BaseStream = stream;\n+            Buffers = ArrayPool<byte>.Create();\n+        }\n+\n+        protected override void Dispose(bool disposing)\n+        {\n+            if (disposing)\n+            {\n+                BaseStream.Dispose();\n+            }\n+        }\n+\n+        public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken)\n+        {\n+            // TODO: Loop until a record batch is read.\n+            cancellationToken.ThrowIfCancellationRequested();\n+            return await ReadRecordBatchAsync(cancellationToken);\n+        }\n+\n+        public override RecordBatch ReadNextRecordBatch()\n+        {\n+            throw new NotImplementedException();\n+        }\n+\n+        protected async Task<RecordBatch> ReadRecordBatchAsync(CancellationToken cancellationToken = default)\n+        {\n+            await ReadSchemaAsync();\n+\n+            var bytesRead = 0;\n+\n+            byte[] lengthBuffer = null;\n+            byte[] messageBuff = null;\n+            byte[] bodyBuff = null;\n+\n+            try\n+            {\n+                // Get Length of record batch for message header.\n+\n+                lengthBuffer = Buffers.Rent(4);\n+                bytesRead += await BaseStream.ReadAsync(lengthBuffer, 0, 4, cancellationToken);\n+                var messageLength = BitConverter.ToInt32(lengthBuffer, 0);\n+\n+                if (messageLength == 0)\n+                {\n+                    //reached the end\n+                    return null;\n+                }\n+\n+                messageBuff = Buffers.Rent(messageLength);\n+                bytesRead += await BaseStream.ReadAsync(messageBuff, 0, messageLength, cancellationToken);\n+                var message = Flatbuf.Message.GetRootAsMessage(new FlatBuffers.ByteBuffer(messageBuff));\n+\n+                bodyBuff = Buffers.Rent((int)message.BodyLength);\n+                var bodybb = new FlatBuffers.ByteBuffer(bodyBuff);\n+                bytesRead += await BaseStream.ReadAsync(bodyBuff, 0, (int)message.BodyLength, cancellationToken);\n+\n+                return CreateArrowObjectFromMessage(message, bodybb);\n \n Review comment:\n   `message` here is created around a `ByteBuffer` that wraps `messageBuff`, and then presumably this \"ArrowObject\" will wrap that.  Does that end up making a copy of the original data, or does it store a reference to the original byte[]?  If the former, fine.  If the latter, this is dangerous, as we then proceed to return that buffer back to the pool.  Same question for `bodybb`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:31:33.754+0000",
                    "updated": "2019-02-24T20:31:33.754+0000",
                    "started": "2019-02-24T20:31:33.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203309",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259638755\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ReadOnlyMemoryBufferAllocator.cs\n ##########\n @@ -0,0 +1,39 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal sealed class ReadOnlyMemoryBufferAllocator : ByteBufferAllocator\n+    {\n+        private ReadOnlyMemory<byte> _buffer;\n \n Review comment:\n   Nit: readonly?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:33:01.017+0000",
                    "updated": "2019-02-24T20:33:01.017+0000",
                    "started": "2019-02-24T20:33:01.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203311",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259959758\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReaderImplementation.cs\n ##########\n @@ -0,0 +1,195 @@\n+\ufeff// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements. See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+using FlatBuffers;\n+using System;\n+using System.Buffers.Binary;\n+using System.IO;\n+using System.Linq;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n+namespace Apache.Arrow.Ipc\n+{\n+    internal class ArrowFileReaderImplementation : ArrowStreamReaderImplementation\n+    {\n+        public bool IsFileValid { get; private set; }\n+\n+        /// <summary>\n+        /// When using GetNextRecordBatch this value \n+        /// is to remember what index is next\n+        /// </summary>\n+        private int _recordBatchIndex;\n+\n+        /// <summary>\n+        /// Notes what byte position where the footer data is in the stream\n+        /// </summary>\n+        private int _footerStartPostion;\n+\n+        private ArrowFooter _footer;\n+\n+        public ArrowFileReaderImplementation(Stream stream) : base(stream)\n+        {\n+        }\n+\n+        public async Task<int> RecordBatchCountAsync()\n+        {\n+            if (!HasReadSchema)\n+            {\n+                await ReadSchemaAsync();\n+            }\n+\n+            return _footer.RecordBatchCount;\n+        }\n+\n+        protected override async Task ReadSchemaAsync()\n+        {\n+            if (HasReadSchema)\n+            {\n+                return;\n+            }\n+\n+            await ValidateFileAsync();\n+\n+            var bytesRead = 0;\n+            var footerLength = 0;\n+\n+            await Buffers.RentReturnAsync(4, async (buffer) =>\n+            {\n+                BaseStream.Position = BaseStream.Length - ArrowFileConstants.Magic.Length - 4;\n+\n+                bytesRead = await BaseStream.ReadAsync(buffer, 0, 4);\n+                footerLength = BinaryPrimitives.ReadInt32LittleEndian(buffer);\n+\n+                if (bytesRead != 4) throw new InvalidDataException(\n+                    $\"Failed to read footer length. Read <{bytesRead}>, expected 4.\");\n+\n+                if (footerLength <= 0) throw new InvalidDataException(\n+                    $\"Footer length has invalid size <{footerLength}>\");\n+            });\n+\n+            await Buffers.RentReturnAsync(footerLength, async (buffer) =>\n+            {\n+                _footerStartPostion = (int)BaseStream.Length - footerLength - ArrowFileConstants.Magic.Length - 4;\n+\n+                BaseStream.Position = _footerStartPostion;\n+\n+                bytesRead = await BaseStream.ReadAsync(buffer, 0, footerLength);\n+\n+                if (bytesRead != footerLength)\n+                {\n+                    throw new InvalidDataException(\n+                        $\"Failed to read footer. Read <{bytesRead}> bytes, expected <{footerLength}>.\");\n+                }\n+\n+                // Deserialize the footer from the footer flatbuffer\n+\n+                _footer = new ArrowFooter(Flatbuf.Footer.GetRootAsFooter(new ByteBuffer(buffer)));\n+\n+                Schema = _footer.Schema;\n+            });\n+        }\n+\n+        public async Task<RecordBatch> ReadRecordBatchAsync(int index, CancellationToken cancellationToken)\n+        {\n+            await ReadSchemaAsync();\n+\n+            if (index >= _footer.RecordBatchCount)\n+            {\n+                throw new ArgumentOutOfRangeException(nameof(index));\n+            }\n+\n+            var block = _footer.GetRecordBatchBlock(index);\n+\n+            BaseStream.Position = block.Offset;\n+\n+            return await ReadRecordBatchAsync(cancellationToken);\n+        }\n+\n+        public override async Task<RecordBatch> ReadNextRecordBatchAsync(CancellationToken cancellationToken)\n+        {\n+            await ReadSchemaAsync();\n+\n+            if (_recordBatchIndex >= _footer.RecordBatchCount)\n+            {\n+                return null;\n+            }\n+\n+            var result = await ReadRecordBatchAsync(_recordBatchIndex, cancellationToken);\n+            _recordBatchIndex++;\n+\n+            return result;\n+        }\n+\n+        /// <summary>\n+        /// Check if file format is valid. If it's valid don't run the validation again.\n+        /// </summary>\n+        private async Task ValidateFileAsync()\n+        {\n+            if (IsFileValid)\n+            {\n+                return;\n+            }\n+\n+            await ValidateMagicAsync();\n+\n+            IsFileValid = true;\n+        }\n+\n+        private async Task ValidateMagicAsync()\n+        {\n+            var startingPosition = BaseStream.Position;\n+            var magicLength = ArrowFileConstants.Magic.Length;\n+\n+            try\n+            {\n+                await Buffers.RentReturnAsync(magicLength, async (buffer) =>\n+                {\n+                    // Seek to the beginning of the stream\n+\n+                    BaseStream.Position = 0;\n+\n+                    // Read beginning of stream\n+\n+                    await BaseStream.ReadAsync(buffer, 0, magicLength);\n+\n+                    if (!ArrowFileConstants.Magic.SequenceEqual(buffer.Take(magicLength)))\n \n Review comment:\n   This was our fault :)\r\n   \r\n   The synchronization code needs a lot of love. The better solution here would probably be to slice a span of the magic / buffer and compare.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T18:31:50.443+0000",
                    "updated": "2019-02-25T18:31:50.443+0000",
                    "started": "2019-02-25T18:31:50.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203834",
                    "issueId": "13214495"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/worklog/203840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on pull request #3736: ARROW-4502: [C#] Add support for zero-copy reads\nURL: https://github.com/apache/arrow/pull/3736#discussion_r259961327\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Ipc/ArrowFileReader.cs\n ##########\n @@ -13,203 +13,41 @@\n // See the License for the specific language governing permissions and\n // limitations under the License.\n \n-using FlatBuffers;\n-using System;\n-using System.Buffers.Binary;\n using System.IO;\n-using System.Linq;\n using System.Threading;\n using System.Threading.Tasks;\n \n namespace Apache.Arrow.Ipc\n {\n+    /// <summary>\n+    /// Implements an <see cref=\"ArrowStreamReader\"/> that can read Arrow files.\n+    /// </summary>\n     public class ArrowFileReader : ArrowStreamReader\n     {\n+        private ArrowFileReaderImplementation Implementation =>\n+            (ArrowFileReaderImplementation)_implementation;\n \n-        public bool IsFileValid { get; protected set; }\n+        public bool IsFileValid => Implementation.IsFileValid;\n \n-        /// <summary>\n-        /// When using GetNextRecordBatch this value \n-        /// is to remember what index is next\n-        /// </summary>\n-        private int _recordBatchIndex;\n-\n-        /// <summary>\n-        /// Notes what byte position where the footer data is in the stream\n-        /// </summary>\n-        private int _footerStartPostion;\n-\n-        private ArrowFooter _footer;\n-\n-        public async Task<int> RecordBatchCountAsync()\n+        public ArrowFileReader(Stream stream)\n+            : base(new ArrowFileReaderImplementation(stream))\n         {\n-            if (!HasReadSchema)\n-            {\n-                await ReadSchemaAsync();\n-            }\n-\n-            return _footer.RecordBatchCount;\n-        }\n-\n-        public ArrowFileReader(Stream stream) : base(stream)\n-        {\n-            if (!stream.CanSeek)\n-            {\n-                throw new ArgumentException(\"Stream must be seekable.\", nameof(stream));\n-            }\n-\n-            if (!stream.CanRead)\n-            {\n-                throw new ArgumentException(\"Stream must be readable.\");\n-            }\n-\n-            IsFileValid = false;\n         }\n \n         public static ArrowFileReader FromFile(string filename)\n         {\n-            var stream = new FileStream(filename, FileMode.Open);\n+            var stream = new FileStream(filename, FileMode.Open, FileAccess.Read);\n             return new ArrowFileReader(stream);\n         }\n \n-        protected override async Task<Schema> ReadSchemaAsync()\n+        public Task<int> RecordBatchCountAsync()\n \n Review comment:\n   Additionally, I am not sure RecordBatchCountAsync is a good design choice. Would it make more sense to expose this is a property, and extract it when the file is opened or the footer is read for the first time and throw InvalidOperationException otherwise? The intent of this method, I believe, was to read the number of record batches stored in the file (as read from the footer), so you could seek to a specific record batch, or read them one at a time.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T18:36:06.818+0000",
                    "updated": "2019-02-25T18:36:06.818+0000",
                    "started": "2019-02-25T18:36:06.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203840",
                    "issueId": "13214495"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 30000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@75771a8b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e4d50e0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b3e5afc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@f50d52b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a98934a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@699432a9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30247cdd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@39541e7f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7798d8dc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3fd1bdfc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c80fc4f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@35beb846[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 33600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 07 15:00:34 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-07T15:00:34.000+0000",
        "workratio": 17,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4502/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2019-02-08T00:18:26.000+0000",
        "updated": "2019-03-07T15:00:45.000+0000",
        "timeoriginalestimate": 172800,
        "description": "In the Python (and C++) API, you can create a `RecordBatchStreamReader`, and if you give it an `InputStream` that supports zero-copy reads, you can\u00a0get back `RecordBatch` objects without\u00a0allocating new memory and copying\u00a0all the data.\r\n\r\nThere is currently no way to read Arrow\u00a0RecordBatch instances without allocating new memory and copying all the data. We should enable this scenario in the C# API.\r\n\r\n\u00a0\r\n\r\nMy proposal is to create a new `class ArrowRecordBatchReader : IArrowReader`. It's constructor will take a `ReadOnlyMemory<byte> data` parameter, and it will be able to read `RecordBatch` instances just like the existing `ArrowStreamReader`. As part of this new class, we will refactor\u00a0any common code out of `ArrowStreamReader`\u00a0in order for the parsing logic to be shared, where necessary.",
        "customfield_10010": null,
        "timetracking": {
            "originalEstimate": "48h",
            "remainingEstimate": "0h",
            "timeSpent": "8h 20m",
            "originalEstimateSeconds": 172800,
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Add support for zero-copy reads",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16764582",
                    "id": "16764582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "[~cshutchinson] - I've taken a look at this over the weekend, and there are a couple things I wanted to run by you.\r\n # All of the \"flat buffer\" types are public - is this intentional? They feel more like an \"implementation detail\" to me, and I think we should make them internal. Thoughts?\r\n # In order to use `ReadOnlyMemory<byte>` in the API, we will need to split the `ByteBuffer` class into two: an editable version vs. a read-only version. Just like how ReadOnlySpan vs. Span and ReadOnlyMemory vs. Memory are split out. The reason is because I need to pass in a `ReadOnlyMemory<byte>` into a ByteBuffer in order to read \"Messages\". Note: I also needed to change ByteBuffer to be backed by a Memory instead of a managed `byte[]`. The reasoning here is because someone\u00a0may be passing in Arrow RecordBatch data in native memory (for interop scenarios with other languages like C++). It shouldn't be necessary to copy that native memory into a managed `byte[]` just to read the RecordBatch.\r\n\r\n\u00a0\r\n\r\nI have some preliminary perf results to share with my investigation. Reading in ~1 million records with 7 number columns and adding up all the numbers is\u00a0a lot faster without doing the\u00a0allocations and copies. Here are some benchmark results of my prototype vs. the current ArrowStreamReader both reading from an in-memory buffer (MemoryStream):\r\n\r\nMethod | Mean | Gen 0/1k Op | Allocated Memory/Op |\r\n----------------------- |-----------:|----------:|----------:|\r\n ArrowStreamReader | 110.018 ms | 21000.0000 |110693.78 KB |\r\n ArrowRecordBatchReader | 6.789 ms | - | 63.52 KB |\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2019-02-10T22:24:53.125+0000",
                    "updated": "2019-02-10T22:24:53.125+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16764593",
                    "id": "16764593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cshutchinson",
                        "name": "cshutchinson",
                        "key": "cshutchinson",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Chris Hutchinson",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~eerhardt]\u00a0\r\n\r\n1.\u00a0The intent was to auto-generate the FlatBuffer code at build time\u00a0using the Google FlatBuffer\u00a0schema compiler tooling ([https://google.github.io/flatbuffers/flatbuffers_guide_using_schema_compiler.html).]\u00a0This was never integrated due to initial time constraints and cross-platform concerns. We opted for just including the output of the schema compiler in the interest of producing a working prototype. I\u00a0agree that all of these types should be marked internal. I guess just be aware all of the FlatBuffer code was generated by the schema compiler, and that's why the types are marked public. There wasn't a lot of time invested in\u00a0adjusting\u00a0the compiler to mark the types as internal.\r\n\r\n2. ByteBuffer was auto-generated by the Google FlatBuffer schema compiler (as mentioned above). It seemed advantageous to use the compiler because it would be\u00a0trivial to keep parity with the Arrow specification. It appears that the best course of action here may be to investigate if the FlatBuffer schema compiler can be patched or\u00a0hooked in order to produce\u00a0zero-copy variants of ByteBuffer that use\u00a0Memory/Span.\u00a0Another option may be to forgo the FlatBuffer compiler entirely and write a custom solution for serialization that\u00a0otherwise follows the FlatBuffer spec. Thoughts? You definitely have the correct idea but the problem is you are modifying generated code, so we should be careful with that.\r\n\r\n3. It would be\u00a0great if you could include those benchmarks in the solution to help compare with future improvements. If you have the time for this, consider the file system structure used by Entity Framework Core project: [https://github.com/aspnet/EntityFrameworkCore]\r\n\r\n4. Consider taking a look at recent changes to ArrowBufferBuilder<T>. This was recently changed to use managed memory until the buffer is \"built\". The intention here was\u00a0a) make it possible to build multiple copies of an array backed by separate memory, b) reuse the buffer builder.\u00a0I'm not sure that this was a good idea.\u00a0Do you have any thoughts here? The approach that Rust takes is to build the buffer up\u00a0using the typical Arrow memory allocation strategies, then \"freeze\"\u00a0the buffer memory into a new Arrow buffer. This implies a single builder per buffer. That's not necessarily a bad thing.\u00a0It means\u00a0(essentially) one allocation per buffer instead of\u00a0(possibly) two. It may be better for API usability and in\u00a0the spirit of minimizing allocations.\u00a0Thoughts here?\u00a0\r\n\r\nThanks for taking a look. I'm sure there's many areas of improvement. Let me know if you have any more questions. I look forward to collaborating with you!\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cshutchinson",
                        "name": "cshutchinson",
                        "key": "cshutchinson",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Chris Hutchinson",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-10T23:10:53.193+0000",
                    "updated": "2019-02-10T23:10:53.193+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16765331",
                    "id": "16765331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "I think the first thing that needs to be done is update to the latest\u00a0Google FlatBuffers code. I see they have\u00a0[C# support for directly reading and writing to memory other than byte|https://github.com/google/flatbuffers/pull/4886]\u00a0now. I will get this done today and send a PR. Does that need a separate Jira issue [~wesmckinn]? Or can I just reference this issue in the PR, and say the PR is \"working towards ARROW-4502\"?\r\n\r\n\u00a0\r\n\r\n[~cshutchinson] - Some thoughts about your reply above:\r\n # I don't think generating the code during the build is ideal. My main reasoning is for things like\u00a0[Source Link|https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/sourcelink]\u00a0to work correctly, it needs to point to source code contained in a repository. It also becomes a pain for people who are just browsing the code\u00a0on GitHub or in a code editor.\u00a0The arrow schema doesn't change that often does it, to the point where it needs to be re-generated on every build?\r\n # See my comment above - I will update the FlatBuffers code to the latest version, which appears to meet my needs.\r\n # Yes! I will include the benchmarks (using\u00a0[BenchmarkDotNet|https://github.com/dotnet/benchmarkdotnet]\u00a0a great tool). I will have to modify the current version a bit, since I am currently using a checked-in Arrow Stream file, which I assume we don't want to do.\r\n # I will give the changes a look and provide what feedback I can.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2019-02-11T19:37:33.145+0000",
                    "updated": "2019-02-11T19:37:33.145+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16766063",
                    "id": "16766063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "bq. I think the first thing that needs to be done is update to the latest Google FlatBuffers code. I see they have C# support for directly reading and writing to memory other than byte now. I will get this done today and send a PR. Does that need a separate Jira issue Wes McKinney? Or can I just reference this issue in the PR, and say the PR is \"working towards ARROW-4502\"?\r\n\r\nA PR addressing a ticket should also fully resolve the ticket, better make a new JIRA when you only address parts of a JIRA.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-02-12T14:17:54.681+0000",
                    "updated": "2019-02-12T14:17:54.681+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16766115",
                    "id": "16766115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~eerhardt] you can create a \"Subtask\" of this JIRA. Click on \"More\" above and select the \"Create sub-task\" option, which creates another JIRA number but attaches it to this issue",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-12T15:04:54.332+0000",
                    "updated": "2019-02-12T15:04:54.332+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16766128",
                    "id": "16766128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "Thanks for the information,\u00a0[~xhochy]. I've created https://issues.apache.org/jira/browse/ARROW-4543\u00a0to update the flat buffers code.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2019-02-12T15:09:37.717+0000",
                    "updated": "2019-02-12T15:09:37.717+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16766131",
                    "id": "16766131",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "body": "[~wesmckinn] - I've marked 4543 as a \"Subtask\" of this. Thanks for the help, from a Jira newbie. :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=eerhardt",
                        "name": "eerhardt",
                        "key": "eerhardt",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=eerhardt&avatarId=37925",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=eerhardt&avatarId=37925",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=eerhardt&avatarId=37925",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=eerhardt&avatarId=37925"
                        },
                        "displayName": "Eric Erhardt",
                        "active": true,
                        "timeZone": "America/North_Dakota/New_Salem"
                    },
                    "created": "2019-02-12T15:11:50.037+0000",
                    "updated": "2019-02-12T15:11:50.037+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214495/comment/16786860",
                    "id": "16786860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3736\n[https://github.com/apache/arrow/pull/3736]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-07T15:00:34.364+0000",
                    "updated": "2019-03-07T15:00:34.364+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0rq0:",
        "customfield_12314139": null
    }
}