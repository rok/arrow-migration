{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382735",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735",
    "key": "ARROW-13010",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niranda",
            "name": "niranda",
            "key": "niranda",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39936",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39936",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39936",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39936"
            },
            "displayName": "Niranda Perera",
            "active": true,
            "timeZone": "America/Indiana/Indianapolis"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 31200,
            "total": 31200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 31200,
            "total": 31200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13010/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 52,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/608917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera opened a new pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487\n\n\n   This change adds a `Bitmap::VisitWordsAndWrite` method, that outputs the values of the visitor lambda function to a provided bitmap. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T04:24:39.042+0000",
                    "updated": "2021-06-09T04:24:39.042+0000",
                    "started": "2021-06-09T04:24:39.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608917",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/608918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-857361898\n\n\n   https://issues.apache.org/jira/browse/ARROW-13010\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T04:24:52.717+0000",
                    "updated": "2021-06-09T04:24:52.717+0000",
                    "started": "2021-06-09T04:24:52.717+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608918",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/610012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-859187060\n\n\n   @github-actions autotune \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-14T07:09:31.758+0000",
                    "updated": "2021-06-14T07:09:31.758+0000",
                    "started": "2021-06-14T07:09:31.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "610012",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r652003314\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -67,5 +69,58 @@ void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_ar\n   bits[bytes_end - 1] |= static_cast<uint8_t>(fill_byte & ~last_byte_mask);\n }\n \n+template <bool value>\n+void SetBitmapImpl(uint8_t* data, int64_t offset, int64_t length) {\n+  //                 offset  length\n+  // data              |<------------->|\n+  //   |--------|...|--------|...|--------|\n+  //                   |<--->|   |<--->|\n+  //                     pro       epi\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    return;\n+  }\n+\n+  constexpr uint8_t set_byte = value ? UINT8_MAX : 0;\n+\n+  int prologue = static_cast<int>(((offset + 7) / 8) * 8 - offset);\n+  DCHECK_LT(prologue, 8);\n+\n+  if (length < prologue) {  // special case where a mask is required\n+    //             offset length\n+    // data             |<->|\n+    //   |--------|...|--------|...\n+    //         mask --> |111|\n+    //                  |<---->|\n+    //                     pro\n+    uint8_t mask = BitUtil::kPrecedingBitmask[8 - prologue] ^\n+                   BitUtil::kPrecedingBitmask[8 - prologue + length];\n+    data[offset / 8] |= mask;\n+    return;\n+  }\n+\n+  // align to a byte boundary\n+  data[offset / 8] = BitUtil::SpliceWord(offset, data[offset / 8], set_byte);\n\nReview comment:\n       ```suggestion\r\n     data[offset / 8] = BitUtil::SpliceWord(prologue, data[offset / 8], set_byte);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -67,5 +69,58 @@ void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_ar\n   bits[bytes_end - 1] |= static_cast<uint8_t>(fill_byte & ~last_byte_mask);\n }\n \n+template <bool value>\n+void SetBitmapImpl(uint8_t* data, int64_t offset, int64_t length) {\n+  //                 offset  length\n+  // data              |<------------->|\n+  //   |--------|...|--------|...|--------|\n+  //                   |<--->|   |<--->|\n+  //                     pro       epi\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    return;\n+  }\n+\n+  constexpr uint8_t set_byte = value ? UINT8_MAX : 0;\n+\n+  int prologue = static_cast<int>(((offset + 7) / 8) * 8 - offset);\n\nReview comment:\n       ```suggestion\r\n     auto prologue = BitUtil::RoundUp(offset, 8) - offset;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bitmap.h\n##########\n@@ -73,6 +76,11 @@ class ARROW_EXPORT Bitmap : public util::ToStringOstreamable<Bitmap>,\n     return Bitmap(buffer_, offset_ + offset, length);\n   }\n \n+  void Stride(int64_t stride) {\n+    this->offset_ += stride;\n+    this->length_ -= stride;\n+  }\n+\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   \r\n   This seems to be unused\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -2156,5 +2187,169 @@ TEST(Bitmap, VisitWordsAnd) {\n   }\n }\n \n+void random_bool_vector(std::vector<bool>& vec, int64_t size, double p = 0.5) {\n+  vec.reserve(size);\n+  std::random_device rd;\n+  std::mt19937 gen(rd());\n+  std::bernoulli_distribution d(p);\n+\n+  for (int n = 0; n < size; ++n) {\n+    vec.push_back(d(gen));\n+  }\n+}\n+\n+std::string VectorToString(const std::vector<bool>& v) {\n+  std::string out(v.size() + +((v.size() - 1) / 8), ' ');\n+  for (size_t i = 0; i < v.size(); ++i) {\n+    out[i + (i / 8)] = v[i] ? '1' : '0';\n+  }\n+  return out;\n+}\n+\n+void VerifyBoolVectorAndBitmap(const Bitmap& bitmap, const std::vector<bool>& expected) {\n+  arrow::BooleanBuilder boolean_builder;\n+  ASSERT_OK(boolean_builder.AppendValues(expected));\n+  ASSERT_OK_AND_ASSIGN(auto arr, boolean_builder.Finish());\n+\n+  ASSERT_TRUE(BitmapEquals(bitmap.buffer()->data(), bitmap.offset(),\n+                           arr->data()->buffers[1]->data(), 0, expected.size()))\n+      << \"exp: \" << VectorToString(expected) << \"\\ngot: \" << bitmap.ToString();\n+}\n+\n+class TestBitmapVisitAndWriteOutputNoOffset : public ::testing::TestWithParam<int32_t> {};\n+\n+TEST_P(TestBitmapVisitAndWriteOutputNoOffset, Test1) {\n+  auto part = GetParam();\n+  int64_t bits = 4 * part;\n+  std::vector<bool> data;\n+  random_bool_vector(data, bits);\n+\n+  arrow::BooleanBuilder boolean_builder;\n+  ASSERT_OK(boolean_builder.AppendValues(data));\n+  ASSERT_OK_AND_ASSIGN(auto arrow_data, boolean_builder.Finish());\n+\n+  std::shared_ptr<Buffer>& arrow_buffer = arrow_data->data()->buffers[1];\n+\n+  Bitmap bm0(arrow_buffer, 0, part);\n+  Bitmap bm1 = bm0.Slice(part * 1, part);  // this goes beyond bm0's len\n+  Bitmap bm2 = bm0.Slice(part * 2, part);  // this goes beyond bm0's len\n+\n+  std::array<Bitmap, 2> out_bms;\n+  ASSERT_OK_AND_ASSIGN(auto out0, AllocateBitmap(part));\n+  ASSERT_OK_AND_ASSIGN(auto out1, AllocateBitmap(part));\n+  out_bms[0] = Bitmap(out0, 0, part);\n+  out_bms[1] = Bitmap(out1, 0, part);\n+\n+  std::vector<bool> v0(data.begin(), data.begin() + part);\n+  std::vector<bool> v1(data.begin() + part * 1, data.begin() + part * 2);\n+  std::vector<bool> v2(data.begin() + part * 2, data.begin() + part * 3);\n+\n+  // out0 = bm0 & bm1, out1= bm0 | bm2\n+  std::array<Bitmap, 3> in_bms{bm0, bm1, bm2};\n+  Bitmap::VisitWordsAndWrite(\n+      in_bms, &out_bms,\n+      [](const std::array<uint64_t, 3>& in, std::array<uint64_t, 2>* out) {\n+        out->at(0) = in[0] & in[1];\n+        out->at(1) = in[0] | in[2];\n+      });\n+\n+  std::vector<bool> out_v0(part);\n+  std::vector<bool> out_v1(part);\n+  // v3 = v0 & v1\n+  std::transform(v0.begin(), v0.end(), v1.begin(), out_v0.begin(),\n+                 std::logical_and<bool>());\n+  // v3 |= v2\n+  std::transform(v0.begin(), v0.end(), v2.begin(), out_v1.begin(),\n+                 std::logical_or<bool>());\n+\n+  //  std::cout << \"v0: \" << VectorToString(v0) << \"\\n\"\n+  //            << \"b0: \" << bm0.ToString() << \"\\n\"\n+  //            << \"v1: \" << VectorToString(v1) << \"\\n\"\n+  //            << \"b1: \" << bm1.ToString() << \"\\n\"\n+  //            << \"v2: \" << VectorToString(v2) << \"\\n\"\n+  //            << \"b2: \" << bm2.ToString() << \"\\n\";\n+\n\nReview comment:\n       ```suggestion\r\n   ```\r\n   Alternatively, you could attach this output to an assertion so it only shows if a test fails\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -2156,5 +2187,169 @@ TEST(Bitmap, VisitWordsAnd) {\n   }\n }\n \n+void random_bool_vector(std::vector<bool>& vec, int64_t size, double p = 0.5) {\n+  vec.reserve(size);\n+  std::random_device rd;\n+  std::mt19937 gen(rd());\n+  std::bernoulli_distribution d(p);\n+\n+  for (int n = 0; n < size; ++n) {\n+    vec.push_back(d(gen));\n+  }\n+}\n+\n+std::string VectorToString(const std::vector<bool>& v) {\n+  std::string out(v.size() + +((v.size() - 1) / 8), ' ');\n+  for (size_t i = 0; i < v.size(); ++i) {\n+    out[i + (i / 8)] = v[i] ? '1' : '0';\n+  }\n+  return out;\n+}\n+\n+void VerifyBoolVectorAndBitmap(const Bitmap& bitmap, const std::vector<bool>& expected) {\n+  arrow::BooleanBuilder boolean_builder;\n+  ASSERT_OK(boolean_builder.AppendValues(expected));\n+  ASSERT_OK_AND_ASSIGN(auto arr, boolean_builder.Finish());\n+\n+  ASSERT_TRUE(BitmapEquals(bitmap.buffer()->data(), bitmap.offset(),\n+                           arr->data()->buffers[1]->data(), 0, expected.size()))\n+      << \"exp: \" << VectorToString(expected) << \"\\ngot: \" << bitmap.ToString();\n+}\n+\n+class TestBitmapVisitAndWriteOutputNoOffset : public ::testing::TestWithParam<int32_t> {};\n+\n+TEST_P(TestBitmapVisitAndWriteOutputNoOffset, Test1) {\n+  auto part = GetParam();\n+  int64_t bits = 4 * part;\n+  std::vector<bool> data;\n+  random_bool_vector(data, bits);\n\nReview comment:\n       It's worth noting that we already have some utilities for generating random data. For example, we could reuse `RandomArrayGenerator`\r\n   \r\n   ```c++\r\n     random::RandomArrayGenerator rng(42);\r\n     std::shared_ptr<Buffer> buffer = rng.NullBitmap(bits, 0.5);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -67,5 +69,58 @@ void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_ar\n   bits[bytes_end - 1] |= static_cast<uint8_t>(fill_byte & ~last_byte_mask);\n }\n \n+template <bool value>\n+void SetBitmapImpl(uint8_t* data, int64_t offset, int64_t length) {\n+  //                 offset  length\n+  // data              |<------------->|\n+  //   |--------|...|--------|...|--------|\n+  //                   |<--->|   |<--->|\n+  //                     pro       epi\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    return;\n+  }\n+\n+  constexpr uint8_t set_byte = value ? UINT8_MAX : 0;\n+\n+  int prologue = static_cast<int>(((offset + 7) / 8) * 8 - offset);\n+  DCHECK_LT(prologue, 8);\n+\n+  if (length < prologue) {  // special case where a mask is required\n+    //             offset length\n+    // data             |<->|\n+    //   |--------|...|--------|...\n+    //         mask --> |111|\n+    //                  |<---->|\n+    //                     pro\n+    uint8_t mask = BitUtil::kPrecedingBitmask[8 - prologue] ^\n+                   BitUtil::kPrecedingBitmask[8 - prologue + length];\n+    data[offset / 8] |= mask;\n\nReview comment:\n       This seems to only be correct for `set_byte == 0xFF`, since we always set the masked bits. Additionally I think it could be written more clearly:\r\n   ```suggestion\r\n       uint8_t old_bits = BitUtil::LeadingBits(data[offset / 8], offset) |\r\n                          BitUtil::TrailingBits(data[offset / 8], length + offset);\r\n       uint8_t new_bits = BitUtil::TrailingBits(set_byte, offset) &\r\n                          BitUtil::LeadingBits(set_byte, length + offset);\r\n       data[offset / 8] = old_bits | new_bits;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -316,5 +316,29 @@ static inline void SetBitTo(uint8_t* bits, int64_t i, bool bit_is_set) {\n ARROW_EXPORT\n void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_are_set);\n \n+/// \\brief Sets all bits in the bitmap to true\n+ARROW_EXPORT\n+void SetBitmap(uint8_t* data, int64_t offset, int64_t length);\n+\n+/// \\brief Clears all bits in the bitmap (set to false)\n+ARROW_EXPORT\n+void ClearBitmap(uint8_t* data, int64_t offset, int64_t length);\n+\n+template <typename Word>\n+constexpr Word WordBitMask(int i) {\n+  return (static_cast<Word>(1) << i) - 1;\n+}\n\nReview comment:\n       This incurs undefined behavior for `i >= sizeof(Word) * 8` because we'll shift that 1 right out of the integer. Also please add a comment explaining the output, maybe rename too\r\n   ```suggestion\r\n   template <typename Word, Word all = static_cast<Word>(~static_cast<Word>(0))>\r\n   constexpr Word TrailingWordBitmask(int i) {\r\n     return ARROW_PREDICT_FALSE(i >= sizeof(Word) * 8) ? 0 : all << i;\r\n   }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_boolean.cc\n##########\n@@ -551,14 +552,11 @@ void RegisterScalarBoolean(FunctionRegistry* registry) {\n \n   // The Kleene logic kernels cannot write into sliced output bitmaps\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_util.cc\n##########\n@@ -67,5 +69,58 @@ void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_ar\n   bits[bytes_end - 1] |= static_cast<uint8_t>(fill_byte & ~last_byte_mask);\n }\n \n+template <bool value>\n+void SetBitmapImpl(uint8_t* data, int64_t offset, int64_t length) {\n+  //                 offset  length\n+  // data              |<------------->|\n+  //   |--------|...|--------|...|--------|\n+  //                   |<--->|   |<--->|\n+  //                     pro       epi\n+  if (ARROW_PREDICT_FALSE(length == 0)) {\n+    return;\n+  }\n+\n+  constexpr uint8_t set_byte = value ? UINT8_MAX : 0;\n+\n+  int prologue = static_cast<int>(((offset + 7) / 8) * 8 - offset);\n+  DCHECK_LT(prologue, 8);\n+\n+  if (length < prologue) {  // special case where a mask is required\n+    //             offset length\n+    // data             |<->|\n+    //   |--------|...|--------|...\n+    //         mask --> |111|\n+    //                  |<---->|\n+    //                     pro\n+    uint8_t mask = BitUtil::kPrecedingBitmask[8 - prologue] ^\n+                   BitUtil::kPrecedingBitmask[8 - prologue + length];\n+    data[offset / 8] |= mask;\n+    return;\n+  }\n+\n+  // align to a byte boundary\n+  data[offset / 8] = BitUtil::SpliceWord(offset, data[offset / 8], set_byte);\n+  offset += prologue;\n+  length -= prologue;\n+\n+  // set values per byte\n+  DCHECK_EQ(offset % 8, 0);\n+  std::memset(data + offset / 8, set_byte, length / 8);\n+  offset += ((length / 8) * 8);\n+  length -= ((length / 8) * 8);\n\nReview comment:\n       ```suggestion\r\n     offset += BitUtil::RoundDown(length, 8);\r\n     length -= BitUtil::RoundDown(length, 8);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -316,5 +316,29 @@ static inline void SetBitTo(uint8_t* bits, int64_t i, bool bit_is_set) {\n ARROW_EXPORT\n void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_are_set);\n \n+/// \\brief Sets all bits in the bitmap to true\n+ARROW_EXPORT\n+void SetBitmap(uint8_t* data, int64_t offset, int64_t length);\n\nReview comment:\n       We also have SetBitsTo, which has similar functionality. In a follow up let's benchmark and deduplicate them by rewriting the less efficient one as a wrapper of the other (probably they will have identical performance, in which case we keep whichever is easier to read)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -72,18 +72,6 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   Bitmap cond_valid{cond.buffers[0], cond.offset, cond.length};\n   Bitmap left_valid = GetBitmap(left_d, 0);\n   Bitmap right_valid = GetBitmap(right_d, 0);\n-  // sometimes Bitmaps will be ignored, in which case we replace access to them with\n-  // duplicated (probably elided) access to cond_data\n-  const Bitmap& _ = cond_data;\n-\n-  // lambda function that will be used inside the visitor\n-  uint64_t* out_validity = nullptr;\n-  int64_t i = 0;\n-  auto apply = [&](uint64_t c_valid, uint64_t c_data, uint64_t l_valid,\n-                   uint64_t r_valid) {\n-    out_validity[i] = c_valid & ((c_data & l_valid) | (~c_data & r_valid));\n-    i++;\n-  };\n \n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n\nReview comment:\n       These cases need to be reexamined since we're writing into slices- it's an error to allocate or steal a buffer since we might be discarding values already written to other slices of `output`\n\n##########\nFile path: cpp/src/arrow/util/bitmap.h\n##########\n@@ -225,6 +248,99 @@ class ARROW_EXPORT Bitmap : public util::ToStringOstreamable<Bitmap>,\n     return min_offset;\n   }\n \n+  /// \\brief Visit words of bits from each input bitmap as array<Word, N> and collects\n+  /// outputs to an array<Word, M>, to be written into the output bitmaps accordingly.\n+  ///\n+  /// All bitmaps must have identical length. The first bit in a visited bitmap\n+  /// may be offset within the first visited word, but words will otherwise contain\n+  /// densely packed bits loaded from the bitmap. That offset within the first word is\n+  /// returned.\n+  /// Visitor is expected to have the following signature\n+  ///     [](const std::array<Word, N>& in_words, std::array<Word, M>* out_words){...}\n+  ///\n+  // NOTE: this function is efficient on 3+ sufficiently large bitmaps.\n+  // It also has a large prolog / epilog overhead and should be used\n+  // carefully in other cases.\n+  // For 2 bitmaps or less, and/or smaller bitmaps, see also VisitTwoBitBlocksVoid\n+  // and BitmapUInt64Reader.\n+  template <size_t N, size_t M, typename Visitor,\n+            typename Word = typename std::decay<\n+                internal::call_traits::argument_type<0, Visitor&&>>::type::value_type>\n+  static void VisitWordsAndWrite(const std::array<Bitmap, N>& bitmaps_arg,\n+                                 std::array<Bitmap, M>* out_bitmaps_arg,\n+                                 Visitor&& visitor) {\n+    constexpr int64_t kBitWidth = sizeof(Word) * 8;\n+\n+    int64_t bit_length = BitLength(bitmaps_arg);\n+    assert(bit_length == BitLength(*out_bitmaps_arg));\n+\n+    std::array<BitmapWordReader<Word>, N> readers;\n+    for (size_t i = 0; i < N; ++i) {\n+      readers[i] = BitmapWordReader<Word>(bitmaps_arg[i].buffer_->data(),\n+                                          bitmaps_arg[i].offset_, bitmaps_arg[i].length_);\n+    }\n+\n+    std::array<BitmapWordWriter<Word>, M> writers;\n+    for (size_t i = 0; i < M; ++i) {\n+      const Bitmap& out_bitmap = out_bitmaps_arg->at(i);\n+      writers[i] = BitmapWordWriter<Word>(out_bitmap.buffer_->mutable_data(),\n+                                          out_bitmap.offset_, out_bitmap.length_);\n+    }\n+\n+    std::array<Word, N> visited_words;\n+    visited_words.fill(0);\n+    std::array<Word, M> output_words;\n+    output_words.fill(0);\n+\n+    // every reader will have same number of words, since they are same length'ed\n+    // todo this will be inefficient in some cases. When there are offsets beyond Word\n+    //  boundary, every Word would have to be created from 2 adjoining Words\n\nReview comment:\n       Please open a follow up JIRA for this. One way to handle this would be adding `BitmapWordReader::NextLeadingByte()` so that we can consume bits until at least one bitmap has offset == 0\r\n   ```suggestion\r\n       // TODO($JIRA) this will be inefficient in some cases. When there are offsets beyond Word\r\n       // boundary, every Word would have to be created from 2 adjoining Words\r\n   ```\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -2156,5 +2187,169 @@ TEST(Bitmap, VisitWordsAnd) {\n   }\n }\n \n+void random_bool_vector(std::vector<bool>& vec, int64_t size, double p = 0.5) {\n+  vec.reserve(size);\n+  std::random_device rd;\n+  std::mt19937 gen(rd());\n+  std::bernoulli_distribution d(p);\n+\n+  for (int n = 0; n < size; ++n) {\n+    vec.push_back(d(gen));\n+  }\n+}\n+\n+std::string VectorToString(const std::vector<bool>& v) {\n+  std::string out(v.size() + +((v.size() - 1) / 8), ' ');\n+  for (size_t i = 0; i < v.size(); ++i) {\n+    out[i + (i / 8)] = v[i] ? '1' : '0';\n+  }\n+  return out;\n+}\n+\n+void VerifyBoolVectorAndBitmap(const Bitmap& bitmap, const std::vector<bool>& expected) {\n+  arrow::BooleanBuilder boolean_builder;\n+  ASSERT_OK(boolean_builder.AppendValues(expected));\n+  ASSERT_OK_AND_ASSIGN(auto arr, boolean_builder.Finish());\n+\n+  ASSERT_TRUE(BitmapEquals(bitmap.buffer()->data(), bitmap.offset(),\n+                           arr->data()->buffers[1]->data(), 0, expected.size()))\n+      << \"exp: \" << VectorToString(expected) << \"\\ngot: \" << bitmap.ToString();\n+}\n+\n+class TestBitmapVisitAndWriteOutputNoOffset : public ::testing::TestWithParam<int32_t> {};\n+\n+TEST_P(TestBitmapVisitAndWriteOutputNoOffset, Test1) {\n+  auto part = GetParam();\n+  int64_t bits = 4 * part;\n+  std::vector<bool> data;\n+  random_bool_vector(data, bits);\n\nReview comment:\n       Also, if you use `Bitmap` consistently instead of `std::vector<bool>` you can reuse `Bitmap::{Equals, ToString, Diff}`\n\n##########\nFile path: cpp/src/arrow/util/bitmap.h\n##########\n@@ -225,6 +248,99 @@ class ARROW_EXPORT Bitmap : public util::ToStringOstreamable<Bitmap>,\n     return min_offset;\n   }\n \n+  /// \\brief Visit words of bits from each input bitmap as array<Word, N> and collects\n+  /// outputs to an array<Word, M>, to be written into the output bitmaps accordingly.\n+  ///\n+  /// All bitmaps must have identical length. The first bit in a visited bitmap\n+  /// may be offset within the first visited word, but words will otherwise contain\n+  /// densely packed bits loaded from the bitmap. That offset within the first word is\n+  /// returned.\n+  /// Visitor is expected to have the following signature\n+  ///     [](const std::array<Word, N>& in_words, std::array<Word, M>* out_words){...}\n+  ///\n+  // NOTE: this function is efficient on 3+ sufficiently large bitmaps.\n+  // It also has a large prolog / epilog overhead and should be used\n+  // carefully in other cases.\n+  // For 2 bitmaps or less, and/or smaller bitmaps, see also VisitTwoBitBlocksVoid\n+  // and BitmapUInt64Reader.\n+  template <size_t N, size_t M, typename Visitor,\n+            typename Word = typename std::decay<\n+                internal::call_traits::argument_type<0, Visitor&&>>::type::value_type>\n+  static void VisitWordsAndWrite(const std::array<Bitmap, N>& bitmaps_arg,\n+                                 std::array<Bitmap, M>* out_bitmaps_arg,\n+                                 Visitor&& visitor) {\n+    constexpr int64_t kBitWidth = sizeof(Word) * 8;\n+\n+    int64_t bit_length = BitLength(bitmaps_arg);\n+    assert(bit_length == BitLength(*out_bitmaps_arg));\n+\n+    std::array<BitmapWordReader<Word>, N> readers;\n+    for (size_t i = 0; i < N; ++i) {\n+      readers[i] = BitmapWordReader<Word>(bitmaps_arg[i].buffer_->data(),\n+                                          bitmaps_arg[i].offset_, bitmaps_arg[i].length_);\n+    }\n+\n+    std::array<BitmapWordWriter<Word>, M> writers;\n+    for (size_t i = 0; i < M; ++i) {\n+      const Bitmap& out_bitmap = out_bitmaps_arg->at(i);\n+      writers[i] = BitmapWordWriter<Word>(out_bitmap.buffer_->mutable_data(),\n+                                          out_bitmap.offset_, out_bitmap.length_);\n+    }\n+\n+    std::array<Word, N> visited_words;\n+    visited_words.fill(0);\n+    std::array<Word, M> output_words;\n+    output_words.fill(0);\n+\n+    // every reader will have same number of words, since they are same length'ed\n+    // todo this will be inefficient in some cases. When there are offsets beyond Word\n+    //  boundary, every Word would have to be created from 2 adjoining Words\n\nReview comment:\n       Additionally, IMO this usage of `/BitmapWord(Reader|Writer)/` is more readable than the implementation of VisitWords. Maybe not in this PR, but: let's rewrite/remove the complicated one\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -1975,6 +1975,37 @@ TEST(BitUtil, BitsetStack) {\n   ASSERT_EQ(stack.TopSize(), 0);\n }\n \n+template <typename Word>\n+void CheckSplice(int n, Word low, Word high) {\n+  std::bitset<sizeof(Word) * 8> ret;\n+  for (size_t i = 0; i < ret.size(); i++) {\n+    ret[i] = i < static_cast<size_t>(n)\n+                 ? BitUtil::GetBit(reinterpret_cast<uint8_t*>(&low), i)\n+                 : BitUtil::GetBit(reinterpret_cast<uint8_t*>(&high), i);\n+  }\n+\n+  ASSERT_EQ(static_cast<Word>(ret.to_ulong()), BitUtil::SpliceWord(n, low, high));\n\nReview comment:\n       For GTest assertions, the expected value is on the right\r\n   ```suggestion\r\n     ASSERT_EQ(BitUtil::SpliceWord(n, low, high), static_cast<Word>(ret.to_ulong());\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T18:31:09.518+0000",
                    "updated": "2021-06-15T18:31:09.518+0000",
                    "started": "2021-06-15T18:31:09.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611516",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-861737568\n\n\n   @ursabot please benchmark\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T18:31:32.855+0000",
                    "updated": "2021-06-15T18:31:32.855+0000",
                    "started": "2021-06-15T18:31:32.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611517",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-861738074\n\n\n   Benchmark runs are scheduled for baseline = 39dcb43dd26df51391f0da14b6e6285d612f3829 and contender = d0cead51aa9eb0f5e4a9b094236632ffdb8c4436. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/7c809fd9d9af45b6ac360f31063f84d2...063924f33a8e4656b1ce37a3e9229ee8/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/ea65cb2d35d741f0abaa1cc1e5481373...ba93afcabf9643169ffcd668f08c85ba/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/086d84702ca54d9a8d3978d18b4ec2f6...b76a1d0626d44a77a7dac62cc0a234c6/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T18:32:25.961+0000",
                    "updated": "2021-06-15T18:32:25.961+0000",
                    "started": "2021-06-15T18:32:25.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611518",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r652054092\n\n\n\n##########\nFile path: cpp/src/arrow/util/bitmap.h\n##########\n@@ -225,6 +248,99 @@ class ARROW_EXPORT Bitmap : public util::ToStringOstreamable<Bitmap>,\n     return min_offset;\n   }\n \n+  /// \\brief Visit words of bits from each input bitmap as array<Word, N> and collects\n+  /// outputs to an array<Word, M>, to be written into the output bitmaps accordingly.\n+  ///\n+  /// All bitmaps must have identical length. The first bit in a visited bitmap\n+  /// may be offset within the first visited word, but words will otherwise contain\n+  /// densely packed bits loaded from the bitmap. That offset within the first word is\n+  /// returned.\n+  /// Visitor is expected to have the following signature\n+  ///     [](const std::array<Word, N>& in_words, std::array<Word, M>* out_words){...}\n+  ///\n+  // NOTE: this function is efficient on 3+ sufficiently large bitmaps.\n+  // It also has a large prolog / epilog overhead and should be used\n+  // carefully in other cases.\n+  // For 2 bitmaps or less, and/or smaller bitmaps, see also VisitTwoBitBlocksVoid\n+  // and BitmapUInt64Reader.\n+  template <size_t N, size_t M, typename Visitor,\n+            typename Word = typename std::decay<\n+                internal::call_traits::argument_type<0, Visitor&&>>::type::value_type>\n+  static void VisitWordsAndWrite(const std::array<Bitmap, N>& bitmaps_arg,\n+                                 std::array<Bitmap, M>* out_bitmaps_arg,\n+                                 Visitor&& visitor) {\n+    constexpr int64_t kBitWidth = sizeof(Word) * 8;\n+\n+    int64_t bit_length = BitLength(bitmaps_arg);\n+    assert(bit_length == BitLength(*out_bitmaps_arg));\n+\n+    std::array<BitmapWordReader<Word>, N> readers;\n+    for (size_t i = 0; i < N; ++i) {\n+      readers[i] = BitmapWordReader<Word>(bitmaps_arg[i].buffer_->data(),\n+                                          bitmaps_arg[i].offset_, bitmaps_arg[i].length_);\n+    }\n+\n+    std::array<BitmapWordWriter<Word>, M> writers;\n+    for (size_t i = 0; i < M; ++i) {\n+      const Bitmap& out_bitmap = out_bitmaps_arg->at(i);\n+      writers[i] = BitmapWordWriter<Word>(out_bitmap.buffer_->mutable_data(),\n+                                          out_bitmap.offset_, out_bitmap.length_);\n+    }\n+\n+    std::array<Word, N> visited_words;\n+    visited_words.fill(0);\n+    std::array<Word, M> output_words;\n+    output_words.fill(0);\n+\n+    // every reader will have same number of words, since they are same length'ed\n+    // todo this will be inefficient in some cases. When there are offsets beyond Word\n+    //  boundary, every Word would have to be created from 2 adjoining Words\n+    auto n_words = readers[0].words();\n+    bit_length -= n_words * kBitWidth;\n+    while (n_words--) {\n+      // first collect all words to visited_words array\n+      for (size_t i = 0; i < N; i++) {\n+        visited_words[i] = readers[i].NextWord();\n+      }\n+      visitor(visited_words, &output_words);\n+      for (size_t i = 0; i < M; i++) {\n+        writers[i].PutNextWord(output_words[i]);\n+      }\n+    }\n+\n+    // every reader will have same number of trailing bytes, because of the above reason\n+    // tailing portion could be more than one word! (ref: BitmapWordReader constructor)\n+    // remaining full/ partial words to write\n+\n+    if (bit_length) {\n+      // convert the word visitor lambda to a byte_visitor\n+      auto byte_visitor = [&](const std::array<uint8_t, N>& in,\n+                              std::array<uint8_t, M>* out) {\n+        std::array<Word, N> in_words;\n+        std::array<Word, M> out_words;\n+        std::copy(in.begin(), in.end(), in_words.begin());\n+        visitor(in_words, &out_words);\n+        std::move(out_words.begin(), out_words.end(), out->begin());\n\nReview comment:\n       Looks like this is prompts a conversion warning on MSVC\r\n   https://github.com/apache/arrow/pull/10487/checks?check_run_id=2822703161#step:7:774\r\n   You'll have to write the loop out with explicit casts\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T18:34:03.191+0000",
                    "updated": "2021-06-15T18:34:03.191+0000",
                    "started": "2021-06-15T18:34:03.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611519",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611520",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r652054735\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util.h\n##########\n@@ -316,5 +316,29 @@ static inline void SetBitTo(uint8_t* bits, int64_t i, bool bit_is_set) {\n ARROW_EXPORT\n void SetBitsTo(uint8_t* bits, int64_t start_offset, int64_t length, bool bits_are_set);\n \n+/// \\brief Sets all bits in the bitmap to true\n+ARROW_EXPORT\n+void SetBitmap(uint8_t* data, int64_t offset, int64_t length);\n+\n+/// \\brief Clears all bits in the bitmap (set to false)\n+ARROW_EXPORT\n+void ClearBitmap(uint8_t* data, int64_t offset, int64_t length);\n+\n+template <typename Word>\n+constexpr Word WordBitMask(int i) {\n+  return (static_cast<Word>(1) << i) - 1;\n+}\n\nReview comment:\n       That will fix up this UBSAN failure, too: https://github.com/apache/arrow/pull/10487/checks?check_run_id=2822702761#step:8:3714\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T18:35:06.604+0000",
                    "updated": "2021-06-15T18:35:06.604+0000",
                    "started": "2021-06-15T18:35:06.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611520",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-861738074\n\n\n   Benchmark runs are scheduled for baseline = 39dcb43dd26df51391f0da14b6e6285d612f3829 and contender = d0cead51aa9eb0f5e4a9b094236632ffdb8c4436. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/7c809fd9d9af45b6ac360f31063f84d2...063924f33a8e4656b1ce37a3e9229ee8/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/ea65cb2d35d741f0abaa1cc1e5481373...ba93afcabf9643169ffcd668f08c85ba/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/086d84702ca54d9a8d3978d18b4ec2f6...b76a1d0626d44a77a7dac62cc0a234c6/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T18:54:25.708+0000",
                    "updated": "2021-06-15T18:54:25.708+0000",
                    "started": "2021-06-15T18:54:25.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611527",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-861738074\n\n\n   Benchmark runs are scheduled for baseline = 39dcb43dd26df51391f0da14b6e6285d612f3829 and contender = d0cead51aa9eb0f5e4a9b094236632ffdb8c4436. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/7c809fd9d9af45b6ac360f31063f84d2...063924f33a8e4656b1ce37a3e9229ee8/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/ea65cb2d35d741f0abaa1cc1e5481373...ba93afcabf9643169ffcd668f08c85ba/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/086d84702ca54d9a8d3978d18b4ec2f6...b76a1d0626d44a77a7dac62cc0a234c6/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T19:22:24.724+0000",
                    "updated": "2021-06-15T19:22:24.724+0000",
                    "started": "2021-06-15T19:22:24.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611551",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/611628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-861738074\n\n\n   Benchmark runs are scheduled for baseline = 39dcb43dd26df51391f0da14b6e6285d612f3829 and contender = d0cead51aa9eb0f5e4a9b094236632ffdb8c4436. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/7c809fd9d9af45b6ac360f31063f84d2...063924f33a8e4656b1ce37a3e9229ee8/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/ea65cb2d35d741f0abaa1cc1e5481373...ba93afcabf9643169ffcd668f08c85ba/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/086d84702ca54d9a8d3978d18b4ec2f6...b76a1d0626d44a77a7dac62cc0a234c6/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T22:01:18.249+0000",
                    "updated": "2021-06-15T22:01:18.249+0000",
                    "started": "2021-06-15T22:01:18.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611628",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/612053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r654451587\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_util_test.cc\n##########\n@@ -2156,5 +2187,169 @@ TEST(Bitmap, VisitWordsAnd) {\n   }\n }\n \n+void random_bool_vector(std::vector<bool>& vec, int64_t size, double p = 0.5) {\n+  vec.reserve(size);\n+  std::random_device rd;\n+  std::mt19937 gen(rd());\n+  std::bernoulli_distribution d(p);\n+\n+  for (int n = 0; n < size; ++n) {\n+    vec.push_back(d(gen));\n+  }\n+}\n+\n+std::string VectorToString(const std::vector<bool>& v) {\n+  std::string out(v.size() + +((v.size() - 1) / 8), ' ');\n+  for (size_t i = 0; i < v.size(); ++i) {\n+    out[i + (i / 8)] = v[i] ? '1' : '0';\n+  }\n+  return out;\n+}\n+\n+void VerifyBoolVectorAndBitmap(const Bitmap& bitmap, const std::vector<bool>& expected) {\n+  arrow::BooleanBuilder boolean_builder;\n+  ASSERT_OK(boolean_builder.AppendValues(expected));\n+  ASSERT_OK_AND_ASSIGN(auto arr, boolean_builder.Finish());\n+\n+  ASSERT_TRUE(BitmapEquals(bitmap.buffer()->data(), bitmap.offset(),\n+                           arr->data()->buffers[1]->data(), 0, expected.size()))\n+      << \"exp: \" << VectorToString(expected) << \"\\ngot: \" << bitmap.ToString();\n+}\n+\n+class TestBitmapVisitAndWriteOutputNoOffset : public ::testing::TestWithParam<int32_t> {};\n+\n+TEST_P(TestBitmapVisitAndWriteOutputNoOffset, Test1) {\n+  auto part = GetParam();\n+  int64_t bits = 4 * part;\n+  std::vector<bool> data;\n+  random_bool_vector(data, bits);\n\nReview comment:\n       I dont know why I didn't do that previously! :joy: \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -72,18 +72,6 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   Bitmap cond_valid{cond.buffers[0], cond.offset, cond.length};\n   Bitmap left_valid = GetBitmap(left_d, 0);\n   Bitmap right_valid = GetBitmap(right_d, 0);\n-  // sometimes Bitmaps will be ignored, in which case we replace access to them with\n-  // duplicated (probably elided) access to cond_data\n-  const Bitmap& _ = cond_data;\n-\n-  // lambda function that will be used inside the visitor\n-  uint64_t* out_validity = nullptr;\n-  int64_t i = 0;\n-  auto apply = [&](uint64_t c_valid, uint64_t c_data, uint64_t l_valid,\n-                   uint64_t r_valid) {\n-    out_validity[i] = c_valid & ((c_data & l_valid) | (~c_data & r_valid));\n-    i++;\n-  };\n \n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n\nReview comment:\n       One thing to note here is, `if-else` kernels have the following, \r\n   ```c++\r\n       kernel.null_handling = NullHandling::COMPUTED_NO_PREALLOCATE;\r\n       kernel.mem_allocation = MemAllocation::NO_PREALLOCATE;\r\n   ```\r\n   So, I allocating buffers are entirely handled by the kernel. So, I believe writing into slices should work without a problem IMO. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:14:50.470+0000",
                    "updated": "2021-06-18T21:14:50.470+0000",
                    "started": "2021-06-18T21:14:50.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612053",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/612106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r654669300\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -72,18 +72,6 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   Bitmap cond_valid{cond.buffers[0], cond.offset, cond.length};\n   Bitmap left_valid = GetBitmap(left_d, 0);\n   Bitmap right_valid = GetBitmap(right_d, 0);\n-  // sometimes Bitmaps will be ignored, in which case we replace access to them with\n-  // duplicated (probably elided) access to cond_data\n-  const Bitmap& _ = cond_data;\n-\n-  // lambda function that will be used inside the visitor\n-  uint64_t* out_validity = nullptr;\n-  int64_t i = 0;\n-  auto apply = [&](uint64_t c_valid, uint64_t c_data, uint64_t l_valid,\n-                   uint64_t r_valid) {\n-    out_validity[i] = c_valid & ((c_data & l_valid) | (~c_data & r_valid));\n-    i++;\n-  };\n \n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n\nReview comment:\n       Writing into slices of a preallocated output cannot proceed if the kernel does its own allocation of output: https://github.com/bkietz/arrow/blob/282c5aa713011209d6aa76e2ef5996a17161575d/cpp/src/arrow/compute/exec.cc#L703-L711\r\n   \r\n   Effectively, `can_write_into_slices` will be ignored until you have\r\n   ```c++\r\n   kernel.null_handling = NullHandling::COMPUTED_PREALLOCATE;\r\n   kernel.mem_allocation = MemAllocation::PREALLOCATE;\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:21:08.848+0000",
                    "updated": "2021-06-18T21:21:08.848+0000",
                    "started": "2021-06-18T21:21:08.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612106",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/612323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r654838986\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -72,18 +72,6 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   Bitmap cond_valid{cond.buffers[0], cond.offset, cond.length};\n   Bitmap left_valid = GetBitmap(left_d, 0);\n   Bitmap right_valid = GetBitmap(right_d, 0);\n-  // sometimes Bitmaps will be ignored, in which case we replace access to them with\n-  // duplicated (probably elided) access to cond_data\n-  const Bitmap& _ = cond_data;\n-\n-  // lambda function that will be used inside the visitor\n-  uint64_t* out_validity = nullptr;\n-  int64_t i = 0;\n-  auto apply = [&](uint64_t c_valid, uint64_t c_data, uint64_t l_valid,\n-                   uint64_t r_valid) {\n-    out_validity[i] = c_valid & ((c_data & l_valid) | (~c_data & r_valid));\n-    i++;\n-  };\n \n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n\nReview comment:\n       Got it! AFAIU only the fixed sized typed `if-else` kernels qualify for `can_write_into_slices` category then, isn't it?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-19T20:52:41.892+0000",
                    "updated": "2021-06-19T20:52:41.892+0000",
                    "started": "2021-06-19T20:52:41.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612323",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/612870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r655697111\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -72,18 +72,6 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   Bitmap cond_valid{cond.buffers[0], cond.offset, cond.length};\n   Bitmap left_valid = GetBitmap(left_d, 0);\n   Bitmap right_valid = GetBitmap(right_d, 0);\n-  // sometimes Bitmaps will be ignored, in which case we replace access to them with\n-  // duplicated (probably elided) access to cond_data\n-  const Bitmap& _ = cond_data;\n-\n-  // lambda function that will be used inside the visitor\n-  uint64_t* out_validity = nullptr;\n-  int64_t i = 0;\n-  auto apply = [&](uint64_t c_valid, uint64_t c_data, uint64_t l_valid,\n-                   uint64_t r_valid) {\n-    out_validity[i] = c_valid & ((c_data & l_valid) | (~c_data & r_valid));\n-    i++;\n-  };\n \n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n\nReview comment:\n       @bkietz I have added the changes required. Could you please review the changes?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T20:53:47.596+0000",
                    "updated": "2021-06-21T20:53:47.596+0000",
                    "started": "2021-06-21T20:53:47.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612870",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/613230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#discussion_r655697111\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -72,18 +72,6 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   Bitmap cond_valid{cond.buffers[0], cond.offset, cond.length};\n   Bitmap left_valid = GetBitmap(left_d, 0);\n   Bitmap right_valid = GetBitmap(right_d, 0);\n-  // sometimes Bitmaps will be ignored, in which case we replace access to them with\n-  // duplicated (probably elided) access to cond_data\n-  const Bitmap& _ = cond_data;\n-\n-  // lambda function that will be used inside the visitor\n-  uint64_t* out_validity = nullptr;\n-  int64_t i = 0;\n-  auto apply = [&](uint64_t c_valid, uint64_t c_data, uint64_t l_valid,\n-                   uint64_t r_valid) {\n-    out_validity[i] = c_valid & ((c_data & l_valid) | (~c_data & r_valid));\n-    i++;\n-  };\n \n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n\nReview comment:\n       @bkietz I have added the changes required. Could you please review the changes?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T08:04:09.599+0000",
                    "updated": "2021-06-22T08:04:09.599+0000",
                    "started": "2021-06-22T08:04:09.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613230",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/613677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-866299350\n\n\n   @ursabot please benchmark\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T20:10:23.937+0000",
                    "updated": "2021-06-22T20:10:23.937+0000",
                    "started": "2021-06-22T20:10:23.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613677",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/613678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-866299978\n\n\n   Benchmark runs are scheduled for baseline = c913aa3ad7b36b2eaccd4dc2cf0bc35ab893bb4a and contender = bcce18e5d4d83f0831de71b363ad91470376084c. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Scheduled] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/06ca8b60ba3d41bd9179bc6e878891d5...89927876215449bcb32cfb06a3abdc28/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/11aa31eaecc6491cb62c18f18d5fabcb...5d8b14de410341159529bec47a1e8e90/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/1650cbbcf1ab41b99efb4383f415bdaa...62ad9efc3cba4d1b90cb7a5386ba261a/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T20:11:30.362+0000",
                    "updated": "2021-06-22T20:11:30.362+0000",
                    "started": "2021-06-22T20:11:30.362+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613678",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/613679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-866302771\n\n\n   @ursabot please benchmark command=cpp-micro --suite-filter=arrow-compute-scalar-boolean-benchmark \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T20:15:48.856+0000",
                    "updated": "2021-06-22T20:15:48.856+0000",
                    "started": "2021-06-22T20:15:48.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613679",
                    "issueId": "13382735"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/worklog/613689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot edited a comment on pull request #10487:\nURL: https://github.com/apache/arrow/pull/10487#issuecomment-866299978\n\n\n   Benchmark runs are scheduled for baseline = c913aa3ad7b36b2eaccd4dc2cf0bc35ab893bb4a and contender = bcce18e5d4d83f0831de71b363ad91470376084c. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2 (mimalloc)](https://conbench.ursa.dev/compare/runs/06ca8b60ba3d41bd9179bc6e878891d5...89927876215449bcb32cfb06a3abdc28/)\n   [Scheduled] [ursa-i9-9960x (mimalloc)](https://conbench.ursa.dev/compare/runs/11aa31eaecc6491cb62c18f18d5fabcb...5d8b14de410341159529bec47a1e8e90/)\n   [Scheduled] [ursa-thinkcentre-m75q (mimalloc)](https://conbench.ursa.dev/compare/runs/1650cbbcf1ab41b99efb4383f415bdaa...62ad9efc3cba4d1b90cb7a5386ba261a/)\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-22T20:33:19.651+0000",
                    "updated": "2021-06-22T20:33:19.651+0000",
                    "started": "2021-06-22T20:33:19.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "613689",
                    "issueId": "13382735"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 31200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4e7e581e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46574233[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2724fc68[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b1e6465[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e49ad07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@120e785d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12c901c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3a5c72b8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@498ed161[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2823849d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72be0710[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b2e724d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 31200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 30 14:50:50 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-30T14:50:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13010/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-08T14:50:35.000+0000",
        "updated": "2021-06-30T14:50:53.000+0000",
        "timeoriginalestimate": null,
        "description": "/.*_kleene/ functions currently don't support outputting into preallocated memory, which is suboptimal especially for pipelined execution. This may involve some refactoring/cleanup of the VisitWords utility. See also: FirstTimeBitmapWriter::AppendWord",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 31200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Support outputting to slices from kleene kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382735/comment/17372048",
                    "id": "17372048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10487\n[https://github.com/apache/arrow/pull/10487]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-30T14:50:50.246+0000",
                    "updated": "2021-06-30T14:50:50.246+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rrk0:",
        "customfield_12314139": null
    }
}