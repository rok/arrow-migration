{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13256165",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165",
    "key": "ARROW-6532",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 26400,
            "total": 26400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6532/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 62,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/315533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451\n \n \n   This might not directly handle the expected from the jira issue https://issues.apache.org/jira/browse/ARROW-6532?filter=12344983\r\n   \r\n   The idea is that `write_parquet()` becomes generic with a method for character (which does as before write to the file path) and another for arrow::io::OutputStream, so that we can e.g. write to a `CompressedOutputStream` and then perhaps after #5450 is merged, handle compression level. \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T09:00:18.301+0000",
                    "updated": "2019-09-20T09:00:18.301+0000",
                    "started": "2019-09-20T09:00:18.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315533",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/315722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-533588801\n \n \n   Yeah, I'm not sure about this on a few levels. I think the R I want to type to write a compressed Parquet file looks like `write_parquet(df, file=\"file.parquet\", compression=\"snappy\")`. This should be more naturally exposed to the causal user, without having to create a `CompressedOutputStream` directly. \r\n   \r\n   I'm also not sure whether this works as intended. The Parquet C++ code seems to have its own compression and writing logic; that may be historical artifact, or it may be meaningful. Maybe we can get away without implementing bindings for those classes--the proof would be a passing test of writing a compressed parquet file and reading it back in. Then again, maybe in principle we should write the Parquet bindings to match the C++ library.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T14:58:25.027+0000",
                    "updated": "2019-09-20T14:58:25.027+0000",
                    "started": "2019-09-20T14:58:25.026+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315722",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/315773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-533621795\n \n \n   It is not a good idea to write a Parquet file into a CompressedOutputStream. Such file will not be readable with `read_parquet`.\r\n   \r\n   Parquet already compresses data internally. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T16:24:10.662+0000",
                    "updated": "2019-09-20T16:24:10.662+0000",
                    "started": "2019-09-20T16:24:10.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315773",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/315774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-533622339\n \n \n   Here's the way we handle it in Python, you'll need to do the same thing in R\r\n   \r\n   https://github.com/apache/arrow/blob/master/python/pyarrow/parquet.py#L363\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-20T16:25:58.466+0000",
                    "updated": "2019-09-20T16:25:58.466+0000",
                    "started": "2019-09-20T16:25:58.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315774",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/317417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-534522134\n \n \n   Some progress inspired from the python implementation. `write_parquet()` gains many parameters: \r\n   \r\n   ```r\r\n   write_parquet <- function(\r\n     table,\r\n     sink, chunk_size = NULL,\r\n     version = NULL, compression = NULL, use_dictionary = NULL, write_statistics = NULL, data_page_size = NULL,\r\n     properties = ParquetWriterProperties$create(\r\n       version = version,\r\n       compression = compression,\r\n       use_dictionary = use_dictionary,\r\n       write_statistics = write_statistics,\r\n       data_page_size = data_page_size\r\n     ),\r\n   \r\n     use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE,\r\n     arrow_properties = ParquetArrowWriterProperties$create(\r\n       use_deprecated_int96_timestamps = use_deprecated_int96_timestamps,\r\n       coerce_timestamps = coerce_timestamps,\r\n       allow_truncated_timestamps = allow_truncated_timestamps\r\n     )\r\n   )\r\n   ```\r\n   \r\n   that are managed by the classes `ParquetWriterProperties` and `ParquetArrowWriterProperties`. \r\n   \r\n   Only simple versions so far, e.g. `compression` may only be a single string, so we may do:\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   df <- tibble::tibble(x = 1:5)\r\n   write_parquet(df, \"/tmp/test.parquet\", compression = \"snappy\")\r\n   read_parquet(\"/tmp/test.parquet\")\r\n   #> # A tibble: 5 x 1\r\n   #>       x\r\n   #>   <int>\r\n   #> 1     1\r\n   #> 2     2\r\n   #> 3     3\r\n   #> 4     4\r\n   #> 5     5\r\n   ```\r\n   \r\n   but we can't e.g. specify specific variables to handle by such and such compression. This is a good place I think for a tidy select, e.g. something like that: \r\n   \r\n   ```r\r\n   df <- tibble::tibble(x1 = 1:5, x2 = 1:5, y = 1:5)\r\n   write_parquet(df, \"/tmp/test.parquet\", \r\n     compression = list(snappy = starts_with(\"x\"))\r\n   )\r\n   ```\r\n   \r\n   The list in python goes the other way, so if we do something similar it would look like \r\n   \r\n   ```r\r\n   write_parquet(df, \"/tmp/test.parquet\", \r\n     compression = list(x1 = \"snappy\", x2 = \"snappy\")\r\n   )\r\n   ```\r\n   \r\n   perhaps we can have ` compression =` only handle the same type of thing python does, but then come up with some helper function so that we'd have e.g. \r\n   \r\n   ```r\r\n   write_parquet(df, \"/tmp/test.parquet\", \r\n     compression = compression_spec(snappy = starts_with(\"x\"))\r\n   )\r\n   ```\r\n    \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-24T11:49:26.342+0000",
                    "updated": "2019-09-24T11:49:26.342+0000",
                    "started": "2019-09-24T11:49:26.342+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317417",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-534877180\n \n \n   One option we discussed with @nealrichardson was to be able to do e.g. \r\n   \r\n   ```r\r\n   write_parquet(df, \"/tmp/test.parquet\", \r\n     compression = Codec$create(\"snappy\", 5L)\r\n   )\r\n   ```\r\n   \r\n   But unfortunately, the C++ class `arrow::util::Codec` does not give a way to swim back to the compression level, so I can't do e.g. `compression$level`. \r\n   \r\n   Instead, I followed python's lead and we can do this instead: \r\n   \r\n   ```r\r\n   write_parquet(df, \"/tmp/test.parquet\", \r\n     compression = \"snappy\", \r\n     compression_level = 5L\r\n   )\r\n   ```\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T06:38:25.980+0000",
                    "updated": "2019-09-25T06:38:25.980+0000",
                    "started": "2019-09-25T06:38:25.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318101",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318166",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-534933671\n \n \n   These arguments that are handled by `ParquetWriterProperties` can now be single values, unnamed vectors of the same length as the number of columns in the table, or named vectors: `compression`, `compression_level`, `use_dictionary` and `write_statistics`. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T09:21:57.467+0000",
                    "updated": "2019-09-25T09:21:57.467+0000",
                    "started": "2019-09-25T09:21:57.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318166",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#issuecomment-535133914\n \n \n   Taking a look now; FTR Travis says \r\n   \r\n   ```\r\n   Missing link or links in documentation object 'write_parquet.Rd':\r\n   \r\n     \u2018to_arrow\u2019\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T17:45:32.544+0000",
                    "updated": "2019-09-25T17:45:32.544+0000",
                    "started": "2019-09-25T17:45:32.543+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318484",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328256465\n \n \n\n ##########\n File path: r/R/compression.R\n ##########\n @@ -36,7 +36,12 @@\n #' @rdname Codec\n #' @name Codec\n #' @export\n-Codec <- R6Class(\"Codec\", inherit = Object)\n+Codec <- R6Class(\"Codec\", inherit = Object,\n+  active = list(\n+    name = function() util___Codec__name(self),\n+    level = function() abort(\"Codec$level() no yet implemented\")\n \n Review comment:\n   ```suggestion\r\n       level = function() abort(\"Codec$level() not yet implemented\")\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:50.565+0000",
                    "updated": "2019-09-25T20:04:50.565+0000",
                    "started": "2019-09-25T20:04:50.564+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318545",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328307952\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_1_0)\n+        } else if (identical(version, \"2.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_2_0)\n+        } else {\n+          abort(\"unknown parquet version\")\n+        }\n+      }\n+    },\n+\n+    set_compression = function(table, compression){\n+      if (is.character(compression) && is.null(names(compression)) && length(compression) == 1L) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression))\n+      } else if (inherits(compression, \"Codec\")) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression$name))\n+      } else {\n+        column_names <- names(table)\n+        if (is.character(compression) && is.null(names(compression)) && length(compression) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, column_names, map_int(compression, compression_from_name))\n+        } else if (is.character(compression) && all(names(compression) %in% column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, names(compression), map_int(compression, compression_from_name))\n+        } else {\n+          abort(\"unsupported compression= specification\")\n+        }\n+      }\n+    },\n+\n+    set_compression_level = function(table, compression_level){\n+      if (!rlang::is_integerish(compression_level)) {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(compression_level))) {\n+        if (length(compression_level) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_compression_level(self, compression_level)\n+        } else if (length(compression_level) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compression_levels(self, column_names, compression_level)\n+        }\n+      } else if (all(given_names %in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_compression_levels(self, given_names, compression_level)\n+      } else {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+    },\n+\n+    set_dictionary = function(table, use_dictionary) {\n+      if (!is.logical(use_dictionary)) {\n \n Review comment:\n   Why not `assert_is(use_dictionary, \"logical\")`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.294+0000",
                    "updated": "2019-09-25T20:04:51.294+0000",
                    "started": "2019-09-25T20:04:51.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318546",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328261442\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n \n Review comment:\n   Seems like this could also be handled more naturally with a list like thing like with the time units. e.g. \r\n   \r\n   ```\r\n   list(`1.0`=ParquetVersionType$PARQUET_1_0, `2.0`=ParquetVersionType$PARQUET_2_0)[[version]]\r\n   ```\r\n   \r\n   That would also have the side benefit of allowing numeric `version = 1` to work.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.368+0000",
                    "updated": "2019-09-25T20:04:51.368+0000",
                    "started": "2019-09-25T20:04:51.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318547",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328312592\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_1_0)\n+        } else if (identical(version, \"2.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_2_0)\n+        } else {\n+          abort(\"unknown parquet version\")\n+        }\n+      }\n+    },\n+\n+    set_compression = function(table, compression){\n+      if (is.character(compression) && is.null(names(compression)) && length(compression) == 1L) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression))\n+      } else if (inherits(compression, \"Codec\")) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression$name))\n+      } else {\n+        column_names <- names(table)\n+        if (is.character(compression) && is.null(names(compression)) && length(compression) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, column_names, map_int(compression, compression_from_name))\n+        } else if (is.character(compression) && all(names(compression) %in% column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, names(compression), map_int(compression, compression_from_name))\n+        } else {\n+          abort(\"unsupported compression= specification\")\n+        }\n+      }\n+    },\n+\n+    set_compression_level = function(table, compression_level){\n+      if (!rlang::is_integerish(compression_level)) {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(compression_level))) {\n+        if (length(compression_level) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_compression_level(self, compression_level)\n+        } else if (length(compression_level) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compression_levels(self, column_names, compression_level)\n+        }\n+      } else if (all(given_names %in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_compression_levels(self, given_names, compression_level)\n+      } else {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+    },\n+\n+    set_dictionary = function(table, use_dictionary) {\n+      if (!is.logical(use_dictionary)) {\n+        abort(\"unsupported use_dictionary= specification\")\n+      }\n+\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(use_dictionary))) {\n+        if (length(use_dictionary) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_use_dictionary(self, isTRUE(use_dictionary))\n+        } else if (length(use_dictionary) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_use_dictionary(self, column_names, use_dictionary)\n+        }\n+      } else if(all(given_names%in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_use_dictionary(self, given_names, use_dictionary)\n+      } else {\n+        abort(\"unsupported use_dictionary= specification\")\n+      }\n+    },\n+\n+    set_write_statistics = function(table, write_statistics) {\n+      if (!is.logical(write_statistics)) {\n+        abort(\"unsupported write_statistics= specification\")\n+      }\n+\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(write_statistics))) {\n+        if (length(write_statistics) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_write_statistics(self, isTRUE(write_statistics))\n+        } else if (length(write_statistics) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_write_statistics(self, column_names, write_statistics)\n+        }\n+      } else if(all(given_names%in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_write_statistics(self, given_names, write_statistics)\n+      } else {\n+        abort(\"unsupported write_statistics= specification\")\n+      }\n+    },\n+\n+    set_data_page_size = function(data_page_size) {\n+      parquet___ArrowWriterProperties___Builder__data_page_size(self, data_page_size)\n+    }\n+  )\n+)\n+\n+ParquetWriterProperties$create <- function(table, version = NULL, compression = NULL, compression_level = NULL, use_dictionary = NULL, write_statistics = NULL, data_page_size = NULL) {\n+  if (is.null(version) && is.null(compression) && is.null(compression_level) && is.null(use_dictionary) && is.null(write_statistics) && is.null(data_page_size)) {\n+    ParquetWriterProperties$default()\n+  } else {\n+    builder <- shared_ptr(ParquetWriterProperties_Builder, parquet___WriterProperties___Builder__create())\n+    builder$set_version(version)\n+    if (!is.null(compression)) {\n+      builder$set_compression(table, compression = compression)\n+    }\n+    if (!is.null(compression_level)) {\n+      builder$set_compression_level(table, compression_level = compression_level)\n+    }\n+    if (!is.null(use_dictionary)) {\n+      builder$set_dictionary(table, use_dictionary)\n+    }\n+    if (!is.null(write_statistics)) {\n+      builder$set_write_statistics(table, write_statistics)\n+    }\n+    if (!is.null(data_page_size)) {\n+      builder$set_data_page_size(data_page_size)\n+    }\n+    shared_ptr(ParquetWriterProperties, parquet___WriterProperties___Builder__build(builder))\n+  }\n+}\n+\n+ParquetFileWriter <- R6Class(\"ParquetFileWriter\", inherit = Object,\n+  public = list(\n+    WriteTable = function(table, chunk_size) {\n+      parquet___arrow___FileWriter__WriteTable(self, table, chunk_size)\n+    },\n+    Close = function() {\n+      parquet___arrow___FileWriter__Close(self)\n+    }\n+  )\n+\n+)\n+ParquetFileWriter$create <- function(\n+  schema,\n+  sink,\n+  properties = ParquetWriterProperties$default(),\n+  arrow_properties = ParquetArrowWriterProperties$default()\n+) {\n+  unique_ptr(\n+    ParquetFileWriter,\n+    parquet___arrow___ParquetFileWriter__Open(schema, sink, properties, arrow_properties)\n+  )\n+}\n+\n+#' Write Parquet file to disk\n+#'\n+#' [Parquet](https://parquet.apache.org/) is a columnar storage file format.\n+#' This function enables you to write Parquet files from R.\n+#'\n+#' @param table An [arrow::Table][Table], or an object convertible to it with [to_arrow()]\n+#' @param sink an [arrow::io::OutputStream][OutputStream] or a string which is interpreted as a file path\n+#' @param chunk_size chunk size. If NULL, the number of rows of the table is used\n+#'\n+#' @param version parquet version\n+#' @param compression compression specification. Possible values:\n+#'  - a single string: uses that compression algorithm for all columns\n+#'  - a single [Codec][Codec] instance: uses that compression algorithm for all columns\n+#'  - an unnamed string vector: specify a compression algorithm for each, same order as the columns\n+#'  - a named string vector: specify compression algorithm individually\n+#' @param compression_level compression level. A single integer, a named integer vector\n+#'   or an unnamed integer vector of the same size as the number of columns of `table`\n+#' @param use_dictionary Specify if we should use dictionary encoding.\n+#' @param write_statistics Specify if we should write statistics\n+#' @param data_page_size Set a target threshhold for the approximate encoded size of data\n+#'        pages within a column chunk. If None, use the default data page size (1Mb) is used.\n+#' @param properties properties for parquet writer, derived from arguments `version`, `compression`, `compression_level`, `use_dictionary`, `write_statistics` and `data_page_size`\n+#'\n+#' @param use_deprecated_int96_timestamps Write timestamps to INT96 Parquet format\n+#' @param coerce_timestamps Cast timestamps a particular resolution. can be NULL, \"ms\" or \"us\"\n+#' @param allow_truncated_timestamps Allow loss of data when coercing timestamps to a particular\n+#'    resolution. E.g. if microsecond or nanosecond data is lost when coercing to\n+#'    ms', do not raise an exception\n+#'\n+#' @param arrow_properties arrow specific writer properties, derived from arguments `use_deprecated_int96_timestamps`, `coerce_timestamps` and `allow_truncated_timestamps`\n+#'\n+#' @examples\n+#' \\donttest{\n+#' tf1 <- tempfile(fileext = \".parquet\")\n+#' write_parquet(tibble::tibble(x = 1:5), tf2)\n+#'\n+#' # using compression\n+#' tf2 <- tempfile(fileext = \".gz.parquet\")\n+#' write_parquet(tibble::tibble(x = 1:5), compression = \"gzip\", compression_level = 5)\n \n Review comment:\n   ```suggestion\r\n   #' write_parquet(data.frame(x = 1:5), compression = \"gzip\", compression_level = 5)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.426+0000",
                    "updated": "2019-09-25T20:04:51.426+0000",
                    "started": "2019-09-25T20:04:51.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318548",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328258247\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n \n Review comment:\n   See https://github.com/apache/arrow/blob/master/r/R/type.R#L309-L333 for similar logic you could reuse here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.504+0000",
                    "updated": "2019-09-25T20:04:51.504+0000",
                    "started": "2019-09-25T20:04:51.504+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318549",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318550",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328314667\n \n \n\n ##########\n File path: r/tests/testthat/test-parquet.R\n ##########\n @@ -49,3 +49,62 @@ test_that(\"read_parquet() with raw data\", {\n   df <- read_parquet(test_raw)\n   expect_identical(dim(df), c(10L, 11L))\n })\n+\n+test_that(\"write_parquet() handles various compression= specs\", {\n+  tab <- Table$create(x1 = 1:5, x2 = 1:5, y = 1:5)\n+  tf <- tempfile()\n+\n+  # a single string\n+  expect_error(write_parquet(tab, tf, compression = \"snappy\"), NA)\n \n Review comment:\n   Isn't `expect_error(..., NA)` unnecessary? The tests will exit on error, so the test suite will fail.\r\n   \r\n   Also, IMO at least one of these should read the file back in to confirm that we wrote valid data. I'm guessing we can't assert details of the Parquet file's encoding and are trusting the C++ test coverage for that, but we should at least confirm that we've written out a valid Parquet file with the expected contents.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.507+0000",
                    "updated": "2019-09-25T20:04:51.507+0000",
                    "started": "2019-09-25T20:04:51.507+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318550",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328258892\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n \n Review comment:\n   Why is this not just `$create()` with its default arguments?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.774+0000",
                    "updated": "2019-09-25T20:04:51.774+0000",
                    "started": "2019-09-25T20:04:51.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318551",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328257158\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n \n Review comment:\n   Why the `_` in the class name?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.777+0000",
                    "updated": "2019-09-25T20:04:51.777+0000",
                    "started": "2019-09-25T20:04:51.777+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318552",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328307497\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_1_0)\n+        } else if (identical(version, \"2.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_2_0)\n+        } else {\n+          abort(\"unknown parquet version\")\n+        }\n+      }\n+    },\n+\n+    set_compression = function(table, compression){\n+      if (is.character(compression) && is.null(names(compression)) && length(compression) == 1L) {\n \n Review comment:\n   This if else if else looks complicated and makes me wonder if it could be simplified.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.780+0000",
                    "updated": "2019-09-25T20:04:51.780+0000",
                    "started": "2019-09-25T20:04:51.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318553",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328312516\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_1_0)\n+        } else if (identical(version, \"2.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_2_0)\n+        } else {\n+          abort(\"unknown parquet version\")\n+        }\n+      }\n+    },\n+\n+    set_compression = function(table, compression){\n+      if (is.character(compression) && is.null(names(compression)) && length(compression) == 1L) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression))\n+      } else if (inherits(compression, \"Codec\")) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression$name))\n+      } else {\n+        column_names <- names(table)\n+        if (is.character(compression) && is.null(names(compression)) && length(compression) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, column_names, map_int(compression, compression_from_name))\n+        } else if (is.character(compression) && all(names(compression) %in% column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, names(compression), map_int(compression, compression_from_name))\n+        } else {\n+          abort(\"unsupported compression= specification\")\n+        }\n+      }\n+    },\n+\n+    set_compression_level = function(table, compression_level){\n+      if (!rlang::is_integerish(compression_level)) {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(compression_level))) {\n+        if (length(compression_level) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_compression_level(self, compression_level)\n+        } else if (length(compression_level) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compression_levels(self, column_names, compression_level)\n+        }\n+      } else if (all(given_names %in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_compression_levels(self, given_names, compression_level)\n+      } else {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+    },\n+\n+    set_dictionary = function(table, use_dictionary) {\n+      if (!is.logical(use_dictionary)) {\n+        abort(\"unsupported use_dictionary= specification\")\n+      }\n+\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(use_dictionary))) {\n+        if (length(use_dictionary) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_use_dictionary(self, isTRUE(use_dictionary))\n+        } else if (length(use_dictionary) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_use_dictionary(self, column_names, use_dictionary)\n+        }\n+      } else if(all(given_names%in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_use_dictionary(self, given_names, use_dictionary)\n+      } else {\n+        abort(\"unsupported use_dictionary= specification\")\n+      }\n+    },\n+\n+    set_write_statistics = function(table, write_statistics) {\n+      if (!is.logical(write_statistics)) {\n+        abort(\"unsupported write_statistics= specification\")\n+      }\n+\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(write_statistics))) {\n+        if (length(write_statistics) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_write_statistics(self, isTRUE(write_statistics))\n+        } else if (length(write_statistics) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_write_statistics(self, column_names, write_statistics)\n+        }\n+      } else if(all(given_names%in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_write_statistics(self, given_names, write_statistics)\n+      } else {\n+        abort(\"unsupported write_statistics= specification\")\n+      }\n+    },\n+\n+    set_data_page_size = function(data_page_size) {\n+      parquet___ArrowWriterProperties___Builder__data_page_size(self, data_page_size)\n+    }\n+  )\n+)\n+\n+ParquetWriterProperties$create <- function(table, version = NULL, compression = NULL, compression_level = NULL, use_dictionary = NULL, write_statistics = NULL, data_page_size = NULL) {\n+  if (is.null(version) && is.null(compression) && is.null(compression_level) && is.null(use_dictionary) && is.null(write_statistics) && is.null(data_page_size)) {\n+    ParquetWriterProperties$default()\n+  } else {\n+    builder <- shared_ptr(ParquetWriterProperties_Builder, parquet___WriterProperties___Builder__create())\n+    builder$set_version(version)\n+    if (!is.null(compression)) {\n+      builder$set_compression(table, compression = compression)\n+    }\n+    if (!is.null(compression_level)) {\n+      builder$set_compression_level(table, compression_level = compression_level)\n+    }\n+    if (!is.null(use_dictionary)) {\n+      builder$set_dictionary(table, use_dictionary)\n+    }\n+    if (!is.null(write_statistics)) {\n+      builder$set_write_statistics(table, write_statistics)\n+    }\n+    if (!is.null(data_page_size)) {\n+      builder$set_data_page_size(data_page_size)\n+    }\n+    shared_ptr(ParquetWriterProperties, parquet___WriterProperties___Builder__build(builder))\n+  }\n+}\n+\n+ParquetFileWriter <- R6Class(\"ParquetFileWriter\", inherit = Object,\n+  public = list(\n+    WriteTable = function(table, chunk_size) {\n+      parquet___arrow___FileWriter__WriteTable(self, table, chunk_size)\n+    },\n+    Close = function() {\n+      parquet___arrow___FileWriter__Close(self)\n+    }\n+  )\n+\n+)\n+ParquetFileWriter$create <- function(\n+  schema,\n+  sink,\n+  properties = ParquetWriterProperties$default(),\n+  arrow_properties = ParquetArrowWriterProperties$default()\n+) {\n+  unique_ptr(\n+    ParquetFileWriter,\n+    parquet___arrow___ParquetFileWriter__Open(schema, sink, properties, arrow_properties)\n+  )\n+}\n+\n+#' Write Parquet file to disk\n+#'\n+#' [Parquet](https://parquet.apache.org/) is a columnar storage file format.\n+#' This function enables you to write Parquet files from R.\n+#'\n+#' @param table An [arrow::Table][Table], or an object convertible to it with [to_arrow()]\n+#' @param sink an [arrow::io::OutputStream][OutputStream] or a string which is interpreted as a file path\n+#' @param chunk_size chunk size. If NULL, the number of rows of the table is used\n+#'\n+#' @param version parquet version\n+#' @param compression compression specification. Possible values:\n+#'  - a single string: uses that compression algorithm for all columns\n+#'  - a single [Codec][Codec] instance: uses that compression algorithm for all columns\n+#'  - an unnamed string vector: specify a compression algorithm for each, same order as the columns\n+#'  - a named string vector: specify compression algorithm individually\n+#' @param compression_level compression level. A single integer, a named integer vector\n+#'   or an unnamed integer vector of the same size as the number of columns of `table`\n+#' @param use_dictionary Specify if we should use dictionary encoding.\n+#' @param write_statistics Specify if we should write statistics\n+#' @param data_page_size Set a target threshhold for the approximate encoded size of data\n+#'        pages within a column chunk. If None, use the default data page size (1Mb) is used.\n+#' @param properties properties for parquet writer, derived from arguments `version`, `compression`, `compression_level`, `use_dictionary`, `write_statistics` and `data_page_size`\n+#'\n+#' @param use_deprecated_int96_timestamps Write timestamps to INT96 Parquet format\n+#' @param coerce_timestamps Cast timestamps a particular resolution. can be NULL, \"ms\" or \"us\"\n+#' @param allow_truncated_timestamps Allow loss of data when coercing timestamps to a particular\n+#'    resolution. E.g. if microsecond or nanosecond data is lost when coercing to\n+#'    ms', do not raise an exception\n+#'\n+#' @param arrow_properties arrow specific writer properties, derived from arguments `use_deprecated_int96_timestamps`, `coerce_timestamps` and `allow_truncated_timestamps`\n+#'\n+#' @examples\n+#' \\donttest{\n+#' tf1 <- tempfile(fileext = \".parquet\")\n+#' write_parquet(tibble::tibble(x = 1:5), tf2)\n \n Review comment:\n   ```suggestion\r\n   #' write_parquet(data.frame(x = 1:5), tf2)\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.786+0000",
                    "updated": "2019-09-25T20:04:51.786+0000",
                    "started": "2019-09-25T20:04:51.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318554",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318556",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328312376\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_1_0)\n+        } else if (identical(version, \"2.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_2_0)\n+        } else {\n+          abort(\"unknown parquet version\")\n+        }\n+      }\n+    },\n+\n+    set_compression = function(table, compression){\n+      if (is.character(compression) && is.null(names(compression)) && length(compression) == 1L) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression))\n+      } else if (inherits(compression, \"Codec\")) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression$name))\n+      } else {\n+        column_names <- names(table)\n+        if (is.character(compression) && is.null(names(compression)) && length(compression) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, column_names, map_int(compression, compression_from_name))\n+        } else if (is.character(compression) && all(names(compression) %in% column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compressions(self, names(compression), map_int(compression, compression_from_name))\n+        } else {\n+          abort(\"unsupported compression= specification\")\n+        }\n+      }\n+    },\n+\n+    set_compression_level = function(table, compression_level){\n+      if (!rlang::is_integerish(compression_level)) {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(compression_level))) {\n+        if (length(compression_level) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_compression_level(self, compression_level)\n+        } else if (length(compression_level) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_compression_levels(self, column_names, compression_level)\n+        }\n+      } else if (all(given_names %in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_compression_levels(self, given_names, compression_level)\n+      } else {\n+        abort(\"unsupported compression_level= specification\")\n+      }\n+    },\n+\n+    set_dictionary = function(table, use_dictionary) {\n+      if (!is.logical(use_dictionary)) {\n+        abort(\"unsupported use_dictionary= specification\")\n+      }\n+\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(use_dictionary))) {\n+        if (length(use_dictionary) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_use_dictionary(self, isTRUE(use_dictionary))\n+        } else if (length(use_dictionary) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_use_dictionary(self, column_names, use_dictionary)\n+        }\n+      } else if(all(given_names%in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_use_dictionary(self, given_names, use_dictionary)\n+      } else {\n+        abort(\"unsupported use_dictionary= specification\")\n+      }\n+    },\n+\n+    set_write_statistics = function(table, write_statistics) {\n+      if (!is.logical(write_statistics)) {\n+        abort(\"unsupported write_statistics= specification\")\n+      }\n+\n+      column_names <- names(table)\n+      if (is.null(given_names <- names(write_statistics))) {\n+        if (length(write_statistics) == 1L) {\n+          parquet___ArrowWriterProperties___Builder__default_write_statistics(self, isTRUE(write_statistics))\n+        } else if (length(write_statistics) == length(column_names)) {\n+          parquet___ArrowWriterProperties___Builder__set_write_statistics(self, column_names, write_statistics)\n+        }\n+      } else if(all(given_names%in% column_names)) {\n+        parquet___ArrowWriterProperties___Builder__set_write_statistics(self, given_names, write_statistics)\n+      } else {\n+        abort(\"unsupported write_statistics= specification\")\n+      }\n+    },\n+\n+    set_data_page_size = function(data_page_size) {\n+      parquet___ArrowWriterProperties___Builder__data_page_size(self, data_page_size)\n+    }\n+  )\n+)\n+\n+ParquetWriterProperties$create <- function(table, version = NULL, compression = NULL, compression_level = NULL, use_dictionary = NULL, write_statistics = NULL, data_page_size = NULL) {\n+  if (is.null(version) && is.null(compression) && is.null(compression_level) && is.null(use_dictionary) && is.null(write_statistics) && is.null(data_page_size)) {\n+    ParquetWriterProperties$default()\n+  } else {\n+    builder <- shared_ptr(ParquetWriterProperties_Builder, parquet___WriterProperties___Builder__create())\n+    builder$set_version(version)\n+    if (!is.null(compression)) {\n+      builder$set_compression(table, compression = compression)\n+    }\n+    if (!is.null(compression_level)) {\n+      builder$set_compression_level(table, compression_level = compression_level)\n+    }\n+    if (!is.null(use_dictionary)) {\n+      builder$set_dictionary(table, use_dictionary)\n+    }\n+    if (!is.null(write_statistics)) {\n+      builder$set_write_statistics(table, write_statistics)\n+    }\n+    if (!is.null(data_page_size)) {\n+      builder$set_data_page_size(data_page_size)\n+    }\n+    shared_ptr(ParquetWriterProperties, parquet___WriterProperties___Builder__build(builder))\n+  }\n+}\n+\n+ParquetFileWriter <- R6Class(\"ParquetFileWriter\", inherit = Object,\n+  public = list(\n+    WriteTable = function(table, chunk_size) {\n+      parquet___arrow___FileWriter__WriteTable(self, table, chunk_size)\n+    },\n+    Close = function() {\n+      parquet___arrow___FileWriter__Close(self)\n+    }\n+  )\n+\n+)\n+ParquetFileWriter$create <- function(\n+  schema,\n+  sink,\n+  properties = ParquetWriterProperties$default(),\n+  arrow_properties = ParquetArrowWriterProperties$default()\n+) {\n+  unique_ptr(\n+    ParquetFileWriter,\n+    parquet___arrow___ParquetFileWriter__Open(schema, sink, properties, arrow_properties)\n+  )\n+}\n+\n+#' Write Parquet file to disk\n+#'\n+#' [Parquet](https://parquet.apache.org/) is a columnar storage file format.\n+#' This function enables you to write Parquet files from R.\n+#'\n+#' @param table An [arrow::Table][Table], or an object convertible to it with [to_arrow()]\n+#' @param sink an [arrow::io::OutputStream][OutputStream] or a string which is interpreted as a file path\n+#' @param chunk_size chunk size. If NULL, the number of rows of the table is used\n+#'\n+#' @param version parquet version\n+#' @param compression compression specification. Possible values:\n+#'  - a single string: uses that compression algorithm for all columns\n+#'  - a single [Codec][Codec] instance: uses that compression algorithm for all columns\n+#'  - an unnamed string vector: specify a compression algorithm for each, same order as the columns\n+#'  - a named string vector: specify compression algorithm individually\n+#' @param compression_level compression level. A single integer, a named integer vector\n+#'   or an unnamed integer vector of the same size as the number of columns of `table`\n+#' @param use_dictionary Specify if we should use dictionary encoding.\n+#' @param write_statistics Specify if we should write statistics\n+#' @param data_page_size Set a target threshhold for the approximate encoded size of data\n+#'        pages within a column chunk. If None, use the default data page size (1Mb) is used.\n+#' @param properties properties for parquet writer, derived from arguments `version`, `compression`, `compression_level`, `use_dictionary`, `write_statistics` and `data_page_size`\n+#'\n+#' @param use_deprecated_int96_timestamps Write timestamps to INT96 Parquet format\n+#' @param coerce_timestamps Cast timestamps a particular resolution. can be NULL, \"ms\" or \"us\"\n+#' @param allow_truncated_timestamps Allow loss of data when coercing timestamps to a particular\n+#'    resolution. E.g. if microsecond or nanosecond data is lost when coercing to\n+#'    ms', do not raise an exception\n+#'\n+#' @param arrow_properties arrow specific writer properties, derived from arguments `use_deprecated_int96_timestamps`, `coerce_timestamps` and `allow_truncated_timestamps`\n+#'\n+#' @examples\n+#' \\donttest{\n+#' tf1 <- tempfile(fileext = \".parquet\")\n+#' write_parquet(tibble::tibble(x = 1:5), tf2)\n+#'\n+#' # using compression\n+#' tf2 <- tempfile(fileext = \".gz.parquet\")\n+#' write_parquet(tibble::tibble(x = 1:5), compression = \"gzip\", compression_level = 5)\n+#'\n+#' }\n+#' @export\n+write_parquet <- function(\n \n Review comment:\n   Let's keep with the tidyverse style guide on function definitions: https://style.tidyverse.org/functions.html#long-lines-1\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.789+0000",
                    "updated": "2019-09-25T20:04:51.789+0000",
                    "started": "2019-09-25T20:04:51.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318556",
                    "issueId": "13256165"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/worklog/318555",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5451: ARROW-6532 [R] Write parquet files with compression\nURL: https://github.com/apache/arrow/pull/5451#discussion_r328307313\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,6 +15,286 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+ParquetArrowWriterProperties_Builder <- R6Class(\"ParquetArrowWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    store_schema = function() {\n+      parquet___ArrowWriterProperties___Builder__store_schema(self)\n+      self\n+    },\n+    set_int96_support = function(use_deprecated_int96_timestamps = FALSE) {\n+      if (use_deprecated_int96_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__enable_deprecated_int96_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disable_deprecated_int96_timestamps(self)\n+      }\n+      self\n+    },\n+    set_coerce_timestamps = function(coerce_timestamps = NULL) {\n+      if (!is.null(coerce_timestamps)) {\n+        if (coerce_timestamps == \"ms\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MILLI)\n+        } else if (coerce_timestamps == \"us\") {\n+          parquet___ArrowWriterProperties___Builder__coerce_timestamps(TimeUnit$MICRO)\n+        } else {\n+          abort(\"Invalid value for coerce_timestamps\")\n+        }\n+      }\n+      self\n+    },\n+    set_allow_truncated_timestamps = function(allow_truncated_timestamps = FALSE) {\n+      if (allow_truncated_timestamps) {\n+        parquet___ArrowWriterProperties___Builder__allow_truncated_timestamps(self)\n+      } else {\n+        parquet___ArrowWriterProperties___Builder__disallow_truncated_timestamps(self)\n+      }\n+\n+      self\n+    }\n+\n+  )\n+)\n+ParquetArrowWriterProperties <- R6Class(\"ParquetArrowWriterProperties\", inherit = Object)\n+\n+ParquetArrowWriterProperties$default <- function() {\n+  shared_ptr(ParquetArrowWriterProperties, parquet___default_arrow_writer_properties())\n+}\n+\n+ParquetArrowWriterProperties$create <- function(use_deprecated_int96_timestamps = FALSE, coerce_timestamps = NULL, allow_truncated_timestamps = FALSE) {\n+  builder <- shared_ptr(ParquetArrowWriterProperties_Builder, parquet___ArrowWriterProperties___Builder__create())\n+  builder$store_schema()\n+  builder$set_int96_support(use_deprecated_int96_timestamps)\n+  builder$set_coerce_timestamps(coerce_timestamps)\n+  builder$set_allow_truncated_timestamps(allow_truncated_timestamps)\n+  shared_ptr(ParquetArrowWriterProperties, parquet___ArrowWriterProperties___Builder__build(builder))\n+}\n+\n+ParquetWriterProperties <- R6Class(\"ParquetWriterProperties\", inherit = Object)\n+ParquetWriterProperties$default <- function() {\n+  shared_ptr(ParquetWriterProperties, parquet___default_writer_properties())\n+}\n+\n+ParquetWriterProperties_Builder <- R6Class(\"ParquetWriterProperties_Builder\", inherit = Object,\n+  public = list(\n+    set_version = function(version = NULL) {\n+      if (!is.null(version)) {\n+        if (identical(version, \"1.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_1_0)\n+        } else if (identical(version, \"2.0\")) {\n+          parquet___ArrowWriterProperties___Builder__version(self, ParquetVersionType$PARQUET_2_0)\n+        } else {\n+          abort(\"unknown parquet version\")\n+        }\n+      }\n+    },\n+\n+    set_compression = function(table, compression){\n+      if (is.character(compression) && is.null(names(compression)) && length(compression) == 1L) {\n+        parquet___ArrowWriterProperties___Builder__default_compression(self, compression_from_name(compression))\n+      } else if (inherits(compression, \"Codec\")) {\n \n Review comment:\n   If we can't fully support accepting `Codec` as an argument, maybe we shouldn't bother at all for now.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T20:04:51.789+0000",
                    "updated": "2019-09-25T20:04:51.789+0000",
                    "started": "2019-09-25T20:04:51.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318555",
                    "issueId": "13256165"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 26400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@62a384d3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@386e39b5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50f3c3c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1919ebfe[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c0bb12c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@301153f8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7eb24bdd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@28a209ee[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29a14f07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@13155758[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f951a44[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@47c08121[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 26400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 27 18:41:12 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-27T18:41:12.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6532/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-11T18:23:10.000+0000",
        "updated": "2019-09-30T13:34:12.000+0000",
        "timeoriginalestimate": null,
        "description": "Followup to ARROW-6360. See ARROW-6216 for the C++ side. `write_parquet()` should be able to write compressed files, including with a specified compression level.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 26400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Write parquet files with compression",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13256165/comment/16939676",
                    "id": "16939676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 5451\n[https://github.com/apache/arrow/pull/5451]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-09-27T18:41:12.979+0000",
                    "updated": "2019-09-27T18:41:12.979+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06jz4:",
        "customfield_12314139": null
    }
}