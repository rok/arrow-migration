{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13243171",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171",
    "key": "ARROW-5844",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5844/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/272108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799\n \n \n   Currently, we only support comparison & sort for 32-bit integers, in this issue, we provide support for more numeric data types:\r\n   \r\n   byte\r\n   short\r\n   long\r\n   float\r\n   double\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-04T10:07:48.079+0000",
                    "updated": "2019-07-04T10:07:48.079+0000",
                    "started": "2019-07-04T10:07:48.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272108",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/272689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300755145\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      float result = value1 - value2;\n \n Review comment:\n   I don't think this works for NANs?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T17:28:36.970+0000",
                    "updated": "2019-07-05T17:28:36.970+0000",
                    "started": "2019-07-05T17:28:36.969+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272689",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/272690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300755196\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      float result = value1 - value2;\n+      if (result < 0f) {\n+        return -1;\n+      } else if (result > 0f) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for double type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float8Comparator extends VectorValueComparator<Float8Vector> {\n+\n+    public Float8Comparator() {\n+      super(Double.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      double value1 = vector1.get(index1);\n+      double value2 = vector2.get(index2);\n+\n+      double result = value1 - value2;\n \n Review comment:\n   same comment as above, NaNs?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T17:28:50.037+0000",
                    "updated": "2019-07-05T17:28:50.037+0000",
                    "started": "2019-07-05T17:28:50.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272690",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/272691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300755309\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n \n Review comment:\n   just return result?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T17:29:20.294+0000",
                    "updated": "2019-07-05T17:29:20.294+0000",
                    "started": "2019-07-05T17:29:20.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272691",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/272692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300755795\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n \n Review comment:\n   I guess this protects against overflow?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T17:31:37.957+0000",
                    "updated": "2019-07-05T17:31:37.957+0000",
                    "started": "2019-07-05T17:31:37.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272692",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/272700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#issuecomment-508828115\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=h1) Report\n   > Merging [#4799](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9ffb9cdd46c498a2f46a8d030613e7c046b6e843?src=pr&el=desc) will **increase** coverage by `17.33%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4799/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master   #4799       +/-   ##\n   ==========================================\n   + Coverage   72.26%   89.6%   +17.33%     \n   ==========================================\n     Files         822     662      -160     \n     Lines      107713   96351    -11362     \n     Branches     1418       0     -1418     \n   ==========================================\n   + Hits        77844   86337     +8493     \n   + Misses      29507   10014    -19493     \n   + Partials      362       0      -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/testing/gtest\\_util.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0aW5nL2d0ZXN0X3V0aWwuaA==) | `97.36% <0%> (-2.64%)` | :arrow_down: |\n   | [cpp/src/arrow/compute/kernel.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbC5o) | `61.16% <0%> (-1.53%)` | :arrow_down: |\n   | [cpp/src/arrow/result.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9yZXN1bHQuaA==) | `91.3% <0%> (-0.37%)` | :arrow_down: |\n   | [cpp/src/arrow/flight/server.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9mbGlnaHQvc2VydmVyLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/expression\\_registry.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2V4cHJlc3Npb25fcmVnaXN0cnkuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/column-builder.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/table\\_builder.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90YWJsZV9idWlsZGVyLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/plasma/plasma.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvcGxhc21hLmg=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/gandiva/configuration.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL2NvbmZpZ3VyYXRpb24uaA==) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.h](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5o) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [746 more](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=footer). Last update [9ffb9cd...cf9fa71](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T17:57:47.300+0000",
                    "updated": "2019-07-05T17:57:47.300+0000",
                    "started": "2019-07-05T17:57:47.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272700",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300915228\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      float result = value1 - value2;\n \n Review comment:\n   Thanks for your kind reminder. In the new commits, NaNs are taken care of. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:03:55.099+0000",
                    "updated": "2019-07-08T04:03:55.099+0000",
                    "started": "2019-07-08T04:03:55.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273018",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300915261\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      float result = value1 - value2;\n+      if (result < 0f) {\n+        return -1;\n+      } else if (result > 0f) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for double type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float8Comparator extends VectorValueComparator<Float8Vector> {\n+\n+    public Float8Comparator() {\n+      super(Double.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      double value1 = vector1.get(index1);\n+      double value2 = vector2.get(index2);\n+\n+      double result = value1 - value2;\n \n Review comment:\n   Sure. Thanks for the reminder. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:04:13.933+0000",
                    "updated": "2019-07-08T04:04:13.933+0000",
                    "started": "2019-07-08T04:04:13.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273019",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r300915350\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,84 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n \n Review comment:\n   You are right. This is to protect against overflow which may happen when converting a long to an int.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:05:00.047+0000",
                    "updated": "2019-07-08T04:05:00.047+0000",
                    "started": "2019-07-08T04:05:00.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273020",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#issuecomment-508828115\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=h1) Report\n   > Merging [#4799](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c2c9e99140363545521f957219e3eba71a98c804?src=pr&el=desc) will **increase** coverage by `2.15%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4799/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4799      +/-   ##\n   ==========================================\n   + Coverage   87.44%   89.59%   +2.15%     \n   ==========================================\n     Files         997      662     -335     \n     Lines      139728    96351   -43377     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       122181    86327   -35854     \n   + Misses      17185    10024    -7161     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `70.75% <0%> (-1.89%)` | :arrow_down: |\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `95.29% <0%> (-1.77%)` | :arrow_down: |\n   | [cpp/src/arrow/io/readahead.cc](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9yZWFkYWhlYWQuY2M=) | `95.91% <0%> (-1.03%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [cpp/src/plasma/store.cc](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvc3RvcmUuY2M=) | `91.13% <0%> (-0.33%)` | :arrow_down: |\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [r/R/Table.R](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-ci9SL1RhYmxlLlI=) | | |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [r/src/symbols.cpp](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree#diff-ci9zcmMvc3ltYm9scy5jcHA=) | | |\n   | ... and [330 more](https://codecov.io/gh/apache/arrow/pull/4799/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=footer). Last update [c2c9e99...30f946b](https://codecov.io/gh/apache/arrow/pull/4799?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T04:46:17.083+0000",
                    "updated": "2019-07-08T04:46:17.083+0000",
                    "started": "2019-07-08T04:46:17.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273031",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301376728\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,110 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n \n Review comment:\n   ```suggestion\r\n         return Long.signum(value1 - value2);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T02:50:15.023+0000",
                    "updated": "2019-07-09T02:50:15.023+0000",
                    "started": "2019-07-09T02:50:15.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273661",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301377138\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,110 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Float.isNaN(value1);\n+      boolean isNan2 = Float.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      float result = value1 - value2;\n \n Review comment:\n   Math.signum()\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T02:51:56.481+0000",
                    "updated": "2019-07-09T02:51:56.481+0000",
                    "started": "2019-07-09T02:51:56.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273662",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301377175\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,110 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Float.isNaN(value1);\n+      boolean isNan2 = Float.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      float result = value1 - value2;\n+      if (result < 0f) {\n+        return -1;\n+      } else if (result > 0f) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for double type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float8Comparator extends VectorValueComparator<Float8Vector> {\n+\n+    public Float8Comparator() {\n+      super(Double.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      double value1 = vector1.get(index1);\n+      double value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Double.isNaN(value1);\n+      boolean isNan2 = Double.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      double result = value1 - value2;\n \n Review comment:\n   math.signum\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T02:52:09.783+0000",
                    "updated": "2019-07-09T02:52:09.783+0000",
                    "started": "2019-07-09T02:52:09.782+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273663",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273682",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301385474\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,110 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n \n Review comment:\n   Good point. Revised accordingly. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T03:45:12.764+0000",
                    "updated": "2019-07-09T03:45:12.764+0000",
                    "started": "2019-07-09T03:45:12.761+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273682",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301385502\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,110 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Float.isNaN(value1);\n+      boolean isNan2 = Float.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      float result = value1 - value2;\n+      if (result < 0f) {\n+        return -1;\n+      } else if (result > 0f) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for double type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float8Comparator extends VectorValueComparator<Float8Vector> {\n+\n+    public Float8Comparator() {\n+      super(Double.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      double value1 = vector1.get(index1);\n+      double value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Double.isNaN(value1);\n+      boolean isNan2 = Double.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      double result = value1 - value2;\n \n Review comment:\n   Revised accordingly. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T03:45:28.164+0000",
                    "updated": "2019-07-09T03:45:28.164+0000",
                    "started": "2019-07-09T03:45:28.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273684",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/273686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301385574\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,110 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      long result = value1 - value2;\n+      if (result < 0L) {\n+        return -1;\n+      } else if (result > 0L) {\n+        return 1;\n+      } else {\n+        return 0;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Float.isNaN(value1);\n+      boolean isNan2 = Float.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      float result = value1 - value2;\n \n Review comment:\n   Revised accordingly. Thanks.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-09T03:45:57.081+0000",
                    "updated": "2019-07-09T03:45:57.081+0000",
                    "started": "2019-07-09T03:45:57.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273686",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/274663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301899479\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,103 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      return Long.signum(value1 - value2);\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Float.isNaN(value1);\n+      boolean isNan2 = Float.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      float result = Math.signum(value1 - value2);\n \n Review comment:\n   it seems like you should either directly return the casted signum or use the if statement, not both?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T06:12:02.660+0000",
                    "updated": "2019-07-10T06:12:02.660+0000",
                    "started": "2019-07-10T06:12:02.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274663",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/274707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#discussion_r301920156\n \n \n\n ##########\n File path: java/algorithm/src/main/java/org/apache/arrow/algorithm/sort/DefaultVectorComparators.java\n ##########\n @@ -44,6 +85,103 @@ public int compareNotNull(int index1, int index2) {\n     }\n   }\n \n+  /**\n+   * Default comparator for long integers.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class LongComparator extends VectorValueComparator<BigIntVector> {\n+\n+    public LongComparator() {\n+      super(Long.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      long value1 = vector1.get(index1);\n+      long value2 = vector2.get(index2);\n+\n+      return Long.signum(value1 - value2);\n+    }\n+  }\n+\n+  /**\n+   * Default comparator for float type.\n+   * The comparison is based on values, with null comes first.\n+   */\n+  public static class Float4Comparator extends VectorValueComparator<Float4Vector> {\n+\n+    public Float4Comparator() {\n+      super(Float.SIZE / 8);\n+    }\n+\n+    @Override\n+    public int compareNotNull(int index1, int index2) {\n+      float value1 = vector1.get(index1);\n+      float value2 = vector2.get(index2);\n+\n+      boolean isNan1 = Float.isNaN(value1);\n+      boolean isNan2 = Float.isNaN(value2);\n+      if (isNan1 || isNan2) {\n+        if (isNan1 && isNan2) {\n+          return 0;\n+        } else if (isNan1) {\n+          // nan is greater than any normal value\n+          return 1;\n+        } else {\n+          return -1;\n+        }\n+      }\n+\n+      float result = Math.signum(value1 - value2);\n \n Review comment:\n   Sure. Thanks a lot. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T07:28:30.468+0000",
                    "updated": "2019-07-10T07:28:30.468+0000",
                    "started": "2019-07-10T07:28:30.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274707",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/275675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799#issuecomment-510768285\n \n \n   +1, LGTM.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-12T06:46:08.426+0000",
                    "updated": "2019-07-12T06:46:08.426+0000",
                    "started": "2019-07-12T06:46:08.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275675",
                    "issueId": "13243171"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/worklog/275677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4799: ARROW-5844: [Java] Support comparison & sort for more numeric types\nURL: https://github.com/apache/arrow/pull/4799\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-12T06:48:45.795+0000",
                    "updated": "2019-07-12T06:48:45.795+0000",
                    "started": "2019-07-12T06:48:45.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275677",
                    "issueId": "13243171"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1e46b834[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73bc7829[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@457c3923[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@55117c95[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@343421fc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5fd13a2c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bc0a5d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@25eb9bed[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3045656d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@66932913[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1883ce10[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@61ce1a1e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jul 12 06:51:35 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-12T06:51:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5844/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-04T10:03:36.000+0000",
        "updated": "2019-08-01T22:39:35.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, we only support comparison & sort for 32-bit integers, in this issue, we provide support for more numeric data types:\r\n* byte\r\n* short\r\n* long\r\n* float\r\n* double",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Support comparison & sort for more numeric types",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13243171/comment/16883579",
                    "id": "16883579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4799\n[https://github.com/apache/arrow/pull/4799]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-07-12T06:51:35.160+0000",
                    "updated": "2019-07-12T06:51:35.160+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z04deg:",
        "customfield_12314139": null
    }
}