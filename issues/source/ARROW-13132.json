{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13384831",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831",
    "key": "ARROW-13132",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13132/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-03T17:23:57.448+0000",
                    "updated": "2021-08-03T17:23:57.448+0000",
                    "started": "2021-08-03T17:23:57.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633064",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#issuecomment-892025469\n\n\n   https://issues.apache.org/jira/browse/ARROW-13132\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-03T17:24:11.167+0000",
                    "updated": "2021-08-03T17:24:11.167+0000",
                    "started": "2021-08-03T17:24:11.167+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633065",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682664506\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n\nReview comment:\n       ```suggestion\r\n       const int type_code = s.type_code;  // avoid 8-bit int types for printing\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n+    const auto& union_type = checked_cast<const UnionType&>(*s.type);\n+    const auto& child_ids = union_type.child_ids();\n+    if (type_code < 0 || type_code >= static_cast<int64_t>(child_ids.size()) ||\n+        child_ids[type_code] == UnionType::kInvalidChildId) {\n\nReview comment:\n       IIUC, `UnionScalar::type_code` contains one of the values in `child_ids` and not the index of one of the values in `child_ids` so it must be validated using `std::find` or so instead of by comparison to `child_ids.size()`\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n\nReview comment:\n       SGTM, please do\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -902,6 +1214,37 @@ TEST(TestDictionaryScalar, Basics) {\n   }\n }\n \n+TEST(TestDictionaryScalar, ValidateErrors) {\n+  auto index_ty = int16();\n+  auto value_ty = utf8();\n+  auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\"])\");\n\nReview comment:\n       For completeness, would you add a case where a valid index encodes a null dictionary entry?\r\n   ```suggestion\r\n     auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\", null])\");\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n\nReview comment:\n       Nit: de-nest this for clarity\r\n   ```suggestion\r\n       if (s.is_valid && !s.value.index->is_valid) {\r\n         return Status::Invalid(\"non-null \", s.type->ToString(),\r\n                                \" scalar has null index value\");\r\n       }\r\n   \r\n       if (!s.is_valid && s.value.index->is_valid) {\r\n         return Status::Invalid(\"null \", s.type->ToString(),\r\n                                \" scalar has non-null index value\");\r\n       }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       Now that compute::Cast supports scalars for all types, is it worth keeping Scalar::Parse and Scalar::CastTo?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T14:33:53.191+0000",
                    "updated": "2021-08-04T14:33:53.191+0000",
                    "started": "2021-08-04T14:33:53.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633586",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682716498\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n+    const auto& union_type = checked_cast<const UnionType&>(*s.type);\n+    const auto& child_ids = union_type.child_ids();\n+    if (type_code < 0 || type_code >= static_cast<int64_t>(child_ids.size()) ||\n+        child_ids[type_code] == UnionType::kInvalidChildId) {\n\nReview comment:\n       `child_ids` is a mapping of type codes to (physical) child ids. What you are thinking about is `type_codes`, which is a mapping of (physical) child ids to type codes.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T15:18:28.291+0000",
                    "updated": "2021-08-04T15:18:28.291+0000",
                    "started": "2021-08-04T15:18:28.291+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633642",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682723742\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       I have no idea. Can you open a JIRA for that?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T15:26:58.072+0000",
                    "updated": "2021-08-04T15:26:58.072+0000",
                    "started": "2021-08-04T15:26:58.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633648",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682724321\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -902,6 +1214,37 @@ TEST(TestDictionaryScalar, Basics) {\n   }\n }\n \n+TEST(TestDictionaryScalar, ValidateErrors) {\n+  auto index_ty = int16();\n+  auto value_ty = utf8();\n+  auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\"])\");\n\nReview comment:\n       In this case, should `DictionaryScalar::is_valid` be true or false?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T15:27:34.693+0000",
                    "updated": "2021-08-04T15:27:34.693+0000",
                    "started": "2021-08-04T15:27:34.693+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633650",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682851194\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -902,6 +1214,37 @@ TEST(TestDictionaryScalar, Basics) {\n   }\n }\n \n+TEST(TestDictionaryScalar, ValidateErrors) {\n+  auto index_ty = int16();\n+  auto value_ty = utf8();\n+  auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\"])\");\n\nReview comment:\n       I'd say `is_valid==true`\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       will do\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T18:15:51.901+0000",
                    "updated": "2021-08-04T18:15:51.901+0000",
                    "started": "2021-08-04T18:15:51.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633726",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682851489\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n+    const auto& union_type = checked_cast<const UnionType&>(*s.type);\n+    const auto& child_ids = union_type.child_ids();\n+    if (type_code < 0 || type_code >= static_cast<int64_t>(child_ids.size()) ||\n+        child_ids[type_code] == UnionType::kInvalidChildId) {\n\nReview comment:\n       ah, nevermind\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T18:16:15.330+0000",
                    "updated": "2021-08-04T18:16:15.330+0000",
                    "started": "2021-08-04T18:16:15.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633727",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/633764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682884744\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       https://issues.apache.org/jira/browse/ARROW-9006\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-04T19:06:35.651+0000",
                    "updated": "2021-08-04T19:06:35.651+0000",
                    "started": "2021-08-04T19:06:35.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "633764",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/634167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682716498\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n+    const auto& union_type = checked_cast<const UnionType&>(*s.type);\n+    const auto& child_ids = union_type.child_ids();\n+    if (type_code < 0 || type_code >= static_cast<int64_t>(child_ids.size()) ||\n+        child_ids[type_code] == UnionType::kInvalidChildId) {\n\nReview comment:\n       `child_ids` is a mapping of type codes to (physical) child ids. What you are thinking about is `type_codes`, which is a mapping of (physical) child ids to type codes.\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       I have no idea. Can you open a JIRA for that?\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -902,6 +1214,37 @@ TEST(TestDictionaryScalar, Basics) {\n   }\n }\n \n+TEST(TestDictionaryScalar, ValidateErrors) {\n+  auto index_ty = int16();\n+  auto value_ty = utf8();\n+  auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\"])\");\n\nReview comment:\n       In this case, should `DictionaryScalar::is_valid` be true or false?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T11:20:44.324+0000",
                    "updated": "2021-08-05T11:20:44.324+0000",
                    "started": "2021-08-05T11:20:44.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634167",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/634306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#discussion_r682664506\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n\nReview comment:\n       ```suggestion\r\n       const int type_code = s.type_code;  // avoid 8-bit int types for printing\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n+    const auto& union_type = checked_cast<const UnionType&>(*s.type);\n+    const auto& child_ids = union_type.child_ids();\n+    if (type_code < 0 || type_code >= static_cast<int64_t>(child_ids.size()) ||\n+        child_ids[type_code] == UnionType::kInvalidChildId) {\n\nReview comment:\n       IIUC, `UnionScalar::type_code` contains one of the values in `child_ids` and not the index of one of the values in `child_ids` so it must be validated using `std::find` or so instead of by comparison to `child_ids.size()`\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n\nReview comment:\n       SGTM, please do\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -902,6 +1214,37 @@ TEST(TestDictionaryScalar, Basics) {\n   }\n }\n \n+TEST(TestDictionaryScalar, ValidateErrors) {\n+  auto index_ty = int16();\n+  auto value_ty = utf8();\n+  auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\"])\");\n\nReview comment:\n       For completeness, would you add a case where a valid index encodes a null dictionary entry?\r\n   ```suggestion\r\n     auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\", null])\");\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n\nReview comment:\n       Nit: de-nest this for clarity\r\n   ```suggestion\r\n       if (s.is_valid && !s.value.index->is_valid) {\r\n         return Status::Invalid(\"non-null \", s.type->ToString(),\r\n                                \" scalar has null index value\");\r\n       }\r\n   \r\n       if (!s.is_valid && s.value.index->is_valid) {\r\n         return Status::Invalid(\"null \", s.type->ToString(),\r\n                                \" scalar has non-null index value\");\r\n       }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       Now that compute::Cast supports scalars for all types, is it worth keeping Scalar::Parse and Scalar::CastTo?\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -902,6 +1214,37 @@ TEST(TestDictionaryScalar, Basics) {\n   }\n }\n \n+TEST(TestDictionaryScalar, ValidateErrors) {\n+  auto index_ty = int16();\n+  auto value_ty = utf8();\n+  auto dict = ArrayFromJSON(value_ty, R\"([\"alpha\", \"beta\", \"gamma\"])\");\n\nReview comment:\n       I'd say `is_valid==true`\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       will do\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -152,10 +154,261 @@ struct ScalarHashImpl {\n   size_t hash_;\n };\n \n+// Implementation of Scalar::Validate() and Scalar::ValidateFull()\n+struct ScalarValidateImpl {\n+  const bool full_validation_;\n+\n+  explicit ScalarValidateImpl(bool full_validation) : full_validation_(full_validation) {\n+    ::arrow::util::InitializeUTF8();\n+  }\n+\n+  Status Validate(const Scalar& scalar) {\n+    if (!scalar.type) {\n+      return Status::Invalid(\"scalar lacks a type\");\n+    }\n+    return VisitScalarInline(scalar, this);\n+  }\n+\n+  Status Visit(const NullScalar& s) {\n+    if (s.is_valid) {\n+      return Status::Invalid(\"null scalar should have is_valid = false\");\n+    }\n+    return Status::OK();\n+  }\n+\n+  template <typename T>\n+  Status Visit(const internal::PrimitiveScalar<T>& s) {\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseBinaryScalar& s) { return ValidateBinaryScalar(s); }\n+\n+  Status Visit(const StringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const LargeStringScalar& s) { return ValidateStringScalar(s); }\n+\n+  Status Visit(const FixedSizeBinaryScalar& s) {\n+    RETURN_NOT_OK(ValidateBinaryScalar(s));\n+    if (s.is_valid) {\n+      const auto& byte_width =\n+          checked_cast<const FixedSizeBinaryType&>(*s.type).byte_width();\n+      if (s.value->size() != byte_width) {\n+        return Status::Invalid(s.type->ToString(), \" scalar should have a value of size \",\n+                               byte_width, \", got \", s.value->size());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal128Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const Decimal256Scalar& s) {\n+    // XXX validate precision?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const BaseListScalar& s) { return ValidateBaseListScalar(s); }\n+\n+  Status Visit(const FixedSizeListScalar& s) {\n+    RETURN_NOT_OK(ValidateBaseListScalar(s));\n+    if (s.is_valid) {\n+      const auto& list_type = checked_cast<const FixedSizeListType&>(*s.type);\n+      if (s.value->length() != list_type.list_size()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar should have a child value of length \",\n+                               list_type.list_size(), \", got \", s.value->length());\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const StructScalar& s) {\n+    if (!s.is_valid) {\n+      if (!s.value.empty()) {\n+        return Status::Invalid(s.type->ToString(),\n+                               \" scalar is marked null but has child values\");\n+      }\n+      return Status::OK();\n+    }\n+    const int num_fields = s.type->num_fields();\n+    const auto& fields = s.type->fields();\n+    if (fields.size() != s.value.size()) {\n+      return Status::Invalid(\"non-null \", s.type->ToString(), \" scalar should have \",\n+                             num_fields, \" child values, got \", s.value.size());\n+    }\n+    for (int i = 0; i < num_fields; ++i) {\n+      if (!s.value[i]) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has missing child value at index \", i);\n+      }\n+      const auto st = Validate(*s.value[i]);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for child at index \", i, \": \",\n+                              st.message());\n+      }\n+      if (!s.value[i]->type->Equals(*fields[i]->type())) {\n+        return Status::Invalid(\n+            s.type->ToString(), \" scalar should have a child value of type \",\n+            fields[i]->type()->ToString(), \"at index \", i, \", got \", s.value[i]->type);\n+      }\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const DictionaryScalar& s) {\n+    const auto& dict_type = checked_cast<const DictionaryType&>(*s.type);\n+    // Validate index\n+    if (!s.value.index) {\n+      return Status::Invalid(s.type->ToString(), \" scalar doesn't have an index value\");\n+    }\n+    {\n+      const auto st = Validate(*s.value.index);\n+      if (!st.ok()) {\n+        return st.WithMessage(s.type->ToString(),\n+                              \" scalar fails validation for index value: \", st.message());\n+      }\n+    }\n+    if (!s.value.index->type->Equals(*dict_type.index_type())) {\n+      return Status::Invalid(\n+          s.type->ToString(), \" scalar should have an index value of type \",\n+          dict_type.index_type()->ToString(), \", got \", s.value.index->type->ToString());\n+    }\n+    if (s.is_valid != s.value.index->is_valid) {\n+      if (s.is_valid) {\n+        return Status::Invalid(\"non-null \", s.type->ToString(),\n+                               \" scalar has null index value\");\n+      } else {\n+        return Status::Invalid(\"null \", s.type->ToString(),\n+                               \" scalar has non-null index value\");\n+      }\n+    }\n+\n+    // Validate dictionary\n+    if (!s.value.dictionary) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar doesn't have a dictionary value\");\n+    }\n+    {\n+      const auto st = full_validation_ ? s.value.dictionary->ValidateFull()\n+                                       : s.value.dictionary->Validate();\n+      if (!st.ok()) {\n+        return st.WithMessage(\n+            s.type->ToString(),\n+            \" scalar fails validation for dictionary value: \", st.message());\n+      }\n+    }\n+    if (!s.value.dictionary->type()->Equals(*dict_type.value_type())) {\n+      return Status::Invalid(s.type->ToString(),\n+                             \" scalar should have a dictionary value of type \",\n+                             dict_type.value_type()->ToString(), \", got \",\n+                             s.value.dictionary->type()->ToString());\n+    }\n+\n+    // XXX check index is in bounds?\n+    return Status::OK();\n+  }\n+\n+  Status Visit(const UnionScalar& s) {\n+    RETURN_NOT_OK(ValidateOptionalValue(s));\n+    const int type_code = s.type_code;  // avoid 8-bit int types for priting\n+    const auto& union_type = checked_cast<const UnionType&>(*s.type);\n+    const auto& child_ids = union_type.child_ids();\n+    if (type_code < 0 || type_code >= static_cast<int64_t>(child_ids.size()) ||\n+        child_ids[type_code] == UnionType::kInvalidChildId) {\n\nReview comment:\n       ah, nevermind\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -37,14 +37,52 @@ namespace arrow {\n using internal::checked_cast;\n using internal::checked_pointer_cast;\n \n+std::shared_ptr<Scalar> CheckMakeNullScalar(const std::shared_ptr<DataType>& type) {\n+  const auto scalar = MakeNullScalar(type);\n+  ARROW_EXPECT_OK(scalar->Validate());\n+  ARROW_EXPECT_OK(scalar->ValidateFull());\n+  AssertTypeEqual(*type, *scalar->type);\n+  EXPECT_FALSE(scalar->is_valid);\n+  return scalar;\n+}\n+\n+template <typename... MakeScalarArgs>\n+void AssertMakeScalar(const Scalar& expected, MakeScalarArgs&&... args) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, MakeScalar(std::forward<MakeScalarArgs>(args)...));\n+  ASSERT_OK(scalar->Validate());\n+  ASSERT_OK(scalar->ValidateFull());\n+  AssertScalarsEqual(expected, *scalar, /*verbose=*/true);\n+}\n+\n+void AssertParseScalar(const std::shared_ptr<DataType>& type, const util::string_view& s,\n\nReview comment:\n       https://issues.apache.org/jira/browse/ARROW-9006\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-05T11:36:54.085+0000",
                    "updated": "2021-08-05T11:36:54.085+0000",
                    "started": "2021-08-05T11:36:54.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "634306",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/635920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862#issuecomment-895334946\n\n\n   I believe I addressed all review comments. Will merge if CI passes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T15:48:54.422+0000",
                    "updated": "2021-08-09T15:48:54.422+0000",
                    "started": "2021-08-09T15:48:54.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635920",
                    "issueId": "13384831"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/worklog/635949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #10862:\nURL: https://github.com/apache/arrow/pull/10862\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-09T17:05:29.247+0000",
                    "updated": "2021-08-09T17:05:29.247+0000",
                    "started": "2021-08-09T17:05:29.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "635949",
                    "issueId": "13384831"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1b82a45[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12a401fc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76c3528a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@44da064f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6410a2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7d333fce[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@118865e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5f4e1e0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@beaab2e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6fc328d2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3db6f7af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1fefea18[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 09 17:07:36 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-09T17:07:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13132/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-06-21T09:37:52.000+0000",
        "updated": "2021-08-09T17:07:36.000+0000",
        "timeoriginalestimate": null,
        "description": "In simple cases, scalar validation would probably be a no-op, but some types may deserve some checks (e.g. UTF8 validation).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add Scalar validation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/comment/17366484",
                    "id": "17366484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~bkietz] What do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-21T09:38:05.150+0000",
                    "updated": "2021-06-21T09:38:05.150+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13384831/comment/17396167",
                    "id": "17396167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10862\n[https://github.com/apache/arrow/pull/10862]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-09T17:07:36.047+0000",
                    "updated": "2021-08-09T17:07:36.047+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0s4hc:",
        "customfield_12314139": null
    }
}