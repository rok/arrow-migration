{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13326389",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389",
    "key": "ARROW-9937",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9937/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 49,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172\n\n\n   This PR is a proposal to fix 4 issues in our aggregations:\r\n   \r\n   1. averages are incorrect\r\n   2. they only support aggregations that can be reduced using a single value (reason for issue 1.)\r\n   3. they do not leverage arrow\u2019s aggregate kernels nor memory layout\r\n   4. they only support a single column\r\n   \r\n   The proposal is written here: https://docs.google.com/document/d/1n-GS103ih3QIeQMbf_zyDStjUmryRQd45ypgk884LHU/edit#\r\n   \r\n   Its main features:\r\n   \r\n   1. adds a test of a wrong average and fixes it\r\n   1. makes `ScalarValue` a nullable dynamic type, which is closer to how `Array` works (it is nullable)\r\n   2. Accumulators now know how to be updated from values (partial) and from other accumulators' state (final)\r\n   3. Accumulators can now receive more than one column\r\n   4. AggregateExec now knows how to serialize aggregators' state into a ArrayRef's, so that they can be passed throughout the execution\r\n   5. Aggregations are now always made in two steps: partial (update from values) and full (update from other's states)\r\n   6. MergeExec merges batches in a single batch to reduce batch fragmentation\r\n   7. Aggregations leverage arrow's kernels as much as possible (all aggregates + take + concatenate)\r\n   \r\n   This PR is built on top of 3 PRs that are under review, and thus is only a draft at this point. \r\n   \r\n   The benchmarks are between -30% and +15%. Given that the computation now always requires two passes, I was sufficiently happy with them. More can be achieved later.\r\n   \r\n   I am still evaluating the reason for the `aggregate_query_group_by`, but given the functionality that it adds, I considered it sufficiently good for some initial discussions, @andygrove , @nevi-me , @alamb @paddyhoran .\r\n   \r\n   The benchmarks were updated to better reflect real data, and the results are as follows:\r\n   \r\n   ```\r\n   aggregate_query_no_group_by 15 12                                                                            \r\n                           time:   [478.23 us 479.62 us 480.98 us]\r\n                           change: [-29.686% -27.511% -25.784%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     2 (2.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   aggregate_query_group_by 15 12                                                                             \r\n                           time:   [2.8689 ms 2.8794 ms 2.8922 ms]\r\n                           change: [+12.971% +13.710% +14.445%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     3 (3.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   aggregate_query_group_by_with_filter 15 12                                                                             \r\n                           time:   [2.1803 ms 2.2062 ms 2.2330 ms]\r\n                           change: [-8.2400% -6.7872% -5.3209%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   ```\r\n   \r\n   Sorry for the long PR, but this was a relatively difficult PR to achieve, as it required refactoring of some of our most delicate components. I will try to split it in smaller parts to each the review.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:36:16.114+0000",
                    "updated": "2020-09-11T21:36:16.114+0000",
                    "started": "2020-09-11T21:36:16.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482300",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#issuecomment-691324132\n\n\n   I plan to review this carefully tomorrow morning US eastern time\n   \n   On Fri, Sep 11, 2020 at 5:36 PM Jorge Leitao <notifications@github.com>\n   wrote:\n   \n   > This PR is a proposal to fix 4 issues in our aggregations:\n   >\n   >    1. averages are incorrect\n   >    2. they only support aggregations that can be reduced using a single\n   >    value (reason for issue 1.)\n   >    3. they do not leverage arrow\u2019s aggregate kernels nor memory layout\n   >    4. they only support a single column\n   >\n   > The proposal is written here:\n   > https://docs.google.com/document/d/1n-GS103ih3QIeQMbf_zyDStjUmryRQd45ypgk884LHU/edit#\n   >\n   > Its main features:\n   >\n   >    1. adds a test of a wrong average and fixes it\n   >    2. makes ScalarValue a nullable dynamic type, which is closer to how\n   >    Array works (it is nullable)\n   >    3. Accumulators now know how to be updated from values (partial) and\n   >    from other accumulators' state (final)\n   >    4. Accumulators can now receive more than one column\n   >    5. AggregateExec now knows how to serialize aggregators' state into a\n   >    ArrayRef's, so that they can be passed throughout the execution\n   >    6. Aggregations are now always made in two steps: partial (update from\n   >    values) and full (update from other's states)\n   >    7. MergeExec merges batches in a single batch to reduce batch\n   >    fragmentation\n   >    8. Aggregations leverage arrow's kernels as much as possible (all\n   >    aggregates + take + concatenate)\n   >\n   > This PR is built on top of 3 PRs that are under review, and thus is only a\n   > draft at this point.\n   >\n   > The benchmarks are between -30% and +15%. Given that the computation now\n   > always requires two passes, I was sufficiently happy with them. More can be\n   > achieved later.\n   >\n   > I am still evaluating the reason for the aggregate_query_group_by, but\n   > given the functionality that it adds, I considered it sufficiently good for\n   > some initial discussions, @andygrove <https://github.com/andygrove> ,\n   > @nevi-me <https://github.com/nevi-me> , @alamb <https://github.com/alamb>\n   > @paddyhoran <https://github.com/paddyhoran> .\n   >\n   > The benchmarks were updated to better reflect real data, and the results\n   > are as follows:\n   >\n   > aggregate_query_no_group_by 15 12\n   >\n   >                         time:   [478.23 us 479.62 us 480.98 us]\n   >\n   >                         change: [-29.686% -27.511% -25.784%] (p = 0.00 < 0.05)\n   >\n   >                         Performance has improved.\n   >\n   > Found 7 outliers among 100 measurements (7.00%)\n   >\n   >   2 (2.00%) high mild\n   >\n   >   5 (5.00%) high severe\n   >\n   >\n   >\n   > aggregate_query_group_by 15 12\n   >\n   >                         time:   [2.8689 ms 2.8794 ms 2.8922 ms]\n   >\n   >                         change: [+12.971% +13.710% +14.445%] (p = 0.00 < 0.05)\n   >\n   >                         Performance has regressed.\n   >\n   > Found 5 outliers among 100 measurements (5.00%)\n   >\n   >   3 (3.00%) high mild\n   >\n   >   2 (2.00%) high severe\n   >\n   >\n   >\n   > aggregate_query_group_by_with_filter 15 12\n   >\n   >                         time:   [2.1803 ms 2.2062 ms 2.2330 ms]\n   >\n   >                         change: [-8.2400% -6.7872% -5.3209%] (p = 0.00 < 0.05)\n   >\n   >                         Performance has improved.\n   >\n   > Found 1 outliers among 100 measurements (1.00%)\n   >\n   >   1 (1.00%) high mild\n   >\n   >\n   > Sorry for the long PR, but this was a relatively difficult PR to achieve,\n   > as it required refactoring of some of our most delicate components. I will\n   > try to split it in smaller parts to each the review.\n   > ------------------------------\n   > You can view, comment on, or merge this pull request online at:\n   >\n   >   https://github.com/apache/arrow/pull/8172\n   > Commit Summary\n   >\n   >    - Made aggregates support same signatures as functions.\n   >    - Added test of average.\n   >    - Added bench.\n   >    - Added min/max of StringArray\n   >    - Improved performance of take.\n   >    - Refactored aggregate expressions to support complex aggregations.\n   >\n   > File Changes\n   >\n   >    - *M* rust/arrow/src/compute/kernels/aggregate.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-d429b07b78d669cf4b46fbb939b2c2b4>\n   >    (69)\n   >    - *M* rust/arrow/src/compute/kernels/take.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-f8e948e2041b5ec28e1ed52afa033c7a>\n   >    (205)\n   >    - *M* rust/datafusion/Cargo.toml\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-3a31d76ae91bd469dc925ad19fae784e>\n   >    (1)\n   >    - *M* rust/datafusion/benches/aggregate_query_sql.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-d651493b657e5fbc784373f751eeb0ac>\n   >    (134)\n   >    - *M* rust/datafusion/src/execution/context.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-8273e76b6910baa123f3a25a967af3b5>\n   >    (59)\n   >    - *M* rust/datafusion/src/lib.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-86191acf7b8e35ce12a84dbb4c4aa80a>\n   >    (1)\n   >    - *M* rust/datafusion/src/logical_plan/mod.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-9922d86c805a8dc858387eb47612caae>\n   >    (185)\n   >    - *M* rust/datafusion/src/optimizer/filter_push_down.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-4de075a6e9df08cd9c9f37333c5dffb1>\n   >    (14)\n   >    - *M* rust/datafusion/src/optimizer/projection_push_down.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-6d2de6d63c825bb8b553d876e2f8a0db>\n   >    (2)\n   >    - *M* rust/datafusion/src/optimizer/utils.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-541a57a1eedc375627a8b9ef9bb82a99>\n   >    (4)\n   >    - *A* rust/datafusion/src/physical_plan/aggregates.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-fd1edcd337781e9ec6538ef3c4591f3d>\n   >    (156)\n   >    - *M* rust/datafusion/src/physical_plan/common.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-a0bf07ce0c251f5bb6acbaa1981c6344>\n   >    (124)\n   >    - *M* rust/datafusion/src/physical_plan/expressions.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-a98d5d588d3c5b525c6840271a5bdddc>\n   >    (1460)\n   >    - *M* rust/datafusion/src/physical_plan/filter.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-5a5d8d45d9149e76b5f98ba90b32ec2b>\n   >    (7)\n   >    - *M* rust/datafusion/src/physical_plan/functions.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-58faffded5f7be9bf6b08dffbcd9eb8b>\n   >    (18)\n   >    - *M* rust/datafusion/src/physical_plan/hash_aggregate.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-a088cd6cbf2e53a43867b69737c485fe>\n   >    (796)\n   >    - *M* rust/datafusion/src/physical_plan/mod.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-444c9d0d823509bd21c36adcf5a58a59>\n   >    (68)\n   >    - *M* rust/datafusion/src/physical_plan/planner.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-8a7abbf6e4953d964b49b836c832b478>\n   >    (86)\n   >    - *M* rust/datafusion/src/physical_plan/type_coercion.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-282dd66764bc913288d68b8c748ca1c0>\n   >    (18)\n   >    - *A* rust/datafusion/src/scalar.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-d2edb06c8da67de0a7f8ae35e7e7e835>\n   >    (232)\n   >    - *M* rust/datafusion/src/sql/planner.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-21b952259e12c1adf2098d9a797caef1>\n   >    (76)\n   >    - *M* rust/datafusion/src/test/mod.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-fb5577d6be40dc90593d523c89fa0f46>\n   >    (16)\n   >    - *M* rust/datafusion/src/test/variable.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-4ab82593dbaf24ea43bad04292f79a1f>\n   >    (6)\n   >    - *M* rust/datafusion/src/variable/mod.rs\n   >    <https://github.com/apache/arrow/pull/8172/files#diff-a0eb1850b19b4e304a0345696bffed77>\n   >    (2)\n   >\n   > Patch Links:\n   >\n   >    - https://github.com/apache/arrow/pull/8172.patch\n   >    - https://github.com/apache/arrow/pull/8172.diff\n   >\n   > \u2014\n   > You are receiving this because you were mentioned.\n   > Reply to this email directly, view it on GitHub\n   > <https://github.com/apache/arrow/pull/8172>, or unsubscribe\n   > <https://github.com/notifications/unsubscribe-auth/AADXZMLPBDZORLFYARREPXDSFKJ45ANCNFSM4RIMHT7Q>\n   > .\n   >\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:41:12.730+0000",
                    "updated": "2020-09-11T21:41:12.730+0000",
                    "started": "2020-09-11T21:41:12.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482303",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#issuecomment-691326047\n\n\n   https://issues.apache.org/jira/browse/ARROW-9937\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:46:42.637+0000",
                    "updated": "2020-09-11T21:46:42.637+0000",
                    "started": "2020-09-11T21:46:42.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482305",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487305150\n\n\n\n##########\nFile path: rust/datafusion/benches/aggregate_query_sql.rs\n##########\n@@ -39,72 +46,105 @@ fn aggregate_query(ctx: &mut ExecutionContext, sql: &str) {\n     for _batch in results {}\n }\n \n-fn create_context() -> ExecutionContext {\n-    // define schema for data source (csv file)\n+fn create_data(size: usize, null_density: f64) -> Vec<Option<f64>> {\n+    // use random numbers to avoid spurious compiler optimizations wrt to branching\n+    let mut rng = rand::thread_rng();\n+\n+    (0..size)\n+        .map(|_| {\n+            if rng.gen::<f64>() > null_density {\n+                None\n+            } else {\n+                Some(rng.gen::<f64>())\n+            }\n+        })\n+        .collect()\n+}\n+\n+fn create_context(\n+    partitions_len: usize,\n+    array_len: usize,\n+    batch_size: usize,\n+) -> Result<ExecutionContext> {\n+    // define a schema.\n     let schema = Arc::new(Schema::new(vec![\n-        Field::new(\"c1\", DataType::Utf8, false),\n-        Field::new(\"c2\", DataType::UInt32, false),\n-        Field::new(\"c3\", DataType::Int8, false),\n-        Field::new(\"c4\", DataType::Int16, false),\n-        Field::new(\"c5\", DataType::Int32, false),\n-        Field::new(\"c6\", DataType::Int64, false),\n-        Field::new(\"c7\", DataType::UInt8, false),\n-        Field::new(\"c8\", DataType::UInt16, false),\n-        Field::new(\"c9\", DataType::UInt32, false),\n-        Field::new(\"c10\", DataType::UInt64, false),\n-        Field::new(\"c11\", DataType::Float32, false),\n-        Field::new(\"c12\", DataType::Float64, false),\n-        Field::new(\"c13\", DataType::Utf8, false),\n+        Field::new(\"utf8\", DataType::Utf8, false),\n+        Field::new(\"f32\", DataType::Float32, false),\n+        Field::new(\"f64\", DataType::Float64, false),\n     ]));\n \n-    let testdata = env::var(\"ARROW_TEST_DATA\").expect(\"ARROW_TEST_DATA not defined\");\n+    // define data.\n+    let partitions = (0..partitions_len)\n+        .map(|_| {\n+            (0..array_len / batch_size / partitions_len)\n+                .map(|i| {\n+                    let keys: Vec<String> = (0..batch_size)\n+                        .map(\n+                            // the 4 here is the number of different keys.\n+                            // a higher number increase sparseness\n+                            |i| format!(\"hi{}\", i % 4),\n\nReview comment:\n       This should be random, i%4 is quite predictable. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:46:45.651+0000",
                    "updated": "2020-09-11T21:46:45.651+0000",
                    "started": "2020-09-11T21:46:45.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482306",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487305313\n\n\n\n##########\nFile path: rust/datafusion/benches/aggregate_query_sql.rs\n##########\n@@ -39,72 +46,105 @@ fn aggregate_query(ctx: &mut ExecutionContext, sql: &str) {\n     for _batch in results {}\n }\n \n-fn create_context() -> ExecutionContext {\n-    // define schema for data source (csv file)\n+fn create_data(size: usize, null_density: f64) -> Vec<Option<f64>> {\n+    // use random numbers to avoid spurious compiler optimizations wrt to branching\n+    let mut rng = rand::thread_rng();\n+\n+    (0..size)\n+        .map(|_| {\n+            if rng.gen::<f64>() > null_density {\n+                None\n+            } else {\n+                Some(rng.gen::<f64>())\n+            }\n+        })\n+        .collect()\n+}\n+\n+fn create_context(\n+    partitions_len: usize,\n+    array_len: usize,\n+    batch_size: usize,\n+) -> Result<ExecutionContext> {\n+    // define a schema.\n     let schema = Arc::new(Schema::new(vec![\n-        Field::new(\"c1\", DataType::Utf8, false),\n-        Field::new(\"c2\", DataType::UInt32, false),\n-        Field::new(\"c3\", DataType::Int8, false),\n-        Field::new(\"c4\", DataType::Int16, false),\n-        Field::new(\"c5\", DataType::Int32, false),\n-        Field::new(\"c6\", DataType::Int64, false),\n-        Field::new(\"c7\", DataType::UInt8, false),\n-        Field::new(\"c8\", DataType::UInt16, false),\n-        Field::new(\"c9\", DataType::UInt32, false),\n-        Field::new(\"c10\", DataType::UInt64, false),\n-        Field::new(\"c11\", DataType::Float32, false),\n-        Field::new(\"c12\", DataType::Float64, false),\n-        Field::new(\"c13\", DataType::Utf8, false),\n+        Field::new(\"utf8\", DataType::Utf8, false),\n+        Field::new(\"f32\", DataType::Float32, false),\n+        Field::new(\"f64\", DataType::Float64, false),\n     ]));\n \n-    let testdata = env::var(\"ARROW_TEST_DATA\").expect(\"ARROW_TEST_DATA not defined\");\n+    // define data.\n+    let partitions = (0..partitions_len)\n+        .map(|_| {\n+            (0..array_len / batch_size / partitions_len)\n+                .map(|i| {\n+                    let keys: Vec<String> = (0..batch_size)\n+                        .map(\n+                            // the 4 here is the number of different keys.\n+                            // a higher number increase sparseness\n+                            |i| format!(\"hi{}\", i % 4),\n+                        )\n+                        .collect();\n+                    let keys: Vec<&str> = keys.iter().map(|e| &**e).collect();\n+\n+                    let values = create_data(batch_size, 0.5);\n+\n+                    RecordBatch::try_new(\n+                        schema.clone(),\n+                        vec![\n+                            Arc::new(StringArray::from(keys)),\n+                            Arc::new(Float32Array::from(vec![i as f32; batch_size])),\n+                            Arc::new(Float64Array::from(values)),\n+                        ],\n+                    )\n+                    .unwrap()\n+                })\n+                .collect::<Vec<_>>()\n+        })\n+        .collect::<Vec<_>>();\n \n-    // create CSV data source\n-    let csv = CsvFile::try_new(\n-        &format!(\"{}/csv/aggregate_test_100.csv\", testdata),\n-        CsvReadOptions::new().schema(&schema),\n-    )\n-    .unwrap();\n+    let mut ctx = ExecutionContext::new();\n \n-    let mem_table = MemTable::load(&csv).unwrap();\n+    // declare a table in memory. In spark API, this corresponds to createDataFrame(...).\n+    let provider = MemTable::new(schema, partitions)?;\n+    ctx.register_table(\"t\", Box::new(provider));\n \n-    // create local execution context\n-    let mut ctx = ExecutionContext::new();\n-    ctx.register_table(\"aggregate_test_100\", Box::new(mem_table));\n-    ctx\n+    Ok(ctx)\n }\n \n fn criterion_benchmark(c: &mut Criterion) {\n-    c.bench_function(\"aggregate_query_no_group_by\", |b| {\n-        let mut ctx = create_context();\n+    let partitions_len = 4;\n+    let array_len = 32768; // 2^15\n+    let batch_size = 2048; // 2^11\n+    let mut ctx = create_context(partitions_len, array_len, batch_size).unwrap();\n+\n+    c.bench_function(\"aggregate_query_no_group_by 15 12\", |b| {\n\nReview comment:\n       11, not 12.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:47:11.614+0000",
                    "updated": "2020-09-11T21:47:11.614+0000",
                    "started": "2020-09-11T21:47:11.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482308",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487307067\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/common.rs\n##########\n@@ -205,3 +213,91 @@ pub fn get_scalar_value(array: &ArrayRef, row: usize) -> Result<Option<ScalarVal\n     };\n     Ok(value)\n }\n+\n+/// Converts a scalar value into an array.\n+/// This is useful for aggregations.\n+pub fn to_array(value: &ScalarValue) -> Result<ArrayRef> {\n+    match value {\n+        ScalarValue::Boolean(e) => Ok(Arc::new(BooleanArray::from(vec![*e])) as ArrayRef),\n+        ScalarValue::Float64(e) => Ok(Arc::new(Float64Array::from(vec![*e])) as ArrayRef),\n+        ScalarValue::Float32(e) => Ok(Arc::new(Float32Array::from(vec![*e]))),\n+        ScalarValue::Int8(e) => Ok(Arc::new(Int8Array::from(vec![*e]))),\n+        ScalarValue::Int16(e) => Ok(Arc::new(Int16Array::from(vec![*e]))),\n+        ScalarValue::Int32(e) => Ok(Arc::new(Int32Array::from(vec![*e]))),\n+        ScalarValue::Int64(e) => Ok(Arc::new(Int64Array::from(vec![*e]))),\n+        ScalarValue::UInt8(e) => Ok(Arc::new(UInt8Array::from(vec![*e]))),\n+        ScalarValue::UInt16(e) => Ok(Arc::new(UInt16Array::from(vec![*e]))),\n+        ScalarValue::UInt32(e) => Ok(Arc::new(UInt32Array::from(vec![*e]))),\n+        ScalarValue::UInt64(e) => Ok(Arc::new(UInt64Array::from(vec![*e]))),\n+        ScalarValue::Utf8(e) => {\n+            // awful code...\n+            let v = e.as_ref().unwrap_or(&\"\".to_string()).clone();\n+            let v = e.as_ref().and_then(|_| Some(&*v));\n+            Ok(Arc::new(StringArray::from(vec![v])))\n+        }\n+        ScalarValue::LargeUtf8(e) => {\n+            // awful code...\n+            let v = e.as_ref().unwrap_or(&\"\".to_string()).clone();\n+            let v = e.as_ref().and_then(|_| Some(&*v));\n+            Ok(Arc::new(LargeStringArray::from(vec![v])))\n+        }\n+        ScalarValue::Null => Err(ExecutionError::InternalError(format!(\n+            \"Cannot convert scalar {:?} to array\",\n+            value\n+        ))),\n+        ScalarValue::Struct(_) => Err(ExecutionError::InternalError(format!(\n+            \"Cannot convert scalar {:?} to array\",\n+            value\n+        ))),\n+    }\n+}\n+\n+/// creates an empty record batch.\n+pub fn create_batch_empty(schema: &Schema) -> Result<Vec<ArrayRef>> {\n+    schema\n+        .fields()\n+        .iter()\n+        .map(|f| match f.data_type() {\n+            DataType::Float32 => {\n+                Ok(Arc::new(Float32Array::from(vec![] as Vec<f32>)) as ArrayRef)\n+            }\n+            DataType::Float64 => {\n+                Ok(Arc::new(Float64Array::from(vec![] as Vec<f64>)) as ArrayRef)\n+            }\n+            DataType::Int64 => {\n+                Ok(Arc::new(Int64Array::from(vec![] as Vec<i64>)) as ArrayRef)\n+            }\n+            DataType::Int32 => {\n+                Ok(Arc::new(Int32Array::from(vec![] as Vec<i32>)) as ArrayRef)\n+            }\n+            DataType::Int16 => {\n+                Ok(Arc::new(Int16Array::from(vec![] as Vec<i16>)) as ArrayRef)\n+            }\n+            DataType::Int8 => {\n+                Ok(Arc::new(Int8Array::from(vec![] as Vec<i8>)) as ArrayRef)\n+            }\n+            DataType::UInt64 => {\n+                Ok(Arc::new(UInt64Array::from(vec![] as Vec<u64>)) as ArrayRef)\n+            }\n+            DataType::UInt32 => {\n+                Ok(Arc::new(UInt32Array::from(vec![] as Vec<u32>)) as ArrayRef)\n+            }\n+            DataType::UInt16 => {\n+                Ok(Arc::new(UInt16Array::from(vec![] as Vec<u16>)) as ArrayRef)\n+            }\n+            DataType::UInt8 => {\n+                Ok(Arc::new(UInt8Array::from(vec![] as Vec<u8>)) as ArrayRef)\n+            }\n+            DataType::Utf8 => {\n+                Ok(Arc::new(StringArray::from(vec![] as Vec<&str>)) as ArrayRef)\n+            }\n+            DataType::Boolean => {\n+                Ok(Arc::new(BooleanArray::from(vec![] as Vec<bool>)) as ArrayRef)\n+            }\n+            _ => Err(ExecutionError::NotImplemented(format!(\n\nReview comment:\n       So far this was enough because we do not have aggregations with other types, but this is needed because some batches can have no entries, in which case we need to build an empty record batch.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:52:42.738+0000",
                    "updated": "2020-09-11T21:52:42.738+0000",
                    "started": "2020-09-11T21:52:42.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482311",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487307984\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -97,766 +104,712 @@ pub fn col(name: &str) -> Arc<dyn PhysicalExpr> {\n /// SUM aggregate expression\n #[derive(Debug)]\n pub struct Sum {\n+    name: String,\n\nReview comment:\n       `AggregateExpr` has this information with them now because it allows them to `create_accumulator` without access to the input schema. This is helpful because, on the second pass, we need to create accumulators on the fly, and the input_schema of the second pass is different, as it now corresponds to the schema \r\n   \r\n   `[group1, group2, agg1_state1, agg1_state2, ...]`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:55:33.365+0000",
                    "updated": "2020-09-11T21:55:33.365+0000",
                    "started": "2020-09-11T21:55:33.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482315",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487308486\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -97,766 +104,712 @@ pub fn col(name: &str) -> Arc<dyn PhysicalExpr> {\n /// SUM aggregate expression\n #[derive(Debug)]\n pub struct Sum {\n+    name: String,\n+    data_type: DataType,\n     expr: Arc<dyn PhysicalExpr>,\n+    nullable: bool,\n }\n \n-impl Sum {\n-    /// Create a new SUM aggregate function\n-    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n-        Self { expr }\n+/// function return type of a sum\n+pub fn sum_return_type(arg_type: &DataType) -> Result<DataType> {\n+    match arg_type {\n+        DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+            Ok(DataType::Int64)\n+        }\n+        DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+            Ok(DataType::UInt64)\n+        }\n+        DataType::Float32 => Ok(DataType::Float32),\n+        DataType::Float64 => Ok(DataType::Float64),\n+        other => Err(ExecutionError::General(format!(\n+            \"SUM does not support type \\\"{:?}\\\"\",\n+            other\n+        ))),\n     }\n }\n \n-impl AggregateExpr for Sum {\n-    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n-        match self.expr.data_type(input_schema)? {\n-            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n-                Ok(DataType::Int64)\n-            }\n-            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n-                Ok(DataType::UInt64)\n-            }\n-            DataType::Float32 => Ok(DataType::Float32),\n-            DataType::Float64 => Ok(DataType::Float64),\n-            other => Err(ExecutionError::General(format!(\n-                \"SUM does not support {:?}\",\n-                other\n-            ))),\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>, name: String, data_type: DataType) -> Self {\n+        Self {\n+            name,\n+            expr,\n+            data_type,\n+            nullable: true,\n         }\n     }\n+}\n \n-    fn nullable(&self, _input_schema: &Schema) -> Result<bool> {\n-        // null should be returned if no rows are aggregated\n-        Ok(true)\n+impl AggregateExpr for Sum {\n+    fn field(&self) -> Result<Field> {\n+        Ok(Field::new(\n+            &self.name,\n+            self.data_type.clone(),\n+            self.nullable,\n+        ))\n     }\n \n-    fn evaluate_input(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        self.expr.evaluate(batch)\n+    fn state_fields(&self) -> Result<Vec<Field>> {\n+        Ok(vec![Field::new(\n+            &format_state_name(&self.name, \"sum\"),\n+            self.data_type.clone(),\n+            self.nullable,\n+        )])\n     }\n \n-    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n-        Rc::new(RefCell::new(SumAccumulator { sum: None }))\n+    fn expressions(&self) -> Vec<Arc<dyn PhysicalExpr>> {\n+        vec![self.expr.clone()]\n     }\n \n-    fn create_reducer(&self, column_name: &str) -> Arc<dyn AggregateExpr> {\n-        Arc::new(Sum::new(Arc::new(Column::new(column_name))))\n+    fn create_accumulator(&self) -> Result<Rc<RefCell<dyn Accumulator>>> {\n+        Ok(Rc::new(RefCell::new(SumAccumulator::try_new(\n+            &self.data_type,\n+        )?)))\n     }\n }\n \n-macro_rules! sum_accumulate {\n\nReview comment:\n       This was operating on a row-by-row basis, which was replaced by a batch operation using `compute::sum`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T21:57:06.687+0000",
                    "updated": "2020-09-11T21:57:06.687+0000",
                    "started": "2020-09-11T21:57:06.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482316",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487309726\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -97,766 +104,712 @@ pub fn col(name: &str) -> Arc<dyn PhysicalExpr> {\n /// SUM aggregate expression\n #[derive(Debug)]\n pub struct Sum {\n+    name: String,\n+    data_type: DataType,\n     expr: Arc<dyn PhysicalExpr>,\n+    nullable: bool,\n }\n \n-impl Sum {\n-    /// Create a new SUM aggregate function\n-    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n-        Self { expr }\n+/// function return type of a sum\n+pub fn sum_return_type(arg_type: &DataType) -> Result<DataType> {\n+    match arg_type {\n+        DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n+            Ok(DataType::Int64)\n+        }\n+        DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n+            Ok(DataType::UInt64)\n+        }\n+        DataType::Float32 => Ok(DataType::Float32),\n+        DataType::Float64 => Ok(DataType::Float64),\n+        other => Err(ExecutionError::General(format!(\n+            \"SUM does not support type \\\"{:?}\\\"\",\n+            other\n+        ))),\n     }\n }\n \n-impl AggregateExpr for Sum {\n-    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n-        match self.expr.data_type(input_schema)? {\n-            DataType::Int8 | DataType::Int16 | DataType::Int32 | DataType::Int64 => {\n-                Ok(DataType::Int64)\n-            }\n-            DataType::UInt8 | DataType::UInt16 | DataType::UInt32 | DataType::UInt64 => {\n-                Ok(DataType::UInt64)\n-            }\n-            DataType::Float32 => Ok(DataType::Float32),\n-            DataType::Float64 => Ok(DataType::Float64),\n-            other => Err(ExecutionError::General(format!(\n-                \"SUM does not support {:?}\",\n-                other\n-            ))),\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>, name: String, data_type: DataType) -> Self {\n+        Self {\n+            name,\n+            expr,\n+            data_type,\n+            nullable: true,\n         }\n     }\n+}\n \n-    fn nullable(&self, _input_schema: &Schema) -> Result<bool> {\n-        // null should be returned if no rows are aggregated\n-        Ok(true)\n+impl AggregateExpr for Sum {\n+    fn field(&self) -> Result<Field> {\n+        Ok(Field::new(\n+            &self.name,\n+            self.data_type.clone(),\n+            self.nullable,\n+        ))\n     }\n \n-    fn evaluate_input(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        self.expr.evaluate(batch)\n+    fn state_fields(&self) -> Result<Vec<Field>> {\n+        Ok(vec![Field::new(\n+            &format_state_name(&self.name, \"sum\"),\n+            self.data_type.clone(),\n+            self.nullable,\n+        )])\n     }\n \n-    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n-        Rc::new(RefCell::new(SumAccumulator { sum: None }))\n+    fn expressions(&self) -> Vec<Arc<dyn PhysicalExpr>> {\n+        vec![self.expr.clone()]\n     }\n \n-    fn create_reducer(&self, column_name: &str) -> Arc<dyn AggregateExpr> {\n-        Arc::new(Sum::new(Arc::new(Column::new(column_name))))\n+    fn create_accumulator(&self) -> Result<Rc<RefCell<dyn Accumulator>>> {\n+        Ok(Rc::new(RefCell::new(SumAccumulator::try_new(\n+            &self.data_type,\n+        )?)))\n     }\n }\n \n-macro_rules! sum_accumulate {\n-    ($SELF:ident, $VALUE:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n-        $SELF.sum = match $SELF.sum {\n-            Some(ScalarValue::$SCALAR_VARIANT(n)) => {\n-                Some(ScalarValue::$SCALAR_VARIANT(n + $VALUE as $TY))\n-            }\n-            Some(_) => {\n-                return Err(ExecutionError::InternalError(\n-                    \"Unexpected ScalarValue variant\".to_string(),\n-                ))\n-            }\n-            None => Some(ScalarValue::$SCALAR_VARIANT($VALUE as $TY)),\n-        };\n-    }};\n-}\n-\n #[derive(Debug)]\n struct SumAccumulator {\n-    sum: Option<ScalarValue>,\n+    sum: ScalarValue,\n }\n \n-impl Accumulator for SumAccumulator {\n-    fn accumulate_scalar(&mut self, value: Option<ScalarValue>) -> Result<()> {\n-        if let Some(value) = value {\n-            match value {\n-                ScalarValue::Int8(value) => {\n-                    sum_accumulate!(self, value, Int8Array, Int64, i64);\n-                }\n-                ScalarValue::Int16(value) => {\n-                    sum_accumulate!(self, value, Int16Array, Int64, i64);\n-                }\n-                ScalarValue::Int32(value) => {\n-                    sum_accumulate!(self, value, Int32Array, Int64, i64);\n-                }\n-                ScalarValue::Int64(value) => {\n-                    sum_accumulate!(self, value, Int64Array, Int64, i64);\n-                }\n-                ScalarValue::UInt8(value) => {\n-                    sum_accumulate!(self, value, UInt8Array, UInt64, u64);\n-                }\n-                ScalarValue::UInt16(value) => {\n-                    sum_accumulate!(self, value, UInt16Array, UInt64, u64);\n-                }\n-                ScalarValue::UInt32(value) => {\n-                    sum_accumulate!(self, value, UInt32Array, UInt64, u64);\n-                }\n-                ScalarValue::UInt64(value) => {\n-                    sum_accumulate!(self, value, UInt64Array, UInt64, u64);\n-                }\n-                ScalarValue::Float32(value) => {\n-                    sum_accumulate!(self, value, Float32Array, Float32, f32);\n-                }\n-                ScalarValue::Float64(value) => {\n-                    sum_accumulate!(self, value, Float64Array, Float64, f64);\n-                }\n-                other => {\n-                    return Err(ExecutionError::General(format!(\n-                        \"SUM does not support {:?}\",\n-                        other\n-                    )))\n-                }\n-            }\n-        }\n-        Ok(())\n+impl SumAccumulator {\n+    /// new sum accumulator\n+    pub fn try_new(data_type: &DataType) -> Result<Self> {\n+        Ok(Self {\n+            sum: ScalarValue::try_from(data_type)?,\n+        })\n     }\n+}\n \n-    fn accumulate_batch(&mut self, array: &ArrayRef) -> Result<()> {\n-        let sum = match array.data_type() {\n-            DataType::UInt8 => {\n-                match compute::sum(array.as_any().downcast_ref::<UInt8Array>().unwrap()) {\n-                    Some(n) => Ok(Some(ScalarValue::UInt8(n))),\n-                    None => Ok(None),\n-                }\n+// returns the new value after sum with the new values, taking nullability into account\n+macro_rules! typed_sum_accumulate {\n+    ($OLD_VALUE:expr, $NEW_VALUES:expr, $ARRAYTYPE:ident, $SCALAR:ident, $TYPE:ident) => {{\n+        let array = $NEW_VALUES.as_any().downcast_ref::<$ARRAYTYPE>().unwrap();\n+        let delta = compute::sum(array);\n+        if $OLD_VALUE.is_none() {\n+            ScalarValue::$SCALAR(delta.and_then(|e| Some(e as $TYPE)))\n+        } else {\n+            let delta = delta.and_then(|e| Some(e as $TYPE)).unwrap_or(0 as $TYPE);\n+            ScalarValue::from($OLD_VALUE.unwrap() + delta)\n+        }\n+    }};\n+}\n+\n+// given an existing value `old` and an `array` of new values,\n+// performs a sum, returning the new value.\n+fn sum_accumulate(old: &ScalarValue, array: &ArrayRef) -> Result<ScalarValue> {\n+    Ok(match old {\n+        ScalarValue::Float64(sum) => match array.data_type() {\n+            DataType::Float64 => {\n+                typed_sum_accumulate!(sum, array, Float64Array, Float64, f64)\n             }\n-            DataType::UInt16 => {\n-                match compute::sum(array.as_any().downcast_ref::<UInt16Array>().unwrap())\n-                {\n-                    Some(n) => Ok(Some(ScalarValue::UInt16(n))),\n-                    None => Ok(None),\n-                }\n+            DataType::Float32 => {\n+                typed_sum_accumulate!(sum, array, Float32Array, Float64, f64)\n             }\n-            DataType::UInt32 => {\n-                match compute::sum(array.as_any().downcast_ref::<UInt32Array>().unwrap())\n-                {\n-                    Some(n) => Ok(Some(ScalarValue::UInt32(n))),\n-                    None => Ok(None),\n-                }\n+            DataType::Int64 => {\n+                typed_sum_accumulate!(sum, array, Int64Array, Float64, f64)\n+            }\n+            DataType::Int32 => {\n+                typed_sum_accumulate!(sum, array, Int32Array, Float64, f64)\n+            }\n+            DataType::Int16 => {\n+                typed_sum_accumulate!(sum, array, Int16Array, Float64, f64)\n             }\n+            DataType::Int8 => typed_sum_accumulate!(sum, array, Int8Array, Float64, f64),\n             DataType::UInt64 => {\n-                match compute::sum(array.as_any().downcast_ref::<UInt64Array>().unwrap())\n-                {\n-                    Some(n) => Ok(Some(ScalarValue::UInt64(n))),\n-                    None => Ok(None),\n-                }\n+                typed_sum_accumulate!(sum, array, UInt64Array, Float64, f64)\n             }\n-            DataType::Int8 => {\n-                match compute::sum(array.as_any().downcast_ref::<Int8Array>().unwrap()) {\n-                    Some(n) => Ok(Some(ScalarValue::Int8(n))),\n-                    None => Ok(None),\n-                }\n+            DataType::UInt32 => {\n+                typed_sum_accumulate!(sum, array, UInt32Array, Float64, f64)\n             }\n-            DataType::Int16 => {\n-                match compute::sum(array.as_any().downcast_ref::<Int16Array>().unwrap()) {\n-                    Some(n) => Ok(Some(ScalarValue::Int16(n))),\n-                    None => Ok(None),\n-                }\n+            DataType::UInt16 => {\n+                typed_sum_accumulate!(sum, array, UInt16Array, Float64, f64)\n             }\n-            DataType::Int32 => {\n-                match compute::sum(array.as_any().downcast_ref::<Int32Array>().unwrap()) {\n-                    Some(n) => Ok(Some(ScalarValue::Int32(n))),\n-                    None => Ok(None),\n-                }\n+            DataType::UInt8 => {\n+                typed_sum_accumulate!(sum, array, UInt8Array, Float64, f64)\n             }\n-            DataType::Int64 => {\n-                match compute::sum(array.as_any().downcast_ref::<Int64Array>().unwrap()) {\n-                    Some(n) => Ok(Some(ScalarValue::Int64(n))),\n-                    None => Ok(None),\n-                }\n+            dt => {\n+                return Err(ExecutionError::InternalError(format!(\n+                    \"Sum f64 does not expect to receive type {:?}\",\n+                    dt\n+                )))\n             }\n-            DataType::Float32 => {\n-                match compute::sum(array.as_any().downcast_ref::<Float32Array>().unwrap())\n-                {\n-                    Some(n) => Ok(Some(ScalarValue::Float32(n))),\n-                    None => Ok(None),\n-                }\n+        },\n+        ScalarValue::Float32(sum) => {\n+            typed_sum_accumulate!(sum, array, Float32Array, Float32, f32)\n+        }\n+        ScalarValue::UInt64(sum) => match array.data_type() {\n+            DataType::UInt64 => {\n+                typed_sum_accumulate!(sum, array, UInt64Array, UInt64, u64)\n             }\n-            DataType::Float64 => {\n-                match compute::sum(array.as_any().downcast_ref::<Float64Array>().unwrap())\n-                {\n-                    Some(n) => Ok(Some(ScalarValue::Float64(n))),\n-                    None => Ok(None),\n-                }\n+            DataType::UInt32 => {\n+                typed_sum_accumulate!(sum, array, UInt32Array, UInt64, u64)\n             }\n-            _ => Err(ExecutionError::ExecutionError(\n-                \"Unsupported data type for SUM\".to_string(),\n-            )),\n-        }?;\n-        self.accumulate_scalar(sum)\n+            DataType::UInt16 => {\n+                typed_sum_accumulate!(sum, array, UInt16Array, UInt64, u64)\n+            }\n+            DataType::UInt8 => typed_sum_accumulate!(sum, array, UInt8Array, UInt64, u64),\n+            dt => {\n+                return Err(ExecutionError::InternalError(format!(\n+                    \"Sum is not expected to receive type {:?}\",\n+                    dt\n+                )))\n+            }\n+        },\n+        ScalarValue::Int64(sum) => match array.data_type() {\n+            DataType::Int64 => typed_sum_accumulate!(sum, array, Int64Array, Int64, i64),\n+            DataType::Int32 => typed_sum_accumulate!(sum, array, Int32Array, Int64, i64),\n+            DataType::Int16 => typed_sum_accumulate!(sum, array, Int16Array, Int64, i64),\n+            DataType::Int8 => typed_sum_accumulate!(sum, array, Int8Array, Int64, i64),\n+            dt => {\n+                return Err(ExecutionError::InternalError(format!(\n+                    \"Sum is not expected to receive type {:?}\",\n+                    dt\n+                )))\n+            }\n+        },\n+        e => {\n+            return Err(ExecutionError::InternalError(format!(\n+                \"Sum is not expected to receive a scalar {:?}\",\n+                e\n+            )))\n+        }\n+    })\n+}\n+\n+impl Accumulator for SumAccumulator {\n+    fn update(&mut self, values: &Vec<ArrayRef>) -> Result<()> {\n+        // sum(v1, v2, v3) = v1 + v2 + v3\n+        self.sum = sum_accumulate(&self.sum, &values[0])?;\n+        Ok(())\n     }\n \n-    fn get_value(&self) -> Result<Option<ScalarValue>> {\n-        Ok(self.sum.clone())\n+    fn merge(&mut self, states: &Vec<ArrayRef>) -> Result<()> {\n+        let state = &states[0];\n+        // sum(sum1, sum2, sum3) = sum1 + sum2 + sum3\n+        self.sum = sum_accumulate(&self.sum, state)?;\n+        Ok(())\n     }\n-}\n \n-/// Create a sum expression\n-pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n-    Arc::new(Sum::new(expr))\n+    fn state(&self) -> Result<Vec<ScalarValue>> {\n+        Ok(vec![self.sum.clone()])\n+    }\n+\n+    fn value(&self) -> Result<ScalarValue> {\n+        Ok(self.sum.clone())\n+    }\n }\n \n /// AVG aggregate expression\n #[derive(Debug)]\n pub struct Avg {\n+    name: String,\n+    data_type: DataType,\n+    nullable: bool,\n     expr: Arc<dyn PhysicalExpr>,\n }\n \n-impl Avg {\n-    /// Create a new AVG aggregate function\n-    pub fn new(expr: Arc<dyn PhysicalExpr>) -> Self {\n-        Self { expr }\n+/// function return type of an average\n+pub fn avg_return_type(arg_type: &DataType) -> Result<DataType> {\n+    match arg_type {\n+        DataType::Int8\n+        | DataType::Int16\n+        | DataType::Int32\n+        | DataType::Int64\n+        | DataType::UInt8\n+        | DataType::UInt16\n+        | DataType::UInt32\n+        | DataType::UInt64\n+        | DataType::Float32\n+        | DataType::Float64 => Ok(DataType::Float64),\n+        other => Err(ExecutionError::General(format!(\n+            \"AVG does not support {:?}\",\n+            other\n+        ))),\n     }\n }\n \n-impl AggregateExpr for Avg {\n-    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n-        match self.expr.data_type(input_schema)? {\n-            DataType::Int8\n-            | DataType::Int16\n-            | DataType::Int32\n-            | DataType::Int64\n-            | DataType::UInt8\n-            | DataType::UInt16\n-            | DataType::UInt32\n-            | DataType::UInt64\n-            | DataType::Float32\n-            | DataType::Float64 => Ok(DataType::Float64),\n-            other => Err(ExecutionError::General(format!(\n-                \"AVG does not support {:?}\",\n-                other\n-            ))),\n+impl Avg {\n+    /// Create a new AVG aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>, name: String, data_type: DataType) -> Self {\n+        Self {\n+            name,\n+            expr,\n+            data_type,\n+            nullable: true,\n         }\n     }\n+}\n \n-    fn nullable(&self, _input_schema: &Schema) -> Result<bool> {\n-        // null should be returned if no rows are aggregated\n-        Ok(true)\n+impl AggregateExpr for Avg {\n+    fn field(&self) -> Result<Field> {\n+        Ok(Field::new(&self.name, DataType::Float64, true))\n     }\n \n-    fn evaluate_input(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        self.expr.evaluate(batch)\n+    fn state_fields(&self) -> Result<Vec<Field>> {\n+        Ok(vec![\n+            Field::new(\n+                &format_state_name(&self.name, \"count\"),\n+                DataType::UInt64,\n+                true,\n+            ),\n+            Field::new(\n+                &format_state_name(&self.name, \"sum\"),\n+                DataType::Float64,\n+                true,\n+            ),\n+        ])\n     }\n \n-    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n-        Rc::new(RefCell::new(AvgAccumulator {\n-            sum: None,\n-            count: None,\n-        }))\n+    fn create_accumulator(&self) -> Result<Rc<RefCell<dyn Accumulator>>> {\n+        Ok(Rc::new(RefCell::new(AvgAccumulator::try_new(\n+            // avg is f64\n+            &DataType::Float64,\n+        )?)))\n     }\n \n-    fn create_reducer(&self, column_name: &str) -> Arc<dyn AggregateExpr> {\n-        Arc::new(Avg::new(Arc::new(Column::new(column_name))))\n+    fn expressions(&self) -> Vec<Arc<dyn PhysicalExpr>> {\n+        vec![self.expr.clone()]\n     }\n }\n \n-macro_rules! avg_accumulate {\n-    ($SELF:ident, $VALUE:expr, $ARRAY_TYPE:ident) => {{\n-        match ($SELF.sum, $SELF.count) {\n-            (Some(sum), Some(count)) => {\n-                $SELF.sum = Some(sum + $VALUE as f64);\n-                $SELF.count = Some(count + 1);\n-            }\n-            _ => {\n-                $SELF.sum = Some($VALUE as f64);\n-                $SELF.count = Some(1);\n-            }\n-        };\n-    }};\n-}\n #[derive(Debug)]\n struct AvgAccumulator {\n-    sum: Option<f64>,\n-    count: Option<i64>,\n+    // sum is used for null\n+    sum: ScalarValue,\n+    count: u64,\n+}\n+\n+impl AvgAccumulator {\n+    pub fn try_new(datatype: &DataType) -> Result<Self> {\n+        Ok(Self {\n+            sum: ScalarValue::try_from(datatype)?,\n+            count: 0,\n+        })\n+    }\n }\n \n impl Accumulator for AvgAccumulator {\n-    fn accumulate_scalar(&mut self, value: Option<ScalarValue>) -> Result<()> {\n-        if let Some(value) = value {\n-            match value {\n-                ScalarValue::Int8(value) => avg_accumulate!(self, value, Int8Array),\n-                ScalarValue::Int16(value) => avg_accumulate!(self, value, Int16Array),\n-                ScalarValue::Int32(value) => avg_accumulate!(self, value, Int32Array),\n-                ScalarValue::Int64(value) => avg_accumulate!(self, value, Int64Array),\n-                ScalarValue::UInt8(value) => avg_accumulate!(self, value, UInt8Array),\n-                ScalarValue::UInt16(value) => avg_accumulate!(self, value, UInt16Array),\n-                ScalarValue::UInt32(value) => avg_accumulate!(self, value, UInt32Array),\n-                ScalarValue::UInt64(value) => avg_accumulate!(self, value, UInt64Array),\n-                ScalarValue::Float32(value) => avg_accumulate!(self, value, Float32Array),\n-                ScalarValue::Float64(value) => avg_accumulate!(self, value, Float64Array),\n-                other => {\n-                    return Err(ExecutionError::General(format!(\n-                        \"AVG does not support {:?}\",\n-                        other\n-                    )))\n-                }\n-            }\n-        }\n+    fn update(&mut self, values: &Vec<ArrayRef>) -> Result<()> {\n+        let values = &values[0];\n+\n+        self.count += (values.len() - values.data().null_count()) as u64;\n+        self.sum = sum_accumulate(&self.sum, values)?;\n         Ok(())\n     }\n \n-    fn accumulate_batch(&mut self, array: &ArrayRef) -> Result<()> {\n-        for row in 0..array.len() {\n-            self.accumulate_scalar(get_scalar_value(array, row)?)?;\n-        }\n+    fn merge(&mut self, states: &Vec<ArrayRef>) -> Result<()> {\n\nReview comment:\n       This is the prime example of this PR: the merge here uses two states to change two states from the accumulator.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:00:59.553+0000",
                    "updated": "2020-09-11T22:00:59.553+0000",
                    "started": "2020-09-11T22:00:59.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482320",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487310946\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1835,88 +1797,18 @@ mod tests {\n         Ok(())\n     }\n \n-    #[test]\n-    fn sum_contract() -> Result<()> {\n\nReview comment:\n       I removed these because the types are now selected from the signature, and no longer inferred by `AggregateExpr`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:04:54.772+0000",
                    "updated": "2020-09-11T22:04:54.772+0000",
                    "started": "2020-09-11T22:04:54.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482324",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487311864\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -848,6 +848,24 @@ mod tests {\n         Ok(())\n     }\n \n+    #[test]\n+    fn aggregate_grouped_empty() -> Result<()> {\n\nReview comment:\n       A test for grouped with an empty result\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:07:49.338+0000",
                    "updated": "2020-09-11T22:07:49.338+0000",
                    "started": "2020-09-11T22:07:49.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482326",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487312031\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -1147,6 +1165,41 @@ mod tests {\n         Ok(())\n     }\n \n+    #[test]\n+    fn simple_avg() -> Result<()> {\n+        let schema = Schema::new(vec![Field::new(\"a\", DataType::Int32, false)]);\n+\n+        let batch1 = RecordBatch::try_new(\n+            Arc::new(schema.clone()),\n+            vec![Arc::new(Int32Array::from(vec![1, 2, 3]))],\n+        )?;\n+        let batch2 = RecordBatch::try_new(\n+            Arc::new(schema.clone()),\n+            vec![Arc::new(Int32Array::from(vec![4, 5]))],\n+        )?;\n+\n+        let mut ctx = ExecutionContext::new();\n+\n+        let provider = MemTable::new(Arc::new(schema), vec![vec![batch1], vec![batch2]])?;\n+        ctx.register_table(\"t\", Box::new(provider));\n+\n+        let result = collect(&mut ctx, \"SELECT AVG(a) FROM t\")?;\n+\n+        let batch = &result[0];\n+        assert_eq!(1, batch.num_columns());\n+        assert_eq!(1, batch.num_rows());\n+\n+        let values = batch\n+            .column(0)\n+            .as_any()\n+            .downcast_ref::<Float64Array>()\n+            .expect(\"failed to cast version\");\n+        assert_eq!(values.len(), 1);\n+        // avg(1,2,3,4,5) = 3.0\n+        assert_eq!(values.value(0), 3.0_f64);\n\nReview comment:\n       This test fails in master, with 3.25 != 3.0\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:08:23.464+0000",
                    "updated": "2020-09-11T22:08:23.464+0000",
                    "started": "2020-09-11T22:08:23.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482328",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482330",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487314133\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_aggregate.rs\n##########\n@@ -276,117 +272,91 @@ impl RecordBatchReader for GroupedHashAggregateIterator {\n                 })\n                 .collect::<ArrowResult<Vec<_>>>()?;\n \n-            // evaluate the inputs to the aggregate expressions for this batch\n-            let aggr_input_values = self\n-                .aggr_expr\n-                .iter()\n-                .map(|expr| {\n-                    expr.evaluate_input(&batch)\n-                        .map_err(ExecutionError::into_arrow_external_error)\n-                })\n-                .collect::<ArrowResult<Vec<_>>>()?;\n+            // evaluate the aggregation expressions. We could evaluate them after the `take`, but since\n+            // we need to evaluate all of them anyways, it is more performant to do it while they are together.\n+            let aggr_input_values = evaluate(&expressions, &batch)\n+                .map_err(ExecutionError::into_arrow_external_error)?;\n \n             // create vector large enough to hold the grouping key\n+            // this is an optimization to avoid allocating `key` on every row.\n+            // it will be overwritten on the loop below\n             let mut key = Vec::with_capacity(group_values.len());\n             for _ in 0..group_values.len() {\n                 key.push(GroupByScalar::UInt32(0));\n             }\n \n-            // iterate over each row in the batch and create the accumulators for each grouping key\n-            let mut accums: Vec<Rc<AccumulatorSet>> =\n-                Vec::with_capacity(batch.num_rows());\n-\n+            // 1.1 construct the key from the group values\n+            // 1.2 construct/update the mapping key -> indexes (on the batch) used to `take` values from the batch in a single operation\n\nReview comment:\n       wrong comment, 1.2 and 1.3 are together.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:15:33.221+0000",
                    "updated": "2020-09-11T22:15:33.221+0000",
                    "started": "2020-09-11T22:15:33.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482330",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487315297\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/hash_aggregate.rs\n##########\n@@ -709,64 +659,111 @@ fn create_key(\n #[cfg(test)]\n mod tests {\n \n+    use arrow::array::Float64Array;\n+\n     use super::*;\n-    use crate::physical_plan::csv::{CsvExec, CsvReadOptions};\n-    use crate::physical_plan::expressions::{col, sum};\n+    use crate::physical_plan::expressions::{col, Avg};\n     use crate::physical_plan::merge::MergeExec;\n-    use crate::test;\n+    use crate::physical_plan::{common, memory::MemoryExec};\n+\n+    fn some_data() -> ArrowResult<(Arc<Schema>, Vec<RecordBatch>)> {\n\nReview comment:\n       I placed controlled data here so that we cab easily check the result\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:20:07.056+0000",
                    "updated": "2020-09-11T22:20:07.056+0000",
                    "started": "2020-09-11T22:20:07.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482335",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487316336\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -218,32 +217,18 @@ impl DefaultPhysicalPlanner {\n                     .collect::<Result<Vec<_>>>()?;\n                 let aggregates = aggr_expr\n                     .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_aggregate_expr(e, &input_schema, ctx_state),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n+                    .map(|e| self.create_aggregate_expr(e, &input_schema, ctx_state))\n                     .collect::<Result<Vec<_>>>()?;\n \n-                let initial_aggr = HashAggregateExec::try_new(\n+                let initial_aggr = Arc::new(HashAggregateExec::try_new(\n                     AggregateMode::Partial,\n                     groups.clone(),\n                     aggregates.clone(),\n                     input,\n-                )?;\n+                )?);\n \n-                if initial_aggr.output_partitioning().partition_count() == 1 {\n\nReview comment:\n       This seems major for a single partition.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:23:49.118+0000",
                    "updated": "2020-09-11T22:23:49.118+0000",
                    "started": "2020-09-11T22:23:49.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482339",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487316630\n\n\n\n##########\nFile path: rust/datafusion/src/scalar.rs\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module provides ScalarValue, an enum that can be used for storage of single elements\n+\n+use std::{convert::TryFrom, fmt};\n+\n+use arrow::datatypes::DataType;\n+\n+use crate::error::{ExecutionError, Result};\n+\n+/// ScalarValue enumeration\n+#[derive(Clone, PartialEq)]\n+pub enum ScalarValue {\n+    /// null value\n+    Null,\n\nReview comment:\n       no longer needed?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T22:24:42.144+0000",
                    "updated": "2020-09-11T22:24:42.144+0000",
                    "started": "2020-09-11T22:24:42.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482340",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487395554\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -125,192 +128,188 @@ pub fn sum_return_type(arg_type: &DataType) -> Result<DataType> {\n     }\n }\n \n-impl AggregateExpr for Sum {\n-    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n-        sum_return_type(&self.expr.data_type(input_schema)?)\n+impl Sum {\n+    /// Create a new SUM aggregate function\n+    pub fn new(expr: Arc<dyn PhysicalExpr>, name: String, data_type: DataType) -> Self {\n+        Self {\n+            name,\n+            expr,\n+            data_type,\n+            nullable: true,\n+        }\n     }\n+}\n \n-    fn nullable(&self, _input_schema: &Schema) -> Result<bool> {\n-        // null should be returned if no rows are aggregated\n-        Ok(true)\n+impl AggregateExpr for Sum {\n+    fn field(&self) -> Result<Field> {\n+        Ok(Field::new(\n+            &self.name,\n+            self.data_type.clone(),\n+            self.nullable,\n+        ))\n     }\n \n-    fn evaluate_input(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n-        self.expr.evaluate(batch)\n+    fn state_fields(&self) -> Result<Vec<Field>> {\n+        Ok(vec![Field::new(\n+            &format_state_name(&self.name, \"sum\"),\n+            self.data_type.clone(),\n+            self.nullable,\n+        )])\n     }\n \n-    fn create_accumulator(&self) -> Rc<RefCell<dyn Accumulator>> {\n-        Rc::new(RefCell::new(SumAccumulator { sum: None }))\n+    fn expressions(&self) -> Vec<Arc<dyn PhysicalExpr>> {\n+        vec![self.expr.clone()]\n     }\n \n-    fn create_reducer(&self, column_name: &str) -> Arc<dyn AggregateExpr> {\n-        Arc::new(Sum::new(Arc::new(Column::new(column_name))))\n+    fn create_accumulator(&self) -> Result<Rc<RefCell<dyn Accumulator>>> {\n+        Ok(Rc::new(RefCell::new(SumAccumulator::try_new(\n+            &self.data_type,\n+        )?)))\n     }\n }\n \n-macro_rules! sum_accumulate {\n-    ($SELF:ident, $VALUE:expr, $ARRAY_TYPE:ident, $SCALAR_VARIANT:ident, $TY:ty) => {{\n-        $SELF.sum = match $SELF.sum {\n-            Some(ScalarValue::$SCALAR_VARIANT(n)) => {\n-                Some(ScalarValue::$SCALAR_VARIANT(n + $VALUE as $TY))\n-            }\n-            Some(_) => {\n-                return Err(ExecutionError::InternalError(\n-                    \"Unexpected ScalarValue variant\".to_string(),\n-                ))\n-            }\n-            None => Some(ScalarValue::$SCALAR_VARIANT($VALUE as $TY)),\n-        };\n-    }};\n-}\n-\n #[derive(Debug)]\n struct SumAccumulator {\n-    sum: Option<ScalarValue>,\n+    sum: ScalarValue,\n }\n \n-impl Accumulator for SumAccumulator {\n-    fn accumulate_scalar(&mut self, value: Option<ScalarValue>) -> Result<()> {\n-        if let Some(value) = value {\n-            match value {\n-                ScalarValue::Int8(value) => {\n-                    sum_accumulate!(self, value, Int8Array, Int64, i64);\n-                }\n-                ScalarValue::Int16(value) => {\n-                    sum_accumulate!(self, value, Int16Array, Int64, i64);\n-                }\n-                ScalarValue::Int32(value) => {\n-                    sum_accumulate!(self, value, Int32Array, Int64, i64);\n-                }\n-                ScalarValue::Int64(value) => {\n-                    sum_accumulate!(self, value, Int64Array, Int64, i64);\n-                }\n-                ScalarValue::UInt8(value) => {\n-                    sum_accumulate!(self, value, UInt8Array, UInt64, u64);\n-                }\n-                ScalarValue::UInt16(value) => {\n-                    sum_accumulate!(self, value, UInt16Array, UInt64, u64);\n-                }\n-                ScalarValue::UInt32(value) => {\n-                    sum_accumulate!(self, value, UInt32Array, UInt64, u64);\n-                }\n-                ScalarValue::UInt64(value) => {\n-                    sum_accumulate!(self, value, UInt64Array, UInt64, u64);\n-                }\n-                ScalarValue::Float32(value) => {\n-                    sum_accumulate!(self, value, Float32Array, Float32, f32);\n-                }\n-                ScalarValue::Float64(value) => {\n-                    sum_accumulate!(self, value, Float64Array, Float64, f64);\n-                }\n-                other => {\n-                    return Err(ExecutionError::General(format!(\n-                        \"SUM does not support {:?}\",\n-                        other\n-                    )))\n-                }\n-            }\n-        }\n-        Ok(())\n+impl SumAccumulator {\n+    /// new sum accumulator\n+    pub fn try_new(data_type: &DataType) -> Result<Self> {\n+        Ok(Self {\n+            sum: ScalarValue::try_from(data_type)?,\n+        })\n     }\n+}\n \n-    fn accumulate_batch(&mut self, array: &ArrayRef) -> Result<()> {\n-        let sum = match array.data_type() {\n-            DataType::UInt8 => {\n-                match compute::sum(array.as_any().downcast_ref::<UInt8Array>().unwrap()) {\n-                    Some(n) => Ok(Some(ScalarValue::UInt8(n))),\n-                    None => Ok(None),\n-                }\n+// returns the new value after sum with the new values, taking nullability into account\n+macro_rules! typed_sum_accumulate {\n+    ($OLD_VALUE:expr, $NEW_VALUES:expr, $ARRAYTYPE:ident, $SCALAR:ident, $TYPE:ident) => {{\n+        let array = $NEW_VALUES.as_any().downcast_ref::<$ARRAYTYPE>().unwrap();\n+        let delta = compute::sum(array);\n+        if $OLD_VALUE.is_none() {\n+            ScalarValue::$SCALAR(delta.and_then(|e| Some(e as $TYPE)))\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -218,32 +217,18 @@ impl DefaultPhysicalPlanner {\n                     .collect::<Result<Vec<_>>>()?;\n                 let aggregates = aggr_expr\n                     .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_aggregate_expr(e, &input_schema, ctx_state),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n+                    .map(|e| self.create_aggregate_expr(e, &input_schema, ctx_state))\n                     .collect::<Result<Vec<_>>>()?;\n \n-                let initial_aggr = HashAggregateExec::try_new(\n+                let initial_aggr = Arc::new(HashAggregateExec::try_new(\n                     AggregateMode::Partial,\n                     groups.clone(),\n                     aggregates.clone(),\n                     input,\n-                )?;\n+                )?);\n \n-                if initial_aggr.output_partitioning().partition_count() == 1 {\n\nReview comment:\n       I a not sure I understand what you are getting at with this comment\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n\nReview comment:\n       so the idea here is that the code is faster if we don't have to check each element for nulls?\n\n##########\nFile path: rust/datafusion/src/physical_plan/aggregates.rs\n##########\n@@ -103,42 +103,54 @@ pub fn create_aggregate_expr(\n     fun: &AggregateFunction,\n     args: &Vec<Arc<dyn PhysicalExpr>>,\n     input_schema: &Schema,\n+    name: String,\n ) -> Result<Arc<dyn AggregateExpr>> {\n     // coerce\n     let arg = coerce(args, input_schema, &signature(fun))?[0].clone();\n \n+    let arg_types = args\n+        .iter()\n+        .map(|e| e.data_type(input_schema))\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let return_type = return_type(&fun, &arg_types)?;\n+\n     Ok(match fun {\n-        AggregateFunction::Count => expressions::count(arg),\n-        AggregateFunction::Sum => expressions::sum(arg),\n-        AggregateFunction::Min => expressions::min(arg),\n-        AggregateFunction::Max => expressions::max(arg),\n-        AggregateFunction::Avg => expressions::avg(arg),\n+        AggregateFunction::Count => {\n+            Arc::new(expressions::Count::new(arg, name, return_type))\n+        }\n+        AggregateFunction::Sum => Arc::new(expressions::Sum::new(arg, name, return_type)),\n+        AggregateFunction::Min => Arc::new(expressions::Min::new(arg, name, return_type)),\n+        AggregateFunction::Max => Arc::new(expressions::Max::new(arg, name, return_type)),\n+        AggregateFunction::Avg => Arc::new(expressions::Avg::new(arg, name, return_type)),\n     })\n }\n \n+static NUMERICS: &'static [DataType] = &[\n+    DataType::Int8,\n+    DataType::Int16,\n+    DataType::Int32,\n+    DataType::Int64,\n+    DataType::UInt8,\n+    DataType::UInt16,\n+    DataType::UInt32,\n+    DataType::UInt64,\n+    DataType::Float32,\n+    DataType::Float64,\n+];\n+\n /// the signatures supported by the function `fun`.\n fn signature(fun: &AggregateFunction) -> Signature {\n     // note: the physical expression must accept the type returned by this function or the execution panics.\n-\n     match fun {\n         AggregateFunction::Count => Signature::Any(1),\n-        AggregateFunction::Min\n-        | AggregateFunction::Max\n-        | AggregateFunction::Avg\n-        | AggregateFunction::Sum => Signature::Uniform(\n-            1,\n-            vec![\n-                DataType::Int8,\n-                DataType::Int16,\n-                DataType::Int32,\n-                DataType::Int64,\n-                DataType::UInt8,\n-                DataType::UInt16,\n-                DataType::UInt32,\n-                DataType::UInt64,\n-                DataType::Float32,\n-                DataType::Float64,\n-            ],\n-        ),\n+        AggregateFunction::Min | AggregateFunction::Max => {\n+            let mut valid = vec![DataType::Utf8, DataType::LargeUtf8];\n+            valid.extend_from_slice(NUMERICS);\n\nReview comment:\n       This is fancy -- do I correctly understand that it allows multiple columns in an aggregate expression (like `MAX(c1, c2)...`)?\n\n##########\nFile path: rust/datafusion/src/physical_plan/expressions.rs\n##########\n@@ -1835,88 +1797,18 @@ mod tests {\n         Ok(())\n     }\n \n-    #[test]\n-    fn sum_contract() -> Result<()> {\n\nReview comment:\n       makes sense\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T10:40:19.448+0000",
                    "updated": "2020-09-12T10:40:19.448+0000",
                    "started": "2020-09-12T10:40:19.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482468",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#issuecomment-691467826\n\n\n   BTW https://docs.google.com/document/d/1n-GS103ih3QIeQMbf_zyDStjUmryRQd45ypgk884LHU/edit# is a good read too -- thank you for writing that down\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T10:48:07.043+0000",
                    "updated": "2020-09-12T10:48:07.043+0000",
                    "started": "2020-09-12T10:48:07.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482470",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487403087\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/planner.rs\n##########\n@@ -218,32 +217,18 @@ impl DefaultPhysicalPlanner {\n                     .collect::<Result<Vec<_>>>()?;\n                 let aggregates = aggr_expr\n                     .iter()\n-                    .map(|e| {\n-                        tuple_err((\n-                            self.create_aggregate_expr(e, &input_schema, ctx_state),\n-                            e.name(&input_schema),\n-                        ))\n-                    })\n+                    .map(|e| self.create_aggregate_expr(e, &input_schema, ctx_state))\n                     .collect::<Result<Vec<_>>>()?;\n \n-                let initial_aggr = HashAggregateExec::try_new(\n+                let initial_aggr = Arc::new(HashAggregateExec::try_new(\n                     AggregateMode::Partial,\n                     groups.clone(),\n                     aggregates.clone(),\n                     input,\n-                )?;\n+                )?);\n \n-                if initial_aggr.output_partitioning().partition_count() == 1 {\n\nReview comment:\n       Sorry. What I meant is that compared to the previous implementation, we double the amount of work, even when we did not need because there is a single partition.\r\n   \r\n   IMO we should handle this in another way, e.g. via a physical optimizer that re-writes the partial aggregation by a final aggregation when the input is a single partition.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T12:07:37.632+0000",
                    "updated": "2020-09-12T12:07:37.632+0000",
                    "started": "2020-09-12T12:07:37.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482475",
                    "issueId": "13326389"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/worklog/482476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8172:\nURL: https://github.com/apache/arrow/pull/8172#discussion_r487403512\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n\nReview comment:\n       yes. Generally, operations on non-null fields are faster because there isn't an unpredictable branch on the loop. This check removes that unpredictable branch altogether when there are no nulls.\r\n   \r\n   We could probably still get some more juice by using some of the vertical operations supported by packed_simd.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T12:12:51.799+0000",
                    "updated": "2020-09-12T12:12:51.799+0000",
                    "started": "2020-09-12T12:12:51.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482476",
                    "issueId": "13326389"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 29400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4b4bc3e0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ec28db2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ed09184[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@64753ef1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26317f6f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@551d95cd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f2b725b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@72e441f9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f8382cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6689d70d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@254c82d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@52efaa17[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 29400,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Sep 20 16:59:56 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-20T16:59:56.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9937/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-09-08T07:08:26.000+0000",
        "updated": "2020-09-22T03:21:16.000+0000",
        "timeoriginalestimate": null,
        "description": "The current design of aggregates makes the calculation of the average incorrect.\r\n\r\nNamely, if there are multiple input partitions, the result is average of the averages. For example if the input it in two batches {{[1,2]}}, and {{[3,4,5]}}, datafusion will say \"average=3.25\" rather than \"average=3\".\r\n\r\n It also makes it impossible to compute the [geometric mean|https://en.wikipedia.org/wiki/Geometric_mean], distinct sum, and other operations.\r\n\r\nThe central issue is that Accumulator returns a `ScalarValue` during partial aggregations via {{get_value}}, but very often a `ScalarValue` is not sufficient information to perform the full aggregation.\r\n\r\nA simple example is the average of 5 numbers, x1, x2, x3, x4, x5, that are distributed in batches of 2,\r\n\r\n{[x1, x2], [x3, x4],\u00a0[x5]}\r\n\r\n. Our current calculation performs partial means,\r\n\r\n{(x1+x2)/2, (x3+x4)/2, x5}\r\n\r\n, and then reduces them using another average, i.e.\r\n\r\n{{((x1+x2)/2 + (x3+x4)/2 + x5)/3}}\r\n\r\nwhich is not equal to {{(x1 + x2 + x3 + x4 + x5)/5}}.\r\n\r\nI believe that our Accumulators need to pass more information from the partial aggregations to the final aggregation.\r\n\r\nWe could consider taking an API equivalent to [spark]([https://docs.databricks.com/spark/latest/spark-sql/udaf-scala.html]), i.e. have an `update`, a `merge` and an `evaluate`.\r\n\r\nCode with a failing test ({{src/execution/context.rs}})\r\n{code:java}\r\n    #[test]\r\n    fn simple_avg() -> Result<()> {\r\n        let schema = Schema::new(vec![\r\n            Field::new(\"a\", DataType::Int32, false),\r\n        ]);\r\n\r\n        let batch1 = RecordBatch::try_new(\r\n            Arc::new(schema.clone()),\r\n            vec![\r\n                Arc::new(Int32Array::from(vec![1, 2, 3])),\r\n            ],\r\n        )?;\r\n        let batch2 = RecordBatch::try_new(\r\n            Arc::new(schema.clone()),\r\n            vec![\r\n                Arc::new(Int32Array::from(vec![4, 5])),\r\n            ],\r\n        )?;\r\n\r\n        let mut ctx = ExecutionContext::new();\r\n\r\n        let provider = MemTable::new(Arc::new(schema), vec![vec![batch1], vec![batch2]])?;\r\n        ctx.register_table(\"t\", Box::new(provider));\r\n\r\n        let result = collect(&mut ctx, \"SELECT AVG(a) FROM t\")?;\r\n\r\n        let batch = &result[0];\r\n        assert_eq!(1, batch.num_columns());\r\n        assert_eq!(1, batch.num_rows());\r\n\r\n        let values = batch\r\n            .column(0)\r\n            .as_any()\r\n            .downcast_ref::<Float64Array>()\r\n            .expect(\"failed to cast version\");\r\n        assert_eq!(values.len(), 1);\r\n        // avg(1,2,3,4,5) = 3.0\r\n        assert_eq!(values.value(0), 3.0_f64);\r\n        Ok(())\r\n    }\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 29400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Average is not correct",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/comment/17191993",
                    "id": "17191993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~andygrove], I remember that you wanted to touch this. If not, let me know and I take a shoot at it.\r\n\r\nLooking at [Ballista's source code for this|https://github.com/ballista-compute/ballista/blob/main/rust/ballista/src/execution/operators/hash_aggregate.rs] , I think that we have the same issue there. :/\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-08T07:10:03.126+0000",
                    "updated": "2020-09-08T07:10:03.126+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/comment/17194706",
                    "id": "17194706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "This is bad correctness bug -- we should definitely fix this",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-09-12T10:40:37.745+0000",
                    "updated": "2020-09-12T10:40:37.745+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326389/comment/17199045",
                    "id": "17199045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8172\n[https://github.com/apache/arrow/pull/8172]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-20T16:59:56.730+0000",
                    "updated": "2020-09-20T16:59:56.730+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0iegw:",
        "customfield_12314139": null
    }
}