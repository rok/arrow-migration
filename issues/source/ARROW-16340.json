{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13441864",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864",
    "key": "ARROW-16340",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "subtasks": [
            {
                "id": "13445692",
                "key": "ARROW-16609",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13445692",
                "fields": {
                    "summary": "[C++] xxhash not installed into dist/lib/include when building C++",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                        "name": "Blocker",
                        "id": "1"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13470633",
                "key": "ARROW-17011",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13470633",
                "fields": {
                    "summary": "[C++][Flight] Remove the need for serialization_internal.h inside python/flight.cc",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                        "name": "Critical",
                        "id": "2"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13470634",
                "key": "ARROW-17012",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13470634",
                "fields": {
                    "summary": "[C++][Flight] Remove the need for serialization_internal.h inside python/flight.cc",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
                        "name": "Critical",
                        "id": "2"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13471004",
                "key": "ARROW-17037",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13471004",
                "fields": {
                    "summary": "[C++] Split utf8.h to avoid exposing xsimd dependency to the outside",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "aggregateprogress": {
            "progress": 145200,
            "total": 145200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 119400,
            "total": 119400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16340/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 199,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/778089",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF opened a new pull request, #13311:\nURL: https://github.com/apache/arrow/pull/13311\n\n   This PR moves `src/arrow/python` directory into `pyarrow` and arranges PyArrow to build it.\r\n   \r\n   **TODO**\r\n   - [ ] Move the files and change cmake for C PyArrow\r\n   - [ ] Integrate C PyArrow build into setup.py\r\n   - [ ] How to run the tests for C PyArrow\r\n   - [ ] Make changes to the C++ build (what is not needed anymore)\r\n   - [ ] Review proposed changes for CMake options for ARROW_PYTHON\r\n   - [ ] Add a migration path for external packages \r\n   \r\n   **Testing**\r\n   Until https://github.com/apache/arrow/pull/13282 is merged one additional step is needed to successfully build pyarrow. Needed header files from Arrow must be copied into `dist` folder:\r\n   ```\r\n   cp -r cpp/src/arrow/vendored/xxhash/ dist/include/arrow/vendored/xxhash/\r\n   cp cpp/src/arrow/util/int_util_internal.h dist/include/arrow/util\r\n   cp -r cpp/src/arrow/vendored/portable-snippets/ dist/include/arrow/vendored/portable-snippets/\r\n   ```\n\n\n",
                    "created": "2022-06-03T13:37:53.199+0000",
                    "updated": "2022-06-03T13:37:53.199+0000",
                    "started": "2022-06-03T13:37:53.199+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778089",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/778091",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1145975530\n\n   https://issues.apache.org/jira/browse/ARROW-16340\n\n\n",
                    "created": "2022-06-03T13:38:21.383+0000",
                    "updated": "2022-06-03T13:38:21.383+0000",
                    "started": "2022-06-03T13:38:21.383+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778091",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/778092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1145975582\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-06-03T13:38:24.224+0000",
                    "updated": "2022-06-03T13:38:24.224+0000",
                    "started": "2022-06-03T13:38:24.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "778092",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/780258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "raulcd commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r894347131\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -19,8 +19,37 @@\n # arrow_python\n #\n \n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE_DIR ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE_DIR}/cpp\")\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\")\n+\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION 9.0.0)\n\nReview Comment:\n   Minor thing, I've seen this pattern used to set other versions on CMake which I think works better with our release scripts to update versions on Releases/release candidates/post release tasks. Examples:\r\n   https://github.com/apache/arrow/blob/master/cpp/CMakeLists.txt#L50-L52\r\n   https://github.com/apache/arrow/blob/master/matlab/CMakeLists.txt#L192-L195\r\n   \r\n   ```suggestion\r\n   +set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\r\n   +string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\r\n    # Need to set to ARRROW_VERSION before finding Arrow package!\r\n   +project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\r\n   ```\n\n\n\n",
                    "created": "2022-06-10T09:40:06.714+0000",
                    "updated": "2022-06-10T09:40:06.714+0000",
                    "started": "2022-06-10T09:40:06.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780258",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/780314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r894518980\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -50,6 +79,14 @@ set(ARROW_PYTHON_SRCS\n set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n                                                SKIP_UNITY_BUILD_INCLUSION ON)\n \n+# Set necessary components on (from arrow/cpp/CMakeLists.txt, end of the file)\n+set(ARROW_COMPUTE ON)\n+set(ARROW_CSV ON)\n+set(ARROW_DATASET ON)\n+set(ARROW_FILESYSTEM ON)\n+set(ARROW_HDFS ON)\n+set(ARROW_JSON ON)\n\nReview Comment:\n   is this temporary? We shouldn't be forcefully enabling those as they are optional and PyArrow can be build without things like DATASETS.\n\n\n\n",
                    "created": "2022-06-10T13:23:43.652+0000",
                    "updated": "2022-06-10T13:23:43.652+0000",
                    "started": "2022-06-10T13:23:43.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780314",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/780315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r894525752\n\n\n##########\ncpp/cmake_modules/FindArrowPython.cmake:\n##########\n@@ -46,8 +46,9 @@ endif()\n find_package(Arrow ${find_package_arguments})\n \n if(ARROW_FOUND)\n+  message(STATUS \"CPYARROW_HOME: ${CPYARROW_HOME}\")\n   arrow_find_package(ARROW_PYTHON\n-                     \"${ARROW_HOME}\"\n+                     \"${CPYARROW_HOME}\"\n\nReview Comment:\n   This smells a bit hackish. Feels a bit like we are building two totally different projects. \r\n   \r\n   On long term we should probably have `libarrow_python.so` just be one of the shared objects constituting pyarrow. `libarrow_python.so` should probably be possible to integrate with the rest of the built files using `add_subdirectory` or something equivalent.\n\n\n\n",
                    "created": "2022-06-10T13:28:54.271+0000",
                    "updated": "2022-06-10T13:28:54.271+0000",
                    "started": "2022-06-10T13:28:54.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "780315",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/782057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r899110501\n\n\n##########\ncpp/cmake_modules/FindArrowPython.cmake:\n##########\n@@ -46,8 +46,9 @@ endif()\n find_package(Arrow ${find_package_arguments})\n \n if(ARROW_FOUND)\n+  message(STATUS \"CPYARROW_HOME: ${CPYARROW_HOME}\")\n   arrow_find_package(ARROW_PYTHON\n-                     \"${ARROW_HOME}\"\n+                     \"${CPYARROW_HOME}\"\n\nReview Comment:\n   > On long term we should probably have libarrow_python.so just be one of the shared objects constituting pyarrow.\r\n   \r\n   That's actually what is already happening, I think. The libarrow_python.so gets copied into the pyarrow directory (either the repo itself for an inplace build, or the build directory, before that one gets copied to site-packages for a normal install). \r\n   But so for building the cython extensions, we need to point to where libarrow_python.so can be found (which is now a different location as where libarrow.so can be found). And doing that with a argument to cmake seems a good way to do that? (alternatively we might need to edit the `arrow_find_package` to work with this new situation?)\r\n   \r\n   \n\n\n\n",
                    "created": "2022-06-16T13:55:14.763+0000",
                    "updated": "2022-06-16T13:55:14.763+0000",
                    "started": "2022-06-16T13:55:14.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "782057",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/784976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r907102453\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -19,8 +19,45 @@\n # arrow_python\n #\n \n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+# Add cmake_modules and lib/cmake/arrow folder to CMAKE_MODULE_PATH\n+# TODO: remove lib/cmake/arrow folder as it should not be necessary as find_package(Arrow)\n+# should load all the cmake variables (ex ARROW_DATASET)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_SOURCE}/dist/lib/cmake/arrow\")\n+message(STATUS \"CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\")\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+find_package(Arrow REQUIRED)\n+# Loading ArrowOptions, they should be loaded by default with find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n\nReview Comment:\n   I had to include `ArrowOptions` separately but I think they should be found with `find_package(Arrow REQUIRED)`. The CI now fails as the search for `ArrowOptions` only works for me locally.\r\n   \r\n   @kou any tips on how to help cmake find ArrowOptions?\n\n\n\n",
                    "created": "2022-06-27T08:15:59.567+0000",
                    "updated": "2022-06-27T08:15:59.567+0000",
                    "started": "2022-06-27T08:15:59.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "784976",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r908027466\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -19,8 +19,45 @@\n # arrow_python\n #\n \n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+# Add cmake_modules and lib/cmake/arrow folder to CMAKE_MODULE_PATH\n+# TODO: remove lib/cmake/arrow folder as it should not be necessary as find_package(Arrow)\n+# should load all the cmake variables (ex ARROW_DATASET)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_SOURCE}/dist/lib/cmake/arrow\")\n+message(STATUS \"CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\")\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+find_package(Arrow REQUIRED)\n+# Loading ArrowOptions, they should be loaded by default with find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n\nReview Comment:\n   Could you set `CMAKE_PREFPX_PATH=/opt/conda/envs/arrow` environment variable (not CMake variable)? Then `find_package(Arrow REQUIRED)` loads `ArrowOptions` too. \n\n\n\n",
                    "created": "2022-06-28T04:49:41.838+0000",
                    "updated": "2022-06-28T04:49:41.838+0000",
                    "started": "2022-06-28T04:49:41.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785435",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r908152379\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -19,8 +19,45 @@\n # arrow_python\n #\n \n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+# Add cmake_modules and lib/cmake/arrow folder to CMAKE_MODULE_PATH\n+# TODO: remove lib/cmake/arrow folder as it should not be necessary as find_package(Arrow)\n+# should load all the cmake variables (ex ARROW_DATASET)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_SOURCE}/dist/lib/cmake/arrow\")\n+message(STATUS \"CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}\")\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+find_package(Arrow REQUIRED)\n+# Loading ArrowOptions, they should be loaded by default with find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n\nReview Comment:\n   Setting `CMAKE_PREFIX_PATH=$ARROW_HOME` environment variable (not CMake variable) didn't work for me locally.\r\n   Ended up using `ARROW_HOME` with `CMAKE_MODULE_PATH` in the CMakeLists.txt and it works.\r\n   \r\n   \n\n\n\n",
                    "created": "2022-06-28T07:48:38.591+0000",
                    "updated": "2022-06-28T07:48:38.591+0000",
                    "started": "2022-06-28T07:48:38.591+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785479",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1168527583\n\n   @kou there is one more issue I am struggling with and would be happy to get your opinion.\r\n   \r\n   On the CI I get linker errors for python flight module (not locally on M1):\r\n   https://github.com/apache/arrow/runs/7087113174?check_suite_focus=true\r\n   \r\n   I am facing similar issue locally when trying to build the tests for C++ part of PyArrow with GTest:\r\n   ```\r\n   [100%] Linking CXX executable arrow-python-test\r\n   ld: library not found for -larrow_testing_shared\r\n   clang: error: linker command failed with exit code 1 (use -v to see invocation)\r\n   make[2]: *** [arrow-python-test] Error 1\r\n   make[1]: *** [CMakeFiles/arrow-python-test.dir/all] Error 2\r\n   make: *** [all] Error 2\r\n   error: command '/usr/bin/make' failed with exit code 2\r\n   ~/repos/arrow-cmake\r\n   ```\r\n   \r\n   What could be the setup work I am missing so that the libraries would be linked correctly?\n\n\n",
                    "created": "2022-06-28T10:16:46.847+0000",
                    "updated": "2022-06-28T10:16:46.847+0000",
                    "started": "2022-06-28T10:16:46.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785532",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1169190828\n\n   > On the CI I get linker errors for python flight module (not locally on M1):\r\n   > https://github.com/apache/arrow/runs/7087113174?check_suite_focus=true\r\n   \r\n   It seems that this link is wrong. (This doesn't have the error message.)\r\n   \r\n   > What could be the setup work I am missing so that the libraries would be linked correctly?\r\n   \r\n   We need `find_package(ArrowTesting REQUIRED)` to use `arrow_testing_shared` target.\n\n\n",
                    "created": "2022-06-28T20:18:17.133+0000",
                    "updated": "2022-06-28T20:18:17.133+0000",
                    "started": "2022-06-28T20:18:17.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785731",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1169572419\n\n   > > On the CI I get linker errors for python flight module (not locally on M1):\r\n   > > https://github.com/apache/arrow/runs/7087113174?check_suite_focus=true\r\n   > \r\n   > It seems that this link is wrong. (This doesn't have the error message.)\r\n   \r\n   Maybe this way would be easier:\r\n   \r\n   <details>\r\n   <summary>Error with make build of C PyArrow</summary>\r\n   <br>\r\n   \r\n   ```\r\n   ",
                    "created": "2022-06-29T06:09:47.941+0000",
                    "updated": "2022-06-29T06:09:47.941+0000",
                    "started": "2022-06-29T06:09:47.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785834",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1169577278\n\n   We need `find_package(Parquet REQUIRED)` for `parquet_shared`.\n\n\n",
                    "created": "2022-06-29T06:17:13.228+0000",
                    "updated": "2022-06-29T06:17:13.228+0000",
                    "started": "2022-06-29T06:17:13.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785836",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/785839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1169583786\n\n   Thank you @kou!\n\n\n",
                    "created": "2022-06-29T06:27:07.502+0000",
                    "updated": "2022-06-29T06:27:07.502+0000",
                    "started": "2022-06-29T06:27:07.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "785839",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/786928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1171927470\n\n   I would like to put this PR ready for review.\r\n   \r\n   There are still two CI failures I am investigating (see \u2b07\ufe0f ) plus `test_cython_api()` from `test_cython.py` is broke, so I am researching it at the moment. But I think this shouldn't block this PR to get initial reviews \ud83d\ude4f  @kou @pitrou @kszucs @jorisvandenbossche \r\n   \r\n   - `Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy)`\r\n   I have seen this error in some other failing builds and am not sure if it is connected to this PR or not.\r\n   ```\r\n     CMake Error at /opt/conda/envs/arrow/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:230 (message):\r\n       Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found\r\n       suitable version \"3.9.13\", minimum required is \"3.7\")\r\n     Call Stack (most recent call first):\r\n       /opt/conda/envs/arrow/share/cmake-3.23/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE)\r\n       /opt/conda/envs/arrow/share/cmake-3.23/Modules/FindPython/Support.cmake:3192 (find_package_handle_standard_args)\r\n       /opt/conda/envs/arrow/share/cmake-3.23/Modules/FindPython3.cmake:490 (include)\r\n       /arrow/python/cmake_modules/FindPython3Alt.cmake:56 (find_package)\r\n       CMakeLists.txt:64 (find_package)\r\n   ```\r\n   - `fatal error: arrow/flight/Flight.pb.h: No such file or directory`\r\n   This error is for sure connected to this PR. I have bumped into it locally for python flight build but it dissapeared after I continued making changes to the code.\r\n   \r\n   ```\r\n     In file included from /arrow/cpp/src/arrow/flight/serialization_internal.h:22,\r\n                      from /arrow/python/pyarrow/src_arrow/flight.cc:21:\r\n     /arrow/cpp/src/arrow/flight/protocol_internal.h:23:10: fatal error: arrow/flight/Flight.pb.h: No such file or directory\r\n        23 | #include \"arrow/flight/Flight.pb.h\"  // IWYU pragma: export\r\n           |          ^~~~~~~~~~~~~~~~~~~~~~~~~~\r\n     compilation terminated.\r\n     make[2]: *** [CMakeFiles/arrow_python_flight_objlib.dir/build.make:76: CMakeFiles/arrow_python_flight_objlib.dir/flight.cc.o] Error 1\r\n     make[1]: *** [CMakeFiles/Makefile2:255: CMakeFiles/arrow_python_flight_objlib.dir/all] Error 2\r\n     make: *** [Makefile:136: all] Error 2\r\n     error: command '/opt/conda/envs/arrow/bin/make' failed with exit code 2\r\n     error: subprocess-exited-with-error\r\n   ```\n\n\n",
                    "created": "2022-07-01T04:39:34.260+0000",
                    "updated": "2022-07-01T04:39:34.260+0000",
                    "started": "2022-07-01T04:39:34.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786928",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/786973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r911698925\n\n\n##########\npython/setup.py:\n##########\n@@ -93,6 +93,7 @@ def build_extensions(self):\n         _build_ext.build_extensions(self)\n \n     def run(self):\n+        self._run_cmake_cpyarrow()\n\nReview Comment:\n   How about calling this `arrow_python` not `cpyarrow`?\n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n\nReview Comment:\n   We can't use `cmake_path` because it requires CMake 3.20 or later: https://cmake.org/cmake/help/latest/command/cmake_path.html\n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n+\n+add_arrow_lib(arrow_python\n+              CMAKE_PACKAGE_NAME\n+              ArrowPython\n+              PKG_CONFIG_NAME\n+              arrow-python\n+              SOURCES\n+              ${ARROW_PYTHON_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:pch.h>\"\n+              OUTPUTS\n+              ARROW_PYTHON_LIBRARIES\n+              DEPENDENCIES\n+              ${ARROW_PYTHON_DEPENDENCIES}\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n+              SHARED_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_LINK_LIBS}\n+              SHARED_PRIVATE_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              ${ARROW_PYTHON_STATIC_LINK_LIBS}\n+              EXTRA_INCLUDES\n+              \"${ARROW_PYTHON_INCLUDES}\")\n+\n+add_dependencies(arrow_python ${ARROW_PYTHON_LIBRARIES})\n+\n+foreach(LIB_TARGET ${ARROW_PYTHON_LIBRARIES})\n+  target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_PYTHON_EXPORTING)\n+endforeach()\n+\n+if(ARROW_BUILD_STATIC AND MSVC)\n+  target_compile_definitions(arrow_python_static PUBLIC ARROW_STATIC)\n+endif()\n+\n+if(ARROW_FLIGHT AND ARROW_BUILD_SHARED)\n+\n+  find_package(ArrowFlight REQUIRED)\n+  find_package(gRPC CONFIG REQUIRED)\n+  include_directories(\"${ARROW_SOURCE_DIR}/src\" \"${ARROW_SOURCE_DIR}/build/src\")\n+\n+  # Using arrow_flight_shared, see example\n+  # https://github.com/apache/arrow/blob/7a0f00c16e084d194ae53d209b33b809cfc8f2d5/cpp/examples/arrow/CMakeLists.txt\n+  set(ARROW_GRPC_USE_SHARED ON)\n+  set(GRPC_REFLECTION_LINK_LIBS -Wl,--no-as-needed gRPC::grpc++_reflection\n+                                  -Wl,--as-needed)\n+\n+  set(FLIGHT_PROTO_PATH \"${ARROW_SOURCE}/format\")\n+  set(FLIGHT_PROTO \"${ARROW_SOURCE}/format/Flight.proto\")\n+\n+  set(FLIGHT_GENERATED_PROTO_FILES\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.h\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.h\")\n+\n+  set(PROTO_DEPENDS ${FLIGHT_PROTO} gRPC::grpc_cpp_plugin)\n+\n+  add_custom_command(OUTPUT ${FLIGHT_GENERATED_PROTO_FILES}\n+                    COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_PROTO_PATH}\"\n+                            \"--cpp_out=${${ARROW_SOURCE_DIR}/build/src/arrow/flight/}\" \"${FLIGHT_PROTO}\"\n+                    DEPENDS ${PROTO_DEPENDS} ARGS\n+                    COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_PROTO_PATH}\"\n+                            \"--grpc_out=${${ARROW_SOURCE_DIR}/build/src/arrow/flight/}\"\n+                            \"--plugin=protoc-gen-grpc=$<TARGET_FILE:gRPC::grpc_cpp_plugin>\"\n+                            \"${FLIGHT_PROTO}\")\n+\n+  set_source_files_properties(${FLIGHT_GENERATED_PROTO_FILES} PROPERTIES GENERATED TRUE)\n+  add_custom_target(flight_grpc_gen ALL DEPENDS ${FLIGHT_GENERATED_PROTO_FILES})\n+\n+  add_arrow_lib(arrow_python_flight\n+                CMAKE_PACKAGE_NAME\n+                ArrowPythonFlight\n+                PKG_CONFIG_NAME\n+                arrow-python-flight\n+                SOURCES\n+                flight.cc\n+                OUTPUTS\n+                ARROW_PYFLIGHT_LIBRARIES\n+                DEPENDENCIES\n+                flight_grpc_gen\n+                SHARED_LINK_FLAGS\n+                ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n+                SHARED_LINK_LIBS\n+                arrow_python_shared\n+                arrow_flight_shared\n+                STATIC_LINK_LIBS\n+                ${PYTHON_OTHER_LIBS}\n+                EXTRA_INCLUDES\n+                \"${ARROW_PYTHON_INCLUDES}\"\n+                PRIVATE_INCLUDES\n+                \"${Protobuf_INCLUDE_DIRS}\")\n+\n+  add_dependencies(arrow_python ${ARROW_PYFLIGHT_LIBRARIES})\n+\n+  foreach(LIB_TARGET ${ARROW_PYFLIGHT_LIBRARIES})\n+    target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_PYFLIGHT_EXPORTING)\n+  endforeach()\n+\n+  if(ARROW_BUILD_STATIC AND MSVC)\n+    target_compile_definitions(arrow_python_flight_static PUBLIC ARROW_STATIC)\n+  endif()\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  # Clang, be quiet. Python C API has lots of macros\n+  set_property(SOURCE ${ARROW_PYTHON_SRCS}\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS -Wno-parentheses-equality)\n+endif()\n+\n+arrow_install_all_headers(\"arrow/python\")\n+\n+# ----------------------------------------------------------------------\n+\n+if(ARROW_BUILD_TESTS)\n+  enable_testing()\n+\n+  # Set necessary paths for cmake to find GTest\n+  set(GTEST_ROOT ${ARROW_SOURCE_DIR}/build/googletest_ep-prefix)\n\nReview Comment:\n   We can't assume that all users use `${ARROW_SOURCE_DIR}/build` as a build directory.\r\n   (For example, I always use `cpp.build` as a build directory.)\r\n   \r\n   How about accepting `ARROW_BUILD_DIR` CMake variable from users to detect build directory for Apache Arrow C++?\n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n\nReview Comment:\n   How about the following names?\r\n   \r\n   ```suggestion\r\n   get_filename_component(ARROW_PYTHON_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\r\n   get_filename_component(PYARROW_SOURCE_DIR ${ARROW_PYTHON_SOURCE_DIR} DIRECTORY)\r\n   get_filename_component(ARROW_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\r\n   set(ARROW_CPP_SOURCE_DIR \"${ARROW_SOURCE_DIR}/cpp\")\r\n   ```\n\n\n\n##########\ncpp/cmake_modules/FindArrowPython.cmake:\n##########\n@@ -15,7 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-# - Find Arrow Python (arrow/python/api.h, libarrow_python.a, libarrow_python.so)\n+# - Find Arrow Python (python/pyarrrow/src_arrow/api.h, libarrow_python.a, libarrow_python.so)\n\nReview Comment:\n   This is a needless change.\r\n   The path shows what value can be used for `#include` not where `api.h` is placed in source directory. \n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n\nReview Comment:\n   FYI: I will rename this to `ARROW_CMAKE_DIR` in #13477.\n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n+\n+add_arrow_lib(arrow_python\n+              CMAKE_PACKAGE_NAME\n+              ArrowPython\n+              PKG_CONFIG_NAME\n+              arrow-python\n+              SOURCES\n+              ${ARROW_PYTHON_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:pch.h>\"\n+              OUTPUTS\n+              ARROW_PYTHON_LIBRARIES\n+              DEPENDENCIES\n+              ${ARROW_PYTHON_DEPENDENCIES}\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n+              SHARED_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_LINK_LIBS}\n+              SHARED_PRIVATE_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              ${ARROW_PYTHON_STATIC_LINK_LIBS}\n+              EXTRA_INCLUDES\n+              \"${ARROW_PYTHON_INCLUDES}\")\n+\n+add_dependencies(arrow_python ${ARROW_PYTHON_LIBRARIES})\n+\n+foreach(LIB_TARGET ${ARROW_PYTHON_LIBRARIES})\n+  target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_PYTHON_EXPORTING)\n+endforeach()\n+\n+if(ARROW_BUILD_STATIC AND MSVC)\n+  target_compile_definitions(arrow_python_static PUBLIC ARROW_STATIC)\n+endif()\n+\n+if(ARROW_FLIGHT AND ARROW_BUILD_SHARED)\n+\n+  find_package(ArrowFlight REQUIRED)\n+  find_package(gRPC CONFIG REQUIRED)\n+  include_directories(\"${ARROW_SOURCE_DIR}/src\" \"${ARROW_SOURCE_DIR}/build/src\")\n+\n+  # Using arrow_flight_shared, see example\n+  # https://github.com/apache/arrow/blob/7a0f00c16e084d194ae53d209b33b809cfc8f2d5/cpp/examples/arrow/CMakeLists.txt\n+  set(ARROW_GRPC_USE_SHARED ON)\n+  set(GRPC_REFLECTION_LINK_LIBS -Wl,--no-as-needed gRPC::grpc++_reflection\n+                                  -Wl,--as-needed)\n+\n+  set(FLIGHT_PROTO_PATH \"${ARROW_SOURCE}/format\")\n+  set(FLIGHT_PROTO \"${ARROW_SOURCE}/format/Flight.proto\")\n+\n+  set(FLIGHT_GENERATED_PROTO_FILES\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.h\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.h\")\n\nReview Comment:\n   Why do you want to use `build/...` in source directory instead of `${CMAKE_CURRENT_BINARY_DIR}` or something?\n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n+\n+add_arrow_lib(arrow_python\n+              CMAKE_PACKAGE_NAME\n+              ArrowPython\n+              PKG_CONFIG_NAME\n+              arrow-python\n+              SOURCES\n+              ${ARROW_PYTHON_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:pch.h>\"\n+              OUTPUTS\n+              ARROW_PYTHON_LIBRARIES\n+              DEPENDENCIES\n+              ${ARROW_PYTHON_DEPENDENCIES}\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n+              SHARED_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_LINK_LIBS}\n+              SHARED_PRIVATE_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              ${ARROW_PYTHON_STATIC_LINK_LIBS}\n+              EXTRA_INCLUDES\n+              \"${ARROW_PYTHON_INCLUDES}\")\n+\n+add_dependencies(arrow_python ${ARROW_PYTHON_LIBRARIES})\n+\n+foreach(LIB_TARGET ${ARROW_PYTHON_LIBRARIES})\n+  target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_PYTHON_EXPORTING)\n+endforeach()\n+\n+if(ARROW_BUILD_STATIC AND MSVC)\n+  target_compile_definitions(arrow_python_static PUBLIC ARROW_STATIC)\n+endif()\n+\n+if(ARROW_FLIGHT AND ARROW_BUILD_SHARED)\n+\n+  find_package(ArrowFlight REQUIRED)\n+  find_package(gRPC CONFIG REQUIRED)\n+  include_directories(\"${ARROW_SOURCE_DIR}/src\" \"${ARROW_SOURCE_DIR}/build/src\")\n+\n+  # Using arrow_flight_shared, see example\n+  # https://github.com/apache/arrow/blob/7a0f00c16e084d194ae53d209b33b809cfc8f2d5/cpp/examples/arrow/CMakeLists.txt\n+  set(ARROW_GRPC_USE_SHARED ON)\n+  set(GRPC_REFLECTION_LINK_LIBS -Wl,--no-as-needed gRPC::grpc++_reflection\n+                                  -Wl,--as-needed)\n+\n+  set(FLIGHT_PROTO_PATH \"${ARROW_SOURCE}/format\")\n+  set(FLIGHT_PROTO \"${ARROW_SOURCE}/format/Flight.proto\")\n+\n+  set(FLIGHT_GENERATED_PROTO_FILES\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.h\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.h\")\n+\n+  set(PROTO_DEPENDS ${FLIGHT_PROTO} gRPC::grpc_cpp_plugin)\n+\n+  add_custom_command(OUTPUT ${FLIGHT_GENERATED_PROTO_FILES}\n+                    COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_PROTO_PATH}\"\n+                            \"--cpp_out=${${ARROW_SOURCE_DIR}/build/src/arrow/flight/}\" \"${FLIGHT_PROTO}\"\n\nReview Comment:\n   Is `${${...}...}` intentional?\n\n\n\n##########\ncpp/src/arrow/public_api_test.cc:\n##########\n@@ -50,9 +50,9 @@\n #include \"arrow/json/api.h\"  // IWYU pragma: keep\n #endif\n \n-#ifdef ARROW_PYTHON\n-#include \"arrow/python/api.h\"  // IWYU pragma: keep\n-#endif\n+// #ifdef ARROW_PYTHON\n+// #include \"arrow/python/api.h\"  // IWYU pragma: keep\n+// #endif\n\nReview Comment:\n   We can remove this.\n\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n+\n+add_arrow_lib(arrow_python\n+              CMAKE_PACKAGE_NAME\n+              ArrowPython\n+              PKG_CONFIG_NAME\n+              arrow-python\n+              SOURCES\n+              ${ARROW_PYTHON_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:pch.h>\"\n+              OUTPUTS\n+              ARROW_PYTHON_LIBRARIES\n+              DEPENDENCIES\n+              ${ARROW_PYTHON_DEPENDENCIES}\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n\nReview Comment:\n   \"95\" is outdated... :-) \n\n\n\n",
                    "created": "2022-07-01T07:41:10.248+0000",
                    "updated": "2022-07-01T07:41:10.248+0000",
                    "started": "2022-07-01T07:41:10.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786973",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/786978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r911707915\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n+\n+add_arrow_lib(arrow_python\n+              CMAKE_PACKAGE_NAME\n+              ArrowPython\n+              PKG_CONFIG_NAME\n+              arrow-python\n+              SOURCES\n+              ${ARROW_PYTHON_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:pch.h>\"\n+              OUTPUTS\n+              ARROW_PYTHON_LIBRARIES\n+              DEPENDENCIES\n+              ${ARROW_PYTHON_DEPENDENCIES}\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n+              SHARED_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_LINK_LIBS}\n+              SHARED_PRIVATE_LINK_LIBS\n+              ${ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS}\n+              STATIC_LINK_LIBS\n+              ${ARROW_PYTHON_STATIC_LINK_LIBS}\n+              EXTRA_INCLUDES\n+              \"${ARROW_PYTHON_INCLUDES}\")\n+\n+add_dependencies(arrow_python ${ARROW_PYTHON_LIBRARIES})\n+\n+foreach(LIB_TARGET ${ARROW_PYTHON_LIBRARIES})\n+  target_compile_definitions(${LIB_TARGET} PRIVATE ARROW_PYTHON_EXPORTING)\n+endforeach()\n+\n+if(ARROW_BUILD_STATIC AND MSVC)\n+  target_compile_definitions(arrow_python_static PUBLIC ARROW_STATIC)\n+endif()\n+\n+if(ARROW_FLIGHT AND ARROW_BUILD_SHARED)\n+\n+  find_package(ArrowFlight REQUIRED)\n+  find_package(gRPC CONFIG REQUIRED)\n+  include_directories(\"${ARROW_SOURCE_DIR}/src\" \"${ARROW_SOURCE_DIR}/build/src\")\n+\n+  # Using arrow_flight_shared, see example\n+  # https://github.com/apache/arrow/blob/7a0f00c16e084d194ae53d209b33b809cfc8f2d5/cpp/examples/arrow/CMakeLists.txt\n+  set(ARROW_GRPC_USE_SHARED ON)\n+  set(GRPC_REFLECTION_LINK_LIBS -Wl,--no-as-needed gRPC::grpc++_reflection\n+                                  -Wl,--as-needed)\n+\n+  set(FLIGHT_PROTO_PATH \"${ARROW_SOURCE}/format\")\n+  set(FLIGHT_PROTO \"${ARROW_SOURCE}/format/Flight.proto\")\n+\n+  set(FLIGHT_GENERATED_PROTO_FILES\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.pb.h\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.cc\"\n+      \"${ARROW_SOURCE_DIR}/build/src/arrow/flight/Flight.grpc.pb.h\")\n+\n+  set(PROTO_DEPENDS ${FLIGHT_PROTO} gRPC::grpc_cpp_plugin)\n+\n+  add_custom_command(OUTPUT ${FLIGHT_GENERATED_PROTO_FILES}\n+                    COMMAND ${ARROW_PROTOBUF_PROTOC} \"-I${FLIGHT_PROTO_PATH}\"\n+                            \"--cpp_out=${${ARROW_SOURCE_DIR}/build/src/arrow/flight/}\" \"${FLIGHT_PROTO}\"\n\nReview Comment:\n   No, my mistake.\n\n\n\n",
                    "created": "2022-07-01T07:52:15.718+0000",
                    "updated": "2022-07-01T07:52:15.718+0000",
                    "started": "2022-07-01T07:52:15.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786978",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/786990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#issuecomment-1172087972\n\n   Hmm, we should try to make sure the Python Flight bindings can compile without including some internal headers.\n\n\n",
                    "created": "2022-07-01T08:33:15.764+0000",
                    "updated": "2022-07-01T08:33:15.764+0000",
                    "started": "2022-07-01T08:33:15.763+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786990",
                    "issueId": "13441864"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/worklog/786992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on code in PR #13311:\nURL: https://github.com/apache/arrow/pull/13311#discussion_r911747666\n\n\n##########\npython/pyarrow/src_arrow/CMakeLists.txt:\n##########\n@@ -0,0 +1,467 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#\n+# arrow_python\n+#\n+\n+cmake_minimum_required(VERSION 3.5)\n+\n+# RPATH settings on macOS do not affect install_name.\n+# https://cmake.org/cmake/help/latest/policy/CMP0068.html\n+if(POLICY CMP0068)\n+  cmake_policy(SET CMP0068 NEW)\n+endif()\n+\n+#\n+# Define\n+# ARROW_SOURCE_DIR: location of arrow/cpp\n+# CMAKE_MODULE_PATH: location of cmake_modules in python\n+#\n+\n+get_filename_component(PYARROW_SOURCE_DIR ${CMAKE_SOURCE_DIR} DIRECTORY)\n+get_filename_component(PYTHON_SOURCE_DIR ${PYARROW_SOURCE_DIR} DIRECTORY)\n+get_filename_component(ARROW_SOURCE ${PYTHON_SOURCE_DIR} DIRECTORY)\n+set(ARROW_SOURCE_DIR \"${ARROW_SOURCE}/cpp\")\n+\n+# normalize ARROW_HOME path\n+cmake_path(CONVERT \"$ENV{ARROW_HOME}\" TO_CMAKE_PATH_LIST ARROW_HOME)\n+set(CMAKE_MODULE_PATH \"${PYTHON_SOURCE_DIR}/cmake_modules\" \"${ARROW_HOME}/lib/cmake/arrow\")\n+\n+#\n+# Arrow version\n+#\n+\n+set(ARROW_PYTHON_VERSION \"9.0.0-SNAPSHOT\")\n+string(REGEX MATCH \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\" ARROW_PYTHON_BASE_VERSION \"${ARROW_PYTHON_VERSION}\")\n+# Need to set to ARRROW_VERSION before finding Arrow package!\n+project(arrow_python VERSION \"${ARROW_PYTHON_BASE_VERSION}\")\n+\n+if(NOT DEFINED CMAKE_BUILD_TYPE)\n+  set(CMAKE_BUILD_TYPE Release)\n+endif()\n+\n+#\n+# Arrow\n+#\n+\n+find_package(Arrow REQUIRED)\n+include(ArrowOptions)\n+find_package(Python3Alt 3.7 REQUIRED)\n+\n+# Needed due to\n+# CMake Error: INSTALL(EXPORT) given unknown export \"arrow_python_targets\"\n+option(ARROW_BUILD_SHARED \"Link to the Arrow shared library\" ON)\n+\n+add_custom_target(arrow_python-all)\n+add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n+\n+set(ARROW_PYTHON_SRCS\n+    arrow_to_pandas.cc\n+    benchmark.cc\n+    common.cc\n+    datetime.cc\n+    decimal.cc\n+    deserialize.cc\n+    extension_type.cc\n+    gdb.cc\n+    helpers.cc\n+    inference.cc\n+    init.cc\n+    io.cc\n+    ipc.cc\n+    numpy_convert.cc\n+    numpy_to_arrow.cc\n+    python_to_arrow.cc\n+    pyarrow.cc\n+    serialize.cc\n+    udf.cc)\n+\n+set_source_files_properties(init.cc PROPERTIES SKIP_PRECOMPILE_HEADERS ON\n+                                               SKIP_UNITY_BUILD_INCLUSION ON)\n+\n+#\n+# Arrow vs C PyArrow options\n+#\n+\n+# Check all the options from Arrow and C PyArrow to be in line\n+if(PYARROW_WITH_DATASET)\n+  find_package(ArrowDataset REQUIRED)\n+endif()\n+\n+if(PYARROW_WITH_PARQUET_ENCRYPTION)\n+  if(PARQUET_REQUIRE_ENCRYPTION)\n+    list(APPEND ARROW_PYTHON_SRCS parquet_encryption.cc)\n+    find_package(Parquet REQUIRED)\n+  else()\n+    message(FATAL_ERROR \"You must build Arrow C++ with PARQUET_REQUIRE_ENCRYPTION=ON\")\n+  endif()\n+endif()\n+\n+if(PYARROW_WITH_HDFS)\n+  if(NOT ARROW_HDFS)\n+    message(FATAL_ERROR \"You must build Arrow C++ with ARROW_HDFS=ON\")\n+  endif()\n+endif()\n+\n+# Check for only Arrow C++ options\n+if(ARROW_CSV)\n+  list(APPEND ARROW_PYTHON_SRCS csv.cc)\n+endif()\n+\n+if(ARROW_FILESYSTEM)\n+  list(APPEND ARROW_PYTHON_SRCS filesystem.cc)\n+endif()\n+\n+# Link to arrow dependecies\n+if(ARROW_BUILD_SHARED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_shared)\n+else()\n+  set(THREADS_PREFER_PTHREAD_FLAG ON)\n+  find_package(Threads REQUIRED)\n+  set(ARROW_PYTHON_DEPENDENCIES arrow_static Threads::Threads)\n+endif()\n+\n+if(CMAKE_CXX_COMPILER_ID STREQUAL \"AppleClang\" OR CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n+  set_property(SOURCE pyarrow.cc\n+               APPEND_STRING\n+               PROPERTY COMPILE_FLAGS \" -Wno-cast-qual \")\n+endif()\n+\n+#\n+# Compiler stuff\n+#\n+\n+include(GNUInstallDirs)\n+\n+# This ensures that things like gnu++11 get passed correctly\n+if(NOT DEFINED CMAKE_CXX_STANDARD)\n+  set(CMAKE_CXX_STANDARD 11)\n+endif()\n+\n+# We require a C++11 compliant compiler\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)\n+\n+#\n+# Linker flags\n+#\n+\n+# Localize thirdparty symbols using a linker version script. This hides them\n+# from the client application. The OS X linker does not support the\n+# version-script option.\n+if(CMAKE_VERSION VERSION_LESS 3.18)\n+  if(APPLE OR WIN32)\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT FALSE)\n+  else()\n+    set(CXX_LINKER_SUPPORTS_VERSION_SCRIPT TRUE)\n+  endif()\n+else()\n+  include(CheckLinkerFlag)\n+  check_linker_flag(CXX\n+                    \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\"\n+                    CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+endif()\n+\n+# Need to set ARROW_VERSION_SCRIPT_FLAGS for add_arrow_lib\n+if(CXX_LINKER_SUPPORTS_VERSION_SCRIPT)\n+  set(ARROW_VERSION_SCRIPT_FLAGS\n+      \"-Wl,--version-script=${ARROW_SOURCE_DIR}/src/arrow/symbols.map\")\n+endif()\n+\n+#\n+# shred/static link libs\n+#\n+\n+set(ARROW_PYTHON_SHARED_LINK_LIBS arrow_shared)\n+set(ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS)\n+set(ARROW_PYTHON_STATIC_LINK_LIBS ${PYTHON_OTHER_LIBS})\n+\n+if(WIN32)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS ${PYTHON_LIBRARIES} ${PYTHON_OTHER_LIBS})\n+endif()\n+if(PARQUET_REQUIRE_ENCRYPTION)\n+  list(APPEND ARROW_PYTHON_SHARED_LINK_LIBS parquet_shared)\n+endif()\n+if(ARROW_USE_XSIMD)\n+  list(APPEND ARROW_PYTHON_SHARED_PRIVATE_LINK_LIBS xsimd)\n+  list(APPEND ARROW_PYTHON_STATIC_LINK_LIBS xsimd)\n+endif()\n+\n+set(ARROW_PYTHON_INCLUDES ${NUMPY_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS})\n+\n+# Inlude macros needed to find and use add_arrow_lib function\n+include(BuildUtils)\n+include(CMakePackageConfigHelpers)\n+\n+# Set the output directory for cmake module\n+# (CMAKE_INSTALL_PREFIX = python/build/dist! should be set in setup.py!)\n+set(ARROW_CMAKE_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n+\n+add_arrow_lib(arrow_python\n+              CMAKE_PACKAGE_NAME\n+              ArrowPython\n+              PKG_CONFIG_NAME\n+              arrow-python\n+              SOURCES\n+              ${ARROW_PYTHON_SRCS}\n+              PRECOMPILED_HEADERS\n+              \"$<$<COMPILE_LANGUAGE:CXX>:pch.h>\"\n+              OUTPUTS\n+              ARROW_PYTHON_LIBRARIES\n+              DEPENDENCIES\n+              ${ARROW_PYTHON_DEPENDENCIES}\n+              SHARED_LINK_FLAGS\n+              ${ARROW_VERSION_SCRIPT_FLAGS} # Defined in line 95\n\nReview Comment:\n   Yeah, will remove the comment :D\n\n\n\n",
                    "created": "2022-07-01T08:38:04.886+0000",
                    "updated": "2022-07-01T08:38:04.886+0000",
                    "started": "2022-07-01T08:38:04.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "786992",
                    "issueId": "13441864"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 119400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@251a9504[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3677c996[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6da775cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@65142a97[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40ff6098[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7f2bfa9f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29f4e9a3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6d702e98[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56b0780e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@766f8f45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78d8c9da[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@14302cb7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 145200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 11 20:47:35 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-26T07:27:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16340/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2022-04-26T16:33:04.000+0000",
        "updated": "2022-11-11T20:47:35.000+0000",
        "timeoriginalestimate": null,
        "description": "Move {{src/arrow/python}} directory into {{pyarrow}} and arrange PyArrow to build it.\r\n\r\nMore details can be found on this thread:\r\n\r\nhttps://lists.apache.org/thread/jbxyldhqff4p9z53whhs95y4jcomdgd2",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "33h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 119400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python] Move all Python related code into PyArrow",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17564142",
                    "id": "17564142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Moving to the 10.0.0 milestone. Given that this is a large change, the goal is to merge this as soon as possible after the 9.0.0 release is cut, so we have the full 10.0.0 cycle to test and stabilize the change.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-07-08T07:56:49.325+0000",
                    "updated": "2022-07-08T07:56:49.325+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17585197",
                    "id": "17585197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 13311\n[https://github.com/apache/arrow/pull/13311]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-08-26T07:27:36.935+0000",
                    "updated": "2022-08-26T07:27:36.935+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17612958",
                    "id": "17612958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "I have a project relying on `arrow/python/pyarrow.h`, and I installed arrow from vcpkg [https://github.com/microsoft/vcpkg/tree/master/ports/arrow]. Previously `arrow/python/pyarrow.h` is available in `include` directory after installing arrow, but after upgrading to the latest version of arrow, more specifically commit ec579df631deaa8f6186208ed2a4ebec00581dfa, I am not able to find `pyarrow.h` in `include` directory of vcpkg.\u00a0\r\n\r\nI think it is probably caused by this change, do we have any recommendation what projects relying on `arrow/python/pyarrow.h` should do to overcome this issue?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-10-05T11:21:50.870+0000",
                    "updated": "2022-10-05T11:21:50.870+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17612971",
                    "id": "17612971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
                        "name": "alenka",
                        "key": "alenkaf",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Alenka Frim",
                        "active": true,
                        "timeZone": "Europe/Ljubljana"
                    },
                    "body": "Can you check if `arrow/python/pyarrow.h` is available in `arrow/python/pyarrow/include/`? And if it is, will you be able to include it from there?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
                        "name": "alenka",
                        "key": "alenkaf",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Alenka Frim",
                        "active": true,
                        "timeZone": "Europe/Ljubljana"
                    },
                    "created": "2022-10-05T12:14:03.757+0000",
                    "updated": "2022-10-05T12:14:03.757+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17612984",
                    "id": "17612984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "The pyarrow.h file will indeed no longer be installed by installing Arrow C++ with vcpkg, but it will still be installed by the python package, only not in the standard \"include\" directory. For building against pyarrow, you can use {{pyarrow.get_include()}} to get the location of those files, as is documented at https://arrow.apache.org/docs/dev/python/integration/extending.html#c-api",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-10-05T12:46:45.012+0000",
                    "updated": "2022-10-05T12:46:45.012+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17613028",
                    "id": "17613028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~alenka] \u00a0[~jorisvandenbossche]\u00a0Thanks for the help.\r\n\r\n> it will still be installed by the python package, only not in the standard \"include\" directory\r\n\r\nWhere is the header is expected to be installed? Is it expected to be installed by pyarrow's python wheel to some where and I have to add this path to my compiler's include path?\r\n\r\nIn my C++ project, I use vcpkg to manage dependency. And one of the module is a python binding for the C++ library, where I use pyarrow's C++ API like `arrow::py::wrap_table` together with pybind11 to create the python binding. Since I use vcpkg to manage dependency, I expect all C++ dependencies available via vcpkg.\r\n\r\n1) Previously pyarrow C++ is part of vcpkg arrow port, and I can use CMake's `find_library(arrow_python)` to find the library\r\n\r\n2) and use `find_path(arrow/python/pyarrow.h)` to find the path to the include directory\r\n\r\nWhat I find for the latest arrow version:\r\n1) the `libarrow_python.a` is not built, even if I set ARROW_PYTHON CMake option to `ON`.\u00a0\r\n\r\n2) the `arrow/python/pyarrow.h` cannot be found in `include` directory after building the C++ library (at least using vcpkg arrow port)\r\n\r\nI went through most of the comments in PR for this issue\u00a0[1] and read this ARROW_PYTHON option issue [2] as well, and the current behavior seems to be the expected behavior. The `python` directory will NOT be built even if ARROW_PYTHON=ON.\r\n\r\nI am not sure what the recommended approach for using pyarrow in C++. According to the document here [3], to make the build automated, it seems these are the steps:\r\n\r\n1) install pyarrow package\r\n\r\n2) launch python, run `pyarrow.get_include()` to get the `include` directory\r\n\r\n3) add the `include` directory to compiler's include search path (probably via CMake)\r\n\r\n4) where is it expected to find the `libarrow_python` so that CMake can find and use it for link?\r\n\r\n5) build\r\n\r\nIs this the recommended approach for doing this? I am not quite sure step #4, any comments on this?\r\n\r\nI can think of another approach, which is creating another vcpkg port like `arrow_python` and build the `arrow_python` library explicitly, so that projects can use this port for such purpose. Is this a recommended approach after this issue? Thanks.\r\n\r\n\u00a0\r\n\r\n[1] [https://github.com/apache/arrow/pull/13311]\r\n\r\n[2]https://issues.apache.org/jira/browse/ARROW-17868\r\n\r\n[3]Using pyarrow from C++ and Cython Code, [https://arrow.apache.org/docs/dev/python/integration/extending.html#c-api]\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-10-05T14:50:25.031+0000",
                    "updated": "2022-10-05T14:52:26.355+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17613230",
                    "id": "17613230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Is your project an open source project? If so, could you share your code? I want to see an use case for {{pyarrow.h}}.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-10-05T21:34:02.540+0000",
                    "updated": "2022-10-05T21:34:02.540+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17613274",
                    "id": "17613274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~kou]\u00a0sorry it is not open source at this moment, but the binding itself is a just very thin wrapper for the C++ library. The code looks like this:\r\n{code:java}\r\n// pyarrow.h is included here\r\n#include <arrow/python/pyarrow.h>\r\n#include <pybind11/pybind11.h>\r\n\r\nclass SearchContext {\r\n  public:\r\n  // ...\r\n  SearchContext() {\r\n    // here pyarrow module is initialized\r\n \u00a0 \u00a0auto result = arrow::py::import_pyarrow();\r\n    // ...\r\n  }\r\n\r\n \u00a0pybind11::object search(const string &sql) {\r\n \u00a0 \u00a0// call the C++ library to run the search and get the result as an arrow table\r\n    auto table = get_exec_context()->search(sql); \r\n    // use pyarrow's C++ API to wrap the Arrow C++ table as a pyarrow table instance\r\n    return _wrap_table(table);\r\n  }\r\n\r\n  private:\r\n \u00a0pybind11::object _wrap_table(std::shared_ptr<arrow::Table> table) {\r\n    // this is where pyarrow.h is used, the wrap_table API \u00a0 \r\n    return pybind11::reinterpret_steal<pybind11::object(arrow::py::wrap_table(table)); \r\n  }\r\n}{code}\r\n{code:java}\r\n// the above SearchContext class is exposed via pybind11 so that users can use them in Python \r\nPYBIND11_MODULE(my_py_binding, m) { \r\n  py::class_<SearchContext>(m, \"SearchContext\") \u00a0 \u00a0 \u00a0 \r\n    // ... \u00a0 \r\n    .def(\"search\", &SearchContext::search, py::arg(\"sql\") = \"\"); \r\n  // .... \r\n} {code}\r\nHere are the materials we referred to when we authored this binding initially (probably two years ago), we don't revisit if there is better approach since it is working for us until now.\r\n\r\n\u00a0[1] [https://arrow.apache.org/docs/python/integration/extending.html#_CPPv4N5arrow5arrow2py10wrap_tableERKNSt10shared_ptrI5TableEE]\r\n\r\n\u00a0[2] [https://stackoverflow.com/questions/57863751/how-to-convert-pyarrow-table-to-arrow-table-when-interfacing-between-pyarrow-in]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-10-06T01:18:35.360+0000",
                    "updated": "2022-10-06T01:26:39.471+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17613401",
                    "id": "17613401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
                        "name": "alenka",
                        "key": "alenkaf",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Alenka Frim",
                        "active": true,
                        "timeZone": "Europe/Ljubljana"
                    },
                    "body": "I have created a new Jira issue that will add extra info on the Apache Arrow documentation on how to use functions mentioned above to find the header files and the libraries for PyArrow C++ API: https://issues.apache.org/jira/browse/ARROW-17950",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
                        "name": "alenka",
                        "key": "alenkaf",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
                        },
                        "displayName": "Alenka Frim",
                        "active": true,
                        "timeZone": "Europe/Ljubljana"
                    },
                    "created": "2022-10-06T09:43:42.751+0000",
                    "updated": "2022-10-06T09:43:42.751+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17613797",
                    "id": "17613797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "[~niyue] Thanks. How about using  [the C data interface|https://arrow.apache.org/docs/format/CDataInterface.html] / [the C stream interface|https://arrow.apache.org/docs/format/CStreamInterface.html]  instead of {{arrow/python/pyarrow.h}}?\r\n\r\n{code:cpp}\r\nauto table = get_exec_context()->search(sql);\r\nauto reader = arrow::tableBatchReader(table);\r\nstruct ArrowArrayStream c_stream;\r\nauto status = arrow::ExportRecordBatchReader(reader, &c_stream); // TODO: Check status\r\n// Call the following Python code from pybind11 (sorry. I'm not familiar with Python's C API):\r\n//   py_reader = pyarrow.ipc.RecordBatchReader._import_from_c(&c_stream);\r\n//   py_table = pyarrow.Table.from_batches(py_reader);\r\nreturn pybind11::reinterpret_steal<pybind11::object>(py_table);\r\n{code}\r\n\r\nThe C data interface and the C stream interface are included in Apache Arrow C++.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-10-06T21:27:53.340+0000",
                    "updated": "2022-10-06T21:27:53.340+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17613979",
                    "id": "17613979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~kou]\u00a0thanks so much. I will give it a try and get back to you later (probably not very soon because I will ask someone else for verifying the python part).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-10-07T09:17:37.491+0000",
                    "updated": "2022-10-07T09:18:14.873+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17614113",
                    "id": "17614113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~kou]\u00a0\r\n\r\n> // Call the following Python code from pybind11\r\n\r\n> py_reader = pyarrow.ipc.RecordBatchReader._import_from_c(&c_stream);\r\n\r\nCould you please briefly explain more how this works? I would like to confirm, do you mean the `pyarrow.ipc.RecordBatchReader._import_from_c` is python code and not C++ code, and we could use pybind11 to execute the pyarrow python code to do this (probably using pybind11's API like [https://pybind11.readthedocs.io/en/stable/advanced/embedding.html#executing-python-code)?]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-10-07T14:47:03.593+0000",
                    "updated": "2022-10-07T14:47:23.617+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17614268",
                    "id": "17614268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Yes, {{pyarrow.ipc.RecordBatchReader._import_from_c}} is a Python code.\r\n\r\nThanks for sharing the pybind11's API document. It seems that we can write the code like the following:\r\n\r\n{code:cpp}\r\n{\r\n  py::scoped_interpreter guard{};\r\n  py::module_ pyarrow = py::module_::import(\"pyarrow\"); // We can use auto\r\n  py::object py_reader_import_from_c = pyarrow.attr(\"ipc\").attr(\"RecordBatchReader\").attr(\"_import_from_c\")\r\n  // uintptr_t isn't listed here: https://pybind11.readthedocs.io/en/stable/advanced/cast/overview.html#list-of-all-builtin-conversions\r\n  py::object py_reader = py_reader_import_from_c(static_cast<uint64_t>(static_cast<uintptr_t>(&c_stream)));\r\n  py::object py_table = pyarrow.attr(\"Table\").attr(\"from_batches\")(py_reader);\r\n  return pybind11::reinterpret_steal<pybind11::object>(py_table);\r\n}\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-10-07T21:26:59.760+0000",
                    "updated": "2022-10-07T21:26:59.760+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17631416",
                    "id": "17631416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "[~kou] I follow your instruction (with some slight modification) to make it compiled and running but ran into some segfault during importing`pyarrow` module.\r\n\r\n*1) Since I create a python binding, I use this python binding in my Python code.* `py::scoped_interpreter guard{}` seems not necessary because that will embed another interpreter, otherwise, pybind will report `the interpreter is already running` error. This is the only thing I revised.\r\n\r\n*2) In my python code:*\r\n{code:java}\r\nimport my_python_binding\r\nimport pyarrow # this lines triggers segfault{code}\r\nSome error like below is reported:\r\n\r\n\u00a0\r\n{code:java}\r\n......\r\nfree(): invalid pointer\r\nFatal Python error: Aborted\r\nCurrent thread 0x00007fae68f939c0 (most recent call first):\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 241 in _call_with_frames_removed\r\n\u00a0 File \"<frozen importlib._bootstrap_external>\", line 1176 in create_module\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 571 in module_from_spec\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 674 in _load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1006 in _find_and_load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1027 in _find_and_load\r\n\u00a0 File \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/__init__.py\", line 65 in <module>\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 241 in _call_with_frames_removed\r\n\u00a0 File \"<frozen importlib._bootstrap_external>\", line 883 in exec_module\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 688 in _load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1006 in _find_and_load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1027 in _find_and_load\r\n\u00a0 File \"/usr/src/stonewave/bindings/python/<redated>/<redated>/search.py\", line 16 in search{code}\r\nThe line 65 of {{pyarrow/\\_\\_init\\_\\_.py}} is:\r\n{code:java}\r\nimport pyarrow.lib as _lib{code}\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n{*}3) a core dump was generated{*}, and I use gdb to briefly view the core dump, it looks like this:\r\n{code:java}\r\n#0 \u00a0raise (sig=<optimized out>) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n\u00a0 \u00a0 \u00a0 \u00a0 set = {__val = {0 <repeats 16 times>}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 pid = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 tid = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 ret = <optimized out>\r\n#1 \u00a0<signal handler called>\r\nNo locals.\r\n#2 \u00a00x00007fefa03eb735 in {}gnu_cxx::{}exchange_and_add ({_}_mem=0xa, __val=-1) at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/ext/atomicity.h:50\r\nNo locals.\r\n#3 \u00a0{}gnu_cxx::{}exchange_and_add_dispatch ({_}_mem=0xa, __val=-1) at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/ext/atomicity.h:84\r\nNo locals.\r\n#4 \u00a0std::Sp_counted_base<(_gnu_cxx::_Lock_policy)2>::_M_release (this=0x2) at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr_base.h:155\r\nNo locals.\r\n#5 \u00a00x00007fefa03eb6da in std::{}shared_count<({}gnu_cxx::Lock_policy)2>::~_shared_count (this=0x1bca350) at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr_base.h:733\r\nNo locals.\r\n#6 \u00a00x00007fefa0463c5e in std::{}shared_ptr<arrow::StatusDetail, ({}gnu_cxx::Lock_policy)2>::~_shared_ptr (this=0x1bca348)\r\n\u00a0 \u00a0 at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr_base.h:1183\r\nNo locals.\r\n#7 \u00a00x00007fefa0463c38 in std::shared_ptr<arrow::StatusDetail>::~shared_ptr (this=0x1bca348) at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr.h:121\r\nNo locals.\r\n#8 \u00a00x00007fefa0463c06 in arrow::Status::State::~State (this=0x1bca320) at /vcpkg/installed/x64-linux-haswell/include/arrow/status.h:347\r\nNo locals.\r\n#9 \u00a00x00007fefa0463b9e in arrow::Status::DeleteState (this=0x7ffdcda1dd20) at /vcpkg/installed/x64-linux-haswell/include/arrow/status.h:357\r\nNo locals.\r\n#10 0x00007fef93345f0c in arrow::internal::GetEnvVar(char const*) () from /root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/libarrow.so.1000\r\nNo symbol table info available.\r\n#11 0x00007fef93398924 in arrow::io::internal::GetIOThreadPool() () from /root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/libarrow.so.1000\r\nNo symbol table info available.\r\n#12 0x00007fef928ca51e in GLOBAL_sub_I_unity_6_cxx.cxx () from /root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/libarrow.so.1000\r\nNo symbol table info available.\r\n#13 0x00007fefae7fcfe2 in call_init (l=<optimized out>, argc=argc@entry=3, argv=argv@entry=0x7ffdcda20dc8, env=env@entry=0x7ffdcda20de8) at dl-init.c:72\r\n\u00a0 \u00a0 \u00a0 \u00a0 j = 0\r\n\u00a0 \u00a0 \u00a0 \u00a0 jm = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 addrs = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 init_array = <optimized out>\r\n#14 0x00007fefae7fd0e9 in call_init (env=0x7ffdcda20de8, argv=0x7ffdcda20dc8, argc=3, l=<optimized out>) at dl-init.c:30\r\n\u00a0 \u00a0 \u00a0 \u00a0 init_array = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 j = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 jm = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 addrs = <optimized out>\r\n#15 _dl_init (main_map=0x1baa930, argc=3, argv=0x7ffdcda20dc8, env=0x7ffdcda20de8) at dl-init.c:119\r\n\u00a0 \u00a0 \u00a0 \u00a0 preinit_array = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 preinit_array_size = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 i = <optimized out>\r\n#16 0x00007fef9a56faed in {}GI{_}_dl_catch_exception (exception=exception@entry=0x0, operate=operate@entry=0x7fefae8005d0 <call_dl_init>, args=args@entry=0x7ffdcda1dfd0) at dl-error-skeleton.c:182\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = 0\r\n{}Type <RET> for more, q to quit, c to continue without paging{}\r\n\u00a0 \u00a0 \u00a0 \u00a0 c = {exception = 0x7ffdcda1df30, errcode = 0x0, env = {{__jmpbuf =\r\n{140728053391152, 0, 0, 140666978835288, 29011096, 140666978907692, 140666978805312, 140666981352408}\r\n, __mask_was_saved = -1790078976,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {}saved_mask = {{_}_val =\r\n{0, 140728053391248, 140667076916640, 0, 0, 0, 0, 0, 0, 0, 0, 12468370135039750697, 140728053391728, 140728053391216, 140728053391728, 140728053391392}\r\n}}}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = <optimized out>\r\n#17 0x00007fefae801058 in dl_open_worker (a=a@entry=0x7ffdcda1e170) at dl-open.c:758\r\n\u00a0 \u00a0 \u00a0 \u00a0 init_args = {new = 0x1baa930, argc = 3, argv = 0x7ffdcda20dc8, env = 0x7ffdcda20de8}\r\n\u00a0 \u00a0 \u00a0 \u00a0 args = 0x7ffdcda1e170\r\n\u00a0 \u00a0 \u00a0 \u00a0 file = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 mode = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 call_map = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 dst = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 new = 0x1baa930\r\n\u00a0 \u00a0 \u00a0 \u00a0 {}PRETTY_FUNCTION{} = \"dl_open_worker\"\r\n\u00a0 \u00a0 \u00a0 \u00a0 r = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 reloc_mode = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 nmaps = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 l = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 maps = <error reading variable maps (value requires 34359738360 bytes, which is more than max-value-size)>\r\n\u00a0 \u00a0 \u00a0 \u00a0 relocation_in_progress = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 any_tls = <optimized out>\r\n#18 0x00007fef9a56fa90 in {}GI{_}_dl_catch_exception (exception=exception@entry=0x7ffdcda1e150, operate=operate@entry=0x7fefae800ca0 <dl_open_worker>, args=args@entry=0x7ffdcda1e170) at dl-error-skeleton.c:208\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = 0\r\n\u00a0 \u00a0 \u00a0 \u00a0 c = {exception = 0x7ffdcda1e150, errcode = 0x7ffdcda1e05c, env = {{__jmpbuf =\r\n{2147483650, -855320820084358115, -74376, 3, 5369100, -2, -863008342291758051, -855308368215391203}\r\n, __mask_was_saved = 0,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {}saved_mask = {{_}_val =\r\n{140667001712800, 140667001712800, 4506233, 140667001207448, 15, 140667001207392, 140667001712848, 140728053391680, 140728053391712, 140728053392737, 660865357547929600, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 140728053392480, 0, 257, 140728053391712, 6671076}\r\n}}}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = 0x7ffdcda1e240\r\n#19 0x00007fefae8008fa in _dl_open (file=0x7fef95808100 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", mode=-2147483646,\r\n\u00a0 \u00a0 caller_dlopen=0x51ed0c <_PyImport_FindSharedFuncptr+284>, nsid=-2, argc=3, argv=0x7ffdcda1e150, env=0x7ffdcda20de8) at dl-open.c:837\r\n\u00a0 \u00a0 \u00a0 \u00a0 args =\r\n{file = 0x7fef95808100 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", mode = -2147483646, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 caller_dlopen = 0x51ed0c <_PyImport_FindSharedFuncptr+284>, map = 0x1baa930, nsid = 0, original_global_scope_pending_adds = 0, argc = 3, argv = 0x7ffdcda20dc8, env = 0x7ffdcda20de8}\r\n\u00a0 \u00a0 \u00a0 \u00a0 exception =\r\n{objname = 0x439830 <list_richcompare> \"UAWAVAUATSPH\\213G\\b\\366\\200\\253\", errstring = 0x7ffdcda1e250 \"8Y\\217\\001\", \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 message_buffer = 0xfbad8001 <error: Cannot access memory at address 0xfbad8001>}\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 {}PRETTY_FUNCTION{} = \"_dl_open\"\r\n#20 0x00007fef9a75a258 in dlopen_doit (a=a@entry=0x7ffdcda1e390) at dlopen.c:66\r\n\u00a0 \u00a0 \u00a0 \u00a0 args = 0x7ffdcda1e390\r\n#21 0x00007fef9a56fa90 in {}GI{_}_dl_catch_exception (exception=exception@entry=0x7ffdcda1e330, operate=operate@entry=0x7fef9a75a200 <dlopen_doit>, args=args@entry=0x7ffdcda1e390) at dl-error-skeleton.c:208\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = 32751\r\n\u00a0 \u00a0 \u00a0 \u00a0 c = {exception = 0x7ffdcda1e330, errcode = 0x7ffdcda1e23c, env = {{__jmpbuf =\r\n{26171704, 864236073942795293, -74376, 140666982652160, 140666983577264, 140666982138112, -863008342354672611, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 -855308368215391203}\r\n, {}mask_was_saved = 0, _saved_mask = {_val =\r\n{660865357547929600, 9223372036854775807, 258, 0, 0, 140666982652160, 140728053392480, 140666982138112, 5216203, 206158430248, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 140728053392336, 140728053392128, 140667001246696, 140667001246696, 2, 140667001308992}\r\n}}}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = 0x0\r\n#22 0x00007fef9a56fb4f in {}GI{_}_dl_catch_error (objname=objname@entry=0x18f5940, errstring=errstring@entry=0x18f5948, mallocedp=mallocedp@entry=0x18f5938, operate=operate@entry=0x7fef9a75a200 <dlopen_doit>,\r\n\u00a0 \u00a0 args=args@entry=0x7ffdcda1e390) at dl-error-skeleton.c:227\r\n\u00a0 \u00a0 \u00a0 \u00a0 exception = {objname = 0x0, errstring = 0x2 <error: Cannot access memory at address 0x2>, message_buffer = 0x1 <error: Cannot access memory at address 0x1>}\r\n\u00a0 \u00a0 \u00a0 \u00a0 errorcode = <optimized out>\r\n#23 0x00007fef9a75aa65 in _dlerror_run (operate=operate@entry=0x7fef9a75a200 <dlopen_doit>, args=args@entry=0x7ffdcda1e390) at dlerror.c:170\r\n\u00a0 \u00a0 \u00a0 \u00a0 result = 0x18f5930\r\n{}Type <RET> for more, q to quit, c to continue without paging{}\r\n#24 0x00007fef9a75a2e4 in __dlopen (file=<optimized out>, mode=<optimized out>) at dlopen.c:87\r\n\u00a0 \u00a0 \u00a0 \u00a0 args =\r\n{file = 0x7fef95808100 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", mode = 2, new = 0x1a4acd0, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 caller = 0x51ed0c <_PyImport_FindSharedFuncptr+284>}\r\n#25 0x000000000051ed0c in _PyImport_FindSharedFuncptr (prefix=0x64fb3d \"PyInit\", shortname=0x7fef959676b0 \"lib\",\r\n\u00a0 \u00a0 pathname=0x7fef95808100 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", fp=0x0) at ./Python/dynload_shlib.c:100\r\n\u00a0 \u00a0 \u00a0 \u00a0 funcname = \"PyInit_lib\", '\\000' <repeats 22 times>, \"\\340\\371\\234\\225\\357\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\001\", '\\000' <repeats 43 times>, \"O\\373d\\000\\000\\000\\000\\000\\320\\254\\244\\001\\000\\000\\000\\000\\060=\\204\\225\\357\\177\\000\\000P\\345\\241\\315\\375\\177\\000\\000\\002\\000\\000\\000\\000\\000\\000\\000P\\345\\241\\315\\375\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000V\\357Y\\000\\000\\000\\000\\000\\240\\356Y\\000\\000\\000\\000\\000\\220v\\226\\225\\357\\177\\000\\000\\070\\004\\212\\225\\357\\177\\000\\000\"...\r\n\u00a0 \u00a0 \u00a0 \u00a0 pathbuf = \"\\002\\000\\000\\000\\000\\000\\000\\000\\350\\357`\\331\\210,eY\\000\\321\\254\\226\\357\\177\\000\\000\\236\\272D\\000\\000\\000\\000\\000\\230z\\243\\226\\357\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000p\\307\\177\\225\\357\\177\\000\\000\\000Y\\210\\225\\357\\177\\000\\000\\260A\\212\\225\\357\\177\\000\\000\\220v\\226\\225\\357\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\305P\\000\\000\\000\\000\\000\\020\\000\\000\\000\\060\\000\\000\\000\\260\\346\\241\\315\\375\\177\\000\\000\\360\\345\\241\\315\\375\\177\\000\\000\\000Y\\210\\225\\357\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000Q\\274D\\000\\000\\000\\000\\000p\\307\\177\\225\\357\\177\\000\\000\\260A\\212\\225\\357\\177\\000\\000\\340\\251p\\000\\000\\000\\000\\000\\340\\251p\\000\\000\\000\\000\\000\\360\\071j\\000\\000\\000\\000\\000\\003\", '\\000' <repeats 15 times>...\r\n\u00a0 \u00a0 \u00a0 \u00a0 dlopenflags = 29139752\r\n\u00a0 \u00a0 \u00a0 \u00a0 handle = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 p = <optimized out>\r\n#26 0x00000000004eaa4e in _PyImport_LoadDynamicModuleWithSpec (spec=0x7fef95885900, fp=0x0) at ./Python/importdl.c:137\r\n\u00a0 \u00a0 \u00a0 \u00a0 m = 0x0\r\n\u00a0 \u00a0 \u00a0 \u00a0 path = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 name = 0x7fef95967690\r\n\u00a0 \u00a0 \u00a0 \u00a0 name_unicode = 0x7fef957fc770\r\n\u00a0 \u00a0 \u00a0 \u00a0 pathbytes = 0x7fef958080e0\r\n\u00a0 \u00a0 \u00a0 \u00a0 hook_prefix = 0x64fb3d \"PyInit\"\r\n\u00a0 \u00a0 \u00a0 \u00a0 name_buf = 0x7fef959676b0 \"lib\"\r\n\u00a0 \u00a0 \u00a0 \u00a0 exportfunc = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 p0 = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 oldcontext = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 def = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 modules = <optimized out>\r\n#27 0x00000000004ea40e in _imp_create_dynamic_impl (module=<optimized out>, spec=0x7fef95885900, file=<optimized out>) at Python/import.c:2049\r\n\u00a0 \u00a0 \u00a0 \u00a0 name = 0x7fef957fc770\r\n\u00a0 \u00a0 \u00a0 \u00a0 path = 0x7fef958a41b0\r\n\u00a0 \u00a0 \u00a0 \u00a0 tstate = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 mod = 0x0\r\n\u00a0 \u00a0 \u00a0 \u00a0 fp = 0x0\r\n#28 _imp_create_dynamic (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/import.c.h:330\r\n\u00a0 \u00a0 \u00a0 \u00a0 file = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 return_value = 0x0\r\n\u00a0 \u00a0 \u00a0 \u00a0 spec = 0x7fef95885900\r\n#29 0x000000000059ef56 in cfunction_vectorcall_FASTCALL (func=0x7fef96ac58a0, args=0x7fef95885168, nargsf=<optimized out>, kwnames=<optimized out>) at Objects/methodobject.c:430\r\n\u00a0 \u00a0 \u00a0 \u00a0 tstate = 0x1a4acd0\r\n\u00a0 \u00a0 \u00a0 \u00a0 nargs = 1\r\n\u00a0 \u00a0 \u00a0 \u00a0 meth = 0xa\r\n\u00a0 \u00a0 \u00a0 \u00a0 result = <optimized out>\r\n#30 0x00000000004c1fe7 in do_call_core (tstate=0x1a4acd0, trace_info=0x7ffdcda1e7c0, func=0x7fef96ac58a0, callargs=0x7fef95885150, kwdict=0x0) at Python/ceval.c:5915\r\n\u00a0 \u00a0 \u00a0 \u00a0 result = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 nargs = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 self = <optimized out>\r\n{}Type <RET> for more, q to quit, c to continue without paging{}\r\n#31 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fef96a5f490, throwflag=<optimized out>) at Python/ceval.c:4277\r\n\u00a0 \u00a0 \u00a0 \u00a0 func = 0x7fef96ac58a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 kwargs = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 callargs = 0x7fef95885150\r\n\u00a0 \u00a0 \u00a0 \u00a0 result = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 opcode_targets =\r\n{0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bbe90 <_PyEval_EvalFrameDefault+2064>, 0x4bbeda <_PyEval_EvalFrameDefault+2138>, 0x4bbf20 <_PyEval_EvalFrameDefault+2208>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bbfba <_PyEval_EvalFrameDefault+2362>, 0x4bc00f <_PyEval_EvalFrameDefault+2447>, 0x4bbf69 <_PyEval_EvalFrameDefault+2281>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bbd3f <_PyEval_EvalFrameDefault+1727>, 0x4bc070 <_PyEval_EvalFrameDefault+2544>, 0x4bc0e7 <_PyEval_EvalFrameDefault+2663>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc15e <_PyEval_EvalFrameDefault+2782>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bc23f <_PyEval_EvalFrameDefault+3007>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc3e8 <_PyEval_EvalFrameDefault+3432>, 0x4bcda4 <_PyEval_EvalFrameDefault+5924>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bc2b6 <_PyEval_EvalFrameDefault+3126>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc353 <_PyEval_EvalFrameDefault+3283>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bc5a7 <_PyEval_EvalFrameDefault+3879>, 0x4bc6af <_PyEval_EvalFrameDefault+4143>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc76f <_PyEval_EvalFrameDefault+4335>, 0x4bc804 <_PyEval_EvalFrameDefault+4484>, 0x4bc512 <_PyEval_EvalFrameDefault+3730>, 0x4bc47d <_PyEval_EvalFrameDefault+3581>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bcece <_PyEval_EvalFrameDefault+6222>, 0x4bce39 <_PyEval_EvalFrameDefault+6073>, 0x4c0bbe <_PyEval_EvalFrameDefault+21822>, 0x4c0ff9 <_PyEval_EvalFrameDefault+22905>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1067 <_PyEval_EvalFrameDefault+23015>, 0x4c10d5 <_PyEval_EvalFrameDefault+23125>, 0x4c142b <_PyEval_EvalFrameDefault+23979>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555> <repeats 14 times>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c19fa <_PyEval_EvalFrameDefault+25466>, 0x4bd6de <_PyEval_EvalFrameDefault+8286>, 0x4bd78d <_PyEval_EvalFrameDefault+8461>, 0x4c175b <_PyEval_EvalFrameDefault+24795>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bdc9f <_PyEval_EvalFrameDefault+9759>, 0x4bd01c <_PyEval_EvalFrameDefault+6556>, 0x4bd0dc <_PyEval_EvalFrameDefault+6748>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bcd0f <_PyEval_EvalFrameDefault+5775>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bcf63 <_PyEval_EvalFrameDefault+6371>, 0x4bd45a <_PyEval_EvalFrameDefault+7642>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bd51b <_PyEval_EvalFrameDefault+7835>, 0x4bc899 <_PyEval_EvalFrameDefault+4633>, 0x4bc92e <_PyEval_EvalFrameDefault+4782>, 0x4bc9c3 <_PyEval_EvalFrameDefault+4931>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bca58 <_PyEval_EvalFrameDefault+5080>, 0x4bcaed <_PyEval_EvalFrameDefault+5229>, 0x4bcc72 <_PyEval_EvalFrameDefault+5618>, 0x4c14e1 <_PyEval_EvalFrameDefault+24161>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1558 <_PyEval_EvalFrameDefault+24280>, 0x4bd5cb <_PyEval_EvalFrameDefault+8011>, 0x4bde54 <_PyEval_EvalFrameDefault+10196>, 0x4bd962 <_PyEval_EvalFrameDefault+8930>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bd855 <_PyEval_EvalFrameDefault+8661>, 0x4bddfc <_PyEval_EvalFrameDefault+10108>, 0x4bd171 <_PyEval_EvalFrameDefault+6897>, 0x4bd206 <_PyEval_EvalFrameDefault+7046>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bd29b <_PyEval_EvalFrameDefault+7195>, 0x4bd330 <_PyEval_EvalFrameDefault+7344>, 0x4bd3c5 <_PyEval_EvalFrameDefault+7493>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bed46 <_PyEval_EvalFrameDefault+14022>, 0x4c2ef5 <_PyEval_EvalFrameDefault+30837>, 0x4c008f <_PyEval_EvalFrameDefault+18959>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bf0e3 <_PyEval_EvalFrameDefault+14947>, 0x4c2f5b <_PyEval_EvalFrameDefault+30939>, 0x4bdc60 <_PyEval_EvalFrameDefault+9696>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bdb97 <_PyEval_EvalFrameDefault+9495>, 0x4bdee7 <_PyEval_EvalFrameDefault+10343>, 0x4bdf9a <_PyEval_EvalFrameDefault+10522>, 0x4bdffe <_PyEval_EvalFrameDefault+10622>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1604 <_PyEval_EvalFrameDefault+24452>, 0x4be190 <_PyEval_EvalFrameDefault+11024>, 0x4be223 <_PyEval_EvalFrameDefault+11171>, 0x4be2c3 <_PyEval_EvalFrameDefault+11331>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be342 <_PyEval_EvalFrameDefault+11458>, 0x4be3c3 <_PyEval_EvalFrameDefault+11587>, 0x4c26d1 <_PyEval_EvalFrameDefault+28753>, 0x4bbdcd <_PyEval_EvalFrameDefault+1869>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be465 <_PyEval_EvalFrameDefault+11749>, 0x4bea95 <_PyEval_EvalFrameDefault+13333>, 0x4bec25 <_PyEval_EvalFrameDefault+13733>, 0x4beec7 <_PyEval_EvalFrameDefault+14407>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4befda <_PyEval_EvalFrameDefault+14682>, 0x4bf953 <_PyEval_EvalFrameDefault+17107>, 0x4bfb3b <_PyEval_EvalFrameDefault+17595>, 0x4bfec6 <_PyEval_EvalFrameDefault+18502>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c047d <_PyEval_EvalFrameDefault+19965>, 0x4c05a9 <_PyEval_EvalFrameDefault+20265>, 0x4c08f0 <_PyEval_EvalFrameDefault+21104>, 0x4c0a2a <_PyEval_EvalFrameDefault+21418>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c0b66 <_PyEval_EvalFrameDefault+21734>, 0x4c05e7 <_PyEval_EvalFrameDefault+20327>, 0x4c0764 <_PyEval_EvalFrameDefault+20708>, 0x4be53b <_PyEval_EvalFrameDefault+11963>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bfbd3 <_PyEval_EvalFrameDefault+17747>, 0x4bfc69 <_PyEval_EvalFrameDefault+17897>, 0x4c2f1b <_PyEval_EvalFrameDefault+30875>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bfd26 <_PyEval_EvalFrameDefault+18086>, 0x4c1706 <_PyEval_EvalFrameDefault+24710>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bbd76 <_PyEval_EvalFrameDefault+1782>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bbe2e <_PyEval_EvalFrameDefault+1966>, 0x4be715 <_PyEval_EvalFrameDefault+12437>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bdb4d <_PyEval_EvalFrameDefault+9421>, 0x4c2ec8 <_PyEval_EvalFrameDefault+30792>, 0x4c1c7d <_PyEval_EvalFrameDefault+26109>, 0x4bbc00 <_PyEval_EvalFrameDefault+1408>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c2502 <_PyEval_EvalFrameDefault+28290>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4be7dd <_PyEval_EvalFrameDefault+12637>, 0x4be912 <_PyEval_EvalFrameDefault+12946>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be971 <_PyEval_EvalFrameDefault+13041>, 0x4be777 <_PyEval_EvalFrameDefault+12535>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1d13 <_PyEval_EvalFrameDefault+26259>, 0x4c1dcf <_PyEval_EvalFrameDefault+26447>, 0x4c18cc <_PyEval_EvalFrameDefault+25164>, 0x4c2750 <_PyEval_EvalFrameDefault+28880>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bcb82 <_PyEval_EvalFrameDefault+5378>, 0x4bcbfa <_PyEval_EvalFrameDefault+5498>, 0x4bf45b <_PyEval_EvalFrameDefault+15835>, 0x4be83d <_PyEval_EvalFrameDefault+12733>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c0c25 <_PyEval_EvalFrameDefault+21925>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c1860 <_PyEval_EvalFrameDefault+25056>, 0x4c25d0 <_PyEval_EvalFrameDefault+28496>, 0x4bf239 <_PyEval_EvalFrameDefault+15289>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be9d7 <_PyEval_EvalFrameDefault+13143>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c1af3 <_PyEval_EvalFrameDefault+25715>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1b9f <_PyEval_EvalFrameDefault+25887>, 0x4bedb8 <_PyEval_EvalFrameDefault+14136>, 0x4bee4f <_PyEval_EvalFrameDefault+14287>, 0x4bf3e1 <_PyEval_EvalFrameDefault+15713>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bf36e <_PyEval_EvalFrameDefault+15598>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555> <repeats 90 times>}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_displayhook = {string = 0x64aae2 \"displayhook\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_send = {string = 0x6a362a \"send\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}build_class{} = {string = 0x64ac69 \"{}build_class{}\", index = 18}\r\n{}Type <RET> for more, q to quit, c to continue without paging{}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}annotations{} = {string = 0x655175 \"{}annotations{}\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}aenter{} = {string = 0x64ae53 \"{}aenter{}\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}aexit{} = {string = 0x64ae5e \"{}aexit{}\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}enter{} = {string = 0x606990 \"{}enter{}\", index = 40}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}exit{} = {string = 0x60699a \"{}exit{}\", index = 41}\r\n\u00a0 \u00a0 \u00a0 \u00a0 trace_info = {code = 0x0, bounds = {ar_start = 15, ar_end = 0, ar_line = -1767671200, opaque = {computed_line = -1767152416, lo_next = 0x7ffdcda1e830 \"\\220\\364\\245\\226\\357\\177\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 limit = 0x5989e3 <frame_dealloc+163> \"\\353\\333A\\213D$P\\205\\300~>1\\333\\353\\032f.\\017\\037\\204\"}}, cframe = {use_tracing = 0, previous = 0x7ffdcda1ea40}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 _unknown_opcode = <optimized out>\r\n#32 0x00000000004bb57d in _PyEval_EvalFrame (tstate=0x1a4acd0, f=0x7fef96a5f490, throwflag=0) at ./Include/internal/pycore_ceval.h:46\r\nNo locals.\r\n#33 _PyEval_Vector (tstate=0x1a4acd0, con=0x7fef96a79520, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=<optimized out>) at Python/ceval.c:5065\r\n\u00a0 \u00a0 \u00a0 \u00a0 f = 0x7fef96a5f490\r\n\u00a0 \u00a0 \u00a0 \u00a0 retval = <optimized out>\r\n#34 0x00000000004c4823 in call_function (tstate=<optimized out>, tstate@entry=0x1a4acd0, trace_info=trace_info@entry=0x7ffdcda1ea10, pp_stack=pp_stack@entry=0x7ffdcda1eac8, oparg=<optimized out>,\r\n\u00a0 \u00a0 oparg@entry=27569360, kwnames=0xffffffff, kwnames@entry=0x0) at ./Include/cpython/abstract.h:115\r\n\u00a0 \u00a0 \u00a0 \u00a0 pfunc = 0x7fef96ad5140\r\n\u00a0 \u00a0 \u00a0 \u00a0 func = 0x7fef96a79510\r\n\u00a0 \u00a0 \u00a0 \u00a0 nkwargs = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 nargs = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 stack = 0x7fef96ad5148\r\n\u00a0 \u00a0 \u00a0 \u00a0 x = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 w = <optimized out>\r\n#35 0x00000000004c1c0b in _PyEval_EvalFrameDefault (tstate=<optimized out>, f=0x7fef96ad4fc0, throwflag=<optimized out>) at Python/ceval.c:4181\r\n\u00a0 \u00a0 \u00a0 \u00a0 sp = 0x7fef96ad5158\r\n\u00a0 \u00a0 \u00a0 \u00a0 meth = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 res = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 opcode_targets =\r\n{0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bbe90 <_PyEval_EvalFrameDefault+2064>, 0x4bbeda <_PyEval_EvalFrameDefault+2138>, 0x4bbf20 <_PyEval_EvalFrameDefault+2208>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bbfba <_PyEval_EvalFrameDefault+2362>, 0x4bc00f <_PyEval_EvalFrameDefault+2447>, 0x4bbf69 <_PyEval_EvalFrameDefault+2281>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bbd3f <_PyEval_EvalFrameDefault+1727>, 0x4bc070 <_PyEval_EvalFrameDefault+2544>, 0x4bc0e7 <_PyEval_EvalFrameDefault+2663>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc15e <_PyEval_EvalFrameDefault+2782>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bc23f <_PyEval_EvalFrameDefault+3007>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc3e8 <_PyEval_EvalFrameDefault+3432>, 0x4bcda4 <_PyEval_EvalFrameDefault+5924>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bc2b6 <_PyEval_EvalFrameDefault+3126>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc353 <_PyEval_EvalFrameDefault+3283>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bc5a7 <_PyEval_EvalFrameDefault+3879>, 0x4bc6af <_PyEval_EvalFrameDefault+4143>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bc76f <_PyEval_EvalFrameDefault+4335>, 0x4bc804 <_PyEval_EvalFrameDefault+4484>, 0x4bc512 <_PyEval_EvalFrameDefault+3730>, 0x4bc47d <_PyEval_EvalFrameDefault+3581>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bcece <_PyEval_EvalFrameDefault+6222>, 0x4bce39 <_PyEval_EvalFrameDefault+6073>, 0x4c0bbe <_PyEval_EvalFrameDefault+21822>, 0x4c0ff9 <_PyEval_EvalFrameDefault+22905>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1067 <_PyEval_EvalFrameDefault+23015>, 0x4c10d5 <_PyEval_EvalFrameDefault+23125>, 0x4c142b <_PyEval_EvalFrameDefault+23979>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555> <repeats 14 times>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c19fa <_PyEval_EvalFrameDefault+25466>, 0x4bd6de <_PyEval_EvalFrameDefault+8286>, 0x4bd78d <_PyEval_EvalFrameDefault+8461>, 0x4c175b <_PyEval_EvalFrameDefault+24795>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bdc9f <_PyEval_EvalFrameDefault+9759>, 0x4bd01c <_PyEval_EvalFrameDefault+6556>, 0x4bd0dc <_PyEval_EvalFrameDefault+6748>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bcd0f <_PyEval_EvalFrameDefault+5775>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bcf63 <_PyEval_EvalFrameDefault+6371>, 0x4bd45a <_PyEval_EvalFrameDefault+7642>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bd51b <_PyEval_EvalFrameDefault+7835>, 0x4bc899 <_PyEval_EvalFrameDefault+4633>, 0x4bc92e <_PyEval_EvalFrameDefault+4782>, 0x4bc9c3 <_PyEval_EvalFrameDefault+4931>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bca58 <_PyEval_EvalFrameDefault+5080>, 0x4bcaed <_PyEval_EvalFrameDefault+5229>, 0x4bcc72 <_PyEval_EvalFrameDefault+5618>, 0x4c14e1 <_PyEval_EvalFrameDefault+24161>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1558 <_PyEval_EvalFrameDefault+24280>, 0x4bd5cb <_PyEval_EvalFrameDefault+8011>, 0x4bde54 <_PyEval_EvalFrameDefault+10196>, 0x4bd962 <_PyEval_EvalFrameDefault+8930>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bd855 <_PyEval_EvalFrameDefault+8661>, 0x4bddfc <_PyEval_EvalFrameDefault+10108>, 0x4bd171 <_PyEval_EvalFrameDefault+6897>, 0x4bd206 <_PyEval_EvalFrameDefault+7046>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bd29b <_PyEval_EvalFrameDefault+7195>, 0x4bd330 <_PyEval_EvalFrameDefault+7344>, 0x4bd3c5 <_PyEval_EvalFrameDefault+7493>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bed46 <_PyEval_EvalFrameDefault+14022>, 0x4c2ef5 <_PyEval_EvalFrameDefault+30837>, 0x4c008f <_PyEval_EvalFrameDefault+18959>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bf0e3 <_PyEval_EvalFrameDefault+14947>, 0x4c2f5b <_PyEval_EvalFrameDefault+30939>, 0x4bdc60 <_PyEval_EvalFrameDefault+9696>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bdb97 <_PyEval_EvalFrameDefault+9495>, 0x4bdee7 <_PyEval_EvalFrameDefault+10343>, 0x4bdf9a <_PyEval_EvalFrameDefault+10522>, 0x4bdffe <_PyEval_EvalFrameDefault+10622>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1604 <_PyEval_EvalFrameDefault+24452>, 0x4be190 <_PyEval_EvalFrameDefault+11024>, 0x4be223 <_PyEval_EvalFrameDefault+11171>, 0x4be2c3 <_PyEval_EvalFrameDefault+11331>, --Type <RET> for more, q to quit, c to continue without paging-- \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be342 <_PyEval_EvalFrameDefault+11458>, 0x4be3c3 <_PyEval_EvalFrameDefault+11587>, 0x4c26d1 <_PyEval_EvalFrameDefault+28753>, 0x4bbdcd <_PyEval_EvalFrameDefault+1869>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be465 <_PyEval_EvalFrameDefault+11749>, 0x4bea95 <_PyEval_EvalFrameDefault+13333>, 0x4bec25 <_PyEval_EvalFrameDefault+13733>, 0x4beec7 <_PyEval_EvalFrameDefault+14407>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4befda <_PyEval_EvalFrameDefault+14682>, 0x4bf953 <_PyEval_EvalFrameDefault+17107>, 0x4bfb3b <_PyEval_EvalFrameDefault+17595>, 0x4bfec6 <_PyEval_EvalFrameDefault+18502>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c047d <_PyEval_EvalFrameDefault+19965>, 0x4c05a9 <_PyEval_EvalFrameDefault+20265>, 0x4c08f0 <_PyEval_EvalFrameDefault+21104>, 0x4c0a2a <_PyEval_EvalFrameDefault+21418>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c0b66 <_PyEval_EvalFrameDefault+21734>, 0x4c05e7 <_PyEval_EvalFrameDefault+20327>, 0x4c0764 <_PyEval_EvalFrameDefault+20708>, 0x4be53b <_PyEval_EvalFrameDefault+11963>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bfbd3 <_PyEval_EvalFrameDefault+17747>, 0x4bfc69 <_PyEval_EvalFrameDefault+17897>, 0x4c2f1b <_PyEval_EvalFrameDefault+30875>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bfd26 <_PyEval_EvalFrameDefault+18086>, 0x4c1706 <_PyEval_EvalFrameDefault+24710>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4bbd76 <_PyEval_EvalFrameDefault+1782>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bbe2e <_PyEval_EvalFrameDefault+1966>, 0x4be715 <_PyEval_EvalFrameDefault+12437>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bdb4d <_PyEval_EvalFrameDefault+9421>, 0x4c2ec8 <_PyEval_EvalFrameDefault+30792>, 0x4c1c7d <_PyEval_EvalFrameDefault+26109>, 0x4bbc00 <_PyEval_EvalFrameDefault+1408>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c2502 <_PyEval_EvalFrameDefault+28290>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4be7dd <_PyEval_EvalFrameDefault+12637>, 0x4be912 <_PyEval_EvalFrameDefault+12946>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be971 <_PyEval_EvalFrameDefault+13041>, 0x4be777 <_PyEval_EvalFrameDefault+12535>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1d13 <_PyEval_EvalFrameDefault+26259>, 0x4c1dcf <_PyEval_EvalFrameDefault+26447>, 0x4c18cc <_PyEval_EvalFrameDefault+25164>, 0x4c2750 <_PyEval_EvalFrameDefault+28880>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bcb82 <_PyEval_EvalFrameDefault+5378>, 0x4bcbfa <_PyEval_EvalFrameDefault+5498>, 0x4bf45b <_PyEval_EvalFrameDefault+15835>, 0x4be83d <_PyEval_EvalFrameDefault+12733>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c0c25 <_PyEval_EvalFrameDefault+21925>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c1860 <_PyEval_EvalFrameDefault+25056>, 0x4c25d0 <_PyEval_EvalFrameDefault+28496>, 0x4bf239 <_PyEval_EvalFrameDefault+15289>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4be9d7 <_PyEval_EvalFrameDefault+13143>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555>, 0x4c1af3 <_PyEval_EvalFrameDefault+25715>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4c1b9f <_PyEval_EvalFrameDefault+25887>, 0x4bedb8 <_PyEval_EvalFrameDefault+14136>, 0x4bee4f <_PyEval_EvalFrameDefault+14287>, 0x4bf3e1 <_PyEval_EvalFrameDefault+15713>, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x4bf36e <_PyEval_EvalFrameDefault+15598>, 0x4c29f3 <_PyEval_EvalFrameDefault+29555> <repeats 90 times>}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_displayhook = {string = 0x64aae2 \"displayhook\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_send = {string = 0x6a362a \"send\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}build_class{} = {string = 0x64ac69 \"{}build_class{}\", index = 18}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}annotations{} = {string = 0x655175 \"{}annotations{}\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}aenter{} = {string = 0x64ae53 \"{}aenter{}\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}aexit{} = {string = 0x64ae5e \"{}aexit{}\", index = -1}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}enter{} = {string = 0x606990 \"{}enter{}\", index = 40}\r\n\u00a0 \u00a0 \u00a0 \u00a0 PyId_{}exit{} = {string = 0x60699a \"{}exit{}\", index = 41}\r\n\u00a0 \u00a0 \u00a0 \u00a0 trace_info = {code = 0x0, bounds = {ar_start = 64, ar_end = 0, ar_line = -1786174976, opaque = {computed_line = 28322560, lo_next = 0x725a70 <PyMethod_Type> \"\\026\", limit = 0x7fef95884eb0 \"\\003\"}},\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cframe = {use_tracing = 0, previous = 0x7ffdcda1ec90}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 _unknown_opcode = <optimized out>\r\n#36 0x00000000004bb57d in _PyEval_EvalFrame (tstate=0x1a4acd0, f=0x7fef96ad4fc0, throwflag=0) at ./Include/internal/pycore_ceval.h:46\r\nNo locals.\r\n#37 _PyEval_Vector (tstate=0x1a4acd0, con=0x7fef96afe600, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=<optimized out>) at Python/ceval.c:5065\r\n\u00a0 \u00a0 \u00a0 \u00a0 f = 0x7fef96ad4fc0\r\n\u00a0 \u00a0 \u00a0 \u00a0 retval = <optimized out>\r\n{code}\r\nIt seems both my python binding and pyarrow uses arrow's code to do some initialization, the `arrow::io::internal::GetIOThreadPool` for some reason fails to work in this case and caused the segfault.\r\n\r\n\u00a0\r\n\r\n{*}4) Since it is related with `::arrow::internal::GetEnvVar(\"ARROW_IO_THREADS\");`{*}, I tried setting the `ARROW_IO_THREADS` env var to a number and gave it another try. And the program still caused a segfault, but reporting a different error (there is no `free(): invalid pointer` printed this time):\r\n{code:java}\r\nFatal Python error: Segmentation fault\r\nCurrent thread 0x00007fea55bd09c0 (most recent call first):\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 241 in _call_with_frames_removed\r\n\u00a0 File \"<frozen importlib._bootstrap_external>\", line 1176 in create_module\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 571 in module_from_spec\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 674 in _load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1006 in _find_and_load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1027 in _find_and_load\r\n\u00a0 File \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/{}init{}.py\", line 65 in <module>\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 241 in _call_with_frames_removed\r\n\u00a0 File \"<frozen importlib._bootstrap_external>\", line 883 in exec_module\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 688 in _load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1006 in _find_and_load_unlocked\r\n\u00a0 File \"<frozen importlib._bootstrap>\", line 1027 in _find_and_load\r\n\u00a0 File \"/usr/src/stonewave/bindings/python/<redated>/<redated>/search.py\", line 16 in search{code}\r\n{*}5) I used gdb to view the core dump again{*}, and it reported error like below:\r\n{code:java}\r\n#0 \u00a0raise (sig=<optimized out>) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n\u00a0 \u00a0 \u00a0 \u00a0 set = {__val = {0 <repeats 16 times>}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 pid = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 tid = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 ret = <optimized out>\r\n#1 \u00a0<signal handler called>\r\nNo locals.\r\n#2 \u00a00x00007fea5d4a60bb in std::{}shared_ptr<arrow::DataType, ({}gnu_cxx::Lock_policy)2>::_shared_ptr (this=0x5)\r\n\u00a0 \u00a0 at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr_base.h:1181\r\nNo locals.\r\n#3 \u00a00x00007fea5d4a6093 in std::shared_ptr<arrow::DataType>::shared_ptr (this=0x5) at /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/shared_ptr.h:149\r\nNo locals.\r\n#4 \u00a00x00007fea5d9da822 in arrow::int32 () at /vcpkg/buildtrees/arrow/src/c4eb0a0543-8e1ffd6d16.clean/cpp/src/arrow/type.cc:2165\r\n\u00a0 \u00a0 \u00a0 \u00a0 result = warning: RTTI symbol not found for class 'std::Sp_counted_ptr_inplace<arrow::Int32Type, std::allocator<arrow::Int32Type>, (_gnu_cxx::_Lock_policy)2>'\r\nwarning: RTTI symbol not found for class 'std::Sp_counted_ptr_inplace<arrow::Int32Type, std::allocator<arrow::Int32Type>, (_gnu_cxx::_Lock_policy)2>'\r\nstd::shared_ptr<arrow::DataType> (use count 1053, weak count 0) = {get() = 0x108ba70}\r\n#5 \u00a00x00007fea364ff4af in GLOBAL_sub_I_unity_1_cxx.cxx () from /root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/libarrow_dataset.so.1000\r\nNo symbol table info available.\r\n#6 \u00a00x00007fea6b82ffe2 in call_init (l=<optimized out>, argc=argc@entry=5, argv=argv@entry=0x7fff106aae38, env=env@entry=0x168fd50) at dl-init.c:72\r\n\u00a0 \u00a0 \u00a0 \u00a0 j = 0\r\n\u00a0 \u00a0 \u00a0 \u00a0 jm = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 addrs = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 init_array = <optimized out>\r\n#7 \u00a00x00007fea6b8300e9 in call_init (env=0x168fd50, argv=0x7fff106aae38, argc=5, l=<optimized out>) at dl-init.c:30\r\n\u00a0 \u00a0 \u00a0 \u00a0 init_array = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 j = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 jm = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 addrs = <optimized out>\r\n#8 \u00a0_dl_init (main_map=0x1918190, argc=5, argv=0x7fff106aae38, env=0x168fd50) at dl-init.c:119\r\n\u00a0 \u00a0 \u00a0 \u00a0 preinit_array = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 preinit_array_size = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 i = <optimized out>\r\n#9 \u00a00x00007fea575a2aed in {}GI{_}_dl_catch_exception (exception=exception@entry=0x0, operate=operate@entry=0x7fea6b8335d0 <call_dl_init>, args=args@entry=0x7fff106a1cd0)\r\n\u00a0 \u00a0 at dl-error-skeleton.c:182\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = 0\r\n\u00a0 \u00a0 \u00a0 \u00a0 c = {exception = 0x7fff106a1c30, errcode = 0x0, env = {{__jmpbuf =\r\n{140733468777520, 0, 0, 140643321125720, 26313976, 140643321198124, 140643321095744, 140643323642840}\r\n,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {}mask_was_saved = 322015232, _saved_mask = {_val =\r\n{0, 140733468777616, 140644478215584, 0, 0, 0, 0, 0, 0, 0, 0, 12468370135039750697, 140733468778096, 140733468777584, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 140733468778096, 140733468777760}\r\n}}}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = <optimized out>\r\n#10 0x00007fea6b834058 in dl_open_worker (a=a@entry=0x7fff106a1e70) at dl-open.c:758\r\n\u00a0 \u00a0 \u00a0 \u00a0 init_args = {new = 0x1918190, argc = 5, argv = 0x7fff106aae38, env = 0x168fd50}\r\n\u00a0 \u00a0 \u00a0 \u00a0 args = 0x7fff106a1e70\r\n\u00a0 \u00a0 \u00a0 \u00a0 file = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 mode = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 call_map = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 dst = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 new = 0x1918190\r\n\u00a0 \u00a0 \u00a0 \u00a0 {}PRETTY_FUNCTION{} = \"dl_open_worker\"\r\n\u00a0 \u00a0 \u00a0 \u00a0 r = <optimized out>\r\n{}Type <RET> for more, q to quit, c to continue without paging{}\r\n\u00a0 \u00a0 \u00a0 \u00a0 reloc_mode = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 nmaps = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 l = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 maps = <error reading variable maps (value requires 138793856 bytes, which is more than max-value-size)>\r\n\u00a0 \u00a0 \u00a0 \u00a0 relocation_in_progress = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 any_tls = <optimized out>\r\n#11 0x00007fea575a2a90 in {}GI{_}_dl_catch_exception (exception=exception@entry=0x7fff106a1e50, operate=operate@entry=0x7fea6b833ca0 <dl_open_worker>, args=args@entry=0x7fff106a1e70)\r\n\u00a0 \u00a0 at dl-error-skeleton.c:208\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = 0\r\n\u00a0 \u00a0 \u00a0 \u00a0 c = {exception = 0x7fff106a1e50, errcode = 0x7fff106a1d5c, env = {{__jmpbuf =\r\n{2147483650, 1061564265845182786, -74376, 5, 5369100, -2, 1049880826869928258, 1061551455913726274}\r\n,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {}mask_was_saved = 0, _saved_mask = {_val =\r\n{140644403015840, 140644403015840, 4506233, 140644402510488, 15, 140644402510432, 140644403015888, 140733468778048, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 140733468778080, 140733468779105, 10865718445837529600, 140733468778848, 0, 257, 140733468778080, 6671076}\r\n}}}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = 0x7fff106a1f40\r\n#12 0x00007fea6b8338fa in _dl_open (file=0x7fea5165efc0 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\",\r\n\u00a0 \u00a0 mode=-2147483646, caller_dlopen=0x51ed0c <_PyImport_FindSharedFuncptr+284>, nsid=-2, argc=5, argv=0x7fff106a1e50, env=0x168fd50) at dl-open.c:837\r\n\u00a0 \u00a0 \u00a0 \u00a0 args =\r\n{file = 0x7fea5165efc0 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 mode = -2147483646, caller_dlopen = 0x51ed0c <_PyImport_FindSharedFuncptr+284>, map = 0x1918190, nsid = 0, original_global_scope_pending_adds = 0, argc = 5, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 argv = 0x7fff106aae38, env = 0x168fd50}\r\n\u00a0 \u00a0 \u00a0 \u00a0 exception =\r\n{objname = 0x439830 <list_richcompare> \"UAWAVAUATSPH\\213G\\b\\366\\200\\253\", errstring = 0x7fff106a1f50 \"8Y\\b\\001\", \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 message_buffer = 0xfbad8001 <error: Cannot access memory at address 0xfbad8001>}\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 {}PRETTY_FUNCTION{} = \"_dl_open\"\r\n#13 0x00007fea5778d258 in dlopen_doit (a=a@entry=0x7fff106a2090) at dlopen.c:66\r\n\u00a0 \u00a0 \u00a0 \u00a0 args = 0x7fff106a2090\r\n#14 0x00007fea575a2a90 in {}GI{_}_dl_catch_exception (exception=exception@entry=0x7fff106a2030, operate=operate@entry=0x7fea5778d200 <dlopen_doit>, args=args@entry=0x7fff106a2090)\r\n\u00a0 \u00a0 at dl-error-skeleton.c:208\r\n\u00a0 \u00a0 \u00a0 \u00a0 errcode = 32746\r\n\u00a0 \u00a0 \u00a0 \u00a0 c = {exception = 0x7fff106a2030, errcode = 0x7fff106a1f3c, env = {{__jmpbuf =\r\n{17324344, -1049391729601195710, -74376, 140644364656960, 140644364656832, 140644364709824, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 1049880826807013698, 1061551455913726274}\r\n, {}mask_was_saved = 0, _saved_mask = {_val =\r\n{10865718445837529600, 9223372036854775807, 258, 0, 0, 140644364656960, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 140733468778848, 140644364709824, 5216203, 206158430248, 140733468778704, 140733468778496, 140644402549736, 140644402549736, 2, 140644402612032}\r\n}}}}\r\n\u00a0 \u00a0 \u00a0 \u00a0 old = 0x0\r\n#15 0x00007fea575a2b4f in {}GI{_}_dl_catch_error (objname=objname@entry=0x1085940, errstring=errstring@entry=0x1085948, mallocedp=mallocedp@entry=0x1085938,\r\n\u00a0 \u00a0 operate=operate@entry=0x7fea5778d200 <dlopen_doit>, args=args@entry=0x7fff106a2090) at dl-error-skeleton.c:227\r\n\u00a0 \u00a0 \u00a0 \u00a0 exception = {objname = 0x0, errstring = 0x2 <error: Cannot access memory at address 0x2>, message_buffer = 0x1 <error: Cannot access memory at address 0x1>}\r\n\u00a0 \u00a0 \u00a0 \u00a0 errorcode = <optimized out>\r\n#16 0x00007fea5778da65 in _dlerror_run (operate=operate@entry=0x7fea5778d200 <dlopen_doit>, args=args@entry=0x7fff106a2090) at dlerror.c:170\r\n\u00a0 \u00a0 \u00a0 \u00a0 result = 0x1085930\r\n#17 0x00007fea5778d2e4 in __dlopen (file=<optimized out>, mode=<optimized out>) at dlopen.c:87\r\n\u00a0 \u00a0 \u00a0 \u00a0 args =\r\n{file = 0x7fea5165efc0 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", mode = 2, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 new = 0x11f6700, caller = 0x51ed0c <_PyImport_FindSharedFuncptr+284>}\r\n#18 0x000000000051ed0c in _PyImport_FindSharedFuncptr (prefix=0x64fb3d \"PyInit\", shortname=0x7fea516520c0 \"lib\",\r\n\u00a0 \u00a0 pathname=0x7fea5165efc0 \"/root/.cache/pypoetry/virtualenvs/<redated>-sOknH4PM-py3.10/lib/python3.10/site-packages/pyarrow/lib.cpython-310-x86_64-linux-gnu.so\", fp=0x0)\r\n\u00a0 \u00a0 at ./Python/dynload_shlib.c:100\r\n\u00a0 \u00a0 \u00a0 \u00a0 funcname = \"PyInit_lib\", '\\000' <repeats 22 times>, \"\\320\\315qR\\352\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\001\", '\\000' <repeats 43 times>, \"O\\373d\\000\\000\\000\\000\\000\\000g\\037\\001\\000\\000\\000\\000\\200sfQ\\352\\177\\000\\000P\\\"j\\020\\377\\177\\000\\000\\002\\000\\000\\000\\000\\000\\000\\000P\\\"j\\020\\377\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000V\\357Y\\000\\000\\000\\000\\000\\240\\356Y\\000\\000\\000\\000\\000\\240 eQ\\352\\177\\000\\000\\070\\067hQ\\352\\177\\000\\000\"...\r\n\u00a0 \u00a0 \u00a0 \u00a0 pathbuf = \"\\002\\000\\000\\000\\000\\000\\000\\000\\264\\212\\035\\305yz\\306d\\000\\021\\260S\\352\\177\\000\\000\\236\\272D\\000\\000\\000\\000\\000\\230\\272\\246S\\352\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000p\\036hQ\\352\\177\\000\\000@!eQ\\352\\177\\000\\000p;xQ\\352\\177\\000\\000\\240 eQ\\352\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\023\\305P\\000\\000\\000\\000\\000\\020\\000\\000\\000\\060\\000\\000\\000\\260#j\\0\r\n20\\377\\177\\000\\000\\360\\\"j\\020\\377\\177\\000\\000@!eQ\\352\\177\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000Q\\274D\\000\\000\\000\\000\\000p\\036hQ\\352\\177\\000\\000p;xQ\\352\\177\\000\\000\\340\\251p\\000\\000\\000\\000\\000\\340\\251p\\000\\000\\000\\000\\000\\360\\071j\\000\\000\\000\\000\\000\\003\", '\\000' <repeats 15 times>...\r\n\u00a0 \u00a0 \u00a0 \u00a0 dlopenflags = 1799967928\r\n\u00a0 \u00a0 \u00a0 \u00a0 handle = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 p = <optimized out>\r\n#19 0x00000000004eaa4e in _PyImport_LoadDynamicModuleWithSpec (spec=0x7fea51652140, fp=0x0) at ./Python/importdl.c:137\r\n\u00a0 \u00a0 \u00a0 \u00a0 m = 0x0\r\n\u00a0 \u00a0 \u00a0 \u00a0 path = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 name = 0x7fea516520a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 name_unicode = 0x7fea51681e70\r\n\u00a0 \u00a0 \u00a0 \u00a0 pathbytes = 0x7fea5165efa0\r\n\u00a0 \u00a0 \u00a0 \u00a0 hook_prefix = 0x64fb3d \"PyInit\"\r\n\u00a0 \u00a0 \u00a0 \u00a0 name_buf = 0x7fea516520c0 \"lib\"\r\n\u00a0 \u00a0 \u00a0 \u00a0 exportfunc = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 p0 = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 oldcontext = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 def = <optimized out>\r\n\u00a0 \u00a0 \u00a0 \u00a0 modules = <optimized out>\r\n{code}\r\nIt is different with previously core dump, but I have no idea how this happens now. And the behavior is pretty consistent, if I unset the `ARROW_IO_THREADS` env var and run the program again, the previous core dump will be generated again.\r\n\r\n\u00a0\r\n\r\n*Summary:*\r\n\r\nI don't know how to proceed any more. Basically:\r\n\r\n1) I create a C++ library with arrow C++ library\r\n\r\n2) I create a python binding for the C++ library using pybind\r\n\r\n3) Instead of importing pyarrow.h header, I now import <arrow/c/abi.h> and <arrow/c/bridge.h> for bridging\r\n\r\n4) In my python program, I use both my python binding and pyarrow wheel\r\n\r\nCould you please shed some light on this issue? Do you think if this kind usage is supported or if it is some bug for arrow project?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-11-10T03:06:02.001+0000",
                    "updated": "2022-11-11T04:42:09.154+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17632072",
                    "id": "17632072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "bq. I use both my python binding and pyarrow wheel\r\n\r\nDoes it mean that you use Apache Arrow C++ from vcpkg and pyarrow wheel from PyPI?\r\n\r\nIf so, you should not use Apache Arrow C++ from vcpkg. Could you use https://arrow.apache.org/docs/dev/python/integration/extending.html#c-api instead (use {{pyarrow.get_include()}}/{{pyarrow.get_libraries()}}/{{pyarrow.get_library_dirs()}}/{{arrow/python/pyarrow.h}} instead of {{find_package(Arrow)}}/{{<arrow/c/abi.h>}}/{{<arrow/c/bridge.h>}})?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-11-11T04:48:33.246+0000",
                    "updated": "2022-11-11T04:48:33.246+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17632275",
                    "id": "17632275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "body": "> Does it mean that you use Apache Arrow C++ from vcpkg and pyarrow wheel from PyPI?\r\n\r\nAlmost. I use Apache Arrow C++ from vcpkg (but I don't use the latest version of Arrow in vcpkg, instead, I use a fork of it with some gandiva related modification, and use a custom vcpkg port to manage the arrow dependency).\r\n\r\n> If so, you should not use Apache Arrow C++ from vcpkg.\u00a0\r\n\r\nCould you briefly explain why this should not be done this way?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=niyue",
                        "name": "niyue",
                        "key": "niyue",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=niyue&avatarId=48220",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=niyue&avatarId=48220",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=niyue&avatarId=48220",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=niyue&avatarId=48220"
                        },
                        "displayName": "Yue Ni",
                        "active": true,
                        "timeZone": "Asia/Shanghai"
                    },
                    "created": "2022-11-11T11:51:44.790+0000",
                    "updated": "2022-11-11T11:51:44.790+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13441864/comment/17632551",
                    "id": "17632551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Because pyarrow wheel includes pre-built Apache Arrow C++ library. If you use both of Apache Arrow C++ from vcpkg and pyarrow wheel from PyPI, you mix multiple Apache Arrow C++ libraries. It causes unexpected behavior such as a crash.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-11-11T20:47:35.012+0000",
                    "updated": "2022-11-11T20:47:35.012+0000"
                }
            ],
            "maxResults": 17,
            "total": 17,
            "startAt": 0
        },
        "customfield_12311820": "0|z11u4g:",
        "customfield_12314139": null
    }
}