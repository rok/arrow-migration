{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13364731",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731",
    "key": "ARROW-11950",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615426",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615426",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13377986",
                    "key": "ARROW-12748",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377986",
                    "fields": {
                        "summary": "[C++] Arithmetic kernels for numeric arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11950/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/581990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016\n\n\n   This draft PR adds unary scalar arithmetic kernels for the negation operation on integral and floating-point types. The kernels are described in the compute package as Negate and NegateChecked structs, and registered with respective names of \"negate\" and \"negate_checked\".\r\n   \r\n   @bkietz please review\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T19:16:25.490+0000",
                    "updated": "2021-04-13T19:16:25.490+0000",
                    "started": "2021-04-13T19:16:25.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581990",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/581998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#issuecomment-819001359\n\n\n   The following are pending details to be resolved with this PR:\r\n   1. How to handle 0, +0, -0? IEEE754 defines signed/unsigned zero and although they should be logically equal, they can produce different results on certain operations. For example, 1/-0 = -inf and 1/+0 = +inf\r\n   2. How to handle unsigned integers? Wrap around as described in https://en.cppreference.com/w/cpp/language/implicit_conversion\r\n   3. Test cases for int8 and int16 fail because expected result is implicitly promoted to int32. Not sure if this promotion occurs in testing framework or C++ rules.\r\n   \r\n   @bkietz @pitrou \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T19:36:35.453+0000",
                    "updated": "2021-04-13T19:36:35.453+0000",
                    "started": "2021-04-13T19:36:35.453+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581998",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#issuecomment-819001359\n\n\n   The following are pending details to be resolved with this PR:\r\n   1. How to handle 0, +0, -0?\r\n       * IEEE754 defines signed/unsigned FP zero and although they should be logically equal, they can produce different results on certain operations. For example, 1/-0 = -inf and 1/+0 = +inf.\r\n       * Integral signed/unsigned zero?\r\n   2. How to handle unsigned integers?\r\n       * Wrap around as described in https://en.cppreference.com/w/cpp/language/implicit_conversion\r\n   3. Test cases for int8 and int16 fail because expected result is implicitly promoted to int32. Not sure if this promotion occurs in testing framework or C++ rules.\r\n   \r\n   @bkietz @pitrou \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T19:38:02.818+0000",
                    "updated": "2021-04-13T19:38:02.818+0000",
                    "started": "2021-04-13T19:38:02.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582001",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#issuecomment-819160925\n\n\n   https://issues.apache.org/jira/browse/ARROW-11950\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T01:43:04.949+0000",
                    "updated": "2021-04-14T01:43:04.949+0000",
                    "started": "2021-04-14T01:43:04.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582144",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613356580\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -739,6 +739,10 @@ struct ScalarUnaryNotNull {\n   }\n };\n \n+// A kernel exec generator for unary kernels\n+template <typename OutType, typename ArgType, typename Op>\n+using ScalarUnaryType = ScalarUnary<OutType, ArgType, Op>;\n\nReview comment:\n       This alias doesn't add anything, please revert it.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n+  //  * State that unsigned numbers are not supported (i.e., undefined behavior)?\n+  //  * Use C++ integral conversions (e.g., Negate(-128) = -128)?\n+  //    * https://timsong-cpp.github.io/cppwp/n4659/conv.integral\n+  template <typename T, typename Arg0>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+};\n+\n+struct NegateChecked {\n+  template <typename T, typename Arg0>\n+  static enable_if_integer<T> Call(KernelContext* ctx, Arg0 arg) {\n\nReview comment:\n       ```suggestion\r\n     static enable_if_signed_integer<T> Call(KernelContext* ctx, Arg0 arg) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -709,5 +709,76 @@ TEST(TestBinaryArithmetic, AddWithImplicitCastsUint64EdgeCase) {\n                                      ArrayFromJSON(uint64(), \"[18446744073709551615]\")}));\n }\n \n+TEST(TestUnaryArithmeticSigned, Negate) {\n+  for (const auto& ty : internal::SignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0, 0, -0]\"), ArrayFromJSON(ty, \"[0, -0, 0]\"));\n\nReview comment:\n       -0 is not distinct from 0 for integral types\r\n   ```suggestion\r\n       CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0, 0, 0]\"), ArrayFromJSON(ty, \"[0, 0, 0]\"));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n+  //  * State that unsigned numbers are not supported (i.e., undefined behavior)?\n+  //  * Use C++ integral conversions (e.g., Negate(-128) = -128)?\n+  //    * https://timsong-cpp.github.io/cppwp/n4659/conv.integral\n+  template <typename T, typename Arg0>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg0 arg) {\n\nReview comment:\n       ```suggestion\r\n     static constexpr enable_if_signed_integer<T> Call(KernelContext*, Arg0 arg) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeScalarArithmeticFunction(std::string name,\n+                                                             const FunctionDoc* doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Unary(), doc);\n+  // 8-bit signed integer\n+  // ArrayKernelExec exec = ScalarUnary<Int8Type, Int8Type, Op>::Exec;\n+  // DCHECK_OK(func->AddKernel({int8()}, int8(), exec));\n+\n+  for (const auto& ty : NumericTypes()) {\n+    auto exec = NumericEqualTypesBinary<ScalarUnaryType, Op>(ty);\n\nReview comment:\n       Also, note that although `ScalarUnary` is acceptable for \"negate\", \"negate_checked\" will need `ScalarUnaryNotNull` to ensure that we don't generate spurious errors when looking at values \"under\" null bits\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeScalarArithmeticFunction(std::string name,\n+                                                             const FunctionDoc* doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Unary(), doc);\n+  // 8-bit signed integer\n+  // ArrayKernelExec exec = ScalarUnary<Int8Type, Int8Type, Op>::Exec;\n+  // DCHECK_OK(func->AddKernel({int8()}, int8(), exec));\n+\n+  for (const auto& ty : NumericTypes()) {\n+    auto exec = NumericEqualTypesBinary<ScalarUnaryType, Op>(ty);\n\nReview comment:\n       It's fortunate that NumericEqualTypesBinary can be reused here, but we should rename it to avoid confusion. Maybe `ArithmeticExecFromOp`?\r\n   ```suggestion\r\n       auto exec = ArithmeticExecFromOp<ScalarUnary, Op>(ty);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n\nReview comment:\n       I think promotion to signed is the correct way to handle this. Only kernels for signed integer types will be included, and when negating an unsigned integer an implicit cast to the next largest signed integer must be performed first.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -709,5 +709,76 @@ TEST(TestBinaryArithmetic, AddWithImplicitCastsUint64EdgeCase) {\n                                      ArrayFromJSON(uint64(), \"[18446744073709551615]\")}));\n }\n \n+TEST(TestUnaryArithmeticSigned, Negate) {\n+  for (const auto& ty : internal::SignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0, 0, -0]\"), ArrayFromJSON(ty, \"[0, -0, 0]\"));\n+    // Positive inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1, 10, 100]\"), ArrayFromJSON(ty, \"[-1, -10, -100]\"));\n+    // Negative inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1, -10, -100]\"), ArrayFromJSON(ty, \"[1, 10, 100]\"));\n+  }\n+}\n+\n+TEST(TestUnaryArithmeticSignedMinMax, Negate) {\n+  // NOTE [EPM]: Can these tests be done by iterating types?\n+\n+  // Min input\n+  // Out-of-bounds after operation (C++ 2's complement wrap around, architecture dependent)\n+  auto int8_min = std::numeric_limits<int8_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int8_min), MakeScalar(int8_min));\n+  auto int16_min = std::numeric_limits<int16_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int16_min), MakeScalar(int16_min));\n+  auto int32_min = std::numeric_limits<int32_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_min), MakeScalar(int32_min));\n+  auto int64_min = std::numeric_limits<int64_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_min), MakeScalar(int64_min));\n+\n+  // Max input\n+  // NOTE [EPM]: Why do these fail? The expected result is promoted to int32.\n+  // auto int8_max = std::numeric_limits<int8_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int8_max), MakeScalar(-int8_max));\n+  // auto int16_max = std::numeric_limits<int16_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int16_max), MakeScalar(-int16_max));\n\nReview comment:\n       MakeScalar decides the DataType of the scalar based on its argument type, and `decltype(-int8_max)` is 32 bit signed integer. Adding an explicit cast to 8 bit should fix it \r\n   ```suggestion\r\n     auto int8_max = std::numeric_limits<int8_t>::max();\r\n     CheckScalarUnary(\"negate\", MakeScalar(int8_max), MakeScalar(static_cast<int8_t>(-int8_max)));\r\n     auto int16_max = std::numeric_limits<int16_t>::max();\r\n     CheckScalarUnary(\"negate\", MakeScalar(int16_max), MakeScalar(static_cast<int16_t>(-int16_max)));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n\nReview comment:\n       I would say that it's not the negate kernel's responsibility to coerce -0 to 0.\r\n   For follow up work: it might be useful to have another kernel which normalizes floating point values by replacing NaNs with nulls, ensuring only positive 0s, etc\r\n   ```suggestion\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeScalarArithmeticFunction(std::string name,\n+                                                             const FunctionDoc* doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Unary(), doc);\n+  // 8-bit signed integer\n+  // ArrayKernelExec exec = ScalarUnary<Int8Type, Int8Type, Op>::Exec;\n+  // DCHECK_OK(func->AddKernel({int8()}, int8(), exec));\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeScalarArithmeticFunction(std::string name,\n\nReview comment:\n       ```suggestion\r\n   std::shared_ptr<ScalarFunction> MakeUnaryArithmeticFunction(std::string name,\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n\nReview comment:\n       Insertion of implicit casts is accomplished by overriding Function::DispatchBest. For example, to ensure that unsigned types are supported by casting to a compatible unsigned type, use:\r\n   \r\n   ```suggestion\r\n   struct UnaryArithmeticFunction : ScalarFunction {\r\n     using ScalarFunction::ScalarFunction;\r\n     Result<const Kernel*> DispatchBest(std::vector<ValueDescr>* values) const override {\r\n       RETURN_NOT_OK(CheckArity(*values));\r\n       \r\n       using arrow::compute::detail::DispatchExactImpl;\r\n       \r\n       if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\r\n       \r\n       EnsureDictionaryDecoded(values);\r\n       if (auto type = CommonNumeric({values->at(0), int8()})) {\r\n         ReplaceTypes(type, values);\r\n       }\r\n    \r\n       if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\r\n       return arrow::compute::detail::NoMatchingKernel(this, *values);\r\n     }\r\n   };\r\n   ```\r\n   \r\n   (UnaryScalarFunction will replace ScalarFunction below in `auto func = std::make_shared<ScalarFunction>(name, Arity::Unary(), doc);`)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n+  //  * State that unsigned numbers are not supported (i.e., undefined behavior)?\n+  //  * Use C++ integral conversions (e.g., Negate(-128) = -128)?\n+  //    * https://timsong-cpp.github.io/cppwp/n4659/conv.integral\n+  template <typename T, typename Arg0>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+};\n+\n+struct NegateChecked {\n+  template <typename T, typename Arg0>\n+  static enable_if_integer<T> Call(KernelContext* ctx, Arg0 arg) {\n+    static_assert(std::is_same<T, Arg0>::value, \"\");\n+    T result = 0;\n+    // NOTE [EPM]: Check this edge case of overflow. What are we trying to check here?\n+    if (ARROW_PREDICT_FALSE(SubtractWithOverflow(0, arg, &result))) {\n+      ctx->SetStatus(Status::Invalid(\"overflow\"));\n+    }\n+    return result;\n\nReview comment:\n       ```suggestion\r\n       if (arg == std::numeric_limits<T>::min()) {\r\n         // two's complement can represent a negative number which has no corresponding positive,\r\n         // for example int8_t(-128) cannot be negated since 128 is not respresentable in int8_t\r\n         ctx->SetStatus(Status::Invalid(\"overflow\"));\r\n         return 0;\r\n       }\r\n       return -arg;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n+  //  * State that unsigned numbers are not supported (i.e., undefined behavior)?\n+  //  * Use C++ integral conversions (e.g., Negate(-128) = -128)?\n+  //    * https://timsong-cpp.github.io/cppwp/n4659/conv.integral\n+  template <typename T, typename Arg0>\n+  static constexpr enable_if_integer<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n\nReview comment:\n       To avoid undefined behavior warnings in the overflow case, use bit ops instead of `-`\r\n   ```suggestion\r\n       return static_cast<T>(to_unsigned(~arg) + 1);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n+  //  * State that unsigned numbers are not supported (i.e., undefined behavior)?\n+  //  * Use C++ integral conversions (e.g., Negate(-128) = -128)?\n\nReview comment:\n       To be clear, this is overflow behavior which is a separate concern from handling unsigned integers.\r\n   \r\n   To match the behavior of the other arithmetic kernels, negation of 8 bit -128 should wrap around to -128 as you describe.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -709,5 +709,76 @@ TEST(TestBinaryArithmetic, AddWithImplicitCastsUint64EdgeCase) {\n                                      ArrayFromJSON(uint64(), \"[18446744073709551615]\")}));\n }\n \n+TEST(TestUnaryArithmeticSigned, Negate) {\n+  for (const auto& ty : internal::SignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0, 0, -0]\"), ArrayFromJSON(ty, \"[0, -0, 0]\"));\n+    // Positive inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1, 10, 100]\"), ArrayFromJSON(ty, \"[-1, -10, -100]\"));\n+    // Negative inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1, -10, -100]\"), ArrayFromJSON(ty, \"[1, 10, 100]\"));\n+  }\n+}\n+\n+TEST(TestUnaryArithmeticSignedMinMax, Negate) {\n+  // NOTE [EPM]: Can these tests be done by iterating types?\n+\n+  // Min input\n+  // Out-of-bounds after operation (C++ 2's complement wrap around, architecture dependent)\n+  auto int8_min = std::numeric_limits<int8_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int8_min), MakeScalar(int8_min));\n+  auto int16_min = std::numeric_limits<int16_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int16_min), MakeScalar(int16_min));\n+  auto int32_min = std::numeric_limits<int32_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_min), MakeScalar(int32_min));\n+  auto int64_min = std::numeric_limits<int64_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_min), MakeScalar(int64_min));\n+\n+  // Max input\n+  // NOTE [EPM]: Why do these fail? The expected result is promoted to int32.\n+  // auto int8_max = std::numeric_limits<int8_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int8_max), MakeScalar(-int8_max));\n+  // auto int16_max = std::numeric_limits<int16_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int16_max), MakeScalar(-int16_max));\n+  auto int32_max = std::numeric_limits<int32_t>::max();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_max), MakeScalar(-int32_max));\n+  auto int64_max = std::numeric_limits<int64_t>::max();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_max), MakeScalar(-int64_max));\n+}\n+\n+TEST(TestUnaryArithmeticUnsigned, Negate) {\n+  for (const auto& ty : internal::UnsignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0]\"), ArrayFromJSON(ty, \"[0]\"));\n+  }\n\nReview comment:\n       Please flesh these out\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n+template <typename Op>\n+std::shared_ptr<ScalarFunction> MakeScalarArithmeticFunction(std::string name,\n+                                                             const FunctionDoc* doc) {\n+  auto func = std::make_shared<ScalarFunction>(name, Arity::Unary(), doc);\n+  // 8-bit signed integer\n+  // ArrayKernelExec exec = ScalarUnary<Int8Type, Int8Type, Op>::Exec;\n+  // DCHECK_OK(func->AddKernel({int8()}, int8(), exec));\n+\n+  for (const auto& ty : NumericTypes()) {\n\nReview comment:\n       This will generate kernels for the unsigned integer types as well.\r\n   ```suggestion\r\n     for (const auto& ty : FlattenVectors({SignedIntTypes(), FloatingPointTypes()})) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -321,14 +375,14 @@ const FunctionDoc add_checked_doc{\n      \"doesn't fail on overflow, use function \\\"add\\\".\"),\n     {\"x\", \"y\"}};\n \n-const FunctionDoc sub_doc{\"Substract the arguments element-wise\",\n+const FunctionDoc sub_doc{\"Subtract the arguments element-wise\",\n\nReview comment:\n       :+1: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T16:38:38.092+0000",
                    "updated": "2021-04-14T16:38:38.092+0000",
                    "started": "2021-04-14T16:38:38.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582685",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613421660\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n\nReview comment:\n       There is nothing to coerce indeed, the FPU should do its job correctly.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T17:00:14.033+0000",
                    "updated": "2021-04-14T17:00:14.033+0000",
                    "started": "2021-04-14T17:00:14.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582702",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613423704\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -709,5 +709,76 @@ TEST(TestBinaryArithmetic, AddWithImplicitCastsUint64EdgeCase) {\n                                      ArrayFromJSON(uint64(), \"[18446744073709551615]\")}));\n }\n \n+TEST(TestUnaryArithmeticSigned, Negate) {\n+  for (const auto& ty : internal::SignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0, 0, -0]\"), ArrayFromJSON(ty, \"[0, -0, 0]\"));\n+    // Positive inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1, 10, 100]\"), ArrayFromJSON(ty, \"[-1, -10, -100]\"));\n+    // Negative inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1, -10, -100]\"), ArrayFromJSON(ty, \"[1, 10, 100]\"));\n+  }\n+}\n+\n+TEST(TestUnaryArithmeticSignedMinMax, Negate) {\n+  // NOTE [EPM]: Can these tests be done by iterating types?\n+\n+  // Min input\n+  // Out-of-bounds after operation (C++ 2's complement wrap around, architecture dependent)\n+  auto int8_min = std::numeric_limits<int8_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int8_min), MakeScalar(int8_min));\n+  auto int16_min = std::numeric_limits<int16_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int16_min), MakeScalar(int16_min));\n+  auto int32_min = std::numeric_limits<int32_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_min), MakeScalar(int32_min));\n+  auto int64_min = std::numeric_limits<int64_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_min), MakeScalar(int64_min));\n+\n+  // Max input\n+  // NOTE [EPM]: Why do these fail? The expected result is promoted to int32.\n+  // auto int8_max = std::numeric_limits<int8_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int8_max), MakeScalar(-int8_max));\n+  // auto int16_max = std::numeric_limits<int16_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int16_max), MakeScalar(-int16_max));\n+  auto int32_max = std::numeric_limits<int32_t>::max();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_max), MakeScalar(-int32_max));\n+  auto int64_max = std::numeric_limits<int64_t>::max();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_max), MakeScalar(-int64_max));\n+}\n+\n+TEST(TestUnaryArithmeticUnsigned, Negate) {\n+  for (const auto& ty : internal::UnsignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0]\"), ArrayFromJSON(ty, \"[0]\"));\n+  }\n+    // Positive inputs\n+    // CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1, 10, 100]\"), ArrayFromJSON(ty, \"[-1, -10, -100]\"));\n+    // Negative inputs\n+    // CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1, -10, -100]\"), ArrayFromJSON(ty, \"[1, 10, 100]\"));\n+}\n+\n+TEST(TestUnaryArithmeticFloating, Negate) {\n+  for (const auto& ty : internal::FloatingPointTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0.0, 0.0, -0.0]\"), ArrayFromJSON(ty, \"[0.0, -0.0, 0.0]\"));\n+    // Positive inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1.3, 10.80, 12748.001]\"), ArrayFromJSON(ty, \"[-1.3, -10.80, -12748.001]\"));\n+    // Negative inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1.3, -10.80, -12748.001]\"), ArrayFromJSON(ty, \"[1.3, 10.80, 12748.001]\"));\n\nReview comment:\n       Also please check `inf` and `NaN` (they should work implicitly, but who knows).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T17:03:17.963+0000",
                    "updated": "2021-04-14T17:03:17.963+0000",
                    "started": "2021-04-14T17:03:17.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582707",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613424157\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -250,17 +250,21 @@ Binary functions have the following semantics (which is sometimes called\n Arithmetic functions\n ~~~~~~~~~~~~~~~~~~~~\n \n-These functions expect two inputs of numeric type and apply a given binary\n-operation to each pair of elements gathered from the inputs.  If any of the\n-input elements in a pair is null, the corresponding output element is null.\n-Inputs will be cast to the :ref:`common numeric type <common-numeric-type>`\n+These functions expect inputs of numeric type and apply a given arithmetic\n+operation to each element(s) gathered from the input(s).  If any of the\n+input element(s) is null, the corresponding output element is null.\n+Input(s) will be cast to the :ref:`common numeric type <common-numeric-type>`\n (and dictionary decoded, if applicable) before the operation is applied.\n \n The default variant of these functions does not detect overflow (the result\n then typically wraps around).  Each function is also available in an\n overflow-checking variant, suffixed ``_checked``, which returns\n an ``Invalid`` :class:`Status` when overflow is detected.\n \n+For a unary operation, should unsigned integer types be promoted as if in a\n+binary operation with ``int8``? This would at least ensure narrowest possible\n\nReview comment:\n       Please don't add questions to the documentation. The documentation is meant to inform users, not to collect TODOs for development.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T17:04:01.868+0000",
                    "updated": "2021-04-14T17:04:01.868+0000",
                    "started": "2021-04-14T17:04:01.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582708",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/582709",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613424495\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -280,6 +284,10 @@ an ``Invalid`` :class:`Status` when overflow is detected.\n +--------------------------+------------+--------------------+---------------------+\n | subtract_checked         | Binary     | Numeric            | Numeric             |\n +--------------------------+------------+--------------------+---------------------+\n+| negate                   | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n+| negate_checked           | Unary      | Numeric            | Numeric             |\n++--------------------------+------------+--------------------+---------------------+\n\nReview comment:\n       These tables are alphabetically-ordered, it would be nice to keep them like that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-14T17:04:34.902+0000",
                    "updated": "2021-04-14T17:04:34.902+0000",
                    "started": "2021-04-14T17:04:34.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "582709",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613702980\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -709,5 +709,76 @@ TEST(TestBinaryArithmetic, AddWithImplicitCastsUint64EdgeCase) {\n                                      ArrayFromJSON(uint64(), \"[18446744073709551615]\")}));\n }\n \n+TEST(TestUnaryArithmeticSigned, Negate) {\n+  for (const auto& ty : internal::SignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0, 0, -0]\"), ArrayFromJSON(ty, \"[0, -0, 0]\"));\n+    // Positive inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1, 10, 100]\"), ArrayFromJSON(ty, \"[-1, -10, -100]\"));\n+    // Negative inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1, -10, -100]\"), ArrayFromJSON(ty, \"[1, 10, 100]\"));\n+  }\n+}\n+\n+TEST(TestUnaryArithmeticSignedMinMax, Negate) {\n+  // NOTE [EPM]: Can these tests be done by iterating types?\n+\n+  // Min input\n+  // Out-of-bounds after operation (C++ 2's complement wrap around, architecture dependent)\n+  auto int8_min = std::numeric_limits<int8_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int8_min), MakeScalar(int8_min));\n+  auto int16_min = std::numeric_limits<int16_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int16_min), MakeScalar(int16_min));\n+  auto int32_min = std::numeric_limits<int32_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_min), MakeScalar(int32_min));\n+  auto int64_min = std::numeric_limits<int64_t>::min();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_min), MakeScalar(int64_min));\n+\n+  // Max input\n+  // NOTE [EPM]: Why do these fail? The expected result is promoted to int32.\n+  // auto int8_max = std::numeric_limits<int8_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int8_max), MakeScalar(-int8_max));\n+  // auto int16_max = std::numeric_limits<int16_t>::max();\n+  // CheckScalarUnary(\"negate\", MakeScalar(int16_max), MakeScalar(-int16_max));\n+  auto int32_max = std::numeric_limits<int32_t>::max();\n+  CheckScalarUnary(\"negate\", MakeScalar(int32_max), MakeScalar(-int32_max));\n+  auto int64_max = std::numeric_limits<int64_t>::max();\n+  CheckScalarUnary(\"negate\", MakeScalar(int64_max), MakeScalar(-int64_max));\n+}\n+\n+TEST(TestUnaryArithmeticUnsigned, Negate) {\n+  for (const auto& ty : internal::UnsignedIntTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0]\"), ArrayFromJSON(ty, \"[0]\"));\n+  }\n+    // Positive inputs\n+    // CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1, 10, 100]\"), ArrayFromJSON(ty, \"[-1, -10, -100]\"));\n+    // Negative inputs\n+    // CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1, -10, -100]\"), ArrayFromJSON(ty, \"[1, 10, 100]\"));\n+}\n+\n+TEST(TestUnaryArithmeticFloating, Negate) {\n+  for (const auto& ty : internal::FloatingPointTypes()) {\n+    // No input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[]\"), ArrayFromJSON(ty, \"[]\"));\n+    // Null input\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[null]\"), ArrayFromJSON(ty, \"[null]\"));\n+    // Zeros as inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[0.0, 0.0, -0.0]\"), ArrayFromJSON(ty, \"[0.0, -0.0, 0.0]\"));\n+    // Positive inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[1.3, 10.80, 12748.001]\"), ArrayFromJSON(ty, \"[-1.3, -10.80, -12748.001]\"));\n+    // Negative inputs\n+    CheckScalarUnary(\"negate\", ArrayFromJSON(ty, \"[-1.3, -10.80, -12748.001]\"), ArrayFromJSON(ty, \"[1.3, 10.80, 12748.001]\"));\n\nReview comment:\n       Good corner cases, thanks!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T01:51:43.099+0000",
                    "updated": "2021-04-15T01:51:43.099+0000",
                    "started": "2021-04-15T01:51:43.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583084",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613703669\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n\nReview comment:\n       Not sure why we need UnaryScalarFunction and can't use ScalarFunction as is. Why the *CommonNumeric* is using *int8()*?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T01:54:12.722+0000",
                    "updated": "2021-04-15T01:54:12.722+0000",
                    "started": "2021-04-15T01:54:12.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583087",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613842949\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n+  //  * State that unsigned numbers are not supported (i.e., undefined behavior)?\n+  //  * Use C++ integral conversions (e.g., Negate(-128) = -128)?\n\nReview comment:\n       For reference, numpy preserves the dtype for unsigned integers:\r\n   \r\n   ```\r\n   In [14]: arr = np.array([0,  255], dtype=\"uint8\")\r\n   \r\n   In [15]: -arr\r\n   Out[15]: array([0, 1], dtype=uint8)\r\n   \r\n   In [16]: np.negative(arr)\r\n   Out[16]: array([0, 1], dtype=uint8)\r\n   ```\r\n   \r\n   (not sure that's very useful, though)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T08:00:09.980+0000",
                    "updated": "2021-04-15T08:00:09.980+0000",
                    "started": "2021-04-15T08:00:09.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583195",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r613843352\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n\nReview comment:\n       For reference, numpy preserves the dtype for unsigned integers:\r\n   \r\n   ```\r\n   In [14]: arr = np.array([0,  255], dtype=\"uint8\")\r\n   \r\n   In [15]: -arr\r\n   Out[15]: array([0, 1], dtype=uint8)\r\n   \r\n   In [16]: np.negative(arr)\r\n   Out[16]: array([0, 1], dtype=uint8)\r\n   ```\r\n   \r\n   (not sure that's very useful, though)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T08:00:42.960+0000",
                    "updated": "2021-04-15T08:00:42.960+0000",
                    "started": "2021-04-15T08:00:42.960+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583196",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r614139893\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n\nReview comment:\n       `ScalarFunction` does not provide implicit casts, such as from unsigned to signed integers. `UnaryScalarFunction` is provided to add implicit casts including:\r\n   \r\n   ```\r\n   uint8 -> int16\r\n   uint16 -> int32\r\n   uint32 -> int64\r\n   uint64 -> int64\r\n   dictionary<int32, float> -> float\r\n   //...\r\n   ```\r\n   \r\n   The call to CommonNumeric with int8 ensures that the output type is signed, with no more widening than necessary. Insertion of implicit casts is tested for the other arithmetic functions using [CheckDispatchBest](https://github.com/apache/arrow/blob/b4806a0eefb5b21e9f44cac1c7c9113a4c31ad01/cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc#L645)\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T14:51:03.320+0000",
                    "updated": "2021-04-15T14:51:03.320+0000",
                    "started": "2021-04-15T14:51:03.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583468",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r614468328\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -309,6 +348,21 @@ std::shared_ptr<ScalarFunction> MakeArithmeticFunctionNotNull(std::string name,\n   return func;\n }\n \n\nReview comment:\n       Got it, nice trick!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T23:53:02.087+0000",
                    "updated": "2021-04-15T23:53:02.087+0000",
                    "started": "2021-04-15T23:53:02.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583906",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/583909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016#discussion_r614470384\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -233,6 +235,43 @@ struct DivideChecked {\n   }\n };\n \n+struct Negate {\n+  template <typename T, typename Arg0>\n+  // NOTE [EPM]: Discuss on 0 vs. -0.\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg0 arg) {\n+    return -arg;\n+  }\n+\n+  // NOTE [EPM]: How to handle unsigned integers?\n+  //  * Promote to signed?\n\nReview comment:\n       After careful deliberation on this topic, I think negate should preserve data type. Also, in a mathematical context, negation is not supported for unsigned integrals, so I do not think kernels should be available for the \"checked\" kernels. For default kernels behavior is to wrap around (apply two's complement in a safe manner).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-15T23:59:47.981+0000",
                    "updated": "2021-04-15T23:59:47.981+0000",
                    "started": "2021-04-15T23:59:47.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "583909",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/585863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce closed pull request #10016:\nURL: https://github.com/apache/arrow/pull/10016\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T14:32:47.086+0000",
                    "updated": "2021-04-20T14:32:47.086+0000",
                    "started": "2021-04-20T14:32:47.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585863",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/585892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #10113:\nURL: https://github.com/apache/arrow/pull/10113\n\n\n   This pull request adds the Negate arithmetic compute kernel for integral and floating-point types.  The NegateChecked version is not implemented for unsigned integral types and overflow behavior is consistent with equivalent Add/Subtract operations.  The Negate kernels are registered as \"negate\" and \"negate_checked\".\r\n   \r\n   This PR also extends support for unary arithmetic compute kernels and tests.\r\n   \r\n   @bkietz please review\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T14:56:59.405+0000",
                    "updated": "2021-04-20T14:56:59.405+0000",
                    "started": "2021-04-20T14:56:59.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585892",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/585893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10113:\nURL: https://github.com/apache/arrow/pull/10113#issuecomment-823343200\n\n\n   https://issues.apache.org/jira/browse/ARROW-11950\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T14:57:25.134+0000",
                    "updated": "2021-04-20T14:57:25.134+0000",
                    "started": "2021-04-20T14:57:25.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585893",
                    "issueId": "13364731"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/worklog/585929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10113:\nURL: https://github.com/apache/arrow/pull/10113#issuecomment-823383209\n\n\n   Windows build is failing due to [C4146 warning](https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-2-c4146?view=msvc-160) which is triggered when an unsigned integer is negated. This negation is done purposefully with the expected behavior of modulo arithmetic. An alternative is to negate unsigned integers using two's complement explicitly (see https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/basic_decimal.cc#L375):\r\n   ```shell\r\n   unsigned int x = 10;\r\n   unsigned int x_neg = ~x + 1;\r\n   ```\r\n   \r\n   @bkietz @pitrou please advise\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-20T15:47:30.226+0000",
                    "updated": "2021-04-20T15:47:30.226+0000",
                    "started": "2021-04-20T15:47:30.225+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "585929",
                    "issueId": "13364731"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@39843241[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@212be9a0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b0133e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2599b7c1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@777324ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4cf80d77[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e34f973[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@767b72cb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18417cac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@14de4966[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d18c5ef[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@d817ad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 27 21:05:33 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-27T21:05:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11950/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-03-12T22:12:00.000+0000",
        "updated": "2021-05-12T02:11:43.000+0000",
        "timeoriginalestimate": null,
        "description": "Related to ARROW-11945. So that you can have an expression like {{-col}}. You can approximate this with doing {{0 - col}}, but I would guess it could be done more efficiently.\r\n\r\ncc [~bkietz]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add unary negative kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13364731/comment/17333551",
                    "id": "17333551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10113\n[https://github.com/apache/arrow/pull/10113]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-27T21:05:33.491+0000",
                    "updated": "2021-04-27T21:05:33.491+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0opbk:",
        "customfield_12314139": null
    }
}