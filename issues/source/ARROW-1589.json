{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103863",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863",
    "key": "ARROW-1589",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12525065",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12525065",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13133266",
                    "key": "ARROW-2023",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13133266",
                    "fields": {
                        "summary": "[C++] Test opening IPC stream reader or file reader on an empty InputStream",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
            "name": "marco.neumann.by",
            "key": "marco.neumann.by",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Marco Neumann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
            "name": "marco.neumann.by",
            "key": "marco.neumann.by",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Marco Neumann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
            "name": "marco.neumann.by",
            "key": "marco.neumann.by",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Marco Neumann",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1589/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/6",
            "id": "6",
            "description": "A new unit, integration or system test.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/issuetypes/requirement.png",
            "name": "Test",
            "subtask": false
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@69ad7f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9a45c87[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@403dd4e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6bd6e80d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@620e8ce7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7bf69b31[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5542923a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@9088e1f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f77426d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@50976da1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1105f6cb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5cb0fa82[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Feb 04 09:18:57 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-02-04T09:18:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1589/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-09-21T09:31:57.000+0000",
        "updated": "2019-06-03T12:48:50.000+0000",
        "timeoriginalestimate": null,
        "description": "The arrow lib should have fuzzing tests for certain input formats, e.g. for reading record batches from streams. Ideally, malformed input must not crash the system but must report a proper error. This could easily be implemented e.g. w/ [libfuzzer|https://llvm.org/docs/LibFuzzer.html] in combination with address sanitizer (that's already implemented by Arrow's build system).",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Fuzzing for certain input formats",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16175753",
                    "id": "16175753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Could you clarify what kinds of malformed input you are talking about? I am not sure it is a requirement for the stream reader to be able to consistently return errors on random bytes input. \n\nIn Arrow we need to distinguish between \"can't fail\" and \"can fail\" errors. The \"can't fail\" errors you detect in debug builds with DCHECK assertions. These are the kinds of errors that can only occur if the library developer (for example, an Arrow Java developer or an Arrow C++ developer) has implemented something incorrectly. Unit tests or integration tests must be written to exercise relevant code paths to catch these issues. I have found the debug assertions are especially helpful when refactoring, and they cost nothing in release builds.\n\nIn the case of reading record batches from a stream, i.e. according to the encapsulated message format described in http://arrow.apache.org/docs/ipc.html, if you are able to read the indicated number of metadata bytes from the stream, then it is assumed to be a valid Flatbuffer, and the sender has respected invariants that are detectable in an integration test -- we may check do some sanity checks of invariants such as the number of buffers in a record batch. Same goes for the message body.\n\nIf a Flatbuffer is truly malformed in some way in a way that cannot be detected with debug assertions, I am unsure whether we can protect ourselves from segfaults. The sender of a record batch stream must be assumed to be trusted (i.e. you have adequate integration tests against it to catch \"can't fail\" exceptions) to proceed with reading a stream at all.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-22T00:44:32.267+0000",
                    "updated": "2017-09-22T00:44:32.267+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16175756",
                    "id": "16175756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It would be reasonable to implement an {{UntrustedMessageReader}} that is more robust to random bytes input, like using Flatbuffers' generated verification functions (see \"Access of untrusted buffers\" https://google.github.io/flatbuffers/md__cpp_usage.html). This will slow down IPC reads but perhaps not by that much",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-22T00:48:39.678+0000",
                    "updated": "2017-09-22T00:49:36.809+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16178675",
                    "id": "16178675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Currently it is not clearly stated that the message stream is trusted, therefore the opposite will be assumed by developers. Also, the naming you are proposing will very likely mislead people, since the current naming within the library does not contain any information about trust (\"trusted\" or \"untrusted\") so users minds will likely default to \"trusted\". So the current way method should rather be prefixed w/ \"trusted\"/\"unsafe\"/\"fast\".\n\nA tiny example that already segfaults is the creation and read-out of an empty stream, which IMHO should not happen. The reason why unit testing is not sufficient is that the same kind of devs who are writing the code are also writing the unit tests and therefore won't be able to think outside their box. (that's not an offense, it's just human behavior and applies to all developers). ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-09-25T07:38:24.105+0000",
                    "updated": "2017-09-25T07:38:24.105+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16179053",
                    "id": "16179053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "> So the current way method should rather be prefixed w/ \"trusted\"/\"unsafe\"/\"fast\".\n\nThis seems a bit like overkill to me -- if this were the norm for function naming we would see these naming conventions in Avro, Thrift, Protocol Buffers, Flatbuffers, and any other protocol / file format library. I think we can improve things in the short term by making the untrustedness explicit in the doxygen documentation / code comments. For example, there is no note of trustedness in\n\nhttp://arrow.apache.org/docs/cpp/classarrow_1_1ipc_1_1_record_batch_stream_reader.html\n\nThat is easy to change. \n\n> A tiny example that already segfaults is the creation and read-out of an empty stream, which IMHO should not happen. \n\nI agree; this should not be difficult to test for. The distinction I had hoped to draw was between failures arising through normal use of the software (bugs caused by Arrow developers implementing something incorrectly) and failures caused by bugs in third party systems (e.g. passing an empty string or buffer to a function). I agree that we should test and fix the most obvious causes of segfaults that may affect users of these functions.\n\nPlease understand that this software we are discussing is primarily the work of a single volunteer developer (me). The fact that there are not more tests for the cases you're describing is definitely not due to a failure on my part to think outside the box -- if you look at my GitHub history you can see that I am operating at maximum output capacity 100% of the time. As a result of not having more development help, I have had to make tradeooffs: prioritizing more features / usability / integration with other projects vs. concerning myself with more esoteric matters (e.g. sanitizing inputs from thirdparty libraries). ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-09-25T13:56:59.946+0000",
                    "updated": "2017-09-25T13:57:54.529+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16179136",
                    "id": "16179136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "{quote}Please understand that this software we are discussing is primarily the work of a single volunteer developer (me)...{quote}\n\nI am very thankful for your work. Arrow and parquet are absolutely amazing. I just want to help out. Integrating an automatic fuzzing solution is rather trivial (I actually have the corresponding PR nearly ready, just the usage docs are missing) and can prevent so many silly bugs (produces by smart people). I do NOT expect you to fix all bugs and problems found by the fuzzer, but it can help finding missing test coverage and could (on a long term) improve the stability of the library and the security aspect.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-09-25T14:55:56.581+0000",
                    "updated": "2017-09-25T14:55:56.581+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16179491",
                    "id": "16179491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "(citing different posts)\n\n{quote}Currently it is not clearly stated that the message stream is trusted, therefore the opposite will be assumed by developers. \n{quote}\n\nArrow is an in-memory specification and library, in this context you are likely to give away access to critical things like shared memory. Libraries in this space are never built for high security but assume many things to deliver results in the fastest fashion possible. You will see the same effects when using certain file readers or network protocol in the data analytics space. Security always comes at a (performance) cost, internal analytics is normally the area where you don't like to trade in performance for it.\n\n{quote}\nUntrustedMessageReader\n{quote}\n\nThis might really be a confusing name, I would have rather expected to call it {{SafeMessageReader}}, maybe we should really look at other implementation how this can be best named.\n\n{quote}\nThe fact that there are not more tests for the cases you're describing is definitely not due to a failure on my part to think outside the box\n{quote}\n\nThis is actually a thing where I hope the fuzzing code will help all us Arrow developers: Spare us some time thinking about edge cases that we need to test. We still should think of the tests we need to write but simply running a fuzzer might already show us the simple edge cases that we forgot before we actually release the library.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-09-25T18:17:20.383+0000",
                    "updated": "2017-09-25T18:18:09.128+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16309901",
                    "id": "16309901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It'd be great to get something set up here in the next few months",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-03T16:40:26.461+0000",
                    "updated": "2018-01-03T16:40:26.461+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16315898",
                    "id": "16315898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "I'll open a PR until end of January, sorry for the delay. The code is nearly ready but I've had some problems with the compilation workflow.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-01-08T08:58:21.092+0000",
                    "updated": "2018-01-08T08:58:21.092+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16338415",
                    "id": "16338415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I started a PR to test some malformed inputs here [https://github.com/apache/arrow/pull/1503.]\u00a0I haven't gone as far as using a Flatbuffer verifier yet, though. If there are some failures you've encountered could you please describe them or in ARROW-2023? Thanks!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-01-24T23:28:06.672+0000",
                    "updated": "2018-01-24T23:28:06.672+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16343229",
                    "id": "16343229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "crepererum opened a new pull request #1529: ARROW-1589: Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529\n \n \n   See https://issues.apache.org/jira/browse/ARROW-1589\r\n   \r\n   This only implements the fuzzer for a single input path, but since it also sets up the fuzzing infrastructure, it should be easy to add more tests (feel free to propose some of them to be included in this PR as well).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-01-29T11:09:21.027+0000",
                    "updated": "2018-01-29T11:09:21.027+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16343242",
                    "id": "16343242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "So the \"empty input\" is one of them. The fuzzing process is still failing there when address sanitizer is enabled since the {{BufferReader}} produces a out of bounce read. So even though you're testing this case in PR1503, the current code on master results in undefined behavior.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marco.neumann.by",
                        "name": "marco.neumann.by",
                        "key": "marco.neumann.by",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Marco Neumann",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-01-29T11:25:22.911+0000",
                    "updated": "2018-01-29T11:25:22.911+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16349044",
                    "id": "16349044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1529: ARROW-1589: [C++] Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529#issuecomment-362356250\n \n \n   Trying to set this up and stumbled over the missing `libLLVMFuzzer.a` on OSX. Is there any better advice than building LLVM separately from source on Macs?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-01T18:22:13.327+0000",
                    "updated": "2018-02-01T18:22:13.327+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16350251",
                    "id": "16350251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "crepererum commented on issue #1529: ARROW-1589: [C++] Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529#issuecomment-362577439\n \n \n   I've reworked the source file organization as @wesm suggested. Also --- as a nice side effect --- I've added a helper to add other fuzzing tests more easily in the future (similar to the way arrow defines tests executables).\r\n   \r\n   Regarding `libLLVMFuzzer.a` (@xhochy):\r\n   I've used [this suggestion](https://github.com/kkos/oniguruma/wiki/How-to-make-libfuzzer-oniguruma-program-on-Mac-OSX) some months ago, but I doesn't work anymore since libfuzzer was integrated into `compiler-rt`. I think you can just build `compiler-rt` (you should figure out where your `llvm-config` binary is) on it's own and use `libclang_rt.fuzzer_osx.a` for that purpose (clone source from [here](https://github.com/llvm-mirror/compiler-rt) and use the guide on [this page](https://compiler-rt.llvm.org/) for compilation). Or you wait until the next LLVM release where this is hopefully integrated by default.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T12:48:09.164+0000",
                    "updated": "2018-02-02T12:48:09.164+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16350725",
                    "id": "16350725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "crepererum commented on issue #1529: ARROW-1589: [C++] Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529#issuecomment-362656820\n \n \n   Does someone know why the tests are failing here? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T17:53:29.844+0000",
                    "updated": "2018-02-02T17:53:29.844+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16350761",
                    "id": "16350761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1529: ARROW-1589: [C++] Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529#issuecomment-362663421\n \n \n   @crepererum yes, new brotli version was published on conda-forge today, so no problem in your code.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T18:18:34.279+0000",
                    "updated": "2018-02-02T18:18:34.279+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16350797",
                    "id": "16350797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1529: ARROW-1589: [C++] Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529#issuecomment-362671476\n \n \n   I will take this for a drive locally and then merge. Thanks @crepererum!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-02T18:48:48.110+0000",
                    "updated": "2018-02-02T18:48:48.110+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16351702",
                    "id": "16351702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1529: ARROW-1589: [C++] Fuzzing for certain input formats\nURL: https://github.com/apache/arrow/pull/1529\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 0558cba49..08586a64d 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -147,6 +147,10 @@ if(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n     \"Build the Arrow CPython extensions\"\n     OFF)\n \n+  option(ARROW_FUZZING\n+    \"Build Arrow Fuzzing executables\"\n+    OFF)\n+\n   option(ARROW_SSE3\n     \"Build Arrow with SSE3\"\n     ON)\n@@ -249,6 +253,10 @@ if(NOT ARROW_BUILD_BENCHMARKS)\n   set(NO_BENCHMARKS 1)\n endif()\n \n+if (NOT ARROW_FUZZING)\n+  set(NO_FUZZING 1)\n+endif()\n+\n if(ARROW_HDFS)\n   set(ARROW_BOOST_HEADER_ONLY 0)\n else()\n@@ -300,6 +308,9 @@ if (\"${COMPILER_FAMILY}\" STREQUAL \"clang\")\n endif()\n \n # ASAN / TSAN / UBSAN\n+if(ARROW_FUZZING)\n+    set(ARROW_USE_COVERAGE ON)\n+endif()\n include(san-config)\n \n # For any C code, use the same flags.\ndiff --git a/cpp/README.md b/cpp/README.md\nindex 52169974d..1daf86381 100644\n--- a/cpp/README.md\n+++ b/cpp/README.md\n@@ -99,6 +99,40 @@ and benchmarks or `make runbenchmark` to run only the benchmark tests.\n \n Benchmark logs will be placed in the build directory under `build/benchmark-logs`.\n \n+## Building/Running fuzzers\n+\n+Fuzzers can help finding unhandled exceptions and problems with untrusted input that\n+may lead to crashes, security issues and undefined behavior. They do this by\n+generating random input data and observing the behavior of the executed code. To build\n+the fuzzer code, LLVM is required (GCC-based compilers won't work). You can build them\n+using the following code:\n+\n+    cmake -DARROW_FUZZING=ON -DARROW_USE_ASAN=ON ..\n+\n+`ARROW_FUZZING` will enable building of fuzzer executables as well as enable the\n+addition of coverage helpers via `ARROW_USE_COVERAGE`, so that the fuzzer can observe\n+the program execution.\n+\n+It is also wise to enable some sanitizers like `ARROW_USE_ASAN` (see above), which\n+activates the address sanitizer. This way, we ensure that bad memory operations\n+provoked by the fuzzer will be found early. You may also enable other sanitizers as\n+well. Just keep in mind that some of them do not work together and some may result\n+in very long execution times, which will slow down the fuzzing procedure.\n+\n+Now you can start one of the fuzzer, e.g.:\n+\n+    ./debug/debug/ipc-fuzzing-test\n+\n+This will try to find a malformed input that crashes the payload and will show the\n+stack trace as well as the input data. After a problem was found this way, it should\n+be reported and fixed. Usually, the fuzzing process cannot be continued until the\n+fix is applied, since the fuzzer usually converts to the problem again.\n+\n+There are some problems that may occur during the compilation process:\n+\n+- libfuzzer was not distributed with your LLVM: `ld: file not found: .../libLLVMFuzzer.a`\n+- your LLVM is too old: `clang: error: unsupported argument 'fuzzer' to option 'fsanitize='`\n+\n ### Third-party environment variables\n \n To set up your own specific build toolchain, here are the relevant environment\ndiff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake\nindex 207bb9aed..f8c0f5ed2 100644\n--- a/cpp/cmake_modules/BuildUtils.cmake\n+++ b/cpp/cmake_modules/BuildUtils.cmake\n@@ -347,3 +347,34 @@ function(ARROW_TEST_LINK_LIBRARIES REL_TEST_NAME)\n \n   target_link_libraries(${TEST_NAME} ${ARGN})\n endfunction()\n+\n+\n+############################################################\n+# Fuzzing\n+############################################################\n+# Add new fuzzing test executable.\n+#\n+# The single source file must define a function:\n+#   extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n+#\n+# No main function must be present within the source file!\n+#\n+function(ADD_ARROW_FUZZING REL_FUZZING_NAME)\n+  if(NO_FUZZING)\n+    return()\n+  endif()\n+\n+  if (ARROW_BUILD_STATIC)\n+    set(FUZZ_LINK_LIBS arrow_static)\n+  else()\n+    set(FUZZ_LINK_LIBS arrow_shared)\n+  endif()\n+\n+  add_executable(${REL_FUZZING_NAME} \"${REL_FUZZING_NAME}.cc\")\n+  target_link_libraries(${REL_FUZZING_NAME} ${FUZZ_LINK_LIBS})\n+  target_compile_options(${REL_FUZZING_NAME}\n+      PRIVATE \"-fsanitize=fuzzer\")\n+  set_target_properties(${REL_FUZZING_NAME}\n+      PROPERTIES\n+      LINK_FLAGS \"-fsanitize=fuzzer\")\n+endfunction()\ndiff --git a/cpp/cmake_modules/san-config.cmake b/cpp/cmake_modules/san-config.cmake\nindex 1917eabe8..f2de9cf1f 100644\n--- a/cpp/cmake_modules/san-config.cmake\n+++ b/cpp/cmake_modules/san-config.cmake\n@@ -87,6 +87,16 @@ if (${ARROW_USE_TSAN})\n endif()\n \n \n+if (${ARROW_USE_COVERAGE})\n+  if(NOT (\"${COMPILER_FAMILY}\" STREQUAL \"clang\"))\n+    message(SEND_ERROR \"You can only enable coverage with clang\")\n+  endif()\n+  add_definitions(\"-fsanitize-coverage=trace-pc-guard\")\n+\n+  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize-coverage=trace-pc-guard\")\n+endif()\n+\n+\n if (\"${ARROW_USE_UBSAN}\" OR \"${ARROW_USE_ASAN}\" OR \"${ARROW_USE_TSAN}\")\n   # GCC 4.8 and 4.9 (latest as of this writing) don't allow you to specify a\n   # sanitizer blacklist.\ndiff --git a/cpp/src/arrow/ipc/CMakeLists.txt b/cpp/src/arrow/ipc/CMakeLists.txt\nindex a24349fd6..2976a15ce 100644\n--- a/cpp/src/arrow/ipc/CMakeLists.txt\n+++ b/cpp/src/arrow/ipc/CMakeLists.txt\n@@ -117,3 +117,5 @@ if (ARROW_BUILD_UTILITIES)\n endif()\n \n ADD_ARROW_BENCHMARK(ipc-read-write-benchmark)\n+\n+ADD_ARROW_FUZZING(ipc-fuzzing-test)\ndiff --git a/cpp/src/arrow/ipc/ipc-fuzzing-test.cc b/cpp/src/arrow/ipc/ipc-fuzzing-test.cc\nnew file mode 100644\nindex 000000000..83fe94b13\n--- /dev/null\n+++ b/cpp/src/arrow/ipc/ipc-fuzzing-test.cc\n@@ -0,0 +1,44 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <memory>\n+\n+#include <arrow/buffer.h>\n+#include <arrow/io/memory.h>\n+#include <arrow/ipc/reader.h>\n+\n+extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\n+  arrow::Status status;\n+\n+  auto buffer = std::make_shared<arrow::Buffer>(data, size);\n+  arrow::io::BufferReader buffer_reader(buffer);\n+\n+  std::shared_ptr<arrow::ipc::RecordBatchReader> batch_reader;\n+  status = arrow::ipc::RecordBatchStreamReader::Open(&buffer_reader, &batch_reader);\n+  if (!status.ok()) {\n+    return 0;\n+  }\n+\n+  std::shared_ptr<arrow::RecordBatch> batch;\n+  do {\n+    status = batch_reader->ReadNext(&batch);\n+    if (!status.ok()) {\n+      return 0;\n+    }\n+  } while (batch);\n+  return 0;\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-04T09:18:57.157+0000",
                    "updated": "2018-02-04T09:18:57.157+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103863/comment/16351703",
                    "id": "16351703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1529\n[https://github.com/apache/arrow/pull/1529]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-02-04T09:18:57.593+0000",
                    "updated": "2018-02-04T09:18:57.593+0000"
                }
            ],
            "maxResults": 18,
            "total": 18,
            "startAt": 0
        },
        "customfield_12311820": "0|i3kcc7:",
        "customfield_12314139": null
    }
}