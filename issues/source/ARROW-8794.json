{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13304828",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828",
    "key": "ARROW-8794",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
            "name": "emkornfield@gmail.com",
            "key": "emkornfield@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8794/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/432980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T04:34:57.400+0000",
                    "updated": "2020-05-14T04:34:57.400+0000",
                    "started": "2020-05-14T04:34:57.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432980",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/432982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#issuecomment-628383810\n\n\n   https://issues.apache.org/jira/browse/ARROW-8794\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T04:46:49.864+0000",
                    "updated": "2020-05-14T04:46:49.864+0000",
                    "started": "2020-05-14T04:46:49.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "432982",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/433123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r425110880\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -118,13 +134,22 @@ std::shared_ptr<::arrow::Table> TableFromVector(\n \n template <>\n std::shared_ptr<::arrow::Table> TableFromVector<BooleanType>(const std::vector<bool>& vec,\n-                                                             bool nullable) {\n+                                                             bool nullable,\n+                                                             int null_percentage) {\n   BooleanBuilder builder;\n   if (nullable) {\n     std::vector<bool> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(),\n-                  [&n] { return (n++ % 2) != 0; });\n+    if (null_percentage == -1) {\n\nReview comment:\n       Perhaps nulls generation can be factored out?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,29 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n     std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    if (null_percentage == -1) {\n\nReview comment:\n       Should this be `kAlternatingOrNa`?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n\nReview comment:\n       Can you add a comment why we're varying `first_value_percentage`? (trigger RLE perhaps?)\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/100})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/5, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/30, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/35, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/45, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/1})\n+    ->Args({/*null_percentage=*/75, /*first_value_percentage=*/1})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType)\n+    ->Args({kAlternatingOrNa, 0})\n+    ->Args({1, 20});\n\nReview comment:\n       Why `1`?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,29 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int null_percentage = kAlternatingOrNa) {\n\nReview comment:\n       `int64_t` above\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/100})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/5, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/30, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/35, /*first_value_percentage=*/25})\n\nReview comment:\n       Do we need such a granularity in `null_percentage` values?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T12:56:12.222+0000",
                    "updated": "2020-05-14T12:56:12.222+0000",
                    "started": "2020-05-14T12:56:12.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433123",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/433206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r425268221\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/100})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/5, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/30, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/35, /*first_value_percentage=*/25})\n\nReview comment:\n       Maybe not permanently, but this uncovered an interesting pattern for https://github.com/apache/arrow/pull/7143 \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-14T16:24:45.393+0000",
                    "updated": "2020-05-14T16:24:45.393+0000",
                    "started": "2020-05-14T16:24:45.393+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "433206",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426119989\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,29 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int null_percentage = kAlternatingOrNa) {\n\nReview comment:\n       done.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n\nReview comment:\n       yep that sit added a comment at the very top.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,29 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n     std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    if (null_percentage == -1) {\n\nReview comment:\n       yes\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -118,13 +134,22 @@ std::shared_ptr<::arrow::Table> TableFromVector(\n \n template <>\n std::shared_ptr<::arrow::Table> TableFromVector<BooleanType>(const std::vector<bool>& vec,\n-                                                             bool nullable) {\n+                                                             bool nullable,\n+                                                             int null_percentage) {\n   BooleanBuilder builder;\n   if (nullable) {\n     std::vector<bool> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(),\n-                  [&n] { return (n++ % 2) != 0; });\n+    if (null_percentage == -1) {\n\nReview comment:\n       done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-16T06:31:55.483+0000",
                    "updated": "2020-05-16T06:31:55.483+0000",
                    "started": "2020-05-16T06:31:55.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434027",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426124722\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/100})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/5, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/30, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/35, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/45, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/1})\n+    ->Args({/*null_percentage=*/75, /*first_value_percentage=*/1})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType)\n+    ->Args({kAlternatingOrNa, 0})\n+    ->Args({1, 20});\n\nReview comment:\n       mistake.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-16T06:32:08.666+0000",
                    "updated": "2020-05-16T06:32:08.666+0000",
                    "started": "2020-05-16T06:32:08.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434028",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426124767\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -187,17 +219,56 @@ static void BM_ReadColumn(::benchmark::State& state) {\n   SetBytesProcessed<nullable, ParquetType>(state);\n }\n \n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, DoubleType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, DoubleType);\n-\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, false, BooleanType);\n-BENCHMARK_TEMPLATE2(BM_ReadColumn, true, BooleanType);\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int32Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/50, /*first_value_percentage=*/100})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/99, /*first_value_percentage=*/100});\n+\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, false, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 1})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 10})\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, 50});\n+BENCHMARK_TEMPLATE2(BM_ReadColumn, true, Int64Type)\n+    ->Args({/*null_percentage=*/kAlternatingOrNa, /*first_value_percentage=*/0})\n+    ->Args({/*null_percentage=*/1, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/5, /*first_value_percentage=*/10})\n+    ->Args({/*null_percentage=*/10, /*first_value_percentage=*/50})\n+    ->Args({/*null_percentage=*/25, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/30, /*first_value_percentage=*/25})\n+    ->Args({/*null_percentage=*/35, /*first_value_percentage=*/25})\n\nReview comment:\n       I adjusted these a little bit to have a little bit more consistency and bias towards runs.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-16T06:32:52.387+0000",
                    "updated": "2020-05-16T06:32:52.387+0000",
                    "started": "2020-05-16T06:32:52.387+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434029",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426591555\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n-    std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    // Note true values select index 1 of sample_values\n+    auto valid_bytes = RandomVector<uint8_t>(/*true_percengate=*/null_percentage,\n+                                             BENCHMARK_SIZE, /*sample_values=*/{1, 0});\n\nReview comment:\n       Does this mean the valid bitmap only contains bytes `0x00` and `0x01`?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n\nReview comment:\n       Can't this be factored out in `testing/random.h`?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n\nReview comment:\n       `ARROW_CHECK_EQ`. There's an error in your statement. Also, `DCHECK`s are compiled out in non-debug mode, which is usually the case for benchmarks...\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-18T12:38:03.482+0000",
                    "updated": "2020-05-18T12:38:03.482+0000",
                    "started": "2020-05-18T12:38:03.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434382",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426958606\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n\nReview comment:\n       It'll need to depend on libarrow_testing.so, not sure if this is a problem.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n-    std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    // Note true values select index 1 of sample_values\n+    auto valid_bytes = RandomVector<uint8_t>(/*true_percengate=*/null_percentage,\n+                                             BENCHMARK_SIZE, /*sample_values=*/{1, 0});\n\nReview comment:\n       Good catch, the bitmap only has `0b00000001` and `0b00000000` as possible words, or more-or-less one bit every 8th position.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T00:21:25.495+0000",
                    "updated": "2020-05-19T00:21:25.495+0000",
                    "started": "2020-05-19T00:21:25.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434695",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#issuecomment-630510263\n\n\n   I just validated and the reader opening doesn't show up in profile much. On a more interesting note, `BM_ReadColumn<true,Int32Type>` reflects a lot the profile I get with real-life dataset (nyc taxi dataset). If this can guide you in further performance validation.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T00:49:29.164+0000",
                    "updated": "2020-05-19T00:49:29.164+0000",
                    "started": "2020-05-19T00:49:29.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434707",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426996139\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n-    std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    // Note true values select index 1 of sample_values\n+    auto valid_bytes = RandomVector<uint8_t>(/*true_percengate=*/null_percentage,\n+                                             BENCHMARK_SIZE, /*sample_values=*/{1, 0});\n\nReview comment:\n       I do not think that is [true](https://arrow.apache.org/docs/cpp/api/builder.html#_CPPv4N5arrow14NumericBuilder12AppendValuesEPK10value_type7int64_tPK7uint8_t)  it is a confusing contract (maybe taking bool* would be better?) but I read this as converting 1 and 0 to corresponding bits (Under the covers if I traced correctly this calls [`ArrayBuilder::UnsafeAppendToBitmap`](https://github.com/apache/arrow/blob/2849b643883793347ab87e0770aba4ccbda34c90/cpp/src/arrow/array/builder_primitive.cc#L96) which ultimately calls [GenerateBitsUnrolled](https://github.com/apache/arrow/blob/b4bd0d869dfa398dcaa65a1f4f6f13015d7fe8c4/cpp/src/arrow/buffer_builder.h#L305) which [coverts bytes to bits](https://github.com/apache/arrow/blob/bf722a01eebb42e5d49450dd6695469bac99ffcd/cpp/src/arrow/util/bit_util.h#L687) )\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T02:36:18.074+0000",
                    "updated": "2020-05-19T02:36:18.074+0000",
                    "started": "2020-05-19T02:36:18.074+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434761",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426996411\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n\nReview comment:\n       If it is OK, I'd prefer to save this refactoring for a later point in time, in case more changes are need to this.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T02:37:14.099+0000",
                    "updated": "2020-05-19T02:37:14.099+0000",
                    "started": "2020-05-19T02:37:14.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434763",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r426997534\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n\nReview comment:\n       thanks, good point.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T02:41:29.910+0000",
                    "updated": "2020-05-19T02:41:29.910+0000",
                    "started": "2020-05-19T02:41:29.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434766",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#issuecomment-630568952\n\n\n   > BM_ReadColumn<true,Int32Type> reflects a lot the profile I get with real-life dataset (nyc taxi dataset). If this can guide you in further performance validation.\r\n   \r\n   I don't think I'm going to be doing much more performance related work past https://github.com/apache/arrow/pull/7143 (which if you don't mind trying out it would be good to see if that improves performance on real world data).  The last potential easy performance win is pushing the all null/no nulls remaining checks directly into the loops (for small batch sizes I wouldn't expect a huge difference there).  My main goal is to get full nested functionality working, and I got a little distracted   \r\n   \r\n   \r\n   \r\n   Other changes will probably require a bigger refactoring then I want to take on right now.\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T04:17:32.653+0000",
                    "updated": "2020-05-19T04:17:32.653+0000",
                    "started": "2020-05-19T04:17:32.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434785",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r427100722\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    DCHECK(null_percentage = kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n-    std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    // Note true values select index 1 of sample_values\n+    auto valid_bytes = RandomVector<uint8_t>(/*true_percengate=*/null_percentage,\n+                                             BENCHMARK_SIZE, /*sample_values=*/{1, 0});\n\nReview comment:\n       Ah, I see. Pity.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T07:54:42.094+0000",
                    "updated": "2020-05-19T07:54:42.094+0000",
                    "started": "2020-05-19T07:54:42.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434823",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/434824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r427100999\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    ARROW_CHECK_EQ(null_percentage, kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n-    std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    // Note true values select index 1 of sample_values\n+    auto valid_bytes = RandomVector<uint8_t>(/*true_percengate=*/null_percentage,\n\nReview comment:\n       \"true_percentage\"\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T07:55:05.450+0000",
                    "updated": "2020-05-19T07:55:05.450+0000",
                    "started": "2020-05-19T07:55:05.450+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "434824",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/435067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#discussion_r427457149\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_writer_benchmark.cc\n##########\n@@ -95,15 +97,37 @@ void SetBytesProcessed(::benchmark::State& state) {\n   state.SetBytesProcessed(bytes_processed);\n }\n \n+constexpr int64_t kAlternatingOrNa = -1;\n+\n+template <typename T>\n+std::vector<T> RandomVector(int64_t true_percentage, int64_t vector_size,\n+                            const std::array<T, 2>& sample_values) {\n+  std::vector<T> values(BENCHMARK_SIZE, {});\n+  if (true_percentage == kAlternatingOrNa) {\n+    int n = {0};\n+    std::generate(values.begin(), values.end(), [&n] { return n++ % 2; });\n+  } else {\n+    std::default_random_engine rng(500);\n+    double true_probability = static_cast<double>(true_percentage) / 100.0;\n+    std::bernoulli_distribution dist(true_probability);\n+    std::generate(values.begin(), values.end(), [&] { return sample_values[dist(rng)]; });\n+  }\n+  return values;\n+}\n+\n template <typename ParquetType>\n std::shared_ptr<::arrow::Table> TableFromVector(\n-    const std::vector<typename ParquetType::c_type>& vec, bool nullable) {\n+    const std::vector<typename ParquetType::c_type>& vec, bool nullable,\n+    int64_t null_percentage = kAlternatingOrNa) {\n+  if (!nullable) {\n+    ARROW_CHECK_EQ(null_percentage, kAlternatingOrNa);\n+  }\n   std::shared_ptr<::arrow::DataType> type = std::make_shared<ArrowType<ParquetType>>();\n   NumericBuilder<ArrowType<ParquetType>> builder;\n   if (nullable) {\n-    std::vector<uint8_t> valid_bytes(BENCHMARK_SIZE, 0);\n-    int n = {0};\n-    std::generate(valid_bytes.begin(), valid_bytes.end(), [&n] { return n++ % 2; });\n+    // Note true values select index 1 of sample_values\n+    auto valid_bytes = RandomVector<uint8_t>(/*true_percengate=*/null_percentage,\n\nReview comment:\n       fixed\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-19T16:59:57.268+0000",
                    "updated": "2020-05-19T16:59:57.268+0000",
                    "started": "2020-05-19T16:59:57.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435067",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/435445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175#issuecomment-631450695\n\n\n   Rebased.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-20T12:45:53.319+0000",
                    "updated": "2020-05-20T12:45:53.319+0000",
                    "started": "2020-05-20T12:45:53.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435445",
                    "issueId": "13304828"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/worklog/435461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #7175:\nURL: https://github.com/apache/arrow/pull/7175\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-05-20T13:47:09.896+0000",
                    "updated": "2020-05-20T13:47:09.896+0000",
                    "started": "2020-05-20T13:47:09.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "435461",
                    "issueId": "13304828"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1ebc56a0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4beb396f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61458223[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7377ef25[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7910f1af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@62486bb8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f51a948[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@63936540[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d706d14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3c44c0a9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1efd2580[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@663cfa7a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed May 20 13:47:10 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-05-20T13:47:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8794/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-05-14T04:22:40.000+0000",
        "updated": "2020-05-20T13:47:10.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Expand benchmark coverage for arrow from parquet reading",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13304828/comment/17112219",
                    "id": "17112219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 7175\n[https://github.com/apache/arrow/pull/7175]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-05-20T13:47:10.626+0000",
                    "updated": "2020-05-20T13:47:10.626+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0epx4:",
        "customfield_12314139": null
    }
}