{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13242002",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002",
    "key": "ARROW-5760",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589229",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589229",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12586208",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12586208",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13299169",
                    "key": "ARROW-8500",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13299169",
                    "fields": {
                        "summary": "[C++] Use selection vectors in Filter implementation for record batches, tables",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12590520",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12590520",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13309775",
                    "key": "ARROW-9045",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13309775",
                    "fields": {
                        "summary": "[C++] Improve and expand Take/Filter benchmarks",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12590868",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12590868",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13310273",
                    "key": "ARROW-9075",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13310273",
                    "fields": {
                        "summary": "[C++] Optimize Filter implementation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5760/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 37,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/442845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641025248\n\n\n   https://issues.apache.org/jira/browse/ARROW-5760\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:04:24.870+0000",
                    "updated": "2020-06-09T16:04:24.870+0000",
                    "started": "2020-06-09T16:04:24.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442845",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/442862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#discussion_r437195110\n\n\n\n##########\nFile path: cpp/src/arrow/compute/benchmark_util.h\n##########\n@@ -77,12 +77,18 @@ struct RegressionArgs {\n   const int64_t size;\n \n   // proportion of nulls in generated arrays\n-  const double null_proportion;\n+  double null_proportion;\n \n   explicit RegressionArgs(benchmark::State& state)\n       : size(state.range(0)),\n-        null_proportion(std::min(1., 1. / static_cast<double>(state.range(1)))),\n-        state_(state) {}\n+        null_proportion(),\n+        state_(state) {\n+    if (state.range(1) == 0) {\n+      this->null_proportion = 0.0;\n+    } else {\n+      this->null_proportion = std::min(1., 1. / static_cast<double>(state.range(1)));\n+    }\n+  }\n \n\nReview comment:\n       Can the new zero null percent added to pre-built list of BenchmarkSetArgsWithSizes also?\r\n     void BenchmarkSetArgsWithSizes(benchmark::internal::Benchmark* bench,\r\n        ...\r\n        for (auto nulls : std::vector<ArgsType>({10000, 1000, 100, 50, 10, 1})), add a 0?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:06:28.735+0000",
                    "updated": "2020-06-09T16:06:28.735+0000",
                    "started": "2020-06-09T16:06:28.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442862",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/442946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382\n\n\n   I was going to work in Filter in this PR but it got to be too much to review so I'll tackle that in a separate PR. \r\n   \r\n   Summary of what's in this PR:\r\n   \r\n   * Uses BitBlockCounter to speed up processing of mostly-not-null indices vectors\r\n   * Performance of primitive takes improved ~2-3x across the board. Builder classes are no longer used for primitive types.\r\n   * Size of vector_take.cc.o reduced from 5.9 MB to 468 KB on -O3 build with clang-8. Compilation time is correspondingly reduced. The refactor for the new kernels framework I think has increased the code size in this module beyond what was in 0.17.x.\r\n   * Kernels for primitive types of same size are reused\r\n   * Signed/unsigned indices are processed using unsigned integer code paths after they've been boundschecked (so we know that the signed ints have no negative values)\r\n   * Adds new kernel input type checking rules so that the number of registered take kernels has gone from over 300 to only 11. This means faster dispatching, too. \r\n   * Does vectorized boundschecking\r\n   * Take no longer uses kernels/vector_selection_internal.h, but it's still used by Filter. I plan to delete it after completing the the Filter implementation\r\n   * Fixes to the prior benchmarking PR\r\n   \r\n   Note: support for doing Take with unions has been temporarily disabled. Since there is so little code in the codebase that deals with unions at the moment I felt it would be better to address this in follow up work. Here are the currently available kernels:\r\n   \r\n   ```\r\n   [VectorKernel<(array[primitive], array[integer]) -> computed>,\r\n    VectorKernel<(array[binary-like], array[integer]) -> computed>,\r\n    VectorKernel<(array[large-binary-like], array[integer]) -> computed>,\r\n    VectorKernel<(array[null], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::DICTIONARY], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::EXTENSION], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::LIST], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::LARGE_LIST], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::FIXED_SIZE_LIST], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::STRUCT], array[integer]) -> computed>,\r\n    VectorKernel<(array[Type::MAP], array[integer]) -> computed>]\r\n   ```\r\n   \r\n   I'd like to write some more unit tests to probe some scenarios that aren't visited by the current tests but wanted to get this up for review. There's some code duplication that can be improved so I think things can be improved in follow up PRs using the benchmarks and code size metrics as a strict guide for making changes. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:15:00.196+0000",
                    "updated": "2020-06-09T16:15:00.196+0000",
                    "started": "2020-06-09T16:15:00.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "442946",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641027598\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:21:56.534+0000",
                    "updated": "2020-06-09T16:21:56.534+0000",
                    "started": "2020-06-09T16:21:56.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443012",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#discussion_r437133332\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_take.cc\n##########\n@@ -38,46 +52,758 @@ std::unique_ptr<KernelState> InitTake(KernelContext*, const KernelInitArgs& args\n   return std::unique_ptr<KernelState>(new TakeState{*take_options});\n }\n \n-template <typename ValueType, typename IndexType>\n-struct TakeFunctor {\n-  using ValueArrayType = typename TypeTraits<ValueType>::ArrayType;\n-  using IndexArrayType = typename TypeTraits<IndexType>::ArrayType;\n-  using IS = ArrayIndexSequence<IndexType>;\n+namespace {\n+\n+template <typename IndexCType, bool IsSigned = std::is_signed<IndexCType>::value>\n+Status BoundscheckImpl(const ArrayData& indices, IndexCType upper_limit) {\n+  // For unsigned integers, if the values array is larger than the maximum\n+  // index value (e.g. especially for UINT8 / UINT16), then there is no need to\n+  // boundscheck.\n+  if (!IsSigned && upper_limit >= std::numeric_limits<IndexCType>::max()) {\n+    return Status::OK();\n+  }\n \n-  static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    ValueArrayType values(batch[0].array());\n-    IndexArrayType indices(batch[1].array());\n-    std::shared_ptr<Array> result;\n-    KERNEL_RETURN_IF_ERROR(ctx, Select(ctx, values, IS(indices), &result));\n-    out->value = result->data();\n+  const IndexCType* indices_data = indices.GetValues<IndexCType>(1);\n+  const uint8_t* bitmap = nullptr;\n+  if (indices.buffers[0]) {\n+    bitmap = indices.buffers[0]->data();\n   }\n+  OptionalBitBlockCounter indices_bit_counter(bitmap, indices.offset, indices.length);\n+  int64_t position = 0;\n+  while (position < indices.length) {\n+    BitBlockCount block = indices_bit_counter.NextBlock();\n+    bool block_out_of_bounds = false;\n+    if (block.popcount == block.length) {\n+      // Fast path: branchless\n+      for (int64_t i = 0; i < block.length; ++i) {\n+        block_out_of_bounds |=\n+            ((IsSigned && indices_data[i] < 0) || indices_data[i] >= upper_limit);\n+      }\n+    } else if (block.popcount > 0) {\n+      // Indices have nulls, must only boundscheck non-null values\n+      for (int64_t i = 0; i < block.length; ++i) {\n+        if (BitUtil::GetBit(bitmap, indices.offset + position + i)) {\n+          block_out_of_bounds |=\n+              ((IsSigned && indices_data[i] < 0) || indices_data[i] >= upper_limit);\n+        }\n+      }\n+    }\n+    if (block_out_of_bounds) {\n+      // TODO: Find the out of bounds index in the block\n+      return Status::IndexError(\"Take indices out of bounds\");\n+    }\n+    indices_data += block.length;\n+    position += block.length;\n+  }\n+  return Status::OK();\n+}\n+\n+/// \\brief Branchless boundschecking of the indices. Processes batches of\n+/// indices at a time and shortcircuits when encountering an out-of-bounds\n+/// index in a batch\n+Status Boundscheck(const ArrayData& indices, int64_t upper_limit) {\n+  switch (indices.type->id()) {\n+    case Type::INT8:\n+      return BoundscheckImpl<int8_t>(indices, upper_limit);\n+    case Type::INT16:\n+      return BoundscheckImpl<int16_t>(indices, upper_limit);\n+    case Type::INT32:\n+      return BoundscheckImpl<int32_t>(indices, upper_limit);\n+    case Type::INT64:\n+      return BoundscheckImpl<int64_t>(indices, upper_limit);\n+    case Type::UINT8:\n+      return BoundscheckImpl<uint8_t>(indices, upper_limit);\n+    case Type::UINT16:\n+      return BoundscheckImpl<uint16_t>(indices, upper_limit);\n+    case Type::UINT32:\n+      return BoundscheckImpl<uint32_t>(indices, upper_limit);\n+    case Type::UINT64:\n+      return BoundscheckImpl<uint64_t>(indices, upper_limit);\n+    default:\n+      return Status::Invalid(\"Invalid index type for boundschecking\");\n+  }\n+}\n+\n+}  // namespace\n+\n+// ----------------------------------------------------------------------\n+// Implement optimized take for primitive types from boolean to 1/2/4/8-byte\n+// C-type based types. Use common implementation for every byte width and only\n+// generate code for unsigned integer indices, since after boundschecking to\n+// check for negative numbers the indices we can safely reinterpret_cast signed\n+// integers as unsigned.\n+\n+struct PrimitiveTakeArgs {\n+  const uint8_t* values;\n+  const uint8_t* values_bitmap = nullptr;\n+  int values_bit_width;\n+  int64_t values_length;\n+  int64_t values_offset;\n+  int64_t values_null_count;\n+  const uint8_t* indices;\n+  const uint8_t* indices_bitmap = nullptr;\n+  int indices_bit_width;\n+  int64_t indices_length;\n+  int64_t indices_offset;\n+  int64_t indices_null_count;\n };\n \n-struct TakeKernelVisitor {\n-  TakeKernelVisitor(const DataType& value_type, const DataType& index_type)\n-      : value_type(value_type), index_type(index_type) {}\n+// Reduce code size by dealing with the unboxing of the kernel inputs once\n+// rather than duplicating compiled code to do all these in each kernel.\n+PrimitiveTakeArgs GetPrimitiveTakeArgs(const ExecBatch& batch) {\n+  PrimitiveTakeArgs args;\n \n-  template <typename Type>\n-  Status Visit(const Type&) {\n-    this->result = codegen::Integer<TakeFunctor, Type>(index_type.id());\n-    return Status::OK();\n+  const ArrayData& arg0 = *batch[0].array();\n+  const ArrayData& arg1 = *batch[1].array();\n+\n+  // Values\n+  args.values_bit_width = static_cast<const FixedWidthType&>(*arg0.type).bit_width();\n+  args.values = arg0.buffers[1]->data();\n+  if (args.values_bit_width > 1) {\n+    args.values += arg0.offset * args.values_bit_width / 8;\n+  }\n+  args.values_length = arg0.length;\n+  args.values_offset = arg0.offset;\n+  args.values_null_count = arg0.GetNullCount();\n+  if (arg0.buffers[0]) {\n+    args.values_bitmap = arg0.buffers[0]->data();\n   }\n \n-  Status Create() { return VisitTypeInline(value_type, this); }\n+  // Indices\n+  args.indices_bit_width = static_cast<const FixedWidthType&>(*arg1.type).bit_width();\n+  args.indices = arg1.buffers[1]->data() + arg1.offset * args.indices_bit_width / 8;\n+  args.indices_length = arg1.length;\n+  args.indices_offset = arg1.offset;\n+  args.indices_null_count = arg1.GetNullCount();\n+  if (arg1.buffers[0]) {\n+    args.indices_bitmap = arg1.buffers[0]->data();\n+  }\n+\n+  return args;\n+}\n+\n+/// \\brief The Take implementation for primitive (fixed-width) types does not\n+/// use the logical Arrow type but rather then physical C type. This way we\n+/// only generate one take function for each byte width.\n+///\n+/// This function assumes that the indices have been boundschecked.\n+template <typename IndexCType, typename ValueCType>\n+struct PrimitiveTakeImpl {\n+  static void Exec(const PrimitiveTakeArgs& args, Datum* out_datum) {\n+    auto values = reinterpret_cast<const ValueCType*>(args.values);\n+    auto values_bitmap = args.values_bitmap;\n+    auto values_offset = args.values_offset;\n+\n+    auto indices = reinterpret_cast<const IndexCType*>(args.indices);\n+    auto indices_bitmap = args.indices_bitmap;\n+    auto indices_offset = args.indices_offset;\n \n-  const DataType& value_type;\n-  const DataType& index_type;\n-  ArrayKernelExec result;\n+    ArrayData* out_arr = out_datum->mutable_array();\n+    auto out = out_arr->GetMutableValues<ValueCType>(1);\n+    auto out_bitmap = out_arr->buffers[0]->mutable_data();\n+    auto out_offset = out_arr->offset;\n+\n+    // If either the values or indices have nulls, we preemptively zero out the\n+    // out validity bitmap so that we don't have to use ClearBit in each\n+    // iteration for nulls.\n+    if (args.values_null_count > 0 || args.indices_null_count > 0) {\n+      BitUtil::SetBitsTo(out_bitmap, out_offset, args.indices_length, false);\n+    }\n+\n+    OptionalBitBlockCounter indices_bit_counter(indices_bitmap, indices_offset,\n+                                                args.indices_length);\n+    int64_t position = 0;\n+    int64_t valid_count = 0;\n+    while (true) {\n+      BitBlockCount block = indices_bit_counter.NextBlock();\n+      if (block.length == 0) {\n+        // All indices processed.\n+        break;\n+      }\n+      if (args.values_null_count == 0) {\n+        // Values are never null, so things are easier\n+        valid_count += block.popcount;\n+        if (block.popcount == block.length) {\n+          // Fastest path: neither values nor index nulls\n+          BitUtil::SetBitsTo(out_bitmap, out_offset + position, block.length, true);\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            out[position] = values[indices[position]];\n+            ++position;\n+          }\n+        } else if (block.popcount > 0) {\n+          // Slow path: some indices but not all are null\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(indices_bitmap, indices_offset + position)) {\n+              // index is not null\n+              BitUtil::SetBit(out_bitmap, out_offset + position);\n+              out[position] = values[indices[position]];\n+            }\n+            ++position;\n+          }\n+        }\n+      } else {\n+        // Values have nulls, so we must do random access into the values bitmap\n+        if (block.popcount == block.length) {\n+          // Faster path: indices are not null but values may be\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(values_bitmap, values_offset + indices[position])) {\n+              // value is not null\n+              out[position] = values[indices[position]];\n+              BitUtil::SetBit(out_bitmap, out_offset + position);\n+              ++valid_count;\n+            }\n+            ++position;\n+          }\n+        } else if (block.popcount > 0) {\n+          // Slow path: some but not all indices are null. Since we are doing\n+          // random access in general we have to check the value nullness one by\n+          // one.\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(indices_bitmap, indices_offset + position)) {\n+              // index is not null\n+              if (BitUtil::GetBit(values_bitmap, values_offset + indices[position])) {\n+                // value is not null\n+                out[position] = values[indices[position]];\n+                BitUtil::SetBit(out_bitmap, out_offset + position);\n+                ++valid_count;\n+              }\n+            }\n+            ++position;\n+          }\n+        }\n+      }\n+    }\n+    out_arr->null_count = out_arr->length - valid_count;\n+  }\n };\n \n-Status GetTakeKernel(const DataType& value_type, const DataType& index_type,\n-                     ArrayKernelExec* exec) {\n-  TakeKernelVisitor visitor(value_type, index_type);\n-  RETURN_NOT_OK(visitor.Create());\n-  *exec = visitor.result;\n+template <typename IndexCType>\n+struct BooleanTakeImpl {\n+  static void Exec(const PrimitiveTakeArgs& args, Datum* out_datum) {\n+    auto values = args.values;\n+    auto values_bitmap = args.values_bitmap;\n+    auto values_offset = args.values_offset;\n+\n+    auto indices = reinterpret_cast<const IndexCType*>(args.indices);\n+    auto indices_bitmap = args.indices_bitmap;\n+    auto indices_offset = args.indices_offset;\n+\n+    ArrayData* out_arr = out_datum->mutable_array();\n+    auto out = out_arr->buffers[1]->mutable_data();\n+    auto out_bitmap = out_arr->buffers[0]->mutable_data();\n+    auto out_offset = out_arr->offset;\n+\n+    // If either the values or indices have nulls, we preemptively zero out the\n+    // out validity bitmap so that we don't have to use ClearBit in each\n+    // iteration for nulls.\n+    if (args.values_null_count > 0 || args.indices_null_count > 0) {\n+      BitUtil::SetBitsTo(out_bitmap, out_offset, args.indices_length, false);\n+    }\n+\n+    auto PlaceDataBit = [&](int64_t loc, IndexCType index) {\n+      BitUtil::SetBitTo(out, out_offset + loc,\n+                        BitUtil::GetBit(values, values_offset + index));\n+    };\n+\n+    OptionalBitBlockCounter indices_bit_counter(indices_bitmap, indices_offset,\n+                                                args.indices_length);\n+    int64_t position = 0;\n+    int64_t valid_count = 0;\n+    while (true) {\n+      BitBlockCount block = indices_bit_counter.NextBlock();\n+      if (block.length == 0) {\n+        // All indices processed.\n+        break;\n+      }\n+      if (args.values_null_count == 0) {\n+        // Values are never null, so things are easier\n+        valid_count += block.popcount;\n+        if (block.popcount == block.length) {\n+          // Fastest path: neither values nor index nulls\n+          BitUtil::SetBitsTo(out_bitmap, out_offset + position, block.length, true);\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            PlaceDataBit(position, indices[position]);\n+            ++position;\n+          }\n+        } else if (block.popcount > 0) {\n+          // Slow path: some but not all indices are null\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(indices_bitmap, indices_offset + position)) {\n+              // index is not null\n+              BitUtil::SetBit(out_bitmap, out_offset + position);\n+              PlaceDataBit(position, indices[position]);\n+            }\n+            ++position;\n+          }\n+        }\n+      } else {\n+        // Values have nulls, so we must do random access into the values bitmap\n+        if (block.popcount == block.length) {\n+          // Faster path: indices are not null but values may be\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(values_bitmap, values_offset + indices[position])) {\n+              // value is not null\n+              BitUtil::SetBit(out_bitmap, out_offset + position);\n+              PlaceDataBit(position, indices[position]);\n+              ++valid_count;\n+            }\n+            ++position;\n+          }\n+        } else if (block.popcount > 0) {\n+          // Slow path: some but not all indices are null. Since we are doing\n+          // random access in general we have to check the value nullness one by\n+          // one.\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(indices_bitmap, indices_offset + position)) {\n+              // index is not null\n+              if (BitUtil::GetBit(values_bitmap, values_offset + indices[position])) {\n+                // value is not null\n+                PlaceDataBit(position, indices[position]);\n+                BitUtil::SetBit(out_bitmap, out_offset + position);\n+                ++valid_count;\n+              }\n+            }\n+            ++position;\n+          }\n+        }\n+      }\n+    }\n+    out_arr->null_count = out_arr->length - valid_count;\n+  }\n+};\n+\n+template <template <typename...> class TakeImpl, typename... Args>\n+void TakeIndexDispatch(const PrimitiveTakeArgs& args, Datum* out) {\n+  // With the simplifying assumption that boundschecking has taken place\n+  // already at a higher level, we can now assume that the index values are all\n+  // non-negative. Thus, we can interpret signed integers as unsigned and avoid\n+  // having to generate double the amount of binary code to handle each integer\n+  // with.\n\nReview comment:\n       typo: width\n\n##########\nFile path: cpp/src/arrow/util/bit_block_counter.h\n##########\n@@ -68,6 +75,39 @@ class ARROW_EXPORT BitBlockCounter {\n   int64_t offset_;\n };\n \n+/// \\brief A tool to iterate through a possibly non-existent validity bitmap,\n+/// to allow us to write one code path for both the with-nulls and no-nulls\n+/// cases without giving up a lot of performance\n+class OptionalBitBlockCounter {\n+ public:\n+  OptionalBitBlockCounter(const uint8_t* validity_bitmap, int64_t offset, int64_t length);\n+\n+  OptionalBitBlockCounter(const std::shared_ptr<Buffer>& validity_bitmap, int64_t offset,\n+                          int64_t length);\n+\n+  /// Return block count for next word when the bitmap is\n\nReview comment:\n       Complete\n\n##########\nFile path: cpp/src/arrow/compute/benchmark_util.h\n##########\n@@ -77,12 +77,18 @@ struct RegressionArgs {\n   const int64_t size;\n \n   // proportion of nulls in generated arrays\n-  const double null_proportion;\n+  double null_proportion;\n \n   explicit RegressionArgs(benchmark::State& state)\n       : size(state.range(0)),\n-        null_proportion(std::min(1., 1. / static_cast<double>(state.range(1)))),\n-        state_(state) {}\n+        null_proportion(),\n+        state_(state) {\n+    if (state.range(1) == 0) {\n+      this->null_proportion = 0.0;\n+    } else {\n+      this->null_proportion = std::min(1., 1. / static_cast<double>(state.range(1)));\n+    }\n+  }\n \n\nReview comment:\n       Sure, will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:24:09.876+0000",
                    "updated": "2020-06-09T16:24:09.876+0000",
                    "started": "2020-06-09T16:24:09.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443032",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443268",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641433457\n\n\n   OK, I have added more unit tests for the boundchecking code and added more rigorous unit testing for string/fixed-size-binary types in vector_take_test.cc. I'm going to get the test suite passing again but this can be reviewed\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:48:46.597+0000",
                    "updated": "2020-06-09T16:48:46.597+0000",
                    "started": "2020-06-09T16:48:46.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443268",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641433457\n\n\n   OK, I have added more unit tests for the boundchecking code and added more rigorous unit testing for string/fixed-size-binary types in vector_take_test.cc. I'm going to get the test suite passing again but this can be reviewed\r\n   \r\n   Latest benchmark run:\r\n   \r\n   * Old code: https://gist.github.com/wesm/85ed9b59a24f2f63c9eb3b2bb12bf364\r\n   * New code: https://gist.github.com/wesm/1a83bc6bb3cb8c1b87943cd49a0ac3ff\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:54:58.708+0000",
                    "updated": "2020-06-09T16:54:58.708+0000",
                    "started": "2020-06-09T16:54:58.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443277",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#discussion_r437580946\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_take.cc\n##########\n@@ -38,44 +55,715 @@ std::unique_ptr<KernelState> InitTake(KernelContext*, const KernelInitArgs& args\n   return std::unique_ptr<KernelState>(new TakeState{*take_options});\n }\n \n-template <typename ValueType, typename IndexType>\n-struct TakeFunctor {\n-  using ValueArrayType = typename TypeTraits<ValueType>::ArrayType;\n-  using IndexArrayType = typename TypeTraits<IndexType>::ArrayType;\n-  using IS = ArrayIndexSequence<IndexType>;\n+namespace {}  // namespace\n+\n+// ----------------------------------------------------------------------\n+// Implement optimized take for primitive types from boolean to 1/2/4/8-byte\n+// C-type based types. Use common implementation for every byte width and only\n+// generate code for unsigned integer indices, since after boundschecking to\n+// check for negative numbers the indices we can safely reinterpret_cast signed\n+// integers as unsigned.\n+\n+struct PrimitiveTakeArgs {\n+  const uint8_t* values;\n+  const uint8_t* values_bitmap = nullptr;\n+  int values_bit_width;\n+  int64_t values_length;\n+  int64_t values_offset;\n+  int64_t values_null_count;\n+  const uint8_t* indices;\n+  const uint8_t* indices_bitmap = nullptr;\n+  int indices_bit_width;\n+  int64_t indices_length;\n+  int64_t indices_offset;\n+  int64_t indices_null_count;\n+};\n+\n+// Reduce code size by dealing with the unboxing of the kernel inputs once\n+// rather than duplicating compiled code to do all these in each kernel.\n+PrimitiveTakeArgs GetPrimitiveTakeArgs(const ExecBatch& batch) {\n+  PrimitiveTakeArgs args;\n+\n+  const ArrayData& arg0 = *batch[0].array();\n+  const ArrayData& arg1 = *batch[1].array();\n+\n+  // Values\n+  args.values_bit_width = static_cast<const FixedWidthType&>(*arg0.type).bit_width();\n+  args.values = arg0.buffers[1]->data();\n+  if (args.values_bit_width > 1) {\n+    args.values += arg0.offset * args.values_bit_width / 8;\n+  }\n+  args.values_length = arg0.length;\n+  args.values_offset = arg0.offset;\n+  args.values_null_count = arg0.GetNullCount();\n+  if (arg0.buffers[0]) {\n+    args.values_bitmap = arg0.buffers[0]->data();\n+  }\n+\n+  // Indices\n+  args.indices_bit_width = static_cast<const FixedWidthType&>(*arg1.type).bit_width();\n+  args.indices = arg1.buffers[1]->data() + arg1.offset * args.indices_bit_width / 8;\n+  args.indices_length = arg1.length;\n+  args.indices_offset = arg1.offset;\n+  args.indices_null_count = arg1.GetNullCount();\n+  if (arg1.buffers[0]) {\n+    args.indices_bitmap = arg1.buffers[0]->data();\n+  }\n+\n+  return args;\n+}\n+\n+/// \\brief The Take implementation for primitive (fixed-width) types does not\n+/// use the logical Arrow type but rather then physical C type. This way we\n+/// only generate one take function for each byte width.\n+///\n+/// This function assumes that the indices have been boundschecked.\n+template <typename IndexCType, typename ValueCType>\n+struct PrimitiveTakeImpl {\n+  static void Exec(const PrimitiveTakeArgs& args, Datum* out_datum) {\n+    auto values = reinterpret_cast<const ValueCType*>(args.values);\n+    auto values_bitmap = args.values_bitmap;\n+    auto values_offset = args.values_offset;\n+\n+    auto indices = reinterpret_cast<const IndexCType*>(args.indices);\n+    auto indices_bitmap = args.indices_bitmap;\n+    auto indices_offset = args.indices_offset;\n+\n+    ArrayData* out_arr = out_datum->mutable_array();\n+    auto out = out_arr->GetMutableValues<ValueCType>(1);\n+    auto out_bitmap = out_arr->buffers[0]->mutable_data();\n+    auto out_offset = out_arr->offset;\n+\n+    // If either the values or indices have nulls, we preemptively zero out the\n+    // out validity bitmap so that we don't have to use ClearBit in each\n+    // iteration for nulls.\n+    if (args.values_null_count > 0 || args.indices_null_count > 0) {\n+      BitUtil::SetBitsTo(out_bitmap, out_offset, args.indices_length, false);\n+    }\n+\n+    OptionalBitBlockCounter indices_bit_counter(indices_bitmap, indices_offset,\n+                                                args.indices_length);\n+    int64_t position = 0;\n+    int64_t valid_count = 0;\n+    while (true) {\n+      BitBlockCount block = indices_bit_counter.NextBlock();\n+      if (block.length == 0) {\n+        // All indices processed.\n+        break;\n+      }\n+      if (args.values_null_count == 0) {\n+        // Values are never null, so things are easier\n+        valid_count += block.popcount;\n+        if (block.popcount == block.length) {\n+          // Fastest path: neither values nor index nulls\n+          BitUtil::SetBitsTo(out_bitmap, out_offset + position, block.length, true);\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            out[position] = values[indices[position]];\n+            ++position;\n+          }\n+        } else if (block.popcount > 0) {\n+          // Slow path: some indices but not all are null\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(indices_bitmap, indices_offset + position)) {\n+              // index is not null\n+              BitUtil::SetBit(out_bitmap, out_offset + position);\n+              out[position] = values[indices[position]];\n+            }\n+            ++position;\n+          }\n+        }\n+      } else {\n+        // Values have nulls, so we must do random access into the values bitmap\n+        if (block.popcount == block.length) {\n+          // Faster path: indices are not null but values may be\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(values_bitmap, values_offset + indices[position])) {\n+              // value is not null\n+              out[position] = values[indices[position]];\n+              BitUtil::SetBit(out_bitmap, out_offset + position);\n+              ++valid_count;\n+            }\n+            ++position;\n+          }\n+        } else if (block.popcount > 0) {\n+          // Slow path: some but not all indices are null. Since we are doing\n+          // random access in general we have to check the value nullness one by\n+          // one.\n+          for (int64_t i = 0; i < block.length; ++i) {\n+            if (BitUtil::GetBit(indices_bitmap, indices_offset + position)) {\n+              // index is not null\n+              if (BitUtil::GetBit(values_bitmap, values_offset + indices[position])) {\n+                // value is not null\n+                out[position] = values[indices[position]];\n+                BitUtil::SetBit(out_bitmap, out_offset + position);\n+                ++valid_count;\n+              }\n+            }\n+            ++position;\n+          }\n+        }\n+      }\n+    }\n+    out_arr->null_count = out_arr->length - valid_count;\n+  }\n+};\n+\n+template <typename IndexCType>\n+struct BooleanTakeImpl {\n\nReview comment:\n       TODO: I will add some random data unit tests for boolean type, which are only sparsely tested in the test suite\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T16:58:06.903+0000",
                    "updated": "2020-06-09T16:58:06.903+0000",
                    "started": "2020-06-09T16:58:06.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443279",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641612120\n\n\n   I added a bunch more unit tests, I think I'm done with this aside from CI fixes and will move on to working on Filter\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T22:21:25.000+0000",
                    "updated": "2020-06-09T22:21:25.000+0000",
                    "started": "2020-06-09T22:21:25.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443440",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641630347\n\n\n   Appveyor is failing because of https://github.com/apache/arrow/commit/b058cf0d1c26ad7984c104bb84322cc7dcc66f00\r\n   \r\n   I opened https://issues.apache.org/jira/browse/ARROW-9085\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-09T23:20:34.931+0000",
                    "updated": "2020-06-09T23:20:34.931+0000",
                    "started": "2020-06-09T23:20:34.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443461",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#discussion_r437859624\n\n\n\n##########\nFile path: cpp/src/arrow/util/int_util_test.cc\n##########\n@@ -382,5 +386,102 @@ TEST(TransposeInts, Int8ToInt64) {\n   ASSERT_EQ(dest, std::vector<int64_t>({2222, 4444, 6666, 1111, 4444, 3333}));\n }\n \n+void BoundscheckPasses(const std::shared_ptr<DataType>& type,\n\nReview comment:\n       nit: BoundsCheck\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T04:55:34.256+0000",
                    "updated": "2020-06-10T04:55:34.256+0000",
                    "started": "2020-06-10T04:55:34.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443561",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#discussion_r437859793\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_block_counter_test.cc\n##########\n@@ -246,5 +246,28 @@ TEST(TestBinaryBitBlockCounter, NextAndWord) {\n   }\n }\n \n+TEST(TestOptionalBitBlockCounter, Basics) {\n+  const int64_t nbytes = 1024;\n+  auto bitmap = *AllocateBitmap(nbytes * 8);\n+  random_bytes(nbytes, 0, bitmap->mutable_data());\n+\n+  OptionalBitBlockCounter optional_counter(bitmap, 0, nbytes * 8);\n+  BitBlockCounter bit_counter(bitmap->data(), 0, nbytes * 8);\n+\n+  while (true) {\n\nReview comment:\n       nit: do/while?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T04:56:07.571+0000",
                    "updated": "2020-06-10T04:56:07.571+0000",
                    "started": "2020-06-10T04:56:07.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443562",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-641720988\n\n\n   noticed a few small nits.  Somebody more familiar with Take should review this.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T04:57:00.638+0000",
                    "updated": "2020-06-10T04:57:00.638+0000",
                    "started": "2020-06-10T04:57:00.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443563",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-642039038\n\n\n   I noticed some bugs while reviewing, I'll push some changes here in a few minutes\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T14:15:29.110+0000",
                    "updated": "2020-06-10T14:15:29.110+0000",
                    "started": "2020-06-10T14:15:29.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443763",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/443780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-642057943\n\n\n   Done. Please review\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T14:46:31.198+0000",
                    "updated": "2020-06-10T14:46:31.198+0000",
                    "started": "2020-06-10T14:46:31.198+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "443780",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/444017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-642285703\n\n\n   I am preparing another large patch that uses this branch as a base so this patch will need to be reviewed and merged before the next patch (providing a streamlined Filter implementation) can be reviewed. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T21:49:07.672+0000",
                    "updated": "2020-06-10T21:49:07.672+0000",
                    "started": "2020-06-10T21:49:07.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444017",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/444018",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm edited a comment on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-642285703\n\n\n   I am preparing another large patch that uses this branch as a base so this patch will need to be reviewed and merged before the next patch (providing a streamlined Filter implementation) can be reviewed. CI is passing -- the only failure is an out-of-space error on the 390x box\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-10T21:49:31.724+0000",
                    "updated": "2020-06-10T21:49:31.724+0000",
                    "started": "2020-06-10T21:49:31.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444018",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/444215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-642561522\n\n\n   I can confirm a performance increase here (2x to 5x faster) as well as a decrease in code size (`libarrow.so` has 15% less code!).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-11T10:36:52.342+0000",
                    "updated": "2020-06-11T10:36:52.342+0000",
                    "started": "2020-06-11T10:36:52.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444215",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/444267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#discussion_r438759834\n\n\n\n##########\nFile path: cpp/src/arrow/util/bit_block_counter.h\n##########\n@@ -17,14 +17,21 @@\n \n #pragma once\n \n+#include <algorithm>\n #include <cstdint>\n+#include <limits>\n+#include <memory>\n \n+#include \"arrow/array/array_base.h\"\n\nReview comment:\n       Is this useful?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_take_test.cc\n##########\n@@ -211,13 +306,63 @@ TYPED_TEST(TestTakeKernelWithString, TakeString) {\n                                      \"[2, 5]\", &arr));\n }\n \n+TEST(TestTakeKernelString, Random) {\n+  DoRandomTakeTests<StringType>(\n+      [](int64_t length, double null_probability, random::RandomArrayGenerator* rng) {\n+        return rng->String(length, 0, 32, null_probability);\n+      });\n+  DoRandomTakeTests<LargeStringType>(\n+      [](int64_t length, double null_probability, random::RandomArrayGenerator* rng) {\n+        return rng->LargeString(length, 0, 32, null_probability);\n+      });\n\nReview comment:\n       Do you think you can add tests for sliced arrays with a non-0 offset? Both for primitive types and string-like types.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_take_test.cc\n##########\n@@ -72,6 +73,120 @@ void AssertTakeBoolean(const std::string& values, const std::string& indices,\n   CheckTake(boolean(), values, indices, expected);\n }\n \n+template <typename ValuesType, typename IndexType>\n+void ValidateTakeImpl(const std::shared_ptr<Array>& values,\n+                      const std::shared_ptr<Array>& indices,\n+                      const std::shared_ptr<Array>& result) {\n+  using ValuesArrayType = typename TypeTraits<ValuesType>::ArrayType;\n+  using IndexArrayType = typename TypeTraits<IndexType>::ArrayType;\n+  auto typed_values = checked_pointer_cast<ValuesArrayType>(values);\n+  auto typed_result = checked_pointer_cast<ValuesArrayType>(result);\n+  auto typed_indices = checked_pointer_cast<IndexArrayType>(indices);\n+  for (int64_t i = 0; i < indices->length(); ++i) {\n+    if (typed_indices->IsNull(i) || typed_values->IsNull(typed_indices->Value(i))) {\n+      ASSERT_TRUE(result->IsNull(i));\n+      continue;\n+    }\n+    ASSERT_EQ(typed_result->GetView(i), typed_values->GetView(typed_indices->Value(i)))\n\nReview comment:\n       Also add `ASSERT_FALSE(result->IsNull(i))`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-11T13:49:17.630+0000",
                    "updated": "2020-06-11T13:49:17.630+0000",
                    "started": "2020-06-11T13:49:17.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444267",
                    "issueId": "13242002"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/worklog/444279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7382:\nURL: https://github.com/apache/arrow/pull/7382#issuecomment-642689244\n\n\n   I'm going to push changes on this PR, I think. Please hold on :-).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-11T14:19:35.553+0000",
                    "updated": "2020-06-11T14:19:35.553+0000",
                    "started": "2020-06-11T14:19:35.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "444279",
                    "issueId": "13242002"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@199524d2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e64b622[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2353d4eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@82db305[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@359ebc0f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@20541c32[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d9d605f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@784d4d72[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38f3f8b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38c6d610[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4eafd6cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5c9b34b5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 11 16:45:33 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-11T16:45:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5760/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-06-27T17:23:21.000+0000",
        "updated": "2020-06-11T23:01:48.000+0000",
        "timeoriginalestimate": null,
        "description": "There is some question of whether these kernels allocate optimally- for example when Filtering or Taking strings it might be more efficient to pass over the filter/indices twice, first to determine how much character storage will be needed then again into allocated memory: https://github.com/apache/arrow/pull/4531#discussion_r297160457\r\n\r\nAdditionally, these kernels could probably make good use of scatter/gather SIMD instructions.\r\n\r\nFurthermore, Filter's bitmap is currently lazily expanded into the indices of elements to be appended to the output array. It would probably be more efficient to expand to indices in batches, then gather using an index batch.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Optimize Take implementation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/comment/17115287",
                    "id": "17115287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Another problem I noticed with the current implementation of Take and Filter: different x86 is generated for applying these operations on arrays with the same underlying C type. For example, instructions for moving 8-byte-wide values are being generated for Int64Type, UInt64Type, Date64Type, Time64Type, and TimestampType, when only one  underlying \"data movement function\" is needed. As part of improving the performance of Take and Filter we should also ensure that we eliminate this unneeded binary bloat in the shared library",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-24T12:36:09.957+0000",
                    "updated": "2020-05-24T12:36:48.002+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/comment/17116112",
                    "id": "17116112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'd like to work on this next week if it's alright",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-25T15:20:07.929+0000",
                    "updated": "2020-05-25T15:20:07.929+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13242002/comment/17133395",
                    "id": "17133395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 7382\n[https://github.com/apache/arrow/pull/7382]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-06-11T16:45:33.840+0000",
                    "updated": "2020-06-11T16:45:33.840+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0467c:",
        "customfield_12314139": null
    }
}