{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13472876",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876",
    "key": "ARROW-17183",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [
            {
                "id": "13472993",
                "key": "ARROW-17190",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13472993",
                "fields": {
                    "summary": "[C++] Create a Fetch Node",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                        "description": "This issue is being actively worked on at the moment by the assignee.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                        "name": "In Progress",
                        "id": "3",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                            "id": 4,
                            "key": "indeterminate",
                            "colorName": "yellow",
                            "name": "In Progress"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13473215",
                "key": "ARROW-17195",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13473215",
                "fields": {
                    "summary": "[Docs] Create Documentation for Fetch Sink Node",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13473216",
                "key": "ARROW-17196",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13473216",
                "fields": {
                    "summary": "[C++] Optimize Fetch Node to avoid collecting all records for non-sort setting",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17183/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@20829d21[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@210bec6e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2933786c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@572589b8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d343920[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@748ad25e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46c834bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3ddb0d93[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@110ade31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3330f66c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@34da615d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@510845c0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 24 17:51:36 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17183/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2022-07-22T10:01:09.000+0000",
        "updated": "2022-10-24T17:51:36.000+0000",
        "timeoriginalestimate": null,
        "description": "In Substrait integrations with ACERO, a functionality required is the ability to fetch records sorted and unsorted.\r\n\r\nFetch operation is defined as selecting `K` number of records with an offset. For instance pick 10 records skipping the first 5 elements. Here we can define this as a Slice operation and records can be easily extracted in a sink-node.\u00a0\r\n\r\nSort and Fetch operation applies when we need to execute a Fetch operation on sorted data. The main issue is we cannot have a sort node followed by a fetch. The reason is that all existing node definitions supporting sort are based on sink nodes. Since there cannot be a node followed by sink, this functionality has to take place in a single node.\u00a0\r\n\r\nBut this is not a perfect solution for fetch and sort, but one way to do this is define a sink node where the records are sorted and then a set of items are fetched.\u00a0\r\n\r\nAnother dilema is what if sort is followed by a fetch. In that case, there has to be a flag to enable the order of the operations.\u00a0\r\n\r\nThe objective of this ticket is to discuss a viable efficient solution and include new nodes or a method to execute such a logic.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Adding ExecNode with Sort and Fetch capability",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17569935",
                    "id": "17569935",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Specifically about this case, we assume that this Fetch and Sort operations are the most external relations in a Substrait plan. Meaning the Sort or Fetch operation is called at the end of the other operations. This is not a very accurate representation. First we need to understand if this is the general case. cc [~westonpace] [~jvanstraten]\u00a0\r\n\r\nThere can be a few settings where these two operations are applied.\u00a0\r\n\r\n*Sort Only*\r\n\r\nIf the query only has a Sorting operation instead of adding the `SinkNodeConsumer`, we need to add a `OrderBySinkNodeConsumer`.\u00a0\r\n\r\n*Fetch Only*\r\n\r\nIf the query only has a Fetch operation, we can include a node with fetch capability. At the moment we don't have a node with Fetch capability, so this may need to be included where we could be able to use a siimilar logic used in `SelectK` node.\r\n\r\n*SortAndFetch or FetchAndSort*\r\n\r\nIf the query contains both sort and fetch in a given order, there has to be a single Sink node which can do this operation by the given order. When scanning the plan components, when we find a sort we just add a `OrderBySink` and keep adding other relations. If we find a Fetch operation, this needs to be replaced with a SortAndFetch operation where sorting is done first and fetching is done next. And this can go vice-versa.\u00a0\r\n\r\n*Another Approach:*\r\n\r\nAnother approach is that we define a sink node which can execute a function which does the expected operation. In some of the defined Sink nodes (KSelect, Sort) there is a function called {*}`{*}DoFinish{*}`.{*}\u00a0We should be able to call a custom function within this call. So from Substrait end when we extract the plan, then we can write the required `std::function` which would be an option for this custom sink node. And we assume that a table as input and write the logic. This way we don't have to introduce new nodes. And what if there are different capabilities users need and ACERO has a limitation, can we always keep adding nodes to fullfil that? I am not so sure. This is just a high level thought process.\r\n\r\nAlthough I have implemented a _SortAndFetch_ node which can perform the fetch followed by a sort just by following what is being done in Sort and SelectK nodes. But I am not exactly sure any of these approaches are optimized or the best way to solve the problem.\u00a0\u00a0\r\n\r\nThis is the doubtful component which I am not quite clear what would be the most optimize way to include this capability. Or if there is a better way to do this. Appreciate your thoughts.\u00a0\r\n\r\ncc [~westonpace] [~jvanstraten] [~bkietz] [~icook]\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-22T10:30:45.283+0000",
                    "updated": "2022-07-22T10:30:45.283+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570217",
                    "id": "17570217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "{quote}\r\nSpecifically about this case, we assume that this Fetch and Sort operations are the most external relations in a Substrait plan. Meaning the Sort or Fetch operation is called at the end of the other operations. This is not a very accurate representation. First we need to understand if this is the general case. cc Weston Pace Jeroen van Straten \r\n{quote}\r\n\r\nThis is the case in TPC-H.  It also tends to be the case in real-world queries as it is rather tricky / impossible to write a mid-plan sort in SQL.  Subqueries / window functions are the most likely place where you would see a mid-plan sort and we don't support either at the moment.\r\n\r\n{quote}\r\nAnother approach is that we define a sink node which can execute a function which does the expected operation. In some of the defined Sink nodes (KSelect, Sort) there is a function called `DoFinish`. We should be able to call a custom function within this call. So from Substrait end when we extract the plan, then we can write the required `std::function` which would be an option for this custom sink node. And we assume that a table as input and write the logic. This way we don't have to introduce new nodes. And what if there are different capabilities users need and ACERO has a limitation, can we always keep adding nodes to fullfil that? I am not so sure. This is just a high level thought process.\r\n{quote}\r\n\r\nThis special sink node would have to collect all of the data in memory first.\r\n\r\n{quote}\r\nAlthough I have implemented a SortAndFetch node which can perform the fetch followed by a sort just by following what is being done in Sort and SelectK nodes. But I am not exactly sure any of these approaches are optimized or the best way to solve the problem.  \r\n{quote}\r\n\r\nThe biggest general problem here is that a top-k node should not have to collect all data in memory.  It does have to scan all data but it should be able to throw away data that is obviously larger than K.  A SortAndFetch node should also not have to collect all data in memory.  Our current implementation does.  So what you've described is no worse than our current situation. Yet it is definitely something we should improve at some point.  There is ARROW-14202 to improve the top-k node.  We could improve SortAndFetch at that time as well.  CC [~ArianaVillegas] as this might be something she wants to consider when addressing ARROW-14202 (i.e. we don't just need top-k we need top-k-skipping-m)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-23T00:23:24.516+0000",
                    "updated": "2022-07-23T00:23:49.753+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570221",
                    "id": "17570221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This is a clear description on short term goals. I will go ahead and create two PRs for Fetch and SortAndFetch nodes.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-23T01:10:38.368+0000",
                    "updated": "2022-07-23T01:10:38.368+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570222",
                    "id": "17570222",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "May be just a fetch node with the sort capability which can be left optional.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-23T01:13:21.628+0000",
                    "updated": "2022-07-23T01:13:21.628+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570793",
                    "id": "17570793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "IMO the problem is bigger than just sort/fetch: many of Substrait's relations are expected to maintain ordering, and based on what I'm seeing here, I'm not sure Acero can currently fulfill that requirement. This is just the opinion of a predominantly-Substrait guy looking in, though; please forgive any misunderstandings about what Acero currently supports and guarantees vs. what it doesn't support or guarantee.\r\n\r\nImagine a query like {{{}SELECT some_complex_operation(col2) FROM table ORDER BY col1 LIMIT 100{}}}. You could naively order this as {{read -> project -> sort+fetch}} and get the result in the expected order. But an optimizer would almost certainly turn it into {{{}read -> sort+fetch -> project{}}}, which it can do because in Substrait, projections are required to maintain order. If Acero's ProjectNode doesn't provide this guarantee, this optimization would change the result.\r\n\r\nFurthermore, while I don't think the spec states this explicitly, I would expect {{SELECT * FROM table LIMIT 100}} to return the *first* 100 rows, and {{SELECT * FROM table LIMIT 100 OFFSET 100}} to return the *next* 100 rows; I wouldn't expect a random selection of 100 rows from either. Likewise, if I would use Substrait + Acero to convert one file format to another and remove some columns for example, I would expect the output to be in the same order.\r\n\r\nIMO, we can't assert that we really support Substrait if we don't meet these expectations. Compiler analogy: if I switch to a different C++ compiler, I would expect my std::vectors to still be contiguous in memory, and not suddenly be ChunkedArrays because those are faster in some cases. The C++ spec says they have to be contiguous, full stop.\r\n\r\nWe could propose adding options to Substrait to allow arbitrary order in various places, and then reject plans that don't have that option set if we can't fulfill the default behavior. This feels like a relatively Arrow-specific thing to add, though, so my Substrait POV response would be to use extensions instead... but that would mean we wouldn't support plain Substrait, and that seems like a less-than-ideal outcome.\r\n\r\nInstead, I propose we actually implement support for maintaining order. I had the following idea for how we could do that with minimal impact to Acero:\r\n - For all source nodes, add an option to include a uint64 row index/sequence number column, through which row order can be recovered.\r\n - For all sink nodes, add an option to order by a uint64 column (my understanding is that this exists already). Likewise for any other order-sensitive nodes if ever they're added.\r\n - Implement a SortAndFetch node that orders the dataset by some rich sort information (including comparator function, multiple columns, etc), optionally only returns part of it, and optionally includes a new row index/sequence column such that its computed ordering can be recovered later. I believe this is sufficient to capture all corner cases; FetchAndSort, which I interpreted as \"fetch any N rows and then sort them,\" is not something that exists in Substrait. The sort algorithm can be unstable; to make it stable, simply append the current row index/sequence number column to the list of columns to sort by.\r\n - Have the relation FromProto function return information pertaining to how Substrait expects the dataset returned by the returned declaration to be ordered, by way of some \"order by\" clause. Whenever a fetch relation, a write relation, or the sink is then consumed, use this information for the sort. If the requested sort is too complex to be pushed into the node corresponding to the to-be-converted relation (for example, I imagine we might not want to pollute file-writing code with stuff like custom sort functions \u2013 imagine if someone supplied a UDF here), first emit a SortAndFetch node to simplify it down to a single uint64 column, and then sort by that. You're effectively duplicating the sort by doing this, so maybe this should be accompanied by a warning. That being said, with the right sort algorithm, sorting twice might not cost too much, especially if you also know that the index column has no duplicates (once you've received all rows in 0..i, you can immediately spill those rows from memory to disk).\r\n\r\nSubstrait advanced optimization extensions could be used to allow users to selectively disable some of this functionality if they don't care about ordering:\r\n - at read relations to disable materialization of the row index column (and thus appear to read the file in arbitrary order);\r\n - at write relations to ignore sort information provided along with the result of the input FromProto, if any (and thus appear to write the file in arbitrary order);\r\n - likewise at plan level for the implicit sink node;\r\n - likewise for sort relations (and thus appear to do an unstable sort instead of a stable one);\r\n - likewise for fetch relations (to fetch any N rows rather than some specific window of rows).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-07-25T09:23:02.833+0000",
                    "updated": "2022-07-25T09:23:02.833+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570818",
                    "id": "17570818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~jvanstraten]\u00a0this is a good discussion.\u00a0\r\n\r\nIf Acero is going to tightly coupled to Substrait, we may need to think about all these points carefully and clearly. But I imagined Acero and Substriat to be orthogonal as far as implementation wise and decision making, but if it is the goal to support Substrait in a very deeper level, these points are very important in re-thinking to improve if any features are missing.\r\n\r\nKeeping an index column is an interesting idea and making it optional via extensions could possibly be a good way to handle ordering. But I am not quite sure, if that has to be a feature of Acero or an attribute of the table itself. AFAIK Arrow doesn't support indexing data. So if we are just to keep a column for the sake of guaranteeing the order, that's something to think about in the long run. Are we attaching it when we read data from the source and omit it after doing the final operation (at sink). It is a viable idea, but where to implement is a question. When rows are dropped re-indexing mechanisms and how to handle them could be a separate topic itself. cc [~westonpace]\u00a0\r\n\r\nAnother thing I am not quite sure about is the query optimization. For now I assumed that what Acero is going to digest is an optimized plan, meaning we get an optimized Substrait plan (but I am not sure if this is going to be the practical case). Should a built Acero exec-plan be optimized before running internally? I guess that would be an important feature, but I am not quite sure if we have a plan for this kind of an implementation.\r\n\r\nThe Fetch nodes's current goal is to fetch a set of records with or without ordering and the current implementation in the created PR is a sub-optimal solution and it doesn't do anything special to guarantee the ordering or do an optimized fetch.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-25T10:09:08.675+0000",
                    "updated": "2022-07-25T10:09:08.675+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570840",
                    "id": "17570840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "{quote}Keeping an index column is an interesting idea and making it optional via extensions could possibly be a good way to handle ordering. But I am not quite sure, if that has to be a feature of Acero or an attribute of the table itself.\r\n{quote}\r\nThe way I see it, it would be generated during the read, just like the metadata scalar columns that reads append.\r\n\r\nA single Arrow IPC file, Parquet file, or in-memory table always has some defined order. The zero-based indices of those rows are the indices I'm referring to; not to be confused with database keys and indices. AFAIK the number of rows in each chunk can be (somewhat?) efficiently read from metadata prior to parallelizing, so the start index for each chunk can be computed. I can't gauge how difficult it would be to implement this, but I don't think there is or should be a fundamental issue here.\r\n\r\nBetween files/partitions, I imagine you could just order alphabetically or something. Generally speaking, anything that is stable between subsequent immutable accesses would be good enough if there is no inherent expectation of ordering for the storage method. Choosing the storage method is the responsibility of the user, so weird orderings due to the storage method should not come as a surprise.\r\n{quote}Should a built Acero exec-plan be optimized before running internally? I guess that would be an important feature, but I am not quite sure if we have a plan for this kind of an implementation.\r\n{quote}\r\nIn general, if you want something to run efficiency on some specific architecture, you can't expect to rely solely upon a generic optimizer with no knowledge of that specific architecture. So I don't think you can ever avoid Acero-specific optimizations. I do however think that you can get ~90% of the Acero-specific optimizations done in the same tree traversal that you need for the Substrait to Acero conversion anyway, as the more complex grunt work of pushing filters and projections through joins and such would already have been done at the Substrait level. So that's what I've been proposing.\r\n\r\nETA:\r\n{quote}But I imagined Acero and Substriat to be orthogonal as far as implementation wise and decision making, but if it is the goal to support Substrait in a very deeper level, these points are very important in re-thinking to improve if any features are missing.\r\n{quote}\r\nI don't think this orthogonality is a bad thing, actually. However, if the goal is to become a fully-featured query engine, using Substrait or otherwise, you do at least need to satisfy the expectations that come with it. Anecdotal, but in every database I've ever queried, doing the same query twice returned the results in the same order.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-07-25T10:58:04.875+0000",
                    "updated": "2022-07-25T11:03:30.915+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570853",
                    "id": "17570853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "{quote}\r\nIn general, if you want something to run efficiency on some specific architecture, you can't expect to rely solely upon a generic optimizer with no knowledge of that specific architecture. So I don't think you can ever avoid Acero-specific optimizations. I do however think that you can get ~90% of the Acero-specific optimizations done in the same tree traversal that you need for the Substrait to Acero conversion anyway, as the more complex grunt work of pushing filters and projections through joins and such would already have been done at the Substrait level. So that's what I've been proposing.\r\n{quote}\r\n\r\nI don't know much about an effort towards this direction, so in the current system Acero could be limited in functionality. I don't know if it make sense to write an optimizer in Acero. IMHO, what would be better is to write the Acero query and convert it to a Substrait plan, and then optimize this plan using a third-party optimizer. May be there could be something like substrait-optimizer in future (I really don't know). And use this optimized plan to create the Acero plan again. The question is if such optimization is possible with a third-party optimizer and if it takes lesser time, it would be ideal, isn't it? Writing Acero-native optimizer itslef could be a separate project itself. Since there are so much progressed optimizers, can't we use one to optimize the sub-optimal plan?  My knowledge on query optimizing is not very strong, so I wouldn't argue much about it. \r\n\r\n{quote}\r\nI don't think this orthogonality is a bad thing, actually. However, if the goal is to become a fully-featured query engine, using Substrait or otherwise, you do at least need to satisfy the expectations that come with it. Anecdotal, but in every database I've ever queried, doing the same query twice returned the results in the same order.\r\n{quote}\r\n\r\nYes, if Acero expects to inherit all these core features of the database it must do what they suppose to do, no argument there. Since Acero is an streaming execution engine, how far are we reaching for those goals are not yet clear to me. But at the end of the day, if we are benchmarking our performance with other systems, it would be the best to support such features as optimized as possible.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-25T11:44:36.557+0000",
                    "updated": "2022-07-25T11:44:36.557+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17570867",
                    "id": "17570867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "{quote}IMHO, what would be better is to write the Acero query and convert it to a Substrait plan, and then optimize this plan using a third-party optimizer. May be there could be something like substrait-optimizer in future (I really don't know). And use this optimized plan to create the Acero plan again.\r\n{quote}\r\nI'm also assuming that this will exist at some point. What I'm saying is that it's unlikely to optimize for Acero-specific things; it will optimize Substrait core relations and functions using the properties associated with those by the spec, such as order maintenance. If an optimal Substrait plan then degrades in performance just by converting it back to Acero's format due to architectural differences between Acero and Substrait, you're still going to need to do some basic optimizations afterward.\r\n{quote}Yes, if Acero expects to inherit all these core features of the database it must do what they suppose to do, no argument there. Since Acero is an streaming execution engine, how far are we reaching for those goals are not yet clear to me. But at the end of the day, if we are benchmarking our performance with other systems, it would be the best to support such features as optimized as possible.\r\n{quote}\r\nIt's fair enough if anything that doesn't perfectly fit a streaming paradigm is a non-goal for Acero, but then you can't support much of core Substrait as it's currently defined, and a generic Substrait optimizer would certainly make a mess. At that point I would question what we're (ab)using Substrait for; you can't have your cake and eat it too. If we just want to use Substrait as a simple means of serializing Acero plans and only have a flawed appearance of compatibility with systems that don't explicitly support Acero's dialect, we could have saved ourselves a whole lot of trouble (protobuf linking issues, anyone?) by just rolling our own format from the start. For some level of compatibility we could then have rolled out a converter from Substrait to Acero's serialization format outside of Arrow, if only to quarantine protobuf from the rest of libarrow.\r\n\r\nSubstrait core is intended to be a more or less minimal subset of what should be expected from an execution engine. If we can't or don't want to meet those expectations because we want more flexibility to optimize, we should propose to change Substrait, and if those changes are rejected by the community as being too Arrow-specific, IMO Substrait is just not for us. We should at least not be treating it as a first-class citizen for connecting Acero to Ibis and other query APIs in that case.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jvanstraten",
                        "name": "jvanstraten",
                        "key": "JIRAUSER282962",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER282962&avatarId=48950",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER282962&avatarId=48950",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER282962&avatarId=48950",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER282962&avatarId=48950"
                        },
                        "displayName": "Jeroen van Straten",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-07-25T12:24:57.016+0000",
                    "updated": "2022-07-25T12:40:57.365+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17571011",
                    "id": "17571011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "The ordering conversation has come up in a few different contexts as well.  I think it is pretty clear that we will want to support this in Acero.  However, this is not too bad, even with parallel scanning and execution.  My general proposal at the moment is to label batches with a batch index that is monotonically increasing from 0 (this has some consequences like the filter node may have to emit empty batches).  Then, at the end of the plan, we optionally resequence (not sort) the output as part of the sink.\r\n\r\nThe difference between a resequence and a sort is that the former asserts the output is \"almost ordered\".  For example, batch X can not be more than N batches behind batch X+1 where N is the \"jitter\" of the input.  We should be able to generally guarantee this and N ends up being proportional to the readahead configuration of the scanner and the number of threads.  Though I haven't yet 100% sold myself on this (and probably won't until implementation).  The advantage of resequencing is that it is a \"streaming operation\", i.e. we only need a fixed size queue of length N and we don't need to worry about spilling to disk.\r\n\r\nVarious nodes then manipulate the batch index and this corresponds exactly the the \"orderedness\" property of Substrait.  For example, filter & project respect the batch index.  Sort assigns a new batch index.  Join and aggregate clear the batch index (set it to -1).  The resequencing sink, if it encounters a -1 batch index, will just immediately output the batches with no ordering guarantee.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-25T17:15:25.779+0000",
                    "updated": "2022-07-25T17:15:25.779+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17571466",
                    "id": "17571466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Does this cover ARROW-16628?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-26T14:33:31.936+0000",
                    "updated": "2022-07-26T14:33:31.936+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17571470",
                    "id": "17571470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~npr] Yes this should cover it. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
                        "name": "vibhatha",
                        "key": "vibhatha",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Vibhatha Lakmal Abeykoon",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-07-26T14:37:07.078+0000",
                    "updated": "2022-07-26T14:37:07.078+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17571560",
                    "id": "17571560",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "A quick note here wrt to ordering. In Substrait, there is no declared ordering of the scan operator. As such, a SCAN > FETCH100 run multiple times is allowed to return different results each time (if the scan operator has variability. Some do, some don't.). A SCAN > SORT > FETCH100 should always return the same 100 records. Since SCAN has indeterminate ordering, SCAN > WRITE will also have indeterminate output.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-26T17:50:24.750+0000",
                    "updated": "2022-07-26T17:50:24.750+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13472876/comment/17623310",
                    "id": "17623310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=arrowjira",
                        "name": "arrowjira",
                        "key": "arrowjira",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Apache Arrow JIRA Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-10-24T17:51:36.508+0000",
                    "updated": "2022-10-24T17:51:36.508+0000"
                }
            ],
            "maxResults": 14,
            "total": 14,
            "startAt": 0
        },
        "customfield_12311820": "0|z1731s:",
        "customfield_12314139": null
    }
}