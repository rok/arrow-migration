{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13369317",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317",
    "key": "ARROW-12189",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/5",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/trivial.svg",
            "name": "Trivial",
            "id": "5"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12612470",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12612470",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13369805",
                    "key": "ARROW-12229",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369805",
                    "fields": {
                        "summary": "[C++][Gandiva] Implement is_date function on Gandiva",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=anthonylouis",
            "name": "anthonylouis",
            "key": "anthonylouis",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=anthonylouis&avatarId=46146",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=anthonylouis&avatarId=46146",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=anthonylouis&avatarId=46146",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=anthonylouis&avatarId=46146"
            },
            "displayName": "Anthony Louis Gotlib Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=anthonylouis",
            "name": "anthonylouis",
            "key": "anthonylouis",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=anthonylouis&avatarId=46146",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=anthonylouis&avatarId=46146",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=anthonylouis&avatarId=46146",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=anthonylouis&avatarId=46146"
            },
            "displayName": "Anthony Louis Gotlib Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12189/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/576133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb opened a new pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877\n\n\n   The function has similar behavior to the existent TO_DATE([string] given_text, [literal_string] format) function, but it returns the information about the hours, minutes, and seconds in the response.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T14:56:52.286+0000",
                    "updated": "2021-04-02T14:56:52.286+0000",
                    "started": "2021-04-02T14:56:52.286+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576133",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/576136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-812567030\n\n\n   https://issues.apache.org/jira/browse/ARROW-12189\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-02T14:59:20.082+0000",
                    "updated": "2021-04-02T14:59:20.082+0000",
                    "started": "2021-04-02T14:59:20.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576136",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/576917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-813470212\n\n\n   I will convert the PR to a draft to add the implementation for the `TO_TIMESTAMP([string] given_text, [literal string] given_format)` function.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-05T15:58:59.689+0000",
                    "updated": "2021-04-05T15:58:59.689+0000",
                    "started": "2021-04-05T15:58:59.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "576917",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/577630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-814159947\n\n\n   @projjal I found a limitation in the [arrow method](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/arrow/util/value_parsing.h#L663) to convert string to dates and times using a defined format. That method calls the strptime method, which does not have an option to format sub-second granularities like milliseconds and microseconds, so if a user defines a format like YYYY-MM-DD HH:MI:SS.FFF, an error will be raised when the program tries to parse the date. \r\n   \r\n   [This example in my Pull Request](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/gandiva/to_timestamp_holder_test.cc#L78) shows the error that occurs when I try to parse a date using milliseconds in the format string.\r\n   \r\n   Do I need to correct that problem in this Pull Request? Or it is better to create a new task to deal with the limitation and send the Pull Request with the possibility to format date, time and timestamps until the second time granularity now?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T14:20:16.927+0000",
                    "updated": "2021-04-06T14:20:16.927+0000",
                    "started": "2021-04-06T14:20:16.927+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577630",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/577702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb edited a comment on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-814159947\n\n\n   @projjal I found a limitation in the [arrow method](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/arrow/util/value_parsing.h#L663) to convert string to dates and times using a defined format. That method calls the strptime method, which does not have an option to format sub-second granularities like milliseconds and microseconds, so if a user defines a format like YYYY-MM-DD HH:MI:SS.FFF, an error will be raised when the program tries to parse the date. \r\n   \r\n   [This example in my Pull Request](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/gandiva/to_timestamp_holder_test.cc#L78) shows the error that occurs when I try to parse a date using milliseconds in the format string.\r\n   \r\n   Do I need to correct that problem in this Pull Request? Or it is better to create a new PR to deal with the limitation and send the Pull Request with the possibility to format date, time and timestamps until the second time granularity now?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T15:48:20.275+0000",
                    "updated": "2021-04-06T15:48:20.275+0000",
                    "started": "2021-04-06T15:48:20.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577702",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/577703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb edited a comment on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-814159947\n\n\n   @projjal I found a limitation in the [arrow method](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/arrow/util/value_parsing.h#L663) to convert string to dates and times using a defined format. That method calls the strptime method, which does not have an option to format sub-second granularities like milliseconds and microseconds, so if a user defines a format like YYYY-MM-DD HH:MI:SS.FFF, an error will be raised when the program tries to parse the date. \r\n   \r\n   [This example in the Pull Request](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/gandiva/to_timestamp_holder_test.cc#L78) shows the error that occurs when I try to parse a date using milliseconds in the format string.\r\n   \r\n   Do I need to correct that problem in this Pull Request? Or it is better to create a new PR to deal with the limitation and send the Pull Request with the possibility to format date, time and timestamps until the second time granularity now?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T15:48:43.258+0000",
                    "updated": "2021-04-06T15:48:43.258+0000",
                    "started": "2021-04-06T15:48:43.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577703",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/578074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-814554682\n\n\n   Added the implementation for UNIX_TIMESTAMP functions:\r\n   - UNIX_TIMESTAMP([string] timestring, [string] format) - Gives the Unix time for the date in timestring using the format specified in format.\r\n   - UNIX_TIMESTAMP([string] timestring) - Gives the Unix time for the date in timestring assuming a format of \u2018YYYY-MM-DD HH24:MI:SS\u2019.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-07T02:27:36.521+0000",
                    "updated": "2021-04-07T02:27:36.521+0000",
                    "started": "2021-04-07T02:27:36.520+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578074",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/578991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#discussion_r609449682\n\n\n\n##########\nFile path: cpp/src/gandiva/to_date_functions_holder.h\n##########\n@@ -0,0 +1,253 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/value_parsing.h\"\n+#include \"gandiva/date_utils.h\"\n+#include \"gandiva/execution_context.h\"\n+#include \"gandiva/function_holder.h\"\n+#include \"gandiva/node.h\"\n+#include \"gandiva/visibility.h\"\n+\n+namespace gandiva {\n+\n+/// Function Holder that is father for the class that executes `\n+/// 'to_time', 'to_date', 'to_timestamp' and 'unix_timestamp' functions\n+template <typename HOLDER_TYPE>\n+class GANDIVA_EXPORT ToDateFunctionsHolder : public FunctionHolder {\n+ public:\n+  ~ToDateFunctionsHolder() override = default;\n+\n+  /// Return true if the data matches the pattern.\n+  int64_t operator()(ExecutionContext* context, const char* data, int data_len,\n+                     bool in_valid, bool* out_valid) {\n+    *out_valid = false;\n+    if (!in_valid) {\n+      return 0;\n+    }\n+    // Issues\n+    // 1. processes date that do not match the format.\n+    // 2. does not process time in format +08:00 (or) id.\n+    int64_t unit_time_since_epoch = 0;\n+    if (!::arrow::internal::ParseTimestampStrptime(data, data_len, pattern_.c_str(),\n+                                                   /*ignore_time_in_day=*/ignore_time_,\n+                                                   /*allow_trailing_chars=*/true,\n+                                                   time_unit_, &unit_time_since_epoch)) {\n+      return_error(context, data, data_len);\n+      return 0;\n+    }\n+\n+    *out_valid = true;\n+\n+    if (time_unit_ == ::arrow::TimeUnit::SECOND) {\n+      return unit_time_since_epoch * 1000;\n+    }\n+\n+    return unit_time_since_epoch;\n+  }\n+\n+ protected:\n+  ToDateFunctionsHolder(std::string pattern, int32_t suppress_errors, bool ignore_time,\n+                        ::arrow::TimeUnit::type time_unit)\n+      : pattern_(std::move(pattern)),\n+        suppress_errors_(suppress_errors),\n+        ignore_time_(ignore_time),\n+        time_unit_(time_unit) {}\n+\n+  std::string pattern_;  // date format string\n+\n+  int32_t suppress_errors_;  // should throw exception on runtime errors\n+\n+  bool ignore_time_;  // if the hour, minutes and secs must be ignored during formatting\n+\n+  ::arrow::TimeUnit::type time_unit_;\n+\n+  void return_error(ExecutionContext* context, const char* data, int data_len) {\n+    if (suppress_errors_ == 1) {\n+      return;\n+    }\n+\n+    std::string err_msg =\n+        \"Error parsing value \" + std::string(data, data_len) + \" for given format.\";\n+    context->set_error_msg(err_msg.c_str());\n+  }\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<HOLDER_TYPE>* holder,\n+                     const std::string& function_name) {\n+    if (node.children().size() != 2 && node.children().size() != 3) {\n+      return Status::Invalid(function_name +\n+                             \" function requires two or three parameters\");\n+    }\n+\n+    auto literal_pattern = dynamic_cast<LiteralNode*>(node.children().at(1).get());\n+    if (literal_pattern == NULLPTR) {\n+      return Status::Invalid(function_name +\n+                             \" function requires a literal as the second parameter\");\n+    }\n+\n+    auto literal_type = literal_pattern->return_type()->id();\n+    if (literal_type != arrow::Type::STRING && literal_type != arrow::Type::BINARY) {\n+      return Status::Invalid(\n+          function_name + \" function requires a string literal as the second parameter\");\n+    }\n+    auto pattern = arrow::util::get<std::string>(literal_pattern->holder());\n+\n+    int suppress_errors = 0;\n+    if (node.children().size() == 3) {\n+      auto literal_suppress_errors =\n+          dynamic_cast<LiteralNode*>(node.children().at(2).get());\n+      if (literal_suppress_errors == NULLPTR) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+\n+      literal_type = literal_suppress_errors->return_type()->id();\n+      if (literal_type != arrow::Type::INT32) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+      suppress_errors = arrow::util::get<int>(literal_suppress_errors->holder());\n+    }\n+\n+    return Make(pattern, suppress_errors, holder);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<HOLDER_TYPE>* holder) {\n+    std::shared_ptr<std::string> transformed_pattern;\n+    ARROW_RETURN_NOT_OK(DateUtils::ToInternalFormat(sql_pattern, &transformed_pattern));\n+    auto lholder = std::shared_ptr<HOLDER_TYPE>(\n+        new HOLDER_TYPE(*(transformed_pattern.get()), suppress_errors));\n+    *holder = lholder;\n+    return Status::OK();\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_date'\n+class GANDIVA_EXPORT ToDateHolder : public gandiva::ToDateFunctionsHolder<ToDateHolder> {\n+ public:\n+  ~ToDateHolder() override = default;\n+\n+  ToDateHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToDateHolder>(pattern, suppress_errors, true,\n+                                            ::arrow::TimeUnit::SECOND) {}\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<ToDateHolder>* holder) {\n+    const std::string function_name(\"to_date\");\n+    return ToDateFunctionsHolder<ToDateHolder>::Make(node, holder, function_name);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<ToDateHolder>* holder) {\n+    return ToDateFunctionsHolder<ToDateHolder>::Make(sql_pattern, suppress_errors,\n+                                                     holder);\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_time'\n+class GANDIVA_EXPORT ToTimeHolder : public ToDateFunctionsHolder<ToTimeHolder> {\n+ public:\n+  ~ToTimeHolder() override = default;\n+\n+  ToTimeHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToTimeHolder>(pattern, suppress_errors, false,\n+                                            ::arrow::TimeUnit::MILLI) {}\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<ToTimeHolder>* holder) {\n+    const std::string function_name(\"to_time\");\n+    return ToDateFunctionsHolder<ToTimeHolder>::Make(node, holder, function_name);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<ToTimeHolder>* holder) {\n+    return ToDateFunctionsHolder<ToTimeHolder>::Make(sql_pattern, suppress_errors,\n+                                                     holder);\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_timestamp'\n+class GANDIVA_EXPORT ToTimestampHolder : public ToDateFunctionsHolder<ToTimestampHolder> {\n+ public:\n+  ~ToTimestampHolder() override = default;\n+\n+  ToTimestampHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToTimestampHolder>(pattern, suppress_errors, false,\n+                                                 ::arrow::TimeUnit::MILLI) {}\n+\n+  static Status Make(const FunctionNode& node,\n+                     std::shared_ptr<ToTimestampHolder>* holder) {\n+    const std::string function_name(\"to_timestamp\");\n+    return ToDateFunctionsHolder<ToTimestampHolder>::Make(node, holder, function_name);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<ToTimestampHolder>* holder) {\n+    return ToDateFunctionsHolder<ToTimestampHolder>::Make(sql_pattern, suppress_errors,\n+                                                          holder);\n+  }\n+};\n+\n+/// Function Holder for SQL 'unix_timestamp'\n+class GANDIVA_EXPORT UnixTimestampHolder\n+    : public ToDateFunctionsHolder<UnixTimestampHolder> {\n+ public:\n+  ~UnixTimestampHolder() override = default;\n+\n+  UnixTimestampHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<UnixTimestampHolder>(pattern, suppress_errors, false,\n+                                                   ::arrow::TimeUnit::MILLI) {}\n\nReview comment:\n       unix_timestamp returns seconds since epoch https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_unix-timestamp\r\n   \n\n##########\nFile path: cpp/src/gandiva/to_date_functions_holder.h\n##########\n@@ -0,0 +1,253 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/value_parsing.h\"\n+#include \"gandiva/date_utils.h\"\n+#include \"gandiva/execution_context.h\"\n+#include \"gandiva/function_holder.h\"\n+#include \"gandiva/node.h\"\n+#include \"gandiva/visibility.h\"\n+\n+namespace gandiva {\n+\n+/// Function Holder that is father for the class that executes `\n+/// 'to_time', 'to_date', 'to_timestamp' and 'unix_timestamp' functions\n+template <typename HOLDER_TYPE>\n+class GANDIVA_EXPORT ToDateFunctionsHolder : public FunctionHolder {\n+ public:\n+  ~ToDateFunctionsHolder() override = default;\n+\n+  /// Return true if the data matches the pattern.\n+  int64_t operator()(ExecutionContext* context, const char* data, int data_len,\n+                     bool in_valid, bool* out_valid) {\n+    *out_valid = false;\n+    if (!in_valid) {\n+      return 0;\n+    }\n+    // Issues\n+    // 1. processes date that do not match the format.\n+    // 2. does not process time in format +08:00 (or) id.\n+    int64_t unit_time_since_epoch = 0;\n+    if (!::arrow::internal::ParseTimestampStrptime(data, data_len, pattern_.c_str(),\n+                                                   /*ignore_time_in_day=*/ignore_time_,\n+                                                   /*allow_trailing_chars=*/true,\n+                                                   time_unit_, &unit_time_since_epoch)) {\n+      return_error(context, data, data_len);\n+      return 0;\n+    }\n+\n+    *out_valid = true;\n+\n+    if (time_unit_ == ::arrow::TimeUnit::SECOND) {\n+      return unit_time_since_epoch * 1000;\n+    }\n+\n+    return unit_time_since_epoch;\n+  }\n+\n+ protected:\n+  ToDateFunctionsHolder(std::string pattern, int32_t suppress_errors, bool ignore_time,\n+                        ::arrow::TimeUnit::type time_unit)\n+      : pattern_(std::move(pattern)),\n+        suppress_errors_(suppress_errors),\n+        ignore_time_(ignore_time),\n+        time_unit_(time_unit) {}\n+\n+  std::string pattern_;  // date format string\n+\n+  int32_t suppress_errors_;  // should throw exception on runtime errors\n+\n+  bool ignore_time_;  // if the hour, minutes and secs must be ignored during formatting\n+\n+  ::arrow::TimeUnit::type time_unit_;\n+\n+  void return_error(ExecutionContext* context, const char* data, int data_len) {\n+    if (suppress_errors_ == 1) {\n+      return;\n+    }\n+\n+    std::string err_msg =\n+        \"Error parsing value \" + std::string(data, data_len) + \" for given format.\";\n+    context->set_error_msg(err_msg.c_str());\n+  }\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<HOLDER_TYPE>* holder,\n+                     const std::string& function_name) {\n+    if (node.children().size() != 2 && node.children().size() != 3) {\n+      return Status::Invalid(function_name +\n+                             \" function requires two or three parameters\");\n+    }\n+\n+    auto literal_pattern = dynamic_cast<LiteralNode*>(node.children().at(1).get());\n+    if (literal_pattern == NULLPTR) {\n+      return Status::Invalid(function_name +\n+                             \" function requires a literal as the second parameter\");\n+    }\n+\n+    auto literal_type = literal_pattern->return_type()->id();\n+    if (literal_type != arrow::Type::STRING && literal_type != arrow::Type::BINARY) {\n+      return Status::Invalid(\n+          function_name + \" function requires a string literal as the second parameter\");\n+    }\n+    auto pattern = arrow::util::get<std::string>(literal_pattern->holder());\n+\n+    int suppress_errors = 0;\n+    if (node.children().size() == 3) {\n+      auto literal_suppress_errors =\n+          dynamic_cast<LiteralNode*>(node.children().at(2).get());\n+      if (literal_suppress_errors == NULLPTR) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+\n+      literal_type = literal_suppress_errors->return_type()->id();\n+      if (literal_type != arrow::Type::INT32) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+      suppress_errors = arrow::util::get<int>(literal_suppress_errors->holder());\n+    }\n+\n+    return Make(pattern, suppress_errors, holder);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<HOLDER_TYPE>* holder) {\n+    std::shared_ptr<std::string> transformed_pattern;\n+    ARROW_RETURN_NOT_OK(DateUtils::ToInternalFormat(sql_pattern, &transformed_pattern));\n+    auto lholder = std::shared_ptr<HOLDER_TYPE>(\n+        new HOLDER_TYPE(*(transformed_pattern.get()), suppress_errors));\n+    *holder = lholder;\n+    return Status::OK();\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_date'\n+class GANDIVA_EXPORT ToDateHolder : public gandiva::ToDateFunctionsHolder<ToDateHolder> {\n+ public:\n+  ~ToDateHolder() override = default;\n+\n+  ToDateHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToDateHolder>(pattern, suppress_errors, true,\n+                                            ::arrow::TimeUnit::SECOND) {}\n\nReview comment:\n       Todate should be returning millis instead of seconds. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T08:36:05.364+0000",
                    "updated": "2021-04-08T08:36:05.364+0000",
                    "started": "2021-04-08T08:36:05.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578991",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/578993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-815571670\n\n\n   > @projjal I found a limitation in the [arrow method](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/arrow/util/value_parsing.h#L663) to convert string to dates and times using a defined format. That method calls the strptime method, which does not have an option to format sub-second granularities like milliseconds and microseconds, so if a user defines a format like YYYY-MM-DD HH:MI:SS.FFF, an error will be raised when the program tries to parse the date.\r\n   > \r\n   > [This example in the Pull Request](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/gandiva/to_timestamp_holder_test.cc#L78) shows the error that occurs when I try to parse a date using milliseconds in the format string.\r\n   > \r\n   > Do I need to correct that problem in this Pull Request? Or it is better to create a new PR to deal with the limitation and send the Pull Request with the possibility to format date, time and timestamps until the second time granularity now?\r\n   \r\n   Would be better to correct it as part of this PR if possible\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T08:38:16.570+0000",
                    "updated": "2021-04-08T08:38:16.570+0000",
                    "started": "2021-04-08T08:38:16.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "578993",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/579016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on a change in pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#discussion_r609483198\n\n\n\n##########\nFile path: cpp/src/gandiva/to_date_functions_holder.h\n##########\n@@ -0,0 +1,253 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/value_parsing.h\"\n+#include \"gandiva/date_utils.h\"\n+#include \"gandiva/execution_context.h\"\n+#include \"gandiva/function_holder.h\"\n+#include \"gandiva/node.h\"\n+#include \"gandiva/visibility.h\"\n+\n+namespace gandiva {\n+\n+/// Function Holder that is father for the class that executes `\n+/// 'to_time', 'to_date', 'to_timestamp' and 'unix_timestamp' functions\n+template <typename HOLDER_TYPE>\n+class GANDIVA_EXPORT ToDateFunctionsHolder : public FunctionHolder {\n+ public:\n+  ~ToDateFunctionsHolder() override = default;\n+\n+  /// Return true if the data matches the pattern.\n+  int64_t operator()(ExecutionContext* context, const char* data, int data_len,\n+                     bool in_valid, bool* out_valid) {\n+    *out_valid = false;\n+    if (!in_valid) {\n+      return 0;\n+    }\n+    // Issues\n+    // 1. processes date that do not match the format.\n+    // 2. does not process time in format +08:00 (or) id.\n+    int64_t unit_time_since_epoch = 0;\n+    if (!::arrow::internal::ParseTimestampStrptime(data, data_len, pattern_.c_str(),\n+                                                   /*ignore_time_in_day=*/ignore_time_,\n+                                                   /*allow_trailing_chars=*/true,\n+                                                   time_unit_, &unit_time_since_epoch)) {\n+      return_error(context, data, data_len);\n+      return 0;\n+    }\n+\n+    *out_valid = true;\n+\n+    if (time_unit_ == ::arrow::TimeUnit::SECOND) {\n+      return unit_time_since_epoch * 1000;\n+    }\n+\n+    return unit_time_since_epoch;\n+  }\n+\n+ protected:\n+  ToDateFunctionsHolder(std::string pattern, int32_t suppress_errors, bool ignore_time,\n+                        ::arrow::TimeUnit::type time_unit)\n+      : pattern_(std::move(pattern)),\n+        suppress_errors_(suppress_errors),\n+        ignore_time_(ignore_time),\n+        time_unit_(time_unit) {}\n+\n+  std::string pattern_;  // date format string\n+\n+  int32_t suppress_errors_;  // should throw exception on runtime errors\n+\n+  bool ignore_time_;  // if the hour, minutes and secs must be ignored during formatting\n+\n+  ::arrow::TimeUnit::type time_unit_;\n+\n+  void return_error(ExecutionContext* context, const char* data, int data_len) {\n+    if (suppress_errors_ == 1) {\n+      return;\n+    }\n+\n+    std::string err_msg =\n+        \"Error parsing value \" + std::string(data, data_len) + \" for given format.\";\n+    context->set_error_msg(err_msg.c_str());\n+  }\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<HOLDER_TYPE>* holder,\n+                     const std::string& function_name) {\n+    if (node.children().size() != 2 && node.children().size() != 3) {\n+      return Status::Invalid(function_name +\n+                             \" function requires two or three parameters\");\n+    }\n+\n+    auto literal_pattern = dynamic_cast<LiteralNode*>(node.children().at(1).get());\n+    if (literal_pattern == NULLPTR) {\n+      return Status::Invalid(function_name +\n+                             \" function requires a literal as the second parameter\");\n+    }\n+\n+    auto literal_type = literal_pattern->return_type()->id();\n+    if (literal_type != arrow::Type::STRING && literal_type != arrow::Type::BINARY) {\n+      return Status::Invalid(\n+          function_name + \" function requires a string literal as the second parameter\");\n+    }\n+    auto pattern = arrow::util::get<std::string>(literal_pattern->holder());\n+\n+    int suppress_errors = 0;\n+    if (node.children().size() == 3) {\n+      auto literal_suppress_errors =\n+          dynamic_cast<LiteralNode*>(node.children().at(2).get());\n+      if (literal_suppress_errors == NULLPTR) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+\n+      literal_type = literal_suppress_errors->return_type()->id();\n+      if (literal_type != arrow::Type::INT32) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+      suppress_errors = arrow::util::get<int>(literal_suppress_errors->holder());\n+    }\n+\n+    return Make(pattern, suppress_errors, holder);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<HOLDER_TYPE>* holder) {\n+    std::shared_ptr<std::string> transformed_pattern;\n+    ARROW_RETURN_NOT_OK(DateUtils::ToInternalFormat(sql_pattern, &transformed_pattern));\n+    auto lholder = std::shared_ptr<HOLDER_TYPE>(\n+        new HOLDER_TYPE(*(transformed_pattern.get()), suppress_errors));\n+    *holder = lholder;\n+    return Status::OK();\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_date'\n+class GANDIVA_EXPORT ToDateHolder : public gandiva::ToDateFunctionsHolder<ToDateHolder> {\n+ public:\n+  ~ToDateHolder() override = default;\n+\n+  ToDateHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToDateHolder>(pattern, suppress_errors, true,\n+                                            ::arrow::TimeUnit::SECOND) {}\n\nReview comment:\n       Ok. Seems we are converting it into millis again.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T09:08:58.165+0000",
                    "updated": "2021-04-08T09:08:58.165+0000",
                    "started": "2021-04-08T09:08:58.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579016",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/579466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on a change in pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#discussion_r610003102\n\n\n\n##########\nFile path: cpp/src/gandiva/to_date_functions_holder.h\n##########\n@@ -0,0 +1,253 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/value_parsing.h\"\n+#include \"gandiva/date_utils.h\"\n+#include \"gandiva/execution_context.h\"\n+#include \"gandiva/function_holder.h\"\n+#include \"gandiva/node.h\"\n+#include \"gandiva/visibility.h\"\n+\n+namespace gandiva {\n+\n+/// Function Holder that is father for the class that executes `\n+/// 'to_time', 'to_date', 'to_timestamp' and 'unix_timestamp' functions\n+template <typename HOLDER_TYPE>\n+class GANDIVA_EXPORT ToDateFunctionsHolder : public FunctionHolder {\n+ public:\n+  ~ToDateFunctionsHolder() override = default;\n+\n+  /// Return true if the data matches the pattern.\n+  int64_t operator()(ExecutionContext* context, const char* data, int data_len,\n+                     bool in_valid, bool* out_valid) {\n+    *out_valid = false;\n+    if (!in_valid) {\n+      return 0;\n+    }\n+    // Issues\n+    // 1. processes date that do not match the format.\n+    // 2. does not process time in format +08:00 (or) id.\n+    int64_t unit_time_since_epoch = 0;\n+    if (!::arrow::internal::ParseTimestampStrptime(data, data_len, pattern_.c_str(),\n+                                                   /*ignore_time_in_day=*/ignore_time_,\n+                                                   /*allow_trailing_chars=*/true,\n+                                                   time_unit_, &unit_time_since_epoch)) {\n+      return_error(context, data, data_len);\n+      return 0;\n+    }\n+\n+    *out_valid = true;\n+\n+    if (time_unit_ == ::arrow::TimeUnit::SECOND) {\n+      return unit_time_since_epoch * 1000;\n+    }\n+\n+    return unit_time_since_epoch;\n+  }\n+\n+ protected:\n+  ToDateFunctionsHolder(std::string pattern, int32_t suppress_errors, bool ignore_time,\n+                        ::arrow::TimeUnit::type time_unit)\n+      : pattern_(std::move(pattern)),\n+        suppress_errors_(suppress_errors),\n+        ignore_time_(ignore_time),\n+        time_unit_(time_unit) {}\n+\n+  std::string pattern_;  // date format string\n+\n+  int32_t suppress_errors_;  // should throw exception on runtime errors\n+\n+  bool ignore_time_;  // if the hour, minutes and secs must be ignored during formatting\n+\n+  ::arrow::TimeUnit::type time_unit_;\n+\n+  void return_error(ExecutionContext* context, const char* data, int data_len) {\n+    if (suppress_errors_ == 1) {\n+      return;\n+    }\n+\n+    std::string err_msg =\n+        \"Error parsing value \" + std::string(data, data_len) + \" for given format.\";\n+    context->set_error_msg(err_msg.c_str());\n+  }\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<HOLDER_TYPE>* holder,\n+                     const std::string& function_name) {\n+    if (node.children().size() != 2 && node.children().size() != 3) {\n+      return Status::Invalid(function_name +\n+                             \" function requires two or three parameters\");\n+    }\n+\n+    auto literal_pattern = dynamic_cast<LiteralNode*>(node.children().at(1).get());\n+    if (literal_pattern == NULLPTR) {\n+      return Status::Invalid(function_name +\n+                             \" function requires a literal as the second parameter\");\n+    }\n+\n+    auto literal_type = literal_pattern->return_type()->id();\n+    if (literal_type != arrow::Type::STRING && literal_type != arrow::Type::BINARY) {\n+      return Status::Invalid(\n+          function_name + \" function requires a string literal as the second parameter\");\n+    }\n+    auto pattern = arrow::util::get<std::string>(literal_pattern->holder());\n+\n+    int suppress_errors = 0;\n+    if (node.children().size() == 3) {\n+      auto literal_suppress_errors =\n+          dynamic_cast<LiteralNode*>(node.children().at(2).get());\n+      if (literal_suppress_errors == NULLPTR) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+\n+      literal_type = literal_suppress_errors->return_type()->id();\n+      if (literal_type != arrow::Type::INT32) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+      suppress_errors = arrow::util::get<int>(literal_suppress_errors->holder());\n+    }\n+\n+    return Make(pattern, suppress_errors, holder);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<HOLDER_TYPE>* holder) {\n+    std::shared_ptr<std::string> transformed_pattern;\n+    ARROW_RETURN_NOT_OK(DateUtils::ToInternalFormat(sql_pattern, &transformed_pattern));\n+    auto lholder = std::shared_ptr<HOLDER_TYPE>(\n+        new HOLDER_TYPE(*(transformed_pattern.get()), suppress_errors));\n+    *holder = lholder;\n+    return Status::OK();\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_date'\n+class GANDIVA_EXPORT ToDateHolder : public gandiva::ToDateFunctionsHolder<ToDateHolder> {\n+ public:\n+  ~ToDateHolder() override = default;\n+\n+  ToDateHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToDateHolder>(pattern, suppress_errors, true,\n+                                            ::arrow::TimeUnit::SECOND) {}\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<ToDateHolder>* holder) {\n+    const std::string function_name(\"to_date\");\n+    return ToDateFunctionsHolder<ToDateHolder>::Make(node, holder, function_name);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<ToDateHolder>* holder) {\n+    return ToDateFunctionsHolder<ToDateHolder>::Make(sql_pattern, suppress_errors,\n+                                                     holder);\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_time'\n+class GANDIVA_EXPORT ToTimeHolder : public ToDateFunctionsHolder<ToTimeHolder> {\n+ public:\n+  ~ToTimeHolder() override = default;\n+\n+  ToTimeHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToTimeHolder>(pattern, suppress_errors, false,\n+                                            ::arrow::TimeUnit::MILLI) {}\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<ToTimeHolder>* holder) {\n+    const std::string function_name(\"to_time\");\n+    return ToDateFunctionsHolder<ToTimeHolder>::Make(node, holder, function_name);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<ToTimeHolder>* holder) {\n+    return ToDateFunctionsHolder<ToTimeHolder>::Make(sql_pattern, suppress_errors,\n+                                                     holder);\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_timestamp'\n+class GANDIVA_EXPORT ToTimestampHolder : public ToDateFunctionsHolder<ToTimestampHolder> {\n+ public:\n+  ~ToTimestampHolder() override = default;\n+\n+  ToTimestampHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToTimestampHolder>(pattern, suppress_errors, false,\n+                                                 ::arrow::TimeUnit::MILLI) {}\n+\n+  static Status Make(const FunctionNode& node,\n+                     std::shared_ptr<ToTimestampHolder>* holder) {\n+    const std::string function_name(\"to_timestamp\");\n+    return ToDateFunctionsHolder<ToTimestampHolder>::Make(node, holder, function_name);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<ToTimestampHolder>* holder) {\n+    return ToDateFunctionsHolder<ToTimestampHolder>::Make(sql_pattern, suppress_errors,\n+                                                          holder);\n+  }\n+};\n+\n+/// Function Holder for SQL 'unix_timestamp'\n+class GANDIVA_EXPORT UnixTimestampHolder\n+    : public ToDateFunctionsHolder<UnixTimestampHolder> {\n+ public:\n+  ~UnixTimestampHolder() override = default;\n+\n+  UnixTimestampHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<UnixTimestampHolder>(pattern, suppress_errors, false,\n+                                                   ::arrow::TimeUnit::MILLI) {}\n\nReview comment:\n       Changes applied\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:51:52.773+0000",
                    "updated": "2021-04-08T18:51:52.773+0000",
                    "started": "2021-04-08T18:51:52.773+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579466",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/579467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on a change in pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#discussion_r610003256\n\n\n\n##########\nFile path: cpp/src/gandiva/to_date_functions_holder.h\n##########\n@@ -0,0 +1,253 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/value_parsing.h\"\n+#include \"gandiva/date_utils.h\"\n+#include \"gandiva/execution_context.h\"\n+#include \"gandiva/function_holder.h\"\n+#include \"gandiva/node.h\"\n+#include \"gandiva/visibility.h\"\n+\n+namespace gandiva {\n+\n+/// Function Holder that is father for the class that executes `\n+/// 'to_time', 'to_date', 'to_timestamp' and 'unix_timestamp' functions\n+template <typename HOLDER_TYPE>\n+class GANDIVA_EXPORT ToDateFunctionsHolder : public FunctionHolder {\n+ public:\n+  ~ToDateFunctionsHolder() override = default;\n+\n+  /// Return true if the data matches the pattern.\n+  int64_t operator()(ExecutionContext* context, const char* data, int data_len,\n+                     bool in_valid, bool* out_valid) {\n+    *out_valid = false;\n+    if (!in_valid) {\n+      return 0;\n+    }\n+    // Issues\n+    // 1. processes date that do not match the format.\n+    // 2. does not process time in format +08:00 (or) id.\n+    int64_t unit_time_since_epoch = 0;\n+    if (!::arrow::internal::ParseTimestampStrptime(data, data_len, pattern_.c_str(),\n+                                                   /*ignore_time_in_day=*/ignore_time_,\n+                                                   /*allow_trailing_chars=*/true,\n+                                                   time_unit_, &unit_time_since_epoch)) {\n+      return_error(context, data, data_len);\n+      return 0;\n+    }\n+\n+    *out_valid = true;\n+\n+    if (time_unit_ == ::arrow::TimeUnit::SECOND) {\n+      return unit_time_since_epoch * 1000;\n+    }\n+\n+    return unit_time_since_epoch;\n+  }\n+\n+ protected:\n+  ToDateFunctionsHolder(std::string pattern, int32_t suppress_errors, bool ignore_time,\n+                        ::arrow::TimeUnit::type time_unit)\n+      : pattern_(std::move(pattern)),\n+        suppress_errors_(suppress_errors),\n+        ignore_time_(ignore_time),\n+        time_unit_(time_unit) {}\n+\n+  std::string pattern_;  // date format string\n+\n+  int32_t suppress_errors_;  // should throw exception on runtime errors\n+\n+  bool ignore_time_;  // if the hour, minutes and secs must be ignored during formatting\n+\n+  ::arrow::TimeUnit::type time_unit_;\n+\n+  void return_error(ExecutionContext* context, const char* data, int data_len) {\n+    if (suppress_errors_ == 1) {\n+      return;\n+    }\n+\n+    std::string err_msg =\n+        \"Error parsing value \" + std::string(data, data_len) + \" for given format.\";\n+    context->set_error_msg(err_msg.c_str());\n+  }\n+\n+  static Status Make(const FunctionNode& node, std::shared_ptr<HOLDER_TYPE>* holder,\n+                     const std::string& function_name) {\n+    if (node.children().size() != 2 && node.children().size() != 3) {\n+      return Status::Invalid(function_name +\n+                             \" function requires two or three parameters\");\n+    }\n+\n+    auto literal_pattern = dynamic_cast<LiteralNode*>(node.children().at(1).get());\n+    if (literal_pattern == NULLPTR) {\n+      return Status::Invalid(function_name +\n+                             \" function requires a literal as the second parameter\");\n+    }\n+\n+    auto literal_type = literal_pattern->return_type()->id();\n+    if (literal_type != arrow::Type::STRING && literal_type != arrow::Type::BINARY) {\n+      return Status::Invalid(\n+          function_name + \" function requires a string literal as the second parameter\");\n+    }\n+    auto pattern = arrow::util::get<std::string>(literal_pattern->holder());\n+\n+    int suppress_errors = 0;\n+    if (node.children().size() == 3) {\n+      auto literal_suppress_errors =\n+          dynamic_cast<LiteralNode*>(node.children().at(2).get());\n+      if (literal_suppress_errors == NULLPTR) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+\n+      literal_type = literal_suppress_errors->return_type()->id();\n+      if (literal_type != arrow::Type::INT32) {\n+        return Status::Invalid(\"The (optional) third parameter to \" + function_name +\n+                               \" function needs to be an integer \"\n+                               \"literal to indicate whether to suppress the error\");\n+      }\n+      suppress_errors = arrow::util::get<int>(literal_suppress_errors->holder());\n+    }\n+\n+    return Make(pattern, suppress_errors, holder);\n+  }\n+\n+  static Status Make(const std::string& sql_pattern, int32_t suppress_errors,\n+                     std::shared_ptr<HOLDER_TYPE>* holder) {\n+    std::shared_ptr<std::string> transformed_pattern;\n+    ARROW_RETURN_NOT_OK(DateUtils::ToInternalFormat(sql_pattern, &transformed_pattern));\n+    auto lholder = std::shared_ptr<HOLDER_TYPE>(\n+        new HOLDER_TYPE(*(transformed_pattern.get()), suppress_errors));\n+    *holder = lholder;\n+    return Status::OK();\n+  }\n+};\n+\n+/// Function Holder for SQL 'to_date'\n+class GANDIVA_EXPORT ToDateHolder : public gandiva::ToDateFunctionsHolder<ToDateHolder> {\n+ public:\n+  ~ToDateHolder() override = default;\n+\n+  ToDateHolder(const std::string& pattern, int32_t suppress_errors)\n+      : ToDateFunctionsHolder<ToDateHolder>(pattern, suppress_errors, true,\n+                                            ::arrow::TimeUnit::SECOND) {}\n\nReview comment:\n       I changed to return in millis\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-08T18:52:05.865+0000",
                    "updated": "2021-04-08T18:52:05.865+0000",
                    "started": "2021-04-08T18:52:05.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "579467",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/581817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-818792951\n\n\n   @projjal I checked that all functions that parse dates in C++, as the **strptime**(that is used by the [arrow functions that checks if the function matches a date](https://github.com/apache/arrow/blob/c2adaad3855a470c33b24189641008726ee63eed/cpp/src/arrow/util/value_parsing.h#L663) use the second as the maximum granularity. You said to correct the limitation about the milliseconds in the Pull Request if possible but I don't know any function or library that can replace **strptime** for casting dates. Do you have any tip?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-13T14:44:08.172+0000",
                    "updated": "2021-04-13T14:44:08.172+0000",
                    "started": "2021-04-13T14:44:08.172+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "581817",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/590992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "projjal commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-829245533\n\n\n   @anthonylouisbsb  Does the functions accept pattern like 'MM.YYYY' ?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-29T13:38:23.788+0000",
                    "updated": "2021-04-29T13:38:23.788+0000",
                    "started": "2021-04-29T13:38:23.788+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "590992",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/592114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-831189782\n\n\n   > @anthonylouisbsb Does the functions accept pattern like 'MM.YYYY' ?\r\n   @projjal I tested some patterns that are allowed in Java and they are not working, but I found a library that is used https://unicode-org.github.io/icu/userguide/datetime/ to parse dates and the format is similar to the implemented in Java. I am implementing it on code\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T11:06:10.688+0000",
                    "updated": "2021-05-03T11:06:10.688+0000",
                    "started": "2021-05-03T11:06:10.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592114",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/592115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb edited a comment on pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877#issuecomment-831189782\n\n\n   > @anthonylouisbsb Does the functions accept pattern like 'MM.YYYY' ?\r\n   \r\n   @projjal I tested some patterns that are allowed in Java and they are not working, but I found a library that is used https://unicode-org.github.io/icu/userguide/datetime/ to parse dates and the format is similar to the implemented in Java. I am implementing it on code\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-03T11:06:23.996+0000",
                    "updated": "2021-05-03T11:06:23.996+0000",
                    "started": "2021-05-03T11:06:23.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "592115",
                    "issueId": "13369317"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/worklog/742277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb closed pull request #9877:\nURL: https://github.com/apache/arrow/pull/9877\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-16T12:47:33.118+0000",
                    "updated": "2022-03-16T12:47:33.118+0000",
                    "started": "2022-03-16T12:47:33.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "742277",
                    "issueId": "13369317"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6151ee95[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d9be4ae[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@acc3584[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@68100ee7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@259cfb2d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7b13dcab[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1098b658[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7897e59a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a903c36[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5f03494b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@afc1e85[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4d808175[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 14:04:26 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12189/watchers",
            "watchCount": 3,
            "isWatching": true
        },
        "created": "2021-04-02T14:48:24.000+0000",
        "updated": "2022-07-12T14:04:26.000+0000",
        "timeoriginalestimate": null,
        "description": "The function has similar behavior to the existent\u00a0*TO_DATE([string] given_text, [literal_string] format)* function, but it returns the information about the hours, minutes, seconds, and milliseconds in the response.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement TO_TIME, TO_TIMESTAMP, UNIX_TIMESTAMP and IS_DATE functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/comment/17314958",
                    "id": "17314958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anthonylouis",
                        "name": "anthonylouis",
                        "key": "anthonylouis",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=anthonylouis&avatarId=46146",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=anthonylouis&avatarId=46146",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=anthonylouis&avatarId=46146",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=anthonylouis&avatarId=46146"
                        },
                        "displayName": "Anthony Louis Gotlib Ferreira",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I will implement the\u00a0*TO_TIMESTAMP([string] given_text, [literal_string] format)*\u00a0function in the same Pull Request to, as the implementation is similar to the TO_TIME and TO_DATE, just the return is different.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anthonylouis",
                        "name": "anthonylouis",
                        "key": "anthonylouis",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=anthonylouis&avatarId=46146",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=anthonylouis&avatarId=46146",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=anthonylouis&avatarId=46146",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=anthonylouis&avatarId=46146"
                        },
                        "displayName": "Anthony Louis Gotlib Ferreira",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-05T16:36:16.003+0000",
                    "updated": "2021-04-05T16:36:16.003+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/comment/17315916",
                    "id": "17315916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anthonylouis",
                        "name": "anthonylouis",
                        "key": "anthonylouis",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=anthonylouis&avatarId=46146",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=anthonylouis&avatarId=46146",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=anthonylouis&avatarId=46146",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=anthonylouis&avatarId=46146"
                        },
                        "displayName": "Anthony Louis Gotlib Ferreira",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I added in the same Pull Request, the implementation for UNIX_TIMESTAMP functions:\r\n * *UNIX_TIMESTAMP([string] timestring, [string] format)* - Gives the Unix time for the date in timestring using the format specified in\u00a0format.\r\n * *UNIX_TIMESTAMP([string] timestring)* - Gives the Unix time for the date in timestring assuming a format of \u2018YYYY-MM-DD HH24:MI:SS\u2019.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=anthonylouis",
                        "name": "anthonylouis",
                        "key": "anthonylouis",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=anthonylouis&avatarId=46146",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=anthonylouis&avatarId=46146",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=anthonylouis&avatarId=46146",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=anthonylouis&avatarId=46146"
                        },
                        "displayName": "Anthony Louis Gotlib Ferreira",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-07T02:31:59.233+0000",
                    "updated": "2021-04-07T02:31:59.233+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/comment/17317383",
                    "id": "17317383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
                        "name": "jpedroantunes",
                        "key": "jpedroantunes",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
                        },
                        "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I added in the same Pull Request, the implementation for IS_DATE functions:\r\n * *IS_DATE([string]\u00a0timestring,\u00a0[string]\u00a0format)*\u00a0- Returns true if the string is castable for the format specified.\r\n * *IS_DATE**([string]\u00a0timestring)*\u00a0- Returns true if the string is castable for the default format\u00a0 \u2018YYYY-MM-DD\u2019.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
                        "name": "jpedroantunes",
                        "key": "jpedroantunes",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
                        },
                        "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-04-08T18:02:09.419+0000",
                    "updated": "2021-04-08T18:02:09.419+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13369317/comment/17565607",
                    "id": "17565607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "body": "This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=toddfarmer",
                        "name": "toddfarmer",
                        "key": "JIRAUSER288796",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39935",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39935",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39935",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39935"
                        },
                        "displayName": "Todd Farmer",
                        "active": true,
                        "timeZone": "America/Boise"
                    },
                    "created": "2022-07-12T14:04:26.175+0000",
                    "updated": "2022-07-12T14:04:26.175+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0phkg:",
        "customfield_12314139": null
    }
}