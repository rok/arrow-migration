{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13181205",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205",
    "key": "ARROW-3121",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12541745",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12541745",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13181204",
                    "key": "ARROW-3120",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181204",
                    "fields": {
                        "summary": "[C++] Parallelize execution of ScalarAggregateFunction",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12550831",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12550831",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13206651",
                    "key": "ARROW-4124",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13206651",
                    "fields": {
                        "summary": "[C++] Abstract aggregation kernel API",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3121/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 48,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/200979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708\n \n \n   Implements the mean (average) kernel aggregates on numeric columns. The final type is always a double. Refactored the Sum kernel implementation to share common parts, notably the consume part is identical. Only the Finalize and output type differ.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-20T00:00:37.418+0000",
                    "updated": "2019-02-20T00:00:37.418+0000",
                    "started": "2019-02-20T00:00:37.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "200979",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/202374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#issuecomment-466270013\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=h1) Report\n   > Merging [#3708](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/4f15f41e4d3ebe8ad177a09d257cbbaeb20b48d1?src=pr&el=desc) will **increase** coverage by `0.18%`.\n   > The diff coverage is `94.21%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3708/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3708      +/-   ##\n   ==========================================\n   + Coverage   87.49%   87.68%   +0.18%     \n   ==========================================\n     Files         627      703      +76     \n     Lines       80412    85824    +5412     \n     Branches        0     1200    +1200     \n   ==========================================\n   + Hits        70357    75254    +4897     \n   - Misses       9950    10456     +506     \n   - Partials      105      114       +9\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/bit-util.h](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmg=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `98.9% <100%> (+0.01%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/aggregate-test.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvYWdncmVnYXRlLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/test-util.h](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL3Rlc3QtdXRpbC5o) | `94.73% <100%> (+4.73%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/sum.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvc3VtLmNj) | `87.8% <66.66%> (-4.79%)` | :arrow_down: |\n   | [cpp/src/arrow/compute/kernels/mean.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvbWVhbi5jYw==) | `87.8% <87.8%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/kernels/sum-internal.h](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvc3VtLWludGVybmFsLmg=) | `93.84% <93.84%> (\u00f8)` | |\n   | [js/src/compute/dataframe.ts](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-anMvc3JjL2NvbXB1dGUvZGF0YWZyYW1lLnRz) | `92.15% <0%> (\u00f8)` | |\n   | [js/src/util/recordbatch.ts](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvcmVjb3JkYmF0Y2gudHM=) | `98.18% <0%> (\u00f8)` | |\n   | ... and [74 more](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=footer). Last update [4f15f41...02a0bcf](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T04:31:38.657+0000",
                    "updated": "2019-02-22T04:31:38.657+0000",
                    "started": "2019-02-22T04:31:38.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202374",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/202692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#issuecomment-466438281\n \n \n   I think the nodejs failure is unrelated and this is ready to merge.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T15:35:17.526+0000",
                    "updated": "2019-02-22T15:35:17.526+0000",
                    "started": "2019-02-22T15:35:17.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202692",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/202693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#issuecomment-466438482\n \n \n   @bkietz @pitrou @emkornfield This is ready to review.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T15:35:52.186+0000",
                    "updated": "2019-02-22T15:35:52.186+0000",
                    "started": "2019-02-22T15:35:52.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202693",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#issuecomment-466270013\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=h1) Report\n   > Merging [#3708](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/9814605c25ab0e8736bae9ccad89c334647da660?src=pr&el=desc) will **increase** coverage by `0.02%`.\n   > The diff coverage is `94.21%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3708/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3708      +/-   ##\n   ==========================================\n   + Coverage   87.65%   87.68%   +0.02%     \n   ==========================================\n     Files         701      703       +2     \n     Lines       85747    85824      +77     \n     Branches     1200     1200              \n   ==========================================\n   + Hits        75162    75254      +92     \n   + Misses      10466    10456      -10     \n   + Partials      119      114       -5\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/util/bit-util.h](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmg=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `98.9% <100%> (+0.01%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/aggregate-test.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvYWdncmVnYXRlLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/test-util.h](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL3Rlc3QtdXRpbC5o) | `94.73% <100%> (+4.73%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/sum.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvc3VtLmNj) | `87.8% <66.66%> (-4.79%)` | :arrow_down: |\n   | [cpp/src/arrow/compute/kernels/mean.cc](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvbWVhbi5jYw==) | `87.8% <87.8%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/kernels/sum-internal.h](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvc3VtLWludGVybmFsLmg=) | `93.84% <93.84%> (\u00f8)` | |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | ... and [20 more](https://codecov.io/gh/apache/arrow/pull/3708/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=footer). Last update [9814605...2d4c2ba](https://codecov.io/gh/apache/arrow/pull/3708?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T12:37:03.927+0000",
                    "updated": "2019-02-25T12:37:03.927+0000",
                    "started": "2019-02-25T12:37:03.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203629",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r259802208\n \n \n\n ##########\n File path: cpp/src/arrow/compute/test-util.h\n ##########\n @@ -66,6 +66,44 @@ std::shared_ptr<Array> _MakeArray(const std::shared_ptr<DataType>& type,\n   return result;\n }\n \n+template <typename Type, typename Enable = void>\n+struct DatumEqual {\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {}\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type, typename std::enable_if<IsFloatingPoint<Type>::value>::type> {\n+  static constexpr double kArbitraryDoubleErrorBound = 1.0;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {\n+    ASSERT_EQ(lhs.kind(), rhs.kind());\n+    if (lhs.kind() == Datum::SCALAR) {\n \n Review comment:\n   Should assert false or abort on other datum kinds, no?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T12:38:13.376+0000",
                    "updated": "2019-02-25T12:38:13.376+0000",
                    "started": "2019-02-25T12:38:13.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203631",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r259917476\n \n \n\n ##########\n File path: cpp/src/arrow/compute/test-util.h\n ##########\n @@ -66,6 +66,44 @@ std::shared_ptr<Array> _MakeArray(const std::shared_ptr<DataType>& type,\n   return result;\n }\n \n+template <typename Type, typename Enable = void>\n+struct DatumEqual {\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {}\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type, typename std::enable_if<IsFloatingPoint<Type>::value>::type> {\n+  static constexpr double kArbitraryDoubleErrorBound = 1.0;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {\n+    ASSERT_EQ(lhs.kind(), rhs.kind());\n+    if (lhs.kind() == Datum::SCALAR) {\n \n Review comment:\n   https://issues.apache.org/jira/browse/ARROW-4673\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T16:50:24.893+0000",
                    "updated": "2019-02-25T16:50:24.893+0000",
                    "started": "2019-02-25T16:50:24.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203745",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r259944578\n \n \n\n ##########\n File path: cpp/src/arrow/compute/test-util.h\n ##########\n @@ -66,6 +66,44 @@ std::shared_ptr<Array> _MakeArray(const std::shared_ptr<DataType>& type,\n   return result;\n }\n \n+template <typename Type, typename Enable = void>\n+struct DatumEqual {\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {}\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type, typename std::enable_if<IsFloatingPoint<Type>::value>::type> {\n+  static constexpr double kArbitraryDoubleErrorBound = 1.0;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {\n+    ASSERT_EQ(lhs.kind(), rhs.kind());\n+    if (lhs.kind() == Datum::SCALAR) {\n \n Review comment:\n   I'll also try to include this while implementing ARROW-3123.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T17:54:37.793+0000",
                    "updated": "2019-02-25T17:54:37.793+0000",
                    "started": "2019-02-25T17:54:37.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203798",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r259975650\n \n \n\n ##########\n File path: cpp/src/arrow/compute/test-util.h\n ##########\n @@ -66,6 +66,44 @@ std::shared_ptr<Array> _MakeArray(const std::shared_ptr<DataType>& type,\n   return result;\n }\n \n+template <typename Type, typename Enable = void>\n+struct DatumEqual {\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {}\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type, typename std::enable_if<IsFloatingPoint<Type>::value>::type> {\n+  static constexpr double kArbitraryDoubleErrorBound = 1.0;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {\n+    ASSERT_EQ(lhs.kind(), rhs.kind());\n+    if (lhs.kind() == Datum::SCALAR) {\n+      auto left = internal::checked_cast<const ScalarType*>(lhs.scalar().get());\n+      auto right = internal::checked_cast<const ScalarType*>(rhs.scalar().get());\n+      ASSERT_EQ(left->is_valid, right->is_valid);\n+      ASSERT_EQ(left->type->id(), right->type->id());\n+      ASSERT_NEAR(left->value, right->value, kArbitraryDoubleErrorBound);\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type,\n+                  typename std::enable_if<!IsFloatingPoint<Type>::RolfCopter>::type> {\n \n Review comment:\n   :smile: \r\n   \r\n   I think you want `typename std::enable_if<!IsFloatingPoint<Type>::value>::type`, though\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T19:12:47.871+0000",
                    "updated": "2019-02-25T19:12:47.871+0000",
                    "started": "2019-02-25T19:12:47.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203853",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r259978786\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n \n Review comment:\n   This (and `ConsumeSparse`, `ConsumeTiny`) looks pretty handy, maybe later we could refactor it into `BitUtil::VisitBitmap()` or so\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T19:20:55.179+0000",
                    "updated": "2019-02-25T19:20:55.179+0000",
                    "started": "2019-02-25T19:20:55.179+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203855",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/203865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r259990631\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n+    }\n+\n+    local.count = length;\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeTiny(const ArrayType& array) const {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values = array.raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.sum += values[i];\n+        local.count++;\n+      }\n+      reader.Next();\n+    }\n+\n+    return local;\n+  }\n+\n+  inline StateType UnrolledSum(uint8_t bits, const CType* values) const {\n+    StateType local;\n+\n+    if (bits < 0xFF) {\n+#define SUM_SHIFT(ITEM) values[ITEM] * static_cast<CType>(((bits >> ITEM) & 1U))\n \n Review comment:\n   crazy edge case: if we're summing floating point and one of the null masked values happens to be `NaN` then multiplying by zero will not prevent the sum from also being `NaN`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-25T19:51:19.279+0000",
                    "updated": "2019-02-25T19:51:19.279+0000",
                    "started": "2019-02-25T19:51:19.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203865",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260091432\n \n \n\n ##########\n File path: cpp/src/arrow/compute/test-util.h\n ##########\n @@ -66,6 +66,44 @@ std::shared_ptr<Array> _MakeArray(const std::shared_ptr<DataType>& type,\n   return result;\n }\n \n+template <typename Type, typename Enable = void>\n+struct DatumEqual {\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {}\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type, typename std::enable_if<IsFloatingPoint<Type>::value>::type> {\n+  static constexpr double kArbitraryDoubleErrorBound = 1.0;\n+  using ScalarType = typename TypeTraits<Type>::ScalarType;\n+\n+  static void EnsureEqual(const Datum& lhs, const Datum& rhs) {\n+    ASSERT_EQ(lhs.kind(), rhs.kind());\n+    if (lhs.kind() == Datum::SCALAR) {\n+      auto left = internal::checked_cast<const ScalarType*>(lhs.scalar().get());\n+      auto right = internal::checked_cast<const ScalarType*>(rhs.scalar().get());\n+      ASSERT_EQ(left->is_valid, right->is_valid);\n+      ASSERT_EQ(left->type->id(), right->type->id());\n+      ASSERT_NEAR(left->value, right->value, kArbitraryDoubleErrorBound);\n+    }\n+  }\n+};\n+\n+template <typename Type>\n+struct DatumEqual<Type,\n+                  typename std::enable_if<!IsFloatingPoint<Type>::RolfCopter>::type> {\n \n Review comment:\n   ugh, shame on me! Clearly something is wrong then.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T01:26:17.196+0000",
                    "updated": "2019-02-26T01:26:17.196+0000",
                    "started": "2019-02-26T01:26:17.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204010",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260096987\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n+    }\n+\n+    local.count = length;\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeTiny(const ArrayType& array) const {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values = array.raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.sum += values[i];\n+        local.count++;\n+      }\n+      reader.Next();\n+    }\n+\n+    return local;\n+  }\n+\n+  inline StateType UnrolledSum(uint8_t bits, const CType* values) const {\n+    StateType local;\n+\n+    if (bits < 0xFF) {\n+#define SUM_SHIFT(ITEM) values[ITEM] * static_cast<CType>(((bits >> ITEM) & 1U))\n \n Review comment:\n   Good catch, I'll see what I can do without too much change.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T01:56:08.161+0000",
                    "updated": "2019-02-26T01:56:08.161+0000",
                    "started": "2019-02-26T01:56:08.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204017",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260117671\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/mean.h\n ##########\n @@ -0,0 +1,66 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FunctionContext;\n+class AggregateFunction;\n+\n+ARROW_EXPORT\n+std::shared_ptr<AggregateFunction> MakeMeanAggregateFunction(const DataType& type,\n+                                                             FunctionContext* context);\n+\n+/// \\brief Compute the mean of a numeric array.\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] value datum to compute the mean, expecting Array\n+/// \\param[out] out resulting datum\n \n Review comment:\n   Can you be more descriptive?  Scalar double value?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:46.359+0000",
                    "updated": "2019-02-26T04:30:46.359+0000",
                    "started": "2019-02-26T04:30:46.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204060",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260117830\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n \n Review comment:\n   can this be pushed down to type traits?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:46.653+0000",
                    "updated": "2019-02-26T04:30:46.653+0000",
                    "started": "2019-02-26T04:30:46.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204061",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260119369\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n+    }\n+\n+    local.count = length;\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeTiny(const ArrayType& array) const {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values = array.raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.sum += values[i];\n+        local.count++;\n+      }\n+      reader.Next();\n+    }\n+\n+    return local;\n+  }\n+\n+  inline StateType UnrolledSum(uint8_t bits, const CType* values) const {\n+    StateType local;\n+\n+    if (bits < 0xFF) {\n \n Review comment:\n   does it change the performance characteristics if you check bits > 0 and have a quick bailout?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:46.713+0000",
                    "updated": "2019-02-26T04:30:46.713+0000",
                    "started": "2019-02-26T04:30:46.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204062",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260118129\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n \n Review comment:\n   i assume this gets vectorized automatically?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:46.739+0000",
                    "updated": "2019-02-26T04:30:46.739+0000",
                    "started": "2019-02-26T04:30:46.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204063",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260118969\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n+    }\n+\n+    local.count = length;\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeTiny(const ArrayType& array) const {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values = array.raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.sum += values[i];\n+        local.count++;\n+      }\n+      reader.Next();\n+    }\n+\n+    return local;\n+  }\n+\n+  inline StateType UnrolledSum(uint8_t bits, const CType* values) const {\n+    StateType local;\n+\n+    if (bits < 0xFF) {\n+#define SUM_SHIFT(ITEM) values[ITEM] * static_cast<CType>(((bits >> ITEM) & 1U))\n \n Review comment:\n   What is the performance diff of doing ternary operator?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:46.787+0000",
                    "updated": "2019-02-26T04:30:46.787+0000",
                    "started": "2019-02-26T04:30:46.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204064",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260119201\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n+    }\n+\n+    local.count = length;\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeTiny(const ArrayType& array) const {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values = array.raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.sum += values[i];\n+        local.count++;\n+      }\n+      reader.Next();\n+    }\n+\n+    return local;\n+  }\n+\n+  inline StateType UnrolledSum(uint8_t bits, const CType* values) const {\n+    StateType local;\n+\n+    if (bits < 0xFF) {\n+#define SUM_SHIFT(ITEM) values[ITEM] * static_cast<CType>(((bits >> ITEM) & 1U))\n \n Review comment:\n   I'm not seeing a reason that this can't be an inline function instead of a macro? Does it change the performance characteristics?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:47.074+0000",
                    "updated": "2019-02-26T04:30:47.074+0000",
                    "started": "2019-02-26T04:30:47.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204065",
                    "issueId": "13181205"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/worklog/204066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3708: ARROW-3121: [C++] Mean aggregate kernel\nURL: https://github.com/apache/arrow/pull/3708#discussion_r260119426\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sum-internal.h\n ##########\n @@ -0,0 +1,204 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <type_traits>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/aggregate.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+\n+namespace compute {\n+\n+// Find the largest compatible primitive type for a primitive type.\n+template <typename I, typename Enable = void>\n+struct FindAccumulatorType {};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_signed_integer<I>> {\n+  using Type = Int64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_unsigned_integer<I>> {\n+  using Type = UInt64Type;\n+};\n+\n+template <typename I>\n+struct FindAccumulatorType<I, enable_if_floating_point<I>> {\n+  using Type = DoubleType;\n+};\n+\n+template <typename ArrowType, typename StateType>\n+class SumAggregateFunction final : public AggregateFunctionStaticState<StateType> {\n+  using CType = typename TypeTraits<ArrowType>::CType;\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+\n+  static constexpr int64_t kTinyThreshold = 32;\n+  static_assert(kTinyThreshold > 18,\n+                \"ConsumeSparse requires at least 18 elements to fit 3 bytes\");\n+\n+ public:\n+  Status Consume(const Array& input, StateType* state) const override {\n+    const ArrayType& array = static_cast<const ArrayType&>(input);\n+\n+    if (input.null_count() == 0) {\n+      *state = ConsumeDense(array);\n+    } else if (input.length() <= kTinyThreshold) {\n+      // In order to simplify ConsumeSparse implementation (requires at least 3\n+      // bytes of bitmap data), small arrays are handled differently.\n+      *state = ConsumeTiny(array);\n+    } else {\n+      *state = ConsumeSparse(array);\n+    }\n+\n+    return Status::OK();\n+  }\n+\n+  Status Merge(const StateType& src, StateType* dst) const override {\n+    *dst += src;\n+    return Status::OK();\n+  }\n+\n+  Status Finalize(const StateType& src, Datum* output) const override {\n+    *output = src.Finalize();\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return StateType::out_type(); }\n+\n+ private:\n+  StateType ConsumeDense(const ArrayType& array) const {\n+    StateType local;\n+\n+    const auto values = array.raw_values();\n+    const int64_t length = array.length();\n+    for (int64_t i = 0; i < length; i++) {\n+      local.sum += values[i];\n+    }\n+\n+    local.count = length;\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeTiny(const ArrayType& array) const {\n+    StateType local;\n+\n+    internal::BitmapReader reader(array.null_bitmap_data(), array.offset(),\n+                                  array.length());\n+    const auto values = array.raw_values();\n+    for (int64_t i = 0; i < array.length(); i++) {\n+      if (reader.IsSet()) {\n+        local.sum += values[i];\n+        local.count++;\n+      }\n+      reader.Next();\n+    }\n+\n+    return local;\n+  }\n+\n+  inline StateType UnrolledSum(uint8_t bits, const CType* values) const {\n+    StateType local;\n+\n+    if (bits < 0xFF) {\n+#define SUM_SHIFT(ITEM) values[ITEM] * static_cast<CType>(((bits >> ITEM) & 1U))\n+      // Some nulls\n+      local.sum += SUM_SHIFT(0);\n+      local.sum += SUM_SHIFT(1);\n+      local.sum += SUM_SHIFT(2);\n+      local.sum += SUM_SHIFT(3);\n+      local.sum += SUM_SHIFT(4);\n+      local.sum += SUM_SHIFT(5);\n+      local.sum += SUM_SHIFT(6);\n+      local.sum += SUM_SHIFT(7);\n+      local.count += BitUtil::kBytePopcount[bits];\n+#undef SUM_SHIFT\n+    } else {\n+      // No nulls\n+      for (size_t i = 0; i < 8; i++) {\n+        local.sum += values[i];\n+      }\n+      local.count += 8;\n+    }\n+\n+    return local;\n+  }\n+\n+  StateType ConsumeSparse(const ArrayType& array) const {\n+    StateType local;\n+\n+    // Sliced bitmaps on non-byte positions induce problem with the branchless\n \n Review comment:\n   Thank you for the thorough documentation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T04:30:47.096+0000",
                    "updated": "2019-02-26T04:30:47.096+0000",
                    "started": "2019-02-26T04:30:47.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204066",
                    "issueId": "13181205"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 27000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@42ea0f66[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f13d25f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cec09a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4decbb4f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fbb91b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c16aed8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@201b3fcc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@805de43[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bc0a8aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4219a964[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b850bb4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1dd42d41[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Feb 28 01:34:54 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-28T01:34:54.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3121/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-26T21:47:46.000+0000",
        "updated": "2019-02-28T01:35:05.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++]  Mean kernel aggregate",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13181205/comment/16779990",
                    "id": "16779990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3708\n[https://github.com/apache/arrow/pull/3708]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-28T01:34:54.754+0000",
                    "updated": "2019-02-28T01:34:54.754+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xfkv:",
        "customfield_12314139": null
    }
}