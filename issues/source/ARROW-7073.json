{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13266526",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526",
    "key": "ARROW-7073",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12573496",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12573496",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13265866",
                    "key": "ARROW-7048",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13265866",
                    "fields": {
                        "summary": "[Java] Support for combining multiple vectors under VectorSchemaRoot",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12573497",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12573497",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "inwardIssue": {
                    "id": "13266525",
                    "key": "ARROW-7072",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266525",
                    "fields": {
                        "summary": "[Java] Support concating validity bits efficiently",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fan_li_ya",
            "name": "fan_li_ya",
            "key": "fan_li_ya",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Liya Fan",
            "active": true,
            "timeZone": "Asia/Shanghai"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7073/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/350389",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916\n \n \n   We need a way to copy vector values in batch. Currently, we have copyFrom and copyFromSafe APIs. However, they are not enough, as copying values individually is not performant.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-27T13:20:42.061+0000",
                    "updated": "2019-11-27T13:20:42.061+0000",
                    "started": "2019-11-27T13:20:42.060+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "350389",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/350393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#issuecomment-559088011\n \n \n   https://issues.apache.org/jira/browse/ARROW-7073\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-27T13:30:50.972+0000",
                    "updated": "2019-11-27T13:30:50.972+0000",
                    "started": "2019-11-27T13:30:50.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "350393",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365110259\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.set(i, i);\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.set(i, i + length1);\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.setSafe(i, (\"a\" + i).getBytes());\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.setSafe(i, (\"a\" + (i + length1)).getBytes());\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(\"a\" + i, new String(target.get(i)));\n+      }\n+    }\n+  }\n+\n+  private ListVector createListVector(int start, int end, int step) {\n+    final int listLength = (end - start) / step;\n+\n+    ListVector listVector = ListVector.empty(\"list vector\", allocator);\n+\n+    Types.MinorType type = Types.MinorType.INT;\n+    listVector.addOrGetVector(FieldType.nullable(type.getType()));\n+\n+    listVector.allocateNew();\n+\n+    IntVector dataVector = (IntVector) listVector.getDataVector();\n+\n+    // set underlying vectors\n+    for (int i = 0; i < end - start; i++) {\n+      dataVector.set(i, i + start);\n+    }\n+    dataVector.setValueCount(end - start);\n+\n+    // set offset buffer\n+    for (int i = 0; i < listLength; i++) {\n+      BitVectorHelper.setBit(listVector.getValidityBuffer(), i);\n+      listVector.getOffsetBuffer().setInt(i * OFFSET_WIDTH, i * step);\n+      listVector.getOffsetBuffer().setInt((i + 1) * OFFSET_WIDTH, (i + 1) * step);\n+    }\n+    listVector.setLastSet(listLength - 1);\n+    listVector.setValueCount(listLength);\n+\n+    return listVector;\n+  }\n+\n+  @Test\n+  public void testAppendListVector() {\n+    try (ListVector target = createListVector(0, 10, 2);\n+         ListVector delta = createListVector(10, 20, 5)) {\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(7, target.getValueCount());\n+\n+      int curValue = 0;\n+      for (int i = 0; i < 5; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(2, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+\n+      for (int i = 5; i < 7; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(5, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+    }\n+  }\n+\n+  private FixedSizeListVector createFixedSizeListVector(int start, int end, int step) {\n \n Review comment:\n   I think this method should be eliminated and a method should be added to the test data populators that can take literal values.  It would make the tests easier to read and understand.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T08:01:37.966+0000",
                    "updated": "2020-01-10T08:01:37.966+0000",
                    "started": "2020-01-10T08:01:37.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369693",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365110414\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.set(i, i);\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.set(i, i + length1);\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.setSafe(i, (\"a\" + i).getBytes());\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.setSafe(i, (\"a\" + (i + length1)).getBytes());\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(\"a\" + i, new String(target.get(i)));\n+      }\n+    }\n+  }\n+\n+  private ListVector createListVector(int start, int end, int step) {\n \n Review comment:\n   see comment below on taking literal values instead of created values in loops.  having a seperate method here make it harded to understand the actual test.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T08:02:15.391+0000",
                    "updated": "2020-01-10T08:02:15.391+0000",
                    "started": "2020-01-10T08:02:15.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369694",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365110715\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.set(i, i);\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.set(i, i + length1);\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      for (int i = 0; i < length1; i++) {\n \n Review comment:\n   don't use loops.  Instead use or add methods to the population helper methods.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T08:03:24.644+0000",
                    "updated": "2020-01-10T08:03:24.644+0000",
                    "started": "2020-01-10T08:03:24.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369695",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369696",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365110895\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n \n Review comment:\n   use helper methods to populate values.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T08:03:58.918+0000",
                    "updated": "2020-01-10T08:03:58.918+0000",
                    "started": "2020-01-10T08:03:58.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369696",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365111359\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/VectorAppender.java\n ##########\n @@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import java.util.HashSet;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.TypeEqualsVisitor;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * Utility to append two vectors together.\n+ */\n+public class VectorAppender implements VectorVisitor<ValueVector, Void> {\n \n Review comment:\n   I think this class should probably not be public, instead there should be a public static method that uses this implementation and takes a variable length list of vectors to append.  I think this would be much easier to understand.  What do youthink?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T08:05:43.150+0000",
                    "updated": "2020-01-10T08:05:43.150+0000",
                    "started": "2020-01-10T08:05:43.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369697",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365168449\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/util/VectorAppender.java\n ##########\n @@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import java.util.HashSet;\n+\n+import org.apache.arrow.util.Preconditions;\n+import org.apache.arrow.vector.BaseFixedWidthVector;\n+import org.apache.arrow.vector.BaseVariableWidthVector;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.NullVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.compare.TypeEqualsVisitor;\n+import org.apache.arrow.vector.compare.VectorVisitor;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.NonNullableStructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+/**\n+ * Utility to append two vectors together.\n+ */\n+public class VectorAppender implements VectorVisitor<ValueVector, Void> {\n \n Review comment:\n   Sounds good to me. I will make it package private. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T10:29:00.410+0000",
                    "updated": "2020-01-10T10:29:00.410+0000",
                    "started": "2020-01-10T10:29:00.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369768",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365176656\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n \n Review comment:\n   Good suggestion, populating vectors with literals make the code more readable. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T10:48:57.335+0000",
                    "updated": "2020-01-10T10:48:57.335+0000",
                    "started": "2020-01-10T10:48:57.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369770",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/369771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365177687\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.set(i, i);\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.set(i, i + length1);\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      for (int i = 0; i < length1; i++) {\n \n Review comment:\n   Revised. Thank you. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-10T10:51:33.572+0000",
                    "updated": "2020-01-10T10:51:33.572+0000",
                    "started": "2020-01-10T10:51:33.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "369771",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/370569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365636876\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.set(i, i);\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.set(i, i + length1);\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.setSafe(i, (\"a\" + i).getBytes());\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.setSafe(i, (\"a\" + (i + length1)).getBytes());\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(\"a\" + i, new String(target.get(i)));\n+      }\n+    }\n+  }\n+\n+  private ListVector createListVector(int start, int end, int step) {\n+    final int listLength = (end - start) / step;\n+\n+    ListVector listVector = ListVector.empty(\"list vector\", allocator);\n+\n+    Types.MinorType type = Types.MinorType.INT;\n+    listVector.addOrGetVector(FieldType.nullable(type.getType()));\n+\n+    listVector.allocateNew();\n+\n+    IntVector dataVector = (IntVector) listVector.getDataVector();\n+\n+    // set underlying vectors\n+    for (int i = 0; i < end - start; i++) {\n+      dataVector.set(i, i + start);\n+    }\n+    dataVector.setValueCount(end - start);\n+\n+    // set offset buffer\n+    for (int i = 0; i < listLength; i++) {\n+      BitVectorHelper.setBit(listVector.getValidityBuffer(), i);\n+      listVector.getOffsetBuffer().setInt(i * OFFSET_WIDTH, i * step);\n+      listVector.getOffsetBuffer().setInt((i + 1) * OFFSET_WIDTH, (i + 1) * step);\n+    }\n+    listVector.setLastSet(listLength - 1);\n+    listVector.setValueCount(listLength);\n+\n+    return listVector;\n+  }\n+\n+  @Test\n+  public void testAppendListVector() {\n+    try (ListVector target = createListVector(0, 10, 2);\n+         ListVector delta = createListVector(10, 20, 5)) {\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(7, target.getValueCount());\n+\n+      int curValue = 0;\n+      for (int i = 0; i < 5; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(2, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+\n+      for (int i = 5; i < 7; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(5, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+    }\n+  }\n+\n+  private FixedSizeListVector createFixedSizeListVector(int start, int end, int step) {\n \n Review comment:\n   Good suggestion. I have rewritten the test cases with the test data populators. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-13T03:12:15.022+0000",
                    "updated": "2020-01-13T03:12:15.022+0000",
                    "started": "2020-01-13T03:12:15.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "370569",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/370570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r365636952\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,357 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.apache.arrow.vector.complex.BaseRepeatedValueVector.OFFSET_WIDTH;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BitVectorHelper;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.holders.NullableBigIntHolder;\n+import org.apache.arrow.vector.holders.NullableFloat4Holder;\n+import org.apache.arrow.vector.holders.NullableIntHolder;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.set(i, i);\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.set(i, i + length1);\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      for (int i = 0; i < length1; i++) {\n+        target.setSafe(i, (\"a\" + i).getBytes());\n+      }\n+      for (int i = 0; i < length2; i++) {\n+        delta.setSafe(i, (\"a\" + (i + length1)).getBytes());\n+      }\n+      target.setValueCount(length1);\n+      delta.setValueCount(length2);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(\"a\" + i, new String(target.get(i)));\n+      }\n+    }\n+  }\n+\n+  private ListVector createListVector(int start, int end, int step) {\n \n Review comment:\n   I have revised the test cases accordingly. Thanks. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-13T03:13:02.134+0000",
                    "updated": "2020-01-13T03:13:02.134+0000",
                    "started": "2020-01-13T03:13:02.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "370570",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/373416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r367779873\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+      ValueVectorDataPopulator.setVector(delta, 10, 11, 12, 13, 14);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      ValueVectorDataPopulator.setVector(target, \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\");\n+      ValueVectorDataPopulator.setVector(delta, \"a10\", \"a11\", \"a12\", \"a13\", \"a14\");\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(\"a\" + i, new String(target.get(i)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendListVector() {\n+    final int length1 = 5;\n+    final int length2 = 2;\n+    try (ListVector target = ListVector.empty(\"target\", allocator);\n+         ListVector delta = ListVector.empty(\"delta\", allocator)) {\n+\n+      target.allocateNew();\n+      ValueVectorDataPopulator.setVector(target,\n+          Arrays.asList(0, 1),\n+          Arrays.asList(2, 3),\n+          Arrays.asList(4, 5),\n+          Arrays.asList(6, 7),\n+          Arrays.asList(8, 9));\n+      assertEquals(length1, target.getValueCount());\n+\n+      delta.allocateNew();\n+      ValueVectorDataPopulator.setVector(delta,\n+          Arrays.asList(10, 11, 12, 13, 14),\n+          Arrays.asList(15, 16, 17, 18, 19));\n+      assertEquals(length2, delta.getValueCount());\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(7, target.getValueCount());\n+\n+      int curValue = 0;\n+      for (int i = 0; i < length1; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(2, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+\n+      for (int i = length1; i < length1 + length2; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(5, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendFixedSizeListVector() {\n+    try (FixedSizeListVector target = FixedSizeListVector.empty(\"target\", 5, allocator);\n+         FixedSizeListVector delta = FixedSizeListVector.empty(\"delta\", 5, allocator)) {\n+\n+      target.allocateNew();\n+      ValueVectorDataPopulator.setVector(target,\n+          Arrays.asList(0, 1, 2, 3, 4),\n+          Arrays.asList(5, 6, 7, 8, 9));\n+      assertEquals(2, target.getValueCount());\n+\n+      delta.allocateNew();\n+      ValueVectorDataPopulator.setVector(delta,\n+          Arrays.asList(10, 11, 12, 13, 14),\n+          Arrays.asList(15, 16, 17, 18, 19));\n+      assertEquals(2, delta.getValueCount());\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(4, target.getValueCount());\n+      int curValue = 0;\n+      for (int i = 0; i < target.getValueCount(); i++) {\n \n Review comment:\n   I thought I saw we have an assertVectorsEquals someplace in the code?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-17T05:57:04.830+0000",
                    "updated": "2020-01-17T05:57:04.830+0000",
                    "started": "2020-01-17T05:57:04.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "373416",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/373417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r367780084\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+      ValueVectorDataPopulator.setVector(delta, 10, 11, 12, 13, 14);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      ValueVectorDataPopulator.setVector(target, \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\");\n+      ValueVectorDataPopulator.setVector(delta, \"a10\", \"a11\", \"a12\", \"a13\", \"a14\");\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n \n Review comment:\n   use a ValueVectorDataPopulator here as well (maybe make the inputs above slightly shorter?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-17T05:58:11.666+0000",
                    "updated": "2020-01-17T05:58:11.666+0000",
                    "started": "2020-01-17T05:58:11.666+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "373417",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/374282",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r368288697\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+      ValueVectorDataPopulator.setVector(delta, 10, 11, 12, 13, 14);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      ValueVectorDataPopulator.setVector(target, \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\");\n+      ValueVectorDataPopulator.setVector(delta, \"a10\", \"a11\", \"a12\", \"a13\", \"a14\");\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(\"a\" + i, new String(target.get(i)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendListVector() {\n+    final int length1 = 5;\n+    final int length2 = 2;\n+    try (ListVector target = ListVector.empty(\"target\", allocator);\n+         ListVector delta = ListVector.empty(\"delta\", allocator)) {\n+\n+      target.allocateNew();\n+      ValueVectorDataPopulator.setVector(target,\n+          Arrays.asList(0, 1),\n+          Arrays.asList(2, 3),\n+          Arrays.asList(4, 5),\n+          Arrays.asList(6, 7),\n+          Arrays.asList(8, 9));\n+      assertEquals(length1, target.getValueCount());\n+\n+      delta.allocateNew();\n+      ValueVectorDataPopulator.setVector(delta,\n+          Arrays.asList(10, 11, 12, 13, 14),\n+          Arrays.asList(15, 16, 17, 18, 19));\n+      assertEquals(length2, delta.getValueCount());\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(7, target.getValueCount());\n+\n+      int curValue = 0;\n+      for (int i = 0; i < length1; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(2, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+\n+      for (int i = length1; i < length1 + length2; i++) {\n+        List<Integer> list = (List<Integer>) target.getObject(i);\n+        assertEquals(5, list.size());\n+        for (int j = 0; j < list.size(); j++) {\n+          assertEquals(curValue++, list.get(j).intValue());\n+        }\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendFixedSizeListVector() {\n+    try (FixedSizeListVector target = FixedSizeListVector.empty(\"target\", 5, allocator);\n+         FixedSizeListVector delta = FixedSizeListVector.empty(\"delta\", 5, allocator)) {\n+\n+      target.allocateNew();\n+      ValueVectorDataPopulator.setVector(target,\n+          Arrays.asList(0, 1, 2, 3, 4),\n+          Arrays.asList(5, 6, 7, 8, 9));\n+      assertEquals(2, target.getValueCount());\n+\n+      delta.allocateNew();\n+      ValueVectorDataPopulator.setVector(delta,\n+          Arrays.asList(10, 11, 12, 13, 14),\n+          Arrays.asList(15, 16, 17, 18, 19));\n+      assertEquals(2, delta.getValueCount());\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(4, target.getValueCount());\n+      int curValue = 0;\n+      for (int i = 0; i < target.getValueCount(); i++) {\n \n Review comment:\n   Sorry I did not find one. So I have created one. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-19T12:05:17.554+0000",
                    "updated": "2020-01-19T12:05:17.554+0000",
                    "started": "2020-01-19T12:05:17.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "374282",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/374283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r368288720\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,320 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n+      ValueVectorDataPopulator.setVector(delta, 10, 11, 12, 13, 14);\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n+        assertEquals(i, target.get(i));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAppendVariableWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (VarCharVector target = new VarCharVector(\"\", allocator);\n+         VarCharVector delta = new VarCharVector(\"\", allocator)) {\n+\n+      target.allocateNew(5, length1);\n+      delta.allocateNew(5, length2);\n+\n+      ValueVectorDataPopulator.setVector(target, \"a0\", \"a1\", \"a2\", \"a3\", \"a4\", \"a5\", \"a6\", \"a7\", \"a8\", \"a9\");\n+      ValueVectorDataPopulator.setVector(delta, \"a10\", \"a11\", \"a12\", \"a13\", \"a14\");\n+\n+      VectorAppender appender = new VectorAppender(target);\n+      delta.accept(appender, null);\n+\n+      assertEquals(length1 + length2, target.getValueCount());\n+      for (int i = 0; i < target.getValueCount(); i++) {\n \n Review comment:\n   Revised. Please take a look. Thank you.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-19T12:05:41.257+0000",
                    "updated": "2020-01-19T12:05:41.257+0000",
                    "started": "2020-01-19T12:05:41.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "374283",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/374395",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r368364231\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.compare.Range;\n+import org.apache.arrow.vector.compare.RangeEqualsVisitor;\n+import org.apache.arrow.vector.compare.TypeEqualsVisitor;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n \n Review comment:\n   Thanks, I think this looks reasonable in general. One last question, do you think some null values should be added into the vectors to test proper appending of the bitmaps?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-20T04:14:09.115+0000",
                    "updated": "2020-01-20T04:14:09.115+0000",
                    "started": "2020-01-20T04:14:09.115+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "374395",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/374398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r368367545\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.compare.Range;\n+import org.apache.arrow.vector.compare.RangeEqualsVisitor;\n+import org.apache.arrow.vector.compare.TypeEqualsVisitor;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n \n Review comment:\n   Sure. I think adding null values should be beneficial. \r\n   I will revise the test later. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-20T04:39:36.309+0000",
                    "updated": "2020-01-20T04:39:36.309+0000",
                    "started": "2020-01-20T04:39:36.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "374398",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/374848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liyafan82 commented on pull request #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#discussion_r368868215\n \n \n\n ##########\n File path: java/vector/src/test/java/org/apache/arrow/vector/util/TestVectorAppender.java\n ##########\n @@ -0,0 +1,347 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.arrow.vector.util;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.memory.RootAllocator;\n+import org.apache.arrow.vector.BigIntVector;\n+import org.apache.arrow.vector.Float4Vector;\n+import org.apache.arrow.vector.IntVector;\n+import org.apache.arrow.vector.ValueVector;\n+import org.apache.arrow.vector.VarCharVector;\n+import org.apache.arrow.vector.compare.Range;\n+import org.apache.arrow.vector.compare.RangeEqualsVisitor;\n+import org.apache.arrow.vector.compare.TypeEqualsVisitor;\n+import org.apache.arrow.vector.complex.FixedSizeListVector;\n+import org.apache.arrow.vector.complex.ListVector;\n+import org.apache.arrow.vector.complex.StructVector;\n+import org.apache.arrow.vector.complex.UnionVector;\n+import org.apache.arrow.vector.testing.ValueVectorDataPopulator;\n+import org.apache.arrow.vector.types.Types;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n+import org.apache.arrow.vector.types.pojo.FieldType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases for {@link VectorAppender}.\n+ */\n+public class TestVectorAppender {\n+\n+  private BufferAllocator allocator;\n+\n+  @Before\n+  public void prepare() {\n+    allocator = new RootAllocator(1024 * 1024);\n+  }\n+\n+  @After\n+  public void shutdown() {\n+    allocator.close();\n+  }\n+\n+  @Test\n+  public void testAppendFixedWidthVector() {\n+    final int length1 = 10;\n+    final int length2 = 5;\n+    try (IntVector target = new IntVector(\"\", allocator);\n+         IntVector delta = new IntVector(\"\", allocator)) {\n+\n+      target.allocateNew(length1);\n+      delta.allocateNew(length2);\n+\n+      ValueVectorDataPopulator.setVector(target, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n \n Review comment:\n   Tests are revised to include null values. Fortunately, a bug was found. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-21T08:40:37.999+0000",
                    "updated": "2020-01-21T08:40:37.999+0000",
                    "started": "2020-01-21T08:40:37.999+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "374848",
                    "issueId": "13266526"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/worklog/376725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #5916: ARROW-7073: [Java] Support concating vectors values in batch\nURL: https://github.com/apache/arrow/pull/5916#issuecomment-578003997\n \n \n   +1 thanks @liyafan82 \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-01-24T06:06:36.325+0000",
                    "updated": "2020-01-24T06:06:36.325+0000",
                    "started": "2020-01-24T06:06:36.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "376725",
                    "issueId": "13266526"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7d164fe0[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26851bdc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@664418f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6891b41c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3211f5e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@a1061ef[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cd573de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@29810f0c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1482611f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1d946579[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ab8ae96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5be037a2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 04 05:08:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-02-04T05:08:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7073/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-11-06T08:52:32.000+0000",
        "updated": "2020-02-04T05:08:24.000+0000",
        "timeoriginalestimate": null,
        "description": "We need a way to copy vector values in batch. Currently, we have copyFrom and copyFromSafe APIs. However, they are not enough, as copying values individually is not performant. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Support concating vectors values in batch",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13266526/comment/17029586",
                    "id": "17029586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 5916\n[https://github.com/apache/arrow/pull/5916]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-04T05:08:24.837+0000",
                    "updated": "2020-02-04T05:08:24.837+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z08b0w:",
        "customfield_12314139": null
    }
}