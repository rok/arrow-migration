{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341608",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608",
    "key": "ARROW-10655",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12603411",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12603411",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13339954",
                    "key": "ARROW-10556",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13339954",
                    "fields": {
                        "summary": "[C++] Caching pre computed data based on FunctionOptions in the kernel state",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10655/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/514243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716\n\n\n   Two cache implementations are provided:\r\n   - a two-level random replacement cache\r\n   - a LRU cache\r\n   \r\n   The LRU cache ends up 4 to 5 times faster than the 2-level RR cache.\r\n   \r\n   Benchmarks (arg 1: key size, arg 2: value size):\r\n   ```\r\n   RRCacheLookup/8/16             8593 ns         8592 ns        79226 items_per_second=11.6386M/s\r\n   RRCacheLookup/8/1024           8608 ns         8607 ns        78896 items_per_second=11.6182M/s\r\n   RRCacheLookup/64/16           11422 ns        11420 ns        60260 items_per_second=8.75626M/s\r\n   RRCacheLookup/64/1024         11477 ns        11475 ns        60242 items_per_second=8.71453M/s\r\n   LRUCacheLookup/8/16            1875 ns         1875 ns       367803 items_per_second=53.3402M/s\r\n   LRUCacheLookup/8/1024          1867 ns         1867 ns       371785 items_per_second=53.567M/s\r\n   LRUCacheLookup/64/16           2621 ns         2621 ns       264372 items_per_second=38.1525M/s\r\n   LRUCacheLookup/64/1024         2639 ns         2638 ns       259995 items_per_second=37.9043M/s\r\n   MemoizeLRUCached/8/16          5224 ns         5223 ns       133050 items_per_second=19.1452M/s\r\n   MemoizeLRUCached/8/1024        5847 ns         5846 ns       115158 items_per_second=17.1043M/s\r\n   MemoizeLRUCached/64/16         5800 ns         5799 ns       118064 items_per_second=17.2432M/s\r\n   MemoizeLRUCached/64/1024       6492 ns         6491 ns       103886 items_per_second=15.4062M/s\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-19T17:50:03.602+0000",
                    "updated": "2020-11-19T17:50:03.602+0000",
                    "started": "2020-11-19T17:50:03.602+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514243",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/514254",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-730545225\n\n\n   https://issues.apache.org/jira/browse/ARROW-10655\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-19T18:06:02.108+0000",
                    "updated": "2020-11-19T18:06:02.108+0000",
                    "started": "2020-11-19T18:06:02.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514254",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/515536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-732158850\n\n\n   Rebased.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T13:23:11.092+0000",
                    "updated": "2020-11-23T13:23:11.092+0000",
                    "started": "2020-11-23T13:23:11.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515536",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/527050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #8988:\nURL: https://github.com/apache/arrow/pull/8988\n\n\n   This adds the option to create a new record batch with less strict validation for list field names.\r\n   The default behaviour is preserved.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T04:19:10.533+0000",
                    "updated": "2020-12-22T04:19:10.533+0000",
                    "started": "2020-12-22T04:19:10.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527050",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/544385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-769941354\n\n\n   @pitrou @bkietz can we merge this?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-29T17:28:32.165+0000",
                    "updated": "2021-01-29T17:28:32.165+0000",
                    "started": "2021-01-29T17:28:32.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "544385",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/550296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-776044678\n\n\n   @nealrichardson I'll probably remove the two-level replacement cache, which doesn't seem useful after all.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T15:55:57.441+0000",
                    "updated": "2021-02-09T15:55:57.441+0000",
                    "started": "2021-02-09T15:55:57.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550296",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/550338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-776106786\n\n\n   I've updated this PR with a thread-unsafe memoizer and revamped benchmarks. I'll let @bkietz take a look.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-09T17:28:44.619+0000",
                    "updated": "2021-02-09T17:28:44.619+0000",
                    "started": "2021-02-09T17:28:44.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "550338",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/553732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#discussion_r577713086\n\n\n\n##########\nFile path: cpp/src/arrow/util/cache_internal.h\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cassert>\n+#include <functional>\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/functional.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// A LRU (Least recently used) replacement cache\n+template <typename Key, typename Value>\n+class LRUCache {\n+ public:\n+  explicit LRUCache(int32_t capacity) : capacity_(capacity) {\n+    // The map size can temporarily exceed the cache capacity, see Replace()\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(LRUCache);\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(LRUCache);\n+\n+  void Clear() {\n+    items_.clear();\n+    map_.clear();\n+    // The C++ spec doesn't tell whether map_.clear() will shrink the map capacity\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  int32_t size() const {\n+    assert(items_.size() == map_.size());\n+    return static_cast<int32_t>(items_.size());\n+  }\n+\n+  template <typename K>\n+  Value* Find(K&& key) {\n+    const auto it = map_.find(key);\n+    if (it == map_.end()) {\n+      return NULLPTR;\n+    } else {\n+      // Found => move item at front of the list\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      return &list_it->value;\n+    }\n+  }\n+\n+  template <typename K, typename V>\n+  std::pair<bool, Value*> Replace(K&& key, V&& value) {\n+    // Try to insert temporary iterator\n+    auto pair = map_.emplace(std::forward<K>(key), ListIt{});\n+    const auto it = pair.first;\n+    const bool inserted = pair.second;\n+    if (inserted) {\n+      // Inserted => push item at front of the list, and update iterator\n+      items_.push_front(Item{&it->first, std::forward<V>(value)});\n+      it->second = items_.begin();\n+      // Did we exceed the cache capacity?  If so, remove least recently used item\n+      if (static_cast<int32_t>(items_.size()) > capacity_) {\n+        const bool erased = map_.erase(*items_.back().key);\n+        assert(erased);\n\nReview comment:\n       Since this is an `_internal` header, it's fine to use `DCHECK` and `nullptr` here\n\n##########\nFile path: cpp/src/arrow/util/cache_internal.h\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cassert>\n+#include <functional>\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/functional.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// A LRU (Least recently used) replacement cache\n+template <typename Key, typename Value>\n+class LRUCache {\n+ public:\n+  explicit LRUCache(int32_t capacity) : capacity_(capacity) {\n+    // The map size can temporarily exceed the cache capacity, see Replace()\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(LRUCache);\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(LRUCache);\n+\n+  void Clear() {\n+    items_.clear();\n+    map_.clear();\n+    // The C++ spec doesn't tell whether map_.clear() will shrink the map capacity\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  int32_t size() const {\n+    assert(items_.size() == map_.size());\n+    return static_cast<int32_t>(items_.size());\n+  }\n+\n+  template <typename K>\n+  Value* Find(K&& key) {\n+    const auto it = map_.find(key);\n+    if (it == map_.end()) {\n+      return NULLPTR;\n+    } else {\n+      // Found => move item at front of the list\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      return &list_it->value;\n+    }\n+  }\n+\n+  template <typename K, typename V>\n+  std::pair<bool, Value*> Replace(K&& key, V&& value) {\n+    // Try to insert temporary iterator\n+    auto pair = map_.emplace(std::forward<K>(key), ListIt{});\n+    const auto it = pair.first;\n+    const bool inserted = pair.second;\n+    if (inserted) {\n+      // Inserted => push item at front of the list, and update iterator\n+      items_.push_front(Item{&it->first, std::forward<V>(value)});\n+      it->second = items_.begin();\n+      // Did we exceed the cache capacity?  If so, remove least recently used item\n+      if (static_cast<int32_t>(items_.size()) > capacity_) {\n+        const bool erased = map_.erase(*items_.back().key);\n+        assert(erased);\n+        ARROW_UNUSED(erased);\n+        items_.pop_back();\n+      }\n+      return {true, &it->second->value};\n+    } else {\n+      // Already exists => move item at front of the list, and update value\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      list_it->value = std::forward<V>(value);\n+      return {false, &list_it->value};\n+    }\n+  }\n+\n+ private:\n+  struct Item {\n+    // Pointer to the key inside the unordered_map\n+    const Key* key;\n+    Value value;\n+  };\n+  using List = std::list<Item>;\n+  using ListIt = typename List::iterator;\n+\n+  const int32_t capacity_;\n+  // In most to least recently used order\n+  std::list<Item> items_;\n+  std::unordered_map<Key, ListIt> map_;\n+};\n+\n+namespace detail {\n+\n+template <typename Key, typename Value, typename Cache, typename Func>\n+struct ThreadSafeMemoizer {\n+  using RetType = Value;\n+\n+  template <typename F>\n+  ThreadSafeMemoizer(F&& func, int32_t cache_capacity)\n+      : mutex_(new std::mutex), func_(std::forward<F>(func)), cache_(cache_capacity) {}\n+\n+  // The memoizer can't return a pointer to the cached value, because\n+  // the cache entry may be evicted by another thread.\n+\n+  Value operator()(const Key& key) {\n+    std::unique_lock<std::mutex> lock(*mutex_);\n+    const Value* value_ptr;\n+    value_ptr = cache_.Find(key);\n+    if (ARROW_PREDICT_TRUE(value_ptr != NULLPTR)) {\n+      return *value_ptr;\n+    }\n+    lock.unlock();\n+    Value v = func_(key);\n+    lock.lock();\n+    return *cache_.Replace(key, std::move(v)).second;\n+  }\n+\n+ private:\n+  std::unique_ptr<std::mutex> mutex_;\n+  Func func_;\n+  Cache cache_;\n+};\n+\n+template <typename Key, typename Value, typename Cache, typename Func>\n+struct ThreadUnsafeMemoizer {\n+  using RetType = const Value&;\n+\n+  template <typename F>\n+  ThreadUnsafeMemoizer(F&& func, int32_t cache_capacity)\n+      : /*mutex_(new std::mutex), */ func_(std::forward<F>(func)),\n+        cache_(cache_capacity) {}\n+\n+  const Value& operator()(const Key& key) {\n+    const Value* value_ptr;\n+    value_ptr = cache_.Find(key);\n+    if (ARROW_PREDICT_TRUE(value_ptr != NULLPTR)) {\n+      return *value_ptr;\n+    }\n+    return *cache_.Replace(key, func_(key)).second;\n+  }\n+\n+ private:\n+  Func func_;\n+  Cache cache_;\n+};\n+\n+// A copy-constructible callable wrapper, for std::function<>\n+\n+template <typename Callable, typename RetType = call_traits::return_type<Callable>,\n+          typename Value = call_traits::argument_type<0, Callable>>\n+struct SharedCallable {\n+  explicit SharedCallable(Callable callable)\n+      : callable_(std::make_shared<Callable>(std::move(callable))) {}\n+\n+  template <typename V>\n+  RetType operator()(V&& v) {\n+    return (*callable_)(std::forward<V>(v));\n+  }\n+\n+ private:\n+  const std::shared_ptr<Callable> callable_;\n+};\n+\n+template <template <typename...> class Cache,\n+          template <typename...> class MemoizerType = ThreadSafeMemoizer, typename Func,\n+          typename Key = typename std::decay<call_traits::argument_type<0, Func>>::type,\n+          typename Value = typename std::decay<call_traits::return_type<Func>>::type,\n+          typename Memoizer = MemoizerType<Key, Value, Cache<Key, Value>, Func>,\n\nReview comment:\n       This allows a memoizer to wrap the instance of `Func` by reference, which I think will be surprising. I've assembled an alternative in https://github.com/pitrou/arrow/pull/7\n\n##########\nFile path: cpp/src/arrow/util/cache_benchmark.cc\n##########\n@@ -0,0 +1,146 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/cache_internal.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static constexpr int32_t kCacheSize = 100;\n+static constexpr int32_t kSmallKeyLength = 8;\n+static constexpr int32_t kLargeKeyLength = 64;\n+static constexpr int32_t kSmallValueLength = 16;\n+static constexpr int32_t kLargeValueLength = 1024;\n+\n+static std::vector<std::string> MakeStrings(int64_t nvalues, int64_t min_length,\n+                                            int64_t max_length) {\n+  auto rng = ::arrow::random::RandomArrayGenerator(42);\n+  auto arr = checked_pointer_cast<StringArray>(rng.String(\n+      nvalues, static_cast<int32_t>(min_length), static_cast<int32_t>(max_length)));\n+  std::vector<std::string> vec(nvalues);\n+  for (int64_t i = 0; i < nvalues; ++i) {\n+    vec[i] = arr->GetString(i);\n+  }\n+  return vec;\n+}\n+\n+static std::vector<std::string> MakeStrings(int64_t nvalues, int64_t length) {\n+  return MakeStrings(nvalues, length, length);\n+}\n+\n+template <typename Cache, typename Key, typename Value>\n+static void BenchmarkCacheLookups(benchmark::State& state, const std::vector<Key>& keys,\n+                                  const std::vector<Value>& values) {\n+  const int32_t nitems = static_cast<int32_t>(keys.size());\n+  Cache cache(nitems);\n+  for (int32_t i = 0; i < nitems; ++i) {\n+    cache.Replace(keys[i], values[i]);\n+  }\n+\n+  for (auto _ : state) {\n+    int64_t nfinds = 0;\n+    for (const auto& key : keys) {\n+      nfinds += (cache.Find(key) != nullptr);\n+    }\n+    benchmark::DoNotOptimize(nfinds);\n+    ARROW_CHECK_EQ(nfinds, nitems);\n+  }\n+  state.SetItemsProcessed(state.iterations() * nitems);\n+}\n+\n+static void LRUCacheLookup(benchmark::State& state) {\n+  const auto keys = MakeStrings(kCacheSize, state.range(0));\n+  const auto values = MakeStrings(kCacheSize, state.range(1));\n+  BenchmarkCacheLookups<LRUCache<std::string, std::string>>(state, keys, values);\n+}\n+\n+static void SetCacheArgs(benchmark::internal::Benchmark* bench) {\n+  bench->Args({kSmallKeyLength, kSmallValueLength});\n+  bench->Args({kSmallKeyLength, kLargeValueLength});\n+  bench->Args({kLargeKeyLength, kSmallValueLength});\n+  bench->Args({kLargeKeyLength, kLargeValueLength});\n+}\n+\n+BENCHMARK(LRUCacheLookup)->Apply(SetCacheArgs);\n+\n+struct Callable {\n+  explicit Callable(std::vector<std::string> values)\n+      : index_(0), values_(std::move(values)) {}\n+\n+  std::string operator()(const std::string& key) {\n+    // Return a value unrelated to the key\n+    if (++index_ >= static_cast<int64_t>(values_.size())) {\n+      index_ = 0;\n+    }\n+    return values_[index_];\n+  }\n+\n+ private:\n+  int64_t index_;\n+  std::vector<std::string> values_;\n+};\n+\n+template <typename Memoized>\n+static void BenchmarkMemoize(benchmark::State& state, Memoized&& mem,\n+                             const std::vector<std::string>& keys) {\n+  // Prime memoization cache\n+  for (const auto& key : keys) {\n+    mem(key);\n+  }\n+\n+  for (auto _ : state) {\n+    int64_t nbytes = 0;\n+    for (const auto& key : keys) {\n+      nbytes += static_cast<int64_t>(mem(key).length());\n+    }\n+    benchmark::DoNotOptimize(nbytes);\n+  }\n+  state.SetItemsProcessed(state.iterations() * keys.size());\n+}\n+\n+static void MemoizeLRUCached(benchmark::State& state) {\n+  const auto keys = MakeStrings(kCacheSize, state.range(0));\n+  const auto values = MakeStrings(kCacheSize, state.range(1));\n\nReview comment:\n       I'd also be interested to see benchmarks where the size of the string set is `kCacheSize * [0.5, 0.9, 1.1, 2]`\n\n##########\nFile path: cpp/src/arrow/util/cache_internal.h\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cassert>\n+#include <functional>\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/functional.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// A LRU (Least recently used) replacement cache\n+template <typename Key, typename Value>\n+class LRUCache {\n+ public:\n+  explicit LRUCache(int32_t capacity) : capacity_(capacity) {\n+    // The map size can temporarily exceed the cache capacity, see Replace()\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(LRUCache);\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(LRUCache);\n+\n+  void Clear() {\n+    items_.clear();\n+    map_.clear();\n+    // The C++ spec doesn't tell whether map_.clear() will shrink the map capacity\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  int32_t size() const {\n+    assert(items_.size() == map_.size());\n+    return static_cast<int32_t>(items_.size());\n+  }\n+\n+  template <typename K>\n+  Value* Find(K&& key) {\n+    const auto it = map_.find(key);\n+    if (it == map_.end()) {\n+      return NULLPTR;\n+    } else {\n+      // Found => move item at front of the list\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      return &list_it->value;\n+    }\n+  }\n+\n+  template <typename K, typename V>\n+  std::pair<bool, Value*> Replace(K&& key, V&& value) {\n+    // Try to insert temporary iterator\n+    auto pair = map_.emplace(std::forward<K>(key), ListIt{});\n+    const auto it = pair.first;\n+    const bool inserted = pair.second;\n+    if (inserted) {\n+      // Inserted => push item at front of the list, and update iterator\n+      items_.push_front(Item{&it->first, std::forward<V>(value)});\n+      it->second = items_.begin();\n+      // Did we exceed the cache capacity?  If so, remove least recently used item\n+      if (static_cast<int32_t>(items_.size()) > capacity_) {\n+        const bool erased = map_.erase(*items_.back().key);\n+        assert(erased);\n+        ARROW_UNUSED(erased);\n+        items_.pop_back();\n+      }\n+      return {true, &it->second->value};\n+    } else {\n+      // Already exists => move item at front of the list, and update value\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      list_it->value = std::forward<V>(value);\n+      return {false, &list_it->value};\n+    }\n+  }\n+\n+ private:\n+  struct Item {\n+    // Pointer to the key inside the unordered_map\n+    const Key* key;\n+    Value value;\n+  };\n+  using List = std::list<Item>;\n+  using ListIt = typename List::iterator;\n+\n+  const int32_t capacity_;\n+  // In most to least recently used order\n+  std::list<Item> items_;\n+  std::unordered_map<Key, ListIt> map_;\n+};\n+\n+namespace detail {\n+\n+template <typename Key, typename Value, typename Cache, typename Func>\n+struct ThreadSafeMemoizer {\n+  using RetType = Value;\n+\n+  template <typename F>\n+  ThreadSafeMemoizer(F&& func, int32_t cache_capacity)\n+      : mutex_(new std::mutex), func_(std::forward<F>(func)), cache_(cache_capacity) {}\n+\n+  // The memoizer can't return a pointer to the cached value, because\n+  // the cache entry may be evicted by another thread.\n+\n+  Value operator()(const Key& key) {\n+    std::unique_lock<std::mutex> lock(*mutex_);\n+    const Value* value_ptr;\n+    value_ptr = cache_.Find(key);\n+    if (ARROW_PREDICT_TRUE(value_ptr != NULLPTR)) {\n+      return *value_ptr;\n+    }\n+    lock.unlock();\n+    Value v = func_(key);\n+    lock.lock();\n+    return *cache_.Replace(key, std::move(v)).second;\n+  }\n+\n+ private:\n+  std::unique_ptr<std::mutex> mutex_;\n+  Func func_;\n+  Cache cache_;\n+};\n+\n+template <typename Key, typename Value, typename Cache, typename Func>\n+struct ThreadUnsafeMemoizer {\n+  using RetType = const Value&;\n+\n+  template <typename F>\n+  ThreadUnsafeMemoizer(F&& func, int32_t cache_capacity)\n+      : /*mutex_(new std::mutex), */ func_(std::forward<F>(func)),\n+        cache_(cache_capacity) {}\n+\n+  const Value& operator()(const Key& key) {\n+    const Value* value_ptr;\n+    value_ptr = cache_.Find(key);\n+    if (ARROW_PREDICT_TRUE(value_ptr != NULLPTR)) {\n+      return *value_ptr;\n+    }\n+    return *cache_.Replace(key, func_(key)).second;\n+  }\n+\n+ private:\n+  Func func_;\n+  Cache cache_;\n+};\n+\n+// A copy-constructible callable wrapper, for std::function<>\n+\n+template <typename Callable, typename RetType = call_traits::return_type<Callable>,\n+          typename Value = call_traits::argument_type<0, Callable>>\n+struct SharedCallable {\n+  explicit SharedCallable(Callable callable)\n+      : callable_(std::make_shared<Callable>(std::move(callable))) {}\n+\n+  template <typename V>\n+  RetType operator()(V&& v) {\n+    return (*callable_)(std::forward<V>(v));\n+  }\n+\n+ private:\n+  const std::shared_ptr<Callable> callable_;\n+};\n+\n+template <template <typename...> class Cache,\n+          template <typename...> class MemoizerType = ThreadSafeMemoizer, typename Func,\n+          typename Key = typename std::decay<call_traits::argument_type<0, Func>>::type,\n+          typename Value = typename std::decay<call_traits::return_type<Func>>::type,\n+          typename Memoizer = MemoizerType<Key, Value, Cache<Key, Value>, Func>,\n+          typename RetFunc = std::function<typename Memoizer::RetType(const Key&)>>\n+static RetFunc Memoize(Func&& func, int32_t cache_capacity) {\n+  return SharedCallable<Memoizer>(Memoizer(std::forward<Func>(func), cache_capacity));\n+}\n+\n+// template <template <typename K, typename V> class Cache,\n+//           template <typename K, typename V, typename C, typename F>\n+//           class MemoizerType = ThreadSafeMemoizer,\n+//           typename Func,\n+//           typename Key = typename std::decay<call_traits::argument_type<0,\n+//           Func>>::type, typename Value = typename\n+//           std::decay<call_traits::return_type<Func>>::type, typename Memoizer =\n+//           MemoizerType<Key, Value, Cache<Key, Value>, Func>, typename RetFunc =\n+//           Memoizer>\n+// static RetFunc Memoize(Func&& func, int32_t cache_capacity) {\n+//   return Memoizer(std::forward<Func>(func), cache_capacity);\n+// }\n\nReview comment:\n       ```suggestion\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-17T16:55:20.994+0000",
                    "updated": "2021-02-17T16:55:20.994+0000",
                    "started": "2021-02-17T16:55:20.994+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "553732",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#discussion_r578312600\n\n\n\n##########\nFile path: cpp/src/arrow/util/cache_benchmark.cc\n##########\n@@ -0,0 +1,146 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/cache_internal.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static constexpr int32_t kCacheSize = 100;\n+static constexpr int32_t kSmallKeyLength = 8;\n+static constexpr int32_t kLargeKeyLength = 64;\n+static constexpr int32_t kSmallValueLength = 16;\n+static constexpr int32_t kLargeValueLength = 1024;\n+\n+static std::vector<std::string> MakeStrings(int64_t nvalues, int64_t min_length,\n+                                            int64_t max_length) {\n+  auto rng = ::arrow::random::RandomArrayGenerator(42);\n+  auto arr = checked_pointer_cast<StringArray>(rng.String(\n+      nvalues, static_cast<int32_t>(min_length), static_cast<int32_t>(max_length)));\n+  std::vector<std::string> vec(nvalues);\n+  for (int64_t i = 0; i < nvalues; ++i) {\n+    vec[i] = arr->GetString(i);\n+  }\n+  return vec;\n+}\n+\n+static std::vector<std::string> MakeStrings(int64_t nvalues, int64_t length) {\n+  return MakeStrings(nvalues, length, length);\n+}\n+\n+template <typename Cache, typename Key, typename Value>\n+static void BenchmarkCacheLookups(benchmark::State& state, const std::vector<Key>& keys,\n+                                  const std::vector<Value>& values) {\n+  const int32_t nitems = static_cast<int32_t>(keys.size());\n+  Cache cache(nitems);\n+  for (int32_t i = 0; i < nitems; ++i) {\n+    cache.Replace(keys[i], values[i]);\n+  }\n+\n+  for (auto _ : state) {\n+    int64_t nfinds = 0;\n+    for (const auto& key : keys) {\n+      nfinds += (cache.Find(key) != nullptr);\n+    }\n+    benchmark::DoNotOptimize(nfinds);\n+    ARROW_CHECK_EQ(nfinds, nitems);\n+  }\n+  state.SetItemsProcessed(state.iterations() * nitems);\n+}\n+\n+static void LRUCacheLookup(benchmark::State& state) {\n+  const auto keys = MakeStrings(kCacheSize, state.range(0));\n+  const auto values = MakeStrings(kCacheSize, state.range(1));\n+  BenchmarkCacheLookups<LRUCache<std::string, std::string>>(state, keys, values);\n+}\n+\n+static void SetCacheArgs(benchmark::internal::Benchmark* bench) {\n+  bench->Args({kSmallKeyLength, kSmallValueLength});\n+  bench->Args({kSmallKeyLength, kLargeValueLength});\n+  bench->Args({kLargeKeyLength, kSmallValueLength});\n+  bench->Args({kLargeKeyLength, kLargeValueLength});\n+}\n+\n+BENCHMARK(LRUCacheLookup)->Apply(SetCacheArgs);\n+\n+struct Callable {\n+  explicit Callable(std::vector<std::string> values)\n+      : index_(0), values_(std::move(values)) {}\n+\n+  std::string operator()(const std::string& key) {\n+    // Return a value unrelated to the key\n+    if (++index_ >= static_cast<int64_t>(values_.size())) {\n+      index_ = 0;\n+    }\n+    return values_[index_];\n+  }\n+\n+ private:\n+  int64_t index_;\n+  std::vector<std::string> values_;\n+};\n+\n+template <typename Memoized>\n+static void BenchmarkMemoize(benchmark::State& state, Memoized&& mem,\n+                             const std::vector<std::string>& keys) {\n+  // Prime memoization cache\n+  for (const auto& key : keys) {\n+    mem(key);\n+  }\n+\n+  for (auto _ : state) {\n+    int64_t nbytes = 0;\n+    for (const auto& key : keys) {\n+      nbytes += static_cast<int64_t>(mem(key).length());\n+    }\n+    benchmark::DoNotOptimize(nbytes);\n+  }\n+  state.SetItemsProcessed(state.iterations() * keys.size());\n+}\n+\n+static void MemoizeLRUCached(benchmark::State& state) {\n+  const auto keys = MakeStrings(kCacheSize, state.range(0));\n+  const auto values = MakeStrings(kCacheSize, state.range(1));\n\nReview comment:\n       In this benchmark I'm mostly interested in measuring the overhead of the memoize pattern rather the LRU cache itself. I don't think varying the size of the string set would vary the measured overhead.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T10:44:18.786+0000",
                    "updated": "2021-02-18T10:44:18.786+0000",
                    "started": "2021-02-18T10:44:18.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554172",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#discussion_r578322080\n\n\n\n##########\nFile path: cpp/src/arrow/util/cache_internal.h\n##########\n@@ -0,0 +1,232 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cassert>\n+#include <functional>\n+#include <list>\n+#include <memory>\n+#include <mutex>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/functional.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// A LRU (Least recently used) replacement cache\n+template <typename Key, typename Value>\n+class LRUCache {\n+ public:\n+  explicit LRUCache(int32_t capacity) : capacity_(capacity) {\n+    // The map size can temporarily exceed the cache capacity, see Replace()\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(LRUCache);\n+  ARROW_DEFAULT_MOVE_AND_ASSIGN(LRUCache);\n+\n+  void Clear() {\n+    items_.clear();\n+    map_.clear();\n+    // The C++ spec doesn't tell whether map_.clear() will shrink the map capacity\n+    map_.reserve(capacity_ + 1);\n+  }\n+\n+  int32_t size() const {\n+    assert(items_.size() == map_.size());\n+    return static_cast<int32_t>(items_.size());\n+  }\n+\n+  template <typename K>\n+  Value* Find(K&& key) {\n+    const auto it = map_.find(key);\n+    if (it == map_.end()) {\n+      return NULLPTR;\n+    } else {\n+      // Found => move item at front of the list\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      return &list_it->value;\n+    }\n+  }\n+\n+  template <typename K, typename V>\n+  std::pair<bool, Value*> Replace(K&& key, V&& value) {\n+    // Try to insert temporary iterator\n+    auto pair = map_.emplace(std::forward<K>(key), ListIt{});\n+    const auto it = pair.first;\n+    const bool inserted = pair.second;\n+    if (inserted) {\n+      // Inserted => push item at front of the list, and update iterator\n+      items_.push_front(Item{&it->first, std::forward<V>(value)});\n+      it->second = items_.begin();\n+      // Did we exceed the cache capacity?  If so, remove least recently used item\n+      if (static_cast<int32_t>(items_.size()) > capacity_) {\n+        const bool erased = map_.erase(*items_.back().key);\n+        assert(erased);\n+        ARROW_UNUSED(erased);\n+        items_.pop_back();\n+      }\n+      return {true, &it->second->value};\n+    } else {\n+      // Already exists => move item at front of the list, and update value\n+      auto list_it = it->second;\n+      items_.splice(items_.begin(), items_, list_it);\n+      list_it->value = std::forward<V>(value);\n+      return {false, &list_it->value};\n+    }\n+  }\n+\n+ private:\n+  struct Item {\n+    // Pointer to the key inside the unordered_map\n+    const Key* key;\n+    Value value;\n+  };\n+  using List = std::list<Item>;\n+  using ListIt = typename List::iterator;\n+\n+  const int32_t capacity_;\n+  // In most to least recently used order\n+  std::list<Item> items_;\n+  std::unordered_map<Key, ListIt> map_;\n+};\n+\n+namespace detail {\n+\n+template <typename Key, typename Value, typename Cache, typename Func>\n+struct ThreadSafeMemoizer {\n+  using RetType = Value;\n+\n+  template <typename F>\n+  ThreadSafeMemoizer(F&& func, int32_t cache_capacity)\n+      : mutex_(new std::mutex), func_(std::forward<F>(func)), cache_(cache_capacity) {}\n+\n+  // The memoizer can't return a pointer to the cached value, because\n+  // the cache entry may be evicted by another thread.\n+\n+  Value operator()(const Key& key) {\n+    std::unique_lock<std::mutex> lock(*mutex_);\n+    const Value* value_ptr;\n+    value_ptr = cache_.Find(key);\n+    if (ARROW_PREDICT_TRUE(value_ptr != NULLPTR)) {\n+      return *value_ptr;\n+    }\n+    lock.unlock();\n+    Value v = func_(key);\n+    lock.lock();\n+    return *cache_.Replace(key, std::move(v)).second;\n+  }\n+\n+ private:\n+  std::unique_ptr<std::mutex> mutex_;\n+  Func func_;\n+  Cache cache_;\n+};\n+\n+template <typename Key, typename Value, typename Cache, typename Func>\n+struct ThreadUnsafeMemoizer {\n+  using RetType = const Value&;\n+\n+  template <typename F>\n+  ThreadUnsafeMemoizer(F&& func, int32_t cache_capacity)\n+      : /*mutex_(new std::mutex), */ func_(std::forward<F>(func)),\n+        cache_(cache_capacity) {}\n+\n+  const Value& operator()(const Key& key) {\n+    const Value* value_ptr;\n+    value_ptr = cache_.Find(key);\n+    if (ARROW_PREDICT_TRUE(value_ptr != NULLPTR)) {\n+      return *value_ptr;\n+    }\n+    return *cache_.Replace(key, func_(key)).second;\n+  }\n+\n+ private:\n+  Func func_;\n+  Cache cache_;\n+};\n+\n+// A copy-constructible callable wrapper, for std::function<>\n+\n+template <typename Callable, typename RetType = call_traits::return_type<Callable>,\n+          typename Value = call_traits::argument_type<0, Callable>>\n+struct SharedCallable {\n+  explicit SharedCallable(Callable callable)\n+      : callable_(std::make_shared<Callable>(std::move(callable))) {}\n+\n+  template <typename V>\n+  RetType operator()(V&& v) {\n+    return (*callable_)(std::forward<V>(v));\n+  }\n+\n+ private:\n+  const std::shared_ptr<Callable> callable_;\n+};\n+\n+template <template <typename...> class Cache,\n+          template <typename...> class MemoizerType = ThreadSafeMemoizer, typename Func,\n+          typename Key = typename std::decay<call_traits::argument_type<0, Func>>::type,\n+          typename Value = typename std::decay<call_traits::return_type<Func>>::type,\n+          typename Memoizer = MemoizerType<Key, Value, Cache<Key, Value>, Func>,\n\nReview comment:\n       I took some of the suggestions in your PR (thanks!). However, I kept the ability to store a reference, as it makes testing easier.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T10:58:16.317+0000",
                    "updated": "2021-02-18T10:58:16.317+0000",
                    "started": "2021-02-18T10:58:16.316+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554175",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554272",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-781396789\n\n\n   @bkietz Any other concerns?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T14:51:10.470+0000",
                    "updated": "2021-02-18T14:51:10.470+0000",
                    "started": "2021-02-18T14:51:10.470+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554272",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554328",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-781474130\n\n\n   same naming style nit I've brought up before LruCacheLookup?  Maybe we should just make this another exception to the style guide?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T16:37:52.241+0000",
                    "updated": "2021-02-18T16:37:52.241+0000",
                    "started": "2021-02-18T16:37:52.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554328",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#discussion_r578613771\n\n\n\n##########\nFile path: cpp/src/arrow/util/cache_benchmark.cc\n##########\n@@ -0,0 +1,146 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/testing/random.h\"\n+#include \"arrow/util/cache_internal.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static constexpr int32_t kCacheSize = 100;\n+static constexpr int32_t kSmallKeyLength = 8;\n+static constexpr int32_t kLargeKeyLength = 64;\n+static constexpr int32_t kSmallValueLength = 16;\n+static constexpr int32_t kLargeValueLength = 1024;\n+\n+static std::vector<std::string> MakeStrings(int64_t nvalues, int64_t min_length,\n+                                            int64_t max_length) {\n+  auto rng = ::arrow::random::RandomArrayGenerator(42);\n+  auto arr = checked_pointer_cast<StringArray>(rng.String(\n+      nvalues, static_cast<int32_t>(min_length), static_cast<int32_t>(max_length)));\n+  std::vector<std::string> vec(nvalues);\n+  for (int64_t i = 0; i < nvalues; ++i) {\n+    vec[i] = arr->GetString(i);\n+  }\n+  return vec;\n+}\n+\n+static std::vector<std::string> MakeStrings(int64_t nvalues, int64_t length) {\n+  return MakeStrings(nvalues, length, length);\n+}\n+\n+template <typename Cache, typename Key, typename Value>\n+static void BenchmarkCacheLookups(benchmark::State& state, const std::vector<Key>& keys,\n+                                  const std::vector<Value>& values) {\n+  const int32_t nitems = static_cast<int32_t>(keys.size());\n+  Cache cache(nitems);\n+  for (int32_t i = 0; i < nitems; ++i) {\n+    cache.Replace(keys[i], values[i]);\n+  }\n+\n+  for (auto _ : state) {\n+    int64_t nfinds = 0;\n+    for (const auto& key : keys) {\n+      nfinds += (cache.Find(key) != nullptr);\n+    }\n+    benchmark::DoNotOptimize(nfinds);\n+    ARROW_CHECK_EQ(nfinds, nitems);\n+  }\n+  state.SetItemsProcessed(state.iterations() * nitems);\n+}\n+\n+static void LRUCacheLookup(benchmark::State& state) {\n+  const auto keys = MakeStrings(kCacheSize, state.range(0));\n+  const auto values = MakeStrings(kCacheSize, state.range(1));\n+  BenchmarkCacheLookups<LRUCache<std::string, std::string>>(state, keys, values);\n+}\n+\n+static void SetCacheArgs(benchmark::internal::Benchmark* bench) {\n+  bench->Args({kSmallKeyLength, kSmallValueLength});\n+  bench->Args({kSmallKeyLength, kLargeValueLength});\n+  bench->Args({kLargeKeyLength, kSmallValueLength});\n+  bench->Args({kLargeKeyLength, kLargeValueLength});\n+}\n+\n+BENCHMARK(LRUCacheLookup)->Apply(SetCacheArgs);\n+\n+struct Callable {\n+  explicit Callable(std::vector<std::string> values)\n+      : index_(0), values_(std::move(values)) {}\n+\n+  std::string operator()(const std::string& key) {\n+    // Return a value unrelated to the key\n+    if (++index_ >= static_cast<int64_t>(values_.size())) {\n+      index_ = 0;\n+    }\n+    return values_[index_];\n+  }\n+\n+ private:\n+  int64_t index_;\n+  std::vector<std::string> values_;\n+};\n+\n+template <typename Memoized>\n+static void BenchmarkMemoize(benchmark::State& state, Memoized&& mem,\n+                             const std::vector<std::string>& keys) {\n+  // Prime memoization cache\n+  for (const auto& key : keys) {\n+    mem(key);\n+  }\n+\n+  for (auto _ : state) {\n+    int64_t nbytes = 0;\n+    for (const auto& key : keys) {\n+      nbytes += static_cast<int64_t>(mem(key).length());\n+    }\n+    benchmark::DoNotOptimize(nbytes);\n+  }\n+  state.SetItemsProcessed(state.iterations() * keys.size());\n+}\n+\n+static void MemoizeLRUCached(benchmark::State& state) {\n+  const auto keys = MakeStrings(kCacheSize, state.range(0));\n+  const auto values = MakeStrings(kCacheSize, state.range(1));\n\nReview comment:\n       If the string set is exactly as large as the cache then the only overhead you're measuring is promotion inside a static set. By contrast if the string set is larger than the cast you will measure the cost of replacement as well. The latter seems useful to know when deciding how large to make a cache, since it represents the penalty for guessing too low.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T17:32:46.755+0000",
                    "updated": "2021-02-18T17:32:46.755+0000",
                    "started": "2021-02-18T17:32:46.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554353",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-781513044\n\n\n   +1 for renaming `LRUCache -> LruCache`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T17:34:16.057+0000",
                    "updated": "2021-02-18T17:34:16.057+0000",
                    "started": "2021-02-18T17:34:16.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554355",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716#issuecomment-781593302\n\n\n   > +1 for renaming LRUCache -> LruCache\r\n   \r\n   Done.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-18T19:48:06.631+0000",
                    "updated": "2021-02-18T19:48:06.631+0000",
                    "started": "2021-02-18T19:48:06.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554429",
                    "issueId": "13341608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/worklog/554797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #8716:\nURL: https://github.com/apache/arrow/pull/8716\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-02-19T15:54:54.330+0000",
                    "updated": "2021-02-19T15:54:54.330+0000",
                    "started": "2021-02-19T15:54:54.329+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "554797",
                    "issueId": "13341608"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@71caf5e1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@346c127c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@233ac1b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7791c851[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fac503f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@30527f40[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45904ff3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3cbac450[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@218a4650[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@281955e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4529bd2a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2f5b799b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Feb 19 15:54:42 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-02-19T15:54:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10655/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-19T15:34:08.000+0000",
        "updated": "2021-02-19T15:58:52.000+0000",
        "timeoriginalestimate": null,
        "description": "We will need a simple LRU cache to memoize results of costly functions.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add LRU cache facility",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341608/comment/17287143",
                    "id": "17287143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8716\n[https://github.com/apache/arrow/pull/8716]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-02-19T15:54:42.382+0000",
                    "updated": "2021-02-19T15:54:42.382+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0krc0:",
        "customfield_12314139": null
    }
}