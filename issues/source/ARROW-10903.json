{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13345926",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926",
    "key": "ARROW-10903",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "beginner",
            "beginner-friendly",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ivanvankov",
            "name": "ivanvankov",
            "key": "ivanvankov",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Ivan Vankov",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10903/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov opened a new pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647\n\n\n   This Pr is follow up for https://github.com/apache/arrow/pull/8853#discussion_r542189448 .\r\n   I was not able to utilize `TryFrom` because of conflicting implementations, so instead I created two new functions `try_from_sparse_iter` and `try_from_iter` in place of `impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray` and `impl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-06T12:24:51.096+0000",
                    "updated": "2021-03-06T12:24:51.096+0000",
                    "started": "2021-03-06T12:24:51.096+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561777",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561778",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-791928539\n\n\n   https://issues.apache.org/jira/browse/ARROW-10903\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-06T12:25:14.902+0000",
                    "updated": "2021-03-06T12:25:14.902+0000",
                    "started": "2021-03-06T12:25:14.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561778",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-792264645\n\n\n   BTW the test workspace check is also failing on master, so it may not be related to this PR. See more details on https://issues.apache.org/jira/browse/ARROW-11896\r\n   \r\n   The integration test failure looks strange (we had fixed something like that previously and it looks like your branch has the fix).  I retriggered the test jobs to see if I could get a passing run\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T11:51:09.598+0000",
                    "updated": "2021-03-07T11:51:09.598+0000",
                    "started": "2021-03-07T11:51:09.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561956",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-792285533\n\n\n   Hi @jorgecarleitao, and thank you for the extended review and explanations.\r\n   Now, regarding comments you have:\r\n   \r\n   - It does actually push just one byte per each 8 items. But here I've noticed a mistake :-) \r\n   `null_buf.push(0)` actually pushes 4 bytes, so I'll change it to `null_buf.push(0u8)` to fix this. The invariants are still held though.\r\n   \r\n   - Regarding invariants I don't see anything that breaks them in my implementation. If you see anything please point to it.\r\n   \r\n   - The part with `unsafe` is for the case when iterator returns `None` as first item. Since we need to add to buffer a sequence of zeros of length `size` we need to know `size` to do that. But we still don't know `size` value, we need to get to the first `Some` to determine it. So, I only save count of `None` elements until iterator returns first `Some`, and don't add to buffer anything until then. When iterator stops we need to add `size * number of None` zeros in the beginning of buffer, and for that the section with `usafe` is added, just to copy from one position to other and put zeros. So, I need to prepend data, not to append, that's why `MutableBuffer::extend_from_slice` can't be used. \r\n   I think, for more performance it would be better to prepend immediately after we determined `size`, not after iterator finished.\r\n   \r\n   - I'll add examples to documentation section for the functions.\r\n   \r\n   Feel free to add more remarks if you have any. Thanks.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T14:11:44.893+0000",
                    "updated": "2021-03-07T14:11:44.893+0000",
                    "started": "2021-03-07T14:11:44.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561970",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#discussion_r589038582\n\n\n\n##########\nFile path: rust/arrow/src/array/array_binary.rs\n##########\n@@ -364,62 +365,135 @@ impl FixedSizeBinaryArray {\n         self.data.buffers()[0].clone()\n     }\n \n-    #[inline]\n-    fn value_offset_at(&self, i: usize) -> i32 {\n-        self.length * i as i32\n-    }\n-}\n+    /// Create an array from an iterable argument of sparse byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_sparse_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = Option<U>>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut byte = 0;\n+        let mut null_buf = MutableBuffer::from_len_zeroed(0);\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        let mut prepend = 0;\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            if byte == 0 {\n+                null_buf.push(0);\n+                byte = 8;\n+            }\n+            byte -= 1;\n+\n+            if let Some(sliceble) = item {\n+                let slice = sliceble.as_ref();\n+                if size != slice.len() {\n+                    if size == 0 {\n+                        size = slice.len();\n+                    } else {\n+                        return Err(ArrowError::InvalidArgumentError(format!(\n+                            \"Nested array size mismatch: one is {}, and the other is {}\",\n+                            size,\n+                            slice.len()\n+                        )));\n+                    }\n+                }\n+                bit_util::set_bit(null_buf.as_slice_mut(), len);\n+                buffer.extend_from_slice(slice);\n+            } else {\n+                buffer.extend_zeros(size);\n+                if size == 0 {\n+                    prepend += 1;\n+                }\n+            }\n \n-impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Vec<u8>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        let size = data[0].len();\n-        assert!(data.iter().all(|item| item.len() == size));\n-        let data = data.into_iter().flatten().collect::<Vec<_>>();\n-        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n-            .len(len)\n-            .add_buffer(Buffer::from(&data))\n-            .build();\n-        FixedSizeBinaryArray::from(array_data)\n-    }\n-}\n+            len += 1;\n \n-impl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Option<Vec<u8>>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        // try to estimate the size. This may not be possible no entry is valid => panic\n-        let size = data.iter().filter_map(|e| e.as_ref()).next().unwrap().len();\n-        assert!(data\n-            .iter()\n-            .filter_map(|e| e.as_ref())\n-            .all(|item| item.len() == size));\n-\n-        let num_bytes = bit_util::ceil(len, 8);\n-        let mut null_buf = MutableBuffer::from_len_zeroed(num_bytes);\n-        let null_slice = null_buf.as_slice_mut();\n-\n-        data.iter().enumerate().for_each(|(i, entry)| {\n-            if entry.is_some() {\n-                bit_util::set_bit(null_slice, i);\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        if prepend > 0 {\n+            let extend_size = size * prepend;\n+            let copy_size = buffer.len();\n+            buffer.resize(copy_size + extend_size, 0);\n+            unsafe {\n+                let src = buffer.as_ptr();\n+                let dst = buffer.as_mut_ptr().add(extend_size);\n+                std::ptr::copy(src, dst, copy_size);\n+                buffer.as_mut_ptr().write_bytes(0, extend_size);\n             }\n-        });\n+        }\n \n-        let data = data\n-            .into_iter()\n-            .flat_map(|e| e.unwrap_or_else(|| vec![0; size]))\n-            .collect::<Vec<_>>();\n-        let data = ArrayData::new(\n+        let array_data = ArrayData::new(\n             DataType::FixedSizeBinary(size as i32),\n             len,\n             None,\n             Some(null_buf.into()),\n             0,\n-            vec![Buffer::from(&data)],\n+            vec![buffer.into()],\n             vec![],\n         );\n-        FixedSizeBinaryArray::from(Arc::new(data))\n+        Ok(FixedSizeBinaryArray::from(Arc::new(array_data)))\n+    }\n+\n+    /// Create an array from an iterable argument of byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = U>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            let slice = item.as_ref();\n+            if size != slice.len() {\n+                if size == 0 {\n+                    size = slice.len();\n+                } else {\n+                    return Err(ArrowError::InvalidArgumentError(format!(\n+                        \"Nested array size mismatch: one is {}, and the other is {}\",\n+                        size,\n+                        slice.len()\n+                    )));\n+                }\n+            }\n+            buffer.extend_from_slice(slice);\n+\n+            len += 1;\n+\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n+            .len(len)\n\nReview comment:\n       Consider an iterator of size `4` whose every element is `Some(&[0, 0, 0])`.\r\n   \r\n   I _think_ that `len` is being increased by 1 on every group of size `size`. In the example above, won't `len` equal to `4` instead of `12`?\r\n   \r\n   I _think_ that this should be `len * size`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T14:42:56.856+0000",
                    "updated": "2021-03-07T14:42:56.856+0000",
                    "started": "2021-03-07T14:42:56.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561977",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov commented on a change in pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#discussion_r589046553\n\n\n\n##########\nFile path: rust/arrow/src/array/array_binary.rs\n##########\n@@ -364,62 +365,135 @@ impl FixedSizeBinaryArray {\n         self.data.buffers()[0].clone()\n     }\n \n-    #[inline]\n-    fn value_offset_at(&self, i: usize) -> i32 {\n-        self.length * i as i32\n-    }\n-}\n+    /// Create an array from an iterable argument of sparse byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_sparse_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = Option<U>>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut byte = 0;\n+        let mut null_buf = MutableBuffer::from_len_zeroed(0);\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        let mut prepend = 0;\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            if byte == 0 {\n+                null_buf.push(0);\n+                byte = 8;\n+            }\n+            byte -= 1;\n+\n+            if let Some(sliceble) = item {\n+                let slice = sliceble.as_ref();\n+                if size != slice.len() {\n+                    if size == 0 {\n+                        size = slice.len();\n+                    } else {\n+                        return Err(ArrowError::InvalidArgumentError(format!(\n+                            \"Nested array size mismatch: one is {}, and the other is {}\",\n+                            size,\n+                            slice.len()\n+                        )));\n+                    }\n+                }\n+                bit_util::set_bit(null_buf.as_slice_mut(), len);\n+                buffer.extend_from_slice(slice);\n+            } else {\n+                buffer.extend_zeros(size);\n+                if size == 0 {\n+                    prepend += 1;\n+                }\n+            }\n \n-impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Vec<u8>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        let size = data[0].len();\n-        assert!(data.iter().all(|item| item.len() == size));\n-        let data = data.into_iter().flatten().collect::<Vec<_>>();\n-        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n-            .len(len)\n-            .add_buffer(Buffer::from(&data))\n-            .build();\n-        FixedSizeBinaryArray::from(array_data)\n-    }\n-}\n+            len += 1;\n \n-impl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Option<Vec<u8>>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        // try to estimate the size. This may not be possible no entry is valid => panic\n-        let size = data.iter().filter_map(|e| e.as_ref()).next().unwrap().len();\n-        assert!(data\n-            .iter()\n-            .filter_map(|e| e.as_ref())\n-            .all(|item| item.len() == size));\n-\n-        let num_bytes = bit_util::ceil(len, 8);\n-        let mut null_buf = MutableBuffer::from_len_zeroed(num_bytes);\n-        let null_slice = null_buf.as_slice_mut();\n-\n-        data.iter().enumerate().for_each(|(i, entry)| {\n-            if entry.is_some() {\n-                bit_util::set_bit(null_slice, i);\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        if prepend > 0 {\n+            let extend_size = size * prepend;\n+            let copy_size = buffer.len();\n+            buffer.resize(copy_size + extend_size, 0);\n+            unsafe {\n+                let src = buffer.as_ptr();\n+                let dst = buffer.as_mut_ptr().add(extend_size);\n+                std::ptr::copy(src, dst, copy_size);\n+                buffer.as_mut_ptr().write_bytes(0, extend_size);\n             }\n-        });\n+        }\n \n-        let data = data\n-            .into_iter()\n-            .flat_map(|e| e.unwrap_or_else(|| vec![0; size]))\n-            .collect::<Vec<_>>();\n-        let data = ArrayData::new(\n+        let array_data = ArrayData::new(\n             DataType::FixedSizeBinary(size as i32),\n             len,\n             None,\n             Some(null_buf.into()),\n             0,\n-            vec![Buffer::from(&data)],\n+            vec![buffer.into()],\n             vec![],\n         );\n-        FixedSizeBinaryArray::from(Arc::new(data))\n+        Ok(FixedSizeBinaryArray::from(Arc::new(array_data)))\n+    }\n+\n+    /// Create an array from an iterable argument of byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = U>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            let slice = item.as_ref();\n+            if size != slice.len() {\n+                if size == 0 {\n+                    size = slice.len();\n+                } else {\n+                    return Err(ArrowError::InvalidArgumentError(format!(\n+                        \"Nested array size mismatch: one is {}, and the other is {}\",\n+                        size,\n+                        slice.len()\n+                    )));\n+                }\n+            }\n+            buffer.extend_from_slice(slice);\n+\n+            len += 1;\n+\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n+            .len(len)\n\nReview comment:\n       Yes, it will be equal to 4. But in the previous implementation, for example `impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray`, when we pass for example a vec with 4 items to `from` then it will put 4 as len in the array builder. Isn't it the same there?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T15:30:13.271+0000",
                    "updated": "2021-03-07T15:30:13.271+0000",
                    "started": "2021-03-07T15:30:13.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561982",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-792297220\n\n\n   > I also think so, and also because no `unsafe` would be used. Our guidelines about `unsafe` is that there must be good justification for it, and I am trying to understand what is the justification exactly.\r\n   > \r\n   > E.g. since we have to validate that every entries' size are equal, couldn't we do it directly? e.g. something like this:\r\n   > \r\n   > ```rust\r\n   >          Some(v) => {  // item is not null\r\n   >                 let bytes = *v;\r\n   >                 if let Some(size) = size {\r\n   >                     if size != bytes.len() {\r\n   >                         return Err(ArrowError::...);\r\n   >                     }\r\n   >                 } else {\r\n   >                     // first time we see a len\r\n   >                     size = Some(bytes.len());\r\n   >                     self.values\r\n   >                         .extend_constant(&vec![0; bytes.len() * current_validity]);\r\n   >                 };\r\n   >                 self.values.extend_from_slice(bytes);\r\n   >                 self.validity.push(true);\r\n   > ```\r\n   > \r\n   > where `current_validity` tracks the number of nones up to when we get a size, and `size: Option<usize>` represents the current size (if known).\r\n   \r\n   You are actually absolutely right, no `unsafe` needed. Thanks!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T15:32:06.869+0000",
                    "updated": "2021-03-07T15:32:06.869+0000",
                    "started": "2021-03-07T15:32:06.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561983",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/561991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#discussion_r589056422\n\n\n\n##########\nFile path: rust/arrow/src/array/array_binary.rs\n##########\n@@ -364,62 +365,135 @@ impl FixedSizeBinaryArray {\n         self.data.buffers()[0].clone()\n     }\n \n-    #[inline]\n-    fn value_offset_at(&self, i: usize) -> i32 {\n-        self.length * i as i32\n-    }\n-}\n+    /// Create an array from an iterable argument of sparse byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_sparse_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = Option<U>>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut byte = 0;\n+        let mut null_buf = MutableBuffer::from_len_zeroed(0);\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        let mut prepend = 0;\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            if byte == 0 {\n+                null_buf.push(0);\n+                byte = 8;\n+            }\n+            byte -= 1;\n+\n+            if let Some(sliceble) = item {\n+                let slice = sliceble.as_ref();\n+                if size != slice.len() {\n+                    if size == 0 {\n+                        size = slice.len();\n+                    } else {\n+                        return Err(ArrowError::InvalidArgumentError(format!(\n+                            \"Nested array size mismatch: one is {}, and the other is {}\",\n+                            size,\n+                            slice.len()\n+                        )));\n+                    }\n+                }\n+                bit_util::set_bit(null_buf.as_slice_mut(), len);\n+                buffer.extend_from_slice(slice);\n+            } else {\n+                buffer.extend_zeros(size);\n+                if size == 0 {\n+                    prepend += 1;\n+                }\n+            }\n \n-impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Vec<u8>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        let size = data[0].len();\n-        assert!(data.iter().all(|item| item.len() == size));\n-        let data = data.into_iter().flatten().collect::<Vec<_>>();\n-        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n-            .len(len)\n-            .add_buffer(Buffer::from(&data))\n-            .build();\n-        FixedSizeBinaryArray::from(array_data)\n-    }\n-}\n+            len += 1;\n \n-impl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Option<Vec<u8>>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        // try to estimate the size. This may not be possible no entry is valid => panic\n-        let size = data.iter().filter_map(|e| e.as_ref()).next().unwrap().len();\n-        assert!(data\n-            .iter()\n-            .filter_map(|e| e.as_ref())\n-            .all(|item| item.len() == size));\n-\n-        let num_bytes = bit_util::ceil(len, 8);\n-        let mut null_buf = MutableBuffer::from_len_zeroed(num_bytes);\n-        let null_slice = null_buf.as_slice_mut();\n-\n-        data.iter().enumerate().for_each(|(i, entry)| {\n-            if entry.is_some() {\n-                bit_util::set_bit(null_slice, i);\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        if prepend > 0 {\n+            let extend_size = size * prepend;\n+            let copy_size = buffer.len();\n+            buffer.resize(copy_size + extend_size, 0);\n+            unsafe {\n+                let src = buffer.as_ptr();\n+                let dst = buffer.as_mut_ptr().add(extend_size);\n+                std::ptr::copy(src, dst, copy_size);\n+                buffer.as_mut_ptr().write_bytes(0, extend_size);\n             }\n-        });\n+        }\n \n-        let data = data\n-            .into_iter()\n-            .flat_map(|e| e.unwrap_or_else(|| vec![0; size]))\n-            .collect::<Vec<_>>();\n-        let data = ArrayData::new(\n+        let array_data = ArrayData::new(\n             DataType::FixedSizeBinary(size as i32),\n             len,\n             None,\n             Some(null_buf.into()),\n             0,\n-            vec![Buffer::from(&data)],\n+            vec![buffer.into()],\n             vec![],\n         );\n-        FixedSizeBinaryArray::from(Arc::new(data))\n+        Ok(FixedSizeBinaryArray::from(Arc::new(array_data)))\n+    }\n+\n+    /// Create an array from an iterable argument of byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = U>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            let slice = item.as_ref();\n+            if size != slice.len() {\n+                if size == 0 {\n+                    size = slice.len();\n+                } else {\n+                    return Err(ArrowError::InvalidArgumentError(format!(\n+                        \"Nested array size mismatch: one is {}, and the other is {}\",\n+                        size,\n+                        slice.len()\n+                    )));\n+                }\n+            }\n+            buffer.extend_from_slice(slice);\n+\n+            len += 1;\n+\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n+            .len(len)\n\nReview comment:\n       You are right (always learning something new here). In FixedSizeBinary[3] , each item is `[a, b, c]`, pretty much like in an ListArray, and thus the len should be 4, not 12. So, the invariant is actually the other way around:\r\n   \r\n   ```rust\r\n   array.buffer()[0].len() % size == 0\r\n   array.len() * size == array.buffer()[0].len()\r\n   array.validity().len() == array.len()\r\n   ```\r\n   \r\n   Sorry about the noise and thank you for your patience \ud83e\udd47 \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T16:45:15.338+0000",
                    "updated": "2021-03-07T16:45:15.338+0000",
                    "started": "2021-03-07T16:45:15.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "561991",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/562010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov commented on a change in pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#discussion_r589064080\n\n\n\n##########\nFile path: rust/arrow/src/array/array_binary.rs\n##########\n@@ -364,62 +365,135 @@ impl FixedSizeBinaryArray {\n         self.data.buffers()[0].clone()\n     }\n \n-    #[inline]\n-    fn value_offset_at(&self, i: usize) -> i32 {\n-        self.length * i as i32\n-    }\n-}\n+    /// Create an array from an iterable argument of sparse byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_sparse_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = Option<U>>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut byte = 0;\n+        let mut null_buf = MutableBuffer::from_len_zeroed(0);\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        let mut prepend = 0;\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            if byte == 0 {\n+                null_buf.push(0);\n+                byte = 8;\n+            }\n+            byte -= 1;\n+\n+            if let Some(sliceble) = item {\n+                let slice = sliceble.as_ref();\n+                if size != slice.len() {\n+                    if size == 0 {\n+                        size = slice.len();\n+                    } else {\n+                        return Err(ArrowError::InvalidArgumentError(format!(\n+                            \"Nested array size mismatch: one is {}, and the other is {}\",\n+                            size,\n+                            slice.len()\n+                        )));\n+                    }\n+                }\n+                bit_util::set_bit(null_buf.as_slice_mut(), len);\n+                buffer.extend_from_slice(slice);\n+            } else {\n+                buffer.extend_zeros(size);\n+                if size == 0 {\n+                    prepend += 1;\n+                }\n+            }\n \n-impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Vec<u8>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        let size = data[0].len();\n-        assert!(data.iter().all(|item| item.len() == size));\n-        let data = data.into_iter().flatten().collect::<Vec<_>>();\n-        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n-            .len(len)\n-            .add_buffer(Buffer::from(&data))\n-            .build();\n-        FixedSizeBinaryArray::from(array_data)\n-    }\n-}\n+            len += 1;\n \n-impl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray {\n-    fn from(data: Vec<Option<Vec<u8>>>) -> Self {\n-        let len = data.len();\n-        assert!(len > 0);\n-        // try to estimate the size. This may not be possible no entry is valid => panic\n-        let size = data.iter().filter_map(|e| e.as_ref()).next().unwrap().len();\n-        assert!(data\n-            .iter()\n-            .filter_map(|e| e.as_ref())\n-            .all(|item| item.len() == size));\n-\n-        let num_bytes = bit_util::ceil(len, 8);\n-        let mut null_buf = MutableBuffer::from_len_zeroed(num_bytes);\n-        let null_slice = null_buf.as_slice_mut();\n-\n-        data.iter().enumerate().for_each(|(i, entry)| {\n-            if entry.is_some() {\n-                bit_util::set_bit(null_slice, i);\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        if prepend > 0 {\n+            let extend_size = size * prepend;\n+            let copy_size = buffer.len();\n+            buffer.resize(copy_size + extend_size, 0);\n+            unsafe {\n+                let src = buffer.as_ptr();\n+                let dst = buffer.as_mut_ptr().add(extend_size);\n+                std::ptr::copy(src, dst, copy_size);\n+                buffer.as_mut_ptr().write_bytes(0, extend_size);\n             }\n-        });\n+        }\n \n-        let data = data\n-            .into_iter()\n-            .flat_map(|e| e.unwrap_or_else(|| vec![0; size]))\n-            .collect::<Vec<_>>();\n-        let data = ArrayData::new(\n+        let array_data = ArrayData::new(\n             DataType::FixedSizeBinary(size as i32),\n             len,\n             None,\n             Some(null_buf.into()),\n             0,\n-            vec![Buffer::from(&data)],\n+            vec![buffer.into()],\n             vec![],\n         );\n-        FixedSizeBinaryArray::from(Arc::new(data))\n+        Ok(FixedSizeBinaryArray::from(Arc::new(array_data)))\n+    }\n+\n+    /// Create an array from an iterable argument of byte slices.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns error if argument has length zero, or sizes of nested slices don't match.\n+    pub fn try_from_iter<T, U>(mut iter: T) -> Result<Self, ArrowError>\n+    where\n+        T: Iterator<Item = U>,\n+        U: AsRef<[u8]>,\n+    {\n+        let mut len = 0;\n+        let mut size = 0;\n+        let mut buffer = MutableBuffer::from_len_zeroed(0);\n+        iter.try_for_each(|item| -> Result<(), ArrowError> {\n+            let slice = item.as_ref();\n+            if size != slice.len() {\n+                if size == 0 {\n+                    size = slice.len();\n+                } else {\n+                    return Err(ArrowError::InvalidArgumentError(format!(\n+                        \"Nested array size mismatch: one is {}, and the other is {}\",\n+                        size,\n+                        slice.len()\n+                    )));\n+                }\n+            }\n+            buffer.extend_from_slice(slice);\n+\n+            len += 1;\n+\n+            Ok(())\n+        })?;\n+\n+        if len == 0 {\n+            return Err(ArrowError::InvalidArgumentError(\n+                \"Input iterable argument has no data\".to_owned(),\n+            ));\n+        }\n+\n+        let array_data = ArrayData::builder(DataType::FixedSizeBinary(size as i32))\n+            .len(len)\n\nReview comment:\n       Great work you do \ud83d\udc4d\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T17:47:34.239+0000",
                    "updated": "2021-03-07T17:47:34.239+0000",
                    "started": "2021-03-07T17:47:34.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562010",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/562014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-792324018\n\n\n   FYI I merged https://github.com/apache/arrow/pull/9653 / [ARROW-11896](https://issues.apache.org/jira/browse/ARROW-11896) for the Rust CI checks which may affect this PR. If you see \"Rust / AMD64 Debian 10 Rust stable test workspace\" failing  with a linker error or no logs, rebasing against master will hopefully fix the problem\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T17:58:04.796+0000",
                    "updated": "2021-03-07T17:58:04.796+0000",
                    "started": "2021-03-07T17:58:04.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562014",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/562022",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-792326554\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=h1) Report\n   > Merging [#9647](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=desc) (cb69ca1) into [master](https://codecov.io/gh/apache/arrow/commit/bfa99d98e6f0b49aed079d9f99668390f84a933f?el=desc) (bfa99d9) will **decrease** coverage by `0.00%`.\n   > The diff coverage is `82.85%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9647/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9647      +/-   ##\n   ==========================================\n   - Coverage   82.49%   82.49%   -0.01%     \n   ==========================================\n     Files         245      245              \n     Lines       57347    57380      +33     \n   ==========================================\n   + Hits        47311    47335      +24     \n   - Misses      10036    10045       +9     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow/src/array/array\\_binary.rs](https://codecov.io/gh/apache/arrow/pull/9647/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvYXJyYXlfYmluYXJ5LnJz) | `90.35% <80.32%> (-1.47%)` | :arrow_down: |\n   | [rust/arrow/src/array/transform/mod.rs](https://codecov.io/gh/apache/arrow/pull/9647/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvdHJhbnNmb3JtL21vZC5ycw==) | `93.21% <100.00%> (+0.02%)` | :arrow_up: |\n   | [rust/arrow/src/array/equal/utils.rs](https://codecov.io/gh/apache/arrow/pull/9647/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvYXJyYXkvZXF1YWwvdXRpbHMucnM=) | `76.47% <0.00%> (+0.98%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=footer). Last update [bfa99d9...cb69ca1](https://codecov.io/gh/apache/arrow/pull/9647?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T18:12:28.739+0000",
                    "updated": "2021-03-07T18:12:28.739+0000",
                    "started": "2021-03-07T18:12:28.738+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562022",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/562044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov closed pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T19:44:40.400+0000",
                    "updated": "2021-03-07T19:44:40.400+0000",
                    "started": "2021-03-07T19:44:40.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562044",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/562052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov opened a new pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647\n\n\n   This Pr is follow up for https://github.com/apache/arrow/pull/8853#discussion_r542189448 .\r\n   I was not able to utilize `TryFrom` because of conflicting implementations, so instead I created two new functions `try_from_sparse_iter` and `try_from_iter` in place of `impl From<Vec<Vec<u8>>> for FixedSizeBinaryArray` and `impl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-07T20:23:45.676+0000",
                    "updated": "2021-03-07T20:23:45.676+0000",
                    "started": "2021-03-07T20:23:45.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562052",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/562568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-793059480\n\n\n   Sorry, closed this one by mistake. Let me know if anything else is to be done here.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-08T20:38:06.025+0000",
                    "updated": "2021-03-08T20:38:06.025+0000",
                    "started": "2021-03-08T20:38:06.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "562568",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/563574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ivanvankov edited a comment on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-793059480\n\n\n   Sorry, closed this one by mistake. Let me know if anything else is to be done here. Thank you!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-10T08:58:34.929+0000",
                    "updated": "2021-03-10T08:58:34.929+0000",
                    "started": "2021-03-10T08:58:34.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "563574",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/568345",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647#issuecomment-801935807\n\n\n   I merged this code with apache/master locally and ran `cargo test --all` and it all looks good to me. Thus I am going to merge this one in. Thanks again @ivanvankov  and sorry for the delay!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-18T13:42:16.544+0000",
                    "updated": "2021-03-18T13:42:16.544+0000",
                    "started": "2021-03-18T13:42:16.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "568345",
                    "issueId": "13345926"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/worklog/568347",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #9647:\nURL: https://github.com/apache/arrow/pull/9647\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-18T13:42:41.827+0000",
                    "updated": "2021-03-18T13:42:41.827+0000",
                    "started": "2021-03-18T13:42:41.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "568347",
                    "issueId": "13345926"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@318c5e1a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42aef196[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1452149f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@21c565c2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31b072b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2bb95372[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f4b4c76[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@25aad728[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e53aee9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1f905092[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6acd87ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@19ad0e0c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 18 16:24:03 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-18T13:42:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10903/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-12-14T18:53:56.000+0000",
        "updated": "2021-03-18T16:24:03.000+0000",
        "timeoriginalestimate": null,
        "description": "Context: https://github.com/apache/arrow/pull/8853#discussion_r542189448 suggestion by [~jorgecarleitao]\r\n\r\nBasically, the goal would be to remove \r\n{code}\r\nimpl From<Vec<Option<Vec<u8>>>> for FixedSizeBinaryArray {\r\n{code}\r\n\r\nWhich while mostly used in tests,  panics in certain situations. \r\n\r\nGoal would be to replace that implementation with a `FromIter` implementation which is more performance, more general, and has the same ergonomics (from(vec![].into_iter()) instead of from(vec![...]) for a vector). \r\n\r\n\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement FromIter<Option<Vec<u8>>> constructor for FixedSizeBinaryArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/comment/17296531",
                    "id": "17296531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ivanvankov",
                        "name": "ivanvankov",
                        "key": "ivanvankov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Ivan Vankov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Created PR for this: https://github.com/apache/arrow/pull/9647",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ivanvankov",
                        "name": "ivanvankov",
                        "key": "ivanvankov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Ivan Vankov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-03-06T12:28:05.053+0000",
                    "updated": "2021-03-06T12:28:05.053+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/comment/17304150",
                    "id": "17304150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9647\n[https://github.com/apache/arrow/pull/9647]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-18T13:42:34.326+0000",
                    "updated": "2021-03-18T13:42:34.326+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345926/comment/17304257",
                    "id": "17304257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ivanvankov",
                        "name": "ivanvankov",
                        "key": "ivanvankov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Ivan Vankov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thank you, [~alamb]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ivanvankov",
                        "name": "ivanvankov",
                        "key": "ivanvankov",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Ivan Vankov",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-03-18T16:24:03.610+0000",
                    "updated": "2021-03-18T16:24:03.610+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lhx4:",
        "customfield_12314139": null
    }
}