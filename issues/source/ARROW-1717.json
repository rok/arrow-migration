{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13111558",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558",
    "key": "ARROW-1717",
    "fields": {
        "parent": {
            "id": "13099860",
            "key": "ARROW-1463",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13099860",
            "fields": {
                "summary": "[JAVA] Restructure ValueVector hierarchy to minimize compile-time generated code",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1717/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6d51bbee[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@681c6155[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22d69e4b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29cb458d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ae70f37[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2e42a059[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38f0471c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4b649aa2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59e8aa4e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@62939942[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5861eaab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@373fca8f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 14 04:49:06 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-14T04:48:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1717/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2017-10-23T22:53:42.000+0000",
        "updated": "2019-06-03T12:45:30.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] Remove public static helper method in vector classes for JSONReader/Writer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16242553",
                    "id": "16242553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss opened a new pull request #1290: [ARROW-1717] Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290\n \n \n   This patch:\r\n   \r\n   * Refactor JsonReader and remove static helper function in vector classes\r\n   * Fix integration test\r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T18:13:36.105+0000",
                    "updated": "2017-11-07T18:13:36.105+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16242564",
                    "id": "16242564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: [ARROW-1717] Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-342574257\n \n \n   cc @BryanCutler @siddharthteotia \r\n   \r\n   This patch cleans up JsonReader.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T18:19:58.252+0000",
                    "updated": "2017-11-07T18:19:58.252+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16242586",
                    "id": "16242586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1290: [ARROW-1717] Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-342577047\n \n \n   +1, I prefer it this way to keep the vector classes cleaner\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T18:29:32.956+0000",
                    "updated": "2017-11-07T18:29:32.956+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16242662",
                    "id": "16242662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-342588734\n \n \n   This also fixes ARROW-1431\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-07T19:08:45.306+0000",
                    "updated": "2017-11-07T19:08:45.306+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16243127",
                    "id": "16243127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on a change in pull request #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#discussion_r149543200\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java\n ##########\n @@ -183,6 +185,282 @@ public VectorSchemaRoot read() throws IOException {\n     }\n   }\n \n+  private abstract class BufferReader {\n+    abstract protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException;\n+\n+    final ArrowBuf readBuffer(BufferAllocator allocator, int count) throws IOException {\n+      readToken(START_ARRAY);\n+      ArrowBuf buf = read(allocator, count);\n+      readToken(END_ARRAY);\n+      return buf;\n+    }\n+  }\n+\n+  private class BufferHelper {\n+     BufferReader BIT = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        final int bufferSize = BitVectorHelper.getValidityBufferSize(count);\n+        ArrowBuf buf = allocator.buffer(bufferSize);\n+\n+        // C++ integration test fails without this.\n+        buf.setZero(0, bufferSize);\n \n Review comment:\n   See https://issues.apache.org/jira/browse/ARROW-1779\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T00:11:56.337+0000",
                    "updated": "2017-11-08T00:11:56.337+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16244262",
                    "id": "16244262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-342872246\n \n \n   Ping @siddharthteotia \r\n   \r\n   Thoughts?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-08T16:27:53.591+0000",
                    "updated": "2017-11-08T16:27:53.591+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16246228",
                    "id": "16246228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-343248851\n \n \n   LGTM.\r\n   \r\n   My two cents: \r\n   \r\n   We should be little careful of adding patches to refactor branch since that essentially requires to grab and retest the changes downstream with Dremio.\r\n   \r\n   Currently there are two patches in refactor branch and there is a 3rd one coming in (changes that were discovered as part of testing in Dremio). So there is a good chance of conflict as well.\r\n   \r\n   My suggestion is that if there is some cleanup necessary, it can easily be done after refactor branch is merged into master. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T18:35:08.229+0000",
                    "updated": "2017-11-09T18:35:08.229+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16246275",
                    "id": "16246275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-343255767\n \n \n   > My suggestion is that if there is some cleanup necessary, it can easily be done after refactor branch is merged into master.\r\n   \r\n   @siddharthteotia When are you planning to merge refactor branch to master?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T18:58:34.090+0000",
                    "updated": "2017-11-09T18:58:34.090+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16246279",
                    "id": "16246279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-343256480\n \n \n   Let's merge this patch? We can discuss what should we do to concurrently work on refactor. I think @BryanCutler also has a patch that he wants to merge in (arrow ipc refactor).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-09T19:00:43.147+0000",
                    "updated": "2017-11-09T19:00:43.147+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16247980",
                    "id": "16247980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-343569808\n \n \n   Ping @siddharthteotia \r\n   \r\n   When do you plan to merge this branch into master? In the meantime, should we wait until then before working on new refactor-related patches? Just want to make sure we have a way to make forward progress independently.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-10T19:52:31.138+0000",
                    "updated": "2017-11-10T19:52:31.138+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16249277",
                    "id": "16249277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-343857421\n \n \n   There are about 4 regression test failures remaining to be fixed. Rest of the functional testing looks good with Dremio. Perf testing in progress. This week, we should be able to start the process of formal approval of merging this branch into master. As I had mentioned earlier about the 3rd patch w.r.t changes made to Arrow as part of testing in Dremio, the PR should land in by EOD.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-13T09:14:19.123+0000",
                    "updated": "2017-11-13T09:14:19.123+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16249804",
                    "id": "16249804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-343979806\n \n \n   Thanks for the update. I think this patch shouldn't affect Dremio tests, it only touches json reader and integration test. How about we merge this?\r\n   \r\n   Also, should we work on items on https://issues.apache.org/jira/browse/ARROW-1463 after the merge?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-13T16:43:39.094+0000",
                    "updated": "2017-11-13T16:43:39.094+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250252",
                    "id": "16250252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-344060772\n \n \n   Sure, let's merge this since the changes are fairly isolated. I will be putting up third patch today EOD. Our performance testing is complete and we have seen overall improvement in TPCH.\r\n   \r\n   Will send out an email on the mailing list updating everyone and starting the formal process of merging java-vector-refactor into master. Will also talk about the follow-up items.\r\n   \r\n   Are the integration test issues fixed? I suppose they are not JAVA vector code problem.\r\n   \r\n   cc @jacques-n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-13T21:16:18.575+0000",
                    "updated": "2017-11-13T21:16:18.575+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250260",
                    "id": "16250260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "icexelloss commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-344062848\n \n \n   The integration tests passed.\r\n   \r\n   It failed previously due to issue with JsonReader during refactoring.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-13T21:23:31.638+0000",
                    "updated": "2017-11-13T21:23:31.638+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250484",
                    "id": "16250484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "siddharthteotia commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-344094824\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-13T23:32:19.015+0000",
                    "updated": "2017-11-13T23:32:19.015+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250667",
                    "id": "16250667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-344121894\n \n \n   I'm going to test this locally and then merge into the refactor branch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-14T02:03:40.769+0000",
                    "updated": "2017-11-14T02:03:40.769+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250678",
                    "id": "16250678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290#issuecomment-344124041\n \n \n   Merged in https://github.com/apache/arrow/commit/a2fa4619ff40548eb62b7b09483b81e1b3392c92, thanks all!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-14T02:16:37.586+0000",
                    "updated": "2017-11-14T02:16:37.586+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250679",
                    "id": "16250679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1290: ARROW-1717: Refactor JsonReader\nURL: https://github.com/apache/arrow/pull/1290\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java\nindex 6587cde63..47daeee7f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseNullableVariableWidthVector.java\n@@ -909,52 +909,6 @@ protected final void handleSafe(int index, int dataLength) {\n       }\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *                helper methods currently                        *\n-    *                used by JsonFileReader and                      *\n-    *                JsonFileWriter                                  *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Method used by Json Reader to explicitly set the data of the variable\n-    * width vector elements. The method takes care of allocating the memory\n-    * for the vector if caller hasn't done so.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param data ArrowBuf for storing variable width elements in the vector\n-    * @param offset offset of the element\n-    * @param allocator memory allocator\n-    * @param index position of the element in the vector\n-    * @param value array of bytes for the element\n-    * @param valueCount number of elements in the vector\n-    * @return buffer holding the variable width data.\n-    */\n-   public static ArrowBuf set(ArrowBuf data, ArrowBuf offset,\n-                              BufferAllocator allocator, int index, byte[] value,\n-                              int valueCount) {\n-      if (data == null) {\n-         data = allocator.buffer(INITIAL_BYTE_COUNT);\n-      }\n-      final int currentBufferCapacity = data.capacity();\n-      final int currentStartOffset = offset.getInt(index * OFFSET_WIDTH);\n-      while (currentBufferCapacity < currentStartOffset + value.length) {\n-         final ArrowBuf newBuf = allocator.buffer(currentBufferCapacity * 2);\n-         newBuf.setBytes(0, data, 0, currentBufferCapacity);\n-         data.release();\n-         data = newBuf;\n-      }\n-      data.setBytes(currentStartOffset, value, 0, value.length);\n-      if (index == (valueCount - 1)) {\n-         data.writerIndex(offset.getInt(valueCount * OFFSET_WIDTH));\n-      }\n-      return data;\n-   }\n-\n    /**\n     * Method used by Json Writer to read a variable width element from\n     * the variable width vector and write to Json.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java\nindex ee40d708c..253427333 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableBigIntVector.java\n@@ -34,7 +34,7 @@\n  * maintained to track which elements in the vector are null.\n  */\n public class NullableBigIntVector extends BaseNullableFixedWidthVector {\n-   private static final byte TYPE_WIDTH = 8;\n+   public static final byte TYPE_WIDTH = 8;\n    private final FieldReader reader;\n \n    /**\n@@ -290,41 +290,6 @@ public void setSafe(int index, int isSet, long value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, long value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setLong(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java\nindex 949287eca..e6b5b590f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateDayVector.java\n@@ -292,40 +292,6 @@ public void setSafe(int index, int isSet, int value) {\n       set(index, isSet, value);\n    }\n \n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader                                *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, int value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setInt(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java\nindex a0bdccede..8e15100f7 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableDateMilliVector.java\n@@ -296,40 +296,6 @@ public void setSafe(int index, int isSet, long value) {\n       set(index, isSet, value);\n    }\n \n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader                                *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, long value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setLong(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java\nindex 8320f9083..2a611c6a2 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableDecimalVector.java\n@@ -37,7 +37,7 @@\n  * maintained to track which elements in the vector are null.\n  */\n public class NullableDecimalVector extends BaseNullableFixedWidthVector {\n-   private static final byte TYPE_WIDTH = 16;\n+   public static final byte TYPE_WIDTH = 16;\n    private final FieldReader reader;\n \n    private final int precision;\n@@ -357,41 +357,6 @@ public void setSafe(int index, int isSet, int start, ArrowBuf buffer) {\n \n    /******************************************************************\n     *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader                                *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value as array of bytes\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, byte[] value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      DecimalUtility.writeByteArrayToArrowBuf(value, buffer, index);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n-\n-   /******************************************************************\n-    *                                                                *\n     *                      vector transfer                           *\n     *                                                                *\n     ******************************************************************/\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java\nindex 5b28065c4..3ba5cfcea 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat4Vector.java\n@@ -34,7 +34,7 @@\n  * maintained to track which elements in the vector are null.\n  */\n public class NullableFloat4Vector extends BaseNullableFixedWidthVector {\n-   private static final byte TYPE_WIDTH = 4;\n+   public static final byte TYPE_WIDTH = 4;\n    private final FieldReader reader;\n \n    /**\n@@ -291,41 +291,6 @@ public void setSafe(int index, int isSet, float value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, float value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setFloat(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java\nindex 624abf2f2..2fb96a44f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableFloat8Vector.java\n@@ -34,7 +34,7 @@\n  * maintained to track which elements in the vector are null.\n  */\n public class NullableFloat8Vector extends BaseNullableFixedWidthVector {\n-   private static final byte TYPE_WIDTH = 8;\n+   public static final byte TYPE_WIDTH = 8;\n    private final FieldReader reader;\n \n    /**\n@@ -291,41 +291,6 @@ public void setSafe(int index, int isSet, double value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, double value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setDouble(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java\nindex 6311daf4f..93deacbdf 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableIntVector.java\n@@ -34,7 +34,7 @@\n  * maintained to track which elements in the vector are null.\n  */\n public class NullableIntVector extends BaseNullableFixedWidthVector {\n-   private static final byte TYPE_WIDTH = 4;\n+   public static final byte TYPE_WIDTH = 4;\n    private final FieldReader reader;\n \n    /**\n@@ -291,40 +291,6 @@ public void setSafe(int index, int isSet, int value) {\n       set(index, isSet, value);\n    }\n \n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, int value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setInt(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java\nindex c45a8d5f5..ed337188b 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableSmallIntVector.java\n@@ -34,7 +34,7 @@\n  * maintained to track which elements in the vector are null.\n  */\n public class NullableSmallIntVector extends BaseNullableFixedWidthVector {\n-   private static final byte TYPE_WIDTH = 2;\n+   public static final byte TYPE_WIDTH = 2;\n    private final FieldReader reader;\n \n    /**\n@@ -319,41 +319,6 @@ public void setSafe(int index, int isSet, short value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, short value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setShort(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java\nindex 454a4ac41..d7ea32223 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMicroVector.java\n@@ -292,40 +292,6 @@ public void setSafe(int index, int isSet, long value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, long value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setLong(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java\nindex 8540d1692..07d8abba4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeMilliVector.java\n@@ -294,40 +294,6 @@ public void setSafe(int index, int isSet, int value) {\n    }\n \n \n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, int value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setInt(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java\nindex 015226da2..947b2392f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeNanoVector.java\n@@ -291,40 +291,6 @@ public void setSafe(int index, int isSet, long value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, long value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setLong(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java\nindex 2b2375e92..0a3cfaac0 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeSecVector.java\n@@ -291,40 +291,6 @@ public void setSafe(int index, int isSet, int value) {\n       set(index, isSet, value);\n    }\n \n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, int value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setInt(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java\nindex b2a58bd45..1bf2abc38 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTimeStampVector.java\n@@ -165,42 +165,6 @@ public void setSafe(int index, int isSet, long value) {\n       set(index, isSet, value);\n    }\n \n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and                            *\n-    *          JsonFileWriter                                        *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, long value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setLong(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java\nindex 15100530d..ccbfa32b8 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/NullableTinyIntVector.java\n@@ -318,42 +318,6 @@ public void setSafe(int index, int isSet, byte value) {\n       set(index, isSet, value);\n    }\n \n-\n-\n-   /******************************************************************\n-    *                                                                *\n-    *          helper routines currently                             *\n-    *          used in JsonFileReader and JsonFileWriter             *\n-    *                                                                *\n-    ******************************************************************/\n-\n-\n-   /**\n-    * Given a data buffer, this method sets the element value at a particular\n-    * position. Reallocates the buffer if needed.\n-    *\n-    * This method should not be used externally.\n-    *\n-    * @param buffer data buffer\n-    * @param allocator allocator\n-    * @param valueCount number of elements in the vector\n-    * @param index position of the new element\n-    * @param value element value\n-    * @return data buffer\n-    */\n-   public static ArrowBuf set(ArrowBuf buffer, BufferAllocator allocator,\n-                              int valueCount, int index, byte value) {\n-      if (buffer == null) {\n-         buffer = allocator.buffer(valueCount * TYPE_WIDTH);\n-      }\n-      buffer.setByte(index * TYPE_WIDTH, value);\n-      if (index == (valueCount - 1)) {\n-         buffer.writerIndex(valueCount * TYPE_WIDTH);\n-      }\n-\n-      return buffer;\n-   }\n-\n    /**\n     * Given a data buffer, get the value stored at a particular position\n     * in the vector.\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java b/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java\nindex c6a82510e..560b0b9c5 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/file/json/JsonFileReader.java\n@@ -27,15 +27,17 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.charset.Charset;\n import java.util.*;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n import io.netty.buffer.ArrowBuf;\n import org.apache.arrow.memory.BufferAllocator;\n import org.apache.arrow.vector.*;\n-import org.apache.arrow.vector.complex.ListVector;\n import org.apache.arrow.vector.dictionary.Dictionary;\n import org.apache.arrow.vector.dictionary.DictionaryProvider;\n+import org.apache.arrow.vector.file.InvalidArrowFileException;\n import org.apache.arrow.vector.schema.ArrowFieldNode;\n import org.apache.arrow.vector.schema.ArrowVectorType;\n import org.apache.arrow.vector.types.Types;\n@@ -183,6 +185,282 @@ public VectorSchemaRoot read() throws IOException {\n     }\n   }\n \n+  private abstract class BufferReader {\n+    abstract protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException;\n+\n+    final ArrowBuf readBuffer(BufferAllocator allocator, int count) throws IOException {\n+      readToken(START_ARRAY);\n+      ArrowBuf buf = read(allocator, count);\n+      readToken(END_ARRAY);\n+      return buf;\n+    }\n+  }\n+\n+  private class BufferHelper {\n+     BufferReader BIT = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        final int bufferSize = BitVectorHelper.getValidityBufferSize(count);\n+        ArrowBuf buf = allocator.buffer(bufferSize);\n+\n+        // C++ integration test fails without this.\n+        buf.setZero(0, bufferSize);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          BitVectorHelper.setValidityBit(buf, i, parser.readValueAs(Boolean.class) ? 1 : 0);\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader INT1 = new BufferReader() {\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableTinyIntVector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          buf.writeByte(parser.getByteValue());\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader INT2 = new BufferReader() {\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableSmallIntVector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          buf.writeShort(parser.getShortValue());\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader INT4 = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableIntVector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          buf.writeInt(parser.getIntValue());\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader INT8 = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableBigIntVector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          buf.writeLong(parser.getLongValue());\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader FLOAT4 = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableFloat4Vector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          buf.writeFloat(parser.getFloatValue());\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader FLOAT8 = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableFloat8Vector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          buf.writeDouble(parser.getDoubleValue());\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader DECIMAL = new BufferReader() {\n+\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrowBuf buf = allocator.buffer(count * NullableDecimalVector.TYPE_WIDTH);\n+\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          final byte[] value = decodeHexSafe(parser.getValueAsString());\n+          DecimalUtility.writeByteArrayToArrowBuf(value, buf, i);\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader VARCHAR = new BufferReader() {\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrayList<byte[]> values = Lists.newArrayList();\n+        int bufferSize = 0;\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          final byte[] value = parser.getValueAsString().getBytes(UTF_8);\n+          values.add(value);\n+          bufferSize += value.length;\n+\n+        }\n+\n+        ArrowBuf buf = allocator.buffer(bufferSize);\n+\n+        for (byte[] value : values) {\n+          buf.writeBytes(value);\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+    BufferReader VARBINARY = new BufferReader() {\n+      @Override\n+      protected ArrowBuf read(BufferAllocator allocator, int count) throws IOException {\n+        ArrayList<byte[]> values = Lists.newArrayList();\n+        int bufferSize = 0;\n+        for (int i = 0; i < count; i++) {\n+          parser.nextToken();\n+          final byte[] value = decodeHexSafe(parser.readValueAs(String.class));\n+          values.add(value);\n+          bufferSize += value.length;\n+\n+        }\n+\n+        ArrowBuf buf = allocator.buffer(bufferSize);\n+\n+        for (byte[] value : values) {\n+          buf.writeBytes(value);\n+        }\n+\n+        return buf;\n+      }\n+    };\n+\n+  }\n+\n+  private ArrowBuf readBuffer(BufferAllocator allocator, ArrowVectorType bufferType, Types.MinorType type, int count) throws IOException {\n+    ArrowBuf buf;\n+\n+    BufferHelper helper = new BufferHelper();\n+\n+    BufferReader reader = null;\n+\n+    if (bufferType.equals(VALIDITY)) {\n+      reader = helper.BIT;\n+    } else if (bufferType.equals(OFFSET)) {\n+      reader = helper.INT4;\n+    } else if (bufferType.equals(TYPE)) {\n+      reader = helper.INT1;\n+    } else if (bufferType.equals(DATA)) {\n+      switch (type) {\n+        case BIT:\n+          reader = helper.BIT;\n+          break;\n+        case TINYINT:\n+          reader = helper.INT1;\n+          break;\n+        case SMALLINT:\n+          reader = helper.INT2;\n+          break;\n+        case INT:\n+          reader = helper.INT4;\n+          break;\n+        case BIGINT:\n+          reader = helper.INT8;\n+          break;\n+        case UINT1:\n+          reader = helper.INT1;\n+          break;\n+        case UINT2:\n+          reader = helper.INT2;\n+          break;\n+        case UINT4:\n+          reader = helper.INT4;\n+          break;\n+        case UINT8:\n+          reader = helper.INT8;\n+          break;\n+        case FLOAT4:\n+          reader = helper.FLOAT4;\n+          break;\n+        case FLOAT8:\n+          reader = helper.FLOAT8;\n+          break;\n+        case DECIMAL:\n+          reader = helper.DECIMAL;\n+          break;\n+        case VARCHAR:\n+          reader = helper.VARCHAR;\n+          break;\n+        case VARBINARY:\n+          reader = helper.VARBINARY;\n+          break;\n+        case DATEDAY:\n+          reader = helper.INT4;\n+          break;\n+        case DATEMILLI:\n+          reader = helper.INT8;\n+          break;\n+        case TIMESEC:\n+        case TIMEMILLI:\n+          reader = helper.INT4;\n+          break;\n+        case TIMEMICRO:\n+        case TIMENANO:\n+          reader = helper.INT8;\n+          break;\n+        case TIMESTAMPNANO:\n+        case TIMESTAMPMICRO:\n+        case TIMESTAMPMILLI:\n+        case TIMESTAMPSEC:\n+        case TIMESTAMPNANOTZ:\n+        case TIMESTAMPMICROTZ:\n+        case TIMESTAMPMILLITZ:\n+        case TIMESTAMPSECTZ:\n+          reader = helper.INT8;\n+          break;\n+        default:\n+          throw new UnsupportedOperationException(\"Cannot read array of type \" + type);\n+      }\n+    } else {\n+      throw new InvalidArrowFileException(\"Unrecognized buffer type \" + bufferType);\n+    }\n+\n+    buf = reader.readBuffer(allocator, count);\n+    assert buf != null;\n+    return buf;\n+  }\n+\n   private void readFromJsonIntoVector(Field field, FieldVector vector) throws JsonParseException, IOException {\n     List<ArrowVectorType> vectorTypes = field.getTypeLayout().getVectorTypes();\n     ArrowBuf[] vectorBuffers = new ArrowBuf[vectorTypes.size()];\n@@ -209,7 +487,7 @@ private void readFromJsonIntoVector(Field field, FieldVector vector) throws Json\n         throw new IllegalArgumentException(\"Expected field \" + field.getName() + \" but got \" + name);\n       }\n \n-      /* Initialize the vector with required capacity but don't allocate since we would\n+      /* Initialize the vector with required capacity but don't allocateNew since we would\n        * be doing loadFieldBuffers.\n        */\n       int valueCount = readNextField(\"count\", Integer.class);\n@@ -218,29 +496,13 @@ private void readFromJsonIntoVector(Field field, FieldVector vector) throws Json\n       for (int v = 0; v < vectorTypes.size(); v++) {\n         ArrowVectorType vectorType = vectorTypes.get(v);\n         nextFieldIs(vectorType.getName());\n-        readToken(START_ARRAY);\n         int innerBufferValueCount = valueCount;\n         if (vectorType.equals(OFFSET)) {\n           /* offset buffer has 1 additional value capacity */\n           innerBufferValueCount = valueCount + 1;\n         }\n-        for (int i = 0; i < innerBufferValueCount; i++) {\n-          /* write data to the buffer */\n-          parser.nextToken();\n-          /* for variable width vectors, value count doesn't help pre-determining the capacity of\n-           * the underlying data buffer. So we need to pass down the offset buffer (which was already\n-           * populated in the previous iteration of this loop).\n-           */\n-          if (vectorType.equals(DATA) && (vector.getMinorType() == Types.MinorType.VARCHAR\n-                  || vector.getMinorType() == Types.MinorType.VARBINARY)) {\n-            vectorBuffers[v] = setValueFromParser(vectorType, vector, vectorBuffers[v],\n-                    vectorBuffers[v-1], i, innerBufferValueCount);\n-          } else {\n-            vectorBuffers[v] = setValueFromParser(vectorType, vector, vectorBuffers[v],\n-                    null, i, innerBufferValueCount);\n-          }\n-        }\n-        readToken(END_ARRAY);\n+\n+        vectorBuffers[v] = readBuffer(allocator, vectorType, vector.getMinorType(), innerBufferValueCount);\n       }\n \n       vector.loadFieldBuffers(new ArrowFieldNode(valueCount, 0), Arrays.asList(vectorBuffers));\n@@ -250,7 +512,8 @@ private void readFromJsonIntoVector(Field field, FieldVector vector) throws Json\n       if (!fields.isEmpty()) {\n         List<FieldVector> vectorChildren = vector.getChildrenFromFields();\n         if (fields.size() != vectorChildren.size()) {\n-          throw new IllegalArgumentException(\"fields and children are not the same size: \" + fields.size() + \" != \" + vectorChildren.size());\n+          throw new IllegalArgumentException(\n+                  \"fields and children are not the same size: \" + fields.size() + \" != \" + vectorChildren.size());\n         }\n         nextFieldIs(\"children\");\n         readToken(START_ARRAY);\n@@ -277,125 +540,6 @@ private void readFromJsonIntoVector(Field field, FieldVector vector) throws Json\n     }\n   }\n \n-  private ArrowBuf setValueFromParser(ArrowVectorType bufferType, FieldVector vector,\n-                                      ArrowBuf buffer, ArrowBuf offsetBuffer, int index, int valueCount) throws IOException {\n-    if (bufferType.equals(TYPE)) {\n-      buffer = NullableTinyIntVector.set(buffer, allocator,\n-              valueCount, index, parser.readValueAs(Byte.class));\n-    } else if (bufferType.equals(OFFSET)) {\n-      buffer = BaseNullableVariableWidthVector.set(buffer, allocator,\n-              valueCount, index, parser.readValueAs(Integer.class));\n-    } else if (bufferType.equals(VALIDITY)) {\n-      buffer = BitVectorHelper.setValidityBit(buffer, allocator,\n-              valueCount, index, parser.readValueAs(Boolean.class) ? 1 : 0);\n-    } else if (bufferType.equals(DATA)) {\n-      switch (vector.getMinorType()) {\n-        case BIT:\n-          buffer = BitVectorHelper.setValidityBit(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Boolean.class) ? 1 : 0);\n-          break;\n-        case TINYINT:\n-          buffer = NullableTinyIntVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Byte.class));\n-          break;\n-        case SMALLINT:\n-          buffer = NullableSmallIntVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Short.class));\n-          break;\n-        case INT:\n-          buffer = NullableIntVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Integer.class));\n-          break;\n-        case BIGINT:\n-          buffer = NullableBigIntVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case FLOAT4:\n-          buffer = NullableFloat4Vector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Float.class));\n-          break;\n-        case FLOAT8:\n-          buffer = NullableFloat8Vector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Double.class));\n-          break;\n-        case DECIMAL:\n-          buffer = NullableDecimalVector.set(buffer, allocator,\n-                  valueCount, index, decodeHexSafe(parser.readValueAs(String.class)));\n-          break;\n-        case VARBINARY:\n-          assert (offsetBuffer != null);\n-          buffer = BaseNullableVariableWidthVector.set(buffer, offsetBuffer, allocator, index,\n-                  decodeHexSafe(parser.readValueAs(String.class)), valueCount);\n-          break;\n-        case VARCHAR:\n-          assert (offsetBuffer != null);\n-          buffer = BaseNullableVariableWidthVector.set(buffer, offsetBuffer, allocator, index,\n-                  parser.readValueAs(String.class).getBytes(UTF_8), valueCount);\n-          break;\n-        case DATEDAY:\n-          buffer = NullableDateDayVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Integer.class));\n-          break;\n-        case DATEMILLI:\n-          buffer = NullableDateMilliVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESEC:\n-          buffer = NullableTimeSecVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Integer.class));\n-          break;\n-        case TIMEMILLI:\n-          buffer = NullableTimeMilliVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Integer.class));\n-          break;\n-        case TIMEMICRO:\n-          buffer = NullableTimeMicroVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMENANO:\n-          buffer = NullableTimeNanoVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPSEC:\n-          buffer = NullableTimeStampSecVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPMILLI:\n-          buffer = NullableTimeStampMilliVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPMICRO:\n-          buffer = NullableTimeStampMicroVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPNANO:\n-          buffer = NullableTimeStampNanoVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPSECTZ:\n-          buffer = NullableTimeStampSecTZVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPMILLITZ:\n-          buffer = NullableTimeStampMilliTZVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPMICROTZ:\n-          buffer = NullableTimeStampMicroTZVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        case TIMESTAMPNANOTZ:\n-          buffer = NullableTimeStampNanoTZVector.set(buffer, allocator,\n-                  valueCount, index, parser.readValueAs(Long.class));\n-          break;\n-        default:\n-          throw new UnsupportedOperationException(\"minor type: \" + vector.getMinorType());\n-      }\n-    }\n-\n-    return buffer;\n-  }\n-\n   @Override\n   public void close() throws IOException {\n     parser.close();\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-14T02:16:38.057+0000",
                    "updated": "2017-11-14T02:16:38.057+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111558/comment/16250846",
                    "id": "16250846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
                        "name": "siddteotia",
                        "key": "siddteotia",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
                        },
                        "displayName": "Siddharth Teotia",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Resolved by PR https://github.com/apache/arrow/pull/1290",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=siddteotia",
                        "name": "siddteotia",
                        "key": "siddteotia",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=siddteotia&avatarId=32343",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=siddteotia&avatarId=32343",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=siddteotia&avatarId=32343",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=siddteotia&avatarId=32343"
                        },
                        "displayName": "Siddharth Teotia",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-14T04:49:06.226+0000",
                    "updated": "2017-11-14T04:49:06.226+0000"
                }
            ],
            "maxResults": 19,
            "total": 19,
            "startAt": 0
        },
        "customfield_12311820": "0|i3lm73:",
        "customfield_12314139": null
    }
}