{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13179815",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815",
    "key": "ARROW-3087",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12541286",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12541286",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "inwardIssue": {
                    "id": "12947906",
                    "key": "ARROW-47",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906",
                    "fields": {
                        "summary": "[C++] Consider adding a scalar type object model",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12557182",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12557182",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13223163",
                    "key": "ARROW-4990",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13223163",
                    "fields": {
                        "summary": "[C++] Kernel to compare array with array",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
            "name": "uwe",
            "key": "xhochy",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
            },
            "displayName": "Uwe Korn",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3087/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 74,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963\n \n \n   This is the first step in supporting basic expressions of the form `column_x > k`.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T14:16:09.945+0000",
                    "updated": "2019-03-18T14:16:09.945+0000",
                    "started": "2019-03-18T14:16:09.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214791",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266484352\n \n \n\n ##########\n File path: cpp/src/arrow/compute/benchmark-util.h\n ##########\n @@ -0,0 +1,67 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <vector>\n+\n+#include <benchmark/benchmark.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/cpu-info.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+using internal::CpuInfo;\n+static CpuInfo* cpu_info = CpuInfo::GetInstance();\n+\n+static const int64_t kL1Size = cpu_info->CacheSize(CpuInfo::L1_CACHE);\n+static const int64_t kL2Size = cpu_info->CacheSize(CpuInfo::L2_CACHE);\n+static const int64_t kL3Size = cpu_info->CacheSize(CpuInfo::L3_CACHE);\n+\n+template <typename Func>\n+struct BenchmarkArgsType;\n+\n+template <typename Values>\n+struct BenchmarkArgsType<benchmark::internal::Benchmark* (\n+    benchmark::internal::Benchmark::*)(const std::vector<Values>&)> {\n+  using type = Values;\n+};\n+\n+void BenchmarkSetArgs(benchmark::internal::Benchmark* bench) {\n+  // Benchmark changed its parameter type between releases from\n+  // int to int64_t. As it doesn't have version macros, we need\n+  // to apply C++ template magic.\n+  using ArgsType =\n+      typename BenchmarkArgsType<decltype(&benchmark::internal::Benchmark::Args)>::type;\n+  bench->Unit(benchmark::kMicrosecond);\n+\n+  for (auto size : {kL1Size, kL2Size, kL3Size, kL3Size * 4})\n \n Review comment:\n   +1\r\n   Could `kLNSize` be made private to BenchmarkSetArgs?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:50.112+0000",
                    "updated": "2019-03-18T15:36:50.112+0000",
                    "started": "2019-03-18T15:36:50.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214822",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266494663\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  return internal::CopyBitmap(pool, null_bitmap->data(), offset, length, bitmap);\n+}\n+\n+template <typename ArrowType, CompareOperator Operator,\n+          typename ArrayType = typename TypeTraits<ArrowType>::ArrayType,\n+          typename ScalarType = typename TypeTraits<ArrowType>::ScalarType,\n+          typename T = typename TypeTraits<ArrowType>::CType>\n+static Status CompareArrayScalar(const ArrayType& input, const ScalarType& scalar,\n+                                 uint8_t* bitmap) {\n+  const T right = scalar.value;\n+  const T* values = input.raw_values();\n+\n+  // Bitmap is not sliced like the original array, thus offset=0\n+  auto writer = internal::BitmapWriter(bitmap, 0, input.length());\n \n Review comment:\n   `internal::GenerateBitsUnrolled` will be faster\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:50.563+0000",
                    "updated": "2019-03-18T15:36:50.563+0000",
                    "started": "2019-03-18T15:36:50.563+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214823",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266491166\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/filter.h\n ##########\n @@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+struct Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+/// FilterFunction is an interface for Filters\n+///\n+/// Filters takes an array and emits a selection vector. The selection vector\n+/// is given in the form of a bitmask as a BooleanArray result.\n+class ARROW_EXPORT FilterFunction {\n+ public:\n+  /// Filter an array with a scalar argument.\n \n Review comment:\n   Why not fold `FilterFunction` into `FilterBinaryKernel`? (and provide `std::shared_ptr<FilterBinaryKernel> MakeFilterKernel(FunctionContext* context, DataType& type, CompareOptions options);`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:50.926+0000",
                    "updated": "2019-03-18T15:36:50.926+0000",
                    "started": "2019-03-18T15:36:50.925+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214824",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266493399\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  return internal::CopyBitmap(pool, null_bitmap->data(), offset, length, bitmap);\n+}\n+\n+template <typename ArrowType, CompareOperator Operator,\n \n Review comment:\n   nit: you call this Op elsewhere\r\n   \r\n   ```suggestion\r\n   template <typename ArrowType, CompareOperator Op,\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:50.938+0000",
                    "updated": "2019-03-18T15:36:50.938+0000",
                    "started": "2019-03-18T15:36:50.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214825",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266497075\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  return internal::CopyBitmap(pool, null_bitmap->data(), offset, length, bitmap);\n+}\n+\n+template <typename ArrowType, CompareOperator Operator,\n+          typename ArrayType = typename TypeTraits<ArrowType>::ArrayType,\n+          typename ScalarType = typename TypeTraits<ArrowType>::ScalarType,\n+          typename T = typename TypeTraits<ArrowType>::CType>\n+static Status CompareArrayScalar(const ArrayType& input, const ScalarType& scalar,\n+                                 uint8_t* bitmap) {\n+  const T right = scalar.value;\n+  const T* values = input.raw_values();\n+\n+  // Bitmap is not sliced like the original array, thus offset=0\n+  auto writer = internal::BitmapWriter(bitmap, 0, input.length());\n+  for (int64_t i = 0; i < input.length(); i++, writer.Next()) {\n+    if (Comparator<T, Operator>::Compare(values[i], right)) {\n+      writer.Set();\n+    } else {\n+      writer.Clear();\n+    }\n+  }\n+\n+  writer.Finish();\n+\n+  return Status::OK();\n+}\n+\n+template <typename ArrowType, CompareOperator Op>\n+class CompareFunction final : public FilterFunction {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using ScalarType = typename TypeTraits<ArrowType>::ScalarType;\n+\n+ public:\n+  explicit CompareFunction(FunctionContext* ctx) : ctx_(ctx) {}\n+\n+  Status Filter(const Array& input, const Scalar& scalar, ArrayData* output) const {\n+    // Caller must cast\n+    DCHECK(input.type()->Equals(scalar.type));\n+    // Caller must not pass null scalar, use IsNull, IsNotNull\n+    DCHECK(scalar.is_valid);\n+    // Output must be a boolean array\n+    DCHECK(output->type->Equals(boolean()));\n+    // Output must be of same length\n+    DCHECK_EQ(output->length, input.length());\n+\n+    // Copy null_bitmap\n+    RETURN_NOT_OK(CopyOrTransferBitmap(input, ctx_->memory_pool(), &output->buffers[0]));\n+\n+    DCHECK(output->buffers[1]);\n+    uint8_t* bitmap_result = output->buffers[1]->mutable_data();\n+    return CompareArrayScalar<ArrowType, Op>(static_cast<const ArrayType&>(input),\n+                                             static_cast<const ScalarType&>(scalar),\n+                                             bitmap_result);\n+  }\n+\n+ private:\n+  FunctionContext* ctx_;\n+};\n+\n+template <typename ArrowType, CompareOperator Op>\n+static inline std::shared_ptr<FilterFunction> MakeCompareFunctionTypeOp(\n+    FunctionContext* ctx) {\n+  return std::static_pointer_cast<FilterFunction>(\n \n Review comment:\n   This cast is unnecessary- `shared_ptr` (and `unique_ptr`) support implicit upcasting\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:51.028+0000",
                    "updated": "2019-03-18T15:36:51.028+0000",
                    "started": "2019-03-18T15:36:51.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214826",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266485950\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n \n Review comment:\n   nit\r\n   ```suggestion\r\n       *bitmap = nullptr;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:51.084+0000",
                    "updated": "2019-03-18T15:36:51.084+0000",
                    "started": "2019-03-18T15:36:51.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214827",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266500187\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/filter-test.cc\n ##########\n @@ -0,0 +1,200 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <memory>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/comparator.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/random.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+TEST(TestComparatorOperator, BasicOperator) {\n+  using T = int32_t;\n+  std::vector<T> vals{0, 1, 2, 3, 4, 5, 6};\n+\n+  for (int32_t i : vals) {\n+    for (int32_t j : vals) {\n+      EXPECT_EQ((Comparator<T, EQUAL>::Compare(i, j)), i == j);\n+      EXPECT_EQ((Comparator<T, NOT_EQUAL>::Compare(i, j)), i != j);\n+      EXPECT_EQ((Comparator<T, GREATER>::Compare(i, j)), i > j);\n+      EXPECT_EQ((Comparator<T, GREATER_EQUAL>::Compare(i, j)), i >= j);\n+      EXPECT_EQ((Comparator<T, LOWER>::Compare(i, j)), i < j);\n+      EXPECT_EQ((Comparator<T, LOWER_EQUAL>::Compare(i, j)), i <= j);\n+    }\n+  }\n+}\n+\n+template <typename ArrowType>\n+static void ValidateCompare(FunctionContext* ctx, CompareOptions options,\n+                            const Datum& lhs, const Datum& rhs, const Datum& expected) {\n+  Datum result;\n+\n+  ASSERT_OK(Compare(ctx, lhs, rhs, options, &result));\n+  AssertArraysEqual(*expected.make_array(), *result.make_array());\n+}\n+\n+template <typename ArrowType>\n+static void ValidateCompare(FunctionContext* ctx, CompareOptions options,\n+                            const char* lhs_str, const Datum& rhs,\n+                            const char* expected_str) {\n+  auto lhs = ArrayFromJSON(TypeTraits<ArrowType>::type_singleton(), lhs_str);\n+  auto expected = ArrayFromJSON(TypeTraits<BooleanType>::type_singleton(), expected_str);\n+  ValidateCompare<ArrowType>(ctx, options, lhs, rhs, expected);\n+}\n+\n+template <typename T>\n+static inline bool SlowCompare(CompareOperator op, const T& lhs, const T& rhs) {\n+  switch (op) {\n+    case EQUAL:\n+      return lhs == rhs;\n+    case NOT_EQUAL:\n+      return lhs != rhs;\n+    case GREATER:\n+      return lhs > rhs;\n+    case GREATER_EQUAL:\n+      return lhs >= rhs;\n+    case LOWER:\n+      return lhs < rhs;\n+    case LOWER_EQUAL:\n+      return lhs <= rhs;\n+    default:\n+      return false;\n+  }\n+}\n+\n+template <typename ArrowType>\n+static Datum SimpleCompare(CompareOptions options, const Datum& lhs, const Datum& rhs) {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using ScalarType = typename TypeTraits<ArrowType>::ScalarType;\n+  using T = typename TypeTraits<ArrowType>::CType;\n+\n+  auto array = std::static_pointer_cast<ArrayType>(lhs.make_array());\n+  T value = std::static_pointer_cast<ScalarType>(rhs.scalar())->value;\n+\n+  std::vector<bool> bitmap(array->length());\n+  for (int64_t i = 0; i < array->length(); i++) {\n+    bitmap[i] = SlowCompare<T>(options.op, array->Value(i), value);\n+  }\n+\n+  std::shared_ptr<Array> result;\n+\n+  if (array->null_count() == 0) {\n+    ArrayFromVector<BooleanType>(bitmap, &result);\n+  } else {\n+    std::vector<bool> null_bitmap(array->length());\n+    auto reader = internal::BitmapReader(array->null_bitmap_data(), array->offset(),\n+                                         array->length());\n+    for (int64_t i = 0; i < array->length(); i++, reader.Next())\n+      null_bitmap[i] = reader.IsSet();\n+    ArrayFromVector<BooleanType>(null_bitmap, bitmap, &result);\n+  }\n+\n+  return Datum(result);\n+}\n+\n+template <typename ArrowType>\n+static void ValidateCompare(FunctionContext* ctx, CompareOptions options,\n+                            const Datum& lhs, const Datum& rhs) {\n+  Datum result;\n+  Datum expected = SimpleCompare<ArrowType>(options, lhs, rhs);\n+\n+  ValidateCompare<ArrowType>(ctx, options, lhs, rhs, expected);\n+}\n+\n+template <typename ArrowType>\n+class TestNumericCompareKernel : public ComputeFixture, public TestBase {};\n+\n+TYPED_TEST_CASE(TestNumericCompareKernel, NumericArrowTypes);\n+TYPED_TEST(TestNumericCompareKernel, SimpleCompareArrayScalar) {\n+  using ScalarType = typename TypeTraits<TypeParam>::ScalarType;\n+\n+  Datum one(std::make_shared<ScalarType>(1));\n+\n+  CompareOptions eq(CompareOperator::EQUAL);\n+  ValidateCompare<TypeParam>(&this->ctx_, eq, \"[]\", one, \"[]\");\n+  ValidateCompare<TypeParam>(&this->ctx_, eq, \"[0,0,1,1,2,2]\", one, \"[0,0,1,1,0,0]\");\n+  ValidateCompare<TypeParam>(&this->ctx_, eq, \"[0,1,2,3,4,5]\", one, \"[0,1,0,0,0,0]\");\n+  ValidateCompare<TypeParam>(&this->ctx_, eq, \"[5,4,3,2,1,0]\", one, \"[0,0,0,0,1,0]\");\n \n Review comment:\n   Could you add a stanza of hand written cases with nulls?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:51.093+0000",
                    "updated": "2019-03-18T15:36:51.093+0000",
                    "started": "2019-03-18T15:36:51.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214828",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266498024\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.h\n ##########\n @@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+class Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FilterFunction;\n+class FunctionContext;\n+\n+enum CompareOperator {\n \n Review comment:\n   Should these be scoped in a struct, as with `arrow::Type`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:51.094+0000",
                    "updated": "2019-03-18T15:36:51.094+0000",
                    "started": "2019-03-18T15:36:51.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214829",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266492165\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.h\n ##########\n @@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+class Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FilterFunction;\n+class FunctionContext;\n+\n+enum CompareOperator {\n+  EQUAL,\n+  NOT_EQUAL,\n+  GREATER,\n+  GREATER_EQUAL,\n+  LOWER,\n+  LOWER_EQUAL,\n+};\n+\n+template <CompareOperator lhs, CompareOperator rhs>\n+using enable_if_op = typename std::enable_if<lhs == rhs>::type;\n+\n+template <typename T, CompareOperator Op, typename Enable = void>\n+struct Comparator {};\n+\n+template <typename T, CompareOperator Op>\n+struct Comparator<T, Op, enable_if_op<Op, CompareOperator::EQUAL>> {\n \n Review comment:\n   Why use enable_if instead of just partially specializing the template?\r\n   ```suggestion\r\n   struct Comparator<T, CompareOperator::EQUAL> {\r\n   };\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:51.099+0000",
                    "updated": "2019-03-18T15:36:51.099+0000",
                    "started": "2019-03-18T15:36:51.099+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214830",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266492837\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.h\n ##########\n @@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+class Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FilterFunction;\n+class FunctionContext;\n+\n+enum CompareOperator {\n+  EQUAL,\n+  NOT_EQUAL,\n+  GREATER,\n+  GREATER_EQUAL,\n+  LOWER,\n+  LOWER_EQUAL,\n+};\n+\n+template <CompareOperator lhs, CompareOperator rhs>\n+using enable_if_op = typename std::enable_if<lhs == rhs>::type;\n+\n+template <typename T, CompareOperator Op, typename Enable = void>\n+struct Comparator {};\n \n Review comment:\n   This class is partially specialized below for each member of the enum, so this can just be a declaration\r\n   \r\n   ```suggestion\r\n   struct Comparator;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:36:52.012+0000",
                    "updated": "2019-03-18T15:36:52.012+0000",
                    "started": "2019-03-18T15:36:52.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214831",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/214834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266503569\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/filter.h\n ##########\n @@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+struct Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+/// FilterFunction is an interface for Filters\n+///\n+/// Filters takes an array and emits a selection vector. The selection vector\n+/// is given in the form of a bitmask as a BooleanArray result.\n+class ARROW_EXPORT FilterFunction {\n+ public:\n+  /// Filter an array with a scalar argument.\n+  virtual Status Filter(const Array& input, const Scalar& scalar,\n+                        ArrayData* output) const = 0;\n \n Review comment:\n   [missing virtual destructor](https://travis-ci.org/apache/arrow/jobs/507875597#L1344)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-18T15:38:39.140+0000",
                    "updated": "2019-03-18T15:38:39.140+0000",
                    "started": "2019-03-18T15:38:39.140+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "214834",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266883443\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n \n Review comment:\n   No, if `offset = 0`, it preserves the original buffer in a zero-copy fashion.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T13:25:50.117+0000",
                    "updated": "2019-03-19T13:25:50.117+0000",
                    "started": "2019-03-19T13:25:50.116+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215448",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266883646\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n \n Review comment:\n   I'll make it explicit in another branch.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T13:26:16.258+0000",
                    "updated": "2019-03-19T13:26:16.258+0000",
                    "started": "2019-03-19T13:26:16.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215450",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266887380\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.h\n ##########\n @@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+class Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FilterFunction;\n+class FunctionContext;\n+\n+enum CompareOperator {\n \n Review comment:\n   We'll see if needed, they could be used elsewhere in the codebase (logical operators).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T13:34:26.731+0000",
                    "updated": "2019-03-19T13:34:26.731+0000",
                    "started": "2019-03-19T13:34:26.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215456",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266908227\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.h\n ##########\n @@ -0,0 +1,117 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+class Scalar;\n+class Status;\n+\n+namespace compute {\n+\n+struct Datum;\n+class FilterFunction;\n+class FunctionContext;\n+\n+enum CompareOperator {\n \n Review comment:\n   I just meant that our pattern for potentially public enums like this appears to be:\r\n   ```c++\r\n   struct CompareOperator {\r\n     enum type {\r\n       // ...\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T14:14:34.457+0000",
                    "updated": "2019-03-19T14:14:34.457+0000",
                    "started": "2019-03-19T14:14:34.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215484",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266953913\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  return internal::CopyBitmap(pool, null_bitmap->data(), offset, length, bitmap);\n+}\n+\n+template <typename ArrowType, CompareOperator Operator,\n+          typename ArrayType = typename TypeTraits<ArrowType>::ArrayType,\n+          typename ScalarType = typename TypeTraits<ArrowType>::ScalarType,\n+          typename T = typename TypeTraits<ArrowType>::CType>\n+static Status CompareArrayScalar(const ArrayType& input, const ScalarType& scalar,\n+                                 uint8_t* bitmap) {\n+  const T right = scalar.value;\n+  const T* values = input.raw_values();\n+\n+  // Bitmap is not sliced like the original array, thus offset=0\n+  auto writer = internal::BitmapWriter(bitmap, 0, input.length());\n \n Review comment:\n   After 0.13, I intend to test xsimd, I suspect this is going to be _much_ faster.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T15:36:42.428+0000",
                    "updated": "2019-03-19T15:36:42.428+0000",
                    "started": "2019-03-19T15:36:42.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215527",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266955518\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  return internal::CopyBitmap(pool, null_bitmap->data(), offset, length, bitmap);\n+}\n+\n+template <typename ArrowType, CompareOperator Operator,\n+          typename ArrayType = typename TypeTraits<ArrowType>::ArrayType,\n+          typename ScalarType = typename TypeTraits<ArrowType>::ScalarType,\n+          typename T = typename TypeTraits<ArrowType>::CType>\n+static Status CompareArrayScalar(const ArrayType& input, const ScalarType& scalar,\n+                                 uint8_t* bitmap) {\n+  const T right = scalar.value;\n+  const T* values = input.raw_values();\n+\n+  // Bitmap is not sliced like the original array, thus offset=0\n+  auto writer = internal::BitmapWriter(bitmap, 0, input.length());\n \n Review comment:\n   I think xsimd requires c++14 so we might be SOL on that for now\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T15:39:46.294+0000",
                    "updated": "2019-03-19T15:39:46.294+0000",
                    "started": "2019-03-19T15:39:46.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215528",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r266958252\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/comparator.cc\n ##########\n @@ -0,0 +1,197 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/comparator.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/filter.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+\n+namespace compute {\n+\n+class FunctionContext;\n+struct Datum;\n+\n+static inline Status CopyOrTransferBitmap(const Array& array, MemoryPool* pool,\n+                                          std::shared_ptr<Buffer>* bitmap) {\n+  auto offset = array.offset();\n+  auto length = array.length();\n+  auto null_bitmap = array.null_bitmap();\n+\n+  if (null_bitmap == nullptr || offset == 0 || length == 0) {\n+    *bitmap = null_bitmap;\n+    return Status::OK();\n+  }\n+\n+  return internal::CopyBitmap(pool, null_bitmap->data(), offset, length, bitmap);\n+}\n+\n+template <typename ArrowType, CompareOperator Operator,\n+          typename ArrayType = typename TypeTraits<ArrowType>::ArrayType,\n+          typename ScalarType = typename TypeTraits<ArrowType>::ScalarType,\n+          typename T = typename TypeTraits<ArrowType>::CType>\n+static Status CompareArrayScalar(const ArrayType& input, const ScalarType& scalar,\n+                                 uint8_t* bitmap) {\n+  const T right = scalar.value;\n+  const T* values = input.raw_values();\n+\n+  // Bitmap is not sliced like the original array, thus offset=0\n+  auto writer = internal::BitmapWriter(bitmap, 0, input.length());\n \n Review comment:\n   Not yet, https://github.com/QuantStack/xsimd/issues/248, I'll try to convince them to keep it ;)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-19T15:44:41.423+0000",
                    "updated": "2019-03-19T15:44:41.423+0000",
                    "started": "2019-03-19T15:44:41.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215529",
                    "issueId": "13179815"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/worklog/215994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3963: ARROW-3087: [C++] Implement Compare filter kernel\nURL: https://github.com/apache/arrow/pull/3963#discussion_r267181619\n \n \n\n ##########\n File path: cpp/src/arrow/compute/benchmark-util.h\n ##########\n @@ -0,0 +1,67 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <vector>\n+\n+#include <benchmark/benchmark.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/cpu-info.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+using internal::CpuInfo;\n+static CpuInfo* cpu_info = CpuInfo::GetInstance();\n+\n+static const int64_t kL1Size = cpu_info->CacheSize(CpuInfo::L1_CACHE);\n+static const int64_t kL2Size = cpu_info->CacheSize(CpuInfo::L2_CACHE);\n+static const int64_t kL3Size = cpu_info->CacheSize(CpuInfo::L3_CACHE);\n+\n+template <typename Func>\n+struct BenchmarkArgsType;\n+\n+template <typename Values>\n+struct BenchmarkArgsType<benchmark::internal::Benchmark* (\n+    benchmark::internal::Benchmark::*)(const std::vector<Values>&)> {\n+  using type = Values;\n+};\n+\n+void BenchmarkSetArgs(benchmark::internal::Benchmark* bench) {\n+  // Benchmark changed its parameter type between releases from\n+  // int to int64_t. As it doesn't have version macros, we need\n+  // to apply C++ template magic.\n+  using ArgsType =\n+      typename BenchmarkArgsType<decltype(&benchmark::internal::Benchmark::Args)>::type;\n+  bench->Unit(benchmark::kMicrosecond);\n+\n+  for (auto size : {kL1Size, kL2Size, kL3Size, kL3Size * 4})\n \n Review comment:\n   Is there significance to the number 4?  can you document it? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-03-20T04:45:16.003+0000",
                    "updated": "2019-03-20T04:45:16.003+0000",
                    "started": "2019-03-20T04:45:16.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "215994",
                    "issueId": "13179815"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 39000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3bf9ddc6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44aef706[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f8e40b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5cab9c80[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42131b6a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d4ea867[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20d8f4be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@209733b9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a05a48a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@32c0263d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55da59df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4cc9a226[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 15 11:44:14 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-04-15T11:44:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3087/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-08-19T14:53:12.000+0000",
        "updated": "2019-04-16T02:04:29.000+0000",
        "timeoriginalestimate": null,
        "description": "This should implement the comparison operators  {{>=, >, ==, !=, <, <=}} between {{arrow::compute::Datum}} and {{arrow::compute::Scalar}}. \r\n\r\nThe result of this kernel will be a boolean type {{arrow::compute::Datum}} where with True/False set according to the outcome of the operation and NA if a row was not valid.\r\n\r\nA pre-condition to implement this kernel is to have a working implementation of {{arrow::compute::Scalar}}.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add kernels for comparison operations to scalars",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815/comment/16817889",
                    "id": "16817889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 3963\n[https://github.com/apache/arrow/pull/3963]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2019-04-15T11:44:14.860+0000",
                    "updated": "2019-04-15T11:44:14.860+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3x71b:",
        "customfield_12314139": null
    }
}