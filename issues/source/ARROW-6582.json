{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13257143",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143",
    "key": "ARROW-6582",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "1.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345727",
                "id": "12345727",
                "name": "0.14.1",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-22"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12601411",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12601411",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13335716",
                    "key": "ARROW-10324",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335716",
                    "fields": {
                        "summary": "function read_parquet(*,as_data_frame=TRUE) fails when embedded nuls present. ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12608725",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12608725",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13359171",
                    "key": "ARROW-11682",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13359171",
                    "fields": {
                        "summary": "[R] Regression from 2.0.0 -> 3.0.0:  Null character in string prevents dataset from loading",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12607844",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12607844",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13356341",
                    "key": "ARROW-11478",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13356341",
                    "fields": {
                        "summary": "[R] Consider ways to make arrow.skip_nul option more user-friendly",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=johncassil",
            "name": "johncassil",
            "key": "johncassil",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "John Cassil",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=johncassil",
            "name": "johncassil",
            "key": "johncassil",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "John Cassil",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6582/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/495978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365\n\n\n   @romainfrancois see the comment I added with the reprex: this fails differently now, presumably due to the cpp11 change\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-06T15:54:59.730+0000",
                    "updated": "2020-10-06T15:54:59.730+0000",
                    "started": "2020-10-06T15:54:59.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "495978",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/496244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "dianaclarke commented on a change in pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#discussion_r500667844\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -616,6 +616,23 @@ test_that(\"Array$create() handles vector -> fixed size list arrays\", {\n   )\n })\n \n+test_that(\"Handling string data with embedded nuls\", {\n+  raws <- structure(list(\n+    as.raw(c(0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e)),\n+    as.raw(c(0x77, 0x6f, 0x6d, 0x61, 0x6e)),\n+    as.raw(c(0x6d, 0x61, 0x00, 0x6e)), # <-- there's your nul, 0x00\n+    as.raw(c(0x63, 0x61, 0x6d, 0x65, 0x72, 0x61)),\n+    as.raw(c(0x74, 0x76))),\n+    class = c(\"arrow_binary\", \"vctrs_vctr\", \"list\"))\n+  expect_error(rawToChar(raws[[3]]), \"nul\") # See?\n+  array_with_nul <- Array$create(raws)$cast(utf8())\n+  # In version 1.0.1, as.vector(array_with_nul) errors:\n+  # Error in Array__as_vector(self) : embedded nul in string: 'ma\\0n'\n+  # On master (presumably this is a cpp11 thing) it does not error,\n+  # but it terminates the string early:\n+  # [1] \"person\" \"woman\"  \"ma\"     \"camera\" \"tv\"\n\nReview comment:\n       > # [1] \"person\" \"woman\"  \"ma\"     \"camera\" \"tv\"\r\n   \r\n   \ud83d\ude06\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-07T00:22:30.362+0000",
                    "updated": "2020-10-07T00:22:30.362+0000",
                    "started": "2020-10-07T00:22:30.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "496244",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#discussion_r513455884\n\n\n\n##########\nFile path: r/tests/testthat/test-Array.R\n##########\n@@ -616,6 +616,23 @@ test_that(\"Array$create() handles vector -> fixed size list arrays\", {\n   )\n })\n \n+test_that(\"Handling string data with embedded nuls\", {\n+  raws <- structure(list(\n+    as.raw(c(0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e)),\n+    as.raw(c(0x77, 0x6f, 0x6d, 0x61, 0x6e)),\n+    as.raw(c(0x6d, 0x61, 0x00, 0x6e)), # <-- there's your nul, 0x00\n+    as.raw(c(0x63, 0x61, 0x6d, 0x65, 0x72, 0x61)),\n+    as.raw(c(0x74, 0x76))),\n+    class = c(\"arrow_binary\", \"vctrs_vctr\", \"list\"))\n+  expect_error(rawToChar(raws[[3]]), \"nul\") # See?\n+  array_with_nul <- Array$create(raws)$cast(utf8())\n+  # In version 1.0.1, as.vector(array_with_nul) errors:\n+  # Error in Array__as_vector(self) : embedded nul in string: 'ma\\0n'\n+  # On master (presumably this is a cpp11 thing) it does not error,\n+  # but it terminates the string early:\n+  # [1] \"person\" \"woman\"  \"ma\"     \"camera\" \"tv\"\n\nReview comment:\n       \ud83d\ude48\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T13:47:30.287+0000",
                    "updated": "2020-10-28T13:47:30.287+0000",
                    "started": "2020-10-28T13:47:30.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505724",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-717996007\n\n\n   based on @bkietz comment from https://github.com/apache/arrow/pull/8536 Converter_String::Ingest_some_nulls() could end with: \r\n   \r\n   ```cpp\r\n   cpp11::unwind_protect([&] {\r\n         if (array->null_count()) {\r\n           // need to watch for nulls\r\n           arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\r\n                                                     array->offset(), n);\r\n           for (int i = 0; i < n; i++, null_reader.Next()) {\r\n             if (null_reader.IsSet()) {\r\n               SET_STRING_ELT(data, start + i, unsafe_r_string(string_array->GetString(i)));\r\n             } else {\r\n               SET_STRING_ELT(data, start + i, NA_STRING);\r\n             }\r\n           }\r\n   \r\n         } else {\r\n           for (int i = 0; i < n; i++) {\r\n             SET_STRING_ELT(data, start + i, unsafe_r_string(string_array->GetString(i)));\r\n           }\r\n         }\r\n       });\r\n   ```\r\n   \r\n   this builds on knowing that `GetString()` gives an utf8 string, and that we know its size, as opposed to what `cpp11::r_string(std::string)` does here: https://github.com/r-lib/cpp11/blob/master/inst/include/cpp11/r_string.hpp#L18 and uses unwind protection around the loop instead of the individual conversions. \r\n   \r\n   i.e. it assumes utf-8 but since it does not use the known size, it searches for `nul`: r_string(const std::string& data) : data_(safe[Rf_mkCharCE](data.c_str(), CE_UTF8)) {}\r\n   \r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T15:06:09.029+0000",
                    "updated": "2020-10-28T15:06:09.029+0000",
                    "started": "2020-10-28T15:06:09.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505748",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois edited a comment on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-717996007\n\n\n   if what we want is that the nul is kept, based on @bkietz comment from https://github.com/apache/arrow/pull/8536 `Converter_String::Ingest_some_nulls()` could end with: \r\n   \r\n   ```cpp\r\n       cpp11::unwind_protect([&] {\r\n         if (array->null_count()) {\r\n           // need to watch for nulls\r\n           arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\r\n                                                     array->offset(), n);\r\n           for (int i = 0; i < n; i++, null_reader.Next()) {\r\n             if (null_reader.IsSet()) {\r\n               SET_STRING_ELT(data, start + i, unsafe_r_string(string_array->GetString(i)));\r\n             } else {\r\n               SET_STRING_ELT(data, start + i, NA_STRING);\r\n             }\r\n           }\r\n   \r\n         } else {\r\n           for (int i = 0; i < n; i++) {\r\n             SET_STRING_ELT(data, start + i, unsafe_r_string(string_array->GetString(i)));\r\n           }\r\n         }\r\n       });\r\n   ```\r\n   \r\n   with: \r\n   \r\n   ```cpp\r\n   private:\r\n     SEXP unsafe_r_string(const std::string& s) const {\r\n       return Rf_mkCharLenCE(s.c_str(), s.size(), CE_UTF8);\r\n     }\r\n   ```\r\n   \r\n   this builds on knowing that `GetString()` gives an utf8 string, and that we know its size, as opposed to what `cpp11::r_string(std::string)` does here: https://github.com/r-lib/cpp11/blob/master/inst/include/cpp11/r_string.hpp#L18 and uses unwind protection around the loop instead of the individual conversions. \r\n   \r\n   i.e. it assumes utf-8 but since it does not use the known size, it searches for `nul`: \r\n   \r\n   ```\r\n   r_string(const std::string& data) : data_(safe[Rf_mkCharCE](data.c_str(), CE_UTF8)) {}\r\n   ```\r\n   \r\n   cc @jimhester, is this on purpose that this constructor uses `Rf_mkCharCE` instead of `Rf_mkCharLenCE` ? \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T15:10:17.721+0000",
                    "updated": "2020-10-28T15:10:17.721+0000",
                    "started": "2020-10-28T15:10:17.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505750",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-718012902\n\n\n   @nealrichardson is the intent that we do get to the `embedded nul in string: 'ma\\0n'` error ?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T15:30:31.652+0000",
                    "updated": "2020-10-28T15:30:31.652+0000",
                    "started": "2020-10-28T15:30:31.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505762",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jimhester commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-718020238\n\n\n   Oh hmm, it is not on purpose, I think it was just copy pasted from the `const char*` implementation above. We should use `mkCharLenCE` for `std::string()` since we know the length.\r\n   \r\n   That being said having an embedded `NULL` in any `CHARSXP` is not really going to work in R. Lots of places in the R codebase assumes strings are null terminated. I think the only way you can handle string data with embedded nulls in R is with raw vectors.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T15:41:27.393+0000",
                    "updated": "2020-10-28T15:41:27.393+0000",
                    "started": "2020-10-28T15:41:27.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505772",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jimhester edited a comment on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-718020238\n\n\n   Oh hmm, it is not on purpose, I think it was just copy pasted from the `const char*` implementation above. We should use `mkCharLenCE` for `std::string()` since we know the length.\r\n   \r\n   That being said having an embedded `NULL` in any `CHARSXP` is not really going to work in R. Lots of places in the R codebase assumes strings are null terminated. I think the only way you can handle string data with embedded nulls in R is with raw vectors.\r\n   \r\n   Which erroring maybe is the intent here, so perhaps switching this to `mkCharLenCE` will do what we want.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T15:43:24.442+0000",
                    "updated": "2020-10-28T15:43:24.442+0000",
                    "started": "2020-10-28T15:43:24.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505774",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/505775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-718021849\n\n\n   Arguably failing is better than silently truncating, but that puts us back at the original user report. I see our options as:\r\n   \r\n   1. Do nothing in the code; document a workflow of casting the `utf8` column to `binary`, then stripping out the `00`s yourself in R\r\n   2. In arrow_to_vector, if a nul is hit, downcast to binary and proceed with conversion (raise a warning instead of erroring)\r\n   3. Add a `skipNul`-like option (cf. https://stat.ethz.ch/R-manual/R-devel/library/base/html/readLines.html and others) and strip nulls if they're hit, raising a warning but keeping the result as a character vector.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-28T15:43:49.752+0000",
                    "updated": "2020-10-28T15:43:49.752+0000",
                    "started": "2020-10-28T15:43:49.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505775",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/510694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-725971159\n\n\n   I think failing asap is better, either with the current code, or with an `unwind_protect()` outside the loop. \r\n   \r\n   ```cpp\r\n   StringArrayType* string_array = static_cast<StringArrayType*>(array.get());\r\n       auto unsafe_r_string = [](const std::string& s) {\r\n         return Rf_mkCharCE(s.c_str(), CE_UTF8);\r\n       };\r\n       cpp11::unwind_protect([&] {\r\n         if (array->null_count()) {\r\n           // need to watch for nulls\r\n           arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\r\n                                                     array->offset(), n);\r\n           for (int i = 0; i < n; i++, null_reader.Next()) {\r\n             if (null_reader.IsSet()) {\r\n               SET_STRING_ELT(data, start + i, unsafe_r_string(string_array->GetString(i)));\r\n             } else {\r\n               SET_STRING_ELT(data, start + i, NA_STRING);\r\n             }\r\n           }\r\n   \r\n         } else {\r\n           for (int i = 0; i < n; i++) {\r\n             SET_STRING_ELT(data, start + i, unsafe_r_string(string_array->GetString(i)));\r\n           }\r\n         }\r\n       });\r\n   \r\n       return Status::OK();\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T09:54:10.785+0000",
                    "updated": "2020-11-12T09:54:10.785+0000",
                    "started": "2020-11-12T09:54:10.784+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510694",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/510922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-726224318\n\n\n   @romainfrancois that looks good to me. I'd recommend using `GetView` instead of `GetString` to avoid allocating an unnecessary temporary for non-short strings\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T17:30:25.340+0000",
                    "updated": "2020-11-12T17:30:25.340+0000",
                    "started": "2020-11-12T17:30:25.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510922",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/510939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-726237202\n\n\n   What you describe (including using GetView) is essentially what we now have on master: https://github.com/apache/arrow/blob/master/r/src/array_to_vector.cpp#L290-L321\r\n   \r\n   The difference is that we moved back to `Rf_mkCharLenCE`, which is much faster because length is known and errors (correctly) when there are embedded nuls, instead of `Rf_mkCharCE`, which IIUC was the reason for the performance regression in #8356 and which was responsible for silently truncating at an embedded nul. \r\n   \r\n   If `Rf_mkCharLenCE` is what is raising the \"embedded nul in string\" error, then we have the option of catching that and falling back to a slower `skipNul` path to strip the nulls. If the error comes from somewhere else later, we may need to consider other options.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T17:52:24.325+0000",
                    "updated": "2020-11-12T17:52:24.325+0000",
                    "started": "2020-11-12T17:52:24.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510939",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/511247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-726577844\n\n\n   It does look like `Rf_mkCharLenCE()` is generating the error: \r\n   \r\n   ``` r\r\n   cpp11::cpp_eval('Rf_mkCharLenCE(\"camer\\\\0a\", 6, CE_UTF8)')\r\n   #> Error in f(): embedded nul in string: 'camer\\0'\r\n   ```\r\n   \r\n   <sup>Created on 2020-11-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T07:39:59.848+0000",
                    "updated": "2020-11-13T07:39:59.848+0000",
                    "started": "2020-11-13T07:39:59.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511247",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/511248",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois edited a comment on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-726577844\n\n\n   It does look like `Rf_mkCharLenCE()` is generating the error: \r\n   \r\n   ``` r\r\n   cpp11::cpp_eval('Rf_mkCharLenCE(\"camer\\\\0a\", 7, CE_UTF8)')\r\n   #> Error in f(): embedded nul in string: 'camer\\0a'\r\n   ```\r\n   \r\n   <sup>Created on 2020-11-13 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9001)</sup>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T07:40:34.871+0000",
                    "updated": "2020-11-13T07:40:34.871+0000",
                    "started": "2020-11-13T07:40:34.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511248",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/529298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-752264998\n\n\n   It would be good to get this resolved for 3.0. I pushed a naive fix: if `arrow.skip_nul = TRUE` (default FALSE, per base::readLines and base::scan), we go through a slow path and strip out nuls. A better solution (1) would check `arrow.skip_nul` outside of the loop (I could do this now but figure there's a smarter C/C++ way than I would have come up with); (2) would probably try the fast conversion path anyway and catch the exception and retry with the slow path, so even if arrow.skip_nul == true, we only do the slow path if there is a nul (I tried try/catch but didn't get it working right); and (3) it should raise a warning when it does strip a nul, as I believe readLines and scan do.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-29T22:36:50.398+0000",
                    "updated": "2020-12-29T22:36:50.398+0000",
                    "started": "2020-12-29T22:36:50.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "529298",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/530735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#issuecomment-754056855\n\n\n   @nealrichardson 1) I'll push an implementation of this 2) unfortunately, unwind_exceptions can't *really* be caught. They are used by cpp11 to get c++ stack unwinding correct but if one is currently in flight then the R runtime has already been informed that `stop()` was called. If the exception is caught and not rethrown, the R stack will continue to unwind (leaking c++ resources). 3) wilco\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T15:55:49.008+0000",
                    "updated": "2021-01-04T15:55:49.008+0000",
                    "started": "2021-01-04T15:55:49.007+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530735",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/530850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#discussion_r551519433\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -288,36 +290,104 @@ struct Converter_String : public Converter {\n     }\n \n     StringArrayType* string_array = static_cast<StringArrayType*>(array.get());\n-    if (array->null_count()) {\n-      // need to watch for nulls\n-      arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\n-                                                array->offset(), n);\n+\n+    const bool all_valid = array->null_count() == 0;\n+    const bool strip_out_nuls = GetBoolOption(\"arrow.skip_nul\", false);\n+\n+    bool nul_was_stripped = false;\n+\n+    if (all_valid) {\n+      // no need to watch for missing strings\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++, null_reader.Next()) {\n-          if (null_reader.IsSet()) {\n-            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n-          } else {\n-            SET_STRING_ELT(data, start + i, NA_STRING);\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++) {\n+            SET_STRING_ELT(data, start + i,\n+                           r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                        &nul_was_stripped));\n           }\n+          return;\n\nReview comment:\n       The main function return (L347) is `return Status::OK();` -- should these do the same? Or do I misunderstand what this return does?\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -288,36 +290,104 @@ struct Converter_String : public Converter {\n     }\n \n     StringArrayType* string_array = static_cast<StringArrayType*>(array.get());\n-    if (array->null_count()) {\n-      // need to watch for nulls\n-      arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\n-                                                array->offset(), n);\n+\n+    const bool all_valid = array->null_count() == 0;\n+    const bool strip_out_nuls = GetBoolOption(\"arrow.skip_nul\", false);\n+\n+    bool nul_was_stripped = false;\n+\n+    if (all_valid) {\n+      // no need to watch for missing strings\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++, null_reader.Next()) {\n-          if (null_reader.IsSet()) {\n-            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n-          } else {\n-            SET_STRING_ELT(data, start + i, NA_STRING);\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++) {\n+            SET_STRING_ELT(data, start + i,\n+                           r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                        &nul_was_stripped));\n           }\n+          return;\n+        }\n+\n+        for (int i = 0; i < n; i++) {\n+          SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n         }\n       });\n     } else {\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++) {\n-          SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n+        arrow::internal::BitmapReader validity_reader(array->null_bitmap_data(),\n+                                                      array->offset(), n);\n+\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++, validity_reader.Next()) {\n+            if (validity_reader.IsSet()) {\n+              SET_STRING_ELT(data, start + i,\n+                             r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                          &nul_was_stripped));\n+            } else {\n+              SET_STRING_ELT(data, start + i, NA_STRING);\n+            }\n+          }\n+          return;\n+        }\n+\n+        for (int i = 0; i < n; i++, validity_reader.Next()) {\n+          if (validity_reader.IsSet()) {\n+            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n+          } else {\n+            SET_STRING_ELT(data, start + i, NA_STRING);\n+          }\n         }\n       });\n     }\n \n+    if (nul_was_stripped) {\n+      cpp11::warning(\"Stripping '\\\\0' (nul) from character vector\");\n+    }\n+\n     return Status::OK();\n   }\n \n   bool Parallel() const { return false; }\n \n  private:\n-  static SEXP r_string_from_view(const arrow::util::string_view& view) {\n+  static SEXP r_string_from_view(arrow::util::string_view view) {\n\nReview comment:\n       Why this change?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T19:55:43.045+0000",
                    "updated": "2021-01-04T19:55:43.045+0000",
                    "started": "2021-01-04T19:55:43.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530850",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/530861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#discussion_r551542022\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -288,36 +290,104 @@ struct Converter_String : public Converter {\n     }\n \n     StringArrayType* string_array = static_cast<StringArrayType*>(array.get());\n-    if (array->null_count()) {\n-      // need to watch for nulls\n-      arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\n-                                                array->offset(), n);\n+\n+    const bool all_valid = array->null_count() == 0;\n+    const bool strip_out_nuls = GetBoolOption(\"arrow.skip_nul\", false);\n+\n+    bool nul_was_stripped = false;\n+\n+    if (all_valid) {\n+      // no need to watch for missing strings\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++, null_reader.Next()) {\n-          if (null_reader.IsSet()) {\n-            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n-          } else {\n-            SET_STRING_ELT(data, start + i, NA_STRING);\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++) {\n+            SET_STRING_ELT(data, start + i,\n+                           r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                        &nul_was_stripped));\n           }\n+          return;\n\nReview comment:\n       This `return` is breaking out of the lambda wrapped by `unwind_protect`; it doesn't make the parent scope return. If you prefer, we could use an `else` here\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T20:11:20.495+0000",
                    "updated": "2021-01-04T20:11:20.495+0000",
                    "started": "2021-01-04T20:11:20.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530861",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/530863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#discussion_r551542391\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -288,36 +290,104 @@ struct Converter_String : public Converter {\n     }\n \n     StringArrayType* string_array = static_cast<StringArrayType*>(array.get());\n-    if (array->null_count()) {\n-      // need to watch for nulls\n-      arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\n-                                                array->offset(), n);\n+\n+    const bool all_valid = array->null_count() == 0;\n+    const bool strip_out_nuls = GetBoolOption(\"arrow.skip_nul\", false);\n+\n+    bool nul_was_stripped = false;\n+\n+    if (all_valid) {\n+      // no need to watch for missing strings\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++, null_reader.Next()) {\n-          if (null_reader.IsSet()) {\n-            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n-          } else {\n-            SET_STRING_ELT(data, start + i, NA_STRING);\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++) {\n+            SET_STRING_ELT(data, start + i,\n+                           r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                        &nul_was_stripped));\n           }\n+          return;\n+        }\n+\n+        for (int i = 0; i < n; i++) {\n+          SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n         }\n       });\n     } else {\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++) {\n-          SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n+        arrow::internal::BitmapReader validity_reader(array->null_bitmap_data(),\n+                                                      array->offset(), n);\n+\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++, validity_reader.Next()) {\n+            if (validity_reader.IsSet()) {\n+              SET_STRING_ELT(data, start + i,\n+                             r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                          &nul_was_stripped));\n+            } else {\n+              SET_STRING_ELT(data, start + i, NA_STRING);\n+            }\n+          }\n+          return;\n+        }\n+\n+        for (int i = 0; i < n; i++, validity_reader.Next()) {\n+          if (validity_reader.IsSet()) {\n+            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n+          } else {\n+            SET_STRING_ELT(data, start + i, NA_STRING);\n+          }\n         }\n       });\n     }\n \n+    if (nul_was_stripped) {\n+      cpp11::warning(\"Stripping '\\\\0' (nul) from character vector\");\n+    }\n+\n     return Status::OK();\n   }\n \n   bool Parallel() const { return false; }\n \n  private:\n-  static SEXP r_string_from_view(const arrow::util::string_view& view) {\n+  static SEXP r_string_from_view(arrow::util::string_view view) {\n\nReview comment:\n       string_view is a trivially copyable structure so there's no need to protect it from copies with `const&`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T20:12:15.524+0000",
                    "updated": "2021-01-04T20:12:15.524+0000",
                    "started": "2021-01-04T20:12:15.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530863",
                    "issueId": "13257143"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/worklog/530878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8365:\nURL: https://github.com/apache/arrow/pull/8365#discussion_r551551461\n\n\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -288,36 +290,104 @@ struct Converter_String : public Converter {\n     }\n \n     StringArrayType* string_array = static_cast<StringArrayType*>(array.get());\n-    if (array->null_count()) {\n-      // need to watch for nulls\n-      arrow::internal::BitmapReader null_reader(array->null_bitmap_data(),\n-                                                array->offset(), n);\n+\n+    const bool all_valid = array->null_count() == 0;\n+    const bool strip_out_nuls = GetBoolOption(\"arrow.skip_nul\", false);\n+\n+    bool nul_was_stripped = false;\n+\n+    if (all_valid) {\n+      // no need to watch for missing strings\n       cpp11::unwind_protect([&] {\n-        for (int i = 0; i < n; i++, null_reader.Next()) {\n-          if (null_reader.IsSet()) {\n-            SET_STRING_ELT(data, start + i, r_string_from_view(string_array->GetView(i)));\n-          } else {\n-            SET_STRING_ELT(data, start + i, NA_STRING);\n+        if (strip_out_nuls) {\n+          for (int i = 0; i < n; i++) {\n+            SET_STRING_ELT(data, start + i,\n+                           r_string_from_view_strip_nul(string_array->GetView(i),\n+                                                        &nul_was_stripped));\n           }\n+          return;\n\nReview comment:\n       no preference, just trying to understand\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T20:29:53.073+0000",
                    "updated": "2021-01-04T20:29:53.073+0000",
                    "started": "2021-01-04T20:29:53.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530878",
                    "issueId": "13257143"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@132c2906[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37e98631[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72bdf3ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@99e2ba6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1510d2f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4991a33b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@542f0a44[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2c94c87c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f801057[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7bcce4e7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@571dacf0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5dc05947[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jan 29 03:14:40 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-04T20:48:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6582/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-09-17T14:32:54.000+0000",
        "updated": "2021-02-18T02:35:16.000+0000",
        "timeoriginalestimate": null,
        "description": "Apologies if this issue isn't categorized or documented appropriately.  Please be gentle! :)\r\n\r\nAs a heavy R user that normally interacts with parquet files using SparklyR, I have recently decided to try to use arrow::read_parquet() on a few parquet files that were on my local machine rather than in hadoop.  I was not able to proceed after several various attempts due to embedded nuls.  For example:\r\n\r\ntry({df <- read_parquet('out_2019-09_data_1.snappy.parquet') })\r\nError in Table__to_dataframe(x, use_threads = option_use_threads()) : \r\n  embedded nul in string: 'INSTALL BOTH LEFT FRONT AND RIGHT FRONT  TORQUE ARMS\\0 ARMS'\r\n\r\nIs there a solution to this?\r\n\r\nI have also hit roadblocks with embedded nuls in the past with csvs using data.table::fread(), but readr::read_delim() seems to handle them gracefully with just a warning after proceeding.\r\n\r\nApologies that I do not have a handy reprex. I don't know if I can even recreate a parquet file with embedded nuls using arrow if it won't let me read one in, and I can't share this file due to company restrictions.\r\n\r\nPlease let me know how I can be of any more help!",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13019596",
                "id": "13019596",
                "filename": "embedded_nul.parquet",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                    "name": "icook",
                    "key": "icook",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                    },
                    "displayName": "Ian Cook",
                    "active": true,
                    "timeZone": "America/New_York"
                },
                "created": "2021-01-29T03:11:32.510+0000",
                "size": 400,
                "mimeType": "application/octet-stream",
                "content": "https://issues.apache.org/jira/secure/attachment/13019596/embedded_nul.parquet"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Arrow to R fails with embedded nuls in strings",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": "Windows 10\r\nR 3.4.4\r\n",
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/comment/16931666",
                    "id": "16931666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Thanks for the report. A few thoughts:\r\n\r\n1. \"embedded nul in string\" is an error coming from R. Since the error is being thrown in {{Table__to_dataframe}}, that means the Parquet file was already read into Arrow memory successfully, and R is failing to read it from Arrow. That helps isolate the issue.\r\n\r\n2. Given that, you could play around with the {{col_select}} argument to {{read_parquet}} and identify which column it is that has the nul, if you don't already know. If you don't happen to need this column for whatever you're trying to do, you could omit it from there and proceed.\r\n\r\n3. If you can identify the offending column, it would be interesting to know what Arrow type it is. To do that, do something like\r\n\r\n{code:r}\r\ntab <- read_parquet(file, as_tibble=FALSE)\r\ntab$schema\r\n{code}\r\n\r\nand report back what type that column is.\r\n\r\n4. Check your system locale and encoding and make sure it aligns with the data in the file. [Googling the error message|https://www.google.com/search?q=embedded+nul+in+string] points to encoding often being implicated.\r\n\r\n5. How are these Parquet files generated? Same host? Or different system, platform, etc.? Does that tell you something useful about the locale/encoding you need to set in R to read the data?\r\n\r\n6. If any of this leads you to a place where you can write out a sufficiently anonymized/obfuscated file that reproduces the error, that would of course be most helpful.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-09-17T17:12:55.791+0000",
                    "updated": "2019-09-17T17:12:55.791+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/comment/16931731",
                    "id": "16931731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=johncassil",
                        "name": "johncassil",
                        "key": "johncassil",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "John Cassil",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks Neal!\r\n\r\nI had previously been able to set as_tibble to FALSE and successfully create the <Object containing active binding>, but didn't know I could use schema to see the columns. Actually, my whole purpose for reading in this particular file to begin with was to see the column names in the file, so problem solved! haha\r\n\r\n{code:R}\r\n> df$schema\r\narrow::Schema \r\nsquishedVin: string\r\nhashedVin: string\r\ntranDate: date32[day]\r\nrawFieldValue: string\r\ndisplayText: string\r\nodometerReading: double \r\n{code}\r\n\r\n\r\nI know based on the error that the string is appearing in the rawFieldValue column which it appears that arrow is interpreting as a string type.  \r\n\r\nAs far as encoding issues, I am not strong in understanding encoding issues. To back up just a bit, this happens to be a dump of the raw text that any of hundreds of thousands of sources has given us, so I am guessing that the embedded nul originated due to encoding issues on a partner's server somewhere perhaps in a galaxy far away, many years ago.   The file was actually created by a java process that one of our teams built to export it from hadoop.  I know very little beyond that, and unfortunately am not sure that I could create anything to reproduce the error yet. \r\n\r\nI am curious if you know of any way to use a function to turn this into a dataframe that would bypass Table__to_dataframe...\r\n\r\nThanks so much again!\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=johncassil",
                        "name": "johncassil",
                        "key": "johncassil",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "John Cassil",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-09-17T18:21:35.987+0000",
                    "updated": "2019-09-17T18:21:35.987+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/comment/16933608",
                    "id": "16933608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "My guess is that (if you needed to solve this problem, which it sounds like you don't), you could try setting different encodings in your R session and see if that handles the string column correctly. Or there's probably a way to get at that column and dump it as is to disk so that you could use some other means of stripping out the nuls. I'm guessing the ultimate fix is to fix the data generating/ETL process so that there aren't nuls there to begin with, though I recognize that that's not always an option.\r\n\r\nI'll keep this open for a bit and think about if there are ways we can make it easier to dump that data from Arrow to a plain text format without going through R first so that one might be able to debug when they get bad data like this, but ultimately the error is coming from R, not arrow.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-09-19T17:28:28.335+0000",
                    "updated": "2019-09-19T17:28:28.335+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/comment/16933622",
                    "id": "16933622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=johncassil",
                        "name": "johncassil",
                        "key": "johncassil",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "John Cassil",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thank you very much for your thoughtful responses and the solution to my original goal.\r\n\r\nThat might be an interesting approach.  If there were a function to export it from Arrow into text on disk, then a user could essentially use Arrow as a method to unpack/uncompress a parquet file into raw text.  I could see that being helpful in other situations beyond this.  I'm not sure.  Your call!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=johncassil",
                        "name": "johncassil",
                        "key": "johncassil",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "John Cassil",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-09-19T17:47:01.847+0000",
                    "updated": "2019-09-19T17:47:01.847+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/comment/17258483",
                    "id": "17258483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 8365\n[https://github.com/apache/arrow/pull/8365]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-01-04T20:48:01.597+0000",
                    "updated": "2021-01-04T20:48:01.597+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257143/comment/17274132",
                    "id": "17274132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "For future reference/testing purposes: attached is a tiny uncompressed Parquet file named {{embedded_nul.parquet}} that contains a single string column named {{x}} with a single record containing a one-byte string consisting of an embedded nul. The file was written with Spark 3.0.1 using this PySpark code:\r\n\r\n{code:python}\r\nfrom pyspark.sql.types import *\r\nschema = StructType([StructField(\"x\", StringType(), True)])\r\njson = '[{\"x\": \"\\\\u0000\"}]'\r\ndf = spark.read.schema(schema).json(sc.parallelize([json]))\r\ndf.repartition(1).write.parquet('embedded_nul.parquet', compression = 'none')\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-01-29T03:14:40.320+0000",
                    "updated": "2021-01-29T04:12:34.849+0000"
                }
            ],
            "maxResults": 6,
            "total": 6,
            "startAt": 0
        },
        "customfield_12311820": "0|z06q0g:",
        "customfield_12314139": null
    }
}