{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13448792",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792",
    "key": "ARROW-16772",
    "fields": {
        "parent": {
            "id": "13448791",
            "key": "ARROW-16771",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13448791",
            "fields": {
                "summary": "[Format][C++][Go] Adding Run-Length encoding to Arrow",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                    "id": "3",
                    "description": "A task that needs to be done.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                    "name": "Task",
                    "subtask": false,
                    "avatarId": 21148
                }
            }
        },
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zagto",
            "name": "zagto",
            "key": "JIRAUSER286565",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tobias Zagorni",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zagto",
            "name": "zagto",
            "key": "JIRAUSER286565",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tobias Zagorni",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zagto",
            "name": "zagto",
            "key": "JIRAUSER286565",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tobias Zagorni",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16772/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/779149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#issuecomment-1148817772\n\n   https://issues.apache.org/jira/browse/ARROW-16772\n\n\n",
                    "created": "2022-06-07T15:20:31.681+0000",
                    "updated": "2022-06-07T15:20:31.681+0000",
                    "started": "2022-06-07T15:20:31.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779149",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/779150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#issuecomment-1148817793\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-06-07T15:20:33.851+0000",
                    "updated": "2022-06-07T15:20:33.851+0000",
                    "started": "2022-06-07T15:20:33.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779150",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/779206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r891554578\n\n\n##########\ncpp/src/arrow/compute/api_vector.cc:\n##########\n@@ -163,6 +163,8 @@ static auto kRankOptionsType = GetFunctionOptionsType<RankOptions>(\n     DataMember(\"sort_keys\", &RankOptions::sort_keys),\n     DataMember(\"null_placement\", &RankOptions::null_placement),\n     DataMember(\"tiebreaker\", &RankOptions::tiebreaker));\n+static auto kRunLengthEncodeOptionsType =\n+    GetFunctionOptionsType<RunLengthEncodeOptions>();\n\nReview Comment:\n   These options options currently unnecessary. To me that seems to be the place where we could specify the run length values type, if we decide to support multiple ones\n\n\n\n",
                    "created": "2022-06-07T17:59:49.885+0000",
                    "updated": "2022-06-07T17:59:49.885+0000",
                    "started": "2022-06-07T17:59:49.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "779206",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/800140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#issuecomment-1212602621\n\n   @drin do you want to take a look through this PR\n\n\n",
                    "created": "2022-08-11T23:59:22.614+0000",
                    "updated": "2022-08-11T23:59:22.614+0000",
                    "started": "2022-08-11T23:59:22.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800140",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r944925919\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -580,6 +587,26 @@ Result<Datum> DictionaryEncode(\n     const DictionaryEncodeOptions& options = DictionaryEncodeOptions::Defaults(),\n     ExecContext* ctx = NULLPTR);\n \n+/// \\brief Run-Length-encode values in an array-like object\n+/// \\param[in] value array-like input\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return result with same shape and type as input\n+///\n+/// \\since 9.0.0\n+/// \\note API not yet finalized\n+ARROW_EXPORT\n+Result<Datum> RunLengthEncode(const Datum& value, ExecContext* ctx = NULLPTR);\n\nReview Comment:\n   Should there also be a version that takes a `RunLengthEncodeOptions`?\n\n\n\n##########\ncpp/src/arrow/array/data.cc:\n##########\n@@ -393,6 +408,16 @@ int64_t ArraySpan::GetNullCount() const {\n   return precomputed;\n }\n \n+bool ArraySpan::MayHaveNulls() const {\n+  if (type->id() == Type::RUN_LENGTH_ENCODED) {\n+    return child_data[0].MayHaveNulls();\n+  } else {\n+    // If an ArrayData is slightly malformed it may have kUnknownNullCount set\n\nReview Comment:\n   ```suggestion\r\n       // If an ArraySpan is slightly malformed it may have kUnknownNullCount set\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/kernel.cc:\n##########\n@@ -275,6 +275,41 @@ std::shared_ptr<TypeMatcher> FixedSizeBinaryLike() {\n   return std::make_shared<FixedSizeBinaryLikeMatcher>();\n }\n \n+class RunLengthEncodedMatcher : public TypeMatcher {\n+ public:\n+  RunLengthEncodedMatcher(std::shared_ptr<TypeMatcher> encoded_type_matcher)\n+      : encoded_type_matcher{std::move(encoded_type_matcher)} {}\n+\n+  bool Matches(const DataType& type) const override {\n+    if (type.id() == Type::RUN_LENGTH_ENCODED) {\n+      auto& encoding_type = dynamic_cast<const EncodingType&>(type);\n+      return encoded_type_matcher->Matches(*encoding_type.encoded_type());\n+    } else {\n+      return false;\n+    }\n\nReview Comment:\n   ```suggestion\r\n       if (type.id() != Type::RUN_LENGTH_ENCODED) { return false; }\r\n   \r\n       auto& encoding_type = dynamic_cast<const EncodingType&>(type);\r\n       return encoded_type_matcher->Matches(*encoding_type.encoded_type());\r\n   ```\r\n   \r\n   optional suggestion, but I think it speeds up readability\n\n\n\n##########\ncpp/src/arrow/util/rle_util.h:\n##########\n@@ -0,0 +1,27 @@\n+#pragma once\n+\n+#include <cstdint>\n+\n+#include \"arrow/array/data.h\"\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+struct Metadata {\n+  int64_t physical_offset;\n+  int64_t physical_length;\n+};\n+\n+int64_t FindPhysicalOffset(const int32_t* accumulated_run_lengths,\n+                           int64_t physical_length, int64_t logical_offset);\n+\n+int64_t FindPhysicalIndex(const int32_t* accumulated_run_lengths,\n+                          int64_t physical_length, int64_t physical_offset, int64_t logical_offset, int64_t logical_index);\n\nReview Comment:\n   can `accumulated_run_lengths` be shortened to `run_lengths`? Otherwise, I'm not sure what the accumulated portion should signify.\r\n   \r\n   It would also be helpful to know what the difference is between offsets and indices. Based on the implementations in `rle_util.cc`, it seems like `FindPhysicalOffset` could be implemented as:\r\n   ```c\r\n   FindPhysicalIndex(run_lengths, physical_length, 0, logical_offset, 0);\r\n   ```\r\n   so, it's not clear to me what the different naming signifies (except maybe that a physical offset and logical index is/isn't provided)\n\n\n\n##########\ncpp/src/arrow/util/rle_util.cc:\n##########\n@@ -0,0 +1,32 @@\n+#include \"arrow/util/rle_util.h\"\n+#include <algorithm>\n+#include \"arrow/builder.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+int64_t FindPhysicalOffset(const int32_t* accumulated_run_lengths,\n+                           int64_t physical_length, int64_t logical_offset) {\n+  auto it = std::upper_bound(accumulated_run_lengths,\n+                             accumulated_run_lengths + physical_length, logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n+}\n+\n+int64_t FindPhysicalIndex(const int32_t* accumulated_run_lengths,\n+                          int64_t physical_length, int64_t physical_offset, int64_t logical_offset, int64_t logical_index) {\n+  auto it = std::upper_bound(accumulated_run_lengths + physical_offset,\n+                             accumulated_run_lengths + physical_offset + physical_length,\n+                             logical_index + logical_offset);\n\nReview Comment:\n   I don't understand the difference between logical index and logical offset based on the provided tests. Or, more specifically, they seem to share the same domain (values in the `run_lengths` list).\n\n\n\n##########\ncpp/src/arrow/compute/kernel.cc:\n##########\n@@ -275,6 +275,41 @@ std::shared_ptr<TypeMatcher> FixedSizeBinaryLike() {\n   return std::make_shared<FixedSizeBinaryLikeMatcher>();\n }\n \n+class RunLengthEncodedMatcher : public TypeMatcher {\n+ public:\n+  RunLengthEncodedMatcher(std::shared_ptr<TypeMatcher> encoded_type_matcher)\n+      : encoded_type_matcher{std::move(encoded_type_matcher)} {}\n+\n+  bool Matches(const DataType& type) const override {\n+    if (type.id() == Type::RUN_LENGTH_ENCODED) {\n+      auto& encoding_type = dynamic_cast<const EncodingType&>(type);\n+      return encoded_type_matcher->Matches(*encoding_type.encoded_type());\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  bool Equals(const TypeMatcher& other) const override {\n+    if (this == &other) {\n+      return true;\n+    }\n+    auto casted = dynamic_cast<const RunLengthEncodedMatcher*>(&other);\n+    return casted != nullptr;\n+  }\n+\n+  std::string ToString() const override {\n+    return \"run_length_encoded(\" + encoded_type_matcher->ToString() + \")\";\n+  };\n+\n+ private:\n+  std::shared_ptr<TypeMatcher> encoded_type_matcher;\n\nReview Comment:\n   I don't know the surrounding context, so I'm just curious if this could be a unique_ptr instead and if there is benefit if it were?\n\n\n\n##########\ncpp/src/arrow/util/rle_util.cc:\n##########\n@@ -0,0 +1,32 @@\n+#include \"arrow/util/rle_util.h\"\n+#include <algorithm>\n+#include \"arrow/builder.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+int64_t FindPhysicalOffset(const int32_t* accumulated_run_lengths,\n+                           int64_t physical_length, int64_t logical_offset) {\n+  auto it = std::upper_bound(accumulated_run_lengths,\n+                             accumulated_run_lengths + physical_length, logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n+}\n+\n+int64_t FindPhysicalIndex(const int32_t* accumulated_run_lengths,\n+                          int64_t physical_length, int64_t physical_offset, int64_t logical_offset, int64_t logical_index) {\n+  auto it = std::upper_bound(accumulated_run_lengths + physical_offset,\n+                             accumulated_run_lengths + physical_offset + physical_length,\n+                             logical_index + logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n\nReview Comment:\n   should this accommodate `physical_offset`?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_run_length_encode_test.cc:\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct RLETestData {\n+  static RLETestData JSON(std::shared_ptr<DataType> data_type, std::string input_json,\n+                          std::string expected_values_json,\n+                          std::vector<int32_t> expected_run_lengths,\n+                          int64_t input_offset = 0) {\n+    auto input_array = ArrayFromJSON(data_type, input_json);\n+    return {.input = input_array->Slice(input_offset),\n+            .expected_values = ArrayFromJSON(data_type, expected_values_json),\n+            .expected_run_lengths = std::move(expected_run_lengths),\n+            .string = input_json};\n+  }\n+\n+  template <typename ArrowType>\n+  static RLETestData TypeMinMaxNull() {\n+    using CType = typename ArrowType::c_type;\n+    RLETestData result;\n+    NumericBuilder<ArrowType> builder;\n+    ARROW_EXPECT_OK(builder.Append(std::numeric_limits<CType>::min()));\n+    ARROW_EXPECT_OK(builder.AppendNull());\n+    ARROW_EXPECT_OK(builder.Append(std::numeric_limits<CType>::max()));\n+    result.input = builder.Finish().ValueOrDie();\n+    result.expected_values = result.input;\n+    result.expected_run_lengths = {1, 2, 3};\n+    result.string = \"Type min, max, & null values\";\n+    return result;\n+  }\n+\n+  std::shared_ptr<Array> input;\n+  std::shared_ptr<Array> expected_values;\n+  std::vector<int32_t> expected_run_lengths;\n\nReview Comment:\n   When I read this variable, I imagine it to contain the length of an encoded value--it's \"run length\". But, if I understand the tests correctly, the elements in this vector are more like offsets or positions of the last position of an encoded value.\r\n   \r\n   This is kind of a nitpick, but maybe instead of \"run_lengths\" it can be changed to \"run_length_offsets\" or something a bit clearer. A clarifying comment might also be sufficient.\n\n\n\n##########\ncpp/src/arrow/util/rle_util_test.cc:\n##########\n@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+TEST(TestRleUtil, FindPhysicalOffsetTest) {\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){1}, 1, 0), 0);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){1, 2, 3}, 3, 0), 0);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){1, 2, 3}, 3, 1), 1);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){1, 2, 3}, 3, 2), 2);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){1, 2, 3}, 3, 3), 3);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){2, 3, 4}, 3, 0), 0);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){2, 3, 4}, 3, 1), 0);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){2, 3, 4}, 3, 2), 1);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){2, 3, 4}, 3, 3), 2);\n+  ASSERT_EQ(FindPhysicalOffset((const int32_t[]){2, 4, 6}, 3, 3), 1);\n+}\n+\n+TEST(TestRleUtil, FindPhysicalIndexTest) {\n+  ASSERT_EQ(FindPhysicalIndex((const int32_t[]){1, 10, 20, 30, 40}, 5, 2, 15, 14), 3);\n+  ASSERT_EQ(FindPhysicalIndex((const int32_t[]){1, 10, 20, 30, 40}, 5, 2, 15, 15), 4);\n\nReview Comment:\n   it occurs to me that the expected values here are relative to the whole RLE list, rather than relative to the physical offset provided. I am not sure if that is intended or not?\n\n\n\n",
                    "created": "2022-08-16T21:19:29.241+0000",
                    "updated": "2022-08-16T21:19:29.241+0000",
                    "started": "2022-08-16T21:19:29.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801132",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r947222902\n\n\n##########\ncpp/src/arrow/util/rle_util.cc:\n##########\n@@ -0,0 +1,32 @@\n+#include \"arrow/util/rle_util.h\"\n+#include <algorithm>\n+#include \"arrow/builder.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+int64_t FindPhysicalOffset(const int32_t* accumulated_run_lengths,\n+                           int64_t physical_length, int64_t logical_offset) {\n+  auto it = std::upper_bound(accumulated_run_lengths,\n+                             accumulated_run_lengths + physical_length, logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n+}\n+\n+int64_t FindPhysicalIndex(const int32_t* accumulated_run_lengths,\n+                          int64_t physical_length, int64_t physical_offset, int64_t logical_offset, int64_t logical_index) {\n+  auto it = std::upper_bound(accumulated_run_lengths + physical_offset,\n+                             accumulated_run_lengths + physical_offset + physical_length,\n+                             logical_index + logical_offset);\n\nReview Comment:\n   I don't understand the difference between logical index and logical offset based on the provided tests. Or, more specifically, they seem to share the same domain (values in the `run_lengths` list).\n\n\n\n",
                    "created": "2022-08-16T21:30:14.616+0000",
                    "updated": "2022-08-16T21:30:14.616+0000",
                    "started": "2022-08-16T21:30:14.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801136",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r949662682\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_run_length_encode_test.cc:\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct RLETestData {\n+  static RLETestData JSON(std::shared_ptr<DataType> data_type, std::string input_json,\n+                          std::string expected_values_json,\n+                          std::vector<int32_t> expected_run_lengths,\n+                          int64_t input_offset = 0) {\n+    auto input_array = ArrayFromJSON(data_type, input_json);\n+    return {.input = input_array->Slice(input_offset),\n+            .expected_values = ArrayFromJSON(data_type, expected_values_json),\n+            .expected_run_lengths = std::move(expected_run_lengths),\n+            .string = input_json};\n+  }\n+\n+  template <typename ArrowType>\n+  static RLETestData TypeMinMaxNull() {\n+    using CType = typename ArrowType::c_type;\n+    RLETestData result;\n+    NumericBuilder<ArrowType> builder;\n+    ARROW_EXPECT_OK(builder.Append(std::numeric_limits<CType>::min()));\n+    ARROW_EXPECT_OK(builder.AppendNull());\n+    ARROW_EXPECT_OK(builder.Append(std::numeric_limits<CType>::max()));\n+    result.input = builder.Finish().ValueOrDie();\n+    result.expected_values = result.input;\n+    result.expected_run_lengths = {1, 2, 3};\n+    result.string = \"Type min, max, & null values\";\n+    return result;\n+  }\n+\n+  std::shared_ptr<Array> input;\n+  std::shared_ptr<Array> expected_values;\n+  std::vector<int32_t> expected_run_lengths;\n\nReview Comment:\n   You're right, run_lengths is not an accurate name for this. I have started using the name run_ends for this in some places, and should probably here too\n\n\n\n",
                    "created": "2022-08-18T22:50:47.508+0000",
                    "updated": "2022-08-18T22:50:47.508+0000",
                    "started": "2022-08-18T22:50:47.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801821",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r949678389\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_run_length_encode_test.cc:\n##########\n@@ -0,0 +1,192 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct RLETestData {\n+  static RLETestData JSON(std::shared_ptr<DataType> data_type, std::string input_json,\n+                          std::string expected_values_json,\n+                          std::vector<int32_t> expected_run_lengths,\n+                          int64_t input_offset = 0) {\n+    auto input_array = ArrayFromJSON(data_type, input_json);\n+    return {.input = input_array->Slice(input_offset),\n+            .expected_values = ArrayFromJSON(data_type, expected_values_json),\n+            .expected_run_lengths = std::move(expected_run_lengths),\n+            .string = input_json};\n+  }\n+\n+  template <typename ArrowType>\n+  static RLETestData TypeMinMaxNull() {\n+    using CType = typename ArrowType::c_type;\n+    RLETestData result;\n+    NumericBuilder<ArrowType> builder;\n+    ARROW_EXPECT_OK(builder.Append(std::numeric_limits<CType>::min()));\n+    ARROW_EXPECT_OK(builder.AppendNull());\n+    ARROW_EXPECT_OK(builder.Append(std::numeric_limits<CType>::max()));\n+    result.input = builder.Finish().ValueOrDie();\n+    result.expected_values = result.input;\n+    result.expected_run_lengths = {1, 2, 3};\n+    result.string = \"Type min, max, & null values\";\n+    return result;\n+  }\n+\n+  std::shared_ptr<Array> input;\n+  std::shared_ptr<Array> expected_values;\n+  std::vector<int32_t> expected_run_lengths;\n\nReview Comment:\n   `run_ends` is a really good name, IMO. So, that sounds great\n\n\n\n",
                    "created": "2022-08-18T23:25:50.897+0000",
                    "updated": "2022-08-18T23:25:50.897+0000",
                    "started": "2022-08-18T23:25:50.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801824",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#issuecomment-1220094793\n\n   @drin I hope this is not too confusing, but I did a lot of work on the rle-util branch in the recent time, which was not merged/pushed here yet, sorry for that. I'm going to push that, so that you can see the lastest version of the encode/decode kernels\r\n   \r\n   Thanks for the feedback so far, I think the majority still applies to the current code. I don't think you have to review all the new rle_util code unless you want to, someone is eventually going to review [ARROW-17263](https://issues.apache.org/jira/browse/ARROW-17263) for that.\n\n\n",
                    "created": "2022-08-19T00:05:56.091+0000",
                    "updated": "2022-08-19T00:05:56.091+0000",
                    "started": "2022-08-19T00:05:56.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801831",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r949705105\n\n\n##########\ncpp/src/arrow/compute/api_vector.h:\n##########\n@@ -580,6 +587,26 @@ Result<Datum> DictionaryEncode(\n     const DictionaryEncodeOptions& options = DictionaryEncodeOptions::Defaults(),\n     ExecContext* ctx = NULLPTR);\n \n+/// \\brief Run-Length-encode values in an array-like object\n+/// \\param[in] value array-like input\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return result with same shape and type as input\n+///\n+/// \\since 9.0.0\n+/// \\note API not yet finalized\n+ARROW_EXPORT\n+Result<Datum> RunLengthEncode(const Datum& value, ExecContext* ctx = NULLPTR);\n\nReview Comment:\n   Yes, there should be once there are options for this function. I should probably remove RunLengthEncodeOptions for now, it does not have any options\n\n\n\n",
                    "created": "2022-08-19T00:42:00.149+0000",
                    "updated": "2022-08-19T00:42:00.149+0000",
                    "started": "2022-08-19T00:42:00.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801834",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/801835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r949708426\n\n\n##########\ncpp/src/arrow/util/rle_util.cc:\n##########\n@@ -0,0 +1,32 @@\n+#include \"arrow/util/rle_util.h\"\n+#include <algorithm>\n+#include \"arrow/builder.h\"\n+\n+namespace arrow {\n+namespace rle_util {\n+\n+int64_t FindPhysicalOffset(const int32_t* accumulated_run_lengths,\n+                           int64_t physical_length, int64_t logical_offset) {\n+  auto it = std::upper_bound(accumulated_run_lengths,\n+                             accumulated_run_lengths + physical_length, logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n+}\n+\n+int64_t FindPhysicalIndex(const int32_t* accumulated_run_lengths,\n+                          int64_t physical_length, int64_t physical_offset, int64_t logical_offset, int64_t logical_index) {\n+  auto it = std::upper_bound(accumulated_run_lengths + physical_offset,\n+                             accumulated_run_lengths + physical_offset + physical_length,\n+                             logical_index + logical_offset);\n+  return std::distance(accumulated_run_lengths, it);\n\nReview Comment:\n   Yes! I ended up moving that logic to a function called GetPhysicalLength, since that is what it ended up being used for, but did not notice the wrong end iterator to upper_bound here\n\n\n\n",
                    "created": "2022-08-19T00:51:50.388+0000",
                    "updated": "2022-08-19T00:51:50.388+0000",
                    "started": "2022-08-19T00:51:50.387+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "801835",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r951923721\n\n\n##########\ncpp/src/arrow/testing/gtest_util.cc:\n##########\n@@ -101,8 +101,10 @@ std::vector<Type::type> AllTypeIds() {\n           Type::DENSE_UNION,\n           Type::SPARSE_UNION,\n           Type::DICTIONARY,\n+          Type::RUN_LENGTH_ENCODED,\n\nReview Comment:\n   I think this type is duplicated on line 107, so probably only need one.\n\n\n\n",
                    "created": "2022-08-22T21:21:03.483+0000",
                    "updated": "2022-08-22T21:21:03.483+0000",
                    "started": "2022-08-22T21:21:03.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802632",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r951924292\n\n\n##########\ncpp/src/arrow/testing/gtest_util.cc:\n##########\n@@ -101,8 +101,10 @@ std::vector<Type::type> AllTypeIds() {\n           Type::DENSE_UNION,\n           Type::SPARSE_UNION,\n           Type::DICTIONARY,\n+          Type::RUN_LENGTH_ENCODED,\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n",
                    "created": "2022-08-22T21:21:48.581+0000",
                    "updated": "2022-08-22T21:21:48.581+0000",
                    "started": "2022-08-22T21:21:48.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802633",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r951943175\n\n\n##########\ncpp/src/arrow/visitor_generate.h:\n##########\n@@ -35,34 +35,39 @@ namespace arrow {\n   ACTION(Float);                                     \\\n   ACTION(Double)\n \n-#define ARROW_GENERATE_FOR_ALL_TYPES(ACTION)    \\\n-  ACTION(Null);                                 \\\n-  ACTION(Boolean);                              \\\n-  ARROW_GENERATE_FOR_ALL_NUMERIC_TYPES(ACTION); \\\n-  ACTION(String);                               \\\n-  ACTION(Binary);                               \\\n-  ACTION(LargeString);                          \\\n-  ACTION(LargeBinary);                          \\\n-  ACTION(FixedSizeBinary);                      \\\n-  ACTION(Duration);                             \\\n-  ACTION(Date32);                               \\\n-  ACTION(Date64);                               \\\n-  ACTION(Timestamp);                            \\\n-  ACTION(Time32);                               \\\n-  ACTION(Time64);                               \\\n-  ACTION(MonthDayNanoInterval);                 \\\n-  ACTION(MonthInterval);                        \\\n-  ACTION(DayTimeInterval);                      \\\n-  ACTION(Decimal128);                           \\\n-  ACTION(Decimal256);                           \\\n-  ACTION(List);                                 \\\n-  ACTION(LargeList);                            \\\n-  ACTION(Map);                                  \\\n-  ACTION(FixedSizeList);                        \\\n-  ACTION(Struct);                               \\\n-  ACTION(SparseUnion);                          \\\n-  ACTION(DenseUnion);                           \\\n-  ACTION(Dictionary);                           \\\n+// all types that can exist as a Scalar\n+#define ARROW_GENERATE_FOR_ALL_SCALAR_TYPES(ACTION) \\\n\nReview Comment:\n   Can all of these be scalars? If so, I'm not sure why `ARROW_GENERATE_FOR_ALL_TYPES` is being changed to a wrapper around this macro.\r\n   \r\n   Otherwise, maybe a comment for `ARROW_GENERATE_FOR_ALL_TYPES` could help with clarity.\n\n\n\n",
                    "created": "2022-08-22T21:49:41.869+0000",
                    "updated": "2022-08-22T21:49:41.869+0000",
                    "started": "2022-08-22T21:49:41.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802636",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#issuecomment-1223350014\n\n   > @drin ...I did a lot of work on the rle-util branch in the recent time... I'm going to push that, so that you can see the lastest version of the encode/decode kernels\r\n   > \r\n   > Thanks for the feedback so far, I think the majority still applies to the current code. I don't think you have to review all the new rle_util code unless you want to, someone is eventually going to review [ARROW-17263](https://issues.apache.org/jira/browse/ARROW-17263) for that.\r\n   \r\n   just saw this comment, thanks for the heads up! I'll try to review anyways, it hopefully doesn't have too much extra learning curve\n\n\n",
                    "created": "2022-08-23T00:07:17.758+0000",
                    "updated": "2022-08-23T00:07:17.758+0000",
                    "started": "2022-08-23T00:07:17.758+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802656",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r952032146\n\n\n##########\ncpp/src/arrow/array/array_encoded.cc:\n##########\n@@ -0,0 +1,77 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/array_encoded.h\"\n+#include \"arrow/array/util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+\n+// ----------------------------------------------------------------------\n+// RunLengthEncodedArray\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<ArrayData>& data) {\n+  ARROW_CHECK_EQ(data->type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(data);\n+}\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<DataType>& type,\n+                                             int64_t length,\n+                                             const std::shared_ptr<Array>& run_ends_array,\n+                                             const std::shared_ptr<Array>& values_array,\n+                                             int64_t offset) {\n+  ARROW_CHECK_EQ(type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(ArrayData::Make(type, length, {NULLPTR}, 0, offset));\n+  data_->child_data.push_back(std::move(run_ends_array->data()));\n+  data_->child_data.push_back(std::move(values_array->data()));\n\nReview Comment:\n   Is there design documentation somewhere?\r\n   \r\n   I think this approach makes sense, but I'm just wondering what the trade-offs are compared to having run ends and values in a single Array, in a similar layout as [variable-sized binary](https://arrow.apache.org/docs/format/Columnar.html#variable-size-binary-layout)? I suspect this approach is just more flexible, especially for run length encoding a nested type array; though, there is likely more to it than that.\n\n\n\n",
                    "created": "2022-08-23T00:21:06.840+0000",
                    "updated": "2022-08-23T00:21:06.840+0000",
                    "started": "2022-08-23T00:21:06.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802658",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r952033171\n\n\n##########\ncpp/src/arrow/visitor_generate.h:\n##########\n@@ -35,34 +35,39 @@ namespace arrow {\n   ACTION(Float);                                     \\\n   ACTION(Double)\n \n-#define ARROW_GENERATE_FOR_ALL_TYPES(ACTION)    \\\n-  ACTION(Null);                                 \\\n-  ACTION(Boolean);                              \\\n-  ARROW_GENERATE_FOR_ALL_NUMERIC_TYPES(ACTION); \\\n-  ACTION(String);                               \\\n-  ACTION(Binary);                               \\\n-  ACTION(LargeString);                          \\\n-  ACTION(LargeBinary);                          \\\n-  ACTION(FixedSizeBinary);                      \\\n-  ACTION(Duration);                             \\\n-  ACTION(Date32);                               \\\n-  ACTION(Date64);                               \\\n-  ACTION(Timestamp);                            \\\n-  ACTION(Time32);                               \\\n-  ACTION(Time64);                               \\\n-  ACTION(MonthDayNanoInterval);                 \\\n-  ACTION(MonthInterval);                        \\\n-  ACTION(DayTimeInterval);                      \\\n-  ACTION(Decimal128);                           \\\n-  ACTION(Decimal256);                           \\\n-  ACTION(List);                                 \\\n-  ACTION(LargeList);                            \\\n-  ACTION(Map);                                  \\\n-  ACTION(FixedSizeList);                        \\\n-  ACTION(Struct);                               \\\n-  ACTION(SparseUnion);                          \\\n-  ACTION(DenseUnion);                           \\\n-  ACTION(Dictionary);                           \\\n+// all types that can exist as a Scalar\n+#define ARROW_GENERATE_FOR_ALL_SCALAR_TYPES(ACTION) \\\n\nReview Comment:\n   I think all types that exist in arrow right now can exist as scalars. I was considering adding an RLE scalar class for consistency. But the encoding can only be applied to arrays, so an RLE scalar would just be a wrapper for another scalar of the actual data type. To me that seems like something you would not actually want to use and therefore it should not exist.\r\n   \r\n   The idea for new macro is code that works on scalar values does not need to generate a case for RLE (and possibly other future array encodings), which would be unnecessary and may also result in using `type_traits<RunLengthEncoded>::ScalarType`\n\n\n\n",
                    "created": "2022-08-23T00:23:56.961+0000",
                    "updated": "2022-08-23T00:23:56.961+0000",
                    "started": "2022-08-23T00:23:56.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802659",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zagto commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r952061137\n\n\n##########\ncpp/src/arrow/array/array_encoded.cc:\n##########\n@@ -0,0 +1,77 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/array_encoded.h\"\n+#include \"arrow/array/util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+\n+// ----------------------------------------------------------------------\n+// RunLengthEncodedArray\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<ArrayData>& data) {\n+  ARROW_CHECK_EQ(data->type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(data);\n+}\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<DataType>& type,\n+                                             int64_t length,\n+                                             const std::shared_ptr<Array>& run_ends_array,\n+                                             const std::shared_ptr<Array>& values_array,\n+                                             int64_t offset) {\n+  ARROW_CHECK_EQ(type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(ArrayData::Make(type, length, {NULLPTR}, 0, offset));\n+  data_->child_data.push_back(std::move(run_ends_array->data()));\n+  data_->child_data.push_back(std::move(values_array->data()));\n\nReview Comment:\n   I don't think I have written that down anywhere, so I'll put it here:\r\n   \r\n   Yes having the values buffer(s) in the parent would makes supporting multiple data types more complicated:\r\n   - Each type in arrow has a defined buffer layout, RLE would not. It would have different buffers depending on the type it encodes, i.e. a single values buffer for integer types, typeID+offset for dense union..., but also add a run ends buffer somewhere\r\n   - we could not rely on things like Validate(), unary kernels, array builders, or anything else to work on the values array without modification\r\n   - While in Arrow C++ the parent array has pointer to the exact DataType object, in the format itself an array has only a type ID, RLE in this case. The type of the values would have to be put into the buffers somewhere, making the layout even more complicated\r\n   \r\n   Having the run ends as a buffer in the parent is less bad, but also causes problems:\r\n   - When a buffer is passed over the C bridge, we don't really know it's size (or at least how I understand it). It can be determined either from the length field, or a combination of that and other buffers easily for other types, but not for RLE. The RLE format is designed to allow O(log(n)) random access ,using binary search. For Binary search, we need an upper end, which we conveniently get from the length field of a child array (Yes the whole array needs to be sorted).\r\n   - Also having a child array gives us another type field, which means the format could support RLE arrays with  run ends that are not int32 in the future.\r\n   \r\n   In general I like the idea that a user can simply run any analysis on the run ends and values array on thier own, if they find it useful for some reason. They could always construct an array from the buffers but it just seems less messy with separate arrays.\n\n\n\n",
                    "created": "2022-08-23T01:39:16.462+0000",
                    "updated": "2022-08-23T01:39:16.462+0000",
                    "started": "2022-08-23T01:39:16.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802670",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r952039138\n\n\n##########\ncpp/src/arrow/array/array_encoded_test.cc:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_nested.h\"\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/builder.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// ----------------------------------------------------------------------\n+// Run-length encoded array tests\n+\n+namespace {\n+\n+auto string_values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"World\", null])\");\n+auto int32_values = ArrayFromJSON(int32(), \"[10, 20, 30]\");\n+auto int32_only_null = ArrayFromJSON(int32(), \"[null, null, null]\");\n+\n+TEST(RunLengthEncodedArray, MakeArray) {\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 3));\n+  auto array_data = rle_array->data();\n+  auto new_array = MakeArray(array_data);\n+  ASSERT_ARRAYS_EQUAL(*new_array, *rle_array);\n+  // should be the exact same ArrayData object\n+  ASSERT_EQ(new_array->data(), array_data);\n+  ASSERT_NE(std::dynamic_pointer_cast<RunLengthEncodedArray>(new_array), NULLPTR);\n+}\n+\n+TEST(RunLengthEncodedArray, FromRunEndsAndValues) {\n+  std::shared_ptr<RunLengthEncodedArray> rle_array;\n+\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, int32_values, 3));\n+  ASSERT_EQ(rle_array->length(), 3);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *int32_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 0);\n+  ASSERT_EQ(rle_array->data()->null_count, 0);\n+  // one dummy buffer, since code may assume there is exactly one buffer\n+  ASSERT_EQ(rle_array->data()->buffers.size(), 1);\n\nReview Comment:\n   ```suggestion\r\n     // validity buffer must exist and be empty because each RLE array entries must be valid\r\n     ASSERT_EQ(rle_array->data()->buffers.size(), 1);\r\n     ASSERT_EQ(rle_array->data()->buffers[0], NULLPTR);\r\n   ```\r\n   \r\n   I think this would be easier for newer developers to understand the semantics of the RLE array.\r\n   \r\n   (Also, if this is incorrect then I probably need to re-assess my review so far lol)\n\n\n\n##########\ncpp/src/arrow/array/array_encoded_test.cc:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_nested.h\"\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/builder.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// ----------------------------------------------------------------------\n+// Run-length encoded array tests\n+\n+namespace {\n+\n+auto string_values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"World\", null])\");\n+auto int32_values = ArrayFromJSON(int32(), \"[10, 20, 30]\");\n+auto int32_only_null = ArrayFromJSON(int32(), \"[null, null, null]\");\n+\n+TEST(RunLengthEncodedArray, MakeArray) {\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 3));\n+  auto array_data = rle_array->data();\n+  auto new_array = MakeArray(array_data);\n+  ASSERT_ARRAYS_EQUAL(*new_array, *rle_array);\n+  // should be the exact same ArrayData object\n\nReview Comment:\n   Maybe we should also add a mutation to one array and assert that they're not equal?\r\n   \r\n   If the intent of this test is just to have coverage of MakeArray, then it's probably fine. If we want to be sure that `MakeArray` does a proper copy (which I assume is the intended semantics of `MakeArray`), then the additional mutation and assertion could be useful.\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_run_length_encode.cc:\n##########\n@@ -0,0 +1,393 @@\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+template <typename ArrowType, bool has_validity_buffer>\n+struct EncodeDecodeCommonExec {\n+  using CType = typename ArrowType::c_type;\n+\n+  struct Element {\n+    bool valid;\n+    CType value;\n+\n+    bool operator!=(const Element& other) const {\n+      return valid != other.valid || value != other.value;\n+    }\n+  };\n+\n+  EncodeDecodeCommonExec(KernelContext* kernel_context, const ExecSpan& span,\n+                         ExecResult* result)\n+      : kernel_context{kernel_context},\n+        input_array{span.values[0].array},\n+        exec_result{result} {\n+    ARROW_DCHECK(span.num_values() == 1);\n+  }\n+\n+  Element ReadValue() {\n+    Element result;\n+    if (has_validity_buffer) {\n+      result.valid = bit_util::GetBit(input_validity, read_offset);\n+    } else {\n+      result.valid = true;\n+    }\n+    result.value = (reinterpret_cast<const CType*>(input_values))[read_offset];\n+    return result;\n+  }\n+\n+  void WriteValue(Element element) {\n+    if (has_validity_buffer) {\n+      bit_util::SetBitsTo(output_validity, write_offset, 1, element.valid);\n+    }\n+    (reinterpret_cast<CType*>(output_values))[write_offset] = element.value;\n+  }\n+\n+  KernelContext* kernel_context;\n+  const ArraySpan input_array;\n+  ExecResult* exec_result;\n+  const uint8_t* input_validity;\n+  const void* input_values;\n+  uint8_t* output_validity;\n+  void* output_values;\n+  // read offset is a physical index into the values buffer, including array offsets\n+  int64_t read_offset;\n+  int64_t write_offset;\n+};\n+\n+template <>\n+EncodeDecodeCommonExec<BooleanType, true>::Element\n+EncodeDecodeCommonExec<BooleanType, true>::ReadValue() {\n+  Element result;\n+  result.valid = bit_util::GetBit(input_validity, read_offset);\n+  if (result.valid) {\n+    result.value =\n+        bit_util::GetBit(reinterpret_cast<const uint8_t*>(input_values), read_offset);\n+  }\n+  return result;\n+}\n+\n+template <>\n+EncodeDecodeCommonExec<BooleanType, false>::Element\n+EncodeDecodeCommonExec<BooleanType, false>::ReadValue() {\n+  return {\n+      .valid = true,\n+      .value =\n+          bit_util::GetBit(reinterpret_cast<const uint8_t*>(input_values), read_offset),\n+  };\n+}\n+\n+template <>\n+void EncodeDecodeCommonExec<BooleanType, true>::WriteValue(Element element) {\n+  bit_util::SetBitTo(output_validity, write_offset, element.valid);\n+  if (element.valid) {\n+    bit_util::SetBitTo(reinterpret_cast<uint8_t*>(output_values), write_offset,\n+                       element.value);\n+  }\n+}\n+\n+template <>\n+void EncodeDecodeCommonExec<BooleanType, false>::WriteValue(Element element) {\n+  bit_util::SetBitTo(reinterpret_cast<uint8_t*>(output_values), write_offset,\n+                     element.value);\n+}\n+\n+template <typename ArrowType, bool has_validity_buffer>\n+struct RunLengthEncodeExec\n+    : public EncodeDecodeCommonExec<ArrowType, has_validity_buffer> {\n+  using EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::EncodeDecodeCommonExec;\n+  using typename EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::CType;\n+  using typename EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::Element;\n+\n+  Status Exec() {\n+    ArrayData* output_array_data = this->exec_result->array_data().get();\n+    if (this->input_array.length == 0) {\n+      output_array_data->length = 0;\n+      output_array_data->offset = 0;\n+      output_array_data->buffers = {NULLPTR};\n+      output_array_data->child_data[0] =\n+          ArrayData::Make(this->input_array.type->GetSharedPtr(),\n+                          /*length =*/0,\n+                          /*buffers =*/{NULLPTR, NULLPTR});\n+      return Status::OK();\n+    }\n+    if (this->input_array.length > std::numeric_limits<int32_t>::max()) {\n+      return Status::Invalid(\n+          \"run-length encoded arrays can only have a number of elements that can be \"\n+          \"represented as a 32-bit signed integer\");\n+    }\n+    this->input_validity = this->input_array.buffers[0].data;\n+    this->input_values = this->input_array.buffers[1].data;\n+    int64_t input_offset = this->input_array.offset;\n+\n+    this->read_offset = input_offset;\n+    Element element = this->ReadValue();\n+    int64_t num_values_output = 1;\n+\n+    // calculate input null count by ourselves. The input span likely got sliced by an\n+    // ExecSpanIterator using SetOffset right before this code executes. SetOffset leaves\n+    // the null_count value of the ArraySpan as kUnknownNullCount.\n\nReview Comment:\n   is this because slice doesn't adjust the null count (to reduce overhead)?\n\n\n\n##########\ncpp/src/arrow/array/array_encoded.cc:\n##########\n@@ -0,0 +1,77 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/array_encoded.h\"\n+#include \"arrow/array/util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+\n+// ----------------------------------------------------------------------\n+// RunLengthEncodedArray\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<ArrayData>& data) {\n+  ARROW_CHECK_EQ(data->type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(data);\n+}\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<DataType>& type,\n+                                             int64_t length,\n+                                             const std::shared_ptr<Array>& run_ends_array,\n+                                             const std::shared_ptr<Array>& values_array,\n+                                             int64_t offset) {\n+  ARROW_CHECK_EQ(type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(ArrayData::Make(type, length, {NULLPTR}, 0, offset));\n+  data_->child_data.push_back(std::move(run_ends_array->data()));\n+  data_->child_data.push_back(std::move(values_array->data()));\n\nReview Comment:\n   okay, I think I figured it out, but just to confirm: this approach allows you to keep binary data contiguous (which you need offsets for), which prevents you from reasonably holding run ends and run values in a single ArrayData?\n\n\n\n##########\ncpp/src/arrow/array/array_encoded_test.cc:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_nested.h\"\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/builder.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// ----------------------------------------------------------------------\n+// Run-length encoded array tests\n+\n+namespace {\n+\n+auto string_values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"World\", null])\");\n+auto int32_values = ArrayFromJSON(int32(), \"[10, 20, 30]\");\n+auto int32_only_null = ArrayFromJSON(int32(), \"[null, null, null]\");\n+\n+TEST(RunLengthEncodedArray, MakeArray) {\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 3));\n+  auto array_data = rle_array->data();\n+  auto new_array = MakeArray(array_data);\n+  ASSERT_ARRAYS_EQUAL(*new_array, *rle_array);\n+  // should be the exact same ArrayData object\n+  ASSERT_EQ(new_array->data(), array_data);\n+  ASSERT_NE(std::dynamic_pointer_cast<RunLengthEncodedArray>(new_array), NULLPTR);\n\nReview Comment:\n   I'm not sure if this tests some detailed semantics, but I can't think of a scenario where this fails but the previous assertion would succeed.\r\n   \r\n   If `Make` is `OK` and `MakeArray` returns a pointer to the same data, won't this always succeed?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_run_length_encode.cc:\n##########\n@@ -0,0 +1,393 @@\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+template <typename ArrowType, bool has_validity_buffer>\n+struct EncodeDecodeCommonExec {\n+  using CType = typename ArrowType::c_type;\n+\n+  struct Element {\n+    bool valid;\n+    CType value;\n+\n+    bool operator!=(const Element& other) const {\n+      return valid != other.valid || value != other.value;\n+    }\n+  };\n+\n+  EncodeDecodeCommonExec(KernelContext* kernel_context, const ExecSpan& span,\n+                         ExecResult* result)\n+      : kernel_context{kernel_context},\n+        input_array{span.values[0].array},\n+        exec_result{result} {\n+    ARROW_DCHECK(span.num_values() == 1);\n+  }\n+\n+  Element ReadValue() {\n+    Element result;\n+    if (has_validity_buffer) {\n+      result.valid = bit_util::GetBit(input_validity, read_offset);\n+    } else {\n+      result.valid = true;\n+    }\n+    result.value = (reinterpret_cast<const CType*>(input_values))[read_offset];\n+    return result;\n+  }\n+\n+  void WriteValue(Element element) {\n+    if (has_validity_buffer) {\n+      bit_util::SetBitsTo(output_validity, write_offset, 1, element.valid);\n+    }\n+    (reinterpret_cast<CType*>(output_values))[write_offset] = element.value;\n+  }\n+\n+  KernelContext* kernel_context;\n+  const ArraySpan input_array;\n+  ExecResult* exec_result;\n+  const uint8_t* input_validity;\n+  const void* input_values;\n+  uint8_t* output_validity;\n+  void* output_values;\n+  // read offset is a physical index into the values buffer, including array offsets\n+  int64_t read_offset;\n+  int64_t write_offset;\n+};\n+\n+template <>\n+EncodeDecodeCommonExec<BooleanType, true>::Element\n+EncodeDecodeCommonExec<BooleanType, true>::ReadValue() {\n+  Element result;\n+  result.valid = bit_util::GetBit(input_validity, read_offset);\n+  if (result.valid) {\n+    result.value =\n+        bit_util::GetBit(reinterpret_cast<const uint8_t*>(input_values), read_offset);\n+  }\n+  return result;\n+}\n+\n+template <>\n+EncodeDecodeCommonExec<BooleanType, false>::Element\n+EncodeDecodeCommonExec<BooleanType, false>::ReadValue() {\n+  return {\n+      .valid = true,\n+      .value =\n+          bit_util::GetBit(reinterpret_cast<const uint8_t*>(input_values), read_offset),\n+  };\n+}\n+\n+template <>\n+void EncodeDecodeCommonExec<BooleanType, true>::WriteValue(Element element) {\n+  bit_util::SetBitTo(output_validity, write_offset, element.valid);\n+  if (element.valid) {\n+    bit_util::SetBitTo(reinterpret_cast<uint8_t*>(output_values), write_offset,\n+                       element.value);\n+  }\n+}\n+\n+template <>\n+void EncodeDecodeCommonExec<BooleanType, false>::WriteValue(Element element) {\n+  bit_util::SetBitTo(reinterpret_cast<uint8_t*>(output_values), write_offset,\n+                     element.value);\n+}\n+\n+template <typename ArrowType, bool has_validity_buffer>\n+struct RunLengthEncodeExec\n+    : public EncodeDecodeCommonExec<ArrowType, has_validity_buffer> {\n+  using EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::EncodeDecodeCommonExec;\n+  using typename EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::CType;\n+  using typename EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::Element;\n+\n+  Status Exec() {\n+    ArrayData* output_array_data = this->exec_result->array_data().get();\n\nReview Comment:\n   is `this->exec_result->array_data().get()` guaranteed to be valid/pre-allocated? Looking at `VectorExecutor` and `ScalarExecutor` it does seem so, but I just wanted to confirm.\r\n   \r\n   (I actually have code that assumes it isn't, so I probably should revisit that)\n\n\n\n##########\ncpp/src/arrow/array/array_encoded_test.cc:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_nested.h\"\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/builder.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// ----------------------------------------------------------------------\n+// Run-length encoded array tests\n+\n+namespace {\n+\n+auto string_values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"World\", null])\");\n+auto int32_values = ArrayFromJSON(int32(), \"[10, 20, 30]\");\n+auto int32_only_null = ArrayFromJSON(int32(), \"[null, null, null]\");\n+\n+TEST(RunLengthEncodedArray, MakeArray) {\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 3));\n+  auto array_data = rle_array->data();\n+  auto new_array = MakeArray(array_data);\n+  ASSERT_ARRAYS_EQUAL(*new_array, *rle_array);\n+  // should be the exact same ArrayData object\n+  ASSERT_EQ(new_array->data(), array_data);\n+  ASSERT_NE(std::dynamic_pointer_cast<RunLengthEncodedArray>(new_array), NULLPTR);\n+}\n+\n+TEST(RunLengthEncodedArray, FromRunEndsAndValues) {\n+  std::shared_ptr<RunLengthEncodedArray> rle_array;\n+\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, int32_values, 3));\n+  ASSERT_EQ(rle_array->length(), 3);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *int32_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 0);\n+  ASSERT_EQ(rle_array->data()->null_count, 0);\n+  // one dummy buffer, since code may assume there is exactly one buffer\n+  ASSERT_EQ(rle_array->data()->buffers.size(), 1);\n+\n+  // explicitly passing offset\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 2, 1));\n+  ASSERT_EQ(rle_array->length(), 2);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *string_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 1);\n+  // explicitly access null count variable so it is not calculated automatically\n+  ASSERT_EQ(rle_array->data()->null_count, 0);\n+\n+  ASSERT_RAISES_WITH_MESSAGE(Invalid, \"Invalid: Run ends array must be int32 type\",\n+                             RunLengthEncodedArray::Make(string_values, int32_values, 3));\n+  ASSERT_RAISES_WITH_MESSAGE(\n+      Invalid, \"Invalid: Run ends array cannot contain null values\",\n+      RunLengthEncodedArray::Make(int32_only_null, int32_values, 3));\n+}\n+\n+TEST(RunLengthEncodedArray, OffsetLength) {\n+  auto run_ends = ArrayFromJSON(int32(), \"[100, 200, 300, 400, 500]\");\n+  auto values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"beautiful\", \"world\", \"of\", \"RLE\"])\");\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(run_ends, values, 500));\n+\n+  ASSERT_EQ(rle_array->GetPhysicalLength(), 5);\n+  ASSERT_EQ(rle_array->GetPhysicalOffset(), 0);\n+\n+  auto slice = std::dynamic_pointer_cast<RunLengthEncodedArray>(rle_array->Slice(199, 5));\n+  ASSERT_EQ(slice->GetPhysicalLength(), 2);\n+  ASSERT_EQ(slice->GetPhysicalOffset(), 1);\n+\n+  auto slice2 =\n+      std::dynamic_pointer_cast<RunLengthEncodedArray>(rle_array->Slice(199, 101));\n+  ASSERT_EQ(slice2->GetPhysicalLength(), 2);\n+  ASSERT_EQ(slice2->GetPhysicalOffset(), 1);\n+\n\nReview Comment:\n   I think `slice` and `slice2` expectations are self-explanatory. This one I had to think for a few seconds so I think a comment would be helpful\n\n\n\n##########\ncpp/src/arrow/array/array_encoded_test.cc:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_nested.h\"\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/builder.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// ----------------------------------------------------------------------\n+// Run-length encoded array tests\n+\n+namespace {\n+\n+auto string_values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"World\", null])\");\n+auto int32_values = ArrayFromJSON(int32(), \"[10, 20, 30]\");\n+auto int32_only_null = ArrayFromJSON(int32(), \"[null, null, null]\");\n+\n+TEST(RunLengthEncodedArray, MakeArray) {\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 3));\n+  auto array_data = rle_array->data();\n+  auto new_array = MakeArray(array_data);\n+  ASSERT_ARRAYS_EQUAL(*new_array, *rle_array);\n+  // should be the exact same ArrayData object\n+  ASSERT_EQ(new_array->data(), array_data);\n+  ASSERT_NE(std::dynamic_pointer_cast<RunLengthEncodedArray>(new_array), NULLPTR);\n+}\n+\n+TEST(RunLengthEncodedArray, FromRunEndsAndValues) {\n+  std::shared_ptr<RunLengthEncodedArray> rle_array;\n+\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, int32_values, 3));\n+  ASSERT_EQ(rle_array->length(), 3);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *int32_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 0);\n+  ASSERT_EQ(rle_array->data()->null_count, 0);\n+  // one dummy buffer, since code may assume there is exactly one buffer\n+  ASSERT_EQ(rle_array->data()->buffers.size(), 1);\n+\n+  // explicitly passing offset\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 2, 1));\n+  ASSERT_EQ(rle_array->length(), 2);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *string_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 1);\n+  // explicitly access null count variable so it is not calculated automatically\n\nReview Comment:\n   not sure what `so it is not calculated automatically` means here.\n\n\n\n##########\ncpp/src/arrow/pretty_print.cc:\n##########\n@@ -376,6 +376,10 @@ class ArrayPrinter : public PrettyPrinter {\n     return PrettyPrint(*array.indices(), ChildOptions(true), sink_);\n   }\n \n+  Status Visit(const RunLengthEncodedArray& array) {\n+    return Status::NotImplemented(\"printing run-length encoded array\");\n+  }\n\nReview Comment:\n   I just wanted to check if this is planned for this PR?\n\n\n\n##########\ncpp/src/arrow/array/array_encoded_test.cc:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/builder_nested.h\"\n+#include \"arrow/chunked_array.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/testing/builder.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/checked_cast.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+// ----------------------------------------------------------------------\n+// Run-length encoded array tests\n+\n+namespace {\n+\n+auto string_values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"World\", null])\");\n+auto int32_values = ArrayFromJSON(int32(), \"[10, 20, 30]\");\n+auto int32_only_null = ArrayFromJSON(int32(), \"[null, null, null]\");\n+\n+TEST(RunLengthEncodedArray, MakeArray) {\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 3));\n+  auto array_data = rle_array->data();\n+  auto new_array = MakeArray(array_data);\n+  ASSERT_ARRAYS_EQUAL(*new_array, *rle_array);\n+  // should be the exact same ArrayData object\n+  ASSERT_EQ(new_array->data(), array_data);\n+  ASSERT_NE(std::dynamic_pointer_cast<RunLengthEncodedArray>(new_array), NULLPTR);\n+}\n+\n+TEST(RunLengthEncodedArray, FromRunEndsAndValues) {\n+  std::shared_ptr<RunLengthEncodedArray> rle_array;\n+\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, int32_values, 3));\n+  ASSERT_EQ(rle_array->length(), 3);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *int32_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 0);\n+  ASSERT_EQ(rle_array->data()->null_count, 0);\n+  // one dummy buffer, since code may assume there is exactly one buffer\n+  ASSERT_EQ(rle_array->data()->buffers.size(), 1);\n+\n+  // explicitly passing offset\n+  ASSERT_OK_AND_ASSIGN(rle_array,\n+                       RunLengthEncodedArray::Make(int32_values, string_values, 2, 1));\n+  ASSERT_EQ(rle_array->length(), 2);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->values_array(), *string_values);\n+  ASSERT_ARRAYS_EQUAL(*rle_array->run_ends_array(), *int32_values);\n+  ASSERT_EQ(rle_array->offset(), 1);\n+  // explicitly access null count variable so it is not calculated automatically\n+  ASSERT_EQ(rle_array->data()->null_count, 0);\n+\n+  ASSERT_RAISES_WITH_MESSAGE(Invalid, \"Invalid: Run ends array must be int32 type\",\n+                             RunLengthEncodedArray::Make(string_values, int32_values, 3));\n+  ASSERT_RAISES_WITH_MESSAGE(\n+      Invalid, \"Invalid: Run ends array cannot contain null values\",\n+      RunLengthEncodedArray::Make(int32_only_null, int32_values, 3));\n+}\n+\n+TEST(RunLengthEncodedArray, OffsetLength) {\n+  auto run_ends = ArrayFromJSON(int32(), \"[100, 200, 300, 400, 500]\");\n+  auto values = ArrayFromJSON(utf8(), R\"([\"Hello\", \"beautiful\", \"world\", \"of\", \"RLE\"])\");\n+  ASSERT_OK_AND_ASSIGN(auto rle_array,\n+                       RunLengthEncodedArray::Make(run_ends, values, 500));\n+\n+  ASSERT_EQ(rle_array->GetPhysicalLength(), 5);\n+  ASSERT_EQ(rle_array->GetPhysicalOffset(), 0);\n+\n+  auto slice = std::dynamic_pointer_cast<RunLengthEncodedArray>(rle_array->Slice(199, 5));\n+  ASSERT_EQ(slice->GetPhysicalLength(), 2);\n+  ASSERT_EQ(slice->GetPhysicalOffset(), 1);\n+\n+  auto slice2 =\n+      std::dynamic_pointer_cast<RunLengthEncodedArray>(rle_array->Slice(199, 101));\n+  ASSERT_EQ(slice2->GetPhysicalLength(), 2);\n+  ASSERT_EQ(slice2->GetPhysicalOffset(), 1);\n+\n\nReview Comment:\n   ```suggestion\r\n   \r\n     // run ends are exclusive; a start offset of 400 only captures the run for \"RLE\"\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/kernels/vector_run_length_encode.cc:\n##########\n@@ -0,0 +1,393 @@\n+#include \"arrow/compute/api_vector.h\"\n+#include \"arrow/compute/kernels/common.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+namespace compute {\n+namespace internal {\n+\n+template <typename ArrowType, bool has_validity_buffer>\n+struct EncodeDecodeCommonExec {\n+  using CType = typename ArrowType::c_type;\n+\n+  struct Element {\n+    bool valid;\n+    CType value;\n+\n+    bool operator!=(const Element& other) const {\n+      return valid != other.valid || value != other.value;\n+    }\n+  };\n+\n+  EncodeDecodeCommonExec(KernelContext* kernel_context, const ExecSpan& span,\n+                         ExecResult* result)\n+      : kernel_context{kernel_context},\n+        input_array{span.values[0].array},\n+        exec_result{result} {\n+    ARROW_DCHECK(span.num_values() == 1);\n+  }\n+\n+  Element ReadValue() {\n+    Element result;\n+    if (has_validity_buffer) {\n+      result.valid = bit_util::GetBit(input_validity, read_offset);\n+    } else {\n+      result.valid = true;\n+    }\n+    result.value = (reinterpret_cast<const CType*>(input_values))[read_offset];\n+    return result;\n+  }\n+\n+  void WriteValue(Element element) {\n+    if (has_validity_buffer) {\n+      bit_util::SetBitsTo(output_validity, write_offset, 1, element.valid);\n+    }\n+    (reinterpret_cast<CType*>(output_values))[write_offset] = element.value;\n+  }\n+\n+  KernelContext* kernel_context;\n+  const ArraySpan input_array;\n+  ExecResult* exec_result;\n+  const uint8_t* input_validity;\n+  const void* input_values;\n+  uint8_t* output_validity;\n+  void* output_values;\n+  // read offset is a physical index into the values buffer, including array offsets\n+  int64_t read_offset;\n+  int64_t write_offset;\n+};\n+\n+template <>\n+EncodeDecodeCommonExec<BooleanType, true>::Element\n+EncodeDecodeCommonExec<BooleanType, true>::ReadValue() {\n+  Element result;\n+  result.valid = bit_util::GetBit(input_validity, read_offset);\n+  if (result.valid) {\n+    result.value =\n+        bit_util::GetBit(reinterpret_cast<const uint8_t*>(input_values), read_offset);\n+  }\n+  return result;\n+}\n+\n+template <>\n+EncodeDecodeCommonExec<BooleanType, false>::Element\n+EncodeDecodeCommonExec<BooleanType, false>::ReadValue() {\n+  return {\n+      .valid = true,\n+      .value =\n+          bit_util::GetBit(reinterpret_cast<const uint8_t*>(input_values), read_offset),\n+  };\n+}\n+\n+template <>\n+void EncodeDecodeCommonExec<BooleanType, true>::WriteValue(Element element) {\n+  bit_util::SetBitTo(output_validity, write_offset, element.valid);\n+  if (element.valid) {\n+    bit_util::SetBitTo(reinterpret_cast<uint8_t*>(output_values), write_offset,\n+                       element.value);\n+  }\n+}\n+\n+template <>\n+void EncodeDecodeCommonExec<BooleanType, false>::WriteValue(Element element) {\n+  bit_util::SetBitTo(reinterpret_cast<uint8_t*>(output_values), write_offset,\n+                     element.value);\n+}\n+\n+template <typename ArrowType, bool has_validity_buffer>\n+struct RunLengthEncodeExec\n+    : public EncodeDecodeCommonExec<ArrowType, has_validity_buffer> {\n+  using EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::EncodeDecodeCommonExec;\n+  using typename EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::CType;\n+  using typename EncodeDecodeCommonExec<ArrowType, has_validity_buffer>::Element;\n+\n+  Status Exec() {\n+    ArrayData* output_array_data = this->exec_result->array_data().get();\n+    if (this->input_array.length == 0) {\n+      output_array_data->length = 0;\n+      output_array_data->offset = 0;\n+      output_array_data->buffers = {NULLPTR};\n+      output_array_data->child_data[0] =\n+          ArrayData::Make(this->input_array.type->GetSharedPtr(),\n+                          /*length =*/0,\n+                          /*buffers =*/{NULLPTR, NULLPTR});\n+      return Status::OK();\n+    }\n+    if (this->input_array.length > std::numeric_limits<int32_t>::max()) {\n+      return Status::Invalid(\n+          \"run-length encoded arrays can only have a number of elements that can be \"\n+          \"represented as a 32-bit signed integer\");\n\nReview Comment:\n   ```suggestion\r\n         return Status::Invalid(\"Cannot run-length encode Arrays larger than 2^31 elements\");\r\n   ```\r\n   \r\n   a little bit more concise of an error message\n\n\n\n",
                    "created": "2022-08-23T02:16:54.154+0000",
                    "updated": "2022-08-23T02:16:54.154+0000",
                    "started": "2022-08-23T02:16:54.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802677",
                    "issueId": "13448792"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448792/worklog/802678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "drin commented on code in PR #13330:\nURL: https://github.com/apache/arrow/pull/13330#discussion_r952088812\n\n\n##########\ncpp/src/arrow/array/array_encoded.cc:\n##########\n@@ -0,0 +1,77 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/array/array_encoded.h\"\n+#include \"arrow/array/util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/rle_util.h\"\n+\n+namespace arrow {\n+\n+// ----------------------------------------------------------------------\n+// RunLengthEncodedArray\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<ArrayData>& data) {\n+  ARROW_CHECK_EQ(data->type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(data);\n+}\n+\n+RunLengthEncodedArray::RunLengthEncodedArray(const std::shared_ptr<DataType>& type,\n+                                             int64_t length,\n+                                             const std::shared_ptr<Array>& run_ends_array,\n+                                             const std::shared_ptr<Array>& values_array,\n+                                             int64_t offset) {\n+  ARROW_CHECK_EQ(type->id(), Type::RUN_LENGTH_ENCODED);\n+  SetData(ArrayData::Make(type, length, {NULLPTR}, 0, offset));\n+  data_->child_data.push_back(std::move(run_ends_array->data()));\n+  data_->child_data.push_back(std::move(values_array->data()));\n\nReview Comment:\n   awesome, thanks! I figured out the memory layout as well, so I realized that this approach also allows run values to be a binary type with a contiguous buffer.\n\n\n\n",
                    "created": "2022-08-23T02:20:44.540+0000",
                    "updated": "2022-08-23T02:20:44.540+0000",
                    "started": "2022-08-23T02:20:44.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802678",
                    "issueId": "13448792"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4b217458[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a810ce8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72f3042d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3057a0d7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@734adb8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@341b3cd4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e239416[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@53ffd61d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7104f8b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1c9497df[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e55337f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@73374996[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "2022-06-07 13:10:22.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16772/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-06-07T13:10:22.000+0000",
        "updated": "2022-08-25T23:33:56.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement encode and decode functions for Run-Length encoding",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z130ns:",
        "customfield_12314139": null
    }
}