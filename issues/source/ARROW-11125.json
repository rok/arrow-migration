{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13348980",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980",
    "key": "ARROW-11125",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11125/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/530798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093\n\n\n   This is blocking my work on the nested parquet list writer. I had left out list logical equality due to the M:N nature of lists, which requires iterating over the parent list to create the child null buffer/bitmap.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T18:10:54.254+0000",
                    "updated": "2021-01-04T18:10:54.254+0000",
                    "started": "2021-01-04T18:10:54.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530798",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/530799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#issuecomment-754130073\n\n\n   https://issues.apache.org/jira/browse/ARROW-11125\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T18:11:28.795+0000",
                    "updated": "2021-01-04T18:11:28.795+0000",
                    "started": "2021-01-04T18:11:28.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530799",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/530801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#issuecomment-754131552\n\n\n   @jorgecarleitao @alamb this is in substance ready for review,, I'd like some feedback on the approach if you get the time.\r\n   \r\n   There's a few TODOs that I left for myself, which I'll address in the coming hours.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T18:14:36.377+0000",
                    "updated": "2021-01-04T18:14:36.377+0000",
                    "started": "2021-01-04T18:14:36.377+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530801",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/530855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#issuecomment-754186287\n\n\n   I saw the clippy warning, I'll fix it\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-04T20:01:51.775+0000",
                    "updated": "2021-01-04T20:01:51.775+0000",
                    "started": "2021-01-04T20:01:51.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "530855",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551738974\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -55,21 +56,24 @@ fn equal_values(\n                     temp_lhs.as_ref()\n                 }\n             };\n-            let rhs_merged_nulls = match (rhs_nulls, rhs_values.null_buffer()) {\n-                (None, None) => None,\n-                (None, Some(c)) => Some(c),\n-                (Some(p), None) => Some(p),\n-                (Some(p), Some(c)) => {\n-                    let merged = (p & c).unwrap();\n-                    temp_rhs = Some(merged);\n-                    temp_rhs.as_ref()\n-                }\n-            };\n+            // TODO: this is intentional, looking at which is the better option\n+            let rhs_merged_nulls =\n+                rhs.child_logical_null_buffer(rhs_nulls.cloned(), index);\n\nReview comment:\n       pass `rhs_values` instead of `index` here?\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -136,6 +137,84 @@ impl ArrayData {\n         &self.null_bitmap\n     }\n \n+    /// Computes the logical validity bitmap of the array data using the\n+    /// parent's array data. The parent should be a list or struct, else\n+    /// the logical bitmap of the array is returned unaltered.\n+    ///\n+    /// Parent data is passed along with the parent's logical bitmap, as\n+    /// nested arrays could have a logical bitmap different to the physical\n+    /// one on the `ArrayData`.\n+    ///\n+    /// Safety\n\nReview comment:\n       `# safety` is used for `unsafe`, this is `# Panics`.\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -38,12 +38,13 @@ fn equal_values(\n     len: usize,\n ) -> bool {\n     let mut temp_lhs: Option<Buffer> = None;\n-    let mut temp_rhs: Option<Buffer> = None;\n+    // let mut temp_rhs: Option<Buffer> = None;\n \n     lhs.child_data()\n         .iter()\n         .zip(rhs.child_data())\n-        .all(|(lhs_values, rhs_values)| {\n+        .enumerate()\n\nReview comment:\n       which allows to remove this `enumerate` here.\n\n##########\nFile path: rust/arrow/src/array/equal/primitive.rs\n##########\n@@ -32,7 +36,10 @@ pub(super) fn primitive_equal<T>(\n     let lhs_values = &lhs.buffers()[0].as_slice()[lhs.offset() * byte_width..];\n     let rhs_values = &rhs.buffers()[0].as_slice()[rhs.offset() * byte_width..];\n \n-    if lhs.null_count() == 0 && rhs.null_count() == 0 {\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n\nReview comment:\n       This is even better: if the buffer only has 1s outside of the range, we short-circuit to the fast case. \ud83d\udc4d \n\n##########\nFile path: rust/arrow/src/array/equal/mod.rs\n##########\n@@ -146,118 +146,103 @@ fn equal_values(\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    // compute the nested buffer of the parent and child\n-    // if the array has no parent, the child is computed with itself\n-    #[allow(unused_assignments)]\n-    let mut temp_lhs: Option<Buffer> = None;\n-    #[allow(unused_assignments)]\n-    let mut temp_rhs: Option<Buffer> = None;\n-    let lhs_merged_nulls = match (lhs_nulls, lhs.null_buffer()) {\n-        (None, None) => None,\n-        (None, Some(c)) => Some(c),\n-        (Some(p), None) => Some(p),\n-        (Some(p), Some(c)) => {\n-            let merged = (p & c).unwrap();\n-            temp_lhs = Some(merged);\n-            temp_lhs.as_ref()\n-        }\n-    };\n\nReview comment:\n       I liked this more. A bit more explicit what was happening here.\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -136,6 +137,84 @@ impl ArrayData {\n         &self.null_bitmap\n     }\n \n+    /// Computes the logical validity bitmap of the array data using the\n+    /// parent's array data. The parent should be a list or struct, else\n+    /// the logical bitmap of the array is returned unaltered.\n+    ///\n+    /// Parent data is passed along with the parent's logical bitmap, as\n+    /// nested arrays could have a logical bitmap different to the physical\n+    /// one on the `ArrayData`.\n+    ///\n+    /// Safety\n+    ///\n+    /// As we index into [`ArrayData::child_data`], this function panics if\n+    /// array data is not a nested type, as it will not have child data.\n+    pub fn child_logical_null_buffer(\n\nReview comment:\n       I would have placed this function outside of `impl ArrayData`, add the corresponding arguments, and place it under `equal/` for now. Alternatively, use `pub(crate)` to not make this public.\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -136,6 +137,84 @@ impl ArrayData {\n         &self.null_bitmap\n     }\n \n+    /// Computes the logical validity bitmap of the array data using the\n+    /// parent's array data. The parent should be a list or struct, else\n+    /// the logical bitmap of the array is returned unaltered.\n+    ///\n+    /// Parent data is passed along with the parent's logical bitmap, as\n+    /// nested arrays could have a logical bitmap different to the physical\n+    /// one on the `ArrayData`.\n+    ///\n+    /// Safety\n+    ///\n+    /// As we index into [`ArrayData::child_data`], this function panics if\n+    /// array data is not a nested type, as it will not have child data.\n+    pub fn child_logical_null_buffer(\n+        &self,\n+        logical_null_buffer: Option<Buffer>,\n+        child_index: usize,\n+    ) -> Option<Buffer> {\n+        // This function should only be called when having nested data types.\n+        // However, as a convenience, we return the parent's logical buffer if\n+        // we do not encounter a nested type.\n+        let child_data = self.child_data().get(child_index).unwrap();\n+\n+        // TODO: rationalise this logic, prefer not creating populated bitmaps, use Option matching\n+        // I found taking a Bitmap that's populated to be more convenient, but I was more concerned first\n+        // about accuracy, so I'll explore using Option<&Bitmap> directly.\n+        let parent_bitmap = logical_null_buffer.map(Bitmap::from).unwrap_or_else(|| {\n+            let ceil = bit_util::ceil(self.len(), 8);\n+            Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+        });\n+        let self_null_bitmap = child_data.null_bitmap().clone().unwrap_or_else(|| {\n+            let ceil = bit_util::ceil(child_data.len(), 8);\n+            Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+        });\n+        match self.data_type() {\n+            DataType::List(_) => Some(logical_list_bitmap::<i32>(\n+                self,\n+                parent_bitmap,\n+                self_null_bitmap,\n+            )),\n+            DataType::LargeList(_) => Some(logical_list_bitmap::<i64>(\n+                self,\n+                parent_bitmap,\n+                self_null_bitmap,\n+            )),\n+            DataType::FixedSizeList(_, len) => {\n+                let len = *len as usize;\n+                let array_len = self.len();\n+                let array_offset = self.offset();\n+                let bitmap_len = bit_util::ceil(array_len * len, 8);\n+                let mut buffer =\n+                    MutableBuffer::new(bitmap_len).with_bitset(bitmap_len, false);\n+                let mut null_slice = buffer.as_slice_mut();\n+                (array_offset..array_len + array_offset).for_each(|index| {\n+                    let start = index * len;\n+                    let end = start + len;\n+                    let mask = parent_bitmap.is_set(index);\n+                    (start..end).for_each(|child_index| {\n+                        if mask && self_null_bitmap.is_set(child_index) {\n+                            bit_util::set_bit(&mut null_slice, child_index);\n+                        }\n+                    });\n+                });\n+                Some(buffer.into())\n+            }\n+            DataType::Struct(_) => (&parent_bitmap & &self_null_bitmap)\n+                .ok()\n+                .map(|bitmap| bitmap.bits),\n+            DataType::Union(_) => {\n+                panic!(\"Logical equality not yet implemented for union arrays\")\n\nReview comment:\n       `unimplemented`\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -136,6 +137,84 @@ impl ArrayData {\n         &self.null_bitmap\n     }\n \n+    /// Computes the logical validity bitmap of the array data using the\n+    /// parent's array data. The parent should be a list or struct, else\n+    /// the logical bitmap of the array is returned unaltered.\n+    ///\n+    /// Parent data is passed along with the parent's logical bitmap, as\n+    /// nested arrays could have a logical bitmap different to the physical\n+    /// one on the `ArrayData`.\n+    ///\n+    /// Safety\n+    ///\n+    /// As we index into [`ArrayData::child_data`], this function panics if\n+    /// array data is not a nested type, as it will not have child data.\n+    pub fn child_logical_null_buffer(\n+        &self,\n+        logical_null_buffer: Option<Buffer>,\n+        child_index: usize,\n\nReview comment:\n       I would have pass `&ArrayData` instead of `child_index`. This is available in all instances where this is called.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T06:34:34.862+0000",
                    "updated": "2021-01-05T06:34:34.862+0000",
                    "started": "2021-01-05T06:34:34.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531029",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551739520\n\n\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -136,6 +137,84 @@ impl ArrayData {\n         &self.null_bitmap\n     }\n \n+    /// Computes the logical validity bitmap of the array data using the\n+    /// parent's array data. The parent should be a list or struct, else\n+    /// the logical bitmap of the array is returned unaltered.\n+    ///\n+    /// Parent data is passed along with the parent's logical bitmap, as\n+    /// nested arrays could have a logical bitmap different to the physical\n+    /// one on the `ArrayData`.\n+    ///\n+    /// Safety\n+    ///\n+    /// As we index into [`ArrayData::child_data`], this function panics if\n+    /// array data is not a nested type, as it will not have child data.\n+    pub fn child_logical_null_buffer(\n\nReview comment:\n       I would have placed this function outside of `impl ArrayData`, add the corresponding arguments, and place it under `equal/utils.rs` for now. Alternatively, use `pub(crate)` to not make this public.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T06:34:58.941+0000",
                    "updated": "2021-01-05T06:34:58.941+0000",
                    "started": "2021-01-05T06:34:58.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531030",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551745156\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/mod.rs\n##########\n@@ -146,118 +146,103 @@ fn equal_values(\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    // compute the nested buffer of the parent and child\n-    // if the array has no parent, the child is computed with itself\n-    #[allow(unused_assignments)]\n-    let mut temp_lhs: Option<Buffer> = None;\n-    #[allow(unused_assignments)]\n-    let mut temp_rhs: Option<Buffer> = None;\n-    let lhs_merged_nulls = match (lhs_nulls, lhs.null_buffer()) {\n-        (None, None) => None,\n-        (None, Some(c)) => Some(c),\n-        (Some(p), None) => Some(p),\n-        (Some(p), Some(c)) => {\n-            let merged = (p & c).unwrap();\n-            temp_lhs = Some(merged);\n-            temp_lhs.as_ref()\n-        }\n-    };\n\nReview comment:\n       Interestingly, I found an issue with this while fixing the failing integration tests. See my latest commit https://github.com/apache/arrow/pull/9093/commits/66bb98e240f9ca49a7abe2a00ce83a117a62b426.\r\n   \r\n   I'll follow up with changes for your suggestions.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T06:46:39.015+0000",
                    "updated": "2021-01-05T06:46:39.015+0000",
                    "started": "2021-01-05T06:46:39.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531034",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551746160\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/mod.rs\n##########\n@@ -146,118 +146,103 @@ fn equal_values(\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    // compute the nested buffer of the parent and child\n-    // if the array has no parent, the child is computed with itself\n-    #[allow(unused_assignments)]\n-    let mut temp_lhs: Option<Buffer> = None;\n-    #[allow(unused_assignments)]\n-    let mut temp_rhs: Option<Buffer> = None;\n-    let lhs_merged_nulls = match (lhs_nulls, lhs.null_buffer()) {\n-        (None, None) => None,\n-        (None, Some(c)) => Some(c),\n-        (Some(p), None) => Some(p),\n-        (Some(p), Some(c)) => {\n-            let merged = (p & c).unwrap();\n-            temp_lhs = Some(merged);\n-            temp_lhs.as_ref()\n-        }\n-    };\n\nReview comment:\n       Well, if it does not work it does not work and we scratch it ^_^\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T06:50:00.926+0000",
                    "updated": "2021-01-05T06:50:00.926+0000",
                    "started": "2021-01-05T06:50:00.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531037",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551762193\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -37,39 +37,20 @@ fn equal_values(\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    let mut temp_lhs: Option<Buffer> = None;\n-    let mut temp_rhs: Option<Buffer> = None;\n-\n     lhs.child_data()\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n             // merge the null data\n-            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n\nReview comment:\n       @jorgecarleitao I thought you were referring to this part of the code. I removed the one in `mod.rs` because I found that it was computing a duplicate when dealing with just primitive arrays.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T07:39:31.732+0000",
                    "updated": "2021-01-05T07:39:31.732+0000",
                    "started": "2021-01-05T07:39:31.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531054",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551762894\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/utils.rs\n##########\n@@ -76,3 +80,185 @@ pub(super) fn equal_len(\n ) -> bool {\n     lhs_values[lhs_start..(lhs_start + len)] == rhs_values[rhs_start..(rhs_start + len)]\n }\n+\n+/// Computes the logical validity bitmap of the array data using the\n+/// parent's array data. The parent should be a list or struct, else\n+/// the logical bitmap of the array is returned unaltered.\n+///\n+/// Parent data is passed along with the parent's logical bitmap, as\n+/// nested arrays could have a logical bitmap different to the physical\n+/// one on the `ArrayData`.\n+pub(super) fn child_logical_null_buffer(\n+    parent_data: &ArrayData,\n+    logical_null_buffer: Option<Buffer>,\n\nReview comment:\n       @alamb @jorgecarleitao I wanted to make this `Option<&Buffer>` to avoid cloning, but because I create a `Bitmap` for `parent_bitmap` and `self_null_bitmap` , I have to end up cloning the `&Buffer`. So it's extra work to change the signature, and probably doesn't yield any benefit.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T07:41:26.342+0000",
                    "updated": "2021-01-05T07:41:26.342+0000",
                    "started": "2021-01-05T07:41:26.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531055",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#issuecomment-754464034\n\n\n   Thanks for the review @jorgecarleitao. I've addressed your queries and comments, and cleaned up the TODOs\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T07:42:21.427+0000",
                    "updated": "2021-01-05T07:42:21.427+0000",
                    "started": "2021-01-05T07:42:21.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531056",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551885031\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -132,6 +132,7 @@ async fn parquet_single_nan_schema() {\n }\n \n #[tokio::test]\n+#[ignore = \"Test ignored, will be enabled as part of the nested Parquet reader\"]\n\nReview comment:\n       What happened to this test?  It looks like it used to pass and now it doesn't?\n\n##########\nFile path: rust/arrow/src/array/equal/boolean.rs\n##########\n@@ -15,35 +15,60 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use crate::array::ArrayData;\n+use crate::array::{data::count_nulls, ArrayData};\n+use crate::buffer::Buffer;\n+use crate::util::bit_util::get_bit;\n \n use super::utils::equal_bits;\n \n pub(super) fn boolean_equal(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n     let lhs_values = lhs.buffers()[0].as_slice();\n     let rhs_values = rhs.buffers()[0].as_slice();\n \n-    // TODO: we can do this more efficiently if all values are not-null\n-    (0..len).all(|i| {\n-        let lhs_pos = lhs_start + i;\n-        let rhs_pos = rhs_start + i;\n-        let lhs_is_null = lhs.is_null(lhs_pos);\n-        let rhs_is_null = rhs.is_null(rhs_pos);\n-\n-        lhs_is_null\n-            || (lhs_is_null == rhs_is_null)\n-                && equal_bits(\n-                    lhs_values,\n-                    rhs_values,\n-                    lhs_pos + lhs.offset(),\n-                    rhs_pos + rhs.offset(),\n-                    1,\n-                )\n-    })\n+    let lhs_null_count = count_nulls(lhs_nulls, lhs_start, len);\n+    let rhs_null_count = count_nulls(rhs_nulls, rhs_start, len);\n+\n+    if lhs_null_count == 0 && rhs_null_count == 0 {\n+        (0..len).all(|i| {\n+            let lhs_pos = lhs_start + i;\n+            let rhs_pos = rhs_start + i;\n+\n+            equal_bits(\n+                lhs_values,\n+                rhs_values,\n+                lhs_pos + lhs.offset(),\n+                rhs_pos + rhs.offset(),\n+                1,\n+            )\n+        })\n+    } else {\n+        // get a ref of the null buffer bytes, to use in testing for nullness\n+        let lhs_null_bytes = lhs_nulls.as_ref().unwrap().as_slice();\n\nReview comment:\n       Is it possible for `lhs_nulls == Some(..)` but `rhs_nulls == None` (and visa versa?) Given they are optional arguments I wasn't sure if they would always both be either `None` or `Some`\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -37,39 +37,20 @@ fn equal_values(\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n-    let mut temp_lhs: Option<Buffer> = None;\n-    let mut temp_rhs: Option<Buffer> = None;\n-\n     lhs.child_data()\n         .iter()\n         .zip(rhs.child_data())\n         .all(|(lhs_values, rhs_values)| {\n             // merge the null data\n-            let lhs_merged_nulls = match (lhs_nulls, lhs_values.null_buffer()) {\n\nReview comment:\n       I think the use of `temp_lhs` and `temp_rhs` here is to avoid the `lhs_nulls.cloned()` and `rhs_nulls.cloned()` calls below. \n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -132,6 +132,7 @@ async fn parquet_single_nan_schema() {\n }\n \n #[tokio::test]\n+#[ignore = \"Test ignored, will be enabled as part of the nested Parquet reader\"]\n\nReview comment:\n       When I ran this test locally, it fails with a seemingly non-sensical error\r\n   \r\n   ```\r\n   failures:\r\n   \r\n   ---- parquet_list_columns stdout ----\r\n   thread 'parquet_list_columns' panicked at 'assertion failed: `(left == right)`\r\n     left: `PrimitiveArray<Int64>\r\n   [\r\n     null,\r\n     1,\r\n   ]`,\r\n    right: `PrimitiveArray<Int64>\r\n   [\r\n     null,\r\n     1,\r\n   ]`', datafusion/tests/sql.rs:204:5\r\n   ```\n\n##########\nFile path: rust/arrow/src/array/equal/utils.rs\n##########\n@@ -76,3 +80,185 @@ pub(super) fn equal_len(\n ) -> bool {\n     lhs_values[lhs_start..(lhs_start + len)] == rhs_values[rhs_start..(rhs_start + len)]\n }\n+\n+/// Computes the logical validity bitmap of the array data using the\n+/// parent's array data. The parent should be a list or struct, else\n+/// the logical bitmap of the array is returned unaltered.\n+///\n+/// Parent data is passed along with the parent's logical bitmap, as\n+/// nested arrays could have a logical bitmap different to the physical\n+/// one on the `ArrayData`.\n+pub(super) fn child_logical_null_buffer(\n+    parent_data: &ArrayData,\n+    logical_null_buffer: Option<Buffer>,\n\nReview comment:\n       I think if you changed \r\n   \r\n   ```\r\n       let parent_bitmap = logical_null_buffer.map(Bitmap::from).unwrap_or_else(|| {\r\n   ```\r\n   \r\n   to \r\n   \r\n   ```\r\n       let parent_bitmap = logical_null_buffer.cloned().map(Bitmap::from).unwrap_or_else(|| {\r\n   \r\n   ```\r\n   \r\n   Then the signature could take an `Option<&Buffer>` and the code is cleaner (fewer calls to `.cloned()` outside this function). \r\n   \r\n   But I don't think it has any runtime effect\n\n##########\nFile path: rust/arrow/src/array/equal/list.rs\n##########\n@@ -71,45 +79,94 @@ fn offset_value_equal<T: OffsetSizeTrait>(\n pub(super) fn list_equal<T: OffsetSizeTrait>(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n     let lhs_offsets = lhs.buffer::<T>(0);\n     let rhs_offsets = rhs.buffer::<T>(0);\n \n+    // There is an edge-case where a n-length list that has 0 children, results in panics.\n+    // For example; an array with offsets [0, 0, 0, 0, 0] has 4 slots, but will have\n\nReview comment:\n       I probably am mis understanding but `[0, 0, 0, 0, 0]` has 5 entries but this comment says \"4 slots\"\n\n##########\nFile path: rust/arrow/src/array/equal/utils.rs\n##########\n@@ -76,3 +80,185 @@ pub(super) fn equal_len(\n ) -> bool {\n     lhs_values[lhs_start..(lhs_start + len)] == rhs_values[rhs_start..(rhs_start + len)]\n }\n+\n+/// Computes the logical validity bitmap of the array data using the\n+/// parent's array data. The parent should be a list or struct, else\n+/// the logical bitmap of the array is returned unaltered.\n+///\n+/// Parent data is passed along with the parent's logical bitmap, as\n+/// nested arrays could have a logical bitmap different to the physical\n+/// one on the `ArrayData`.\n+pub(super) fn child_logical_null_buffer(\n+    parent_data: &ArrayData,\n+    logical_null_buffer: Option<Buffer>,\n+    child_data: &ArrayData,\n+) -> Option<Buffer> {\n+    let parent_len = parent_data.len();\n+    let parent_bitmap = logical_null_buffer.map(Bitmap::from).unwrap_or_else(|| {\n+        let ceil = bit_util::ceil(parent_len, 8);\n+        Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+    });\n+    let self_null_bitmap = child_data.null_bitmap().clone().unwrap_or_else(|| {\n+        let ceil = bit_util::ceil(child_data.len(), 8);\n+        Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+    });\n+    match parent_data.data_type() {\n+        DataType::List(_) => Some(logical_list_bitmap::<i32>(\n+            parent_data,\n+            parent_bitmap,\n+            self_null_bitmap,\n+        )),\n+        DataType::LargeList(_) => Some(logical_list_bitmap::<i64>(\n+            parent_data,\n+            parent_bitmap,\n+            self_null_bitmap,\n+        )),\n+        DataType::FixedSizeList(_, len) => {\n+            let len = *len as usize;\n+            let array_offset = parent_data.offset();\n+            let bitmap_len = bit_util::ceil(parent_len * len, 8);\n+            let mut buffer =\n+                MutableBuffer::new(bitmap_len).with_bitset(bitmap_len, false);\n+            let mut null_slice = buffer.as_slice_mut();\n+            (array_offset..parent_len + array_offset).for_each(|index| {\n+                let start = index * len;\n+                let end = start + len;\n+                let mask = parent_bitmap.is_set(index);\n+                (start..end).for_each(|child_index| {\n+                    if mask && self_null_bitmap.is_set(child_index) {\n+                        bit_util::set_bit(&mut null_slice, child_index);\n+                    }\n+                });\n+            });\n+            Some(buffer.into())\n+        }\n+        DataType::Struct(_) => {\n+            // Arrow implementations are free to pad data, which can result in null buffers not\n+            // having the same length.\n+            // Rust bitwise comparisons will return an error if left AND right is performed on\n+            // buffers of different length.\n+            // This might be a valid case during integration testing, where we read Arrow arrays\n+            // from IPC data, which has padding.\n+            //\n+            // We first perform a bitwise comparison, and if there is an error, we revert to a\n+            // slower method that indexes into the buffers one-by-one.\n+            let result = &parent_bitmap & &self_null_bitmap;\n+            if let Ok(bitmap) = result {\n+                return Some(bitmap.bits);\n+            }\n+            // slow path\n+            let array_offset = parent_data.offset();\n+            let mut buffer = MutableBuffer::new_null(parent_len);\n+            let mut null_slice = buffer.as_slice_mut();\n+            (0..parent_len).for_each(|index| {\n+                if parent_bitmap.is_set(index + array_offset)\n+                    && self_null_bitmap.is_set(index + array_offset)\n+                {\n+                    bit_util::set_bit(&mut null_slice, index);\n+                }\n+            });\n+            Some(buffer.into())\n+        }\n+        DataType::Union(_) => {\n+            unimplemented!(\"Logical equality not yet implemented for union arrays\")\n+        }\n+        DataType::Dictionary(_, _) => {\n+            unimplemented!(\"Logical equality not yet implemented for nested dictionaries\")\n+        }\n+        data_type => {\n+            panic!(\"Data type {:?} is not a supported nested type\", data_type)\n+        }\n+    }\n+}\n+\n+// Calculate a list child's logical bitmap/buffer\n\nReview comment:\n       I don't fully understand how lists work  in arrow, but I will take your word for it that it does the right thing and that the tests are accurate. \n\n##########\nFile path: rust/arrow/src/array/equal/list.rs\n##########\n@@ -71,45 +79,94 @@ fn offset_value_equal<T: OffsetSizeTrait>(\n pub(super) fn list_equal<T: OffsetSizeTrait>(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n     let lhs_offsets = lhs.buffer::<T>(0);\n     let rhs_offsets = rhs.buffer::<T>(0);\n \n+    // There is an edge-case where a n-length list that has 0 children, results in panics.\n+    // For example; an array with offsets [0, 0, 0, 0, 0] has 4 slots, but will have\n+    // no valid children.\n+    // Under logical equality, the child null bitmap will be an empty buffer, as there are\n+    // no child values. This causes panics when trying to count set bits.\n+    //\n+    // We caught this by chance from an accidental test-case, but due to the nature of this\n+    // crash only occuring on list equality checks, we are adding a check here, instead of\n+    // on the buffer/bitmap utilities, as a length check would incur a penalty for almost all\n+    // other use-cases.\n+    //\n+    // The solution is to check the number of child values from offsets, and return `true` if\n+    // they = 0. Empty arrays are equal, so this is correct.\n+    //\n+    // It's unlikely that one would create a n-length list array with no values, where n > 0,\n+    // however, one is more likely to slice into a list array and get a region that has 0\n+    // child values.\n+    // The test that triggered this behaviour had [4, 4] as a slice of 1 value slot.\n+    let lhs_child_length = lhs_offsets.get(len).unwrap().to_usize().unwrap()\n\nReview comment:\n       I don't fully understand the need for this check given that `count_nulls` seems to handle a buffer of `None` by returning zero.  \r\n   \r\n   When this code is commented out, however, I see the panic of\r\n   \r\n   ```\r\n   ---- array::equal::tests::test_list_offsets stdout ----\r\n   thread 'array::equal::tests::test_list_offsets' panicked at 'assertion failed: ceil(offset + len, 8) <= buffer.len() * 8', arrow/src/util/bit_chunk_iterator.rs:33:9\r\n   ```\r\n   \r\n   So given that it is covered by tests, \ud83d\udc4d \n\n##########\nFile path: rust/arrow/src/array/equal/utils.rs\n##########\n@@ -76,3 +80,185 @@ pub(super) fn equal_len(\n ) -> bool {\n     lhs_values[lhs_start..(lhs_start + len)] == rhs_values[rhs_start..(rhs_start + len)]\n }\n+\n+/// Computes the logical validity bitmap of the array data using the\n+/// parent's array data. The parent should be a list or struct, else\n+/// the logical bitmap of the array is returned unaltered.\n+///\n+/// Parent data is passed along with the parent's logical bitmap, as\n+/// nested arrays could have a logical bitmap different to the physical\n+/// one on the `ArrayData`.\n+pub(super) fn child_logical_null_buffer(\n+    parent_data: &ArrayData,\n+    logical_null_buffer: Option<Buffer>,\n+    child_data: &ArrayData,\n+) -> Option<Buffer> {\n+    let parent_len = parent_data.len();\n+    let parent_bitmap = logical_null_buffer.map(Bitmap::from).unwrap_or_else(|| {\n+        let ceil = bit_util::ceil(parent_len, 8);\n+        Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+    });\n+    let self_null_bitmap = child_data.null_bitmap().clone().unwrap_or_else(|| {\n+        let ceil = bit_util::ceil(child_data.len(), 8);\n+        Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+    });\n+    match parent_data.data_type() {\n+        DataType::List(_) => Some(logical_list_bitmap::<i32>(\n+            parent_data,\n+            parent_bitmap,\n+            self_null_bitmap,\n+        )),\n+        DataType::LargeList(_) => Some(logical_list_bitmap::<i64>(\n+            parent_data,\n+            parent_bitmap,\n+            self_null_bitmap,\n+        )),\n+        DataType::FixedSizeList(_, len) => {\n+            let len = *len as usize;\n+            let array_offset = parent_data.offset();\n+            let bitmap_len = bit_util::ceil(parent_len * len, 8);\n+            let mut buffer =\n+                MutableBuffer::new(bitmap_len).with_bitset(bitmap_len, false);\n+            let mut null_slice = buffer.as_slice_mut();\n+            (array_offset..parent_len + array_offset).for_each(|index| {\n+                let start = index * len;\n+                let end = start + len;\n+                let mask = parent_bitmap.is_set(index);\n+                (start..end).for_each(|child_index| {\n+                    if mask && self_null_bitmap.is_set(child_index) {\n+                        bit_util::set_bit(&mut null_slice, child_index);\n+                    }\n+                });\n+            });\n+            Some(buffer.into())\n+        }\n+        DataType::Struct(_) => {\n+            // Arrow implementations are free to pad data, which can result in null buffers not\n+            // having the same length.\n+            // Rust bitwise comparisons will return an error if left AND right is performed on\n+            // buffers of different length.\n+            // This might be a valid case during integration testing, where we read Arrow arrays\n+            // from IPC data, which has padding.\n+            //\n+            // We first perform a bitwise comparison, and if there is an error, we revert to a\n\nReview comment:\n       \ud83d\udc4d  for comments.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T12:22:49.661+0000",
                    "updated": "2021-01-05T12:22:49.661+0000",
                    "started": "2021-01-05T12:22:49.661+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531155",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551913784\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/list.rs\n##########\n@@ -71,45 +79,94 @@ fn offset_value_equal<T: OffsetSizeTrait>(\n pub(super) fn list_equal<T: OffsetSizeTrait>(\n     lhs: &ArrayData,\n     rhs: &ArrayData,\n+    lhs_nulls: Option<&Buffer>,\n+    rhs_nulls: Option<&Buffer>,\n     lhs_start: usize,\n     rhs_start: usize,\n     len: usize,\n ) -> bool {\n     let lhs_offsets = lhs.buffer::<T>(0);\n     let rhs_offsets = rhs.buffer::<T>(0);\n \n+    // There is an edge-case where a n-length list that has 0 children, results in panics.\n+    // For example; an array with offsets [0, 0, 0, 0, 0] has 4 slots, but will have\n\nReview comment:\n       Ah yes, that's the offsets for the 4 slots. A list's offsets are always list_length + 1, as they point to the range of values. [0, 2, 3] has 2 slots, with slot 1 being `[1, 2]`, and slot 2 being `[3]`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T12:54:07.754+0000",
                    "updated": "2021-01-05T12:54:07.754+0000",
                    "started": "2021-01-05T12:54:07.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531174",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551915799\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -132,6 +132,7 @@ async fn parquet_single_nan_schema() {\n }\n \n #[tokio::test]\n+#[ignore = \"Test ignored, will be enabled as part of the nested Parquet reader\"]\n\nReview comment:\n       The same test failed at some point on the parquet list-writer branch. I'm not confident that we were reconstructing list arrays correctly from parquet data.\r\n   I'm opting to disable it temporarily, then re-enable it in #8927, as I'd otherwise be duplicating my effort here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T12:58:03.687+0000",
                    "updated": "2021-01-05T12:58:03.687+0000",
                    "started": "2021-01-05T12:58:03.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531180",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551919876\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/utils.rs\n##########\n@@ -76,3 +80,185 @@ pub(super) fn equal_len(\n ) -> bool {\n     lhs_values[lhs_start..(lhs_start + len)] == rhs_values[rhs_start..(rhs_start + len)]\n }\n+\n+/// Computes the logical validity bitmap of the array data using the\n+/// parent's array data. The parent should be a list or struct, else\n+/// the logical bitmap of the array is returned unaltered.\n+///\n+/// Parent data is passed along with the parent's logical bitmap, as\n+/// nested arrays could have a logical bitmap different to the physical\n+/// one on the `ArrayData`.\n+pub(super) fn child_logical_null_buffer(\n+    parent_data: &ArrayData,\n+    logical_null_buffer: Option<Buffer>,\n\nReview comment:\n       I like your approach, better to clone in one place, than various.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T13:06:41.871+0000",
                    "updated": "2021-01-05T13:06:41.871+0000",
                    "started": "2021-01-05T13:06:41.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531184",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093#discussion_r551920615\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/utils.rs\n##########\n@@ -76,3 +80,185 @@ pub(super) fn equal_len(\n ) -> bool {\n     lhs_values[lhs_start..(lhs_start + len)] == rhs_values[rhs_start..(rhs_start + len)]\n }\n+\n+/// Computes the logical validity bitmap of the array data using the\n+/// parent's array data. The parent should be a list or struct, else\n+/// the logical bitmap of the array is returned unaltered.\n+///\n+/// Parent data is passed along with the parent's logical bitmap, as\n+/// nested arrays could have a logical bitmap different to the physical\n+/// one on the `ArrayData`.\n+pub(super) fn child_logical_null_buffer(\n+    parent_data: &ArrayData,\n+    logical_null_buffer: Option<Buffer>,\n+    child_data: &ArrayData,\n+) -> Option<Buffer> {\n+    let parent_len = parent_data.len();\n+    let parent_bitmap = logical_null_buffer.map(Bitmap::from).unwrap_or_else(|| {\n+        let ceil = bit_util::ceil(parent_len, 8);\n+        Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+    });\n+    let self_null_bitmap = child_data.null_bitmap().clone().unwrap_or_else(|| {\n+        let ceil = bit_util::ceil(child_data.len(), 8);\n+        Bitmap::from(Buffer::from(vec![0b11111111; ceil]))\n+    });\n+    match parent_data.data_type() {\n+        DataType::List(_) => Some(logical_list_bitmap::<i32>(\n+            parent_data,\n+            parent_bitmap,\n+            self_null_bitmap,\n+        )),\n+        DataType::LargeList(_) => Some(logical_list_bitmap::<i64>(\n+            parent_data,\n+            parent_bitmap,\n+            self_null_bitmap,\n+        )),\n+        DataType::FixedSizeList(_, len) => {\n+            let len = *len as usize;\n+            let array_offset = parent_data.offset();\n+            let bitmap_len = bit_util::ceil(parent_len * len, 8);\n+            let mut buffer =\n+                MutableBuffer::new(bitmap_len).with_bitset(bitmap_len, false);\n+            let mut null_slice = buffer.as_slice_mut();\n+            (array_offset..parent_len + array_offset).for_each(|index| {\n+                let start = index * len;\n+                let end = start + len;\n+                let mask = parent_bitmap.is_set(index);\n+                (start..end).for_each(|child_index| {\n+                    if mask && self_null_bitmap.is_set(child_index) {\n+                        bit_util::set_bit(&mut null_slice, child_index);\n+                    }\n+                });\n+            });\n+            Some(buffer.into())\n+        }\n+        DataType::Struct(_) => {\n+            // Arrow implementations are free to pad data, which can result in null buffers not\n+            // having the same length.\n+            // Rust bitwise comparisons will return an error if left AND right is performed on\n+            // buffers of different length.\n+            // This might be a valid case during integration testing, where we read Arrow arrays\n+            // from IPC data, which has padding.\n+            //\n+            // We first perform a bitwise comparison, and if there is an error, we revert to a\n+            // slower method that indexes into the buffers one-by-one.\n+            let result = &parent_bitmap & &self_null_bitmap;\n+            if let Ok(bitmap) = result {\n+                return Some(bitmap.bits);\n+            }\n+            // slow path\n+            let array_offset = parent_data.offset();\n+            let mut buffer = MutableBuffer::new_null(parent_len);\n+            let mut null_slice = buffer.as_slice_mut();\n+            (0..parent_len).for_each(|index| {\n+                if parent_bitmap.is_set(index + array_offset)\n+                    && self_null_bitmap.is_set(index + array_offset)\n+                {\n+                    bit_util::set_bit(&mut null_slice, index);\n+                }\n+            });\n+            Some(buffer.into())\n+        }\n+        DataType::Union(_) => {\n+            unimplemented!(\"Logical equality not yet implemented for union arrays\")\n+        }\n+        DataType::Dictionary(_, _) => {\n+            unimplemented!(\"Logical equality not yet implemented for nested dictionaries\")\n+        }\n+        data_type => {\n+            panic!(\"Data type {:?} is not a supported nested type\", data_type)\n+        }\n+    }\n+}\n+\n+// Calculate a list child's logical bitmap/buffer\n\nReview comment:\n       I'm comfortable that I've captured the correct semantics of logical equality for lists; that said, lists have been a thorn on my side for some time now :(\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T13:08:10.375+0000",
                    "updated": "2021-01-05T13:08:10.375+0000",
                    "started": "2021-01-05T13:08:10.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531187",
                    "issueId": "13348980"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/worklog/531423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #9093:\nURL: https://github.com/apache/arrow/pull/9093\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-05T19:14:48.250+0000",
                    "updated": "2021-01-05T19:14:48.250+0000",
                    "started": "2021-01-05T19:14:48.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "531423",
                    "issueId": "13348980"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6ab29d15[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f987a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@715c890a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@d8c7313[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73d92971[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3bd7ae90[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ed67439[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@402c9e1b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a04a5ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7ca13730[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61cbe321[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@45336545[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 05 19:14:46 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-05T19:14:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11125/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-04T18:04:49.000+0000",
        "updated": "2021-01-05T19:14:49.000+0000",
        "timeoriginalestimate": null,
        "description": "We implemented logical equality for struct arrays, but not list arrays.\r\n\r\nThis work is now required for the Parquet nested list writer.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement logical equality for list arrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13348980/comment/17259152",
                    "id": "17259152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 9093\n[https://github.com/apache/arrow/pull/9093]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2021-01-05T19:14:46.387+0000",
                    "updated": "2021-01-05T19:14:46.387+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0m0rk:",
        "customfield_12314139": null
    }
}