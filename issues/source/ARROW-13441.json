{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13391597",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597",
    "key": "ARROW-13441",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=neworld",
            "name": "neworld",
            "key": "neworld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=neworld&avatarId=46652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=neworld&avatarId=46652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=neworld&avatarId=46652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=neworld&avatarId=46652"
            },
            "displayName": "Nate Clark",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=neworld",
            "name": "neworld",
            "key": "neworld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=neworld&avatarId=46652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=neworld&avatarId=46652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=neworld&avatarId=46652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=neworld&avatarId=46652"
            },
            "displayName": "Nate Clark",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=neworld",
            "name": "neworld",
            "key": "neworld",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=neworld&avatarId=46652",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=neworld&avatarId=46652",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=neworld&avatarId=46652",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=neworld&avatarId=46652"
            },
            "displayName": "Nate Clark",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13441/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/627251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world opened a new pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794\n\n\n   When the infering column decoder encounters an empty batch just return an empty array immediatly and do not consider the batch as the first batch.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-23T17:20:48.842+0000",
                    "updated": "2021-07-23T17:20:48.842+0000",
                    "started": "2021-07-23T17:20:48.842+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627251",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/627252",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-885785604\n\n\n   https://issues.apache.org/jira/browse/ARROW-13441\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-23T17:21:14.179+0000",
                    "updated": "2021-07-23T17:21:14.179+0000",
                    "started": "2021-07-23T17:21:14.179+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627252",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/627765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-886728438\n\n\n   > The problem with this approach is that yields column chunks of differing types. You can see this if you add the following test:\r\n   \r\n   Yes that will because the type is unknown, yet. This test seems artificial in that it doesn't follow how the column decoder is actually used. In use all empty record batches get discarded so their type don't actually matter. That is why it works for the csv streaming test I modified to have multiple empty blocks before a block with data.\r\n   \r\n   That test would not work without this change so the change does not make anything better or worse as far as that test goes. I would argue it makes things better because eventually you can get data from the converter.\r\n   \r\n   The only ways I can think to get that test to work would be to allow the API not to have to return a result until the type is known but that is dependent on the read ahead, for csv, to be high enough to actually find data.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T14:00:09.252+0000",
                    "updated": "2021-07-26T14:00:09.252+0000",
                    "started": "2021-07-26T14:00:09.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627765",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/627789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-886756489\n\n\n   > Yes that will because the type is unknown, yet. This test seems artificial in that it doesn't follow how the column decoder is actually used. In use all empty record batches get discarded so their type don't actually matter.\r\n   \r\n   Ah, I see. Can you point me where this happens exactly, though?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T14:32:38.424+0000",
                    "updated": "2021-07-26T14:32:38.424+0000",
                    "started": "2021-07-26T14:32:38.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627789",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/627814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-886799871\n\n\n   > > Yes that will because the type is unknown, yet. This test seems artificial in that it doesn't follow how the column decoder is actually used. In use all empty record batches get discarded so their type don't actually matter.\r\n   > \r\n   > Ah, I see. Can you point me where this happens exactly, though?\r\n   \r\n   For the first block it happens at `StreamingReaderImpl::InitAfterFirstBatch:920-925`. Looking again at this the schema is already captured so that is an issue.\r\n   \r\n   I don't seem to be able to find where it happens other than the first block. I know it use to be in the previous streaming reader, SerialStreamingReader::ReadNextSkippingEmpty. @westonpace was this an intentional change or an accident? Either way this does need a little more work in the csv reader to be able to handle consuming the empty leading blocks and capturing the schema after the first one with data.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T15:24:04.859+0000",
                    "updated": "2021-07-26T15:24:04.859+0000",
                    "started": "2021-07-26T15:24:04.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627814",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/627823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-886812143\n\n\n   > For the first block it happens at StreamingReaderImpl::InitAfterFirstBatch:920-925. Looking again at this the schema is already captured so that is an issue.\r\n   \r\n   That was my impression as well. \r\n   \r\n   In any case, it would be nice to add an explicit StreamingReader test on the C++ side for this.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T15:39:47.025+0000",
                    "updated": "2021-07-26T15:39:47.025+0000",
                    "started": "2021-07-26T15:39:47.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "627823",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/628003",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-887029318\n\n\n   Yes, I removed `SerialStreamingReader::ReadNextSkippingEmpty` semi-intentionally as I thought there could only be one skipped batch.  However, I hadn't realized that the right combinations of skip settings could yield multiple empty parsed blocks so that logic doesn't work.  Filtering in parallel is tricky and rather than solve that I think we can get away with filtering on one of the serial spots.\r\n   \r\n   Here is a commit that adds a filtering utility to the async generators: https://github.com/westonpace/arrow/commit/8d80722a8b8cd304dff8322e96d76dfd75899ea7\r\n   \r\n   I think the cleanest might be to filter empty parsed blocks when looking for the first batch.  This should be safe (as long as you pass in rb_gen and not filtered_rb_gen to use after you got the first batch):\r\n   ```\r\n       auto filtered_rb_gen = MakeFilteredGenerator(rb_gen, std::move(not_empty));\r\n       return filtered_rb_gen().Then([self, rb_gen, max_readahead](const DecodedBlock& first_block) {\r\n         return self->InitAfterFirstBatch(first_block, std::move(rb_gen), max_readahead);\r\n       });\r\n   ```\r\n   Or we could filter empty batches on the other side of the readahead generator.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T21:10:55.753+0000",
                    "updated": "2021-07-26T21:10:55.753+0000",
                    "started": "2021-07-26T21:10:55.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628003",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/628004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace edited a comment on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-887029318\n\n\n   Yes, I removed `SerialStreamingReader::ReadNextSkippingEmpty` semi-intentionally as I thought there could only be one skipped batch.  However, I hadn't realized that the right combinations of skip settings could yield multiple empty parsed blocks so that logic doesn't work.  Filtering in parallel is tricky and rather than solve that I think we can get away with filtering on one of the serial spots.\r\n   \r\n   Here is a commit that adds a filtering utility to the async generators: https://github.com/westonpace/arrow/commit/8d80722a8b8cd304dff8322e96d76dfd75899ea7\r\n   \r\n   I think the cleanest might be to filter empty parsed blocks when looking for the first batch.  This should be safe (as long as you pass in rb_gen and not filtered_rb_gen to use after you got the first batch):\r\n   ```\r\n       auto filtered_rb_gen = MakeFilteredGenerator(rb_gen, std::move(not_empty));\r\n       return filtered_rb_gen().Then([self, rb_gen, max_readahead](const DecodedBlock& first_block) {\r\n         return self->InitAfterFirstBatch(first_block, std::move(rb_gen), max_readahead);\r\n       });\r\n   ```\r\n   Or we could filter empty batches on the other side of the readahead generator but then you'd have to figure out the schema problem.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T21:13:52.277+0000",
                    "updated": "2021-07-26T21:13:52.277+0000",
                    "started": "2021-07-26T21:13:52.277+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628004",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/628041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-887069211\n\n\n   > I think the cleanest might be to filter empty parsed blocks when looking for the first batch. This should be safe (as long as you pass in rb_gen and not filtered_rb_gen to use after you got the first batch):\r\n   \r\n   I did something along these lines in my last update which essentially recursively called InitAfterFirstBatch until either the RecordBatch was null or it had rows. I could probably update that approach to use this new filter if you would prefer that.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-26T22:26:35.984+0000",
                    "updated": "2021-07-26T22:26:35.984+0000",
                    "started": "2021-07-26T22:26:35.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628041",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/628134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r677115339\n\n\n\n##########\nFile path: cpp/src/arrow/csv/column_decoder.cc\n##########\n@@ -198,6 +198,11 @@ Result<std::shared_ptr<Array>> InferringColumnDecoder::RunInference(\n \n Future<std::shared_ptr<Array>> InferringColumnDecoder::Decode(\n     const std::shared_ptr<BlockParser>& parser) {\n+  if (parser->num_rows() == 0) {\n\nReview comment:\n       ```suggestion\r\n     // Note: Care should be taken to discard these batches as the data type will be null\r\n     // and won't match future decoded arrays.\r\n     if (parser->num_rows() == 0) {\r\n   ```\r\n   \r\n   Nit: Not necessary but might help explain to future readers.  Optionally you could also return `nullptr` here so it is clear it is invalid but then that will cause some confusion below between EOF and invalidly parsed batch.  I'll defer to whatever you think is best.\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -901,13 +901,31 @@ class StreamingReaderImpl : public ReaderMixin,\n \n     auto self = shared_from_this();\n     return rb_gen().Then([self, rb_gen, max_readahead](const DecodedBlock& first_block) {\n-      return self->InitAfterFirstBatch(first_block, std::move(rb_gen), max_readahead);\n+      return self->InitFromBlock(first_block, std::move(rb_gen), max_readahead, 0);\n     });\n   }\n \n-  Status InitAfterFirstBatch(const DecodedBlock& first_block,\n-                             AsyncGenerator<DecodedBlock> batch_gen, int max_readahead) {\n-    schema_ = first_block.record_batch->schema();\n+  Future<> InitFromBlock(const DecodedBlock& block,\n+                         AsyncGenerator<DecodedBlock> batch_gen, int max_readahead,\n+                         int64_t prev_bytes_processed) {\n+    if (!block.record_batch) {\n+      // End of file just return null batches\n+      record_batch_gen_ = []() { return std::shared_ptr<RecordBatch>(); };\n\nReview comment:\n       ```suggestion\r\n         record_batch_gen_ = MakeEmptyGenerator<std::shared_ptr<RecordBatch>>();\r\n   ```\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T04:50:11.744+0000",
                    "updated": "2021-07-27T04:50:11.744+0000",
                    "started": "2021-07-27T04:50:11.743+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628134",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/628546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r677556221\n\n\n\n##########\nFile path: cpp/src/arrow/csv/column_decoder.cc\n##########\n@@ -198,6 +198,11 @@ Result<std::shared_ptr<Array>> InferringColumnDecoder::RunInference(\n \n Future<std::shared_ptr<Array>> InferringColumnDecoder::Decode(\n     const std::shared_ptr<BlockParser>& parser) {\n+  if (parser->num_rows() == 0) {\n\nReview comment:\n       I think I'll keep empty array because as you point out nullptr usually indicates EOF and to avoid any dereference issues from the downstream converters which assume no nulls.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T15:20:33.496+0000",
                    "updated": "2021-07-27T15:20:33.496+0000",
                    "started": "2021-07-27T15:20:33.496+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628546",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/631632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r679930283\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader.cc\n##########\n@@ -901,13 +901,31 @@ class StreamingReaderImpl : public ReaderMixin,\n \n     auto self = shared_from_this();\n     return rb_gen().Then([self, rb_gen, max_readahead](const DecodedBlock& first_block) {\n-      return self->InitAfterFirstBatch(first_block, std::move(rb_gen), max_readahead);\n+      return self->InitFromBlock(first_block, std::move(rb_gen), max_readahead, 0);\n     });\n   }\n \n-  Status InitAfterFirstBatch(const DecodedBlock& first_block,\n-                             AsyncGenerator<DecodedBlock> batch_gen, int max_readahead) {\n-    schema_ = first_block.record_batch->schema();\n+  Future<> InitFromBlock(const DecodedBlock& block,\n+                         AsyncGenerator<DecodedBlock> batch_gen, int max_readahead,\n+                         int64_t prev_bytes_processed) {\n+    if (!block.record_batch) {\n+      // End of file just return null batches\n+      record_batch_gen_ = []() { return std::shared_ptr<RecordBatch>(); };\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-30T13:35:50.791+0000",
                    "updated": "2021-07-30T13:35:50.791+0000",
                    "started": "2021-07-30T13:35:50.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "631632",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-904809196\n\n\n   > In any case, it would be nice to add an explicit StreamingReader test on the C++ side for this.\r\n   \r\n   Are the tests I added sufficient?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-24T16:48:21.869+0000",
                    "updated": "2021-08-24T16:48:21.869+0000",
                    "started": "2021-08-24T16:48:21.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641193",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#issuecomment-905130494\n\n\n   Might be good to mention @pitrou with the question to make sure it gets noticed.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T02:35:30.739+0000",
                    "updated": "2021-08-25T02:35:30.739+0000",
                    "started": "2021-08-25T02:35:30.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641463",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r695665572\n\n\n\n##########\nFile path: cpp/src/arrow/csv/reader_test.cc\n##########\n@@ -358,6 +358,44 @@ TEST(StreamingReaderTest, BytesRead) {\n   }\n }\n \n+TEST(StreamingReaderTests, SkipMultipleEmptyBlocksAtStart) {\n+  ASSERT_OK_AND_ASSIGN(auto thread_pool, internal::ThreadPool::Make(1));\n+  auto table_buffer = std::make_shared<Buffer>(\n+      \"aaa,bbb,ccc\\n123,456,789\\n101,112,131\\n415,161,718\\n192,021,222\\n324,252,627\\n\"\n+      \"282,930,313\\n233,343,536\\n\");\n+\n+  auto input = std::make_shared<io::BufferReader>(table_buffer);\n+\n+  auto read_options = ReadOptions::Defaults();\n+  read_options.block_size = 34;\n+  read_options.skip_rows_after_names = 6;\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      auto streaming_reader,\n+      StreamingReader::Make(io::default_io_context(), input, read_options,\n+                            ParseOptions::Defaults(), ConvertOptions::Defaults()));\n+  std::shared_ptr<RecordBatch> batch;\n+  ASSERT_EQ(12, streaming_reader->bytes_read());\n+\n+  // The first batch should have the one and only row in it\n+  ASSERT_OK(streaming_reader->ReadNext(&batch));\n+  ASSERT_NE(nullptr, batch.get());\n+  ASSERT_EQ(1, batch->num_rows());\n+  ASSERT_EQ(96, streaming_reader->bytes_read());\n+\n+  auto schema = streaming_reader->schema();\n+  ASSERT_EQ(3, schema->num_fields());\n+  ASSERT_EQ(\"aaa\", schema->field(0)->name());\n+  ASSERT_EQ(Type::INT64, schema->field(0)->type()->id());\n+  ASSERT_EQ(\"bbb\", schema->field(1)->name());\n+  ASSERT_EQ(Type::INT64, schema->field(1)->type()->id());\n+  ASSERT_EQ(\"ccc\", schema->field(2)->name());\n+  ASSERT_EQ(Type::INT64, schema->field(2)->type()->id());\n+\n\nReview comment:\n       Can you also test the contents of `batch`? You can use `RecordBatchFromJSON` to construct the expected record batch.\n\n##########\nFile path: cpp/src/arrow/csv/reader_test.cc\n##########\n@@ -358,6 +358,44 @@ TEST(StreamingReaderTest, BytesRead) {\n   }\n }\n \n+TEST(StreamingReaderTests, SkipMultipleEmptyBlocksAtStart) {\n+  ASSERT_OK_AND_ASSIGN(auto thread_pool, internal::ThreadPool::Make(1));\n+  auto table_buffer = std::make_shared<Buffer>(\n+      \"aaa,bbb,ccc\\n123,456,789\\n101,112,131\\n415,161,718\\n192,021,222\\n324,252,627\\n\"\n+      \"282,930,313\\n233,343,536\\n\");\n+\n+  auto input = std::make_shared<io::BufferReader>(table_buffer);\n+\n+  auto read_options = ReadOptions::Defaults();\n+  read_options.block_size = 34;\n+  read_options.skip_rows_after_names = 6;\n+\n+  ASSERT_OK_AND_ASSIGN(\n+      auto streaming_reader,\n+      StreamingReader::Make(io::default_io_context(), input, read_options,\n+                            ParseOptions::Defaults(), ConvertOptions::Defaults()));\n+  std::shared_ptr<RecordBatch> batch;\n+  ASSERT_EQ(12, streaming_reader->bytes_read());\n+\n+  // The first batch should have the one and only row in it\n+  ASSERT_OK(streaming_reader->ReadNext(&batch));\n+  ASSERT_NE(nullptr, batch.get());\n+  ASSERT_EQ(1, batch->num_rows());\n+  ASSERT_EQ(96, streaming_reader->bytes_read());\n+\n+  auto schema = streaming_reader->schema();\n+  ASSERT_EQ(3, schema->num_fields());\n+  ASSERT_EQ(\"aaa\", schema->field(0)->name());\n+  ASSERT_EQ(Type::INT64, schema->field(0)->type()->id());\n+  ASSERT_EQ(\"bbb\", schema->field(1)->name());\n+  ASSERT_EQ(Type::INT64, schema->field(1)->type()->id());\n+  ASSERT_EQ(\"ccc\", schema->field(2)->name());\n+  ASSERT_EQ(Type::INT64, schema->field(2)->type()->id());\n\nReview comment:\n       You can construct an expected schema and call `AssertSchemaEqual`.\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -609,28 +489,184 @@ def test_skip_rows_after_names(self):\n             assert (values[opts.skip_rows + opts.skip_rows_after_names:] ==\n                     table_dict[name])\n \n-    def test_header_column_names(self):\n+    def test_row_number_offset_in_errors(self, use_threads):\n+        # Row numbers are only correctly counted in serial reads\n+        def format_msg(msg_format, row, *args):\n+            if use_threads:\n+                row_info = \"\"\n+            else:\n+                row_info = \"Row #{}: \".format(row)\n+            return msg_format.format(row_info, *args)\n+\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 102)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            102, csv)\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        long_row = (b\"this is a long row\" * 15) + b\",3\\r\\n\"\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 102,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test skipping rows after the names\n+        read_options.skip_rows_after_names = 47\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        read_options.skip_rows_after_names = 0\n+\n+        # Test without skip_rows and column names not in the csv\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n+        read_options.column_names = [\"a\", \"b\", \"c\", \"d\"]\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 101)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 101,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            101)\n+        message_value = message_value.format(len(csv))\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test with skip_rows and column names not in the csv\n+        read_options.skip_rows = 23\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+\n+@pytest.mark.parametrize('use_threads', [False, True])\n\nReview comment:\n       Not fond of this reorganization at all. Can't your test fit in the existing structure?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T11:39:24.612+0000",
                    "updated": "2021-08-25T11:39:24.612+0000",
                    "started": "2021-08-25T11:39:24.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641624",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r695731681\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -609,28 +489,184 @@ def test_skip_rows_after_names(self):\n             assert (values[opts.skip_rows + opts.skip_rows_after_names:] ==\n                     table_dict[name])\n \n-    def test_header_column_names(self):\n+    def test_row_number_offset_in_errors(self, use_threads):\n+        # Row numbers are only correctly counted in serial reads\n+        def format_msg(msg_format, row, *args):\n+            if use_threads:\n+                row_info = \"\"\n+            else:\n+                row_info = \"Row #{}: \".format(row)\n+            return msg_format.format(row_info, *args)\n+\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 102)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            102, csv)\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        long_row = (b\"this is a long row\" * 15) + b\",3\\r\\n\"\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 102,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test skipping rows after the names\n+        read_options.skip_rows_after_names = 47\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        read_options.skip_rows_after_names = 0\n+\n+        # Test without skip_rows and column names not in the csv\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n+        read_options.column_names = [\"a\", \"b\", \"c\", \"d\"]\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 101)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 101,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            101)\n+        message_value = message_value.format(len(csv))\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test with skip_rows and column names not in the csv\n+        read_options.skip_rows = 23\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+\n+@pytest.mark.parametrize('use_threads', [False, True])\n\nReview comment:\n       My goal was to unify the test structure of the table and stream tests so that tests can be written once and executed for both readers. I opted to go to the parameter approach because that was recently done for the streaming tests and assumed since that was more recent it was the more desired style. I can revert it back to the inheritance approach instead but that would mean I would want to undo the parameterization that @westonpace recently did on the streaming tests.\r\n   \r\n   It doesn't matter to me which approach is used but it makes it a lot easier if it is the same style for testing the different readers.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T13:05:18.004+0000",
                    "updated": "2021-08-25T13:05:18.004+0000",
                    "started": "2021-08-25T13:05:18.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641672",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r695743700\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -609,28 +489,184 @@ def test_skip_rows_after_names(self):\n             assert (values[opts.skip_rows + opts.skip_rows_after_names:] ==\n                     table_dict[name])\n \n-    def test_header_column_names(self):\n+    def test_row_number_offset_in_errors(self, use_threads):\n+        # Row numbers are only correctly counted in serial reads\n+        def format_msg(msg_format, row, *args):\n+            if use_threads:\n+                row_info = \"\"\n+            else:\n+                row_info = \"Row #{}: \".format(row)\n+            return msg_format.format(row_info, *args)\n+\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 102)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            102, csv)\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        long_row = (b\"this is a long row\" * 15) + b\",3\\r\\n\"\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 102,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test skipping rows after the names\n+        read_options.skip_rows_after_names = 47\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        read_options.skip_rows_after_names = 0\n+\n+        # Test without skip_rows and column names not in the csv\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n+        read_options.column_names = [\"a\", \"b\", \"c\", \"d\"]\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 101)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 101,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            101)\n+        message_value = message_value.format(len(csv))\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test with skip_rows and column names not in the csv\n+        read_options.skip_rows = 23\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+\n+@pytest.mark.parametrize('use_threads', [False, True])\n\nReview comment:\n       Hmm, sorry, that's a bit of an annoyance indeed. Personally, I would rather not have additional `use_threads` arguments in every test function, so I prefer the original subclassing approach.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T13:19:25.349+0000",
                    "updated": "2021-08-25T13:19:25.349+0000",
                    "started": "2021-08-25T13:19:25.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641678",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r695780581\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -609,28 +489,184 @@ def test_skip_rows_after_names(self):\n             assert (values[opts.skip_rows + opts.skip_rows_after_names:] ==\n                     table_dict[name])\n \n-    def test_header_column_names(self):\n+    def test_row_number_offset_in_errors(self, use_threads):\n+        # Row numbers are only correctly counted in serial reads\n+        def format_msg(msg_format, row, *args):\n+            if use_threads:\n+                row_info = \"\"\n+            else:\n+                row_info = \"Row #{}: \".format(row)\n+            return msg_format.format(row_info, *args)\n+\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 102)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            102, csv)\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        long_row = (b\"this is a long row\" * 15) + b\",3\\r\\n\"\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 102,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test skipping rows after the names\n+        read_options.skip_rows_after_names = 47\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        read_options.skip_rows_after_names = 0\n+\n+        # Test without skip_rows and column names not in the csv\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n+        read_options.column_names = [\"a\", \"b\", \"c\", \"d\"]\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 101)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 101,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            101)\n+        message_value = message_value.format(len(csv))\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test with skip_rows and column names not in the csv\n+        read_options.skip_rows = 23\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+\n+@pytest.mark.parametrize('use_threads', [False, True])\n\nReview comment:\n       I do agree that the extra `use_threads` argument is a little annoying for every test. I wish the parameter was passed to the class init rather than the test method then it would only be in one spot.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T13:58:23.184+0000",
                    "updated": "2021-08-25T13:58:23.184+0000",
                    "started": "2021-08-25T13:58:23.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641701",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/641975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r696111634\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -609,28 +489,184 @@ def test_skip_rows_after_names(self):\n             assert (values[opts.skip_rows + opts.skip_rows_after_names:] ==\n                     table_dict[name])\n \n-    def test_header_column_names(self):\n+    def test_row_number_offset_in_errors(self, use_threads):\n+        # Row numbers are only correctly counted in serial reads\n+        def format_msg(msg_format, row, *args):\n+            if use_threads:\n+                row_info = \"\"\n+            else:\n+                row_info = \"Row #{}: \".format(row)\n+            return msg_format.format(row_info, *args)\n+\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 102)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            102, csv)\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        long_row = (b\"this is a long row\" * 15) + b\",3\\r\\n\"\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 102,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test skipping rows after the names\n+        read_options.skip_rows_after_names = 47\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        read_options.skip_rows_after_names = 0\n+\n+        # Test without skip_rows and column names not in the csv\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n+        read_options.column_names = [\"a\", \"b\", \"c\", \"d\"]\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 101)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 101,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            101)\n+        message_value = message_value.format(len(csv))\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test with skip_rows and column names not in the csv\n+        read_options.skip_rows = 23\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+\n+@pytest.mark.parametrize('use_threads', [False, True])\n\nReview comment:\n       Sorry for the trouble.  pytest is obtuse but infinitely configurable.  I've pushed a PR to your branch that should let us keep `use_threads` as a proper pytest parameter but avoid repeating it everywhere.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T21:03:42.004+0000",
                    "updated": "2021-08-25T21:03:42.004+0000",
                    "started": "2021-08-25T21:03:42.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641975",
                    "issueId": "13391597"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/worklog/642343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "n3world commented on a change in pull request #10794:\nURL: https://github.com/apache/arrow/pull/10794#discussion_r696652788\n\n\n\n##########\nFile path: python/pyarrow/tests/test_csv.py\n##########\n@@ -609,28 +489,184 @@ def test_skip_rows_after_names(self):\n             assert (values[opts.skip_rows + opts.skip_rows_after_names:] ==\n                     table_dict[name])\n \n-    def test_header_column_names(self):\n+    def test_row_number_offset_in_errors(self, use_threads):\n+        # Row numbers are only correctly counted in serial reads\n+        def format_msg(msg_format, row, *args):\n+            if use_threads:\n+                row_info = \"\"\n+            else:\n+                row_info = \"Row #{}: \".format(row)\n+            return msg_format.format(row_info, *args)\n+\n+        csv, _ = make_random_csv(4, 100, write_names=True)\n+\n+        read_options = ReadOptions()\n+        read_options.block_size = len(csv) / 3\n+        convert_options = ConvertOptions()\n+        convert_options.column_types = {\"a\": pa.int32()}\n+\n+        # Test without skip_rows and column names in the csv\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 102)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            102, csv)\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        long_row = (b\"this is a long row\" * 15) + b\",3\\r\\n\"\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 102,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test skipping rows after the names\n+        read_options.skip_rows_after_names = 47\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        read_options.skip_rows_after_names = 0\n+\n+        # Test without skip_rows and column names not in the csv\n+        csv, _ = make_random_csv(4, 100, write_names=False)\n+        read_options.column_names = [\"a\", \"b\", \"c\", \"d\"]\n+        csv_bad_columns = csv + b\"1,2\\r\\n\"\n+        message_columns = format_msg(\"{}Expected 4 columns, got 2\", 101)\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_columns_long = csv + long_row\n+        message_long = format_msg(\"{}Expected 4 columns, got 2: {} ...\", 101,\n+                                  long_row[0:96].decode(\"utf-8\"))\n+        with pytest.raises(pa.ArrowInvalid, match=message_long):\n+            self.read_bytes(csv_bad_columns_long, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        csv_bad_type = csv + b\"a,b,c,d\\r\\n\"\n+        message_value = format_msg(\n+            \"In CSV column #0: {}\"\n+            \"CSV conversion error to int32: invalid value 'a'\",\n+            101)\n+        message_value = message_value.format(len(csv))\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        # Test with skip_rows and column names not in the csv\n+        read_options.skip_rows = 23\n+        with pytest.raises(pa.ArrowInvalid, match=message_columns):\n+            self.read_bytes(csv_bad_columns, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+        with pytest.raises(pa.ArrowInvalid, match=message_value):\n+            self.read_bytes(csv_bad_type, use_threads,\n+                            read_options=read_options,\n+                            convert_options=convert_options)\n+\n+\n+@pytest.mark.parametrize('use_threads', [False, True])\n\nReview comment:\n       Thanks for doing that. I merged in your fix and updated the c++ unit tests\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-26T13:53:02.032+0000",
                    "updated": "2021-08-26T13:53:02.032+0000",
                    "started": "2021-08-26T13:53:02.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642343",
                    "issueId": "13391597"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@48ba7129[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a834aff[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ea6ce04[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ed2a99d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a3f59af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@39e707a3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1093875[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3aace788[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1afe3353[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1b25e5b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53a7ac31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e6a816a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 31 17:29:31 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-31T17:29:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13441/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-07-23T17:05:22.000+0000",
        "updated": "2021-09-01T09:15:09.000+0000",
        "timeoriginalestimate": null,
        "description": "The csv streaming reader hardens the schema after the first block is processed. However if the first block does not have any rows then the schema will be hardened with all columns as NAType. This is made worse with the skip_rows_after_names options which will create empty batches until the specified number of rows are skipped.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[CSV] Streaming reader conversion should skip empty blocks",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13391597/comment/17407542",
                    "id": "17407542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10794\n[https://github.com/apache/arrow/pull/10794]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-31T17:29:31.329+0000",
                    "updated": "2021-08-31T17:29:31.329+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ta5k:",
        "customfield_12314139": null
    }
}