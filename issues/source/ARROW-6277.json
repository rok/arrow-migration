{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13251292",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292",
    "key": "ARROW-6277",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6277/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 35,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/315206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5441: ARROW-6277: [C++] Support direct write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T17:46:00.141+0000",
                    "updated": "2019-09-19T17:46:00.141+0000",
                    "started": "2019-09-19T17:46:00.141+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315206",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/315357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r326420207\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -570,9 +609,57 @@ inline void DictEncoderImpl<FLBAType>::Put(const FixedLenByteArray& v) {\n   buffered_indices_.push_back(memo_index);\n }\n \n+template <>\n+void DictEncoderImpl<Int96Type>::Put(const arrow::Array& values) {\n+  ParquetException::NYI(values.type()->ToString());\n+}\n+\n+template <>\n+void DictEncoderImpl<Int96Type>::PutDictionary(const arrow::Array& values) {\n+  ParquetException::NYI(values.type()->ToString());\n+}\n+\n template <typename DType>\n void DictEncoderImpl<DType>::Put(const arrow::Array& values) {\n-  ParquetException::NYI(values.type()->ToString());\n+  using ArrayType = typename arrow::CTypeTraits<typename DType::c_type>::ArrayType;\n+  // FIXME(bkietz) assert appropriate type?\n+  const auto& data = checked_cast<const ArrayType&>(values);\n+  if (data.null_count() == 0) {\n+    // no nulls, just dump the data\n+    for (int64_t i = 0; i < data.length(); i++) {\n+      Put(data.Value(i));\n+    }\n+  } else {\n+    std::vector<uint8_t> empty(type_length_, 0);\n+    for (int64_t i = 0; i < data.length(); i++) {\n+      if (data.IsValid(i)) {\n+        Put(data.Value(i));\n+      } else {\n+        Put(0);\n+      }\n+    }\n+  }\n+}\n+\n+template <>\n+void DictEncoderImpl<FLBAType>::Put(const arrow::Array& values) {\n+  AssertFixedSizeBinary(values);\n+  const auto& data = checked_cast<const arrow::FixedSizeBinaryArray&>(values);\n+  if (data.null_count() == 0) {\n+    // no nulls, just dump the data\n+    for (int64_t i = 0; i < data.length(); i++) {\n+      Put(FixedLenByteArray(data.Value(i)));\n+    }\n+  } else {\n+    std::vector<uint8_t> empty(type_length_, 0);\n+    for (int64_t i = 0; i < data.length(); i++) {\n+      if (data.IsValid(i)) {\n+        Put(FixedLenByteArray(data.Value(i)));\n+      } else {\n+        Put(FixedLenByteArray(empty.data()));\n \n Review comment:\n   Don't think this is right\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T23:25:56.211+0000",
                    "updated": "2019-09-19T23:25:56.211+0000",
                    "started": "2019-09-19T23:25:56.211+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315357",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/315358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r326419960\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -570,9 +609,57 @@ inline void DictEncoderImpl<FLBAType>::Put(const FixedLenByteArray& v) {\n   buffered_indices_.push_back(memo_index);\n }\n \n+template <>\n+void DictEncoderImpl<Int96Type>::Put(const arrow::Array& values) {\n+  ParquetException::NYI(values.type()->ToString());\n+}\n+\n+template <>\n+void DictEncoderImpl<Int96Type>::PutDictionary(const arrow::Array& values) {\n+  ParquetException::NYI(values.type()->ToString());\n+}\n+\n template <typename DType>\n void DictEncoderImpl<DType>::Put(const arrow::Array& values) {\n-  ParquetException::NYI(values.type()->ToString());\n+  using ArrayType = typename arrow::CTypeTraits<typename DType::c_type>::ArrayType;\n+  // FIXME(bkietz) assert appropriate type?\n \n Review comment:\n   Since the use of this is internal and not a public API it's not that important\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T23:25:56.258+0000",
                    "updated": "2019-09-19T23:25:56.258+0000",
                    "started": "2019-09-19T23:25:56.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315358",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/315359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r326420081\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -570,9 +609,57 @@ inline void DictEncoderImpl<FLBAType>::Put(const FixedLenByteArray& v) {\n   buffered_indices_.push_back(memo_index);\n }\n \n+template <>\n+void DictEncoderImpl<Int96Type>::Put(const arrow::Array& values) {\n+  ParquetException::NYI(values.type()->ToString());\n+}\n+\n+template <>\n+void DictEncoderImpl<Int96Type>::PutDictionary(const arrow::Array& values) {\n+  ParquetException::NYI(values.type()->ToString());\n+}\n+\n template <typename DType>\n void DictEncoderImpl<DType>::Put(const arrow::Array& values) {\n-  ParquetException::NYI(values.type()->ToString());\n+  using ArrayType = typename arrow::CTypeTraits<typename DType::c_type>::ArrayType;\n+  // FIXME(bkietz) assert appropriate type?\n+  const auto& data = checked_cast<const ArrayType&>(values);\n+  if (data.null_count() == 0) {\n+    // no nulls, just dump the data\n+    for (int64_t i = 0; i < data.length(); i++) {\n+      Put(data.Value(i));\n+    }\n+  } else {\n+    std::vector<uint8_t> empty(type_length_, 0);\n+    for (int64_t i = 0; i < data.length(); i++) {\n+      if (data.IsValid(i)) {\n+        Put(data.Value(i));\n+      } else {\n+        Put(0);\n \n Review comment:\n   I'm not sure this is right\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T23:25:56.280+0000",
                    "updated": "2019-09-19T23:25:56.280+0000",
                    "started": "2019-09-19T23:25:56.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315359",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/315366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#issuecomment-533347343\n \n \n   Based on local checks this patch isn't strictly necessary for 0.15.0\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T23:37:46.517+0000",
                    "updated": "2019-09-19T23:37:46.517+0000",
                    "started": "2019-09-19T23:37:46.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315366",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/315367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#issuecomment-533347343\n \n \n   Based on local checks this patch isn't strictly necessary for 0.15.0 (but we might as well merge it if the unit test coverage is adequate in time)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-19T23:38:05.095+0000",
                    "updated": "2019-09-19T23:38:05.095+0000",
                    "started": "2019-09-19T23:38:05.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "315367",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/317965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#issuecomment-534809095\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=h1) Report\n   > Merging [#5441](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/06dc8632d8310fd63af244adb832a8576f2881ed?src=pr&el=desc) will **decrease** coverage by `0.56%`.\n   > The diff coverage is `82.96%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5441/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5441      +/-   ##\n   ==========================================\n   - Coverage   89.69%   89.13%   -0.57%     \n   ==========================================\n     Files         810      768      -42     \n     Lines      114853   113429    -1424     \n     Branches     1498        0    -1498     \n   ==========================================\n   - Hits       103021   101108    -1913     \n   - Misses      11821    12321     +500     \n   + Partials       11        0      -11\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/column\\_reader.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9yZWFkZXIuY2M=) | `88.87% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/encoding\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2VuY29kaW5nX3Rlc3QuY2M=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/util/ubsan.h](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3Vic2FuLmg=) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/encoding.h](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2VuY29kaW5nLmg=) | `69.56% <18.75%> (-27.5%)` | :arrow_down: |\n   | [cpp/src/parquet/encoding.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2VuY29kaW5nLmNj) | `89.76% <80.47%> (-1.94%)` | :arrow_down: |\n   | [cpp/src/arrow/ipc/metadata\\_internal.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvbWV0YWRhdGFfaW50ZXJuYWwuY2M=) | `83.76% <0%> (-4.28%)` | :arrow_down: |\n   | [cpp/src/parquet/arrow/schema.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3NjaGVtYS5jYw==) | `90.37% <0%> (-3.55%)` | :arrow_down: |\n   | [cpp/src/parquet/arrow/writer.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3dyaXRlci5jYw==) | `91.13% <0%> (-3.33%)` | :arrow_down: |\n   | [cpp/src/parquet/arrow/reader\\_internal.cc](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3JlYWRlcl9pbnRlcm5hbC5jYw==) | `88.49% <0%> (-3.32%)` | :arrow_down: |\n   | ... and [173 more](https://codecov.io/gh/apache/arrow/pull/5441/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=footer). Last update [06dc863...6db2946](https://codecov.io/gh/apache/arrow/pull/5441?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T01:17:25.697+0000",
                    "updated": "2019-09-25T01:17:25.697+0000",
                    "started": "2019-09-25T01:17:25.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317965",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#issuecomment-538091872\n \n \n   Taking another look at this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T19:32:31.994+0000",
                    "updated": "2019-10-03T19:32:31.994+0000",
                    "started": "2019-10-03T19:32:31.993+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322881",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331243627\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -597,7 +757,44 @@ void DictEncoderImpl<ByteArrayType>::Put(const arrow::Array& values) {\n \n template <typename DType>\n void DictEncoderImpl<DType>::PutDictionary(const arrow::Array& values) {\n-  ParquetException::NYI(values.type()->ToString());\n+  if (this->num_entries() > 0) {\n+    throw ParquetException(\"Can only call PutDictionary on an empty DictEncoder\");\n+  }\n+\n+  using ArrayType = typename arrow::CTypeTraits<typename DType::c_type>::ArrayType;\n+  const auto& data = checked_cast<const ArrayType&>(values);\n+  if (data.null_count() > 0) {\n+    throw ParquetException(\"Inserted dictionary cannot cannot contain nulls\");\n+  }\n+\n+  dict_encoded_size_ += static_cast<int>(sizeof(typename DType::c_type) * data.length());\n+  for (int64_t i = 0; i < data.length(); i++) {\n+    ARROW_IGNORE_EXPR(\n+        memo_table_.GetOrInsert(data.Value(i),\n+                                /*on_found=*/[](int32_t memo_index) {},\n+                                /*on_not_found=*/[](int32_t memo_index) {}));\n+  }\n+}\n+\n+template <>\n+void DictEncoderImpl<FLBAType>::PutDictionary(const arrow::Array& values) {\n+  AssertFixedSizeBinary(values, type_length_);\n+  if (this->num_entries() > 0) {\n+    throw ParquetException(\"Can only call PutDictionary on an empty DictEncoder\");\n+  }\n+\n+  const auto& data = checked_cast<const arrow::FixedSizeBinaryArray&>(values);\n+  if (data.null_count() > 0) {\n+    throw ParquetException(\"Inserted dictionary cannot cannot contain nulls\");\n+  }\n \n Review comment:\n   It's a bit of a bummer to have these assertions duplicated, but it can always be cleaned up later\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:52:59.406+0000",
                    "updated": "2019-10-03T20:52:59.406+0000",
                    "started": "2019-10-03T20:52:59.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322951",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331244644\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -1232,6 +1542,79 @@ inline void DictDecoderImpl<FLBAType>::SetDict(TypedDecoder<FLBAType>* dictionar\n   }\n }\n \n+template <>\n+int DictDecoderImpl<Int96Type>::DecodeArrow(\n+    int num_values, int null_count, const uint8_t* valid_bits, int64_t valid_bits_offset,\n+    typename EncodingTraits<Int96Type>::Accumulator* builder) {\n+  ParquetException::NYI(\"DecodeArrow to Int96Type\");\n+}\n+\n+template <>\n+int DictDecoderImpl<ByteArrayType>::DecodeArrow(\n+    int num_values, int null_count, const uint8_t* valid_bits, int64_t valid_bits_offset,\n+    typename EncodingTraits<ByteArrayType>::Accumulator* builder) {\n+  ParquetException::NYI(\"DecodeArrow implemented elsewhere\");\n+}\n+\n+template <>\n+int DictDecoderImpl<FLBAType>::DecodeArrow(\n+    int num_values, int null_count, const uint8_t* valid_bits, int64_t valid_bits_offset,\n+    typename EncodingTraits<FLBAType>::Accumulator* builder) {\n+  if (builder->byte_width() != descr_->type_length()) {\n+    throw ParquetException(\"Byte width mismatch: builder was \" +\n+                           std::to_string(builder->byte_width()) + \" but decoder was \" +\n+                           std::to_string(descr_->type_length()));\n+  }\n+\n+  PARQUET_THROW_NOT_OK(builder->Reserve(num_values));\n+  arrow::internal::BitmapReader bit_reader(valid_bits, valid_bits_offset, num_values);\n+\n+  auto dict_values = reinterpret_cast<const FLBA*>(dictionary_->data());\n+\n+  for (int i = 0; i < num_values; ++i) {\n+    bool is_valid = bit_reader.IsSet();\n+    bit_reader.Next();\n+    if (is_valid) {\n+      int32_t index;\n+      if (ARROW_PREDICT_FALSE(!idx_decoder_.Get(&index))) {\n+        throw ParquetException(\"\");\n+      }\n+      builder->UnsafeAppend(dict_values[index].ptr);\n+    } else {\n+      builder->UnsafeAppendNull();\n+    }\n+  }\n \n Review comment:\n   The code similarity between this and the generic one below (save for the `.ptr`) is a nuisance\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:52:59.617+0000",
                    "updated": "2019-10-03T20:52:59.617+0000",
                    "started": "2019-10-03T20:52:59.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322952",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331245193\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.h\n ##########\n @@ -168,6 +300,40 @@ class TypedDecoder : virtual public Decoder {\n     }\n     return num_values;\n   }\n+\n+  /// \\brief Decode into an ArrayBuilder or other accumulator\n+  ///\n+  /// \\return number of values decoded\n+  virtual int DecodeArrow(int num_values, int null_count, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset,\n+                          typename EncodingTraits<DType>::Accumulator* out) = 0;\n+\n+  /// \\brief Decode into an ArrayBuilder or other accumulator ignoring nulls\n+  ///\n+  /// \\return number of values decoded\n+  virtual int DecodeArrowNonNull(int num_values,\n+                                 typename EncodingTraits<DType>::Accumulator* out) {\n+    const uint8_t valid_bits = 0;\n+    return DecodeArrow(num_values, 0, &valid_bits, 0, out);\n+  }\n+\n+  /// \\brief Decode into a DictionaryBuilder\n+  ///\n+  /// \\return number of values decoded\n+  virtual int DecodeArrow(int num_values, int null_count, const uint8_t* valid_bits,\n+                          int64_t valid_bits_offset,\n+                          typename EncodingTraits<DType>::DictAccumulator* builder) {\n+    ParquetException::NYI(\"FIXME\");\n+  }\n \n Review comment:\n   ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:52:59.872+0000",
                    "updated": "2019-10-03T20:52:59.872+0000",
                    "started": "2019-10-03T20:52:59.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322953",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331240882\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -43,6 +44,11 @@ using arrow::internal::checked_cast;\n \n namespace parquet {\n \n+template <typename StatusReturnBlock>\n+void ThrowNotOk(StatusReturnBlock&& b) {\n+  PARQUET_THROW_NOT_OK(b());\n+}\n \n Review comment:\n   Might be worth moving this to some reusable place at some point\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:52:59.875+0000",
                    "updated": "2019-10-03T20:52:59.875+0000",
                    "started": "2019-10-03T20:52:59.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322954",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331244155\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.cc\n ##########\n @@ -805,6 +1047,32 @@ void PlainBooleanDecoder::SetData(int num_values, const uint8_t* data, int len)\n   bit_reader_.reset(new BitUtil::BitReader(data, len));\n }\n \n+int PlainBooleanDecoder::DecodeArrow(\n+    int num_values, int null_count, const uint8_t* valid_bits, int64_t valid_bits_offset,\n+    typename EncodingTraits<BooleanType>::Accumulator* builder) {\n+  int values_decoded = num_values - null_count;\n+  if (ARROW_PREDICT_FALSE(num_values_ < values_decoded)) {\n+    ParquetException::EofException();\n+  }\n+\n+  PARQUET_THROW_NOT_OK(builder->Reserve(num_values));\n+\n+  arrow::internal::BitmapReader valid_reader(valid_bits, valid_bits_offset, num_values);\n+  for (int i = 0; i < num_values; ++i) {\n+    if (valid_reader.IsSet()) {\n+      bool value;\n+      (void)bit_reader_->GetValue(1, &value);\n \n Review comment:\n   ARROW_UNUSED could also be used\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:53:00.201+0000",
                    "updated": "2019-10-03T20:53:00.201+0000",
                    "started": "2019-10-03T20:53:00.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322955",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331245399\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.h\n ##########\n @@ -356,7 +425,8 @@ std::unique_ptr<typename EncodingTraits<DType>::Decoder> MakeTypedDecoder(\n     Encoding::type encoding, const ColumnDescriptor* descr = NULLPTR) {\n   using OutType = typename EncodingTraits<DType>::Decoder;\n   std::unique_ptr<Decoder> base = MakeDecoder(DType::type_num, encoding, descr);\n-  return std::unique_ptr<OutType>(dynamic_cast<OutType*>(base.release()));\n+  auto out = dynamic_cast<OutType*>(base.release());\n+  return std::unique_ptr<OutType>(out);\n \n Review comment:\n   Curious what motivated this change. Readability?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:53:00.203+0000",
                    "updated": "2019-10-03T20:53:00.203+0000",
                    "started": "2019-10-03T20:53:00.203+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322956",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331246963\n \n \n\n ##########\n File path: cpp/src/parquet/encoding_test.cc\n ##########\n @@ -540,8 +538,203 @@ void GetBinaryDictDecoder(DictEncoder<ByteArrayType>* encoder, int64_t num_value\n \n   *out_values = buf;\n   *out_dict = dict_buf;\n-  *out_decoder = std::unique_ptr<ByteArrayDecoder>(\n-      dynamic_cast<ByteArrayDecoder*>(decoder.release()));\n+  ASSERT_NE(decoder, nullptr);\n+  auto released = dynamic_cast<TypedDecoder<T>*>(decoder.release());\n+  ASSERT_NE(released, nullptr);\n+  *out_decoder = std::unique_ptr<TypedDecoder<T>>(released);\n+}\n+\n+template <typename Pair = void>\n+class EncodingAdHocTyped {\n+ public:\n+  using Types = ::testing::Types<std::pair<::arrow::BooleanType, BooleanType>,\n+                                 std::pair<::arrow::Int32Type, Int32Type>,\n+                                 std::pair<::arrow::Int64Type, Int64Type>,\n+                                 std::pair<::arrow::FloatType, FloatType>,\n+                                 std::pair<::arrow::DoubleType, DoubleType>,\n+                                 std::pair<::arrow::FixedSizeBinaryType, FLBAType>>;\n+};\n+\n+template <typename ArrowType, typename ParquetType>\n+class EncodingAdHocTyped<std::pair<ArrowType, ParquetType>> : public ::testing::Test {\n+ public:\n+  using EncoderType = typename EncodingTraits<ParquetType>::Encoder;\n+  using DecoderType = typename EncodingTraits<ParquetType>::Decoder;\n+  using BuilderType = typename EncodingTraits<ParquetType>::Accumulator;\n+  using DictBuilderType = typename EncodingTraits<ParquetType>::DictAccumulator;\n+\n+  static const ColumnDescriptor* column_descr() {\n+    static auto column_descr = ExampleDescr<ParquetType>();\n+    return column_descr.get();\n+  }\n+\n+  std::shared_ptr<arrow::Array> GetValues(int seed);\n+\n+  static std::shared_ptr<arrow::DataType> arrow_type();\n+\n+  void Plain(int seed) {\n+    auto values = GetValues(seed);\n+    auto encoder = MakeTypedEncoder<ParquetType>(\n+        Encoding::PLAIN, /*use_dictionary=*/false, column_descr());\n+    auto decoder = MakeTypedDecoder<ParquetType>(Encoding::PLAIN, column_descr());\n+\n+    ASSERT_NO_THROW(encoder->Put(*values));\n+    auto buf = encoder->FlushValues();\n+\n+    int num_values = static_cast<int>(values->length() - values->null_count());\n+    decoder->SetData(num_values, buf->data(), static_cast<int>(buf->size()));\n+\n+    BuilderType acc(arrow_type(), arrow::default_memory_pool());\n+    ASSERT_EQ(num_values,\n+              decoder->DecodeArrow(static_cast<int>(values->length()),\n+                                   static_cast<int>(values->null_count()),\n+                                   values->null_bitmap_data(), values->offset(), &acc));\n+\n+    std::shared_ptr<::arrow::Array> result;\n+    ASSERT_OK(acc.Finish(&result));\n+    ASSERT_EQ(50, result->length());\n+    arrow::AssertArraysEqual(*values, *result);\n+  }\n+\n+  void Dict(int seed) {\n+    if (std::is_same<ParquetType, BooleanType>::value) {\n+      return;\n+    }\n+\n+    auto values = GetValues(seed);\n+\n+    auto owned_encoder =\n+        MakeTypedEncoder<ParquetType>(Encoding::PLAIN,\n+                                      /*use_dictionary=*/true, column_descr());\n+    auto encoder = dynamic_cast<DictEncoder<ParquetType>*>(owned_encoder.get());\n+\n+    ASSERT_NO_THROW(encoder->Put(*values));\n+\n+    std::shared_ptr<Buffer> buf, dict_buf;\n+    int num_values = static_cast<int>(values->length() - values->null_count());\n+\n+    std::unique_ptr<TypedDecoder<ParquetType>> decoder;\n+    GetDictDecoder(encoder, num_values, &buf, &dict_buf, column_descr(), &decoder);\n+\n+    BuilderType acc(arrow_type(), arrow::default_memory_pool());\n+    ASSERT_EQ(num_values,\n+              decoder->DecodeArrow(static_cast<int>(values->length()),\n+                                   static_cast<int>(values->null_count()),\n+                                   values->null_bitmap_data(), values->offset(), &acc));\n+\n+    std::shared_ptr<::arrow::Array> result;\n+    ASSERT_OK(acc.Finish(&result));\n+    arrow::AssertArraysEqual(*values, *result);\n+  }\n+\n+  void DictPutIndices() {\n+    if (std::is_same<ParquetType, BooleanType>::value) {\n+      return;\n+    }\n+\n+    /*\n+    auto dict_values =\n+        arrow::ArrayFromJSON(arrow::binary(), \"[\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]\");\n+\n+    auto expected = arrow::ArrayFromJSON(arrow::binary(),\n+                                         \"[\\\"foo\\\", \\\"bar\\\", \\\"baz\\\", null, \"\n+                                         \"\\\"foo\\\", \\\"bar\\\", null, \\\"baz\\\"]\");\n+                                         */\n \n Review comment:\n   Cruft or...?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:53:00.241+0000",
                    "updated": "2019-10-03T20:53:00.241+0000",
                    "started": "2019-10-03T20:53:00.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322957",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331246346\n \n \n\n ##########\n File path: cpp/src/parquet/encoding_test.cc\n ##########\n @@ -540,8 +538,203 @@ void GetBinaryDictDecoder(DictEncoder<ByteArrayType>* encoder, int64_t num_value\n \n   *out_values = buf;\n   *out_dict = dict_buf;\n-  *out_decoder = std::unique_ptr<ByteArrayDecoder>(\n-      dynamic_cast<ByteArrayDecoder*>(decoder.release()));\n+  ASSERT_NE(decoder, nullptr);\n+  auto released = dynamic_cast<TypedDecoder<T>*>(decoder.release());\n+  ASSERT_NE(released, nullptr);\n+  *out_decoder = std::unique_ptr<TypedDecoder<T>>(released);\n+}\n+\n+template <typename Pair = void>\n+class EncodingAdHocTyped {\n+ public:\n+  using Types = ::testing::Types<std::pair<::arrow::BooleanType, BooleanType>,\n+                                 std::pair<::arrow::Int32Type, Int32Type>,\n+                                 std::pair<::arrow::Int64Type, Int64Type>,\n+                                 std::pair<::arrow::FloatType, FloatType>,\n+                                 std::pair<::arrow::DoubleType, DoubleType>,\n+                                 std::pair<::arrow::FixedSizeBinaryType, FLBAType>>;\n+};\n \n Review comment:\n   This idiom struck me as odd, as the contents does not vary by the passed type\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:53:00.338+0000",
                    "updated": "2019-10-03T20:53:00.338+0000",
                    "started": "2019-10-03T20:53:00.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322958",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331245038\n \n \n\n ##########\n File path: cpp/src/parquet/encoding.h\n ##########\n @@ -72,10 +181,24 @@ class TypedEncoder : virtual public Encoder {\n \n   virtual void Put(const T* src, int num_values) = 0;\n \n+  virtual void Put(const std::vector<T>& src, int num_values = -1);\n+\n   virtual void PutSpaced(const T* src, int num_values, const uint8_t* valid_bits,\n                          int64_t valid_bits_offset) = 0;\n };\n \n+template <typename DType>\n+void TypedEncoder<DType>::Put(const std::vector<T>& src, int num_values) {\n+  if (num_values == -1) {\n+    num_values = static_cast<int>(src.size());\n+  }\n+  Put(src.data(), num_values);\n+}\n+\n+template <>\n+inline void TypedEncoder<BooleanType>::Put(const std::vector<bool>& src, int num_values) {\n+}\n+\n \n Review comment:\n   An incomplete thought here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:53:00.342+0000",
                    "updated": "2019-10-03T20:53:00.342+0000",
                    "started": "2019-10-03T20:53:00.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322959",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/322960",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r331246694\n \n \n\n ##########\n File path: cpp/src/parquet/encoding_test.cc\n ##########\n @@ -540,8 +538,203 @@ void GetBinaryDictDecoder(DictEncoder<ByteArrayType>* encoder, int64_t num_value\n \n   *out_values = buf;\n   *out_dict = dict_buf;\n-  *out_decoder = std::unique_ptr<ByteArrayDecoder>(\n-      dynamic_cast<ByteArrayDecoder*>(decoder.release()));\n+  ASSERT_NE(decoder, nullptr);\n+  auto released = dynamic_cast<TypedDecoder<T>*>(decoder.release());\n+  ASSERT_NE(released, nullptr);\n+  *out_decoder = std::unique_ptr<TypedDecoder<T>>(released);\n+}\n+\n+template <typename Pair = void>\n+class EncodingAdHocTyped {\n+ public:\n+  using Types = ::testing::Types<std::pair<::arrow::BooleanType, BooleanType>,\n+                                 std::pair<::arrow::Int32Type, Int32Type>,\n+                                 std::pair<::arrow::Int64Type, Int64Type>,\n+                                 std::pair<::arrow::FloatType, FloatType>,\n+                                 std::pair<::arrow::DoubleType, DoubleType>,\n+                                 std::pair<::arrow::FixedSizeBinaryType, FLBAType>>;\n+};\n+\n+template <typename ArrowType, typename ParquetType>\n+class EncodingAdHocTyped<std::pair<ArrowType, ParquetType>> : public ::testing::Test {\n \n Review comment:\n   What's the benefit of using the pair value as a template parameter? Wasn't obvious from cursory glance\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-03T20:53:00.359+0000",
                    "updated": "2019-10-03T20:53:00.359+0000",
                    "started": "2019-10-03T20:53:00.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "322960",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/326430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r333619342\n \n \n\n ##########\n File path: cpp/src/parquet/encoding_test.cc\n ##########\n @@ -540,8 +538,203 @@ void GetBinaryDictDecoder(DictEncoder<ByteArrayType>* encoder, int64_t num_value\n \n   *out_values = buf;\n   *out_dict = dict_buf;\n-  *out_decoder = std::unique_ptr<ByteArrayDecoder>(\n-      dynamic_cast<ByteArrayDecoder*>(decoder.release()));\n+  ASSERT_NE(decoder, nullptr);\n+  auto released = dynamic_cast<TypedDecoder<T>*>(decoder.release());\n+  ASSERT_NE(released, nullptr);\n+  *out_decoder = std::unique_ptr<TypedDecoder<T>>(released);\n+}\n+\n+template <typename Pair = void>\n+class EncodingAdHocTyped {\n+ public:\n+  using Types = ::testing::Types<std::pair<::arrow::BooleanType, BooleanType>,\n+                                 std::pair<::arrow::Int32Type, Int32Type>,\n+                                 std::pair<::arrow::Int64Type, Int64Type>,\n+                                 std::pair<::arrow::FloatType, FloatType>,\n+                                 std::pair<::arrow::DoubleType, DoubleType>,\n+                                 std::pair<::arrow::FixedSizeBinaryType, FLBAType>>;\n+};\n+\n+template <typename ArrowType, typename ParquetType>\n+class EncodingAdHocTyped<std::pair<ArrowType, ParquetType>> : public ::testing::Test {\n \n Review comment:\n   For each test, I needed the ParquetType and the corresponding ArrowType (for usage of RandomArrayGenerator, TypeTraits::type_singleton). I could also have accomplished this by defining EncodingTraits<ParquetType>::ArrowType or so if you prefer.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T16:30:35.379+0000",
                    "updated": "2019-10-10T16:30:35.379+0000",
                    "started": "2019-10-10T16:30:35.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326430",
                    "issueId": "13251292"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/worklog/326431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5441: ARROW-6277: [C++][Parquet] Support direct DictionaryArray write of all parquet types\nURL: https://github.com/apache/arrow/pull/5441#discussion_r333619382\n \n \n\n ##########\n File path: cpp/src/parquet/encoding_test.cc\n ##########\n @@ -540,8 +538,203 @@ void GetBinaryDictDecoder(DictEncoder<ByteArrayType>* encoder, int64_t num_value\n \n   *out_values = buf;\n   *out_dict = dict_buf;\n-  *out_decoder = std::unique_ptr<ByteArrayDecoder>(\n-      dynamic_cast<ByteArrayDecoder*>(decoder.release()));\n+  ASSERT_NE(decoder, nullptr);\n+  auto released = dynamic_cast<TypedDecoder<T>*>(decoder.release());\n+  ASSERT_NE(released, nullptr);\n+  *out_decoder = std::unique_ptr<TypedDecoder<T>>(released);\n+}\n+\n+template <typename Pair = void>\n+class EncodingAdHocTyped {\n+ public:\n+  using Types = ::testing::Types<std::pair<::arrow::BooleanType, BooleanType>,\n+                                 std::pair<::arrow::Int32Type, Int32Type>,\n+                                 std::pair<::arrow::Int64Type, Int64Type>,\n+                                 std::pair<::arrow::FloatType, FloatType>,\n+                                 std::pair<::arrow::DoubleType, DoubleType>,\n+                                 std::pair<::arrow::FixedSizeBinaryType, FLBAType>>;\n+};\n \n Review comment:\n   Not sure what you mean\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-10T16:30:41.650+0000",
                    "updated": "2019-10-10T16:30:41.650+0000",
                    "started": "2019-10-10T16:30:41.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326431",
                    "issueId": "13251292"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@674ecb62[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b8c0544[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b85a141[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@60c83350[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@434439c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5231f9b8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7418d516[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@556b2a76[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3783a306[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6aa27077[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5820a850[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@549401b8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 05 16:09:47 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-11-05T16:09:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6277/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-08-16T17:12:26.000+0000",
        "updated": "2019-11-05T16:15:06.000+0000",
        "timeoriginalestimate": null,
        "description": "As follow up to ARROW-3246, we should support direct read/write of the other Parquet primitive types. Currently only BYTE_ARRAY is implemented as it provides the most performance benefit.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Support reading/writing other Parquet primitive types to DictionaryArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/comment/16923017",
                    "id": "16923017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I need to see if this is actually a problem or merely a \"nice to have\"",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-05T03:12:59.392+0000",
                    "updated": "2019-09-05T03:12:59.392+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/comment/16923401",
                    "id": "16923401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "This could be interesting for date columns when working together with pandas. To correctly round-trip date columns in the cycle Parquet -> Arrow -> pandas -> Arrow -> Parquet you need to use object columns in pandas with datetime.date objects. These can be quite repetitive and thus using dictionary encoding helps a lot here. Otherwise I would see the same use case for float columns but that isn't something I haven't yet used, mostly due to pandas not really working well with float categories.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-09-05T12:50:37.087+0000",
                    "updated": "2019-09-05T12:50:37.087+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251292/comment/16967628",
                    "id": "16967628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5441\n[https://github.com/apache/arrow/pull/5441]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-11-05T16:09:47.771+0000",
                    "updated": "2019-11-05T16:09:47.771+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z05qwg:",
        "customfield_12314139": null
    }
}