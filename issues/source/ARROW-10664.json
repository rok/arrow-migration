{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13341793",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793",
    "key": "ARROW-10664",
    "fields": {
        "parent": {
            "id": "13340815",
            "key": "ARROW-10612",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13340815",
            "fields": {
                "summary": "[Rust]: Tracking issue for AVX-512",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/6",
            "id": "6",
            "description": "The problem isn't valid and it can't be fixed.",
            "name": "Invalid"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10664/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/514606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique opened a new pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722\n\n\n   Before:\r\n   ```\r\n   sort 2^10               time:   [94.137 us 94.154 us 94.174 us]                      \r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n   sort 2^12               time:   [483.03 us 483.08 us 483.13 us]                      \r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   sort nulls 2^10         time:   [59.782 us 59.800 us 59.818 us]                            \r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   sort nulls 2^12         time:   [296.84 us 296.89 us 296.97 us]                            \r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   ```\r\n   \r\n   After:\r\n   ```\r\n   sort 2^10               time:   [73.098 us 73.119 us 73.148 us]                      \r\n                           change: [-22.404% -22.381% -22.356%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     3 (3.00%) low mild\r\n     1 (1.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   sort 2^12               time:   [354.82 us 354.98 us 355.23 us]                      \r\n                           change: [-26.550% -26.530% -26.505%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low mild\r\n     3 (3.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   sort nulls 2^10         time:   [53.570 us 53.577 us 53.585 us]                            \r\n                           change: [-10.407% -10.378% -10.350%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) low mild\r\n     3 (3.00%) high mild\r\n   \r\n   sort nulls 2^12         time:   [238.46 us 238.50 us 238.55 us]                            \r\n                           change: [-19.670% -19.650% -19.627%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   ```\r\n   \r\n   Note: Waiting for other bit or PR to merge to rebase on top of it.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-20T13:23:27.675+0000",
                    "updated": "2020-11-20T13:23:27.675+0000",
                    "started": "2020-11-20T13:23:27.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514606",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/514609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#issuecomment-731171915\n\n\n   https://issues.apache.org/jira/browse/ARROW-10664\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-20T13:32:13.640+0000",
                    "updated": "2020-11-20T13:32:13.640+0000",
                    "started": "2020-11-20T13:32:13.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514609",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/514794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#discussion_r527926242\n\n\n\n##########\nFile path: rust/arrow/src/arch/avx512.rs\n##########\n@@ -41,6 +41,155 @@ pub(crate) unsafe fn avx512_bin_or(left: &[u8], right: &[u8], res: &mut [u8]) {\n     std::ptr::copy_nonoverlapping(s, d, std::mem::size_of::<__m512i>());\n }\n \n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_single<'a>(input: &[i64]) -> [i64; 8] {\n\nReview comment:\n       May you please add some comments to the functions (and/or inline) so it's a bit easier for us to follow the code. Thanks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-20T19:30:14.820+0000",
                    "updated": "2020-11-20T19:30:14.820+0000",
                    "started": "2020-11-20T19:30:14.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "514794",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/515100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#discussion_r528217013\n\n\n\n##########\nFile path: rust/arrow/src/arch/avx512.rs\n##########\n@@ -41,6 +41,155 @@ pub(crate) unsafe fn avx512_bin_or(left: &[u8], right: &[u8], res: &mut [u8]) {\n     std::ptr::copy_nonoverlapping(s, d, std::mem::size_of::<__m512i>());\n }\n \n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_single<'a>(input: &[i64]) -> [i64; 8] {\n\nReview comment:\n       Added for each method also comments for the operation blocks.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T16:50:16.190+0000",
                    "updated": "2020-11-21T16:50:16.190+0000",
                    "started": "2020-11-21T16:50:16.190+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515100",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/515134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#discussion_r528238296\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -222,6 +224,106 @@ impl Default for SortOptions {\n     }\n }\n \n+#[cfg(feature = \"avx512\")]\n+/// Sort primitive values\n+fn sort_primitive<T>(\n+    values: &ArrayRef,\n+    value_indices: Vec<u32>,\n+    null_indices: Vec<u32>,\n+    nan_indices: Vec<u32>,\n+    options: &SortOptions,\n+) -> Result<UInt32Array>\n+where\n+    T: ArrowPrimitiveType,\n+    T::Native: std::cmp::PartialOrd,\n+{\n+    let values = as_primitive_array::<T>(values);\n+    let descending = options.descending;\n+\n+    let mut nulls = null_indices;\n+    let mut nans = nan_indices;\n+\n+    let perm_exch_width = PERMUTE_EXCHANGE_WIDTH * 2;\n+\n+    let valids = if crate::util::bit_util::is_power_of_two(values.len())\n+        && values.len() > perm_exch_width\n+    {\n+        let value_data = value_indices\n+            .iter()\n+            .copied()\n+            .map(|e| e as i64)\n+            .collect::<Vec<i64>>();\n+        let value_data = unsafe {\n+            if !descending {\n+                avx512_vec_sort_i64(&value_data)\n+            } else {\n+                let mut d = avx512_vec_sort_i64(&value_data);\n+                d.reverse();\n+                nans.reverse();\n+                nulls.reverse();\n+                d\n+            }\n+        };\n+        // create tuples after the actual sorting\n\nReview comment:\n       I must be missing something, but how does this work if the goal of the function is to sort the indices based on the values?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T20:19:21.613+0000",
                    "updated": "2020-11-21T20:19:21.613+0000",
                    "started": "2020-11-21T20:19:21.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515134",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/515135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#discussion_r528238698\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/sort.rs\n##########\n@@ -853,6 +955,18 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn test_sort_primitives_large() {\n+        let data = [0, 1, 2, 3_u8]\n+            .repeat(100_000)\n\nReview comment:\n       Could you add another test where the input array has a power of two length?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-21T20:23:23.893+0000",
                    "updated": "2020-11-21T20:23:23.893+0000",
                    "started": "2020-11-21T20:23:23.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515135",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/515631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#discussion_r528807575\n\n\n\n##########\nFile path: rust/arrow/src/arch/avx512.rs\n##########\n@@ -41,6 +45,173 @@ pub(crate) unsafe fn avx512_bin_or(left: &[u8], right: &[u8], res: &mut [u8]) {\n     std::ptr::copy_nonoverlapping(s, d, std::mem::size_of::<__m512i>());\n }\n \n+///\n+/// Sorting network for a single SIMD vector of i64s\n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_single<'a>(input: &[i64]) -> [i64; 8] {\n+    use core::arch::x86_64::{\n+        __m512i, _mm512_loadu_epi64, _mm512_mask_mov_epi64, _mm512_max_epi64,\n+        _mm512_min_epi64, _mm512_permutexvar_epi64, _mm512_set_epi64,\n+    };\n+\n+    // First wiring's permute exchange for the sorting network\n+    let mut inp: __m512i = _mm512_loadu_epi64(input.as_ptr() as *const _);\n+    let idxnn1: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn1, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    // Second wiring's permute exchange for the sorting network\n+    let idxnn2: __m512i = _mm512_set_epi64(4, 5, 6, 7, 0, 1, 2, 3);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    // Third wiring's permute exchange for the sorting network\n+    let idxnn3: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    // Fourth wiring's permute exchange, does forwarding.\n+    let idxnn4: __m512i = _mm512_set_epi64(0, 1, 2, 3, 4, 5, 6, 7);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max);\n+\n+    // Fifth wiring's permute exchange for the sorting network\n+    let idxnn5: __m512i = _mm512_set_epi64(5, 4, 7, 6, 1, 0, 3, 2);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn5, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    // Sixth wiring's permute exchange for the sorting network\n+    let idxnn6: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn6, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    std::mem::transmute(inp)\n+}\n+\n+///\n+/// Sorting network with SIMD merger for two SIMD vector of i64s\n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_double(\n+    left: &[i64],\n+    right: &[i64],\n+) -> [[i64; 8]; 2] {\n+    use core::arch::x86_64::{\n+        __m512i, _mm512_loadu_epi64, _mm512_mask_mov_epi64, _mm512_max_epi64,\n+        _mm512_min_epi64, _mm512_permutexvar_epi64, _mm512_set_epi64,\n+    };\n+\n+    let (l, r) = (\n+        avx512_vec_sort_i64_single(left),\n+        avx512_vec_sort_i64_single(right),\n+    );\n+\n+    let mut l: __m512i = _mm512_loadu_epi64(l.as_ptr() as *const _);\n+    let mut r: __m512i = _mm512_loadu_epi64(r.as_ptr() as *const _);\n+\n+    // Full blend of the both vector wires\n+    let idxnn1: __m512i = _mm512_set_epi64(0, 1, 2, 3, 4, 5, 6, 7);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn1, l);\n+    l = _mm512_min_epi64(r, wire_n);\n+    r = _mm512_max_epi64(r, wire_n);\n+\n+    // Carries on with normal sorting network operation\n+    let idxnn2: __m512i = _mm512_set_epi64(3, 2, 1, 0, 7, 6, 5, 4);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max); // 0x33\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max); // 0x33\n+\n+    let idxnn3: __m512i = _mm512_set_epi64(5, 4, 7, 6, 1, 0, 3, 2);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    let idxnn4: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    let lf: [i64; 8] = std::mem::transmute(l);\n+    let rf: [i64; 8] = std::mem::transmute(r);\n+\n+    [lf, rf]\n+}\n+\n+///\n+/// Permute exchange width for the AVX-512 SIMD application\n+pub(crate) const PERMUTE_EXCHANGE_WIDTH: usize = 8;\n+\n+///\n+/// Merge layer for sorting network\n+fn merger_net(mut input: Vec<i64>) -> Vec<i64> {\n+    let half = input.len() / 2;\n+    if half > PERMUTE_EXCHANGE_WIDTH {\n+        (0..half).into_iter().for_each(|e| unsafe {\n+            if input[e] > input[e + half] {\n+                let pl: *mut i64 = &mut input[e];\n+                let pr: *mut i64 = &mut input[e + half];\n+                std::ptr::swap(pl, pr);\n+            }\n+        });\n+        merger_net(input[..half].to_vec());\n+        merger_net(input[half..].to_vec());\n+    }\n+    input\n+}\n+\n+///\n+/// Cold path marker for hinting the CPU for the further optimizations.\n+#[inline]\n+#[cold]\n+fn cold() {}\n+\n+///\n+/// Size independent sorter for any vector which is power of two.\n+pub(crate) unsafe fn avx512_vec_sort_i64(input: &[i64]) -> Vec<i64> {\n+    if (input.len() / 2) == PERMUTE_EXCHANGE_WIDTH {\n\nReview comment:\n       Might use here `let half = input.len() / 2` as well? \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T15:56:11.345+0000",
                    "updated": "2020-11-23T15:56:11.345+0000",
                    "started": "2020-11-23T15:56:11.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515631",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/515727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#discussion_r528935157\n\n\n\n##########\nFile path: rust/arrow/src/arch/avx512.rs\n##########\n@@ -41,6 +45,173 @@ pub(crate) unsafe fn avx512_bin_or(left: &[u8], right: &[u8], res: &mut [u8]) {\n     std::ptr::copy_nonoverlapping(s, d, std::mem::size_of::<__m512i>());\n }\n \n+///\n+/// Sorting network for a single SIMD vector of i64s\n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_single<'a>(input: &[i64]) -> [i64; 8] {\n+    use core::arch::x86_64::{\n+        __m512i, _mm512_loadu_epi64, _mm512_mask_mov_epi64, _mm512_max_epi64,\n+        _mm512_min_epi64, _mm512_permutexvar_epi64, _mm512_set_epi64,\n+    };\n+\n+    // First wiring's permute exchange for the sorting network\n+    let mut inp: __m512i = _mm512_loadu_epi64(input.as_ptr() as *const _);\n+    let idxnn1: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn1, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    // Second wiring's permute exchange for the sorting network\n+    let idxnn2: __m512i = _mm512_set_epi64(4, 5, 6, 7, 0, 1, 2, 3);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    // Third wiring's permute exchange for the sorting network\n+    let idxnn3: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    // Fourth wiring's permute exchange, does forwarding.\n+    let idxnn4: __m512i = _mm512_set_epi64(0, 1, 2, 3, 4, 5, 6, 7);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max);\n+\n+    // Fifth wiring's permute exchange for the sorting network\n+    let idxnn5: __m512i = _mm512_set_epi64(5, 4, 7, 6, 1, 0, 3, 2);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn5, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    // Sixth wiring's permute exchange for the sorting network\n+    let idxnn6: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn6, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    std::mem::transmute(inp)\n+}\n+\n+///\n+/// Sorting network with SIMD merger for two SIMD vector of i64s\n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_double(\n+    left: &[i64],\n+    right: &[i64],\n+) -> [[i64; 8]; 2] {\n+    use core::arch::x86_64::{\n+        __m512i, _mm512_loadu_epi64, _mm512_mask_mov_epi64, _mm512_max_epi64,\n+        _mm512_min_epi64, _mm512_permutexvar_epi64, _mm512_set_epi64,\n+    };\n+\n+    let (l, r) = (\n+        avx512_vec_sort_i64_single(left),\n+        avx512_vec_sort_i64_single(right),\n+    );\n+\n+    let mut l: __m512i = _mm512_loadu_epi64(l.as_ptr() as *const _);\n+    let mut r: __m512i = _mm512_loadu_epi64(r.as_ptr() as *const _);\n+\n+    // Full blend of the both vector wires\n+    let idxnn1: __m512i = _mm512_set_epi64(0, 1, 2, 3, 4, 5, 6, 7);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn1, l);\n+    l = _mm512_min_epi64(r, wire_n);\n+    r = _mm512_max_epi64(r, wire_n);\n+\n+    // Carries on with normal sorting network operation\n+    let idxnn2: __m512i = _mm512_set_epi64(3, 2, 1, 0, 7, 6, 5, 4);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max); // 0x33\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max); // 0x33\n+\n+    let idxnn3: __m512i = _mm512_set_epi64(5, 4, 7, 6, 1, 0, 3, 2);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    let idxnn4: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    let lf: [i64; 8] = std::mem::transmute(l);\n+    let rf: [i64; 8] = std::mem::transmute(r);\n+\n+    [lf, rf]\n+}\n+\n+///\n+/// Permute exchange width for the AVX-512 SIMD application\n+pub(crate) const PERMUTE_EXCHANGE_WIDTH: usize = 8;\n+\n+///\n+/// Merge layer for sorting network\n+fn merger_net(mut input: Vec<i64>) -> Vec<i64> {\n+    let half = input.len() / 2;\n+    if half > PERMUTE_EXCHANGE_WIDTH {\n+        (0..half).into_iter().for_each(|e| unsafe {\n+            if input[e] > input[e + half] {\n+                let pl: *mut i64 = &mut input[e];\n+                let pr: *mut i64 = &mut input[e + half];\n+                std::ptr::swap(pl, pr);\n+            }\n+        });\n+        merger_net(input[..half].to_vec());\n\nReview comment:\n       Doesn't this create a lot of intermediate vecs / recursion? I guess it could be written manually and with one bigger allocation?\n\n##########\nFile path: rust/arrow/src/arch/avx512.rs\n##########\n@@ -41,6 +45,173 @@ pub(crate) unsafe fn avx512_bin_or(left: &[u8], right: &[u8], res: &mut [u8]) {\n     std::ptr::copy_nonoverlapping(s, d, std::mem::size_of::<__m512i>());\n }\n \n+///\n+/// Sorting network for a single SIMD vector of i64s\n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_single<'a>(input: &[i64]) -> [i64; 8] {\n+    use core::arch::x86_64::{\n+        __m512i, _mm512_loadu_epi64, _mm512_mask_mov_epi64, _mm512_max_epi64,\n+        _mm512_min_epi64, _mm512_permutexvar_epi64, _mm512_set_epi64,\n+    };\n+\n+    // First wiring's permute exchange for the sorting network\n+    let mut inp: __m512i = _mm512_loadu_epi64(input.as_ptr() as *const _);\n+    let idxnn1: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn1, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    // Second wiring's permute exchange for the sorting network\n+    let idxnn2: __m512i = _mm512_set_epi64(4, 5, 6, 7, 0, 1, 2, 3);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    // Third wiring's permute exchange for the sorting network\n+    let idxnn3: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    // Fourth wiring's permute exchange, does forwarding.\n+    let idxnn4: __m512i = _mm512_set_epi64(0, 1, 2, 3, 4, 5, 6, 7);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max);\n+\n+    // Fifth wiring's permute exchange for the sorting network\n+    let idxnn5: __m512i = _mm512_set_epi64(5, 4, 7, 6, 1, 0, 3, 2);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn5, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    // Sixth wiring's permute exchange for the sorting network\n+    let idxnn6: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn6, inp);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, inp);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, inp);\n+    inp = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    std::mem::transmute(inp)\n+}\n+\n+///\n+/// Sorting network with SIMD merger for two SIMD vector of i64s\n+#[target_feature(enable = \"avx512f\")]\n+pub(crate) unsafe fn avx512_vec_sort_i64_double(\n+    left: &[i64],\n+    right: &[i64],\n+) -> [[i64; 8]; 2] {\n+    use core::arch::x86_64::{\n+        __m512i, _mm512_loadu_epi64, _mm512_mask_mov_epi64, _mm512_max_epi64,\n+        _mm512_min_epi64, _mm512_permutexvar_epi64, _mm512_set_epi64,\n+    };\n+\n+    let (l, r) = (\n+        avx512_vec_sort_i64_single(left),\n+        avx512_vec_sort_i64_single(right),\n+    );\n+\n+    let mut l: __m512i = _mm512_loadu_epi64(l.as_ptr() as *const _);\n+    let mut r: __m512i = _mm512_loadu_epi64(r.as_ptr() as *const _);\n+\n+    // Full blend of the both vector wires\n+    let idxnn1: __m512i = _mm512_set_epi64(0, 1, 2, 3, 4, 5, 6, 7);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn1, l);\n+    l = _mm512_min_epi64(r, wire_n);\n+    r = _mm512_max_epi64(r, wire_n);\n+\n+    // Carries on with normal sorting network operation\n+    let idxnn2: __m512i = _mm512_set_epi64(3, 2, 1, 0, 7, 6, 5, 4);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max); // 0x33\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn2, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xF0, wire_n_max); // 0x33\n+\n+    let idxnn3: __m512i = _mm512_set_epi64(5, 4, 7, 6, 1, 0, 3, 2);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn3, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xCC, wire_n_max);\n+\n+    let idxnn4: __m512i = _mm512_set_epi64(6, 7, 4, 5, 2, 3, 0, 1);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, l);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, l);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, l);\n+    l = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+    let wire_n: __m512i = _mm512_permutexvar_epi64(idxnn4, r);\n+    let wire_n_min: __m512i = _mm512_min_epi64(wire_n, r);\n+    let wire_n_max: __m512i = _mm512_max_epi64(wire_n, r);\n+    r = _mm512_mask_mov_epi64(wire_n_min, 0xAA, wire_n_max);\n+\n+    let lf: [i64; 8] = std::mem::transmute(l);\n+    let rf: [i64; 8] = std::mem::transmute(r);\n+\n+    [lf, rf]\n+}\n+\n+///\n+/// Permute exchange width for the AVX-512 SIMD application\n+pub(crate) const PERMUTE_EXCHANGE_WIDTH: usize = 8;\n+\n+///\n+/// Merge layer for sorting network\n+fn merger_net(mut input: Vec<i64>) -> Vec<i64> {\n+    let half = input.len() / 2;\n+    if half > PERMUTE_EXCHANGE_WIDTH {\n+        (0..half).into_iter().for_each(|e| unsafe {\n+            if input[e] > input[e + half] {\n+                let pl: *mut i64 = &mut input[e];\n+                let pr: *mut i64 = &mut input[e + half];\n+                std::ptr::swap(pl, pr);\n+            }\n+        });\n+        merger_net(input[..half].to_vec());\n+        merger_net(input[half..].to_vec());\n+    }\n+    input\n+}\n+\n+///\n+/// Cold path marker for hinting the CPU for the further optimizations.\n+#[inline]\n+#[cold]\n+fn cold() {}\n+\n+///\n+/// Size independent sorter for any vector which is power of two.\n+pub(crate) unsafe fn avx512_vec_sort_i64(input: &[i64]) -> Vec<i64> {\n+    if (input.len() / 2) == PERMUTE_EXCHANGE_WIDTH {\n+        let v: Vec<&[i64]> = input.chunks_exact(PERMUTE_EXCHANGE_WIDTH).collect();\n+        let x = avx512_vec_sort_i64_double(&v[0], &v[1]);\n+        [x[0], x[1]].concat()\n+    } else {\n+        if (input.len() / 2) == 0 {\n+            cold();\n+            input.to_vec()\n+        } else {\n+            let mut it = input.chunks_exact(input.len() / 2);\n+            let l = avx512_vec_sort_i64(it.next().unwrap());\n\nReview comment:\n       Here as well?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-23T19:11:49.024+0000",
                    "updated": "2020-11-23T19:11:49.024+0000",
                    "started": "2020-11-23T19:11:49.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "515727",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/535370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#issuecomment-759439321\n\n\n   @vertexclique  --  Given the imminent Arrow 3.0 release, I am trying to clean up older Rust PRs and see if the authors have plans to move them forward. \r\n   \r\n   Do you plan on working on this PR in the near future? If not, should we close this PR until there is time to make progress? Thanks again for your contributions so far. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-13T13:12:07.222+0000",
                    "updated": "2021-01-13T13:12:07.222+0000",
                    "started": "2021-01-13T13:12:07.222+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "535370",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/535372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique closed pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-13T13:16:36.873+0000",
                    "updated": "2021-01-13T13:16:36.873+0000",
                    "started": "2021-01-13T13:16:36.873+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "535372",
                    "issueId": "13341793"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/worklog/535373",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8722:\nURL: https://github.com/apache/arrow/pull/8722#issuecomment-759441550\n\n\n   @alamb Thanks for reaching out! I don't have time to work on these PRs. Closing.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-13T13:16:39.780+0000",
                    "updated": "2021-01-13T13:16:39.780+0000",
                    "started": "2021-01-13T13:16:39.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "535373",
                    "issueId": "13341793"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@22f7dc48[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2214ae86[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37c3a7be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@30a44f5e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f955a8d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@25fd704f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fa9dd19[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1de5ad0d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6851dd0e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@26e0b743[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6760e793[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@57ddb3b7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 26 12:41:06 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-26T12:41:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10664/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-11-20T13:16:58.000+0000",
        "updated": "2021-04-26T12:41:08.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement AVX-512 sort operation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341793/comment/17332164",
                    "id": "17332164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Migrated to github: https://github.com/apache/arrow-rs/issues/136",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-26T12:41:06.339+0000",
                    "updated": "2021-04-26T12:41:06.339+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ksh4:",
        "customfield_12314139": null
    }
}