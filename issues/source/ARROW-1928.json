{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13125303",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13125303",
    "key": "ARROW-1928",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1928/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5cfb1e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d2f9c6c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ff65b3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5b255bc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c72c4fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@385cb7f8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47719fbd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50792d5a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a864e84[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@27b8d55b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c7f3a66[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7575c94e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Apr 21 13:23:54 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-21T13:23:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1928/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-12-15T18:45:23.000+0000",
        "updated": "2018-04-21T13:23:54.000+0000",
        "timeoriginalestimate": null,
        "description": "The performance may also vary across platforms/compilers. This would be helpful to know how much they help",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add benchmarks comparing performance of internal::BitmapReader/Writer with naive approaches",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13125303/comment/16444108",
                    "id": "16444108",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1915: ARROW-1928: [C++] Add BitmapReader/BitmapWriter benchmarks\nURL: https://github.com/apache/arrow/pull/1915\n \n \n   Also improve the BitmapWriter implementation (around 18% faster here - on Ubuntu 16.04 with gcc 4.9).\r\n   \r\n   I experimented with a different implementation for BitmapReader (storing the bit mask instead of the bit offset), but it came out surprisingly slower.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-19T14:20:18.120+0000",
                    "updated": "2018-04-19T14:20:18.120+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13125303/comment/16444480",
                    "id": "16444480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1915: ARROW-1928: [C++] Add BitmapReader/BitmapWriter benchmarks\nURL: https://github.com/apache/arrow/pull/1915#issuecomment-382825882\n \n \n   Benchmark numbers here:\r\n   ```\r\n   BM_NaiveBitmapReader/97.6562k/min_time:1.000       1391 us       1390 us       1016   137.181MB/s\r\n   BM_BitmapReader/97.6562k/min_time:1.000            1162 us       1162 us       1139   164.143MB/s\r\n   BM_NaiveBitmapWriter/97.6562k/min_time:1.000       1299 us       1299 us       1077   146.872MB/s\r\n   BM_BitmapWriter/97.6562k/min_time:1.000            1032 us       1032 us       1358    184.88MB/s\r\n   ```\r\n   \r\n   The original BitmapWriter implementation achieved 155MB/s.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-19T17:56:08.327+0000",
                    "updated": "2018-04-19T17:56:08.327+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13125303/comment/16446795",
                    "id": "16446795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1915\n[https://github.com/apache/arrow/pull/1915]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-21T13:23:53.340+0000",
                    "updated": "2018-04-21T13:23:53.340+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13125303/comment/16446796",
                    "id": "16446796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1915: ARROW-1928: [C++] Add BitmapReader/BitmapWriter benchmarks\nURL: https://github.com/apache/arrow/pull/1915\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/util/bit-util-benchmark.cc b/cpp/src/arrow/util/bit-util-benchmark.cc\nindex 8969dd80b1..06aa2ed773 100644\n--- a/cpp/src/arrow/util/bit-util-benchmark.cc\n+++ b/cpp/src/arrow/util/bit-util-benchmark.cc\n@@ -28,13 +28,147 @@\n namespace arrow {\n namespace BitUtil {\n \n-static void BM_CopyBitmap(benchmark::State& state) {  // NOLINT non-const reference\n-  const int kBufferSize = state.range(0);\n+// A naive bitmap reader implementation, meant as a baseline against\n+// internal::BitmapReader\n+\n+class NaiveBitmapReader {\n+ public:\n+  NaiveBitmapReader(const uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : bitmap_(bitmap), position_(0) {}\n+\n+  bool IsSet() const {\n+    const int64_t byte_offset = position_ / 8;\n+    const int64_t bit_offset = position_ % 8;\n+    return (bitmap_[byte_offset] & (1 << bit_offset)) == 0;\n+  }\n+\n+  bool IsNotSet() const { return !IsSet(); }\n+\n+  void Next() { ++position_; }\n \n+ private:\n+  const uint8_t* bitmap_;\n+  int64_t position_;\n+};\n+\n+// A naive bitmap writer implementation, meant as a baseline against\n+// internal::BitmapWriter\n+\n+class NaiveBitmapWriter {\n+ public:\n+  NaiveBitmapWriter(uint8_t* bitmap, int64_t start_offset, int64_t length)\n+      : bitmap_(bitmap), position_(0) {}\n+\n+  void Set() {\n+    const int64_t byte_offset = position_ / 8;\n+    const int64_t bit_offset = position_ % 8;\n+    bitmap_[byte_offset] |= static_cast<uint8_t>(1 << bit_offset);\n+  }\n+\n+  void Clear() {\n+    const int64_t byte_offset = position_ / 8;\n+    const int64_t bit_offset = position_ % 8;\n+    bitmap_[byte_offset] &= 0xFF ^ static_cast<uint8_t>(1 << bit_offset);\n+  }\n+\n+  void Next() { ++position_; }\n+\n+  void Finish() {}\n+\n+  int64_t position() const { return position_; }\n+\n+ private:\n+  uint8_t* bitmap_;\n+  int64_t position_;\n+};\n+\n+static std::shared_ptr<Buffer> CreateRandomBuffer(int64_t nbytes) {\n   std::shared_ptr<Buffer> buffer;\n-  ASSERT_OK(AllocateBuffer(default_memory_pool(), kBufferSize, &buffer));\n-  memset(buffer->mutable_data(), 0, kBufferSize);\n-  test::random_bytes(kBufferSize, 0, buffer->mutable_data());\n+  ABORT_NOT_OK(AllocateBuffer(default_memory_pool(), nbytes, &buffer));\n+  memset(buffer->mutable_data(), 0, nbytes);\n+  test::random_bytes(nbytes, 0, buffer->mutable_data());\n+  return buffer;\n+}\n+\n+template <typename BitmapReaderType>\n+static void BenchmarkBitmapReader(benchmark::State& state, int64_t nbytes) {\n+  std::shared_ptr<Buffer> buffer = CreateRandomBuffer(nbytes);\n+\n+  const int64_t num_bits = nbytes * 8;\n+  const uint8_t* bitmap = buffer->data();\n+\n+  while (state.KeepRunning()) {\n+    {\n+      BitmapReaderType reader(bitmap, 0, num_bits);\n+      int64_t total = 0;\n+      for (int64_t i = 0; i < num_bits; i++) {\n+        total += reader.IsSet();\n+        reader.Next();\n+      }\n+      benchmark::DoNotOptimize(total);\n+    }\n+    {\n+      BitmapReaderType reader(bitmap, 0, num_bits);\n+      int64_t total = 0;\n+      for (int64_t i = 0; i < num_bits; i++) {\n+        total += !reader.IsNotSet();\n+        reader.Next();\n+      }\n+      benchmark::DoNotOptimize(total);\n+    }\n+  }\n+  state.SetBytesProcessed(2 * int64_t(state.iterations()) * nbytes);\n+}\n+\n+template <typename BitmapWriterType>\n+static void BenchmarkBitmapWriter(benchmark::State& state, int64_t nbytes) {\n+  std::shared_ptr<Buffer> buffer = CreateRandomBuffer(nbytes);\n+\n+  const int64_t num_bits = nbytes * 8;\n+  uint8_t* bitmap = buffer->mutable_data();\n+\n+  while (state.KeepRunning()) {\n+    {\n+      BitmapWriterType writer(bitmap, 0, num_bits);\n+      for (int64_t i = 0; i < num_bits; i++) {\n+        writer.Set();\n+        writer.Next();\n+      }\n+      writer.Finish();\n+      benchmark::ClobberMemory();\n+    }\n+    {\n+      BitmapWriterType writer(bitmap, 0, num_bits);\n+      for (int64_t i = 0; i < num_bits; i++) {\n+        writer.Clear();\n+        writer.Next();\n+      }\n+      writer.Finish();\n+      benchmark::ClobberMemory();\n+    }\n+  }\n+  state.SetBytesProcessed(2 * int64_t(state.iterations()) * nbytes);\n+}\n+\n+static void BM_NaiveBitmapReader(benchmark::State& state) {\n+  BenchmarkBitmapReader<NaiveBitmapReader>(state, state.range(0));\n+}\n+\n+static void BM_BitmapReader(benchmark::State& state) {\n+  BenchmarkBitmapReader<internal::BitmapReader>(state, state.range(0));\n+}\n+\n+static void BM_NaiveBitmapWriter(benchmark::State& state) {\n+  BenchmarkBitmapWriter<NaiveBitmapWriter>(state, state.range(0));\n+}\n+\n+static void BM_BitmapWriter(benchmark::State& state) {\n+  BenchmarkBitmapWriter<internal::BitmapWriter>(state, state.range(0));\n+}\n+\n+static void BM_CopyBitmap(benchmark::State& state) {  // NOLINT non-const reference\n+  const int kBufferSize = state.range(0);\n+  std::shared_ptr<Buffer> buffer = CreateRandomBuffer(kBufferSize);\n \n   const int num_bits = kBufferSize * 8;\n   const uint8_t* src = buffer->data();\n@@ -54,5 +188,19 @@ BENCHMARK(BM_CopyBitmap)\n     ->MinTime(1.0)\n     ->Unit(benchmark::kMicrosecond);\n \n+BENCHMARK(BM_NaiveBitmapReader)\n+    ->Args({100000})\n+    ->MinTime(1.0)\n+    ->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_BitmapReader)->Args({100000})->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_NaiveBitmapWriter)\n+    ->Args({100000})\n+    ->MinTime(1.0)\n+    ->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_BitmapWriter)->Args({100000})->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n }  // namespace BitUtil\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex 5f171a07ce..3255ead081 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -428,7 +428,7 @@ class BitmapReader {\n   void Next() {\n     ++bit_offset_;\n     ++position_;\n-    if (bit_offset_ == 8) {\n+    if (ARROW_PREDICT_FALSE(bit_offset_ == 8)) {\n       bit_offset_ = 0;\n       ++byte_offset_;\n       if (ARROW_PREDICT_TRUE(position_ < length_)) {\n@@ -453,23 +453,23 @@ class BitmapWriter {\n       : bitmap_(bitmap), position_(0), length_(length) {\n     current_byte_ = 0;\n     byte_offset_ = start_offset / 8;\n-    bit_offset_ = start_offset % 8;\n+    bit_mask_ = static_cast<uint8_t>(1 << (start_offset % 8));\n     if (length > 0) {\n       current_byte_ = bitmap[byte_offset_];\n     }\n   }\n \n-  void Set() { current_byte_ |= BitUtil::kBitmask[bit_offset_]; }\n+  void Set() { current_byte_ |= bit_mask_; }\n \n-  void Clear() { current_byte_ &= BitUtil::kFlippedBitmask[bit_offset_]; }\n+  void Clear() { current_byte_ &= bit_mask_ ^ 0xFF; }\n \n   void Next() {\n-    ++bit_offset_;\n+    bit_mask_ = static_cast<uint8_t>(bit_mask_ << 1);\n     ++position_;\n-    bitmap_[byte_offset_] = current_byte_;\n-    if (bit_offset_ == 8) {\n-      bit_offset_ = 0;\n-      ++byte_offset_;\n+    if (bit_mask_ == 0) {\n+      // Finished this byte, need advancing\n+      bit_mask_ = 0x01;\n+      bitmap_[byte_offset_++] = current_byte_;\n       if (ARROW_PREDICT_TRUE(position_ < length_)) {\n         current_byte_ = bitmap_[byte_offset_];\n       }\n@@ -477,10 +477,9 @@ class BitmapWriter {\n   }\n \n   void Finish() {\n-    if (ARROW_PREDICT_TRUE(position_ < length_)) {\n-      if (bit_offset_ != 0) {\n-        bitmap_[byte_offset_] = current_byte_;\n-      }\n+    // Store current byte if we didn't went past bitmap storage\n+    if (bit_mask_ != 0x01 || position_ < length_) {\n+      bitmap_[byte_offset_] = current_byte_;\n     }\n   }\n \n@@ -492,8 +491,8 @@ class BitmapWriter {\n   int64_t length_;\n \n   uint8_t current_byte_;\n+  uint8_t bit_mask_;\n   int64_t byte_offset_;\n-  int64_t bit_offset_;\n };\n \n }  // namespace internal\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-21T13:23:54.191+0000",
                    "updated": "2018-04-21T13:23:54.191+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3nyq7:",
        "customfield_12314139": null
    }
}