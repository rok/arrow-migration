{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13448803",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803",
    "key": "ARROW-16776",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12641350",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12641350",
                "type": {
                    "id": "12310361",
                    "name": "Blocked",
                    "inward": "Blocked",
                    "outward": "Blocked",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310361"
                },
                "inwardIssue": {
                    "id": "13448810",
                    "key": "ARROW-16777",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448810",
                    "fields": {
                        "summary": "[R] printing data in Table/RecordBatch print method",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jthomasmock",
            "name": "jthomasmock",
            "key": "JIRAUSER290612",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER290612&avatarId=50584",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER290612&avatarId=50584",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER290612&avatarId=50584",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER290612&avatarId=50584"
            },
            "displayName": "Thomas Mock",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jthomasmock",
            "name": "jthomasmock",
            "key": "JIRAUSER290612",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER290612&avatarId=50584",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER290612&avatarId=50584",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER290612&avatarId=50584",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER290612&avatarId=50584"
            },
            "displayName": "Thomas Mock",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16776/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson opened a new pull request, #13563:\nURL: https://github.com/apache/arrow/pull/13563\n\n   See reprex (sans terminal formatting) in [r/tests/testthat/_snaps/dplyr-glimpse.md](https://github.com/apache/arrow/compare/master...nealrichardson:arrow:glimpse-part1?expand=1#diff-e8d50da600908f077796a43b7600c17d34448671c7975bb8c4056a484ac2999e)\n\n\n",
                    "created": "2022-07-10T18:56:40.308+0000",
                    "updated": "2022-07-10T18:56:40.308+0000",
                    "started": "2022-07-10T18:56:40.308+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789335",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#issuecomment-1179780558\n\n   https://issues.apache.org/jira/browse/ARROW-16776\n\n\n",
                    "created": "2022-07-10T18:56:58.159+0000",
                    "updated": "2022-07-10T18:56:58.159+0000",
                    "started": "2022-07-10T18:56:58.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789336",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r917516817\n\n\n##########\nr/R/dplyr-count.R:\n##########\n@@ -39,7 +39,7 @@ count.Dataset <- count.ArrowTabular <- count.RecordBatchReader <- count.arrow_dp\n \n #' @importFrom rlang sym :=\n tally.arrow_dplyr_query <- function(x, wt = NULL, sort = FALSE, name = NULL) {\n-  check_name <- utils::getFromNamespace(\"check_name\", \"dplyr\")\n+  check_name <- getFromNamespace(\"check_name\", \"dplyr\")\n\nReview Comment:\n   Question: Is there a reason we didn't want the `utils::`?\n\n\n\n",
                    "created": "2022-07-11T03:33:47.076+0000",
                    "updated": "2022-07-11T03:33:47.076+0000",
                    "started": "2022-07-11T03:33:47.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789359",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r917848669\n\n\n##########\nr/R/dplyr-count.R:\n##########\n@@ -39,7 +39,7 @@ count.Dataset <- count.ArrowTabular <- count.RecordBatchReader <- count.arrow_dp\n \n #' @importFrom rlang sym :=\n tally.arrow_dplyr_query <- function(x, wt = NULL, sort = FALSE, name = NULL) {\n-  check_name <- utils::getFromNamespace(\"check_name\", \"dplyr\")\n+  check_name <- getFromNamespace(\"check_name\", \"dplyr\")\n\nReview Comment:\n   We've elsewhere done importFrom so it's not necessary\n\n\n\n",
                    "created": "2022-07-11T11:59:18.596+0000",
                    "updated": "2022-07-11T11:59:18.596+0000",
                    "started": "2022-07-11T11:59:18.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789495",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#issuecomment-1180439018\n\n   @jthomasmock FYI\n\n\n",
                    "created": "2022-07-11T13:54:00.968+0000",
                    "updated": "2022-07-11T13:54:00.968+0000",
                    "started": "2022-07-11T13:54:00.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789569",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jthomasmock commented on PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#issuecomment-1180540635\n\n   > @jthomasmock FYI\r\n   \r\n   Very excited to test this out once it's in dev, had peeked through the `testthat` outputs/snapshots!\n\n\n",
                    "created": "2022-07-11T15:16:40.570+0000",
                    "updated": "2022-07-11T15:16:40.570+0000",
                    "started": "2022-07-11T15:16:40.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789607",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918069720\n\n\n##########\nr/R/dplyr-glimpse.R:\n##########\n@@ -0,0 +1,160 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @importFrom utils getFromNamespace\n+glimpse.ArrowTabular <- function(x,\n+                                 width = getOption(\"pillar.width\", getOption(\"width\")),\n+                                 ...) {\n+  # This function is inspired by pillar:::glimpse.tbl(), with some adaptations\n+\n+  # We use cli:: and pillar:: throughout this function. We don't need to check\n+  # to see if they're installed because dplyr depends on pillar, which depends\n+  # on cli, and we're only in this function though S3 dispatch on dplyr::glimpse\n+  if (!is.finite(width)) {\n+    abort(\"`width` must be finite.\")\n+  }\n+\n+  # We need a couple of internal functions in pillar for formatting\n+  pretty_int <- getFromNamespace(\"big_mark\", \"pillar\")\n+  make_shorter <- getFromNamespace(\"str_trunc\", \"pillar\")\n+  tickify <- getFromNamespace(\"tick_if_needed\", \"pillar\")\n+\n+  # Even though this is the ArrowTabular method, we use it for arrow_dplyr_query\n+  # so make some accommodations. (Others are handled by S3 method dispatch.)\n+  if (inherits(x, \"arrow_dplyr_query\")) {\n+    class_title <- paste(source_data(x)$class_title(), \"(query)\")\n+  } else {\n+    class_title <- x$class_title()\n+  }\n+  cli::cat_line(class_title)\n+\n+  dims <- dim(x)\n+  cli::cat_line(sprintf(\n+    \"%s rows x %s columns\", pretty_int(dims[1]), pretty_int(dims[2])\n+  ))\n+\n+  if (dims[2] == 0) {\n+    return(invisible(x))\n+  }\n+\n+  nrows <- as.integer(width / 3)\n+  head_tab <- dplyr::compute(head(x, nrows))\n+  # Take the schema from this Table because if x is arrow_dplyr_query, some\n+  # output types could be a best guess (in implicit_schema()).\n+  schema <- head_tab$schema\n+\n+  # Assemble the column names and types\n+  # We use the Arrow type names here. See type_sum.DataType() below.\n+  var_types <- map_chr(schema$fields, ~ format(pillar::new_pillar_type(.$type)))\n+  # glimpse.tbl() left-aligns the var names (pads with whitespace to the right)\n+  # and appends the types next to them. Because those type names are\n+  # aggressively truncated to all be roughly the same length, this means the\n+  # data glimpse that follows is also mostly aligned.\n+  # However, Arrow type names are longer and variable length, and we're only\n+  # truncating the nested type information inside of <...>. So, to keep the\n+  # data glimpses aligned, we \"justify\" align the name and type: add the padding\n+  # whitespace between them so that the total width is equal.\n+  var_headings <- paste(\"$\", center_pad(tickify(names(x)), var_types))\n+\n+  # Assemble the data glimpse\n+  df <- as.data.frame(head_tab)\n+  formatted_data <- map_chr(df, function(.) {\n+    tryCatch(\n+      paste(pillar::format_glimpse(.), collapse = \", \"),\n+      # This could error e.g. if you have a VctrsExtensionType and the package\n+      # that defines methods for the data is not loaded\n+      error = function(e) conditionMessage(e)\n+    )\n+  })\n+  # Here and elsewhere in the glimpse code, you have to use pillar::get_extent()\n+  # instead of nchar() because get_extent knows how to deal with ANSI escapes\n+  # etc.--it counts how much space on the terminal will be taken when printed.\n+  data_width <- width - pillar::get_extent(var_headings)\n+  truncated_data <- make_shorter(formatted_data, data_width)\n+\n+  # Print the table body (var name, type, data glimpse)\n+  cli::cat_line(var_headings, \" \", truncated_data)\n+\n+  # TODO: use crayon to style these footers?\n+  if (inherits(x, \"arrow_dplyr_query\")) {\n+    cli::cat_line(\"Call `print()` for query details\")\n+  } else if (any(grepl(\"<...>\", var_types, fixed = TRUE)) || schema$HasMetadata) {\n+    cli::cat_line(\"Call `print()` for full schema details\")\n+  }\n+  invisible(x)\n+}\n+\n+# Dataset has an efficient head() method via Scanner so this is fine\n+glimpse.Dataset <- glimpse.ArrowTabular\n+\n+glimpse.arrow_dplyr_query <- function(x,\n+                                      width = getOption(\"pillar.width\", getOption(\"width\")),\n+                                      ...) {\n+  if (any(map_lgl(all_sources(x), ~ inherits(., \"RecordBatchReader\")))) {\n+    msg <- paste(\n+      \"Cannot glimpse() data from a RecordBatchReader because it can only be\",\n+      \"read one time. Call `compute()` to evaluate the query first.\"\n+    )\n+    message(msg)\n+    print(x)\n+  } else if (query_on_dataset(x) && !query_can_stream(x)) {\n+    msg <- paste(\n+      \"This query requires a full table scan, so glimpse() may be\",\n+      \"expensive. Call `compute()` to evaluate the query first.\"\n+    )\n+    message(msg)\n+    print(x)\n+  } else {\n+    # Go for it\n+    glimpse.ArrowTabular(x, width = width, ...)\n+  }\n+}\n+\n+glimpse.RecordBatchReader <- function(x,\n+                                      width = getOption(\"pillar.width\", getOption(\"width\")),\n+                                      ...) {\n+  # TODO(ARROW-17038): to_arrow() on duckdb con should hold con not RBR so it\n+  # can be run more than once (like duckdb does on the other side)\n+  msg <- paste(\n+    \"Cannot glimpse() data from a RecordBatchReader because it can only be\",\n+    \"read one time; call `as_arrow_table()` to consume it first\"\n\nReview Comment:\n   ```suggestion\r\n       \"read one time; call `as_arrow_table()` to consume it first.\"\r\n   ```\n\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -276,13 +278,48 @@ source_data <- function(x) {\n   }\n }\n \n-is_collapsed <- function(x) inherits(x$.data, \"arrow_dplyr_query\")\n+all_sources <- function(x) {\n+  if (is.null(x)) {\n+    x\n+  } else if (!inherits(x, \"arrow_dplyr_query\")) {\n+    list(x)\n+  } else {\n+    c(\n+      all_sources(x$.data),\n+      all_sources(x$join$right_data),\n+      all_sources(x$union_all$right_data)\n+    )\n+  }\n+}\n \n-has_aggregation <- function(x) {\n-  # TODO: update with joins (check right side data too)\n-  !is.null(x$aggregations) || (is_collapsed(x) && has_aggregation(x$.data))\n+query_can_stream <- function(x) {\n\nReview Comment:\n   The reason we can't push this down to C++ is because we haven't constructed an exec plan yet, right? Otherwise, it would be more maintainable to do so.\n\n\n\n",
                    "created": "2022-07-11T15:49:39.592+0000",
                    "updated": "2022-07-11T15:49:39.592+0000",
                    "started": "2022-07-11T15:49:39.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789623",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918105901\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -276,13 +278,48 @@ source_data <- function(x) {\n   }\n }\n \n-is_collapsed <- function(x) inherits(x$.data, \"arrow_dplyr_query\")\n+all_sources <- function(x) {\n+  if (is.null(x)) {\n+    x\n+  } else if (!inherits(x, \"arrow_dplyr_query\")) {\n+    list(x)\n+  } else {\n+    c(\n+      all_sources(x$.data),\n+      all_sources(x$join$right_data),\n+      all_sources(x$union_all$right_data)\n+    )\n+  }\n+}\n \n-has_aggregation <- function(x) {\n-  # TODO: update with joins (check right side data too)\n-  !is.null(x$aggregations) || (is_collapsed(x) && has_aggregation(x$.data))\n+query_can_stream <- function(x) {\n\nReview Comment:\n   I don't follow. We could build an ExecPlan, but it wouldn't tell us anything about how it would perform, would it? I'm trying to detect cases where I can just take `head()` of the data without having to scan an entire dataset. \n\n\n\n",
                    "created": "2022-07-11T15:59:47.510+0000",
                    "updated": "2022-07-11T15:59:47.510+0000",
                    "started": "2022-07-11T15:59:47.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789628",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918118858\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -276,13 +278,48 @@ source_data <- function(x) {\n   }\n }\n \n-is_collapsed <- function(x) inherits(x$.data, \"arrow_dplyr_query\")\n+all_sources <- function(x) {\n+  if (is.null(x)) {\n+    x\n+  } else if (!inherits(x, \"arrow_dplyr_query\")) {\n+    list(x)\n+  } else {\n+    c(\n+      all_sources(x$.data),\n+      all_sources(x$join$right_data),\n+      all_sources(x$union_all$right_data)\n+    )\n+  }\n+}\n \n-has_aggregation <- function(x) {\n-  # TODO: update with joins (check right side data too)\n-  !is.null(x$aggregations) || (is_collapsed(x) && has_aggregation(x$.data))\n+query_can_stream <- function(x) {\n\nReview Comment:\n   > We could build an ExecPlan, but it wouldn't tell us anything about how it would perform, would it?\r\n   \r\n   I'm not super close to the ExecPlan code, but I thought they were composed of a graph of nodes that could be traversed and analyzed, just like our `arrow_dplyr_query` structure. Am I wrong on that?\r\n   \r\n   > I'm trying to detect cases where I can just take head() of the data without having to scan an entire dataset.\r\n   \r\n   I was just thinking that having such a method on `ExecPlan` would be useful in general. \n\n\n\n",
                    "created": "2022-07-11T16:13:31.193+0000",
                    "updated": "2022-07-11T16:13:31.193+0000",
                    "started": "2022-07-11T16:13:31.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789641",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918129935\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -276,13 +278,48 @@ source_data <- function(x) {\n   }\n }\n \n-is_collapsed <- function(x) inherits(x$.data, \"arrow_dplyr_query\")\n+all_sources <- function(x) {\n+  if (is.null(x)) {\n+    x\n+  } else if (!inherits(x, \"arrow_dplyr_query\")) {\n+    list(x)\n+  } else {\n+    c(\n+      all_sources(x$.data),\n+      all_sources(x$join$right_data),\n+      all_sources(x$union_all$right_data)\n+    )\n+  }\n+}\n \n-has_aggregation <- function(x) {\n-  # TODO: update with joins (check right side data too)\n-  !is.null(x$aggregations) || (is_collapsed(x) && has_aggregation(x$.data))\n+query_can_stream <- function(x) {\n\nReview Comment:\n   Sure, that probably would be useful\n\n\n\n",
                    "created": "2022-07-11T16:25:22.527+0000",
                    "updated": "2022-07-11T16:25:22.527+0000",
                    "started": "2022-07-11T16:25:22.526+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789648",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918160386\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -276,13 +278,48 @@ source_data <- function(x) {\n   }\n }\n \n-is_collapsed <- function(x) inherits(x$.data, \"arrow_dplyr_query\")\n+all_sources <- function(x) {\n+  if (is.null(x)) {\n+    x\n+  } else if (!inherits(x, \"arrow_dplyr_query\")) {\n+    list(x)\n+  } else {\n+    c(\n+      all_sources(x$.data),\n+      all_sources(x$join$right_data),\n+      all_sources(x$union_all$right_data)\n+    )\n+  }\n+}\n \n-has_aggregation <- function(x) {\n-  # TODO: update with joins (check right side data too)\n-  !is.null(x$aggregations) || (is_collapsed(x) && has_aggregation(x$.data))\n+query_can_stream <- function(x) {\n\nReview Comment:\n   > I was just thinking that having such a method on ExecPlan would be useful in general.\r\n   \r\n   Possibly.  We'd probably want to define it more formally.  SQL has `LIMIT X` and Substrait's equivalent is [`FetchRel`](https://substrait.io/relations/logical_relations/#fetch-operation).  Neither of these are exactly what is being detected here.  For example, it is legal to have `SELECT SUM(x) FROM table LIMIT 1` but it wouldn't actually limit any data being read.\r\n   \r\n   We could define it as \"single pipeline queries\" but a pipeline breaker doesn't necessarily mean a query is non-streaming (for example, hash-join is sometimes permitted as \"streaming\" in this example but it is always a pipeline breaker).\n\n\n\n",
                    "created": "2022-07-11T16:58:41.163+0000",
                    "updated": "2022-07-11T16:58:41.163+0000",
                    "started": "2022-07-11T16:58:41.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789665",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918202063\n\n\n##########\nr/R/dplyr.R:\n##########\n@@ -276,13 +278,48 @@ source_data <- function(x) {\n   }\n }\n \n-is_collapsed <- function(x) inherits(x$.data, \"arrow_dplyr_query\")\n+all_sources <- function(x) {\n+  if (is.null(x)) {\n+    x\n+  } else if (!inherits(x, \"arrow_dplyr_query\")) {\n+    list(x)\n+  } else {\n+    c(\n+      all_sources(x$.data),\n+      all_sources(x$join$right_data),\n+      all_sources(x$union_all$right_data)\n+    )\n+  }\n+}\n \n-has_aggregation <- function(x) {\n-  # TODO: update with joins (check right side data too)\n-  !is.null(x$aggregations) || (is_collapsed(x) && has_aggregation(x$.data))\n+query_can_stream <- function(x) {\n\nReview Comment:\n   Since you mentioned `limit`, I'll make a plug for ARROW-16628. Not relevant for this particular question, just would let me delete some R specific handling outside of the ExecPlan, and I'm guessing we'll have to do it to support substrait.\n\n\n\n",
                    "created": "2022-07-11T17:48:46.996+0000",
                    "updated": "2022-07-11T17:48:46.996+0000",
                    "started": "2022-07-11T17:48:46.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789688",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918203178\n\n\n##########\nr/tests/testthat/_snaps/dplyr-glimpse.md:\n##########\n@@ -0,0 +1,152 @@\n+# glimpse() Table/ChunkedArray\n+\n+    Code\n+      glimpse(tab)\n+    Output\n+      Table\n+      10 rows x 7 columns\n+      $ int           <int32> 1, 2, 3, NA, 5, 6, 7, 8, 9, 10\n+      $ dbl          <double> 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, NA, 10.1\n+      $ dbl2         <double> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n+      $ lgl            <bool> TRUE, NA, TRUE, FALSE, TRUE, NA, NA, FALSE, FALSE, NA\n+      $ false          <bool> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, ~\n+      $ chr          <string> \"a\", \"b\", \"c\", \"d\", \"e\", NA, \"g\", \"h\", \"i\", \"j\"\n+      $ fct <dictionary<...>> a, b, c, d, NA, NA, g, h, i, j\n+      Call `print()` for full schema details\n+\n+---\n+\n+    Code\n+      glimpse(tab$chr)\n+    Output\n+      <string> [ [ \"a\", \"b\", \"c\", \"d\", \"e\", null, \"g\", \"h\", \"i\", \"j\" ] ]\n+\n+# glimpse() RecordBatch/Array\n+\n+    Code\n+      glimpse(batch)\n+    Output\n+      RecordBatch\n+      10 rows x 7 columns\n+      $ int           <int32> 1, 2, 3, NA, 5, 6, 7, 8, 9, 10\n+      $ dbl          <double> 1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, NA, 10.1\n+      $ dbl2         <double> 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n+      $ lgl            <bool> TRUE, NA, TRUE, FALSE, TRUE, NA, NA, FALSE, FALSE, NA\n+      $ false          <bool> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, ~\n+      $ chr          <string> \"a\", \"b\", \"c\", \"d\", \"e\", NA, \"g\", \"h\", \"i\", \"j\"\n+      $ fct <dictionary<...>> a, b, c, d, NA, NA, g, h, i, j\n+      Call `print()` for full schema details\n+\n+---\n+\n+    Code\n+      glimpse(batch$int)\n+    Output\n+      <int32> [ 1, 2, 3, null, 5, 6, 7, 8, 9, 10 ]\n+\n+# glimpse() with VctrsExtensionType\n+\n+    Code\n+      glimpse(haven)\n+    Output\n+      Table\n+      2 rows x 3 columns\n+      $ num            <double> 5.1, 4.9\n+      $ cat_int <ext<hvn_lbll>> 3, 1\n+      $ cat_chr <ext<hvn_lbll>> Can't convert `x` <haven_labelled> to <character>.\n+      Call `print()` for full schema details\n+\n+---\n+\n+    Code\n+      glimpse(haven[[3]])\n+    Output\n+      <<haven_labelled[0]>> [ [ \"B\", \"B\" ] ]\n+\n+# glimpse prints message about schema if there are complex types\n+\n+    Code\n+      glimpse(dictionary_but_no_metadata)\n+    Output\n+      Table\n+      5 rows x 2 columns\n+      $ a           <int32> 1, 2, 3, 4, 5\n+      $ b <dictionary<...>> 1, 2, 3, 4, 5\n+      Call `print()` for full schema details\n+\n+---\n+\n+    Code\n+      glimpse(Table$create(a = 1))\n+    Output\n+      Table\n+      1 rows x 1 columns\n+      $ a <double> 1\n+\n+# glimpse() calls print() instead of showing data for RBR\n+\n+    Code\n+      example_data %>% as_record_batch_reader() %>% glimpse()\n+    Message <simpleMessage>\n+      Cannot glimpse() data from a RecordBatchReader because it can only be read one time; call `as_arrow_table()` to consume it first\n\nReview Comment:\n   Fix to match the previous punctuation change. \r\n   \r\n   ```suggestion\r\n         Cannot glimpse() data from a RecordBatchReader because it can only be read one time; call `as_arrow_table()` to consume it first.\r\n   ```\n\n\n\n",
                    "created": "2022-07-11T17:50:11.868+0000",
                    "updated": "2022-07-11T17:50:11.868+0000",
                    "started": "2022-07-11T17:50:11.867+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789689",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/789765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #13563:\nURL: https://github.com/apache/arrow/pull/13563#discussion_r918406253\n\n\n##########\nr/R/chunked-array.R:\n##########\n@@ -119,6 +119,7 @@ ChunkedArray <- R6Class(\"ChunkedArray\",\n       assert_that(!is.na(descending))\n       # TODO: after ARROW-12042 is closed, review whether this and the\n       # Array$SortIndices definition can be consolidated\n+      # (edit: ARROW-12042 was resolved in 7.0.0)\n\nReview Comment:\n   Dealt with this in https://github.com/apache/arrow/pull/13576\r\n   ```suggestion\r\n   ```\n\n\n\n",
                    "created": "2022-07-11T22:45:03.698+0000",
                    "updated": "2022-07-11T22:45:03.698+0000",
                    "started": "2022-07-11T22:45:03.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789765",
                    "issueId": "13448803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/worklog/790146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson merged PR #13563:\nURL: https://github.com/apache/arrow/pull/13563\n\n\n",
                    "created": "2022-07-12T19:48:19.462+0000",
                    "updated": "2022-07-12T19:48:19.462+0000",
                    "started": "2022-07-12T19:48:19.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790146",
                    "issueId": "13448803"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1aeaeeaf[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3010e2d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@effff74[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@584e8e0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fd9f83b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@13299d56[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@62dcc418[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@403df34b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30d5d357[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f493b36[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6bb1cec3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4439cf55[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 12 19:48:21 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-12T19:48:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16776/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-06-07T13:37:22.000+0000",
        "updated": "2022-07-12T19:48:21.000+0000",
        "timeoriginalestimate": null,
        "description": "When working with Arrow datasets/tables, I often find myself wanting to interactively print or \"see\" the results of a query or the first few rows of the data without having to fully collect into memory. \r\n\r\nI can perform exploratory data analysis on large out-of-memory datasets via Arrow + dplyr but in order to print the returned values I have to collect() into memory or send to_duckdb().\r\n * compute() - returns number of rows/columns, but no data\r\n * collect() - returns data fully into memory, can be combined with head()\r\n * to_duckdb() - keeps data out of memory, always returns top 10 rows and all columns, optionally increase/decrease number of printed rows\r\n\r\nWhile to_duckdb() gives me the ability to do true EDA, it seems counterintuitive to need to send the arrow table over to a duckdb database just to see the glimpse()/head() equivalent.\r\n\r\nMy feature request is that there is a dplyr::glimpse() method that will lazily print the first few values of table/dataset. The expected output would be something like the below.\r\n\r\n``` r\r\nlibrary(dplyr)\r\nlibrary(arrow)\r\n\r\nmtcars %>% arrow::write_parquet(\"mtcars.parquet\")\r\ncar_ds <- arrow::open_dataset(\"mtcars.parquet\")\r\n\r\ncar_ds %>% \r\n  glimpse()\r\n\r\nRows: ??\r\nColumns: 11\r\n$ mpg  <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, \u2026\r\n$ cyl  <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, \u2026\r\n$ disp <dbl> 160.0, 160.0, 108.0, 258.0, 36\u2026\r\n$ hp   <dbl> 110, 110, 93, 110, 175, 105, 2\u2026\r\n$ drat <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, \u2026\r\n$ wt   <dbl> 2.620, 2.875, 2.320, 3.215, 3.\u2026\r\n$ qsec <dbl> 16.46, 17.02, 18.61, 19.44, 17\u2026\r\n$ vs   <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, \u2026\r\n$ am   <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \u2026\r\n$ gear <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, \u2026\r\n$ carb <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, \u2026\r\n```\r\n\r\nCurrently glimpse() will return a list output where the majority of the output\u00a0is erroneous to the actual data/values.\r\n\r\n``` r\r\nlibrary(dplyr)\r\nlibrary(arrow)\r\n\r\nmtcars %>% arrow::write_parquet(\"mtcars.parquet\")\r\ncar_ds <- arrow::open_dataset(\"mtcars.parquet\")\r\n\r\ncar_ds %>%\u00a0\r\n\u00a0 glimpse()\r\n#> Classes 'FileSystemDataset', 'Dataset', 'ArrowObject', 'R6' <FileSystemDataset>\r\n#> \u00a0 Inherits from: <Dataset>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 .class_title: function ()\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 files: active binding\r\n#> \u00a0 \u00a0 filesystem: active binding\r\n#> \u00a0 \u00a0 format: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 metadata: active binding\r\n#> \u00a0 \u00a0 NewScan: function ()\u00a0\r\n#> \u00a0 \u00a0 num_cols: active binding\r\n#> \u00a0 \u00a0 num_rows: active binding\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: active binding\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: active binding\r\n\r\ncar_ds %>%\r\n\u00a0 filter(cyl == 6) %>%\r\n\u00a0 glimpse()\r\n#> List of 7\r\n#> \u00a0$ mpg :Classes 'FileSystemDataset', 'Dataset', 'ArrowObject', 'R6' <FileSystemDataset>\r\n#> \u00a0 Inherits from: <Dataset>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 .class_title: function ()\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 files: active binding\r\n#> \u00a0 \u00a0 filesystem: active binding\r\n#> \u00a0 \u00a0 format: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 metadata: active binding\r\n#> \u00a0 \u00a0 NewScan: function ()\u00a0\r\n#> \u00a0 \u00a0 num_cols: active binding\r\n#> \u00a0 \u00a0 num_rows: active binding\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: active binding\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: active binding\u00a0\r\n#> \u00a0$ cyl :List of 11\r\n#> \u00a0 ..$ mpg :Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ cyl :Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ disp:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ hp \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ drat:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ wt \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ qsec:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ vs \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ am \u00a0:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ gear:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0 ..$ carb:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0$ disp:Classes 'Expression', 'ArrowObject', 'R6' <Expression>\r\n#> \u00a0 Inherits from: <ArrowObject>\r\n#> \u00a0 Public:\r\n#> \u00a0 \u00a0 .:xp:.: externalptr\r\n#> \u00a0 \u00a0 cast: function (to_type, safe = TRUE, ...)\u00a0\r\n#> \u00a0 \u00a0 clone: function (deep = FALSE)\u00a0\r\n#> \u00a0 \u00a0 Equals: function (other, ...)\u00a0\r\n#> \u00a0 \u00a0 field_name: active binding\r\n#> \u00a0 \u00a0 initialize: function (xp)\u00a0\r\n#> \u00a0 \u00a0 invalidate: function ()\u00a0\r\n#> \u00a0 \u00a0 pointer: function ()\u00a0\r\n#> \u00a0 \u00a0 print: function (...)\u00a0\r\n#> \u00a0 \u00a0 schema: Schema, ArrowObject, R6\r\n#> \u00a0 \u00a0 set_pointer: function (xp)\u00a0\r\n#> \u00a0 \u00a0 ToString: function ()\u00a0\r\n#> \u00a0 \u00a0 type: function (schema = self$schema)\u00a0\r\n#> \u00a0 \u00a0 type_id: function (schema = self$schema) \u00a0\r\n#> \u00a0$ hp \u00a0: chr(0)\u00a0\r\n#> \u00a0$ drat: NULL\r\n#> \u00a0$ wt \u00a0: list()\r\n#> \u00a0$ qsec: logi(0)\u00a0\r\n#> \u00a0- attr(*, \"class\")= chr \"arrow_dplyr_query\"\r\n```\r\n\r\n<sup>Created on 2022-06-07 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] dplyr::glimpse method for arrow table and datasets",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13448803/comment/17565990",
                    "id": "17565990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13563\n[https://github.com/apache/arrow/pull/13563]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-12T19:48:21.543+0000",
                    "updated": "2022-07-12T19:48:21.543+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z130q8:",
        "customfield_12314139": null
    }
}