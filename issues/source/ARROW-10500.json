{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13338978",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978",
    "key": "ARROW-10500",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/6",
            "id": "6",
            "description": "The problem isn't valid and it can't be fixed.",
            "name": "Invalid"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vertexclique",
            "name": "vertexclique",
            "key": "vertexclique",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=vertexclique&avatarId=41431",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=vertexclique&avatarId=41431",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=vertexclique&avatarId=41431",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=vertexclique&avatarId=41431"
            },
            "displayName": "Mahmut Bulut",
            "active": true,
            "timeZone": "Europe/Berlin"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10500/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique opened a new pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598\n\n\n   Currently, bit slice, bit view, and operations all kind of bit operations looking blurry.\r\n   \r\n   - Support native endianness\r\n   - Fix problems related to bit operations\r\n   - Method docs are written.\r\n   - Separate view and bit operation\r\n   - Have good benchmarks still\r\n   \r\n   \r\n   <details>\r\n   <summary>Benchmarks are here.</summary>\r\n   <br>\r\n   <p>\r\n   \r\n   ```\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/aggregate_kernels-3e042984093382ca\r\n   sum 512                 time:   [433.35 ns 434.31 ns 435.26 ns]                    \r\n                           change: [-0.3329% +0.0366% +0.3572%] (p = 0.83 > 0.05)\r\n                           No change in performance detected.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) low mild\r\n   \r\n   min 512                 time:   [643.32 ns 644.21 ns 645.17 ns]                     \r\n                           change: [-0.7371% -0.2747% +0.1556%] (p = 0.24 > 0.05)\r\n                           No change in performance detected.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     4 (4.00%) low mild\r\n     4 (4.00%) high mild\r\n   \r\n   sum nulls 512           time:   [305.83 ns 306.31 ns 306.82 ns]                          \r\n                           change: [+25.194% +25.552% +25.936%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) low mild\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   min nulls 512           time:   [1.7087 us 1.7140 us 1.7202 us]                           \r\n                           change: [+28.765% +29.314% +29.800%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low severe\r\n     1 (1.00%) low mild\r\n     4 (4.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/arithmetic_kernels-f72551135f7f2174\r\n   add 512                 time:   [863.39 ns 864.53 ns 865.68 ns]                     \r\n                           change: [-1.5504% -1.0396% -0.5536%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     6 (6.00%) low mild\r\n     1 (1.00%) high mild\r\n   \r\n   subtract 512            time:   [993.75 ns 995.69 ns 997.80 ns]                          \r\n                           change: [-1.7588% -1.3428% -0.9414%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     1 (1.00%) low severe\r\n     1 (1.00%) low mild\r\n     5 (5.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   multiply 512            time:   [937.78 ns 940.16 ns 942.80 ns]                          \r\n                           change: [-3.5003% -3.1603% -2.8236%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     3 (3.00%) low severe\r\n     3 (3.00%) low mild\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   divide 512              time:   [1.2736 us 1.2764 us 1.2799 us]                        \r\n                           change: [-5.3774% -5.0102% -4.6537%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     5 (5.00%) low mild\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   limit 512, 512          time:   [87.252 ns 87.369 ns 87.490 ns]                           \r\n                           change: [-5.3767% -4.9759% -4.5970%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     2 (2.00%) low severe\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   add_nulls_512           time:   [928.68 ns 930.17 ns 931.79 ns]                           \r\n                           change: [-4.9229% -4.5627% -4.1789%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     3 (3.00%) high mild\r\n   \r\n   divide_nulls_512        time:   [1.6221 us 1.6245 us 1.6270 us]                              \r\n                           change: [+20.220% +20.707% +21.194%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) low mild\r\n     1 (1.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/array_from_vec-e9623439ba2f607b\r\n   array_from_vec 128      time:   [316.35 ns 316.93 ns 317.55 ns]                               \r\n                           change: [-0.3248% +0.1281% +0.5785%] (p = 0.57 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     4 (4.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   array_from_vec 256      time:   [486.03 ns 488.46 ns 491.22 ns]                               \r\n                           change: [-1.2414% -0.4064% +0.2912%] (p = 0.34 > 0.05)\r\n                           No change in performance detected.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     2 (2.00%) low mild\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   array_from_vec 512      time:   [810.71 ns 812.36 ns 814.09 ns]                                \r\n                           change: [-2.8851% -2.4780% -2.0935%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) low mild\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   array_string_from_vec 128                                                                             \r\n                           time:   [3.2412 us 3.2469 us 3.2531 us]\r\n                           change: [-5.1256% -4.7502% -4.3519%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) low severe\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   array_string_from_vec 256                                                                             \r\n                           time:   [5.9510 us 5.9714 us 5.9957 us]\r\n                           change: [-2.7639% -2.2907% -1.8394%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low mild\r\n     6 (6.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   array_string_from_vec 512                                                                             \r\n                           time:   [11.147 us 11.162 us 11.177 us]\r\n                           change: [-1.2898% -0.7899% -0.2991%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 12 outliers among 100 measurements (12.00%)\r\n     2 (2.00%) low severe\r\n     3 (3.00%) low mild\r\n     6 (6.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   struct_array_from_vec 128                                                                             \r\n                           time:   [4.6671 us 4.6752 us 4.6842 us]\r\n                           change: [+1.3235% +1.6633% +1.9898%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     3 (3.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   struct_array_from_vec 256                                                                             \r\n                           time:   [7.8150 us 7.8344 us 7.8540 us]\r\n                           change: [+0.4179% +0.7983% +1.1630%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     4 (4.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   struct_array_from_vec 512                                                                             \r\n                           time:   [14.048 us 14.082 us 14.134 us]\r\n                           change: [+1.0522% +1.4037% +1.7699%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   struct_array_from_vec 1024                                                                             \r\n                           time:   [26.091 us 26.126 us 26.160 us]\r\n                           change: [+1.0905% +1.4287% +1.7556%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low severe\r\n     4 (4.00%) low mild\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/boolean_kernels-edd14f2e1fbef932\r\n   and                     time:   [26.883 us 26.932 us 26.983 us]                 \r\n                           change: [+2.1206% +2.4766% +2.9152%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     3 (3.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   or                      time:   [26.991 us 27.029 us 27.071 us]                \r\n                           change: [+1.5021% +1.8273% +2.1485%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     3 (3.00%) high mild\r\n   \r\n   not                     time:   [13.515 us 13.535 us 13.556 us]                 \r\n                           change: [-1.1505% -0.3964% +0.2990%] (p = 0.30 > 0.05)\r\n                           No change in performance detected.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     3 (3.00%) low mild\r\n     4 (4.00%) high mild\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/buffer_bit_ops-7f780c65b1d8eaab\r\n   buffer_bit_ops and      time:   [1.1393 us 1.1413 us 1.1433 us]                                \r\n                           change: [+889.05% +892.72% +896.41%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     5 (5.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/builder-e60ce23eee65a1bb\r\n   bench_primitive         time:   [647.05 us 647.45 us 647.87 us]                            \r\n                           thrpt:  [6.0293 GiB/s 6.0333 GiB/s 6.0370 GiB/s]\r\n                    change:\r\n                           time:   [+0.4803% +0.5896% +0.7038%] (p = 0.00 < 0.05)\r\n                           thrpt:  [-0.6989% -0.5861% -0.4780%]\r\n                           Change within noise threshold.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     5 (5.00%) high mild\r\n   \r\n   Benchmarking bench_bool: Warming up for 3.0000 s\r\n   Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 8.9s, enable flat sampling, or reduce sample count to 50.\r\n   bench_bool              time:   [1.7426 ms 1.7466 ms 1.7499 ms]                        \r\n                           thrpt:  [285.73 MiB/s 286.28 MiB/s 286.93 MiB/s]\r\n                    change:\r\n                           time:   [+33.359% +33.822% +34.309%] (p = 0.00 < 0.05)\r\n                           thrpt:  [-25.545% -25.274% -25.015%]\r\n                           Performance has regressed.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     3 (3.00%) low mild\r\n     4 (4.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/cast_kernels-400ed028b73d2deb\r\n   cast int32 to int32 512 time:   [19.370 ns 19.419 ns 19.476 ns]                                     \r\n                           change: [-0.9568% -0.2378% +0.4532%] (p = 0.52 > 0.05)\r\n                           No change in performance detected.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) high mild\r\n   \r\n   cast int32 to uint32 512                                                                             \r\n                           time:   [3.6040 us 3.6103 us 3.6177 us]\r\n                           change: [-12.943% -12.451% -11.939%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     3 (3.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast int32 to float32 512                                                                             \r\n                           time:   [3.8512 us 3.8585 us 3.8659 us]\r\n                           change: [-3.5584% -3.1973% -2.8752%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     3 (3.00%) low mild\r\n     4 (4.00%) high mild\r\n   \r\n   cast int32 to float64 512                                                                             \r\n                           time:   [3.8591 us 3.8676 us 3.8768 us]\r\n                           change: [-2.9339% -2.6433% -2.3617%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) low mild\r\n     4 (4.00%) high mild\r\n   \r\n   cast int32 to int64 512 time:   [3.8327 us 3.8395 us 3.8464 us]                                     \r\n                           change: [-4.9455% -4.6372% -4.3215%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) low severe\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n   \r\n   cast float32 to int32 512                                                                             \r\n                           time:   [4.5197 us 4.5256 us 4.5316 us]\r\n                           change: [-3.4145% -3.0686% -2.6943%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     3 (3.00%) low severe\r\n     4 (4.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast float64 to float32 512                                                                             \r\n                           time:   [4.0178 us 4.0397 us 4.0624 us]\r\n                           change: [+0.8169% +1.2843% +1.8100%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     2 (2.00%) low mild\r\n     6 (6.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   cast float64 to uint64 512                                                                             \r\n                           time:   [4.8151 us 4.8231 us 4.8319 us]\r\n                           change: [-2.6650% -2.3405% -2.0186%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 14 outliers among 100 measurements (14.00%)\r\n     2 (2.00%) low severe\r\n     3 (3.00%) low mild\r\n     6 (6.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   cast int64 to int32 512 time:   [3.9086 us 3.9171 us 3.9256 us]                                     \r\n                           change: [-5.8420% -5.5229% -5.2079%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast date64 to date32 512                                                                             \r\n                           time:   [10.490 us 10.534 us 10.584 us]\r\n                           change: [-11.948% -11.631% -11.351%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   cast date32 to date64 512                                                                             \r\n                           time:   [10.353 us 10.373 us 10.396 us]\r\n                           change: [+0.4349% +0.7733% +1.1149%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) low mild\r\n     1 (1.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   cast time32s to time32ms 512                                                                             \r\n                           time:   [1.3260 us 1.3277 us 1.3296 us]\r\n                           change: [-5.8847% -5.5440% -5.2058%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast time32s to time64us 512                                                                             \r\n                           time:   [5.6457 us 5.6540 us 5.6631 us]\r\n                           change: [-0.3788% +0.0713% +0.4866%] (p = 0.75 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     5 (5.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   cast time64ns to time32s 512                                                                             \r\n                           time:   [13.031 us 13.049 us 13.067 us]\r\n                           change: [-0.1244% +0.2410% +0.6103%] (p = 0.20 > 0.05)\r\n                           No change in performance detected.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast timestamp_ns to timestamp_s 512                                                                             \r\n                           time:   [21.281 ns 21.313 ns 21.348 ns]\r\n                           change: [-0.4576% -0.0328% +0.3543%] (p = 0.88 > 0.05)\r\n                           No change in performance detected.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     6 (6.00%) high mild\r\n   \r\n   cast timestamp_ms to timestamp_ns 512                                                                             \r\n                           time:   [1.5613 us 1.5675 us 1.5747 us]\r\n                           change: [+4.4836% +4.9421% +5.4441%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     3 (3.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   cast timestamp_ms to i64 512                                                                            \r\n                           time:   [124.79 ns 124.96 ns 125.14 ns]\r\n                           change: [-0.0308% +0.3341% +0.7194%] (p = 0.08 > 0.05)\r\n                           No change in performance detected.\r\n   Found 13 outliers among 100 measurements (13.00%)\r\n     1 (1.00%) low severe\r\n     7 (7.00%) low mild\r\n     4 (4.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/comparison_kernels-126efdff90a59970\r\n   eq Float32              time:   [910.04 us 910.85 us 911.66 us]                       \r\n                           change: [+0.3318% +0.5602% +0.7961%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     3 (3.00%) high mild\r\n   \r\n   eq scalar Float32       time:   [857.78 us 858.90 us 860.00 us]                              \r\n                           change: [-0.2335% +0.0622% +0.3295%] (p = 0.68 > 0.05)\r\n                           No change in performance detected.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     1 (1.00%) low severe\r\n     1 (1.00%) low mild\r\n     7 (7.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   neq Float32             time:   [860.97 us 862.66 us 864.49 us]                        \r\n                           change: [-0.9691% -0.6156% -0.2754%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low mild\r\n     3 (3.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   neq scalar Float32      time:   [859.15 us 861.81 us 865.05 us]                               \r\n                           change: [-0.0690% +0.2563% +0.5652%] (p = 0.12 > 0.05)\r\n                           No change in performance detected.\r\n   Found 13 outliers among 100 measurements (13.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     5 (5.00%) high mild\r\n     4 (4.00%) high severe\r\n   \r\n   lt Float32              time:   [831.21 us 832.13 us 832.99 us]                       \r\n                           change: [-0.5075% -0.1969% +0.0800%] (p = 0.18 > 0.05)\r\n                           No change in performance detected.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) high mild\r\n   \r\n   lt scalar Float32       time:   [841.17 us 842.20 us 843.20 us]                              \r\n                           change: [-0.6568% -0.2773% +0.0582%] (p = 0.14 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     2 (2.00%) low mild\r\n     3 (3.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   lt_eq Float32           time:   [875.15 us 876.07 us 877.02 us]                          \r\n                           change: [-0.5285% -0.2381% +0.0487%] (p = 0.11 > 0.05)\r\n                           No change in performance detected.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     5 (5.00%) low mild\r\n     6 (6.00%) high mild\r\n   \r\n   lt_eq scalar Float32    time:   [849.93 us 851.46 us 853.36 us]                                 \r\n                           change: [-0.7749% -0.3402% +0.0591%] (p = 0.11 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   gt Float32              time:   [814.51 us 816.63 us 819.22 us]                       \r\n                           change: [+0.1219% +0.5652% +1.0208%] (p = 0.01 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 9 outliers among 100 measurements (9.00%)\r\n     6 (6.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   gt scalar Float32       time:   [805.43 us 806.41 us 807.40 us]                              \r\n                           change: [-0.6462% -0.3443% -0.0458%] (p = 0.02 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 13 outliers among 100 measurements (13.00%)\r\n     4 (4.00%) low severe\r\n     2 (2.00%) low mild\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   gt_eq Float32           time:   [861.43 us 864.94 us 868.90 us]                          \r\n                           change: [-1.0678% -0.6583% -0.2618%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   gt_eq scalar Float32    time:   [828.43 us 829.87 us 831.27 us]                                 \r\n                           change: [-2.1827% -1.7063% -1.2261%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 1 outliers among 100 measurements (1.00%)\r\n     1 (1.00%) low mild\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/csv_writer-e570bd44f0db88a4\r\n   record_batches_to_csv   time:   [62.303 us 63.088 us 64.063 us]                                  \r\n                           change: [+1.2521% +5.7178% +9.8717%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 20 outliers among 100 measurements (20.00%)\r\n     2 (2.00%) low severe\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n     15 (15.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/filter_kernels-43f0ed7006b2704e\r\n   filter u8 low selectivity                                                                            \r\n                           time:   [94.045 us 94.399 us 94.769 us]\r\n                           change: [-0.3916% +0.1902% +0.7859%] (p = 0.53 > 0.05)\r\n                           No change in performance detected.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     1 (1.00%) low mild\r\n     1 (1.00%) high severe\r\n   \r\n   filter u8 high selectivity                                                                             \r\n                           time:   [5.1268 us 5.1350 us 5.1432 us]\r\n                           change: [-1.3219% -1.0230% -0.7251%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     2 (2.00%) low mild\r\n     4 (4.00%) high mild\r\n   \r\n   filter u8 very low selectivity                                                                             \r\n                           time:   [9.5795 us 9.6086 us 9.6447 us]\r\n                           change: [-0.8019% -0.3305% +0.1971%] (p = 0.21 > 0.05)\r\n                           No change in performance detected.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     3 (3.00%) low mild\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   filter context u8 low selectivity                                                                            \r\n                           time:   [88.982 us 89.197 us 89.475 us]\r\n                           change: [-0.5393% -0.2111% +0.1700%] (p = 0.25 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     1 (1.00%) low severe\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   filter context u8 high selectivity                                                                             \r\n                           time:   [1.8202 us 1.8233 us 1.8265 us]\r\n                           change: [-1.0453% -0.5680% -0.1510%] (p = 0.01 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     3 (3.00%) low mild\r\n     5 (5.00%) high mild\r\n   \r\n   filter context u8 very low selectivity                                                                             \r\n                           time:   [6.2812 us 6.2902 us 6.3008 us]\r\n                           change: [+1.4431% +2.0101% +2.5168%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     3 (3.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   filter context u8 w NULLs low selectivity                                                                            \r\n                           time:   [105.17 us 105.59 us 106.07 us]\r\n                           change: [+0.4925% +0.8519% +1.2438%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 17 outliers among 100 measurements (17.00%)\r\n     5 (5.00%) low mild\r\n     7 (7.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   filter context u8 w NULLs high selectivity                                                                             \r\n                           time:   [2.0865 us 2.0889 us 2.0915 us]\r\n                           change: [-0.7819% -0.4249% -0.0307%] (p = 0.02 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 7 outliers among 100 measurements (7.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   filter context u8 w NULLs very low selectivity                                                                            \r\n                           time:   [103.79 us 103.89 us 103.99 us]\r\n                           change: [-0.3091% +0.0545% +0.4393%] (p = 0.78 > 0.05)\r\n                           No change in performance detected.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     4 (4.00%) high mild\r\n   \r\n   filter context f32 low selectivity                                                                            \r\n                           time:   [106.97 us 107.14 us 107.32 us]\r\n                           change: [-0.1227% +0.1939% +0.5226%] (p = 0.25 > 0.05)\r\n                           No change in performance detected.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     2 (2.00%) low mild\r\n     2 (2.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   filter context f32 high selectivity                                                                             \r\n                           time:   [2.2141 us 2.2171 us 2.2202 us]\r\n                           change: [+1.4120% +1.8660% +2.3514%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 12 outliers among 100 measurements (12.00%)\r\n     2 (2.00%) low severe\r\n     3 (3.00%) low mild\r\n     4 (4.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   filter context f32 very low selectivity                                                                             \r\n                           time:   [14.434 us 14.458 us 14.482 us]\r\n                           change: [-0.7158% -0.2419% +0.2242%] (p = 0.32 > 0.05)\r\n                           No change in performance detected.\r\n   Found 4 outliers among 100 measurements (4.00%)\r\n     2 (2.00%) low severe\r\n     1 (1.00%) low mild\r\n     1 (1.00%) high mild\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/length_kernel-f9b5d42ca44f8471\r\n   length                  time:   [26.904 us 26.949 us 26.994 us]                    \r\n                           change: [+5.3416% +5.7166% +6.0977%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 2 outliers among 100 measurements (2.00%)\r\n     2 (2.00%) high mild\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/sort_kernel-5075ab6a937b1d1c\r\n   sort 2^10               time:   [133.99 us 134.20 us 134.43 us]                      \r\n                           change: [-1.1862% -0.8625% -0.5382%] (p = 0.00 < 0.05)\r\n                           Change within noise threshold.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) low mild\r\n     3 (3.00%) high mild\r\n   \r\n   sort 2^12               time:   [648.98 us 649.82 us 650.68 us]                      \r\n                           change: [-0.1925% +0.1137% +0.3914%] (p = 0.44 > 0.05)\r\n                           No change in performance detected.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     1 (1.00%) low severe\r\n     3 (3.00%) low mild\r\n     1 (1.00%) high mild\r\n   \r\n   sort nulls 2^10         time:   [162.81 us 163.30 us 163.87 us]                            \r\n                           change: [-0.3715% -0.0518% +0.3043%] (p = 0.76 > 0.05)\r\n                           No change in performance detected.\r\n   Found 10 outliers among 100 measurements (10.00%)\r\n     1 (1.00%) low severe\r\n     2 (2.00%) low mild\r\n     5 (5.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n   sort nulls 2^12         time:   [784.42 us 785.56 us 786.71 us]                            \r\n                           change: [-1.5899% -1.2958% -1.0139%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     3 (3.00%) low mild\r\n     1 (1.00%) high mild\r\n     2 (2.00%) high severe\r\n   \r\n        Running /home/vertexclique/projects/arrow/rust/target/release/deps/take_kernels-5681334f96563498\r\n   take i32 512            time:   [1.4828 us 1.4850 us 1.4873 us]                          \r\n                           change: [+10.283% +10.716% +11.109%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 5 outliers among 100 measurements (5.00%)\r\n     2 (2.00%) low severe\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   take i32 1024           time:   [2.6363 us 2.6452 us 2.6556 us]                           \r\n                           change: [+20.307% +20.947% +21.535%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 6 outliers among 100 measurements (6.00%)\r\n     1 (1.00%) low mild\r\n     2 (2.00%) high mild\r\n     3 (3.00%) high severe\r\n   \r\n   take bool 512           time:   [1.4307 us 1.4324 us 1.4341 us]                           \r\n                           change: [+34.741% +35.165% +35.642%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 3 outliers among 100 measurements (3.00%)\r\n     2 (2.00%) high mild\r\n     1 (1.00%) high severe\r\n   \r\n   take bool 1024          time:   [2.4476 us 2.4516 us 2.4560 us]                            \r\n                           change: [+38.662% +39.280% +39.922%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   Found 12 outliers among 100 measurements (12.00%)\r\n     2 (2.00%) low severe\r\n     3 (3.00%) low mild\r\n     2 (2.00%) high mild\r\n     5 (5.00%) high severe\r\n   \r\n   take str 512            time:   [4.2765 us 4.2836 us 4.2904 us]                          \r\n                           change: [-6.6173% -6.2652% -5.9479%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 11 outliers among 100 measurements (11.00%)\r\n     2 (2.00%) low severe\r\n     4 (4.00%) low mild\r\n     5 (5.00%) high mild\r\n   \r\n   take str 1024           time:   [7.6875 us 7.6992 us 7.7113 us]                           \r\n                           change: [-4.3967% -4.0820% -3.7321%] (p = 0.00 < 0.05)\r\n                           Performance has improved.\r\n   Found 8 outliers among 100 measurements (8.00%)\r\n     2 (2.00%) low severe\r\n     1 (1.00%) low mild\r\n     5 (5.00%) high mild\r\n   \r\n   ```\r\n   \r\n   </p>\r\n   </details>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T10:10:48.111+0000",
                    "updated": "2020-11-05T10:10:48.111+0000",
                    "started": "2020-11-05T10:10:48.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508066",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-722291087\n\n\n   https://issues.apache.org/jira/browse/ARROW-10500\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T10:33:39.159+0000",
                    "updated": "2020-11-05T10:33:39.159+0000",
                    "started": "2020-11-05T10:33:39.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508074",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-722556564\n\n\n   Test failure seems to be because the `sum` kernel is now adding the remainder elements first, resulting in slightly different rounding. This might be on example where we should actually assert with some epsilon value.\r\n   \r\n   Was there a specific test failure on a big endian machine with the previous code?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T18:25:25.908+0000",
                    "updated": "2020-11-05T18:25:25.908+0000",
                    "started": "2020-11-05T18:25:25.908+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508215",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#discussion_r518730329\n\n\n\n##########\nFile path: rust/arrow/src/util/bit_slice_iterator.rs\n##########\n@@ -0,0 +1,210 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::buffer::Buffer;\n+\n+use bitvec::prelude::*;\n+use bitvec::slice::ChunksExact;\n+\n+use std::fmt::Debug;\n+\n+///\n+/// Bit slice representation of buffer data\n\nReview comment:\n       I wasn't familiar with the term \"bit slice\" before reading this PR (It is mentioned in the docs of https://docs.rs/bitvec/0.19.4/bitvec/, where perhaps the term came from.\r\n   \r\n   ```suggestion\r\n   /// Bit slice representation of buffer data. A bit slice is a\r\n   /// view on top of a buffer of bytes which can be used to\r\n   /// access each bit.\r\n   ```\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -259,16 +260,20 @@ impl Buffer {\n     /// Returns a slice of this buffer starting at a certain bit offset.\n     /// If the offset is byte-aligned the returned buffer is a shallow clone,\n     /// otherwise a new buffer is allocated and filled with a copy of the bits in the range.\n-    pub fn bit_slice(&self, offset: usize, len: usize) -> Self {\n-        if offset % 8 == 0 && len % 8 == 0 {\n-            return self.slice(offset / 8);\n+    pub fn bit_view(&self, offset_in_bits: usize, len_in_bits: usize) -> Self {\n+        if offset_in_bits % 8 == 0 && len_in_bits % 8 == 0 {\n+            self.slice(offset_in_bits / 8)\n\nReview comment:\n       I don't fully understand why this doesn't need to refer to `len_in_bits` -- how do we know that `len_in_bits` covers the entire buffer? Maybe this should be `self.slice(len_in_bits/8)`?\n\n##########\nFile path: rust/arrow/src/util/bit_slice_iterator.rs\n##########\n@@ -0,0 +1,210 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::buffer::Buffer;\n+\n+use bitvec::prelude::*;\n+use bitvec::slice::ChunksExact;\n+\n+use std::fmt::Debug;\n+\n+///\n+/// Bit slice representation of buffer data\n+#[derive(Debug)]\n+pub struct BufferBitSlice<'a> {\n+    buffer_data: &'a [u8],\n+    bit_slice: &'a BitSlice<LocalBits, u8>,\n+}\n+\n+impl<'a> BufferBitSlice<'a> {\n+    ///\n+    /// Creates a bit slice over the given data\n+    #[inline]\n+    pub fn new(buffer_data: &'a [u8]) -> Self {\n+        let bit_slice = BitSlice::<LocalBits, _>::from_slice(buffer_data).unwrap();\n+\n+        BufferBitSlice {\n+            buffer_data,\n+            bit_slice,\n+        }\n+    }\n+\n+    ///\n+    /// Returns immutable view with the given offset in bits and length in bits.\n\nReview comment:\n       ```suggestion\r\n       /// Returns a new bit slice relative to self, with the given offset in bits and length in bits.\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T12:55:56.710+0000",
                    "updated": "2020-11-06T12:55:56.710+0000",
                    "started": "2020-11-06T12:55:56.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508451",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#discussion_r518733998\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -402,19 +407,27 @@ where\n     let mut result =\n         MutableBuffer::new(ceil(len_in_bits, 8)).with_bitset(len_in_bits / 64 * 8, false);\n \n-    let left_chunks = left.bit_chunks(left_offset_in_bits, len_in_bits);\n-    let right_chunks = right.bit_chunks(right_offset_in_bits, len_in_bits);\n+    let left_slice = left.bit_slice().view(left_offset_in_bits, len_in_bits);\n\nReview comment:\n       Can you explain the rationale for this change? It seems to use more code to accomplish the same functionality without any performance improvement. I am likely missing something\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T13:01:52.933+0000",
                    "updated": "2020-11-06T13:01:52.933+0000",
                    "started": "2020-11-06T13:01:52.933+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508454",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on a change in pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#discussion_r518741098\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -259,16 +260,20 @@ impl Buffer {\n     /// Returns a slice of this buffer starting at a certain bit offset.\n     /// If the offset is byte-aligned the returned buffer is a shallow clone,\n     /// otherwise a new buffer is allocated and filled with a copy of the bits in the range.\n-    pub fn bit_slice(&self, offset: usize, len: usize) -> Self {\n-        if offset % 8 == 0 && len % 8 == 0 {\n-            return self.slice(offset / 8);\n+    pub fn bit_view(&self, offset_in_bits: usize, len_in_bits: usize) -> Self {\n+        if offset_in_bits % 8 == 0 && len_in_bits % 8 == 0 {\n+            self.slice(offset_in_bits / 8)\n\nReview comment:\n       That is the idea, bit view doesn't cover the whole Buffer. If you give the whole buffer's length in bits and start offset as 0 then it will cover the whole buffer. Otherwise, we can use a partial bit view on the Buffer.\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -402,19 +407,27 @@ where\n     let mut result =\n         MutableBuffer::new(ceil(len_in_bits, 8)).with_bitset(len_in_bits / 64 * 8, false);\n \n-    let left_chunks = left.bit_chunks(left_offset_in_bits, len_in_bits);\n-    let right_chunks = right.bit_chunks(right_offset_in_bits, len_in_bits);\n+    let left_slice = left.bit_slice().view(left_offset_in_bits, len_in_bits);\n\nReview comment:\n       I have moved the remainder calculation here. The remainder calculation was at the end of this method. It looks like more code because now we explicitly know what is bit view and what is chunk iterator. It was quite a bit blurry before. Now you can have a bit view over the buffer while having chunks and remaining bits do their work. It is for readability and not consuming chunk iterator.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T13:21:32.371+0000",
                    "updated": "2020-11-06T13:21:32.371+0000",
                    "started": "2020-11-06T13:21:32.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508463",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723077892\n\n\n   I am going to change the whole data fusion tests to take machine epsilon into consideration. Didn't see that coming.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T13:22:25.500+0000",
                    "updated": "2020-11-06T13:22:25.500+0000",
                    "started": "2020-11-06T13:22:25.500+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508464",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723088094\n\n\n   It seems like https://github.com/apache/arrow/pull/8571 may conflict with this PR as well\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T13:45:03.680+0000",
                    "updated": "2020-11-06T13:45:03.680+0000",
                    "started": "2020-11-06T13:45:03.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508467",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723092434\n\n\n   This PR solves that problem intrinsically. Yes, it is a conflict.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T13:53:56.808+0000",
                    "updated": "2020-11-06T13:53:56.808+0000",
                    "started": "2020-11-06T13:53:56.808+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508472",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723114191\n\n\n   So my feedback here is that it is not clear to me what this PR is trying to accomplish (aka answer the question of *why* make the changes in this PR) and thus it is not clear how to review / evaluate it. \r\n   \r\n   If the PR's aim is to add support for endianness, I would expect some demonstration that the new code can do something that the old code can't (aka tests)\r\n   \r\n   If the PR's aim is to fix bug, I would expect some explanation / demonstration / of something that fails without the changes in the PR and passes with changes in the PR. The bugs this PR's changes fixes are probably obvious to you, but sadly they are not to me :(\r\n   \r\n   If the PR's aim is to make the code easier to understand, I would expect some description of why the new code is easier to understand than the old (which will be a subjective judgement, for sure).\r\n   \r\n   Since this PR seems to have elements of all three goals, but is light on the explination, I am struggling to evaluate it concisely\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T14:38:23.762+0000",
                    "updated": "2020-11-06T14:38:23.762+0000",
                    "started": "2020-11-06T14:38:23.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508494",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb edited a comment on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723114191\n\n\n   So my feedback here is that it is not clear to me what this PR is trying to accomplish (aka answer the question of *why* make the changes in this PR) and thus it is not clear how to review / evaluate it. \r\n   \r\n   If the PR's aim is to add support for endianness, I would expect some demonstration that the new code can do something that the old code can't (aka tests)\r\n   \r\n   If the PR's aim is to fix bug, I would expect some explanation / demonstration / of something that fails without the changes in the PR and passes with changes in the PR. The bugs this PR's changes fixes are probably obvious to you, but sadly they are not to me :(\r\n   \r\n   If the PR's aim is to make the code easier to understand, I would expect some description of why the new code is easier to understand than the old (which will be a subjective judgement, for sure).\r\n   \r\n   Since this PR seems to have elements of all three goals, but is light on the explanation, I am struggling to evaluate it concisely\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T14:38:36.653+0000",
                    "updated": "2020-11-06T14:38:36.653+0000",
                    "started": "2020-11-06T14:38:36.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508495",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#discussion_r518961426\n\n\n\n##########\nFile path: rust/arrow/src/buffer.rs\n##########\n@@ -259,16 +260,20 @@ impl Buffer {\n     /// Returns a slice of this buffer starting at a certain bit offset.\n     /// If the offset is byte-aligned the returned buffer is a shallow clone,\n     /// otherwise a new buffer is allocated and filled with a copy of the bits in the range.\n-    pub fn bit_slice(&self, offset: usize, len: usize) -> Self {\n-        if offset % 8 == 0 && len % 8 == 0 {\n-            return self.slice(offset / 8);\n+    pub fn bit_view(&self, offset_in_bits: usize, len_in_bits: usize) -> Self {\n+        if offset_in_bits % 8 == 0 && len_in_bits % 8 == 0 {\n+            self.slice(offset_in_bits / 8)\n\nReview comment:\n       > If you give the whole buffer's length in bits and start offset as 0 then it will cover the whole buffer\r\n   \r\n   Right, what I don't understand is how the test for `len_in_bits % 8 == 0` is checking for the whole buffer length. It seems like it is checking that `len_in_bits` is a multiple of 8 (aka represents whole bytes)\r\n   \r\n   Maybe there is some assumption here like `self.len_in_bits < 8`? \n\n##########\nFile path: rust/arrow/src/util/bit_slice_iterator.rs\n##########\n@@ -63,7 +63,7 @@ impl<'a> BufferBitSlice<'a> {\n     where\n         T: BitMemory,\n     {\n-        let offset_size_in_bits = 8 * std::mem::size_of::<u64>();\n\nReview comment:\n       \ud83d\udc4d \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T19:34:37.167+0000",
                    "updated": "2020-11-06T19:34:37.167+0000",
                    "started": "2020-11-06T19:34:37.167+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508569",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723261667\n\n\n   > So my feedback here is that it is not clear to me what this PR is trying to accomplish (aka answer the question of why make the changes in this pr) and thus it is not clear how to review / evaluate it.\r\n   \r\n   Here comes the explanation @alamb and team:\r\n   > If the PR's aim is to fix bug, I would expect some explanation / demonstration / of something that fails without the changes in the PR and passes with changes in the PR. The bugs this PR's changes fixes are probably obvious to you, but sadly they are not to me :(\r\n   \r\n   1. Bugfix: Other pr (#8571) fixes one offset problem. This pr fixes it intrinsically, tests are added for that in commit: d6e4744 . Moreover, data fusion tests are not using machine epsilon (small read: https://floating-point-gui.de/errors/comparison/), and I have just implemented an assertion method to be used with data fusion tests in c108026 . That was yet another bug. Now a small note: I didn't add these tests initially to not to be understood as rude against @jhorstmann and the pr opened there, but as you can see I have committed the exact tests in d6e4744 with the co-authoring feature to make it cumulative effort.\r\n   \r\n   2. Extensibility: Now iterators can be extended with different iterator types. Now, if you want, bit view can dispense not exact size chunk iterator or bit by bit iterator. Whatever you like. Just adding the wrapping iterator for cases makes it easier.\r\n   \r\n   > If the PR's aim is to add support for endianness, I would expect some demonstration that the new code can do something that the old code can't (aka tests)\r\n   \r\n   3. Architecture support: Now it can compile and run on big-endian architectures. Still, we have work to do there but we will get there eventually. For big-endian tests are written in c7428fb . Moreover, I think we should write more generic implementations, like how we are doing over the last 4 months, and still support platforms that we have promised. Personally, I don't want to write too much architecture-specific code in Rust to make it work over the upcoming months, and I can also advocate for that for the members of the Arrow Rust team. In the C++ version, I saw these and you can infer from how it is hard to support multiple platforms: https://github.com/apache/arrow/pull/7507/files#diff-c3b0484ad8586ff46fa035d446a7d1c3a30cd35d13cd05678c99814938e07d5bR78-R214\r\n   \r\n   4. Preventing bugs: As you can see the C++ implementation's sophisticated code, it is really easy to make mistakes in this field, while doing bit shaking, bit twiddling etc. You might carry one bit right but you don't consider the carry and it works for a long time until we realize that it is not working anymore. So abstracting some things from the development is always good from my point of view. And I find this pragmatically correct for this case.\r\n   \r\n   Here you can see mips (be) test results:\r\n   ```\r\n      Compiling arrow v3.0.0-SNAPSHOT (/project)\r\n       Finished test [unoptimized + debuginfo] target(s) in 5.64s\r\n        Running /target/mips-unknown-linux-gnu/debug/deps/arrow-ba04cf069343d58e\r\n   \r\n   running 6 tests\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_aligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_reinterpret ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_1_byte ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_bits_across_bytes ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_bits_large ... ok\r\n   ```\r\n   \r\n   Here you can see armv7 (le) test results:\r\n   ```\r\n       Finished test [unoptimized + debuginfo] target(s) in 0.11s\r\n        Running /target/armv7-unknown-linux-gnueabihf/debug/deps/arrow-6ffb743de7744875\r\n   \r\n   running 6 tests\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_aligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_reinterpret ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_1_byte ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_bits_across_bytes ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_bits_large ... ok\r\n   ```\r\n   \r\n   > If the PR's aim is to make the code easier to understand, I would expect some description of why the new code is easier to understand than the old (which will be a subjective judgement, for sure).\r\n   \r\n   4. Flexibility: You can see byte reinterpretation as I've mentioned/promised before in the tests contained in commit c7428fb . Moreover, you can see that the new implementation without comments is only 100 lines exact. Also, views, buffers, iterators, bit sequence interpretation is completely separate. Obviously, as you said, that is subjective to the reader. I find the separation better atm.\r\n   \r\n   > Since this PR seems to have elements of all three goals, but is light on the explanation, I am struggling to evaluate it concisely\r\n   \r\n   I hope I have answered all your questions.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T19:35:31.188+0000",
                    "updated": "2020-11-06T19:35:31.188+0000",
                    "started": "2020-11-06T19:35:31.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508570",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723261686\n\n\n   fyi @jhorstmann  this PR likely would cause conflicts with https://github.com/apache/arrow/pull/8571 -- I wonder if you have any opinions on how to proceed\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T19:35:34.135+0000",
                    "updated": "2020-11-06T19:35:34.135+0000",
                    "started": "2020-11-06T19:35:34.135+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508571",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723268680\n\n\n   > but as you can see I have committed the exact tests in d6e4744 with the co-authoring feature to make it cumulative effort.\r\n   \r\n   Thank you!\r\n   \r\n   I think with the additional tests demonstrating bug fixes and features, this PR is a good step forward and I would be amenable to merging it\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T19:50:44.335+0000",
                    "updated": "2020-11-06T19:50:44.335+0000",
                    "started": "2020-11-06T19:50:44.335+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508576",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique edited a comment on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723261667\n\n\n   > So my feedback here is that it is not clear to me what this PR is trying to accomplish (aka answer the question of why make the changes in this pr) and thus it is not clear how to review / evaluate it.\r\n   \r\n   Here comes the explanation @alamb and team:\r\n   > If the PR's aim is to fix bug, I would expect some explanation / demonstration / of something that fails without the changes in the PR and passes with changes in the PR. The bugs this PR's changes fixes are probably obvious to you, but sadly they are not to me :(\r\n   \r\n   1. Bugfix: Other pr (#8571) fixes one offset problem. This pr fixes it intrinsically, tests are added for that in commit: d6e4744 . Moreover, data fusion tests are not using machine epsilon (small read: https://floating-point-gui.de/errors/comparison/), and I have just implemented an assertion method to be used with data fusion tests in c108026 . That was yet another bug. Now a small note: I didn't add these tests initially to not to be understood as rude against @jhorstmann and the pr opened there, but as you can see I have committed the exact tests in d6e4744 with the co-authoring feature to make it cumulative effort.\r\n   \r\n   2. Extensibility: Now iterators can be extended with different iterator types. Now, if you want, bit view can dispense not exact size chunk iterator or bit by bit iterator. Whatever you like. Just adding the wrapping iterator for cases makes it easier.\r\n   \r\n   > If the PR's aim is to add support for endianness, I would expect some demonstration that the new code can do something that the old code can't (aka tests)\r\n   \r\n   3. Architecture support: Now it can compile and run on big-endian architectures. Still, we have work to do there but we will get there eventually. For big-endian tests are written in c7428fb . Moreover, I think we should write more generic implementations, like how we are doing over the last 4 months, and still support platforms that we have promised. Personally, I don't want to write too much architecture-specific code in Rust to make it work over the upcoming months, and I can also advocate for that for the members of the Arrow Rust team. In the C++ version, I saw these and you can infer from how it is hard to support multiple platforms: https://github.com/apache/arrow/pull/7507/files#diff-c3b0484ad8586ff46fa035d446a7d1c3a30cd35d13cd05678c99814938e07d5bR78-R214\r\n   \r\n   Here you can see mips (be) test results:\r\n   ```\r\n      Compiling arrow v3.0.0-SNAPSHOT (/project)\r\n       Finished test [unoptimized + debuginfo] target(s) in 5.64s\r\n        Running /target/mips-unknown-linux-gnu/debug/deps/arrow-ba04cf069343d58e\r\n   \r\n   running 6 tests\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_aligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_reinterpret ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_1_byte ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_bits_across_bytes ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_bits_large ... ok\r\n   ```\r\n   \r\n   Here you can see armv7 (le) test results:\r\n   ```\r\n       Finished test [unoptimized + debuginfo] target(s) in 0.11s\r\n        Running /target/armv7-unknown-linux-gnueabihf/debug/deps/arrow-6ffb743de7744875\r\n   \r\n   running 6 tests\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_aligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_reinterpret ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_1_byte ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_bits_across_bytes ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_bits_large ... ok\r\n   ```\r\n   \r\n   4. Preventing bugs: As you can see the C++ implementation's sophisticated code, it is really easy to make mistakes in this field, while doing bit shaking, bit twiddling etc. You might carry one bit right but you don't consider the carry and it works for a long time until we realize that it is not working anymore. So abstracting some things from the development is always good from my point of view. And I find this pragmatically correct for this case.\r\n   \r\n   > If the PR's aim is to make the code easier to understand, I would expect some description of why the new code is easier to understand than the old (which will be a subjective judgement, for sure).\r\n   \r\n   4. Flexibility: You can see byte reinterpretation as I've mentioned/promised before in the tests contained in commit c7428fb . Moreover, you can see that the new implementation without comments is only 100 lines exact. Also, views, buffers, iterators, bit sequence interpretation is completely separate. Obviously, as you said, that is subjective to the reader. I find the separation better atm.\r\n   \r\n   > Since this PR seems to have elements of all three goals, but is light on the explanation, I am struggling to evaluate it concisely\r\n   \r\n   I hope I have answered all your questions.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T19:54:17.013+0000",
                    "updated": "2020-11-06T19:54:17.013+0000",
                    "started": "2020-11-06T19:54:17.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508580",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vertexclique edited a comment on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723261667\n\n\n   > So my feedback here is that it is not clear to me what this PR is trying to accomplish (aka answer the question of why make the changes in this pr) and thus it is not clear how to review / evaluate it.\r\n   \r\n   Here comes the explanation @alamb and team:\r\n   > If the PR's aim is to fix bug, I would expect some explanation / demonstration / of something that fails without the changes in the PR and passes with changes in the PR. The bugs this PR's changes fixes are probably obvious to you, but sadly they are not to me :(\r\n   \r\n   1. Bugfix: Other pr (#8571) fixes one offset problem. This pr fixes it intrinsically, tests are added for that in commit: d6e4744 . Moreover, data fusion tests are not using machine epsilon (small read: https://floating-point-gui.de/errors/comparison/), and I have just implemented an assertion method to be used with data fusion tests in c108026 . That was yet another bug. Now a small note: I didn't add these tests initially to not to be understood as rude against @jhorstmann and the pr opened there, but as you can see I have committed the exact tests in d6e4744 with the co-authoring feature to make it cumulative effort.\r\n   \r\n   2. Extensibility: Now iterators can be extended with different iterator types. Now, if you want, bit view can dispense not exact size chunk iterator or bit by bit iterator. Whatever you like. Just adding the wrapping iterator for cases makes it easier.\r\n   \r\n   > If the PR's aim is to add support for endianness, I would expect some demonstration that the new code can do something that the old code can't (aka tests)\r\n   \r\n   3. Architecture support: Now it can compile and run on big-endian architectures. Still, we have work to do there but we will get there eventually. For big-endian tests are written in c7428fb . Moreover, I think we should write more generic implementations, like how we are doing over the last 4 months, and still support platforms that we have promised. Personally, I don't want to write too much architecture-specific code in Rust to make it work over the upcoming months, and I can also advocate for that for the members of the Arrow Rust team. In the C++ version, I saw these and you can infer from how it is hard to support multiple platforms: https://github.com/apache/arrow/pull/7507/files#diff-c3b0484ad8586ff46fa035d446a7d1c3a30cd35d13cd05678c99814938e07d5bR78-R214\r\n   \r\n   Here you can see mips (be) test results:\r\n   ```\r\n      Compiling arrow v3.0.0-SNAPSHOT (/project)\r\n       Finished test [unoptimized + debuginfo] target(s) in 5.64s\r\n        Running /target/mips-unknown-linux-gnu/debug/deps/arrow-ba04cf069343d58e\r\n   \r\n   running 6 tests\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_aligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_reinterpret ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_1_byte ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_bits_across_bytes ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_big_endian::test_bit_slice_iter_unaligned_remainder_bits_large ... ok\r\n   ```\r\n   \r\n   Here you can see armv7 (le) test results:\r\n   ```\r\n       Finished test [unoptimized + debuginfo] target(s) in 0.11s\r\n        Running /target/armv7-unknown-linux-gnueabihf/debug/deps/arrow-6ffb743de7744875\r\n   \r\n   running 6 tests\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_aligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_reinterpret ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_1_byte ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_bits_across_bytes ... ok\r\n   test util::bit_slice_iterator::tests_bit_slices_little_endian::test_bit_slice_iter_unaligned_remainder_bits_large ... ok\r\n   ```\r\n   \r\n   4. Preventing bugs: As you can see the C++ implementation's sophisticated code, it is really easy to make mistakes in this field, while doing bit shaking, bit twiddling etc. You might carry one bit right but you don't consider the carry and it works for a long time until we realize that it is not working anymore. So abstracting some things from the development is always good from my point of view. And I find this pragmatically correct for this case.\r\n   \r\n   > If the PR's aim is to make the code easier to understand, I would expect some description of why the new code is easier to understand than the old (which will be a subjective judgement, for sure).\r\n   \r\n   5. Flexibility: You can see byte reinterpretation as I've mentioned/promised before in the tests contained in commit c7428fb . Moreover, you can see that the new implementation without comments is only 100 lines exact. Also, views, buffers, iterators, bit sequence interpretation is completely separate. Obviously, as you said, that is subjective to the reader. I find the separation better atm.\r\n   \r\n   > Since this PR seems to have elements of all three goals, but is light on the explanation, I am struggling to evaluate it concisely\r\n   \r\n   I hope I have answered all your questions.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T20:47:33.525+0000",
                    "updated": "2020-11-06T20:47:33.525+0000",
                    "started": "2020-11-06T20:47:33.525+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508601",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#discussion_r519019958\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -152,9 +152,21 @@ where\n             let data_chunks = data.chunks_exact(64);\n             let remainder = data_chunks.remainder();\n \n-            let bit_chunks = buffer.bit_chunks(array.offset(), array.len());\n+            let buffer_slice = buffer.bit_slice().view(array.offset(), array.len());\n+            let buffer_chunks = buffer_slice.chunks::<u64>();\n+\n+            let buffer_remainder_bits: u64 = buffer_chunks.remainder_bits();\n+\n+            let buffer_chunk_iter = buffer_chunks.interpret();\n+\n+            remainder.iter().enumerate().for_each(|(i, value)| {\n\nReview comment:\n       Can we move the remainder loop down again so that we are summing elements in the order that they are in the array?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T21:43:16.389+0000",
                    "updated": "2020-11-06T21:43:16.389+0000",
                    "started": "2020-11-06T21:43:16.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508621",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#discussion_r519025720\n\n\n\n##########\nFile path: rust/arrow/src/util/bit_slice_iterator.rs\n##########\n@@ -0,0 +1,368 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::buffer::Buffer;\n+\n+use bitvec::prelude::*;\n+use bitvec::slice::ChunksExact;\n+\n+use std::fmt::Debug;\n+\n+///\n+/// Bit slice representation of buffer data\n+#[derive(Debug)]\n+pub struct BufferBitSlice<'a> {\n+    buffer_data: &'a [u8],\n+    bit_slice: &'a BitSlice<LocalBits, u8>,\n+}\n+\n+impl<'a> BufferBitSlice<'a> {\n+    ///\n+    /// Creates a bit slice over the given data\n+    #[inline]\n+    pub fn new(buffer_data: &'a [u8]) -> Self {\n+        let bit_slice = BitSlice::<LocalBits, _>::from_slice(buffer_data).unwrap();\n+\n+        BufferBitSlice {\n+            buffer_data,\n+            bit_slice,\n+        }\n+    }\n+\n+    ///\n+    /// Returns immutable view with the given offset in bits and length in bits.\n+    /// This view have zero-copy representation over the actual data.\n+    #[inline]\n+    pub fn view(&self, offset_in_bits: usize, len_in_bits: usize) -> Self {\n+        Self {\n+            buffer_data: self.buffer_data,\n+            bit_slice: &self.bit_slice[offset_in_bits..offset_in_bits + len_in_bits],\n+        }\n+    }\n+\n+    ///\n+    /// Returns bit chunks in native 64-bit allocation size.\n+    /// Native representations in Arrow follows 64-bit convention.\n+    /// Chunks can still be reinterpreted in any primitive type lower than u64.\n+    #[inline]\n+    pub fn chunks<T>(&self) -> BufferBitChunksExact<T>\n+    where\n+        T: BitMemory,\n+    {\n+        let offset_size_in_bits = 8 * std::mem::size_of::<T>();\n+        let chunks_exact = self.bit_slice.chunks_exact(offset_size_in_bits);\n+        let remainder_bits = chunks_exact.remainder();\n+        let remainder: T = if remainder_bits.len() == 0 {\n+            T::default()\n+        } else {\n+            remainder_bits.load::<T>()\n+        };\n+        BufferBitChunksExact {\n+            chunks_exact,\n+            remainder,\n+            remainder_len_in_bits: remainder_bits.len(),\n+        }\n+    }\n+\n+    ///\n+    /// Converts the bit view into the Buffer.\n+    /// Buffer is always byte-aligned and well-aligned.\n+    #[inline]\n+    pub fn as_buffer(&self) -> Buffer {\n+        Buffer::from(self.bit_slice.as_slice())\n+    }\n+}\n+\n+///\n+/// Exact chunk view over the bit slice\n+#[derive(Clone, Debug)]\n+pub struct BufferBitChunksExact<'a, T>\n+where\n+    T: BitMemory,\n+{\n+    chunks_exact: ChunksExact<'a, LocalBits, u8>,\n+    remainder: T,\n+    remainder_len_in_bits: usize,\n+}\n+\n+impl<'a, T> BufferBitChunksExact<'a, T>\n+where\n+    T: BitMemory,\n+{\n+    ///\n+    /// Returns remainder bit length from the exact chunk iterator\n+    #[inline]\n+    pub fn remainder_bit_len(&self) -> usize {\n+        self.remainder_len_in_bits\n+    }\n+\n+    ///\n+    /// Returns the remainder bits interpreted as given type.\n+    #[inline]\n+    pub fn remainder_bits(&self) -> T {\n+        self.remainder\n+    }\n+\n+    ///\n+    /// Interprets underlying chunk's view's bits as a given type.\n+    #[inline]\n+    pub fn interpret(self) -> impl Iterator<Item = T> + 'a\n+    where\n+        T: BitMemory,\n+    {\n+        self.chunks_exact.map(|e| e.load::<T>())\n+    }\n+\n+    ///\n+    /// Returns underlying iterator as it is\n+    #[inline]\n+    pub fn iter(&self) -> &ChunksExact<'a, LocalBits, u8> {\n+        &self.chunks_exact\n+    }\n+}\n+\n+///\n+/// Implements consuming iterator for exact chunk iterator\n+impl<'a, T> IntoIterator for BufferBitChunksExact<'a, T>\n+where\n+    T: BitMemory,\n+{\n+    type Item = &'a BitSlice<LocalBits, u8>;\n+    type IntoIter = ChunksExact<'a, LocalBits, u8>;\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.chunks_exact\n+    }\n+}\n+\n+#[cfg(all(test, target_endian = \"little\"))]\n+mod tests_bit_slices_little_endian {\n+    use super::*;\n+    use crate::datatypes::ToByteSlice;\n+\n+    #[test]\n+    fn test_bit_slice_iter_aligned() {\n+        let input: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        let bit_slice = buffer.bit_slice();\n+        let result = bit_slice.chunks().interpret().collect::<Vec<u64>>();\n+\n+        assert_eq!(vec![0x0706050403020100], result);\n+    }\n+\n+    #[test]\n+    fn test_bit_slice_iter_unaligned() {\n+        let input: &[u8] = &[\n+            0b00000000, 0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000,\n+            0b00100000, 0b01000000, 0b11111111,\n+        ];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        let bit_slice = buffer.bit_slice().view(4, 64);\n+        let chunks = bit_slice.chunks::<u64>();\n+\n+        assert_eq!(0, chunks.remainder_bit_len());\n+        assert_eq!(0, chunks.remainder_bits());\n+\n+        let result = chunks.interpret().collect::<Vec<u64>>();\n+\n+        assert_eq!(\n+            vec![0b1111_01000000_00100000_00010000_00001000_00000100_00000010_00000001_0000],\n+            result\n+        );\n+    }\n+\n+    #[test]\n+    fn test_bit_slice_iter_unaligned_remainder_1_byte() {\n+        let input: &[u8] = &[\n+            0b00000000, 0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000,\n+            0b00100000, 0b01000000, 0b11111111,\n+        ];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        let bit_slice = buffer.bit_slice().view(4, 66);\n+        let chunks = bit_slice.chunks::<u64>();\n+\n+        assert_eq!(2, chunks.remainder_bit_len());\n+        assert_eq!(0b00000011, chunks.remainder_bits());\n+\n+        let result = chunks.interpret().collect::<Vec<u64>>();\n+\n+        assert_eq!(\n+            vec![0b1111_01000000_00100000_00010000_00001000_00000100_00000010_00000001_0000],\n+            result\n+        );\n+    }\n+\n+    #[test]\n+    fn test_bit_slice_iter_unaligned_remainder_bits_across_bytes() {\n+        let input: &[u8] = &[0b00111111, 0b11111100];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        // remainder contains bits from both bytes\n+        // result should be the highest 2 bits from first byte followed by lowest 5 bits of second bytes\n+        let bit_slice = buffer.bit_slice().view(6, 7);\n+        let chunks = bit_slice.chunks::<u64>();\n+\n+        assert_eq!(7, chunks.remainder_bit_len());\n+        assert_eq!(0b1110000, chunks.remainder_bits());\n+    }\n+\n+    #[test]\n+    fn test_bit_slice_iter_unaligned_remainder_bits_large() {\n+        let input: &[u8] = &[\n+            0b11111111, 0b00000000, 0b11111111, 0b00000000, 0b11111111, 0b00000000,\n+            0b11111111, 0b00000000, 0b11111111,\n+        ];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        let bit_slice = buffer.bit_slice().view(2, 63);\n+        let chunks = bit_slice.chunks::<u64>();\n+\n+        assert_eq!(63, chunks.remainder_bit_len());\n+        assert_eq!(\n+            0b1000000_00111111_11000000_00111111_11000000_00111111_11000000_00111111,\n+            chunks.remainder_bits()\n+        );\n+    }\n+\n+    #[test]\n+    fn test_bit_slice_iter_reinterpret() {\n+        assert_eq!(LocalBits::default(), Lsb0::default());\n+        let buffer_slice = &[0, 1, 2, 3, 4, 5, 6, 7].to_byte_slice();\n+        // Name of the bit slice comes from byte slice, since it is still on the stack and behaves similarly to Rust's byte slice.\n+        let buffer = Buffer::from(buffer_slice);\n+\n+        // Let's get the whole buffer.\n+        let bit_slice = buffer.bit_slice().view(0, buffer_slice.len() * 8);\n+        // Let's also get a chunked bits as u8, not u64 this time...\n+        let chunks = bit_slice.chunks::<u8>();\n+\n+        let result = chunks.interpret().collect::<Vec<_>>();\n+        assert_eq!(buffer_slice.to_vec(), result);\n+    }\n+}\n+\n+#[cfg(all(test, target_endian = \"big\"))]\n+mod tests_bit_slices_big_endian {\n+    use super::*;\n+    use crate::datatypes::ToByteSlice;\n+\n+    #[test]\n+    fn test_bit_slice_iter_aligned() {\n+        let input: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        let bit_slice = buffer.bit_slice();\n+        let result = bit_slice.chunks().interpret().collect::<Vec<u64>>();\n+\n+        assert_eq!(vec![0x0001020304050607], result);\n+    }\n+\n+    #[test]\n+    fn test_bit_slice_iter_unaligned() {\n+        let input: &[u8] = &[\n+            0b00000000, 0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000,\n+            0b00100000, 0b01000000, 0b11111111,\n+        ];\n+        let buffer: Buffer = Buffer::from(input);\n+\n+        let bit_slice = buffer.bit_slice().view(4, 64);\n+        let chunks = bit_slice.chunks::<u64>();\n+\n+        assert_eq!(0, chunks.remainder_bit_len());\n+        assert_eq!(0, chunks.remainder_bits());\n+\n+        let result = chunks.interpret().collect::<Vec<u64>>();\n+\n+        assert_eq!(\n\nReview comment:\n       I'm wondering whether this is really correct, the way I understood it is that little/big endian only affect the layout of bytes in memory, not how individual bits are accessed in a number. In this testcase the least significant bit of the first byte is zero and would be considered the first value if this was a boolean array or null bitmap. Same for the 4th least significant bit, which is where the slice here should start. This means the least significant bit of the chunk should be zero.\r\n   \r\n   Or am I missing something?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T21:57:29.636+0000",
                    "updated": "2020-11-06T21:57:29.636+0000",
                    "started": "2020-11-06T21:57:29.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508630",
                    "issueId": "13338978"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/worklog/508637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on pull request #8598:\nURL: https://github.com/apache/arrow/pull/8598#issuecomment-723326224\n\n\n   When I introduced this initially in [ARROW-10040][1] one feedback was that big endian was not supported yet anyway so it would not be necessary to worry about that now. I think it could be made to work rather easily by calling `to_le` in 2-3 places if I had access to a big endian test machine or CI pipeline.\r\n   \r\n   Adding a dependency that already implements the chunking and remainder logic is nice. I would have expected that to reduce the code size though.\r\n   \r\n   The `buffer_bit_ops` microbenchmark seems to be affected quite a bit:\r\n   ```\r\n   buffer_bit_ops and      time:   [1.1393 us 1.1413 us 1.1433 us]                                \r\n                           change: [+889.05% +892.72% +896.41%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   ```\r\n   \r\n   The sum aggregation kernel is another bigger user of the bit slice functions and also regressed a bit:\r\n   ```\r\n   sum nulls 512           time:   [305.83 ns 306.31 ns 306.82 ns]                          \r\n                           change: [+25.194% +25.552% +25.936%] (p = 0.00 < 0.05)\r\n                           Performance has regressed.\r\n   ```\r\n   \r\n   Most benchmarks don't seem to be affected much, probably because there is some other overhead or they are not using the chunked functions. Cast kernels for example are implemented using iterators of optional values and so use a different code path.\r\n   \r\n    [1]: https://github.com/apache/arrow/pull/8262\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T22:22:14.415+0000",
                    "updated": "2020-11-06T22:22:14.415+0000",
                    "started": "2020-11-06T22:22:14.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508637",
                    "issueId": "13338978"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f8df9b9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@195b7709[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33bd4768[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@719c8d29[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d162e7b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2735901e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7eea0597[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6b8a2aa6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2723b45a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2c9d75c0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f51b79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3810de9b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 26 12:37:43 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-26T12:37:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10500/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-11-05T09:38:59.000+0000",
        "updated": "2021-04-26T12:37:45.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, bit slice, bit view, and operations all kind of bit operations looking blurry.\r\n # Support native endianness\r\n # Fix problems related to bit operations\r\n # Method docs are written.\r\n # Separate view and bit operation\r\n # Have good benchmarks still",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Refactor bit slice, bit view iterator for array buffers",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13338978/comment/17332141",
                    "id": "17332141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Migrated to github: https://github.com/apache/arrow-rs/issues/116",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-26T12:37:43.120+0000",
                    "updated": "2021-04-26T12:37:43.120+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kb40:",
        "customfield_12314139": null
    }
}