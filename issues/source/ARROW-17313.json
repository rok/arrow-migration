{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13475234",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234",
    "key": "ARROW-17313",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 20400,
            "total": 20400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17313/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/799542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#issuecomment-1210050261\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n",
                    "created": "2022-08-10T01:28:44.874+0000",
                    "updated": "2022-08-10T01:28:44.874+0000",
                    "started": "2022-08-10T01:28:44.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799542",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/799545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#issuecomment-1210055333\n\n   https://issues.apache.org/jira/browse/ARROW-17313\n\n\n",
                    "created": "2022-08-10T01:39:58.177+0000",
                    "updated": "2022-08-10T01:39:58.177+0000",
                    "started": "2022-08-10T01:39:58.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799545",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/799719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#issuecomment-1210621425\n\n   https://github.com/apache/arrow/pull/13688 is a very similar PR for Parquet that takes a different implementation approach, I think it's worth coordinating.\n\n\n",
                    "created": "2022-08-10T12:43:04.275+0000",
                    "updated": "2022-08-10T12:43:04.275+0000",
                    "started": "2022-08-10T12:43:04.275+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799719",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/799776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#issuecomment-1210964662\n\n   What is the status with that PR? I don't see any comments on it or any reviewers assigned.\n\n\n",
                    "created": "2022-08-10T16:32:22.441+0000",
                    "updated": "2022-08-10T16:32:22.441+0000",
                    "started": "2022-08-10T16:32:22.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799776",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/799777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#issuecomment-1210965842\n\n   We don't really assign reviewers, I bring it up because I noticed it and it is basically the same idea as this PR, from a quick glance - so I don't want to see two separate implementations of the same concept\n\n\n",
                    "created": "2022-08-10T16:33:26.962+0000",
                    "updated": "2022-08-10T16:33:26.962+0000",
                    "started": "2022-08-10T16:33:26.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "799777",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zhztheplayer commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r944056618\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   Does this mean the input file will be truncated exactly from `start` to `end` then deliver to fragment?\r\n   \r\n   In some cases fuzzed match might be required. E.g. Spark picks parquet row groups whose binary midpoints are located in [start, end).\n\n\n\n",
                    "created": "2022-08-12T01:46:10.569+0000",
                    "updated": "2022-08-12T01:46:10.569+0000",
                    "started": "2022-08-12T01:46:10.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800148",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r944071247\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   The implementation behind the interface should be changeable depending on the file format. This draft PR is more of a proposal for how the interface for specifying these options should be. I think it should also work for your parquet use case. Maybe not?\n\n\n\n",
                    "created": "2022-08-12T02:34:31.455+0000",
                    "updated": "2022-08-12T02:34:31.455+0000",
                    "started": "2022-08-12T02:34:31.455+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800153",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zhztheplayer commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r944250888\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   I see. Then the codes may also work for my case based on current shape of the API. My speculation is to have a new C++ function to split a single `ParquetFileFragment` to multiple. \n\n\n\n",
                    "created": "2022-08-12T08:50:11.260+0000",
                    "updated": "2022-08-12T08:50:11.260+0000",
                    "started": "2022-08-12T08:50:11.259+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800223",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r944829495\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   I understand your use case to be: you have one Parquet file, you want to specify a byte range, and you want to read all the row groups that fit in that byte range. \r\n   \r\n   I think with this API here, you don't need to split a single ParquetFileFragment into multiple, nor do you need a new C++ function. We can just incorporate your changes in file_parquet.cc and have the ParquetFileFragment interpret the start and end bytes in the way that you specified instead of insisting that they align on proper row group boundaries. \n\n\n\n",
                    "created": "2022-08-12T20:39:45.510+0000",
                    "updated": "2022-08-12T20:39:45.510+0000",
                    "started": "2022-08-12T20:39:45.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800377",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zhztheplayer commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r945379331\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   OK. Then it seems to me workable to have the fragments produced from dataset factory directly without re-splitting. \r\n   \r\n   And a naive question around the codes: should we avoid `set_bounds` since it brings extra states to file fragment class?\n\n\n\n",
                    "created": "2022-08-15T01:49:15.287+0000",
                    "updated": "2022-08-15T01:49:15.287+0000",
                    "started": "2022-08-15T01:49:15.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800472",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r945392664\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   I think my idea is to have some state in the file fragment class that can be interpreted differently depending on the actual file fragment format. Other people might have different thoughts?\n\n\n\n",
                    "created": "2022-08-15T02:44:21.930+0000",
                    "updated": "2022-08-15T02:44:21.930+0000",
                    "started": "2022-08-15T02:44:21.930+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800474",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/800508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r945490032\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n\nReview Comment:\n   if you are on board with this API @zhztheplayer  I can probably incorporate your code into my PR. Or I can try to get my PR thru first and then you can maybe adapt your PR to my API.\n\n\n\n",
                    "created": "2022-08-15T07:38:43.852+0000",
                    "updated": "2022-08-15T07:38:43.852+0000",
                    "started": "2022-08-15T07:38:43.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "800508",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r954773835\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -211,8 +221,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   FileSource source_;\n   std::shared_ptr<FileFormat> format_;\n-\n   friend class FileFormat;\n+\n+  // we do not want ParquetFileFragment to inherit these things.\n\nReview Comment:\n   Er... if we do not expect inheritance, we should probably put in a derived class?\n\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -196,6 +200,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   const FileSource& source() const { return source_; }\n   const std::shared_ptr<FileFormat>& format() const { return format_; }\n+  const int64_t start_byte() const { return start_byte_; }\n+  const int64_t end_byte() const { return end_byte_; }\n+  void set_bounds(int64_t start, int64_t end) {\n\nReview Comment:\n   Why not let this configured as part of the `CsvFragmentScanOptions` or something?\n\n\n\n##########\ncpp/src/arrow/dataset/file_csv.cc:\n##########\n@@ -177,20 +177,15 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n }\n \n static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n-    const FileSource& source, const CsvFileFormat& format,\n-    const std::shared_ptr<ScanOptions>& scan_options, Executor* cpu_executor) {\n+    const std::shared_ptr<io::BufferedInputStream>& input, const std::string& path,\n\nReview Comment:\n   Why not take `InputStream` instead?\n\n\n\n##########\ncpp/src/arrow/dataset/file_parquet.cc:\n##########\n@@ -579,6 +579,11 @@ ParquetFileFragment::ParquetFileFragment(FileSource source,\n       parquet_format_(checked_cast<ParquetFileFormat&>(*format_)),\n       row_groups_(std::move(row_groups)) {}\n \n+void ParquetFileFragment::set_bounds(int64_t start, int64_t end) {\n+  ARROW_LOG(WARNING) << \"Setting byte bounds for a ParquetFileFragment not supported! \"\n+                        \"Use subset instead.\";\n\nReview Comment:\n   If we want to convey an error, we should not emit a warning message but return an error status.\r\n   Conversely, if we mean this to actually succeed (and be a no-op) on Parquet file fragments, then the warning message is merely distracting.\n\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -211,8 +221,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   FileSource source_;\n   std::shared_ptr<FileFormat> format_;\n-\n   friend class FileFormat;\n+\n+  // we do not want ParquetFileFragment to inherit these things.\n+ private:\n+  int64_t start_byte_ = 0;\n+  int64_t end_byte_ = 0;\n\nReview Comment:\n   Does this mean an empty range? It seems a bit confusing otherwise (should `util::optional` be used perhaps?)\n\n\n\n##########\npython/pyarrow/_dataset_parquet.pyx:\n##########\n@@ -317,6 +317,13 @@ cdef class ParquetFileFragment(FileFragment):\n             row_groups\n         )\n \n+    def slice(self, start, end):\n+        \"\"\"\n+        Slice is not implemented for Parquet files.\n+        \"\"\"\n+        raise Exception(\"Not Implemented! You cannot slice a Parquet file by byte range.\n\nReview Comment:\n   `NotImplementedError` is what you are looking for :-)\r\n   https://docs.python.org/3/library/exceptions.html#NotImplementedError\n\n\n\n##########\ncpp/src/arrow/dataset/file_base.cc:\n##########\n@@ -89,6 +89,28 @@ Result<std::shared_ptr<io::InputStream>> FileSource::OpenCompressed(\n   return io::CompressedInputStream::Make(codec.get(), std::move(file));\n }\n \n+Result<std::shared_ptr<io::InputStream>> FileSource::OpenRange(int64_t start,\n+                                                               int64_t end) const {\n+  ARROW_ASSIGN_OR_RAISE(auto file, Open());\n+\n+  auto actual_compression = Compression::type::UNCOMPRESSED;\n+\n+  auto extension = fs::internal::GetAbstractPathExtension(path());\n+  if (extension == \"gz\") {\n\nReview Comment:\n   I'm curious, why is this special case needed?\n\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -1046,6 +1046,21 @@ cdef class FileFragment(Fragment):\n             self.partition_expression\n         )\n \n+    def slice(self, start, end):\n+        \"\"\"\n+        Returns a new FileFragment object that will only read \n+        a slice of the old FileFragment defined by start (start byte)\n+        and end (end byte).\n+        \"\"\"\n+\n+        cdef FileFragment new_fragment = self.format.make_fragment(\n+            self.path if self.buffer is None else self.buffer,\n+            self.filesystem,\n+            self.partition_expression\n+        )\n+        new_fragment.file_fragment.set_bounds(start, end)\n\nReview Comment:\n   Hmm... what happens if I call slice() several times (e.g. `fragment.slice(1, 10).slice(2, 11)`)?\n\n\n\n",
                    "created": "2022-08-25T10:10:48.166+0000",
                    "updated": "2022-08-25T10:10:48.166+0000",
                    "started": "2022-08-25T10:10:48.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803545",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r954773835\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -211,8 +221,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   FileSource source_;\n   std::shared_ptr<FileFormat> format_;\n-\n   friend class FileFormat;\n+\n+  // we do not want ParquetFileFragment to inherit these things.\n\nReview Comment:\n   Er... if we do not expect inheritance, we should probably put this in a derived class?\n\n\n\n",
                    "created": "2022-08-25T10:11:48.325+0000",
                    "updated": "2022-08-25T10:11:48.325+0000",
                    "started": "2022-08-25T10:11:48.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803547",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r954779072\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -211,8 +221,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   FileSource source_;\n   std::shared_ptr<FileFormat> format_;\n-\n   friend class FileFormat;\n+\n+  // we do not want ParquetFileFragment to inherit these things.\n+ private:\n+  int64_t start_byte_ = 0;\n+  int64_t end_byte_ = 0;\n\nReview Comment:\n   Or, better, perhaps `util::optional<ReadRange>`.\n\n\n\n",
                    "created": "2022-08-25T10:12:23.443+0000",
                    "updated": "2022-08-25T10:12:23.443+0000",
                    "started": "2022-08-25T10:12:23.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803549",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r955344826\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -1046,6 +1046,21 @@ cdef class FileFragment(Fragment):\n             self.partition_expression\n         )\n \n+    def slice(self, start, end):\n+        \"\"\"\n+        Returns a new FileFragment object that will only read \n+        a slice of the old FileFragment defined by start (start byte)\n+        and end (end byte).\n+        \"\"\"\n+\n+        cdef FileFragment new_fragment = self.format.make_fragment(\n+            self.path if self.buffer is None else self.buffer,\n+            self.filesystem,\n+            self.partition_expression\n+        )\n+        new_fragment.file_fragment.set_bounds(start, end)\n\nReview Comment:\n   Yeah I am going to update this to subslice, where subslicing logic is implemented in Python\n\n\n\n",
                    "created": "2022-08-25T19:27:16.851+0000",
                    "updated": "2022-08-25T19:27:16.851+0000",
                    "started": "2022-08-25T19:27:16.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803755",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r955345360\n\n\n##########\ncpp/src/arrow/dataset/file_csv.cc:\n##########\n@@ -177,20 +177,15 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n }\n \n static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n-    const FileSource& source, const CsvFileFormat& format,\n-    const std::shared_ptr<ScanOptions>& scan_options, Executor* cpu_executor) {\n+    const std::shared_ptr<io::BufferedInputStream>& input, const std::string& path,\n\nReview Comment:\n   This is private interface, and we know the input is BufferedInputStream, no reason to support polymorphism here I think.\n\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -211,8 +221,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   FileSource source_;\n   std::shared_ptr<FileFormat> format_;\n-\n   friend class FileFormat;\n+\n+  // we do not want ParquetFileFragment to inherit these things.\n+ private:\n+  int64_t start_byte_ = 0;\n+  int64_t end_byte_ = 0;\n\nReview Comment:\n   Will use util::optional<ReadRange>\n\n\n\n",
                    "created": "2022-08-25T19:27:47.100+0000",
                    "updated": "2022-08-25T19:27:47.100+0000",
                    "started": "2022-08-25T19:27:47.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803756",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r955346090\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -196,6 +200,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   const FileSource& source() const { return source_; }\n   const std::shared_ptr<FileFormat>& format() const { return format_; }\n+  const int64_t start_byte() const { return start_byte_; }\n+  const int64_t end_byte() const { return end_byte_; }\n+  void set_bounds(int64_t start, int64_t end) {\n\nReview Comment:\n   CsvFragmentScanOptions is global to the entire scan, so I don't think it makes sense to store fragment-specific things there.\r\n   \r\n   The ability to slice a fragment is more or less local to this fragment. I.e. you could have multiple fragments in the same dataset sliced in different ways. \n\n\n\n",
                    "created": "2022-08-25T19:28:32.080+0000",
                    "updated": "2022-08-25T19:28:32.080+0000",
                    "started": "2022-08-25T19:28:32.080+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803757",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r955346963\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -211,8 +221,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   FileSource source_;\n   std::shared_ptr<FileFormat> format_;\n-\n   friend class FileFormat;\n+\n+  // we do not want ParquetFileFragment to inherit these things.\n\nReview Comment:\n   Yeah.... This probably will change anyways. The thing I am going to do after this one gets merged is to incorporate @zhztheplayer's parquet slicing using this API ",
                    "created": "2022-08-25T19:29:42.253+0000",
                    "updated": "2022-08-25T19:29:42.253+0000",
                    "started": "2022-08-25T19:29:42.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803758",
                    "issueId": "13475234"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/worklog/803777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13830:\nURL: https://github.com/apache/arrow/pull/13830#discussion_r955398578\n\n\n##########\ncpp/src/arrow/dataset/file_base.h:\n##########\n@@ -196,6 +200,12 @@ class ARROW_DS_EXPORT FileFragment : public Fragment,\n \n   const FileSource& source() const { return source_; }\n   const std::shared_ptr<FileFormat>& format() const { return format_; }\n+  const int64_t start_byte() const { return start_byte_; }\n+  const int64_t end_byte() const { return end_byte_; }\n+  void set_bounds(int64_t start, int64_t end) {\n\nReview Comment:\n   I don't think this is specific to CSV either.  ARROW-17159 at least seems to suggest that it is desired for Parquet but @zhztheplayer might be in a better place to justify why that and not row group indices.  I think the goal though is to have a format-agnostic ability to slice fragments.\n\n\n\n",
                    "created": "2022-08-25T20:35:03.566+0000",
                    "updated": "2022-08-25T20:35:03.566+0000",
                    "started": "2022-08-25T20:35:03.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803777",
                    "issueId": "13475234"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 20400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2f190fe6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3811a603[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a914d31[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f05cfde[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@579f578c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5aa8b270[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a3084d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4b3ac776[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6634daaa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7910df2e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47b8cad1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5a24a427[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 20400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 10 17:20:58 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17313/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2022-08-04T21:13:20.000+0000",
        "updated": "2022-09-09T14:18:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Sometimes it's desirable to just read a portion of a CSV. The best way to do that is to pass in a list of byte ranges to CSV read options that specify where in the CSV you want to read. These byte ranges don't necessarily have to be aligned on line break boundaries, the CSV reader should just read until the end of the line, and skip anything before the first line break in a byte range.\u00a0\u00a0\r\n\r\nBased on discussion, the scope is going to be reduced here. The first implementation will support a single byte range that is already assumed to be aligned on byte boundaries. \r\n\r\nWill not handle quotes/returns and other edge cases.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 20400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add Byte Range to CSV Reader ReadOptions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575465",
                    "id": "17575465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "For additional motivation, this overlaps with the way Substrait expresses partitioning information.  Substrait allows any file type to include \"start byte\" and \"length\" to slice the file.  For file types like parquet & IPC this would involve grabbing all row groups whose first byte falls in that range (even though this may mean reading beyond the end of the specified range).  The advantage is that there is then a uniform API for partitioning files across formats.\r\n\r\nAnother advantage here is that this would allow us to potentially parallelize chunking at a minor cost of overreading a bit for each block.  This overreading could be avoided if we knew we were going to read multiple blocks.  For example, if we know we want to read blocks 20-30 then we issue reads for blocks 20-31.  As soon as any two consecutive blocks are loaded we can start parsing the lower block of the pair.\r\n\r\nSo the algorithm for each block boils down to:\r\n\r\nAlthough...now that I type this up...I remember a potential flaw in this logic.  Finding the \"first line delimiter\" in a block can be an impossible problem if newlines are allowed inside of delimiters.  Though maybe we don't need to support that case, I don't recall.\r\n\r\nCC [~apitrou] for additional thoughts",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-04T22:10:45.243+0000",
                    "updated": "2022-08-04T22:10:45.243+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575489",
                    "id": "17575489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "My proposal is that we will allow additional fields in ScanOptions that specifies the byte ranges to read for each fragment.\u00a0\r\n\r\nThose byte ranges will be updated when you are calling OpenReaderAsync to be aligned to line breaks, potentially in another async function that samples the file around the byte range boundaries and figure out where the line breaks are.\u00a0\r\n\r\nThen these aligned byte ranges will be used to create a MaskedRandomAccessFile object, which is a new object that resembles the RandomAcessFile object with all of its interface, except it will skip bytes that it's not supposed to read using seek. This will not read those skip-bytes on either disk or network based files.\u00a0\r\n\r\nWe pass this MaskedRandomAccessFile object to make a BufferedInputStream and a StreamingReader without any further change in code. The CSV StreamingReader has no idea that it is only reading partial chunks in the underlying file.\r\n\r\nThe alternative to deal with this in the CSV StreamingReaderImpl. However this is very complicated as it can only access a BufferedInputStream which is not seekable. Adding seek functionality to InputStream probably doesn't make sense when the underlying InputStream is not a file.\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-04T23:56:40.208+0000",
                    "updated": "2022-08-04T23:56:40.208+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575531",
                    "id": "17575531",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I have same concern as Weston. CSV parsing is stateful. AFAIK, figuring out the line break has to be done in sequential, if we support \"quote\" or \"escape\" or custimized delimiter, etc.\r\nSome examples:\r\n- The sample block starts inside a \"quoted\" field\r\n- The first char of a block is \"\\n\" but the last char of previous block is an \"escape\"\r\n- Sample at middle of \"\\r\\n\" may also be confusing",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-05T02:56:27.203+0000",
                    "updated": "2022-08-05T02:56:27.203+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575545",
                    "id": "17575545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I think if you support things like this, then it's impossible to parallel read a CSV file.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-05T03:35:21.300+0000",
                    "updated": "2022-08-05T03:35:21.300+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575593",
                    "id": "17575593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "It's not too late to change the Substrait spec, is it?\r\n\r\nOr we can raise NotImplemented if the offset is ever-non-zero.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-05T05:57:04.272+0000",
                    "updated": "2022-08-05T05:57:04.272+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575600",
                    "id": "17575600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "That said, it can also be implemented in a \"dumb\" way: call {{RandomAccessFile::GetStream}} to get a subset of the input file, and let the CSV reader try to make sense of it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-05T06:32:58.947+0000",
                    "updated": "2022-08-05T15:13:22.103+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575862",
                    "id": "17575862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~apitrou] can you elaborate a bit on your way?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-05T14:13:08.968+0000",
                    "updated": "2022-08-05T14:13:08.968+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575902",
                    "id": "17575902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "There's not much to elaborate. {{RandomAccessFile::GetStream}} gives you a stream over a subrange of a file.  See API docs:\r\nhttps://arrow.apache.org/docs/cpp/api/io.html#_CPPv4N5arrow2io16RandomAccessFile9GetStreamENSt10shared_ptrI16RandomAccessFileEE7int64_t7int64_t",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-05T15:14:38.030+0000",
                    "updated": "2022-08-05T15:14:38.030+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575916",
                    "id": "17575916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Ah I meant what we should do about the linbreaks and quotes etc.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-05T15:35:48.674+0000",
                    "updated": "2022-08-05T15:35:48.674+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575928",
                    "id": "17575928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Nothing. The Substrait producer should produce valid ranges. There is no reason to accept random invalid ranges.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-05T16:01:26.860+0000",
                    "updated": "2022-08-05T16:01:26.860+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575930",
                    "id": "17575930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> It's not too late to change the Substrait spec, is it?\r\n> Or we can raise NotImplemented if the offset is ever-non-zero.\r\n\r\nRaising \"not implemented\" in this case is fine I'm sure.  If it can't be done then it can't be done.  Perhaps we can avoid most of these cases by reading a little bit (e.g. 32 bytes) before the beginning of the block as well.\r\n\r\n> The sample block starts inside a \"quoted\" field\r\n\r\nI think this is only a problem if we allow newlines in values.  We should reject a partial read if {{newlines_in_values}} is false.\r\n\r\n> The first char of a block is \"\\n\" but the last char of previous block is an \"escape\"\r\n\r\nReading a bit early would help here as long as it isn't a really long chain of escapes which should be rare and detectable (we could error in this case).\r\n\r\n> Sample at middle of \"\\r\\n\" may also be confusing\r\n\r\nReading a bit early would help here too.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-05T16:03:00.766+0000",
                    "updated": "2022-08-05T16:03:00.766+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575937",
                    "id": "17575937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> We should reject a partial read if newlines_in_values is false.\r\n\r\nOops, I mean, if {{newlines_in_values}} is true :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-05T16:07:11.473+0000",
                    "updated": "2022-08-05T16:07:11.473+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17575967",
                    "id": "17575967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Also this will not support compressed formats, at least at the start",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-05T16:58:53.183+0000",
                    "updated": "2022-08-05T16:58:53.183+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576079",
                    "id": "17576079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Ideally we update the Dataset Scanner to be able to take in different byte ranges for different fragments. Or is this not required?\r\n\r\nA complication would be that fragments right now don't seem to have some sort of \"ID\", so it might be hard for a user to specify which fragments should read which byte ranges. The way to do this would be to let the user pass in a dict in the ScanOptions that's something like \\{file_path1: byte_range1, file_path2: byte_range2}. I think this would make sense.\r\n\r\nAlternatively if this is not going to be supported, then this option ideally should only make sense for a dataset with one fragment. Perhaps I'll just add a check in the FragmentsToBatches function or something.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-05T23:28:17.096+0000",
                    "updated": "2022-08-05T23:28:17.096+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576154",
                    "id": "17576154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ok, so perhaps byte ranges should actually be provided by the partitioning scheme ? Most partitioning schemes would only emit trivial byte ranges (i.e. the entire file), but the Substrait partitioning would emit whatever is in the Substrait plan.\r\n\r\nOf course, it's up to the Substrait producer to ensure that these byte ranges actually make sense for the given data format. We shouldn't ask the file format implementations (for example CSV, Parquet or Orc) to accept innacurate byte ranges.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-06T08:21:25.914+0000",
                    "updated": "2022-08-06T08:21:25.914+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576852",
                    "id": "17576852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I think the {{FileFragment}} would be a good place for this.  For example, I could imagine something like...\r\n\r\n{code}\r\nimport pyarrow.dataset as ds\r\n# Discovery happens here.  After this line we will have a\r\n# FileSystemDataset and each FileFragment will be the\r\n# entire file\r\nmy_dataset = ds.dataset(\"/var/data/my_dataset\")\r\n# Splits the dataset into 32 partitions.  Each one is\r\n# still a FileSystemDataset with FileFragments but\r\n# now the FileFragments may have slicing information\r\nmy_datasets = my_dataset.partition(32)\r\n{code}\r\n\r\n{quote}\r\nWe shouldn't ask the file format implementations (for example CSV, Parquet or Orc) to accept innacurate byte ranges.\r\n{quote}\r\n\r\nI think there are (at least) two options here.  The partitioned ranges could be byte ranges without any knowledge of the format.  This is easy to create but means the file format would need to be able to map a byte range to some readable range.  For example, if a user has 10 parquet files, each 10GiB large, with 10 equal sized row groups and we want to divide it into 32 partitions then the partitions would look like:\r\n\r\nFile 0:  Bytes 0 to 33554432\r\nFile 0:  Bytes 33554432 to 67108864\r\n...\r\n\r\nHowever, the row group boundaries would be 0, 107374182, 214748365, 322122547, 429496730.  So, in the case, the parquet file format would adapt bytes 0 - 33554432 to row groups 0, 1, 2 (since the first byte falls in the requested range) even though this actually represents a slightly larger than requested partition (0 - 429496730).\r\n\r\nApproach 2.  As an alternative approach we could expect the producer to know the details of the file format.  In this case the partitions would probably be best expressed in terms that make sense for the format.  A \"parquet partitioner\" would specify a list of files with a list of row groups for each file.  An Orc partitioner would give a list of stripes.  A CSV partitioner would still need to use byte ranges.\r\n\r\nWith this approach I think you end up needing ParquetFileFragment, OrcFileFragment, etc. (although you could maybe get by with just RowGroupFileFragment, accepted by the grouped formats and ByteRangeFileFragment, accepted by the text formats).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-08T15:23:44.547+0000",
                    "updated": "2022-08-08T15:23:44.547+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576858",
                    "id": "17576858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The intent of datasets has always been that each file format defines its own granularity for reading files. I don't understand why the consumer would specify byte ranges by hand.\r\n\r\n[~bkietz] What is your opinion on this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-08T15:31:53.100+0000",
                    "updated": "2022-08-08T15:32:28.547+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576880",
                    "id": "17576880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Would it help to think of these not as byte ranges but as percentages?  I'm pretty sure the goal is just to be able to split a scan specification into subtasks.  They could then be divided amongst processes, divided amongst servers, or simply run piecemeal so that partial success and retry is simpler (I think this might be [~marsupialtail]'s end goal).\r\n\r\n\"Repartition the data into smaller files\" should always work but I don't know that this is always an acceptable option.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-08T16:15:15.279+0000",
                    "updated": "2022-08-08T16:15:15.279+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576881",
                    "id": "17576881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "What I strive to understand is why the Substrait producer would be in a better position to choose the file fragment granularity rather than the query engine implementation (or, in the Arrow C++ case, the dataset subsystem).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-08T16:17:30.106+0000",
                    "updated": "2022-08-08T16:17:30.106+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576885",
                    "id": "17576885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I don't think I've been explaining myself well.  Let's imagine a worst-case (though not unheard of) scenario where a user has a single 10GiB file, stored in S3, that they want to scan using 4 different EC2 containers.  Using the current datasets API this would be impossible to do unless that file happens to be parquet (since we do have ParquetFileFormat and split_row_groups).  I'd like a solution that I can use regardless of the format.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-08T16:29:46.431+0000",
                    "updated": "2022-08-08T16:29:46.431+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576889",
                    "id": "17576889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Hmm... so this is partitioning on the client side by sharding the queries to different compute servers?\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-08T16:35:59.926+0000",
                    "updated": "2022-08-08T16:35:59.926+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576900",
                    "id": "17576900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Yes.  I think the original Substrait use case was based on Spark's implementation (linking to https://github.com/substrait-io/substrait/pull/102) but I didn't ask too many details.\r\n\r\nIceberg has something kind of similar.  In their manifest they have a list of data files.  Each data file has a list of split offsets.  These are byte indices where the file could be split.  That sort of approach could be interesting.  FileFragment isn't persistable today but we could easily add split offsets when discovering parquet, IPC, ORC today.  Plus, there could be a boolean to scan CSV files during discovery to discover line breaks (probably debounced by some block size) and record those as split offsets.  That would solve the \"need to know the right spot to split\" problem for CSV (at the cost of a more expensive discovery).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-08T17:00:42.232+0000",
                    "updated": "2022-08-08T17:00:42.232+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576914",
                    "id": "17576914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Well, if arbitrary byte ranges need to be supported, then some scanning will be required when starting to read the CSV file. And we need to error out if {{allow_newlines_in_values}} is true.\r\n\r\nAn additional complication: what happens with e.g. a {{.csv.gz}} file?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-08-08T17:22:11.570+0000",
                    "updated": "2022-08-08T17:22:11.570+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576926",
                    "id": "17576926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "There is no physical way you can do this with a .csv.gz file \u2013 you can't decompress starting at a random byte, so the interface can be supported but the implementation won't skip scanning bytes and will be less efficient.\r\n\r\nI am in favor of adding a file format specific option in the FIleFragment class to denote how the byte range / row group range is specified. This option could take different values for different types of files and each file type reader can interpret accordingly. This might avoid the need for multiple file classes.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
                        "name": "marsupialtail",
                        "key": "JIRAUSER287162",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Ziheng Wang",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-08-08T18:22:51.130+0000",
                    "updated": "2022-08-08T18:22:51.130+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17576937",
                    "id": "17576937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "That sounds good to me.  Even if we end up later unifying everything in a common \"byte ranges\" or \"percentages\" API I don't think there is any harm in also having format-specific APIs.  Plus, having the format-specific APIs should simplify adoption of a common API if we decide to go that route.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-08T18:56:58.602+0000",
                    "updated": "2022-08-08T18:56:58.602+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17577977",
                    "id": "17577977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "ARROW-17159 is a very similar issue, except motivated by Parquet/Spark",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-10T12:43:46.344+0000",
                    "updated": "2022-08-10T12:43:46.344+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13475234/comment/17578080",
                    "id": "17578080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "There is also ARROW-15589, which I had referenced above, also motivated from Spark (but via Substrait).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-08-10T17:20:58.743+0000",
                    "updated": "2022-08-10T17:20:58.743+0000"
                }
            ],
            "maxResults": 27,
            "total": 27,
            "startAt": 0
        },
        "customfield_12311820": "0|z17hko:",
        "customfield_12314139": null
    }
}