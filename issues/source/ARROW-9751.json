{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13322863",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863",
    "key": "ARROW-9751",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 39000,
            "total": 39000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9751/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 65,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T10:57:58.137+0000",
                    "updated": "2020-08-15T10:57:58.137+0000",
                    "started": "2020-08-15T10:57:58.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471062",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674383209\n\n\n   https://issues.apache.org/jira/browse/ARROW-9751\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T11:04:35.905+0000",
                    "updated": "2020-08-15T11:04:35.905+0000",
                    "started": "2020-08-15T11:04:35.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471063",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r470999040\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/math_expressions.rs\n##########\n@@ -92,7 +122,7 @@ mod tests {\n             .build()?;\n         let ctx = ExecutionContext::new();\n         let plan = ctx.optimize(&plan)?;\n-        let expected = \"Projection: sqrt(CAST(#c0 AS Float64))\\\n+        let expected = \"Projection: sqrt(CAST(#c0 AS Float32))\\\n\nReview comment:\n       notice here how i8 is now mapped to float32, not float64 as we give preference to smaller types.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T15:09:21.840+0000",
                    "updated": "2020-08-15T15:09:21.840+0000",
                    "started": "2020-08-15T15:09:21.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471083",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674409587\n\n\n   @andygrove and @alamb \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T15:10:47.041+0000",
                    "updated": "2020-08-15T15:10:47.041+0000",
                    "started": "2020-08-15T15:10:47.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471084",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674411085\n\n\n   @jorgecarleitao This looks good but I have one concern/question. What happens if I declare a function with two args and both args can be Float32 or Float64, but when I call it, one arg is i8 and the other arg is f64? Would they both get cast to f64 in this case? or would one be cast to f32 and the other to f64? The latter would not work if the function requires both types to be the same.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T15:24:05.590+0000",
                    "updated": "2020-08-15T15:24:05.590+0000",
                    "started": "2020-08-15T15:24:05.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471087",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471091",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674413020\n\n\n   > @jorgecarleitao This looks good but I have one concern/question. What happens if I declare a function with two args and both args can be Float32 or Float64, but when I call it, one arg is i8 and the other arg is f64? Would they both get cast to f64 in this case? or would one be cast to f32 and the other to f64? The latter would not work if the function requires both types to be the same.\r\n   \r\n   Great point! I have not though about those types of constraints so far.\r\n   \r\n   This currently does not have constraints on \"arguments have to be the same\"; it assumes that the function handles each variation of the arguments independently: in your example, it would be coerced to f32 and f64. We can expand it to include constraints and \"get_supertype\" taking into account those constraints.\r\n   \r\n   The alternative is for `[[t1, t2]]` to represent one valid set of types for a function of two arguments, instead of `[[t1], [t2]]`. This way we can constraint arguments together. We would need to check that each entry on the list has the same number of entries = arguments.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T15:35:52.315+0000",
                    "updated": "2020-08-15T15:35:52.315+0000",
                    "started": "2020-08-15T15:35:52.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471091",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674413474\n\n\n   > The alternative is for `[[t1, t2]]` to represent one valid set of types for a function of two arguments, instead of `[[t1], [t2]]`. This way we can constraint arguments together. We would need to check that each entry on the list has the same number of entries = arguments.\r\n   \r\n   This seems reasonable to me.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-15T15:38:59.182+0000",
                    "updated": "2020-08-15T15:38:59.182+0000",
                    "started": "2020-08-15T15:38:59.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471092",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674484413\n\n\n   > > The alternative is for `[[t1, t2]]` to represent one valid set of types for a function of two arguments, instead of `[[t1], [t2]]`. This way we can constraint arguments together. We would need to check that each entry on the list has the same number of entries = arguments.\r\n   > \r\n   > This seems reasonable to me.\r\n   \r\n   @andygrove , I have re-factored it to use this approach instead.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T06:05:53.037+0000",
                    "updated": "2020-08-16T06:05:53.037+0000",
                    "started": "2020-08-16T06:05:53.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471179",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471097019\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/udf.rs\n##########\n@@ -37,8 +37,11 @@ pub type ScalarUdf = Arc<dyn Fn(&[ArrayRef]) -> Result<ArrayRef> + Send + Sync>;\n pub struct ScalarFunction {\n     /// Function name\n     pub name: String,\n-    /// Function argument meta-data\n-    pub args: Vec<Field>,\n+    /// Set of valid argument types.\n+    /// The first dimension (0) represents specific combinations of valid argument types\n+    /// The second dimension (1) represents the types of each argument.\n+    /// For example, [[t1, t2]] is a function of 2 arguments that only accept t1 on the first arg and t2 on the second\n+    pub args: Vec<Vec<DataType>>,\n\nReview comment:\n       ```suggestion\r\n       pub arg_types: Vec<Vec<DataType>>,\r\n   ```\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/udf.rs\n##########\n@@ -37,8 +37,11 @@ pub type ScalarUdf = Arc<dyn Fn(&[ArrayRef]) -> Result<ArrayRef> + Send + Sync>;\n pub struct ScalarFunction {\n     /// Function name\n     pub name: String,\n-    /// Function argument meta-data\n-    pub args: Vec<Field>,\n+    /// Set of valid argument types.\n+    /// The first dimension (0) represents specific combinations of valid argument types\n+    /// The second dimension (1) represents the types of each argument.\n+    /// For example, [[t1, t2]] is a function of 2 arguments that only accept t1 on the first arg and t2 on the second\n\nReview comment:\n       I suggest you move this comment to `FunctionMeta` @ https://github.com/apache/arrow/pull/7967/files#diff-be9adb93b0effc41a9672892e1aed3e1R50 (which is more likely where someone writing a UDF would be interacting) and refer to that comment here\n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -75,7 +75,7 @@ impl FunctionMeta {\n         &self.name\n     }\n     /// Getter for the arg list\n-    pub fn args(&self) -> &Vec<Field> {\n+    pub fn args(&self) -> &Vec<Vec<DataType>> {\n\nReview comment:\n       ```suggestion\r\n       pub fn arg_types(&self) -> &Vec<Vec<DataType>> {\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n\nReview comment:\n       ```suggestion\r\n       // for each set of valid signatures, try to coerce all expressions to one of them\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n+        if let Some(types) = maybe_coerse(valid_types, &current_types) {\n+            // yes: let's re-write the expressions\n+            new_expressions = Some(\n+                expressions\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, expr)| expr.cast_to(&types[i], schema))\n+                    .collect::<Result<Vec<_>>>()?,\n+            );\n+            break;\n+        }\n+        // we cannot: try the next\n+    }\n+    Ok(new_expressions)\n+}\n+\n+/// Try to coerse current_types into valid_types\n+fn maybe_coerse(\n+    valid_types: &Vec<DataType>,\n+    current_types: &Vec<DataType>,\n+) -> Option<Vec<DataType>> {\n+    let mut super_type = Vec::with_capacity(valid_types.len());\n+    for (i, valid_type) in valid_types.iter().enumerate() {\n+        let current_type = &current_types[i];\n+        if let Ok(t) = utils::get_supertype(current_type, valid_type) {\n+            super_type.push(t)\n+        } else {\n+            return None;\n+        }\n+    }\n+    Some(super_type)\n+}\n+\n #[cfg(test)]\n\nReview comment:\n       I think we should have some unit tests of `maybe_coerse ` and `maybe_rewrite` -- I reviewed the logic and it looks good to me, but tests would help against regressions (someone messing up the code in the future without realizing it b/c tests kept passing) as well as serving as another form of documentation (enumerating expected inputs and outputs)\n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -47,8 +47,8 @@ pub enum FunctionType {\n pub struct FunctionMeta {\n     /// Function name\n     name: String,\n-    /// Function arguments\n-    args: Vec<Field>,\n+    /// Function arguments. Each argument i can be one of the types of args[i], with respective priority\n+    args: Vec<Vec<DataType>>,\n\nReview comment:\n       ```suggestion\r\n       arg_types: Vec<Vec<DataType>>,\r\n   ```\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/udf.rs\n##########\n@@ -60,7 +63,7 @@ impl ScalarFunction {\n     /// Create a new ScalarFunction\n     pub fn new(\n         name: &str,\n-        args: Vec<Field>,\n+        args: Vec<Vec<DataType>>,\n\nReview comment:\n       ```suggestion\r\n           arg_types: Vec<Vec<DataType>>,\r\n   ```\n\n##########\nFile path: rust/datafusion/src/logicalplan.rs\n##########\n@@ -59,7 +59,7 @@ impl FunctionMeta {\n     #[allow(missing_docs)]\n     pub fn new(\n         name: String,\n-        args: Vec<Field>,\n+        args: Vec<Vec<DataType>>,\n\nReview comment:\n       ```suggestion\r\n           arg_types: Vec<Vec<DataType>>,\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n\nReview comment:\n       ```suggestion\r\n           // for each option, try to coerce all arguments to it\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n+        if let Some(types) = maybe_coerse(valid_types, &current_types) {\n+            // yes: let's re-write the expressions\n+            new_expressions = Some(\n+                expressions\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, expr)| expr.cast_to(&types[i], schema))\n+                    .collect::<Result<Vec<_>>>()?,\n+            );\n+            break;\n+        }\n+        // we cannot: try the next\n+    }\n+    Ok(new_expressions)\n+}\n+\n+/// Try to coerse current_types into valid_types\n+fn maybe_coerse(\n\nReview comment:\n       ```suggestion\r\n   fn maybe_coerce(\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -84,29 +84,46 @@ impl<'a> TypeCoercionRule<'a> {\n                 args,\n                 return_type,\n             } => {\n-                // cast the inputs of scalar functions to the appropriate type where possible\n+                // cast the inputs of scalar functions to the appropriate type\n                 match self.scalar_functions.get(name) {\n                     Some(func_meta) => {\n-                        let mut func_args = Vec::with_capacity(args.len());\n-                        for i in 0..args.len() {\n-                            let field = &func_meta.args[i];\n-                            let expr = self.rewrite_expr(&args[i], schema)?;\n-                            let actual_type = expr.get_type(schema)?;\n-                            let required_type = field.data_type();\n-                            if &actual_type == required_type {\n-                                func_args.push(expr)\n-                            } else {\n-                                let super_type =\n-                                    utils::get_supertype(&actual_type, required_type)?;\n-                                func_args.push(expr.cast_to(&super_type, schema)?);\n-                            }\n-                        }\n+                        // compute the current types and expressions\n+                        let expressions = args\n+                            .iter()\n+                            .map(|e| self.rewrite_expr(e, schema))\n+                            .collect::<Result<Vec<_>>>()?;\n+\n+                        // compute the current types and expressions\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n+        if let Some(types) = maybe_coerse(valid_types, &current_types) {\n\nReview comment:\n       ```suggestion\r\n           if let Some(types) = maybe_coerce(valid_types, &current_types) {\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n+        if let Some(types) = maybe_coerse(valid_types, &current_types) {\n+            // yes: let's re-write the expressions\n+            new_expressions = Some(\n+                expressions\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, expr)| expr.cast_to(&types[i], schema))\n+                    .collect::<Result<Vec<_>>>()?,\n+            );\n+            break;\n+        }\n+        // we cannot: try the next\n+    }\n+    Ok(new_expressions)\n\nReview comment:\n       ```suggestion\r\n       Ok(None)\r\n   ```\r\n   \r\n   (this is stylistic suggestion -- you can avoid a `mut` variable and just return on the branch when the type coercion worked) \n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -523,10 +523,14 @@ impl<S: SchemaProvider> SqlToRel<S> {\n \n                             let mut safe_args: Vec<Expr> = vec![];\n                             for i in 0..rex_args.len() {\n-                                safe_args.push(\n-                                    rex_args[i]\n-                                        .cast_to(fm.args()[i].data_type(), schema)?,\n-                                );\n+                                let expr = if fm.args()[i]\n+                                    .contains(&rex_args[i].get_type(schema)?)\n+                                {\n+                                    rex_args[i].clone()\n+                                } else {\n+                                    rex_args[i].cast_to(&fm.args()[i][0], schema)?\n\nReview comment:\n       Adding a test for a user defined function that takes no args would probably be good -- an example of such a function might be `rand()` \n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n+        if let Some(types) = maybe_coerse(valid_types, &current_types) {\n+            // yes: let's re-write the expressions\n+            new_expressions = Some(\n+                expressions\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(i, expr)| expr.cast_to(&types[i], schema))\n+                    .collect::<Result<Vec<_>>>()?,\n+            );\n+            break;\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -198,6 +215,50 @@ impl<'a> OptimizerRule for TypeCoercionRule<'a> {\n     }\n }\n \n+/// tries to re-cast expressions under schema based on the set of valid signatures\n+fn maybe_rewrite(\n+    expressions: &Vec<Expr>,\n+    current_types: &Vec<DataType>,\n+    schema: &Schema,\n+    signature: &Vec<Vec<DataType>>,\n+) -> Result<Option<Vec<Expr>>> {\n+    // for each set of valid signatures, try to coerse all expressions to one of them\n+    let mut new_expressions: Option<Vec<Expr>> = None;\n+    for valid_types in signature {\n+        // for each option, try to coerse all arguments to it\n+        if let Some(types) = maybe_coerse(valid_types, &current_types) {\n+            // yes: let's re-write the expressions\n+            new_expressions = Some(\n\nReview comment:\n       ```suggestion\r\n               return Some(\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T11:02:46.033+0000",
                    "updated": "2020-08-16T11:02:46.033+0000",
                    "started": "2020-08-16T11:02:46.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471205",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471134155\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -523,10 +523,14 @@ impl<S: SchemaProvider> SqlToRel<S> {\n \n                             let mut safe_args: Vec<Expr> = vec![];\n                             for i in 0..rex_args.len() {\n-                                safe_args.push(\n-                                    rex_args[i]\n-                                        .cast_to(fm.args()[i].data_type(), schema)?,\n-                                );\n+                                let expr = if fm.args()[i]\n+                                    .contains(&rex_args[i].get_type(schema)?)\n+                                {\n+                                    rex_args[i].clone()\n+                                } else {\n+                                    rex_args[i].cast_to(&fm.args()[i][0], schema)?\n\nReview comment:\n       I am not sure we can easily declare a zero-argument UDF: we do not know how many rows we should build because we have no `ArrayRef` to count them. IMO this is something that we will have to re-visit.\r\n   \r\n   I will add a test for 2 arguments of various types.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T16:53:09.966+0000",
                    "updated": "2020-08-16T16:53:09.966+0000",
                    "started": "2020-08-16T16:53:09.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471230",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471134987\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/udf.rs\n##########\n@@ -37,8 +37,11 @@ pub type ScalarUdf = Arc<dyn Fn(&[ArrayRef]) -> Result<ArrayRef> + Send + Sync>;\n pub struct ScalarFunction {\n     /// Function name\n     pub name: String,\n-    /// Function argument meta-data\n-    pub args: Vec<Field>,\n+    /// Set of valid argument types.\n+    /// The first dimension (0) represents specific combinations of valid argument types\n+    /// The second dimension (1) represents the types of each argument.\n+    /// For example, [[t1, t2]] is a function of 2 arguments that only accept t1 on the first arg and t2 on the second\n\nReview comment:\n       I believe that the current API uses `ScalarFunction`:\r\n   \r\n   ```\r\n   ctx.register_udf(ScalarFunction::new(\r\n           \"custom_sqrt\",\r\n           vec![vec![DataType::Float64]],\r\n           DataType::Float64,\r\n           Arc::new(custom_sqrt),\r\n       ));\r\n   ```\r\n   \r\n   I do not like it, but I was trying not to change it until we land an interface to declare UDFs sufficiently generic for our own UDFs with variable types.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T17:00:59.794+0000",
                    "updated": "2020-08-16T17:00:59.794+0000",
                    "started": "2020-08-16T17:00:59.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471233",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674555985\n\n\n   > I reviewed the logic carefully in this PR and I think overall it is quite good. Nice work @jorgecarleitao. The only thing I personally think is needed before it would be ready to merge are the following tests:\r\n   > \r\n   >     1. End-to-end test (in sql.rs) using a UDF with multiple possible type signatures\r\n   > \r\n   >     2. Unit tests for the the coercion logic\r\n   > \r\n   > \r\n   > All the rest of the stuff in this PR is suggestions.\r\n   > \r\n   > Along with the test, it might be cool to write up some docs / comments that shows how to write a UDF that actually accepts multiuple types)-- the only [test I see now](https://github.com/apache/arrow/pull/7967/files#diff-8273e76b6910baa123f3a25a967af3b5L1237) has a single set of argument types.\r\n   > \r\n   > In this design, the UDFs are effectively \"polymorphic\" in the sense that they can accept multiple different argument types and will have to dispatch at runtime.\r\n   > \r\n   > Another potential design for UDFs is to provide each UDF with an alias that could be duplicated and a single argument type (e.g `sqrt --> sqrt_32(f32)` and `sqrt --> sqrt_64(f64)`). Then an optimizer / coercion pass would have the logic to resolve the `sqrt` alias to `sqrt_32` or `sqrt_64` depending on the input argument types.\r\n   > \r\n   > This approach might be marginally faster as the input types would be resolved once at planning time rather than during runtime. However, given that datafusion has a vectorized executor (e.g. the types would be handled once per RecordBatch) the overhead of runtime dispatch will likely not be noticable.\r\n   \r\n   Thank you again @alamb for taking the time to review this. I agree with all you said.\r\n   \r\n   My other two PRs effectively add support for polymorphic functions (including return type). The reason being that we are already doing that for our own udfs, with the function `data_type()/get_type()`, both at the physical and logical level. This is intrinsic to our execution model that requires downcasting and builders inside the function. Since we require the developer to go through that pain, we may as-well just offer them the full flexibility of that. I agree that there is a small overhead, but IMO small compared to execution, and we can always use some form of cached_attribute if we start seeing performance issues in the planning phase.\r\n   \r\n   As an example of the impressive flexibility we get, I was able to run Python lambdas inside a data-fusion UDF in a [pet project of mine](https://github.com/jorgecarleitao/datafusion-python), and convert the result back to numpy arrays, which IMO is mind blowing.\r\n   \r\n   Changes from last time:\r\n   \r\n   * incorporated almost all your suggestions\r\n   * added end-to-end tests\r\n   * added tests to both internal functions of type coercion\r\n   \r\n   I think that the logic of `get_supertype` is not entirely correct atm (e.g. utf8 can be converted to all types), but we have an issue tracking that.\r\n   \r\n   Currently I do struggle to know exactly where to place documentation for this. IMO this is not something to place on the API documentation, but rather on a user-guide. I have been using UDFs in a [pet project of mine](https://github.com/jorgecarleitao/datafusion-python), but I think that we need to take some time to create placeholders in our `docs/` for these. Pinging @andygrove for ideias also.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T17:46:44.056+0000",
                    "updated": "2020-08-16T17:46:44.056+0000",
                    "started": "2020-08-16T17:46:44.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471243",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674555985\n\n\n   > I reviewed the logic carefully in this PR and I think overall it is quite good. Nice work @jorgecarleitao. The only thing I personally think is needed before it would be ready to merge are the following tests:\r\n   > \r\n   >     1. End-to-end test (in sql.rs) using a UDF with multiple possible type signatures\r\n   > \r\n   >     2. Unit tests for the the coercion logic\r\n   > \r\n   > \r\n   > All the rest of the stuff in this PR is suggestions.\r\n   > \r\n   > Along with the test, it might be cool to write up some docs / comments that shows how to write a UDF that actually accepts multiuple types)-- the only [test I see now](https://github.com/apache/arrow/pull/7967/files#diff-8273e76b6910baa123f3a25a967af3b5L1237) has a single set of argument types.\r\n   > \r\n   > In this design, the UDFs are effectively \"polymorphic\" in the sense that they can accept multiple different argument types and will have to dispatch at runtime.\r\n   > \r\n   > Another potential design for UDFs is to provide each UDF with an alias that could be duplicated and a single argument type (e.g `sqrt --> sqrt_32(f32)` and `sqrt --> sqrt_64(f64)`). Then an optimizer / coercion pass would have the logic to resolve the `sqrt` alias to `sqrt_32` or `sqrt_64` depending on the input argument types.\r\n   > \r\n   > This approach might be marginally faster as the input types would be resolved once at planning time rather than during runtime. However, given that datafusion has a vectorized executor (e.g. the types would be handled once per RecordBatch) the overhead of runtime dispatch will likely not be noticable.\r\n   \r\n   Thank you again @alamb for taking the time to review this. I agree with all you said.\r\n   \r\n   My other two PRs effectively add support for polymorphic functions (including return type). The reason being that we are already doing that for our own udfs, with the function `data_type()/get_type()`, both at the physical and logical level. This is intrinsic to our execution model that requires downcasting and builders inside the function. Since we require the developer to go through that pain, we may as-well just offer them the full flexibility of that. I agree that there is a small overhead, but IMO small compared to execution, and we can always use some form of cached_attribute if we start seeing performance issues in the planning phase.\r\n   \r\n   As an example of the impressive flexibility we get, I was able to run Python lambdas inside a data-fusion UDF in a [pet project of mine](https://github.com/jorgecarleitao/datafusion-python), and convert the result back to numpy arrays, which IMO is mind blowing.\r\n   \r\n   Changes from last time:\r\n   \r\n   * incorporated almost all your suggestions\r\n   * added end-to-end tests\r\n   * added tests to both internal functions of type coercion\r\n   \r\n   I think that the logic of `get_supertype` is not entirely correct atm (e.g. utf8 can be converted to all types), but we have an issue tracking that.\r\n   \r\n   Currently I do struggle to know exactly where to place documentation for this. IMO this is not something to place on the API documentation, but rather on a user-guide. I think that we need to take some time to create placeholders in our `docs/` for these. Pinging @andygrove for ideias also.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T17:56:10.624+0000",
                    "updated": "2020-08-16T17:56:10.624+0000",
                    "started": "2020-08-16T17:56:10.624+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471244",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-674563365\n\n\n   > I think that the logic of get_supertype is not entirely correct atm (e.g. utf8 can be converted to all types), but we have an issue tracking that.\r\n   \r\n   Yes, it is bad code and quite incorrect in some cases and needs re-doing. I have had a few failed attempts at this.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T18:53:53.180+0000",
                    "updated": "2020-08-16T18:53:53.180+0000",
                    "started": "2020-08-16T18:53:53.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471258",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471146144\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/math_expressions.rs\n##########\n@@ -20,36 +20,62 @@\n use crate::error::ExecutionError;\n use crate::execution::physical_plan::udf::ScalarFunction;\n \n-use arrow::array::{Array, ArrayRef, Float64Array, Float64Builder};\n-use arrow::datatypes::{DataType, Field};\n+use arrow::array::{Array, ArrayRef};\n+use arrow::array::{Float32Array, Float64Array};\n+use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n+macro_rules! compute_op {\n+    ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n+        let mut builder = <$TYPE>::builder($ARRAY.len());\n+        for i in 0..$ARRAY.len() {\n+            if $ARRAY.is_null(i) {\n+                builder.append_null()?;\n+            } else {\n+                builder.append_value($ARRAY.value(i).$FUNC())?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+macro_rules! downcast_compute_op {\n+    ($ARRAY:expr, $NAME:expr, $FUNC:ident, $TYPE:ident) => {{\n+        let n = $ARRAY.as_any().downcast_ref::<$TYPE>();\n+        match n {\n+            Some(array) => compute_op!(array, $FUNC, $TYPE),\n+            _ => Err(ExecutionError::General(format!(\n+                \"Invalid data type for {}\",\n+                $NAME\n+            ))),\n+        }\n+    }};\n+}\n+\n+macro_rules! unary_primitive_array_op {\n+    ($ARRAY:expr, $NAME:expr, $FUNC:ident) => {{\n+        match ($ARRAY).data_type() {\n+            DataType::Float32 => downcast_compute_op!($ARRAY, $NAME, $FUNC, Float32Array),\n+            DataType::Float64 => downcast_compute_op!($ARRAY, $NAME, $FUNC, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"Unsupported data type {:?} for function {}\",\n+                other, $NAME,\n+            ))),\n+        }\n+    }};\n+}\n+\n macro_rules! math_unary_function {\n     ($NAME:expr, $FUNC:ident) => {\n         ScalarFunction::new(\n             $NAME,\n-            vec![Field::new(\"n\", DataType::Float64, true)],\n+            // order: from faster to slower\n+            vec![vec![DataType::Float32], vec![DataType::Float64]],\n             DataType::Float64,\n\nReview comment:\n       Should there be a relationship between argument type and return type? should `sqrt(f32)` return `f32`, and `sqrt(f64)` return `f64` for example?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T18:56:15.148+0000",
                    "updated": "2020-08-16T18:56:15.148+0000",
                    "started": "2020-08-16T18:56:15.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471260",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471146570\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/math_expressions.rs\n##########\n@@ -20,36 +20,62 @@\n use crate::error::ExecutionError;\n use crate::execution::physical_plan::udf::ScalarFunction;\n \n-use arrow::array::{Array, ArrayRef, Float64Array, Float64Builder};\n-use arrow::datatypes::{DataType, Field};\n+use arrow::array::{Array, ArrayRef};\n+use arrow::array::{Float32Array, Float64Array};\n+use arrow::datatypes::DataType;\n \n use std::sync::Arc;\n \n+macro_rules! compute_op {\n+    ($ARRAY:expr, $FUNC:ident, $TYPE:ident) => {{\n+        let mut builder = <$TYPE>::builder($ARRAY.len());\n+        for i in 0..$ARRAY.len() {\n+            if $ARRAY.is_null(i) {\n+                builder.append_null()?;\n+            } else {\n+                builder.append_value($ARRAY.value(i).$FUNC())?;\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()))\n+    }};\n+}\n+\n+macro_rules! downcast_compute_op {\n+    ($ARRAY:expr, $NAME:expr, $FUNC:ident, $TYPE:ident) => {{\n+        let n = $ARRAY.as_any().downcast_ref::<$TYPE>();\n+        match n {\n+            Some(array) => compute_op!(array, $FUNC, $TYPE),\n+            _ => Err(ExecutionError::General(format!(\n+                \"Invalid data type for {}\",\n+                $NAME\n+            ))),\n+        }\n+    }};\n+}\n+\n+macro_rules! unary_primitive_array_op {\n+    ($ARRAY:expr, $NAME:expr, $FUNC:ident) => {{\n+        match ($ARRAY).data_type() {\n+            DataType::Float32 => downcast_compute_op!($ARRAY, $NAME, $FUNC, Float32Array),\n+            DataType::Float64 => downcast_compute_op!($ARRAY, $NAME, $FUNC, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"Unsupported data type {:?} for function {}\",\n+                other, $NAME,\n+            ))),\n+        }\n+    }};\n+}\n+\n macro_rules! math_unary_function {\n     ($NAME:expr, $FUNC:ident) => {\n         ScalarFunction::new(\n             $NAME,\n-            vec![Field::new(\"n\", DataType::Float64, true)],\n+            // order: from faster to slower\n+            vec![vec![DataType::Float32], vec![DataType::Float64]],\n             DataType::Float64,\n\nReview comment:\n       Glad you asked! Yes! It just takes a bit more changes: the main issue is that this has to be consistent with Logical expressions and they currently only support a single return type. I am proposing a generalization of this whole thing here: https://github.com/apache/arrow/pull/7974 , so that both logical and physical plans yield a consistent and variable data type.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-16T19:00:51.669+0000",
                    "updated": "2020-08-16T19:00:51.669+0000",
                    "started": "2020-08-16T19:00:51.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471262",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471442333\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -523,10 +523,14 @@ impl<S: SchemaProvider> SqlToRel<S> {\n \n                             let mut safe_args: Vec<Expr> = vec![];\n                             for i in 0..rex_args.len() {\n-                                safe_args.push(\n-                                    rex_args[i]\n-                                        .cast_to(fm.args()[i].data_type(), schema)?,\n-                                );\n+                                let expr = if fm.args()[i]\n+                                    .contains(&rex_args[i].get_type(schema)?)\n+                                {\n+                                    rex_args[i].clone()\n+                                } else {\n+                                    rex_args[i].cast_to(&fm.args()[i][0], schema)?\n\nReview comment:\n       makes sense -- I guess I would suggest we add a test to ensure the system behaves reasonably (aka generates an error rather than a crash) with 0 argument UDFs -- but if there is something challenging about implementing them it doesn't have to be done in this PR\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-17T12:24:51.715+0000",
                    "updated": "2020-08-17T12:24:51.715+0000",
                    "started": "2020-08-17T12:24:51.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471469",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471445155\n\n\n\n##########\nFile path: rust/datafusion/src/optimizer/type_coercion.rs\n##########\n@@ -345,4 +345,143 @@ mod tests {\n \n         assert_eq!(expected, format!(\"{:?}\", expr2));\n     }\n+\n+    #[test]\n+    fn test_maybe_coerce() -> Result<()> {\n+        // this vec contains: arg1, arg2, expected result\n+        let cases = vec![\n+            // 2 entries, same values\n+            (\n+                vec![DataType::UInt8, DataType::UInt16],\n+                vec![DataType::UInt8, DataType::UInt16],\n+                Some(vec![DataType::UInt8, DataType::UInt16]),\n+            ),\n+            // 2 entries, can coerse values\n+            (\n+                vec![DataType::UInt16, DataType::UInt16],\n+                vec![DataType::UInt8, DataType::UInt16],\n+                Some(vec![DataType::UInt16, DataType::UInt16]),\n+            ),\n+            // 0 entries, all good\n+            (vec![], vec![], Some(vec![])),\n+            // 2 entries, can't coerce\n+            (\n+                vec![DataType::Boolean, DataType::UInt16],\n+                vec![DataType::UInt8, DataType::UInt16],\n+                None,\n+            ),\n+            // u32 -> u16 is possible\n+            (\n+                vec![DataType::Boolean, DataType::UInt32],\n+                vec![DataType::Boolean, DataType::UInt16],\n+                Some(vec![DataType::Boolean, DataType::UInt32]),\n+            ),\n+        ];\n+\n+        for case in cases {\n+            assert_eq!(maybe_coerce(&case.0, &case.1), case.2)\n+        }\n+        Ok(())\n+    }\n+\n+    #[test]\n+    fn test_maybe_rewrite() -> Result<()> {\n+        // create a schema\n+        let schema = |t: Vec<DataType>| {\n+            Schema::new(\n+                t.iter()\n+                    .enumerate()\n+                    .map(|(i, t)| Field::new(&*format!(\"c{}\", i), t.clone(), true))\n+                    .collect(),\n+            )\n+        };\n+\n+        // create a vector of expressions\n+        let expressions = |t: Vec<DataType>, schema| -> Result<Vec<Expr>> {\n+            t.iter()\n+                .enumerate()\n+                .map(|(i, t)| col(&*format!(\"c{}\", i)).cast_to(&t, &schema))\n\nReview comment:\n       ```suggestion\r\n                   .map(|(i, t)| col(&format!(\"c{}\", i)).cast_to(&t, &schema))\r\n   ```\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -515,27 +515,29 @@ impl<S: SchemaProvider> SqlToRel<S> {\n                     }\n                     _ => match self.schema_provider.get_function_meta(&name) {\n                         Some(fm) => {\n-                            let rex_args = function\n\nReview comment:\n       I wonder given the emphasis on pluggable planers, if 52218c852b7b3016afeaf95d8a46d6deea89d231 (removing the type coercion from physical planner) is a good idea. As in \"is it ok to assume that all plans went through the existing `Optimizer` passes before being converted\"\r\n   \r\n   It seems reasonable to me, but it might be worth mentioning somewhere (e.g. on the physical planner, etc)\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -232,6 +326,55 @@ fn custom_sqrt(args: &[ArrayRef]) -> Result<ArrayRef> {\n     Ok(Arc::new(builder.finish()))\n }\n \n+fn custom_add(args: &[ArrayRef]) -> Result<ArrayRef> {\n+    match (args[0].data_type(), args[1].data_type()) {\n+        (DataType::Float64, DataType::Float64) => {\n+            let input1 = &args[0]\n+                .as_any()\n+                .downcast_ref::<Float64Array>()\n+                .expect(\"cast failed\");\n+            let input2 = &args[1]\n+                .as_any()\n+                .downcast_ref::<Float64Array>()\n+                .expect(\"cast failed\");\n+\n+            let mut builder = Float64Builder::new(input1.len());\n+            for i in 0..input1.len() {\n+                if input1.is_null(i) || input2.is_null(i) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(input1.value(i) + input2.value(i))?;\n+                }\n+            }\n+            Ok(Arc::new(builder.finish()))\n+        }\n+        (DataType::Float32, DataType::Float32) => {\n+            // all other cases return a constant vector (just to be diferent)\n+            let mut builder = Float64Builder::new(args[0].len());\n+            for _ in 0..args[0].len() {\n+                builder.append_value(3232.0)?;\n+            }\n+            Ok(Arc::new(builder.finish()))\n+        }\n+        (DataType::Float32, DataType::Float64) => {\n+            // all other cases return a constant vector (just to be diferent)\n+            let mut builder = Float64Builder::new(args[0].len());\n+            for _ in 0..args[0].len() {\n+                builder.append_value(3264.0)?;\n+            }\n+            Ok(Arc::new(builder.finish()))\n+        }\n+        (_, _) => {\n+            // all other cases return a constant vector (just to be diferent)\n\nReview comment:\n       maybe it is worth `panic!` if the argument types didn't match the registration of the UDF\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/udf.rs\n##########\n@@ -37,8 +37,11 @@ pub type ScalarUdf = Arc<dyn Fn(&[ArrayRef]) -> Result<ArrayRef> + Send + Sync>;\n pub struct ScalarFunction {\n     /// Function name\n     pub name: String,\n-    /// Function argument meta-data\n-    pub args: Vec<Field>,\n+    /// Set of valid argument types.\n+    /// The first dimension (0) represents specific combinations of valid argument types\n+    /// The second dimension (1) represents the types of each argument.\n+    /// For example, [[t1, t2]] is a function of 2 arguments that only accept t1 on the first arg and t2 on the second\n\nReview comment:\n       makes sense\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-17T12:38:12.814+0000",
                    "updated": "2020-08-17T12:38:12.814+0000",
                    "started": "2020-08-17T12:38:12.814+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471472",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#discussion_r471652148\n\n\n\n##########\nFile path: rust/datafusion/src/sql/planner.rs\n##########\n@@ -515,27 +515,29 @@ impl<S: SchemaProvider> SqlToRel<S> {\n                     }\n                     _ => match self.schema_provider.get_function_meta(&name) {\n                         Some(fm) => {\n-                            let rex_args = function\n\nReview comment:\n       AFAI recall, optimizations happen on the logical plan alone. Also, I think that 52218c8 removes the coercion in constructing the logical, not physical, plan (SQL nodes -> physical).\r\n   \r\n   If this is the case, `logical -> physical` does not have to worry about these, right?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-17T17:37:00.237+0000",
                    "updated": "2020-08-17T17:37:00.237+0000",
                    "started": "2020-08-17T17:37:00.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471580",
                    "issueId": "13322863"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/worklog/471596",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7967:\nURL: https://github.com/apache/arrow/pull/7967#issuecomment-675035668\n\n\n   Currently we only do optimizations on the logical plan, but there is a plan\n   to have physical plan optozations as well.\n   \n   On Mon, Aug 17, 2020, 11:37 AM Jorge Leitao <notifications@github.com>\n   wrote:\n   \n   > *@jorgecarleitao* commented on this pull request.\n   > ------------------------------\n   >\n   > In rust/datafusion/src/sql/planner.rs\n   > <https://github.com/apache/arrow/pull/7967#discussion_r471652148>:\n   >\n   > > @@ -515,27 +515,29 @@ impl<S: SchemaProvider> SqlToRel<S> {\n   >                      }\n   >                      _ => match self.schema_provider.get_function_meta(&name) {\n   >                          Some(fm) => {\n   > -                            let rex_args = function\n   >\n   > AFAI recall, optimizations happen on the logical plan alone. Also, I think\n   > that 52218c8\n   > <https://github.com/apache/arrow/commit/52218c852b7b3016afeaf95d8a46d6deea89d231>\n   > removes the coercion in constructing the logical, not physical, plan (SQL\n   > nodes -> physical).\n   >\n   > If this is the case, logical -> physical does not have to worry about\n   > these, right?\n   >\n   > \u2014\n   > You are receiving this because you were mentioned.\n   > Reply to this email directly, view it on GitHub\n   > <https://github.com/apache/arrow/pull/7967#discussion_r471652148>, or\n   > unsubscribe\n   > <https://github.com/notifications/unsubscribe-auth/AAHEBRG3AGK3SB5ZALBMEUTSBFTEDANCNFSM4QAG5BEA>\n   > .\n   >\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-17T18:18:39.181+0000",
                    "updated": "2020-08-17T18:18:39.181+0000",
                    "started": "2020-08-17T18:18:39.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "471596",
                    "issueId": "13322863"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 39000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4193b2df[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5821db3b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4407f437[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1229178f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39c643c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54303f38[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f6ddfc5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@75a230c8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ef1fdbe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2bedc4a7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6abfb5e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e7fec07[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 39000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 09 00:57:18 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-09T00:57:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9751/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-08-15T10:52:29.000+0000",
        "updated": "2020-09-09T09:49:37.000+0000",
        "timeoriginalestimate": null,
        "description": "Most math functions accept float32 and float64, `length` will accept Utf8 and lists soon, etc.\r\n\r\nThe goal of this story is to allow UDFs to accept more than one datatype.\r\n\r\nDesign: the accepted datatypes should be a vector ordered by \"faster/smaller\" to \"slower/larger\" (cpu/memory). When the plan reaches a UDF, we try to cast the input expression like before, from \"faster/smaller\" to \"slower/larger\".\r\n\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 39000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Extend UDFs to accept more than one type per argument",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13322863/comment/17192549",
                    "id": "17192549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 7967\n[https://github.com/apache/arrow/pull/7967]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-09T00:57:18.063+0000",
                    "updated": "2020-09-09T00:57:18.063+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hsq8:",
        "customfield_12314139": null
    }
}