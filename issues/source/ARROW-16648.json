{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13446712",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712",
    "key": "ARROW-16648",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stenlarsson",
            "name": "stenlarsson",
            "key": "JIRAUSER280609",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280609&avatarId=48466",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280609&avatarId=48466",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280609&avatarId=48466",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280609&avatarId=48466"
            },
            "displayName": "Sten Larsson",
            "active": true,
            "timeZone": "Europe/Stockholm"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stenlarsson",
            "name": "stenlarsson",
            "key": "JIRAUSER280609",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280609&avatarId=48466",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280609&avatarId=48466",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280609&avatarId=48466",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280609&avatarId=48466"
            },
            "displayName": "Sten Larsson",
            "active": true,
            "timeZone": "Europe/Stockholm"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=stenlarsson",
            "name": "stenlarsson",
            "key": "JIRAUSER280609",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280609&avatarId=48466",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280609&avatarId=48466",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280609&avatarId=48466",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280609&avatarId=48466"
            },
            "displayName": "Sten Larsson",
            "active": true,
            "timeZone": "Europe/Stockholm"
        },
        "aggregateprogress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4200,
            "total": 4200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16648/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 7,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/774382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13224:\nURL: https://github.com/apache/arrow/pull/13224#issuecomment-1136885972\n\n   https://issues.apache.org/jira/browse/ARROW-16648\n\n\n",
                    "created": "2022-05-25T07:24:38.092+0000",
                    "updated": "2022-05-25T07:24:38.092+0000",
                    "started": "2022-05-25T07:24:38.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "774382",
                    "issueId": "13446712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/774383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13224:\nURL: https://github.com/apache/arrow/pull/13224#issuecomment-1136886009\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-05-25T07:24:40.153+0000",
                    "updated": "2022-05-25T07:24:40.153+0000",
                    "started": "2022-05-25T07:24:40.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "774383",
                    "issueId": "13446712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/774858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13224:\nURL: https://github.com/apache/arrow/pull/13224#discussion_r882211739\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n\nReview Comment:\n   ```suggestion\r\n     arrow::MemoryPool *memory_pool;\r\n   ```\r\n   \r\n   We use C style in this file.\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n\nReview Comment:\n   ```suggestion\r\n    *   through this allocator.\r\n   ```\r\n   \n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n\nReview Comment:\n   ```suggestion\r\n    *   returns -1.\r\n   ```\r\n   \n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n+ * Since: 9.0.0\n+ */\n+gchar *\n+garrow_memory_pool_get_backend_name(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return g_strdup(arrow_memory_pool->backend_name().c_str());\n+}\n+\n+G_END_DECLS\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw(arrow::MemoryPool *memory_pool)\n+{\n+  return garrow_memory_pool_new_raw_bytes(memory_pool);\n+}\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw_bytes(arrow::MemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = GARROW_MEMORY_POOL(g_object_new(GARROW_TYPE_MEMORY_POOL,\n+                                              \"memory-pool\", memory_pool,\n+                                              NULL));\n+  return arrow_memory_pool;\n\nReview Comment:\n   ```suggestion\r\n     return GARROW_MEMORY_POOL(g_object_new(GARROW_TYPE_MEMORY_POOL,\r\n                               \"memory-pool\", memory_pool,\r\n                               NULL));\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n\nReview Comment:\n   ```suggestion\r\n                                 \"The raw arrow::MemoryPool *\",\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n\nReview Comment:\n   Could you rename this to `garrow_memory_pool_default()` so that we can use `Arrow::MemoryPool.default` in Ruby?\r\n   \r\n   ```suggestion\r\n   garrow_memory_pool_defaultl(void)\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n\nReview Comment:\n   ```suggestion\r\n    *   through this allocator.\r\n   ```\r\n   \n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n\nReview Comment:\n   ```suggestion\r\n    *\r\n    *  It should be freed with g_free() when no longer needed.\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n\nReview Comment:\n   ```suggestion\r\n    *   returns -1.\r\n   ```\r\n   \n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n\nReview Comment:\n   ```suggestion\r\n    *\r\n    *  It should be freed with g_free() when no longer needed.\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n\nReview Comment:\n   ```suggestion\r\n    * The name of the backend used by this MemoryPool (e.g. \"system\" or\r\n    * \"jemalloc\").\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n\nReview Comment:\n   Could you rename this to `garrow_memory_pool_default()` so that we can use `Arrow::MemoryPool.default` in Ruby?\r\n   \r\n   ```suggestion\r\n   garrow_memory_pool_defaultl(void)\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n\nReview Comment:\n   ```suggestion\r\n    * The name of the backend used by this MemoryPool (e.g. \"system\" or\r\n    * \"jemalloc\").\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n\nReview Comment:\n   We don't need this because we don't need to return any property.\r\n   \r\n   ```suggestion\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n\nReview Comment:\n   We don't need this because `priv->memory_pool` is initialized as `NULL` by GLib. \r\n   \r\n   ```suggestion\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n\nReview Comment:\n   We don't need this because `priv->memory_pool` is initialized as `NULL` by GLib. \r\n   \r\n   ```suggestion\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n+ * Since: 9.0.0\n+ */\n+gchar *\n+garrow_memory_pool_get_backend_name(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return g_strdup(arrow_memory_pool->backend_name().c_str());\n+}\n+\n+G_END_DECLS\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw(arrow::MemoryPool *memory_pool)\n+{\n+  return garrow_memory_pool_new_raw_bytes(memory_pool);\n+}\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw_bytes(arrow::MemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = GARROW_MEMORY_POOL(g_object_new(GARROW_TYPE_MEMORY_POOL,\n+                                              \"memory-pool\", memory_pool,\n+                                              NULL));\n+  return arrow_memory_pool;\n\nReview Comment:\n   ```suggestion\r\n     return GARROW_MEMORY_POOL(g_object_new(GARROW_TYPE_MEMORY_POOL,\r\n                               \"memory-pool\", memory_pool,\r\n                               NULL));\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n\nReview Comment:\n   We don't need this because we don't need to return any property.\r\n   \r\n   ```suggestion\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n\nReview Comment:\n   Users need to call `g_object_unref()` for the return value when the return value is no longer needed because we always returns a new object.\r\n   \r\n   ```suggestion\r\n    * Returns: (transfer full): The process-wide default memory pool.\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n\nReview Comment:\n   Users need to call `g_object_unref()` for the return value when the return value is no longer needed because we always returns a new object.\r\n   \r\n   ```suggestion\r\n    * Returns: (transfer full): The process-wide default memory pool.\r\n   ```\n\n\n\n##########\nc_glib/test/test-memory-pool.rb:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMemoryPool < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def setup\n+    @memory_pool = Arrow.default_memory_pool\n+  end\n+\n+  def test_bytes_allocated\n+    assert(@memory_pool.bytes_allocated.positive?)\n\nReview Comment:\n   We can use power assert here:\r\n   \r\n   ```suggestion\r\n       assert do\r\n         @memory_pool.bytes_allocated.positive?\r\n       end\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n+ * Since: 9.0.0\n+ */\n+gchar *\n+garrow_memory_pool_get_backend_name(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return g_strdup(arrow_memory_pool->backend_name().c_str());\n+}\n+\n+G_END_DECLS\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw(arrow::MemoryPool *memory_pool)\n+{\n+  return garrow_memory_pool_new_raw_bytes(memory_pool);\n+}\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw_bytes(arrow::MemoryPool *memory_pool)\n\nReview Comment:\n   We don't need `garrow_memory_pool_new_raw_bytes()`.\r\n   \r\n   ```suggestion\r\n   GArrowMemoryPool *\r\n   garrow_memory_pool_new_raw(arrow::MemoryPool *memory_pool)\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n\nReview Comment:\n   ```suggestion\r\n                                 \"The raw arrow::MemoryPool *\",\r\n   ```\n\n\n\n##########\nc_glib/test/test-memory-pool.rb:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMemoryPool < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def setup\n+    @memory_pool = Arrow.default_memory_pool\n+  end\n+\n+  def test_bytes_allocated\n+    assert(@memory_pool.bytes_allocated.positive?)\n+  end\n+\n+  def test_max_memory\n+    assert(@memory_pool.max_memory.positive?)\n\nReview Comment:\n   We can use power assert here:\r\n   \r\n   ```suggestion\r\n       assert do\r\n         @memory_pool.max_memory.positive?\r\n       end\r\n   ```\n\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n+ * Since: 9.0.0\n+ */\n+gchar *\n+garrow_memory_pool_get_backend_name(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return g_strdup(arrow_memory_pool->backend_name().c_str());\n+}\n+\n+G_END_DECLS\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw(arrow::MemoryPool *memory_pool)\n+{\n+  return garrow_memory_pool_new_raw_bytes(memory_pool);\n+}\n+\n+GArrowMemoryPool *\n+garrow_memory_pool_new_raw_bytes(arrow::MemoryPool *memory_pool)\n\nReview Comment:\n   We don't need `garrow_memory_pool_new_raw_bytes()`.\r\n   \r\n   ```suggestion\r\n   GArrowMemoryPool *\r\n   garrow_memory_pool_new_raw(arrow::MemoryPool *memory_pool)\r\n   ```\n\n\n\n##########\nc_glib/test/test-memory-pool.rb:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMemoryPool < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def setup\n+    @memory_pool = Arrow.default_memory_pool\n+  end\n+\n+  def test_bytes_allocated\n+    assert(@memory_pool.bytes_allocated.positive?)\n+  end\n+\n+  def test_max_memory\n+    assert(@memory_pool.max_memory.positive?)\n+  end\n+\n+  def test_backend_name\n+    assert(%w[system jemalloc mimalloc].include?(@memory_pool.backend_name))\n\nReview Comment:\n   We can use power assert here:\r\n   \r\n   ```suggestion\r\n       assert do\r\n         %w[system jemalloc mimalloc].include?(@memory_pool.backend_name)\r\n       end\r\n   ```\n\n\n\n##########\nc_glib/test/test-memory-pool.rb:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMemoryPool < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def setup\n+    @memory_pool = Arrow.default_memory_pool\n+  end\n+\n+  def test_bytes_allocated\n+    assert(@memory_pool.bytes_allocated.positive?)\n+  end\n+\n+  def test_max_memory\n+    assert(@memory_pool.max_memory.positive?)\n\nReview Comment:\n   We can use power assert here:\r\n   \r\n   ```suggestion\r\n       assert do\r\n         @memory_pool.max_memory.positive?\r\n       end\r\n   ```\n\n\n\n##########\nc_glib/test/test-memory-pool.rb:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMemoryPool < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def setup\n+    @memory_pool = Arrow.default_memory_pool\n+  end\n+\n+  def test_bytes_allocated\n+    assert(@memory_pool.bytes_allocated.positive?)\n\nReview Comment:\n   We can use power assert here:\r\n   \r\n   ```suggestion\r\n       assert do\r\n         @memory_pool.bytes_allocated.positive?\r\n       end\r\n   ```\n\n\n\n##########\nc_glib/test/test-memory-pool.rb:\n##########\n@@ -0,0 +1,36 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestMemoryPool < Test::Unit::TestCase\n+  include Helper::Omittable\n+\n+  def setup\n+    @memory_pool = Arrow.default_memory_pool\n+  end\n+\n+  def test_bytes_allocated\n+    assert(@memory_pool.bytes_allocated.positive?)\n+  end\n+\n+  def test_max_memory\n+    assert(@memory_pool.max_memory.positive?)\n+  end\n+\n+  def test_backend_name\n+    assert(%w[system jemalloc mimalloc].include?(@memory_pool.backend_name))\n\nReview Comment:\n   We can use power assert here:\r\n   \r\n   ```suggestion\r\n       assert do\r\n         %w[system jemalloc mimalloc].include?(@memory_pool.backend_name)\r\n       end\r\n   ```\n\n\n\n",
                    "created": "2022-05-26T00:22:49.265+0000",
                    "updated": "2022-05-26T00:22:49.265+0000",
                    "started": "2022-05-26T00:22:49.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "774858",
                    "issueId": "13446712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/775004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stenlarsson commented on PR #13224:\nURL: https://github.com/apache/arrow/pull/13224#issuecomment-1138430100\n\n   Thanks for the review @kou, I have adressed your comments.\n\n\n",
                    "created": "2022-05-26T11:25:05.685+0000",
                    "updated": "2022-05-26T11:25:05.685+0000",
                    "started": "2022-05-26T11:25:05.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775004",
                    "issueId": "13446712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/775228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13224:\nURL: https://github.com/apache/arrow/pull/13224#discussion_r882213044\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n+} GArrowMemoryPoolPrivate;\n+\n+enum {\n+  PROP_MEMORY_POOL = 1,\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowMemoryPool, garrow_memory_pool, G_TYPE_OBJECT)\n+\n+#define GARROW_MEMORY_POOL_GET_PRIVATE(obj)        \\\n+  static_cast<GArrowMemoryPoolPrivate *>(          \\\n+     garrow_memory_pool_get_instance_private(      \\\n+       GARROW_MEMORY_POOL(obj)))\n+\n+static void\n+garrow_memory_pool_set_property(GObject *object,\n+                                guint prop_id,\n+                                const GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_MEMORY_POOL:\n+    priv->memory_pool =\n+      static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_get_property(GObject *object,\n+                                guint prop_id,\n+                                GValue *value,\n+                                GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_memory_pool_init(GArrowMemoryPool *object)\n+{\n+  auto priv = GARROW_MEMORY_POOL_GET_PRIVATE(object);\n+  new(&priv->memory_pool) arrow::MemoryPool*;\n+}\n+\n+static void\n+garrow_memory_pool_class_init(GArrowMemoryPoolClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_memory_pool_set_property;\n+  gobject_class->get_property = garrow_memory_pool_get_property;\n+\n+  spec = g_param_spec_pointer(\"memory-pool\",\n+                              \"Memory Pool\",\n+                              \"The raw arrow::MemoryPool* *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_MEMORY_POOL, spec);\n+}\n+\n+/**\n+ * garrow_default_memory_pool:\n+ * \n+ * Returns: (transfer none): The process-wide default memory pool.\n+ *\n+ * Since: 9.0.0\n+ */\n+GArrowMemoryPool *\n+garrow_default_memory_pool()\n+{\n+  auto memory_pool = arrow::default_memory_pool();\n+  return garrow_memory_pool_new_raw(memory_pool);\n+}\n+\n+/**\n+ * garrow_memory_pool_get_bytes_allocated:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ *\n+ * Returns: The number of bytes that were allocated and not yet free\u2019d\n+ * through this allocator.\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_bytes_allocated(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->bytes_allocated();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_max_memory:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * Return peak memory allocation in this memory pool.\n+ *\n+ * Returns: Maximum bytes allocated. If not known (or not implemented),\n+ *   returns -1\n+ *\n+ * Since: 9.0.0\n+ */\n+gint64\n+garrow_memory_pool_get_max_memory(GArrowMemoryPool *memory_pool)\n+{\n+  auto arrow_memory_pool = garrow_memory_pool_get_raw(memory_pool);\n+  return arrow_memory_pool->max_memory();\n+}\n+\n+/**\n+ * garrow_memory_pool_get_backend_name:\n+ * @memory_pool: A #GArrowMemoryPool.\n+ * \n+ * The name of the backend used by this MemoryPool (e.g. \u201csystem\u201d or\n+ * \u201cjemalloc\u201d).\n+ *\n\nReview Comment:\n   ```suggestion\r\n    *\r\n    *   It should be freed with g_free() when no longer needed.\r\n   ```\n\n\n\n",
                    "created": "2022-05-26T20:11:34.348+0000",
                    "updated": "2022-05-26T20:11:34.348+0000",
                    "started": "2022-05-26T20:11:34.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775228",
                    "issueId": "13446712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/775399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #13224:\nURL: https://github.com/apache/arrow/pull/13224#discussion_r882211740\n\n\n##########\nc_glib/arrow-glib/memory-pool.cpp:\n##########\n@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/memory-pool.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: memory-pool\n+ * @section_id: memory-pool-classes\n+ * @title: memory-pool classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowMemoryPool is a class for memory allocation.\n+ */\n+\n+typedef struct GArrowMemoryPoolPrivate_ {\n+  arrow::MemoryPool* memory_pool;\n\nReview Comment:\n   ```suggestion\r\n     arrow::MemoryPool *memory_pool;\r\n   ```\r\n   \r\n   We use C style in this file.\n\n\n\n",
                    "created": "2022-05-27T06:05:18.305+0000",
                    "updated": "2022-05-27T06:05:18.305+0000",
                    "started": "2022-05-27T06:05:18.304+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775399",
                    "issueId": "13446712"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/worklog/775402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou merged PR #13224:\nURL: https://github.com/apache/arrow/pull/13224\n\n\n",
                    "created": "2022-05-27T06:07:41.607+0000",
                    "updated": "2022-05-27T06:07:41.607+0000",
                    "started": "2022-05-27T06:07:41.607+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775402",
                    "issueId": "13446712"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5f936357[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4faa6e92[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3fa0b21c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@23629584[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@758225ec[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6104be26[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b0ed048[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6cf7a018[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8be452f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4c0f2f90[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61ae2ac9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3088a184[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri May 27 06:07:46 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-05-27T06:07:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16648/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-05-25T07:23:01.000+0000",
        "updated": "2022-05-27T06:07:46.000+0000",
        "timeoriginalestimate": null,
        "description": "The MemoryPool class is needed in the GLib bindings for troubleshooting ARROW-14790.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add MemoryPool wrapper",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13446712/comment/17542792",
                    "id": "17542792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 13224\n[https://github.com/apache/arrow/pull/13224]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-05-27T06:07:46.952+0000",
                    "updated": "2022-05-27T06:07:46.952+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z12nw0:",
        "customfield_12314139": null
    }
}