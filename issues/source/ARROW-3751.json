{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197572",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572",
    "key": "ARROW-3751",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=suquark",
            "name": "suquark",
            "key": "suquark",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=suquark&avatarId=36059",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=suquark&avatarId=36059",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=suquark&avatarId=36059",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=suquark&avatarId=36059"
            },
            "displayName": "Siyuan Zhuang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=suquark",
            "name": "suquark",
            "key": "suquark",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=suquark&avatarId=36059",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=suquark&avatarId=36059",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=suquark&avatarId=36059",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=suquark&avatarId=36059"
            },
            "displayName": "Siyuan Zhuang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=suquark",
            "name": "suquark",
            "key": "suquark",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=suquark&avatarId=36059",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=suquark&avatarId=36059",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=suquark&avatarId=36059",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=suquark&avatarId=36059"
            },
            "displayName": "Siyuan Zhuang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3751/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/164673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suquark opened a new pull request #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936\n \n \n   https://issues.apache.org/jira/projects/ARROW/issues/ARROW-3751\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T09:02:48.071+0000",
                    "updated": "2018-11-10T09:02:48.071+0000",
                    "started": "2018-11-10T09:02:48.070+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164673",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/164719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on issue #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#issuecomment-437614136\n \n \n   This looks good to me! Can you also add a test?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T19:38:27.280+0000",
                    "updated": "2018-11-10T19:38:27.280+0000",
                    "started": "2018-11-10T19:38:27.279+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164719",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/165834",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#issuecomment-438583529\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=h1) Report\n   > Merging [#2936](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1ef6c2644b654fa77c49cc20bb9d8fc66d3f0c4f?src=pr&el=desc) will **increase** coverage by `1.06%`.\n   > The diff coverage is `45.45%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2936/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2936      +/-   ##\n   ==========================================\n   + Coverage   86.51%   87.57%   +1.06%     \n   ==========================================\n     Files         490      422      -68     \n     Lines       68879    63761    -5118     \n   ==========================================\n   - Hits        59590    55841    -3749     \n   + Misses       9201     7920    -1281     \n   + Partials       88        0      -88\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_gandiva.py](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9nYW5kaXZhLnB5) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/gandiva.pyx](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvZ2FuZGl2YS5weXg=) | `56.98% <21.05%> (-9.23%)` | :arrow_down: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | ... and [68 more](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=footer). Last update [1ef6c26...4577e88](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T08:46:46.703+0000",
                    "updated": "2018-11-14T08:46:46.703+0000",
                    "started": "2018-11-14T08:46:46.702+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165834",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#discussion_r233586811\n \n \n\n ##########\n File path: python/pyarrow/gandiva.pyx\n ##########\n @@ -241,6 +248,76 @@ cdef class TreeExprBuilder:\n             return_type.sp_type)\n         return Node.create(r)\n \n+    def make_and(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeAnd(c_children)\n+        return Node.create(r)\n+\n+    def make_or(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeOr(c_children)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int32(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int32_t] c_values\n+        cdef int32_t _v\n \n Review comment:\n   I think you can just call this v, remove the _v and cython will know the loop counter is int32_t (same for the other methods)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T19:26:39.937+0000",
                    "updated": "2018-11-14T19:26:39.937+0000",
                    "started": "2018-11-14T19:26:39.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166039",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166042",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#discussion_r233587146\n \n \n\n ##########\n File path: python/pyarrow/gandiva.pyx\n ##########\n @@ -241,6 +248,76 @@ cdef class TreeExprBuilder:\n             return_type.sp_type)\n         return Node.create(r)\n \n+    def make_and(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeAnd(c_children)\n+        return Node.create(r)\n+\n+    def make_or(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeOr(c_children)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int32(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int32_t] c_values\n+        cdef int32_t _v\n+        for v in values:\n+            _v = v\n+            c_values.insert(_v)\n+        r = TreeExprBuilder_MakeInExpressionInt32(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int64(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int64_t] c_values\n+        cdef int64_t _v\n+        for v in values:\n+            _v = v\n+            c_values.insert(_v)\n+        r = TreeExprBuilder_MakeInExpressionInt64(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_binary(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[c_string] c_values\n+        cdef char* _v\n+        for v in values:\n+            _v = v\n+            c_values.insert(c_string(_v))\n+        r = TreeExprBuilder_MakeInExpressionString(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_str(self, Node node, values):\n \n Review comment:\n   let's be consistent with the type names/gandiva names and call it \"_make_in_expression_string\"\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T19:27:42.633+0000",
                    "updated": "2018-11-14T19:27:42.633+0000",
                    "started": "2018-11-14T19:27:42.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166042",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#discussion_r233587937\n \n \n\n ##########\n File path: python/pyarrow/gandiva.pyx\n ##########\n @@ -241,6 +248,76 @@ cdef class TreeExprBuilder:\n             return_type.sp_type)\n         return Node.create(r)\n \n+    def make_and(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeAnd(c_children)\n+        return Node.create(r)\n+\n+    def make_or(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeOr(c_children)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int32(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int32_t] c_values\n+        cdef int32_t _v\n+        for v in values:\n+            _v = v\n+            c_values.insert(_v)\n+        r = TreeExprBuilder_MakeInExpressionInt32(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int64(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int64_t] c_values\n+        cdef int64_t _v\n+        for v in values:\n+            _v = v\n+            c_values.insert(_v)\n+        r = TreeExprBuilder_MakeInExpressionInt64(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_binary(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[c_string] c_values\n+        cdef char* _v\n+        for v in values:\n+            _v = v\n+            c_values.insert(c_string(_v))\n+        r = TreeExprBuilder_MakeInExpressionString(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_str(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[c_string] c_values\n+        cdef c_string _v\n+        for v in values:\n+            _v = v.encode('UTF-8')\n+            c_values.insert(_v)\n+        r = TreeExprBuilder_MakeInExpressionString(node.node, c_values)\n+        return Node.create(r)\n+\n+    def make_in_expression(self, Node node, values, dtype):\n+        cdef DataType type = _as_type(dtype)\n+        if type.id == _Type_INT32 or type.id == _Type_TIME32:\n \n Review comment:\n   Don't the time and date cases need to be handled differently (calling TreeExprBuilder_MakeInExpressionDate etc.?)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T19:29:44.863+0000",
                    "updated": "2018-11-14T19:29:44.863+0000",
                    "started": "2018-11-14T19:29:44.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166046",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on a change in pull request #2936: WIP: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#discussion_r233588585\n \n \n\n ##########\n File path: python/pyarrow/tests/test_gandiva.py\n ##########\n @@ -100,6 +100,60 @@ def test_filter():\n     assert result.to_array().equals(pa.array(range(1000), type=pa.uint32()))\n \n \n+@pytest.mark.gandiva\n+def test_in_expr():\n+    import pyarrow.gandiva as gandiva\n+\n+    df = pd.DataFrame({\"a\": ['ga', 'an', 'nd', 'di', 'iv', 'va']})\n+    table = pa.Table.from_pandas(df)\n+\n+    # binary\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [b'an', b'nd'], pa.binary())\n+    condition = builder.make_condition(cond)\n+\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1, 2]\n+\n+    # string\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, ['an', 'nd'], pa.string())\n+    condition = builder.make_condition(cond)\n+\n \n Review comment:\n   Let's add tests for date and time stuff here too :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T19:31:30.030+0000",
                    "updated": "2018-11-14T19:31:30.030+0000",
                    "started": "2018-11-14T19:31:30.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166050",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166168",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suquark commented on issue #2936: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#issuecomment-438852006\n \n \n   Ready to merge. Just wait the CI.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T23:03:02.295+0000",
                    "updated": "2018-11-14T23:03:02.295+0000",
                    "started": "2018-11-14T23:03:02.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166168",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2936: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#issuecomment-438583529\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=h1) Report\n   > Merging [#2936](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/1ef6c2644b654fa77c49cc20bb9d8fc66d3f0c4f?src=pr&el=desc) will **increase** coverage by `1.17%`.\n   > The diff coverage is `46.24%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2936/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2936      +/-   ##\n   ==========================================\n   + Coverage   86.51%   87.68%   +1.17%     \n   ==========================================\n     Files         490      422      -68     \n     Lines       68879    63918    -4961     \n   ==========================================\n   - Hits        59590    56048    -3542     \n   + Misses       9201     7870    -1331     \n   + Partials       88        0      -88\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/gandiva/tree\\_expr\\_builder.cc](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Y3BwL3NyYy9nYW5kaXZhL3RyZWVfZXhwcl9idWlsZGVyLmNj) | `43.47% <0%> (+6.81%)` | :arrow_up: |\n   | [python/pyarrow/gandiva.pyx](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvZ2FuZGl2YS5weXg=) | `58.66% <44.15%> (-7.55%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_gandiva.py](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9nYW5kaXZhLnB5) | `76.28% <50%> (-23.72%)` | :arrow_down: |\n   | [python/pyarrow/array.pxi](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYXJyYXkucHhp) | `69.11% <0%> (-0.19%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `97.36% <0%> (-0.15%)` | :arrow_down: |\n   | [python/pyarrow/lib.pxd](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvbGliLnB4ZA==) | `0% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/parquet.py](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvcGFycXVldC5weQ==) | `93.69% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/types-test.cc](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3R5cGVzLXRlc3QuY2M=) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/converter.cc](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29udmVydGVyLmNj) | `94.82% <0%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/options.h](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3Yvb3B0aW9ucy5o) | `100% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [87 more](https://codecov.io/gh/apache/arrow/pull/2936/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=footer). Last update [1ef6c26...3b74773](https://codecov.io/gh/apache/arrow/pull/2936?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T06:06:38.913+0000",
                    "updated": "2018-11-15T06:06:38.913+0000",
                    "started": "2018-11-15T06:06:38.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166284",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz closed pull request #2936: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/gandiva/tree_expr_builder.cc b/cpp/src/gandiva/tree_expr_builder.cc\nindex 91e97abd42..86a2824075 100644\n--- a/cpp/src/gandiva/tree_expr_builder.cc\n+++ b/cpp/src/gandiva/tree_expr_builder.cc\n@@ -185,9 +185,11 @@ ConditionPtr TreeExprBuilder::MakeCondition(const std::string& function,\n \n MAKE_IN(Int32, int32_t);\n MAKE_IN(Int64, int64_t);\n-MAKE_IN(Date, int64_t);\n+MAKE_IN(Date32, int32_t);\n+MAKE_IN(Date64, int64_t);\n MAKE_IN(TimeStamp, int64_t);\n-MAKE_IN(Time, int32_t);\n+MAKE_IN(Time32, int32_t);\n+MAKE_IN(Time64, int64_t);\n MAKE_IN(String, std::string);\n MAKE_IN(Binary, std::string);\n \ndiff --git a/cpp/src/gandiva/tree_expr_builder.h b/cpp/src/gandiva/tree_expr_builder.h\nindex 5d4946ee0f..cd261c8bf9 100644\n--- a/cpp/src/gandiva/tree_expr_builder.h\n+++ b/cpp/src/gandiva/tree_expr_builder.h\n@@ -90,18 +90,32 @@ class TreeExprBuilder {\n   /// \\brief creates an in expression\n   static NodePtr MakeInExpressionInt32(NodePtr node,\n                                        const std::unordered_set<int32_t>& constants);\n+\n   static NodePtr MakeInExpressionInt64(NodePtr node,\n                                        const std::unordered_set<int64_t>& constants);\n+\n   static NodePtr MakeInExpressionString(NodePtr node,\n                                         const std::unordered_set<std::string>& constants);\n+\n   static NodePtr MakeInExpressionBinary(NodePtr node,\n                                         const std::unordered_set<std::string>& constants);\n-  /// \\brief Date as millis since epoch.\n-  static NodePtr MakeInExpressionDate(NodePtr node,\n-                                      const std::unordered_set<int64_t>& constants);\n-  /// \\brief Time as millis of day\n-  static NodePtr MakeInExpressionTime(NodePtr node,\n-                                      const std::unordered_set<int32_t>& constants);\n+\n+  /// \\brief Date as s/millis since epoch.\n+  static NodePtr MakeInExpressionDate32(NodePtr node,\n+                                        const std::unordered_set<int32_t>& constants);\n+\n+  /// \\brief Date as millis/us/ns since epoch.\n+  static NodePtr MakeInExpressionDate64(NodePtr node,\n+                                        const std::unordered_set<int64_t>& constants);\n+\n+  /// \\brief Time as s/millis of day\n+  static NodePtr MakeInExpressionTime32(NodePtr node,\n+                                        const std::unordered_set<int32_t>& constants);\n+\n+  /// \\brief Time as millis/us/ns of day\n+  static NodePtr MakeInExpressionTime64(NodePtr node,\n+                                        const std::unordered_set<int64_t>& constants);\n+\n   /// \\brief Timestamp as millis since epoch.\n   static NodePtr MakeInExpressionTimeStamp(NodePtr node,\n                                            const std::unordered_set<int64_t>& constants);\ndiff --git a/python/pyarrow/gandiva.pyx b/python/pyarrow/gandiva.pyx\nindex 162517a8f1..418d0d6150 100644\n--- a/python/pyarrow/gandiva.pyx\n+++ b/python/pyarrow/gandiva.pyx\n@@ -23,7 +23,8 @@ from libcpp cimport bool as c_bool, nullptr\n from libcpp.memory cimport shared_ptr, unique_ptr, make_shared\n from libcpp.string cimport string as c_string\n from libcpp.vector cimport vector as c_vector\n-from libc.stdint cimport int64_t, uint8_t, uintptr_t\n+from libcpp.unordered_set cimport unordered_set as c_unordered_set\n+from libc.stdint cimport int64_t, int32_t, uint8_t, uintptr_t\n \n from pyarrow.includes.libarrow cimport *\n from pyarrow.compat import frombytes\n@@ -32,34 +33,46 @@ from pyarrow.lib cimport (Array, DataType, Field, MemoryPool, RecordBatch,\n                           Schema, check_status, pyarrow_wrap_array,\n                           pyarrow_wrap_data_type)\n \n-from pyarrow.includes.libgandiva cimport (CCondition, CExpression,\n-                                          CNode, CProjector, CFilter,\n-                                          CSelectionVector,\n-                                          TreeExprBuilder_MakeExpression,\n-                                          TreeExprBuilder_MakeFunction,\n-                                          TreeExprBuilder_MakeBoolLiteral,\n-                                          TreeExprBuilder_MakeUInt8Literal,\n-                                          TreeExprBuilder_MakeUInt16Literal,\n-                                          TreeExprBuilder_MakeUInt32Literal,\n-                                          TreeExprBuilder_MakeUInt64Literal,\n-                                          TreeExprBuilder_MakeInt8Literal,\n-                                          TreeExprBuilder_MakeInt16Literal,\n-                                          TreeExprBuilder_MakeInt32Literal,\n-                                          TreeExprBuilder_MakeInt64Literal,\n-                                          TreeExprBuilder_MakeFloatLiteral,\n-                                          TreeExprBuilder_MakeDoubleLiteral,\n-                                          TreeExprBuilder_MakeStringLiteral,\n-                                          TreeExprBuilder_MakeBinaryLiteral,\n-                                          TreeExprBuilder_MakeField,\n-                                          TreeExprBuilder_MakeIf,\n-                                          TreeExprBuilder_MakeCondition,\n-                                          SelectionVector_MakeInt16,\n-                                          SelectionVector_MakeInt32,\n-                                          SelectionVector_MakeInt64,\n-                                          Projector_Make,\n-                                          Filter_Make,\n-                                          CFunctionSignature,\n-                                          GetRegisteredFunctionSignatures)\n+from pyarrow.includes.libgandiva cimport (\n+    CCondition, CExpression,\n+    CNode, CProjector, CFilter,\n+    CSelectionVector,\n+    TreeExprBuilder_MakeExpression,\n+    TreeExprBuilder_MakeFunction,\n+    TreeExprBuilder_MakeBoolLiteral,\n+    TreeExprBuilder_MakeUInt8Literal,\n+    TreeExprBuilder_MakeUInt16Literal,\n+    TreeExprBuilder_MakeUInt32Literal,\n+    TreeExprBuilder_MakeUInt64Literal,\n+    TreeExprBuilder_MakeInt8Literal,\n+    TreeExprBuilder_MakeInt16Literal,\n+    TreeExprBuilder_MakeInt32Literal,\n+    TreeExprBuilder_MakeInt64Literal,\n+    TreeExprBuilder_MakeFloatLiteral,\n+    TreeExprBuilder_MakeDoubleLiteral,\n+    TreeExprBuilder_MakeStringLiteral,\n+    TreeExprBuilder_MakeBinaryLiteral,\n+    TreeExprBuilder_MakeField,\n+    TreeExprBuilder_MakeIf,\n+    TreeExprBuilder_MakeAnd,\n+    TreeExprBuilder_MakeOr,\n+    TreeExprBuilder_MakeCondition,\n+    TreeExprBuilder_MakeInExpressionInt32,\n+    TreeExprBuilder_MakeInExpressionInt64,\n+    TreeExprBuilder_MakeInExpressionTime32,\n+    TreeExprBuilder_MakeInExpressionTime64,\n+    TreeExprBuilder_MakeInExpressionDate32,\n+    TreeExprBuilder_MakeInExpressionDate64,\n+    TreeExprBuilder_MakeInExpressionTimeStamp,\n+    TreeExprBuilder_MakeInExpressionString,\n+    TreeExprBuilder_MakeInExpressionBinary,\n+    SelectionVector_MakeInt16,\n+    SelectionVector_MakeInt32,\n+    SelectionVector_MakeInt64,\n+    Projector_Make,\n+    Filter_Make,\n+    CFunctionSignature,\n+    GetRegisteredFunctionSignatures)\n \n \n cdef class Node:\n@@ -241,6 +254,127 @@ cdef class TreeExprBuilder:\n             return_type.sp_type)\n         return Node.create(r)\n \n+    def make_and(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeAnd(c_children)\n+        return Node.create(r)\n+\n+    def make_or(self, children):\n+        cdef c_vector[shared_ptr[CNode]] c_children\n+        cdef Node child\n+        for child in children:\n+            c_children.push_back(child.node)\n+        cdef shared_ptr[CNode] r = TreeExprBuilder_MakeOr(c_children)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int32(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int32_t] c_values\n+        cdef int32_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionInt32(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_int64(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int64_t] c_values\n+        cdef int64_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionInt64(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_time32(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int32_t] c_values\n+        cdef int32_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionTime32(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_time64(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int64_t] c_values\n+        cdef int64_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionTime64(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_date32(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int32_t] c_values\n+        cdef int32_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionDate32(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_date64(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int64_t] c_values\n+        cdef int64_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionDate64(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_timestamp(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[int64_t] c_values\n+        cdef int64_t v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionTimeStamp(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_binary(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[c_string] c_values\n+        cdef c_string v\n+        for v in values:\n+            c_values.insert(v)\n+        r = TreeExprBuilder_MakeInExpressionString(node.node, c_values)\n+        return Node.create(r)\n+\n+    def _make_in_expression_string(self, Node node, values):\n+        cdef shared_ptr[CNode] r\n+        cdef c_unordered_set[c_string] c_values\n+        cdef c_string _v\n+        for v in values:\n+            _v = v.encode('UTF-8')\n+            c_values.insert(_v)\n+        r = TreeExprBuilder_MakeInExpressionString(node.node, c_values)\n+        return Node.create(r)\n+\n+    def make_in_expression(self, Node node, values, dtype):\n+        cdef DataType type = _as_type(dtype)\n+        if type.id == _Type_INT32:\n+            return self._make_in_expression_int32(node, values)\n+        elif type.id == _Type_INT64:\n+            return self._make_in_expression_int64(node, values)\n+        elif type.id == _Type_TIME32:\n+            return self._make_in_expression_time32(node, values)\n+        elif type.id == _Type_TIME64:\n+            return self._make_in_expression_time64(node, values)\n+        elif type.id == _Type_TIMESTAMP:\n+            return self._make_in_expression_timestamp(node, values)\n+        elif type.id == _Type_DATE32:\n+            return self._make_in_expression_date32(node, values)\n+        elif type.id == _Type_DATE64:\n+            return self._make_in_expression_date64(node, values)\n+        elif type.id == _Type_BINARY:\n+            return self._make_in_expression_binary(node, values)\n+        elif type.id == _Type_STRING:\n+            return self._make_in_expression_string(node, values)\n+        else:\n+            raise TypeError(\"Data type \" + str(dtype) + \" not supported.\")\n+\n     def make_condition(self, Node condition):\n         cdef shared_ptr[CCondition] r = TreeExprBuilder_MakeCondition(\n             condition.node)\ndiff --git a/python/pyarrow/includes/libgandiva.pxd b/python/pyarrow/includes/libgandiva.pxd\nindex 6e98e89c0f..fc73872128 100644\n--- a/python/pyarrow/includes/libgandiva.pxd\n+++ b/python/pyarrow/includes/libgandiva.pxd\n@@ -17,6 +17,10 @@\n \n # distutils: language = c++\n \n+from libcpp.string cimport string as c_string\n+from libcpp.unordered_set cimport unordered_set as c_unordered_set\n+from libc.stdint cimport int64_t, int32_t, uint8_t, uintptr_t\n+\n from pyarrow.includes.common cimport *\n from pyarrow.includes.libarrow cimport *\n \n@@ -122,10 +126,52 @@ cdef extern from \"gandiva/tree_expr_builder.h\" namespace \"gandiva\" nogil:\n             shared_ptr[CNode] condition, shared_ptr[CNode] this_node,\n             shared_ptr[CNode] else_node, shared_ptr[CDataType] return_type)\n \n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeAnd \\\n+        \"gandiva::TreeExprBuilder::MakeAnd\"(const CNodeVector& children)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeOr \\\n+        \"gandiva::TreeExprBuilder::MakeOr\"(const CNodeVector& children)\n+\n     cdef shared_ptr[CCondition] TreeExprBuilder_MakeCondition \\\n         \"gandiva::TreeExprBuilder::MakeCondition\"(\n             shared_ptr[CNode] condition)\n \n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionInt32 \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionInt32\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int32_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionInt64 \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionInt64\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int64_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionTime32 \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionTime32\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int32_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionTime64 \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionTime64\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int64_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionDate32 \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionDate32\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int32_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionDate64 \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionDate64\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int64_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionTimeStamp \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionTimeStamp\"(\n+            shared_ptr[CNode] node, const c_unordered_set[int64_t]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionString \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionString\"(\n+            shared_ptr[CNode] node, const c_unordered_set[c_string]& values)\n+\n+    cdef shared_ptr[CNode] TreeExprBuilder_MakeInExpressionBinary \\\n+        \"gandiva::TreeExprBuilder::MakeInExpressionBinary\"(\n+            shared_ptr[CNode] node, const c_unordered_set[c_string]& values)\n+\n     cdef CStatus Projector_Make \\\n         \"gandiva::Projector::Make\"(\n             shared_ptr[CSchema] schema, const CExpressionVector& children,\ndiff --git a/python/pyarrow/tests/test_gandiva.py b/python/pyarrow/tests/test_gandiva.py\nindex dd94ecd5c3..fa99b99ce2 100644\n--- a/python/pyarrow/tests/test_gandiva.py\n+++ b/python/pyarrow/tests/test_gandiva.py\n@@ -15,6 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+import datetime\n import pytest\n \n import pyarrow as pa\n@@ -100,6 +101,143 @@ def test_filter():\n     assert result.to_array().equals(pa.array(range(1000), type=pa.uint32()))\n \n \n+@pytest.mark.gandiva\n+def test_in_expr():\n+    import pyarrow.gandiva as gandiva\n+\n+    arr = pa.array([u\"ga\", u\"an\", u\"nd\", u\"di\", u\"iv\", u\"va\"])\n+    table = pa.Table.from_arrays([arr], [\"a\"])\n+\n+    # string\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [u\"an\", u\"nd\"], pa.string())\n+    condition = builder.make_condition(cond)\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1, 2]\n+\n+    # int32\n+    arr = pa.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 4])\n+    table = pa.Table.from_arrays([arr.cast(pa.int32())], [\"a\"])\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [1, 5], pa.int32())\n+    condition = builder.make_condition(cond)\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1, 3, 4, 8]\n+\n+    # int64\n+    arr = pa.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 4])\n+    table = pa.Table.from_arrays([arr], [\"a\"])\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [1, 5], pa.int64())\n+    condition = builder.make_condition(cond)\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1, 3, 4, 8]\n+\n+\n+@pytest.mark.skip(reason=\"Gandiva C++ did not have *real* binary, \"\n+                         \"time and date support.\")\n+def test_in_expr_todo():\n+    import pyarrow.gandiva as gandiva\n+    # TODO: Implement reasonable support for timestamp, time & date.\n+    # Current exceptions:\n+    # pyarrow.lib.ArrowException: ExpressionValidationError:\n+    # Evaluation expression for IN clause returns XXXX values are of typeXXXX\n+\n+    # binary\n+    arr = pa.array([b\"ga\", b\"an\", b\"nd\", b\"di\", b\"iv\", b\"va\"])\n+    table = pa.Table.from_arrays([arr], [\"a\"])\n+\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [b'an', b'nd'], pa.binary())\n+    condition = builder.make_condition(cond)\n+\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1, 2]\n+\n+    # timestamp\n+    datetime_1 = datetime.datetime.utcfromtimestamp(1542238951.621877)\n+    datetime_2 = datetime.datetime.utcfromtimestamp(1542238911.621877)\n+    datetime_3 = datetime.datetime.utcfromtimestamp(1542238051.621877)\n+\n+    arr = pa.array([datetime_1, datetime_2, datetime_3])\n+    table = pa.Table.from_arrays([arr], [\"a\"])\n+\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [datetime_2], pa.timestamp('ms'))\n+    condition = builder.make_condition(cond)\n+\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1]\n+\n+    # time\n+    time_1 = datetime_1.time()\n+    time_2 = datetime_2.time()\n+    time_3 = datetime_3.time()\n+\n+    arr = pa.array([time_1, time_2, time_3])\n+    table = pa.Table.from_arrays([arr], [\"a\"])\n+\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [time_2], pa.time64('ms'))\n+    condition = builder.make_condition(cond)\n+\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1]\n+\n+    # date\n+    date_1 = datetime_1.date()\n+    date_2 = datetime_2.date()\n+    date_3 = datetime_3.date()\n+\n+    arr = pa.array([date_1, date_2, date_3])\n+    table = pa.Table.from_arrays([arr], [\"a\"])\n+\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    cond = builder.make_in_expression(node_a, [date_2], pa.date32())\n+    condition = builder.make_condition(cond)\n+\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [1]\n+\n+\n+@pytest.mark.gandiva\n+def test_boolean():\n+    import pyarrow.gandiva as gandiva\n+\n+    df = pd.DataFrame({\"a\": [1., 31., 46., 3., 57., 44., 22.],\n+                       \"b\": [5., 45., 36., 73., 83., 23., 76.]})\n+    table = pa.Table.from_pandas(df)\n+\n+    builder = gandiva.TreeExprBuilder()\n+    node_a = builder.make_field(table.schema.field_by_name(\"a\"))\n+    node_b = builder.make_field(table.schema.field_by_name(\"b\"))\n+    fifty = builder.make_literal(50.0, pa.float64())\n+    eleven = builder.make_literal(11.0, pa.float64())\n+\n+    cond_1 = builder.make_function(\"less_than\", [node_a, fifty], pa.bool_())\n+    cond_2 = builder.make_function(\"greater_than\", [node_a, node_b],\n+                                   pa.bool_())\n+    cond_3 = builder.make_function(\"less_than\", [node_b, eleven], pa.bool_())\n+    cond = builder.make_or([builder.make_and([cond_1, cond_2]), cond_3])\n+    condition = builder.make_condition(cond)\n+\n+    filter = gandiva.make_filter(table.schema, condition)\n+    result = filter.evaluate(table.to_batches()[0], pa.default_memory_pool())\n+    assert list(result.to_array()) == [0, 2, 5]\n+\n+\n @pytest.mark.gandiva\n def test_literals():\n     import pyarrow.gandiva as gandiva\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T06:38:23.153+0000",
                    "updated": "2018-11-15T06:38:23.153+0000",
                    "started": "2018-11-15T06:38:23.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166293",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pcmoritz commented on issue #2936: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#issuecomment-438934494\n \n \n   Awesome, thanks for this! Do you want to create a JIRA with the issue and also link this PR so it is clear where it comes up?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T06:39:36.988+0000",
                    "updated": "2018-11-15T06:39:36.988+0000",
                    "started": "2018-11-15T06:39:36.987+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166294",
                    "issueId": "13197572"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/worklog/166303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "suquark commented on issue #2936: ARROW-3751: [Gandiva][Python] Add more cython bindings for gandiva\nURL: https://github.com/apache/arrow/pull/2936#issuecomment-438939158\n \n \n   Yes. I have mentioned `make_in_expression` in a new issue: https://issues.apache.org/jira/browse/ARROW-3799.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T07:04:06.263+0000",
                    "updated": "2018-11-15T07:04:06.263+0000",
                    "started": "2018-11-15T07:04:06.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166303",
                    "issueId": "13197572"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@25da57db[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77422f8a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@752c9259[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@13f4cd09[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2983908c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@508fc9cf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41a037dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@74892665[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@413bcf88[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6f54b7d1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f0a6b39[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@120dcab3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 15 06:38:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-15T06:38:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3751/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-10T08:58:56.000+0000",
        "updated": "2018-11-15T07:04:06.000+0000",
        "timeoriginalestimate": null,
        "description": "There are some cython bindings lost in\u00a0ARROW-3602 (MakeAdd, MakeOr, MakeIn).\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add more cython bindings for gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197572/comment/16687547",
                    "id": "16687547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 2936\n[https://github.com/apache/arrow/pull/2936]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-11-15T06:38:21.501+0000",
                    "updated": "2018-11-15T06:38:21.501+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00cpc:",
        "customfield_12314139": null
    }
}