{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13363665",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665",
    "key": "ARROW-11928",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12610348",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12610348",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12615165",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615165",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13376404",
                    "key": "ARROW-12633",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13376404",
                    "fields": {
                        "summary": "[C++] Query engine umbrella issue",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12624370",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12624370",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13286025",
                    "key": "ARROW-7878",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13286025",
                    "fields": {
                        "summary": "[C++] Implement LogicalPlan and LogicalPlanBuilder",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 28200,
            "total": 28200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 28200,
            "total": 28200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11928/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 47,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/567928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-17T19:32:30.569+0000",
                    "updated": "2021-03-17T19:32:30.569+0000",
                    "started": "2021-03-17T19:32:30.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "567928",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/567929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#issuecomment-801355489\n\n\n   @bkietz @wesm Here is an initial stab at the exec node API. Only base classes are present.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-17T19:35:44.581+0000",
                    "updated": "2021-03-17T19:35:44.581+0000",
                    "started": "2021-03-17T19:35:44.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "567929",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598372744\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n\nReview comment:\n       What is \"batch_index\"? \n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n+\n+  /// Mark the inputs finished after the given number of batches.\n+  ///\n+  /// This may be called before all inputs are received.  This simply fixes\n+  /// the total number of incoming batches so that the ExecNode knows when\n+  /// it has received all input.\n+  Status InputFinished(int32_t num_batches);\n\nReview comment:\n       * In general, nodes will not know how many batches they are going to produce, so the situations where this API would be used seem rare to me\r\n   * When a node has multiple inputs (e.g. joins, unions), the parent nodes will finish producing outputs at different times. How are they supposed to independently communicate that they are done?\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n+\n+  /// Mark the inputs finished after the given number of batches.\n+  ///\n+  /// This may be called before all inputs are received.  This simply fixes\n+  /// the total number of incoming batches so that the ExecNode knows when\n+  /// it has received all input.\n+  Status InputFinished(int32_t num_batches);\n+\n+  /// Schedule batch execution once all inputs are received for the given batch_index\n+  ///\n+  /// The returned Future is finished once execution of the batch is finished.\n+  /// Note that execution doesn't necessarily mean that any outputs are produced.\n+  /// Depending on the ExecNode type, outputs may be produced on the fly,\n+  /// or only at the end when all inputs have been received.\n+  Future<> RunAsync(int32_t batch_index, internal::Executor* executor);\n\nReview comment:\n       I guess I don't understand what \"batch_index\" is yet\n\n##########\nFile path: cpp/src/arrow/engine/query_plan.h\n##########\n@@ -0,0 +1,99 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       I don't think that work on query planning is anticipated soon, only work on execution, so this could be put off later.\r\n   \r\n   As a nit, I would also suggest calling this \"logical_plan.h\" to distinguish logical from physical execution. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T01:21:44.086+0000",
                    "updated": "2021-03-22T01:21:44.086+0000",
                    "started": "2021-03-22T01:21:44.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569487",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#issuecomment-803842961\n\n\n   How does this handle fan-out style parallelism.  For example, you can generally filter batch N while filtering batch N+1 at the same time.  Would there be a single ExecNode that is run twice?  If so won't you have trouble tracking inputs?  Or would there be two ExecNode instances in the plan?  In that case how would you decide which node to deliver batches to?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T07:47:11.253+0000",
                    "updated": "2021-03-22T07:47:11.253+0000",
                    "started": "2021-03-22T07:47:11.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569563",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598487916\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.cc\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/exec_plan.h\"\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/engine/query_plan.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace engine {\n+\n+ExecNode::InputBatch::InputBatch(std::vector<util::optional<compute::ExecBatch>> batches)\n+    : batches(std::move(batches)), ready_fut(Future<>::Make()) {}\n+\n+ExecNode::ExecNode(ExecPlan* plan, const QueryNode* query_node)\n+    : plan_(plan),\n+      query_node_(query_node),\n+      num_inputs_(query_node->num_inputs()),\n+      finished_fut_(Future<>::Make()) {}\n+\n+ExecNode::~ExecNode() = default;\n+\n+void ExecNode::ReserveBatches(int32_t num_batches) {\n+  // Should be called with mutex locked\n+  if (static_cast<size_t>(num_batches) > input_batches_.size()) {\n+    input_batches_.resize(num_batches);\n+  }\n+}\n+\n+ExecNode::InputBatch* ExecNode::EnsureBatch(int32_t batch_index) {\n+  // Should be called with mutex locked\n+  if (input_batches_[batch_index] == nullptr) {\n+    input_batches_[batch_index].reset(\n+        new InputBatch{std::vector<util::optional<compute::ExecBatch>>(num_inputs_)});\n+  }\n+  return input_batches_[batch_index].get();\n+}\n+\n+Status ExecNode::InputReceived(int32_t input_index, int32_t batch_index,\n+                               compute::ExecBatch batch) {\n+  auto lock = mutex_.Lock();\n+\n+  if (input_index >= num_inputs_) {\n+    return Status::Invalid(\"Invalid input index\");\n+  }\n+  if (finish_at_ >= 0 && batch_index >= finish_at_) {\n+    return Status::Invalid(\"Input batch index out of bounds\");\n+  }\n+\n+  ReserveBatches(batch_index + 1);\n+  auto* input_batch = EnsureBatch(batch_index);\n+\n+  if (input_batch->batches[input_index].has_value()) {\n+    return Status::Invalid(\"Batch #\", batch_index, \" for input #\", input_index,\n+                           \" already received\");\n+  }\n+  input_batch->batches[input_index] = std::move(batch);\n+  if (++input_batch->num_ready == num_inputs_) {\n+    input_batch->ready_fut.MarkFinished();\n+  }\n+  return Status::OK();\n+}\n+\n+Status ExecNode::InputFinished(int32_t num_batches) {\n+  auto lock = mutex_.Lock();\n+\n+  if (finish_at_ >= 0) {\n+    return Status::Invalid(\"InputFinished already called\");\n+  }\n+  finish_at_ = num_batches;\n+  ReserveBatches(num_batches);\n+\n+  std::vector<Future<>> batch_futures;\n+  for (int32_t i = 0; i < num_batches; ++i) {\n+    auto* input_batch = EnsureBatch(i);\n+    batch_futures[i] = input_batch->ready_fut;\n+  }\n+\n+  // TODO lifetime\n+  AllComplete(std::move(batch_futures))\n+      .AddCallback([this](const Result<detail::Empty>& res) {\n+        finished_fut_.MarkFinished(res.status());\n+      });\n+  return Status::OK();\n+}\n+\n+Future<> ExecNode::RunAsync(int32_t batch_index, internal::Executor* executor) {\n+  auto lock = mutex_.Lock();\n+\n+  ReserveBatches(batch_index + 1);\n+  auto* input_batch = EnsureBatch(batch_index);\n+\n+  // TODO lifetime (take strong ref to ExecPlan?)\n+  return executor->Transfer(input_batch->ready_fut)\n\nReview comment:\n       Would different nodes run on different executors?  If not it might be simpler to avoid the transfer.  Also, do I have to call RunAsync on every node for every batch index?  Couldn't calling RunAsync on the root node(s?) be enough?\n\n##########\nFile path: cpp/src/arrow/engine/query_plan.h\n##########\n@@ -0,0 +1,99 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecPlan;\n+class QueryContext;\n+class QueryNode;\n+\n+class ARROW_EXPORT QueryPlan {\n\nReview comment:\n       What is the relationship between a query plan and an execution plan?  My current understanding is that a query plan is an AST of the query and the execution plan is a possibly optimized tree of workers.  Is this correct?\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n\nReview comment:\n       How do I actually run this?  There doesn't appear to be any public interface.\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n\nReview comment:\n       Shouldn't this be the other way around?  The QueryPlan doesn't have any reference to the ExecPlan (and if my understanding of the relationship is correct it shouldn't).  What value is there in this declaration?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T08:00:29.290+0000",
                    "updated": "2021-03-22T08:00:29.290+0000",
                    "started": "2021-03-22T08:00:29.290+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569568",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598571843\n\n\n\n##########\nFile path: cpp/src/arrow/engine/query_plan.h\n##########\n@@ -0,0 +1,99 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       Ok, perhaps the naming is bad, but this is not a logical plan. This is the physical plan. \"Exec plan\" is a particular instantiation of executing this physical plan.\r\n   \r\n   Does that make sense?\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n\nReview comment:\n       The index of the batch in the batch stream.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:00:43.435+0000",
                    "updated": "2021-03-22T10:00:43.435+0000",
                    "started": "2021-03-22T10:00:43.435+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569605",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598572601\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n+\n+  /// Mark the inputs finished after the given number of batches.\n+  ///\n+  /// This may be called before all inputs are received.  This simply fixes\n+  /// the total number of incoming batches so that the ExecNode knows when\n+  /// it has received all input.\n+  Status InputFinished(int32_t num_batches);\n\nReview comment:\n       As the docstring says, this may or may not be called before all inputs are received. But it must be called at some point so that the node knows that input is finished.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:01:26.689+0000",
                    "updated": "2021-03-22T10:01:26.689+0000",
                    "started": "2021-03-22T10:01:26.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569606",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598573395\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n+\n+  /// Mark the inputs finished after the given number of batches.\n+  ///\n+  /// This may be called before all inputs are received.  This simply fixes\n+  /// the total number of incoming batches so that the ExecNode knows when\n+  /// it has received all input.\n+  Status InputFinished(int32_t num_batches);\n\nReview comment:\n       As for the second question, it seems I should change this declaration to `Status InputFinished(int32_t input_index, int32_t num_batches)`. Does that sound right?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:02:34.392+0000",
                    "updated": "2021-03-22T10:02:34.392+0000",
                    "started": "2021-03-22T10:02:34.392+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569608",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598573870\n\n\n\n##########\nFile path: cpp/src/arrow/engine/query_plan.h\n##########\n@@ -0,0 +1,99 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecPlan;\n+class QueryContext;\n+class QueryNode;\n+\n+class ARROW_EXPORT QueryPlan {\n\nReview comment:\n       As I answered above, \"query plan\" is the physical plan. \"Exec plan\" is the particular execution of this plan for a given set of inputs. Does that make sense? Do you want to suggest other names?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:03:23.605+0000",
                    "updated": "2021-03-22T10:03:23.605+0000",
                    "started": "2021-03-22T10:03:23.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569611",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598576236\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.cc\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/engine/exec_plan.h\"\n+\n+#include \"arrow/compute/exec.h\"\n+#include \"arrow/engine/query_plan.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+\n+namespace engine {\n+\n+ExecNode::InputBatch::InputBatch(std::vector<util::optional<compute::ExecBatch>> batches)\n+    : batches(std::move(batches)), ready_fut(Future<>::Make()) {}\n+\n+ExecNode::ExecNode(ExecPlan* plan, const QueryNode* query_node)\n+    : plan_(plan),\n+      query_node_(query_node),\n+      num_inputs_(query_node->num_inputs()),\n+      finished_fut_(Future<>::Make()) {}\n+\n+ExecNode::~ExecNode() = default;\n+\n+void ExecNode::ReserveBatches(int32_t num_batches) {\n+  // Should be called with mutex locked\n+  if (static_cast<size_t>(num_batches) > input_batches_.size()) {\n+    input_batches_.resize(num_batches);\n+  }\n+}\n+\n+ExecNode::InputBatch* ExecNode::EnsureBatch(int32_t batch_index) {\n+  // Should be called with mutex locked\n+  if (input_batches_[batch_index] == nullptr) {\n+    input_batches_[batch_index].reset(\n+        new InputBatch{std::vector<util::optional<compute::ExecBatch>>(num_inputs_)});\n+  }\n+  return input_batches_[batch_index].get();\n+}\n+\n+Status ExecNode::InputReceived(int32_t input_index, int32_t batch_index,\n+                               compute::ExecBatch batch) {\n+  auto lock = mutex_.Lock();\n+\n+  if (input_index >= num_inputs_) {\n+    return Status::Invalid(\"Invalid input index\");\n+  }\n+  if (finish_at_ >= 0 && batch_index >= finish_at_) {\n+    return Status::Invalid(\"Input batch index out of bounds\");\n+  }\n+\n+  ReserveBatches(batch_index + 1);\n+  auto* input_batch = EnsureBatch(batch_index);\n+\n+  if (input_batch->batches[input_index].has_value()) {\n+    return Status::Invalid(\"Batch #\", batch_index, \" for input #\", input_index,\n+                           \" already received\");\n+  }\n+  input_batch->batches[input_index] = std::move(batch);\n+  if (++input_batch->num_ready == num_inputs_) {\n+    input_batch->ready_fut.MarkFinished();\n+  }\n+  return Status::OK();\n+}\n+\n+Status ExecNode::InputFinished(int32_t num_batches) {\n+  auto lock = mutex_.Lock();\n+\n+  if (finish_at_ >= 0) {\n+    return Status::Invalid(\"InputFinished already called\");\n+  }\n+  finish_at_ = num_batches;\n+  ReserveBatches(num_batches);\n+\n+  std::vector<Future<>> batch_futures;\n+  for (int32_t i = 0; i < num_batches; ++i) {\n+    auto* input_batch = EnsureBatch(i);\n+    batch_futures[i] = input_batch->ready_fut;\n+  }\n+\n+  // TODO lifetime\n+  AllComplete(std::move(batch_futures))\n+      .AddCallback([this](const Result<detail::Empty>& res) {\n+        finished_fut_.MarkFinished(res.status());\n+      });\n+  return Status::OK();\n+}\n+\n+Future<> ExecNode::RunAsync(int32_t batch_index, internal::Executor* executor) {\n+  auto lock = mutex_.Lock();\n+\n+  ReserveBatches(batch_index + 1);\n+  auto* input_batch = EnsureBatch(batch_index);\n+\n+  // TODO lifetime (take strong ref to ExecPlan?)\n+  return executor->Transfer(input_batch->ready_fut)\n\nReview comment:\n       I'm not sure what \"root nodes\" are in this context. You mean the sources?\r\n   \r\n   Indeed, we may simply want to start executing as soon as all inputs are ready. Though this will depend on the node: some can execute as soon as one batch is received, some need the whole input to be received.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:06:36.230+0000",
                    "updated": "2021-03-22T10:06:36.230+0000",
                    "started": "2021-03-22T10:06:36.230+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569615",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598579312\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n\nReview comment:\n       The query plan is supposed to instantiate a corresponding exec plan when `QueryPlan::MakeExecPlan` is called. Presumably that will need access to non-public APIs or members, but this is all just a sketch.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:09:00.063+0000",
                    "updated": "2021-03-22T10:09:00.063+0000",
                    "started": "2021-03-22T10:09:00.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569618",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598582203\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n\nReview comment:\n       Sorry, this is just a WIP PR. I decided to post it to ensure that I'm not entirely going in a bad direction.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:12:37.713+0000",
                    "updated": "2021-03-22T10:12:37.713+0000",
                    "started": "2021-03-22T10:12:37.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569621",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569622",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#issuecomment-803945598\n\n\n   >  For example, you can generally filter batch N while filtering batch N+1 at the same time. Would there be a single ExecNode that is run twice? If so won't you have trouble tracking inputs?\r\n   \r\n   There would be a single ExecNode that is run twice. Tracking the input is done through the `batch_index` (this is where you pass your N, N+1...). There is even a bit of logic implemented :-)\r\n   \r\n   I don't think independent ExecNodes would work, since some operations (e.g. hash aggregation or any vector function) need access to the entire input before starting to compute their output.\r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T10:15:45.517+0000",
                    "updated": "2021-03-22T10:15:45.517+0000",
                    "started": "2021-03-22T10:15:45.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569622",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598665751\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n\nReview comment:\n       I don't think this parameter is important, at least at this stage. Could you clarify what \"When all inputs are received for a given batch_index, the batch is ready for execution.\" means? In general, inputs from different parents won't necessarily correspond to each other.\r\n   \r\n   For example, suppose that we are joining a 1,000,000 row input with a 100,000 row input. One input might yield 100 batches while the other might only yield 5 or 10. They may be of differing lengths, in an unpredictable order (since scans won't necessarily yield a deterministic order), and the batches won't correspond to each other. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:20:43.306+0000",
                    "updated": "2021-03-22T12:20:43.306+0000",
                    "started": "2021-03-22T12:20:43.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569668",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598668228\n\n\n\n##########\nFile path: cpp/src/arrow/engine/query_plan.h\n##########\n@@ -0,0 +1,99 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n\nReview comment:\n       I see. How about:\r\n   \r\n   * query_plan.h -> physical_plan.h\r\n   * exec_plan.h -> exec_node.h\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:24:28.238+0000",
                    "updated": "2021-03-22T12:24:28.238+0000",
                    "started": "2021-03-22T12:24:28.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569669",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598669568\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n+\n+  /// Mark the inputs finished after the given number of batches.\n+  ///\n+  /// This may be called before all inputs are received.  This simply fixes\n+  /// the total number of incoming batches so that the ExecNode knows when\n+  /// it has received all input.\n+  Status InputFinished(int32_t num_batches);\n\nReview comment:\n       I would say to nix the \"num_batches\" argument, but otherwise yes `InputFinished(input_index)` sounds right\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:26:28.294+0000",
                    "updated": "2021-03-22T12:26:28.294+0000",
                    "started": "2021-03-22T12:26:28.294+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569671",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#issuecomment-804025092\n\n\n   > I don't think independent ExecNodes would work, since some operations (e.g. hash aggregation or any vector function) need access to the entire input before starting to compute their output.\r\n   \r\n   Note: Hash aggregation does not need access to its entire input to start computing, and in the first iteration of this project vector functions will be entirely disallowed. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:29:15.823+0000",
                    "updated": "2021-03-22T12:29:15.823+0000",
                    "started": "2021-03-22T12:29:15.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569672",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#issuecomment-804034133\n\n\n   Also keep in mind (for subsequent work) that some nodes (ie \u201cLimit\u201d in particular) will need to be able to apply backpressure on their parents to get them to immediately quit producing outputs. For example, if you have a \u201climit 1000\u201d query, as soon as you have 1000 rows of output you shut down the ancestors. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:47:23.865+0000",
                    "updated": "2021-03-22T12:47:23.865+0000",
                    "started": "2021-03-22T12:47:23.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569679",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#discussion_r598701694\n\n\n\n##########\nFile path: cpp/src/arrow/engine/exec_plan.h\n##########\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/compute/type_fwd.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/mutex.h\"\n+#include \"arrow/util/optional.h\"\n+#include \"arrow/util/type_fwd.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace engine {\n+\n+class ExecNode;\n+class QueryNode;\n+class QueryPlan;\n+\n+class ARROW_EXPORT ExecPlan {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecPlan() = default;\n+\n+  /// The query plan this ExecPlan is an instance of\n+  const QueryPlan& query_plan() const { return *query_plan_; }\n+\n+  compute::ExecContext* context() { return context_; }\n+\n+ protected:\n+  friend class QueryPlan;\n+\n+  ExecPlan() = default;\n+\n+  const std::shared_ptr<const QueryPlan> query_plan_;\n+  compute::ExecContext* context_;\n+};\n+\n+class ARROW_EXPORT ExecNode {\n+ public:\n+  using NodeVector = std::vector<ExecNode*>;\n+\n+  virtual ~ExecNode();\n+\n+  /// The query node this ExecNode is an instance of\n+  const QueryNode& query_node() const { return *query_node_; }\n+\n+  /// This node's exec plan\n+  ExecPlan* plan() { return plan_; }\n+\n+  /// Transfer input batch to ExecNode\n+  ///\n+  /// When all inputs are received for a given batch_index, the batch is ready\n+  /// for execution.\n+  Status InputReceived(int32_t input_index, int32_t batch_index,\n+                       compute::ExecBatch batch);\n\nReview comment:\n       >  In general, inputs from different parents won't necessarily correspond to each other.\r\n   \r\n   Ah, I see. This is a misunderstanding on my part, then. Sorry.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T13:13:26.101+0000",
                    "updated": "2021-03-22T13:13:26.101+0000",
                    "started": "2021-03-22T13:13:26.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569691",
                    "issueId": "13363665"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/worklog/569693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9742:\nURL: https://github.com/apache/arrow/pull/9742#issuecomment-804052211\n\n\n   > Note: Hash aggregation does not need access to its entire input to start computing, and in the first iteration of this project vector functions will be entirely disallowed.\r\n   \r\n   Hmm, right. But still, any output depends on the entire input, so it cannot be emitted on-the-fly while receiving partial input chunks.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T13:16:04.569+0000",
                    "updated": "2021-03-22T13:16:04.569+0000",
                    "started": "2021-03-22T13:16:04.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569693",
                    "issueId": "13363665"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 28200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@753b21f6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33bf4424[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cb2d70c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@45652cda[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@270a546f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@54e04ff6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e70f8d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@221f1e39[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57438f39[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@18ae5d8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48752348[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@12c112a9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 28200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 11 16:51:19 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-11T16:51:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11928/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-10T22:33:41.000+0000",
        "updated": "2021-10-08T19:38:08.000+0000",
        "timeoriginalestimate": null,
        "description": "Per discussion on https://docs.google.com/document/d/1AyTdLU-RxA-Gsb9EsYnrQrmqPMOYMfPlWwxRi1Is1tQ\r\n\r\nAdd an ExecNode interface with which a streaming execution graph can be constructed. Initial concrete classes will include:\r\n- ScanNode, which wraps a dataset and is a pure emitter of batches (initially, this will only wrap memory sized datasets such as tables. See ARROW-11930)\r\n- FilterNode, which evaluates an expression on inputs and based on the result removes rows from batches (eventually, this may defer materialization of the selection to other kernels. See ARROW-5005 ARROW-10474)\r\n- ProjectNode, which evaluates expressions on inputs producing new columns.\r\n- GroupedAggregateNode, which computes aggregations grouped on one or more keys.\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 28200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add ExecNode hierarchy",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13363665/comment/17342728",
                    "id": "17342728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10204\n[https://github.com/apache/arrow/pull/10204]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-11T16:51:19.974+0000",
                    "updated": "2021-05-11T16:51:19.974+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0oiuw:",
        "customfield_12314139": null
    }
}