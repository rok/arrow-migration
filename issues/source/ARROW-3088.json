{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13179850",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179850",
    "key": "ARROW-3088",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 600,
            "total": 600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3088/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 1,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179850/worklog/136136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #2448: ARROW-3088: [Rust] Use internal `Result<T>` type instead of `Result<T, ArrowError>`\nURL: https://github.com/apache/arrow/pull/2448\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex c5d7ee189e..0e1073653f 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -106,7 +106,7 @@ struct RawPtrBox<T> {\n \n impl<T> RawPtrBox<T> {\n     fn new(inner: *const T) -> Self {\n-        Self { inner: inner }\n+        Self { inner }\n     }\n \n     fn get(&self) -> *const T {\n@@ -240,11 +240,11 @@ macro_rules! def_primitive_array {\n /// Constructs a `PrimitiveArray` from an array data reference.\n impl<T: ArrowPrimitiveType> From<ArrayDataRef> for PrimitiveArray<T> {\n     fn from(data: ArrayDataRef) -> Self {\n-        assert!(data.buffers().len() == 1);\n+        assert_eq!(data.buffers().len(), 1);\n         let raw_values = data.buffers()[0].raw_data();\n         assert!(memory::is_aligned::<u8>(raw_values, mem::align_of::<T>()));\n         Self {\n-            data: data,\n+            data,\n             raw_values: RawPtrBox::new(raw_values as *const T),\n         }\n     }\n@@ -321,8 +321,8 @@ impl ListArray {\n /// Constructs a `ListArray` from an array data reference.\n impl From<ArrayDataRef> for ListArray {\n     fn from(data: ArrayDataRef) -> Self {\n-        assert!(data.buffers().len() == 1);\n-        assert!(data.child_data().len() == 1);\n+        assert_eq!(data.buffers().len(), 1);\n+        assert_eq!(data.child_data().len(), 1);\n         let values = make_array(data.child_data()[0].clone());\n         let raw_value_offsets = data.buffers()[0].raw_data();\n         assert!(memory::is_aligned(\n@@ -331,12 +331,15 @@ impl From<ArrayDataRef> for ListArray {\n         ));\n         let value_offsets = raw_value_offsets as *const i32;\n         unsafe {\n-            assert!(*value_offsets.offset(0) == 0);\n-            assert!(*value_offsets.offset(data.len() as isize) == values.data().len() as i32);\n+            assert_eq!(*value_offsets.offset(0), 0);\n+            assert_eq!(\n+                *value_offsets.offset(data.len() as isize),\n+                values.data().len() as i32\n+            );\n         }\n         Self {\n             data: data.clone(),\n-            values: values,\n+            values,\n             value_offsets: RawPtrBox::new(value_offsets),\n         }\n     }\n@@ -410,7 +413,7 @@ impl BinaryArray {\n \n impl From<ArrayDataRef> for BinaryArray {\n     fn from(data: ArrayDataRef) -> Self {\n-        assert!(data.buffers().len() == 2);\n+        assert_eq!(data.buffers().len(), 2);\n         let raw_value_offsets = data.buffers()[0].raw_data();\n         assert!(memory::is_aligned(\n             raw_value_offsets,\n@@ -478,10 +481,7 @@ impl From<ArrayDataRef> for StructArray {\n         for cd in data.child_data() {\n             boxed_fields.push(make_array(cd.clone()));\n         }\n-        Self {\n-            data: data,\n-            boxed_fields: boxed_fields,\n-        }\n+        Self { data, boxed_fields }\n     }\n }\n \ndiff --git a/rust/src/array_data.rs b/rust/src/array_data.rs\nindex 6ad9e2edbe..180d3f92b3 100644\n--- a/rust/src/array_data.rs\n+++ b/rust/src/array_data.rs\n@@ -156,7 +156,7 @@ pub struct ArrayDataBuilder {\n impl ArrayDataBuilder {\n     pub fn new(data_type: DataType) -> Self {\n         Self {\n-            data_type: data_type,\n+            data_type,\n             len: 0,\n             null_count: UNKNOWN_NULL_COUNT,\n             null_bit_buffer: None,\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex 624354a67f..d05848ada7 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -60,7 +60,7 @@ impl Buffer {\n     /// Creates a buffer from an existing memory region (must already be byte-aligned)\n     pub fn from_raw_parts(ptr: *const u8, len: usize) -> Self {\n         assert!(memory::is_aligned(ptr, 64));\n-        let buf_data = BufferData { ptr: ptr, len: len };\n+        let buf_data = BufferData { ptr, len };\n         Buffer {\n             data: Arc::new(buf_data),\n             offset: 0,\n@@ -147,17 +147,17 @@ mod tests {\n \n         // slice with same offset should still preserve equality\n         let buf3 = buf1.slice(2);\n-        assert!(buf1 != buf3);\n+        assert_ne!(buf1, buf3);\n         let buf4 = buf2.slice(2);\n         assert_eq!(buf3, buf4);\n \n         // unequal because of different elements\n         buf2 = Buffer::from(&[0, 0, 2, 3, 4]);\n-        assert!(buf1 != buf2);\n+        assert_ne!(buf1, buf2);\n \n         // unequal because of different length\n         buf2 = Buffer::from(&[0, 1, 2, 3]);\n-        assert!(buf1 != buf2);\n+        assert_ne!(buf1, buf2);\n     }\n \n     #[test]\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nindex 2ce0cc016a..63db786ba4 100644\n--- a/rust/src/datatypes.rs\n+++ b/rust/src/datatypes.rs\n@@ -19,7 +19,7 @@ use std::fmt;\n use std::mem::size_of;\n use std::slice::from_raw_parts;\n \n-use error::ArrowError;\n+use error::{ArrowError, Result};\n use serde_json::Value;\n \n /// Arrow data type\n@@ -92,8 +92,7 @@ where\n \n impl DataType {\n     /// Parse a data type from a JSON representation\n-    fn from(json: &Value) -> Result<DataType, ArrowError> {\n-        //println!(\"DataType::from({:?})\", json);\n+    fn from(json: &Value) -> Result<DataType> {\n         match *json {\n             Value::Object(ref map) => match map.get(\"name\") {\n                 Some(s) if s == \"bool\" => Ok(DataType::Boolean),\n@@ -148,7 +147,7 @@ impl DataType {\n                         let fields = fields_array\n                             .iter()\n                             .map(|f| Field::from(f))\n-                            .collect::<Result<Vec<Field>, ArrowError>>();\n+                            .collect::<Result<Vec<Field>>>();\n                         Ok(DataType::Struct(fields?))\n                     }\n                     _ => Err(ArrowError::ParseError(\"empty type\".to_string())),\n@@ -193,8 +192,8 @@ impl Field {\n     pub fn new(name: &str, data_type: DataType, nullable: bool) -> Self {\n         Field {\n             name: name.to_string(),\n-            data_type: data_type,\n-            nullable: nullable,\n+            data_type,\n+            nullable,\n         }\n     }\n \n@@ -211,8 +210,7 @@ impl Field {\n     }\n \n     /// Parse a field definition from a JSON representation\n-    pub fn from(json: &Value) -> Result<Self, ArrowError> {\n-        //println!(\"Field::from({:?}\", json);\n+    pub fn from(json: &Value) -> Result<Self> {\n         match *json {\n             Value::Object(ref map) => {\n                 let name = match map.get(\"name\") {\n@@ -284,7 +282,7 @@ impl Schema {\n     }\n \n     pub fn new(columns: Vec<Field>) -> Self {\n-        Schema { columns: columns }\n+        Schema { columns }\n     }\n \n     pub fn columns(&self) -> &Vec<Field> {\ndiff --git a/rust/src/memory.rs b/rust/src/memory.rs\nindex adcfe2f692..d35de682c3 100644\n--- a/rust/src/memory.rs\n+++ b/rust/src/memory.rs\n@@ -18,7 +18,7 @@\n use libc;\n use std::mem;\n \n-use super::error::ArrowError;\n+use super::error::{ArrowError, Result};\n \n const ALIGNMENT: usize = 64;\n \n@@ -30,7 +30,7 @@ extern \"C\" {\n }\n \n #[cfg(windows)]\n-pub fn allocate_aligned(size: i64) -> Result<*mut u8, ArrowError> {\n+pub fn allocate_aligned(size: i64) -> Result<*mut u8> {\n     let page = unsafe { _aligned_malloc(size as libc::size_t, ALIGNMENT as libc::size_t) };\n     match page {\n         0 => Err(ArrowError::MemoryError(\n@@ -41,7 +41,7 @@ pub fn allocate_aligned(size: i64) -> Result<*mut u8, ArrowError> {\n }\n \n #[cfg(not(windows))]\n-pub fn allocate_aligned(size: i64) -> Result<*mut u8, ArrowError> {\n+pub fn allocate_aligned(size: i64) -> Result<*mut u8> {\n     unsafe {\n         let mut page: *mut libc::c_void = mem::uninitialized();\n         let result = libc::posix_memalign(&mut page, ALIGNMENT, size as usize);\ndiff --git a/rust/src/memory_pool.rs b/rust/src/memory_pool.rs\nindex 207debc7b6..baf02b73ae 100644\n--- a/rust/src/memory_pool.rs\n+++ b/rust/src/memory_pool.rs\n@@ -19,24 +19,20 @@ use libc;\n use std::cmp;\n use std::mem;\n \n-use super::error::ArrowError;\n+use super::error::Result;\n use super::memory::{allocate_aligned, free_aligned};\n \n /// Memory pool for allocating memory. It's also responsible for tracking memory usage.\n pub trait MemoryPool {\n     /// Allocate memory.\n     /// The implementation should ensures that allocated memory is aligned.\n-    fn allocate(&self, size: usize) -> Result<*mut u8, ArrowError>;\n+    fn allocate(&self, size: usize) -> Result<*mut u8>;\n \n     /// Reallocate memory.\n     /// If the implementation doesn't support reallocating aligned memory, it allocates new memory\n     /// and copied old memory to it.\n-    fn reallocate(\n-        &self,\n-        old_size: usize,\n-        new_size: usize,\n-        pointer: *const u8,\n-    ) -> Result<*const u8, ArrowError>;\n+    fn reallocate(&self, old_size: usize, new_size: usize, pointer: *const u8)\n+        -> Result<*const u8>;\n \n     /// Free memory.\n     fn free(&self, ptr: *const u8);\n@@ -47,7 +43,7 @@ pub trait MemoryPool {\n struct LibcMemoryPool;\n \n impl MemoryPool for LibcMemoryPool {\n-    fn allocate(&self, size: usize) -> Result<*mut u8, ArrowError> {\n+    fn allocate(&self, size: usize) -> Result<*mut u8> {\n         allocate_aligned(size as i64)\n     }\n \n@@ -56,7 +52,7 @@ impl MemoryPool for LibcMemoryPool {\n         old_size: usize,\n         new_size: usize,\n         pointer: *const u8,\n-    ) -> Result<*const u8, ArrowError> {\n+    ) -> Result<*const u8> {\n         unsafe {\n             let old_src = mem::transmute::<*const u8, *mut libc::c_void>(pointer);\n             let result = self.allocate(new_size)?;\n@@ -75,6 +71,7 @@ impl MemoryPool for LibcMemoryPool {\n #[cfg(test)]\n mod tests {\n     use super::*;\n+\n     const ALIGNMENT: usize = 64;\n \n     #[test]\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-20T13:30:30.338+0000",
                    "updated": "2018-08-20T13:30:30.338+0000",
                    "started": "2018-08-20T13:30:30.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "136136",
                    "issueId": "13179850"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@260ea896[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ef2c5f5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f67e5d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37d24ead[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@475025f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7d443c6f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ded4733[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@386fc505[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14245fad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@485fbe02[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3ffcace5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@79fd11f2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 20 13:30:28 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-20T13:30:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3088/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-20T02:29:25.000+0000",
        "updated": "2018-08-20T13:30:30.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Use internal `Result<T>` type instead of `Result<T, ArrowError>`",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179850/comment/16585929",
                    "id": "16585929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 2448\n[https://github.com/apache/arrow/pull/2448]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-08-20T13:30:28.889+0000",
                    "updated": "2018-08-20T13:30:28.889+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3x793:",
        "customfield_12314139": null
    }
}