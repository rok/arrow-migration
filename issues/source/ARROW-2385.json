{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13149716",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716",
    "key": "ARROW-2385",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2385/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3fe9d750[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47a4ecfe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1599a413[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@753a7942[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7eeeadc5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@470859af[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f69d461[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@393f5ea7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32b45cc0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3774be18[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@666fae4b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@25661e47[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 04 18:59:06 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-04T14:21:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2385/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-03T11:03:28.000+0000",
        "updated": "2018-04-04T18:59:06.000+0000",
        "timeoriginalestimate": null,
        "description": "Implementing JSON representation of DataType and Field as per Arrow specifications.\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement to_json() for Field and DataType",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16423858",
                    "id": "16423858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "PR: https://github.com/apache/arrow/pull/1829",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-04-03T11:11:54.963+0000",
                    "updated": "2018-04-03T11:11:54.963+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16424893",
                    "id": "16424893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on a change in pull request #1829: ARROW-2385: [Rust] implement to_json for DataType and Field\nURL: https://github.com/apache/arrow/pull/1829#discussion_r179012360\n \n \n\n ##########\n File path: rust/src/datatypes.rs\n ##########\n @@ -15,7 +15,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#[derive(Debug, Clone)]\n+use serde_json;\n+use serde_json::Value;\n+\n+#[derive(Debug, Clone, PartialEq)]\n+pub enum ArrowError {\n \n Review comment:\n   There is one of these in `errors.rs` FYI\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T02:28:29.517+0000",
                    "updated": "2018-04-04T02:28:29.517+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16425597",
                    "id": "16425597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1829: ARROW-2385: [Rust] implement to_json for DataType and Field\nURL: https://github.com/apache/arrow/pull/1829\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/Cargo.toml b/rust/Cargo.toml\nindex 9b7b3102f..c3120cfdc 100644\n--- a/rust/Cargo.toml\n+++ b/rust/Cargo.toml\n@@ -35,4 +35,5 @@ path = \"src/lib.rs\"\n \n [dependencies]\n bytes = \"0.4\"\n-libc = \"0.2\"\n\\ No newline at end of file\n+libc = \"0.2\"\n+serde_json = \"1.0.13\"\n\\ No newline at end of file\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex 960f33e16..7fd343346 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -23,7 +23,6 @@ use std::string::String;\n \n use super::bitmap::Bitmap;\n use super::buffer::Buffer;\n-use super::error::*;\n use super::list::List;\n \n pub enum ArrayData {\n@@ -91,74 +90,6 @@ impl Array {\n     }\n }\n \n-/// type-safe array operations\n-trait ArrayOps<T> {\n-    /// Get one element from an array. Note that this is an expensive call since it\n-    /// will pattern match the type of the array on every invocation. We should add\n-    /// other efficient iterator and map methods so we can perform columnar operations\n-    /// instead.\n-    fn get(&self, i: usize) -> Result<T, Error>;\n-\n-    /// Compare two same-typed arrays using a boolean closure e.g. eq, gt, lt, and so on\n-    fn compare(&self, other: &Array, f: &Fn(T, T) -> bool) -> Result<Vec<bool>, Error>;\n-\n-    /// Perform a computation on two same-typed arrays and produce a result of the same type e.g. c = a + b\n-    fn compute(&self, other: &Array, f: &Fn(T, T) -> T) -> Result<Vec<T>, Error>;\n-}\n-\n-macro_rules! array_ops {\n-    ($DT:ty, $AT:ident) => {\n-        impl ArrayOps<$DT> for Array {\n-            fn get(&self, i: usize) -> Result<$DT, Error> {\n-                match self.data() {\n-                    &ArrayData::$AT(ref buf) => Ok(unsafe { *buf.data().offset(i as isize) }),\n-                    _ => Err(Error::from(\"Request for $DT but array is not $DT\")),\n-                }\n-            }\n-            fn compare(&self, other: &Array, f: &Fn($DT, $DT) -> bool) -> Result<Vec<bool>, Error> {\n-                match (&self.data, &other.data) {\n-                    (&ArrayData::$AT(ref l), &ArrayData::$AT(ref r)) => {\n-                        let mut b: Vec<bool> = Vec::with_capacity(self.len as usize);\n-                        for i in 0..self.len as isize {\n-                            let lv: $DT = unsafe { *l.data().offset(i) };\n-                            let rv: $DT = unsafe { *r.data().offset(i) };\n-                            b.push(f(lv, rv));\n-                        }\n-                        Ok(b)\n-                    }\n-                    _ => Err(Error::from(\"Cannot compare arrays of this type\")),\n-                }\n-            }\n-            fn compute(&self, other: &Array, f: &Fn($DT, $DT) -> $DT) -> Result<Vec<$DT>, Error> {\n-                match (&self.data, &other.data) {\n-                    (&ArrayData::$AT(ref l), &ArrayData::$AT(ref r)) => {\n-                        let mut b: Vec<$DT> = Vec::with_capacity(self.len as usize);\n-                        for i in 0..self.len as isize {\n-                            let lv: $DT = unsafe { *l.data().offset(i) };\n-                            let rv: $DT = unsafe { *r.data().offset(i) };\n-                            b.push(f(lv, rv));\n-                        }\n-                        Ok(b)\n-                    }\n-                    _ => Err(Error::from(\"Cannot compare arrays of this type\")),\n-                }\n-            }\n-        }\n-    };\n-}\n-\n-array_ops!(bool, Boolean);\n-array_ops!(f64, Float64);\n-array_ops!(f32, Float32);\n-array_ops!(u8, UInt8);\n-array_ops!(u16, UInt16);\n-array_ops!(u32, UInt32);\n-array_ops!(u64, UInt64);\n-array_ops!(i8, Int8);\n-array_ops!(i16, Int16);\n-array_ops!(i32, Int32);\n-array_ops!(i64, Int64);\n-\n macro_rules! array_from_primitive {\n     ($DT:ty) => {\n         impl From<Vec<$DT>> for Array {\n@@ -307,12 +238,12 @@ mod tests {\n     fn test_from_i32() {\n         let a = Array::from(vec![15, 14, 13, 12, 11]);\n         assert_eq!(5, a.len());\n-\n-        assert_eq!(15, a.get(0).unwrap());\n-        assert_eq!(14, a.get(1).unwrap());\n-        assert_eq!(13, a.get(2).unwrap());\n-        assert_eq!(12, a.get(3).unwrap());\n-        assert_eq!(11, a.get(4).unwrap());\n+        match a.data() {\n+            &ArrayData::Int32(ref b) => {\n+                assert_eq!(vec![15, 14, 13, 12, 11], b.iter().collect::<Vec<i32>>());\n+            }\n+            _ => panic!(),\n+        }\n     }\n \n     #[test]\n@@ -330,7 +261,7 @@ mod tests {\n \n     #[test]\n     fn test_struct() {\n-        let _schema = Schema::new(vec![\n+        let _schema = DataType::Struct(vec![\n             Field::new(\"a\", DataType::Int32, false),\n             Field::new(\"b\", DataType::Float32, false),\n         ]);\n@@ -340,43 +271,4 @@ mod tests {\n         let _ = Rc::new(Array::from(vec![a, b]));\n     }\n \n-    #[test]\n-    fn test_array_eq() {\n-        let a = Array::from(vec![1, 2, 3, 4, 5]);\n-        let b = Array::from(vec![5, 4, 3, 2, 1]);\n-        let c = a.compare(&b, &|a: i32, b: i32| a == b).unwrap();\n-        assert_eq!(c, vec![false, false, true, false, false]);\n-    }\n-\n-    #[test]\n-    fn test_array_lt() {\n-        let a = Array::from(vec![1, 2, 3, 4, 5]);\n-        let b = Array::from(vec![5, 4, 3, 2, 1]);\n-        let c = a.compare(&b, &|a: i32, b: i32| a < b).unwrap();\n-        assert_eq!(c, vec![true, true, false, false, false]);\n-    }\n-\n-    #[test]\n-    fn test_array_gt() {\n-        let a = Array::from(vec![1, 2, 3, 4, 5]);\n-        let b = Array::from(vec![5, 4, 3, 2, 1]);\n-        let c = a.compare(&b, &|a: i32, b: i32| a > b).unwrap();\n-        assert_eq!(c, vec![false, false, false, true, true]);\n-    }\n-\n-    #[test]\n-    fn test_array_add() {\n-        let a = Array::from(vec![1, 2, 3, 4, 5]);\n-        let b = Array::from(vec![5, 4, 3, 2, 1]);\n-        let c = a.compute(&b, &|a: i32, b: i32| a + b).unwrap();\n-        assert_eq!(c, vec![6, 6, 6, 6, 6]);\n-    }\n-\n-    #[test]\n-    fn test_array_multiply() {\n-        let a = Array::from(vec![1, 2, 3, 4, 5]);\n-        let b = Array::from(vec![5, 4, 3, 2, 1]);\n-        let c = a.compute(&b, &|a: i32, b: i32| a * b).unwrap();\n-        assert_eq!(c, vec![5, 8, 9, 8, 5]);\n-    }\n }\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex 72b2a27d8..45b728c39 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -145,4 +145,59 @@ mod tests {\n         let v: Vec<i32> = it.map(|n| n + 1).collect();\n         assert_eq!(vec![2, 3, 4, 5, 6], v);\n     }\n+\n+    #[test]\n+    fn test_buffer_eq() {\n+        let a = Buffer::from(vec![1, 2, 3, 4, 5]);\n+        let b = Buffer::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.iter()\n+            .zip(b.iter())\n+            .map(|(a, b)| a == b)\n+            .collect::<Vec<bool>>();\n+        assert_eq!(c, vec![false, false, true, false, false]);\n+    }\n+\n+    #[test]\n+    fn test_buffer_lt() {\n+        let a = Buffer::from(vec![1, 2, 3, 4, 5]);\n+        let b = Buffer::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.iter()\n+            .zip(b.iter())\n+            .map(|(a, b)| a < b)\n+            .collect::<Vec<bool>>();\n+        assert_eq!(c, vec![true, true, false, false, false]);\n+    }\n+\n+    #[test]\n+    fn test_buffer_gt() {\n+        let a = Buffer::from(vec![1, 2, 3, 4, 5]);\n+        let b = Buffer::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.iter()\n+            .zip(b.iter())\n+            .map(|(a, b)| a > b)\n+            .collect::<Vec<bool>>();\n+        assert_eq!(c, vec![false, false, false, true, true]);\n+    }\n+\n+    #[test]\n+    fn test_buffer_add() {\n+        let a = Buffer::from(vec![1, 2, 3, 4, 5]);\n+        let b = Buffer::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.iter()\n+            .zip(b.iter())\n+            .map(|(a, b)| a + b)\n+            .collect::<Vec<i32>>();\n+        assert_eq!(c, vec![6, 6, 6, 6, 6]);\n+    }\n+\n+    #[test]\n+    fn test_buffer_multiply() {\n+        let a = Buffer::from(vec![1, 2, 3, 4, 5]);\n+        let b = Buffer::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.iter()\n+            .zip(b.iter())\n+            .map(|(a, b)| a * b)\n+            .collect::<Vec<i32>>();\n+        assert_eq!(c, vec![5, 8, 9, 8, 5]);\n+    }\n }\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nindex a812f3222..4f022ba45 100644\n--- a/rust/src/datatypes.rs\n+++ b/rust/src/datatypes.rs\n@@ -15,7 +15,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#[derive(Debug, Clone)]\n+use serde_json;\n+use serde_json::Value;\n+\n+#[derive(Debug, Clone, PartialEq)]\n+pub enum ArrowError {\n+    ParseError(String),\n+}\n+\n+#[derive(Debug, Clone, PartialEq)]\n pub enum DataType {\n     Boolean,\n     Int8,\n@@ -26,13 +34,105 @@ pub enum DataType {\n     UInt16,\n     UInt32,\n     UInt64,\n+    Float16,\n     Float32,\n     Float64,\n     Utf8,\n     Struct(Vec<Field>),\n }\n \n-#[derive(Debug, Clone)]\n+impl DataType {\n+    fn from(json: &Value) -> Result<DataType, ArrowError> {\n+        //println!(\"DataType::from({:?})\", json);\n+        match json {\n+            &Value::Object(ref map) => match map.get(\"name\") {\n+                Some(s) if s == \"bool\" => Ok(DataType::Boolean),\n+                Some(s) if s == \"utf8\" => Ok(DataType::Utf8),\n+                Some(s) if s == \"floatingpoint\" => match map.get(\"precision\") {\n+                    Some(p) if p == \"HALF\" => Ok(DataType::Float16),\n+                    Some(p) if p == \"SINGLE\" => Ok(DataType::Float32),\n+                    Some(p) if p == \"DOUBLE\" => Ok(DataType::Float64),\n+                    _ => Err(ArrowError::ParseError(format!(\n+                        \"floatingpoint precision missing or invalid\"\n+                    ))),\n+                },\n+                Some(s) if s == \"int\" => match map.get(\"isSigned\") {\n+                    Some(&Value::Bool(true)) => match map.get(\"bitWidth\") {\n+                        Some(&Value::Number(ref n)) => match n.as_u64() {\n+                            Some(8) => Ok(DataType::Int8),\n+                            Some(16) => Ok(DataType::Int16),\n+                            Some(32) => Ok(DataType::Int32),\n+                            Some(64) => Ok(DataType::Int32),\n+                            _ => Err(ArrowError::ParseError(format!(\n+                                \"int bitWidth missing or invalid\"\n+                            ))),\n+                        },\n+                        _ => Err(ArrowError::ParseError(format!(\n+                            \"int bitWidth missing or invalid\"\n+                        ))),\n+                    },\n+                    Some(&Value::Bool(false)) => match map.get(\"bitWidth\") {\n+                        Some(&Value::Number(ref n)) => match n.as_u64() {\n+                            Some(8) => Ok(DataType::UInt8),\n+                            Some(16) => Ok(DataType::UInt16),\n+                            Some(32) => Ok(DataType::UInt32),\n+                            Some(64) => Ok(DataType::UInt64),\n+                            _ => Err(ArrowError::ParseError(format!(\n+                                \"int bitWidth missing or invalid\"\n+                            ))),\n+                        },\n+                        _ => Err(ArrowError::ParseError(format!(\n+                            \"int bitWidth missing or invalid\"\n+                        ))),\n+                    },\n+                    _ => Err(ArrowError::ParseError(format!(\n+                        \"int signed missing or invalid\"\n+                    ))),\n+                },\n+                Some(other) => Err(ArrowError::ParseError(format!(\n+                    \"invalid type name: {}\",\n+                    other\n+                ))),\n+                None => match map.get(\"fields\") {\n+                    Some(&Value::Array(ref fields_array)) => {\n+                        let fields = fields_array\n+                            .iter()\n+                            .map(|f| Field::from(f))\n+                            .collect::<Result<Vec<Field>, ArrowError>>();\n+                        Ok(DataType::Struct(fields?))\n+                    }\n+                    _ => Err(ArrowError::ParseError(format!(\"empty type\"))),\n+                },\n+            },\n+            _ => Err(ArrowError::ParseError(format!(\"invalid json value type\"))),\n+        }\n+    }\n+\n+    pub fn to_json(&self) -> Value {\n+        match self {\n+            &DataType::Boolean => json!({\"name\": \"bool\"}),\n+            &DataType::Int8 => json!({\"name\": \"int\", \"bitWidth\": 8, \"isSigned\": true}),\n+            &DataType::Int16 => json!({\"name\": \"int\", \"bitWidth\": 16, \"isSigned\": true}),\n+            &DataType::Int32 => json!({\"name\": \"int\", \"bitWidth\": 32, \"isSigned\": true}),\n+            &DataType::Int64 => json!({\"name\": \"int\", \"bitWidth\": 64, \"isSigned\": true}),\n+            &DataType::UInt8 => json!({\"name\": \"int\", \"bitWidth\": 8, \"isSigned\": false}),\n+            &DataType::UInt16 => json!({\"name\": \"int\", \"bitWidth\": 16, \"isSigned\": false}),\n+            &DataType::UInt32 => json!({\"name\": \"int\", \"bitWidth\": 32, \"isSigned\": false}),\n+            &DataType::UInt64 => json!({\"name\": \"int\", \"bitWidth\": 64, \"isSigned\": false}),\n+            &DataType::Float16 => json!({\"name\": \"floatingpoint\", \"precision\": \"HALF\"}),\n+            &DataType::Float32 => json!({\"name\": \"floatingpoint\", \"precision\": \"SINGLE\"}),\n+            &DataType::Float64 => json!({\"name\": \"floatingpoint\", \"precision\": \"DOUBLE\"}),\n+            &DataType::Utf8 => json!({\"name\": \"utf8\"}),\n+            &DataType::Struct(ref fields) => {\n+                let field_json_array =\n+                    Value::Array(fields.iter().map(|f| f.to_json()).collect::<Vec<Value>>());\n+                json!({ \"fields\": field_json_array })\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq)]\n pub struct Field {\n     pub name: String,\n     pub data_type: DataType,\n@@ -48,6 +148,54 @@ impl Field {\n         }\n     }\n \n+    pub fn from(json: &Value) -> Result<Self, ArrowError> {\n+        //println!(\"Field::from({:?}\", json);\n+        match json {\n+            &Value::Object(ref map) => {\n+                let name = match map.get(\"name\") {\n+                    Some(&Value::String(ref name)) => name.to_string(),\n+                    _ => {\n+                        return Err(ArrowError::ParseError(format!(\n+                            \"Field missing 'name' attribute\"\n+                        )))\n+                    }\n+                };\n+                let nullable = match map.get(\"nullable\") {\n+                    Some(&Value::Bool(b)) => b,\n+                    _ => {\n+                        return Err(ArrowError::ParseError(format!(\n+                            \"Field missing 'nullable' attribute\"\n+                        )))\n+                    }\n+                };\n+                let data_type = match map.get(\"type\") {\n+                    Some(t) => DataType::from(t)?,\n+                    _ => {\n+                        return Err(ArrowError::ParseError(format!(\n+                            \"Field missing 'type' attribute\"\n+                        )))\n+                    }\n+                };\n+                Ok(Field {\n+                    name,\n+                    nullable,\n+                    data_type,\n+                })\n+            }\n+            _ => Err(ArrowError::ParseError(format!(\n+                \"Invalid json value type for field\"\n+            ))),\n+        }\n+    }\n+\n+    pub fn to_json(&self) -> Value {\n+        json!({\n+            \"name\": self.name,\n+            \"nullable\": self.nullable,\n+            \"type\": self.data_type.to_json(),\n+        })\n+    }\n+\n     pub fn to_string(&self) -> String {\n         format!(\"{}: {:?}\", self.name, self.data_type)\n     }\n@@ -87,8 +235,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_define_schema() {\n-        let _person = Schema::new(vec![\n+    fn create_struct_type() {\n+        let _person = DataType::Struct(vec![\n             Field::new(\"first_name\", DataType::Utf8, false),\n             Field::new(\"last_name\", DataType::Utf8, false),\n             Field::new(\n@@ -101,4 +249,66 @@ mod tests {\n             ),\n         ]);\n     }\n+\n+    #[test]\n+    fn struct_field_to_json() {\n+        let f = Field::new(\n+            \"address\",\n+            DataType::Struct(vec![\n+                Field::new(\"street\", DataType::Utf8, false),\n+                Field::new(\"zip\", DataType::UInt16, false),\n+            ]),\n+            false,\n+        );\n+        assert_eq!(\n+            \"{\\\"name\\\":\\\"address\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"fields\\\":[\\\n+            {\\\"name\\\":\\\"street\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"name\\\":\\\"utf8\\\"}},\\\n+            {\\\"name\\\":\\\"zip\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"bitWidth\\\":16,\\\"isSigned\\\":false,\\\"name\\\":\\\"int\\\"}}]}}\",\n+            f.to_json().to_string()\n+        );\n+    }\n+\n+    #[test]\n+    fn primitive_field_to_json() {\n+        let f = Field::new(\"first_name\", DataType::Utf8, false);\n+        assert_eq!(\n+            \"{\\\"name\\\":\\\"first_name\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"name\\\":\\\"utf8\\\"}}\",\n+            f.to_json().to_string()\n+        );\n+    }\n+    #[test]\n+    fn parse_struct_from_json() {\n+        let json = \"{\\\"name\\\":\\\"address\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"fields\\\":[\\\n+        {\\\"name\\\":\\\"street\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"name\\\":\\\"utf8\\\"}},\\\n+        {\\\"name\\\":\\\"zip\\\",\\\"nullable\\\":false,\\\"type\\\":{\\\"bitWidth\\\":16,\\\"isSigned\\\":false,\\\"name\\\":\\\"int\\\"}}]}}\";\n+        let value: Value = serde_json::from_str(json).unwrap();\n+        let dt = Field::from(&value).unwrap();\n+\n+        let expected = Field::new(\n+            \"address\",\n+            DataType::Struct(vec![\n+                Field::new(\"street\", DataType::Utf8, false),\n+                Field::new(\"zip\", DataType::UInt16, false),\n+            ]),\n+            false,\n+        );\n+\n+        assert_eq!(expected, dt);\n+    }\n+\n+    #[test]\n+    fn parse_utf8_from_json() {\n+        let json = \"{\\\"name\\\":\\\"utf8\\\"}\";\n+        let value: Value = serde_json::from_str(json).unwrap();\n+        let dt = DataType::from(&value).unwrap();\n+        assert_eq!(DataType::Utf8, dt);\n+    }\n+\n+    #[test]\n+    fn parse_int32_from_json() {\n+        let json = \"{\\\"name\\\": \\\"int\\\", \\\"isSigned\\\": true, \\\"bitWidth\\\": 32}\";\n+        let value: Value = serde_json::from_str(json).unwrap();\n+        let dt = DataType::from(&value).unwrap();\n+        assert_eq!(DataType::Int32, dt);\n+    }\n }\ndiff --git a/rust/src/lib.rs b/rust/src/lib.rs\nindex 8eeb34023..bfcd83dc5 100644\n--- a/rust/src/lib.rs\n+++ b/rust/src/lib.rs\n@@ -18,6 +18,9 @@\n extern crate bytes;\n extern crate libc;\n \n+#[macro_use]\n+extern crate serde_json;\n+\n pub mod array;\n pub mod bitmap;\n pub mod buffer;\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T14:20:48.713+0000",
                    "updated": "2018-04-04T14:20:48.713+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16425598",
                    "id": "16425598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1829\n[https://github.com/apache/arrow/pull/1829]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-04T14:21:03.468+0000",
                    "updated": "2018-04-04T14:21:03.468+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16425975",
                    "id": "16425975",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on a change in pull request #1829: ARROW-2385: [Rust] implement to_json for DataType and Field\nURL: https://github.com/apache/arrow/pull/1829#discussion_r179240084\n \n \n\n ##########\n File path: rust/src/datatypes.rs\n ##########\n @@ -87,8 +235,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_define_schema() {\n-        let _person = Schema::new(vec![\n+    fn create_struct_type() {\n+        let _person = DataType::Struct(vec![\n \n Review comment:\n   @andygrove are we still using Schema? The tests now all reference Vecs of fields in a single DataType. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T18:29:58.287+0000",
                    "updated": "2018-04-04T18:29:58.287+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16425987",
                    "id": "16425987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on a change in pull request #1829: ARROW-2385: [Rust] implement to_json for DataType and Field\nURL: https://github.com/apache/arrow/pull/1829#discussion_r179241398\n \n \n\n ##########\n File path: rust/src/datatypes.rs\n ##########\n @@ -87,8 +235,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_define_schema() {\n-        let _person = Schema::new(vec![\n+    fn create_struct_type() {\n+        let _person = DataType::Struct(vec![\n \n Review comment:\n   I think Schema is becoming redundant. I'm still  using it in my project to define a `RecordBatch` but I could switch to using a `Vec<Field>` instead. Do you want to file a JIRA for removing Schema?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T18:34:10.111+0000",
                    "updated": "2018-04-04T18:34:10.111+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149716/comment/16426014",
                    "id": "16426014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on a change in pull request #1829: ARROW-2385: [Rust] implement to_json for DataType and Field\nURL: https://github.com/apache/arrow/pull/1829#discussion_r179248743\n \n \n\n ##########\n File path: rust/src/datatypes.rs\n ##########\n @@ -87,8 +235,8 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn test_define_schema() {\n-        let _person = Schema::new(vec![\n+    fn create_struct_type() {\n+        let _person = DataType::Struct(vec![\n \n Review comment:\n   OK, though to what extent should we mirror https://arrow.apache.org/docs/metadata.html? \r\n   \r\n   That would make a `Schema` of `Field`s.\r\n   `Struct(Vec<Field>)` would go from a variant of `DataType` to defined as `children` on a `Field`, whose type was only `Struct`?\r\n   \r\n   (tbc these are low confidence and I'm only recently learning, so shoot me down if I'm off)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T18:59:06.509+0000",
                    "updated": "2018-04-04T18:59:06.509+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|i3s34v:",
        "customfield_12314139": null
    }
}