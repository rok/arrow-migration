{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13361948",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948",
    "key": "ARROW-11841",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12643757",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12643757",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13470743",
                    "key": "ARROW-17020",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13470743",
                    "fields": {
                        "summary": "[Python][R] GcsFilesystem can appear to hang for non permanent errors",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12609824",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12609824",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13303426",
                    "key": "ARROW-8732",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13303426",
                    "fields": {
                        "summary": "[C++] Let Futures support cancellation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
                            "id": "5",
                            "description": "General wishlist item.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Wish",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 52200,
            "total": 52200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 52200,
            "total": 52200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11841/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 87,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1187639304\n\n   https://issues.apache.org/jira/browse/ARROW-11841\n\n\n",
                    "created": "2022-07-18T15:25:13.337+0000",
                    "updated": "2022-07-18T15:25:13.337+0000",
                    "started": "2022-07-18T15:25:13.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792202",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1187639355\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-07-18T15:25:16.368+0000",
                    "updated": "2022-07-18T15:25:16.368+0000",
                    "started": "2022-07-18T15:25:16.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792203",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1187641603\n\n   I don't think this works yet, or at least it doesn't reduce the amount of time it takes to read a big CSV. I'm using this as my reprex to test. I don't understand a lot about the content of this PR so feel free to change everything about it!\r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   #> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n   \r\n   tf <- tempfile()\r\n   readr::write_csv(vctrs::vec_rep(mtcars, 5e5), tf)\r\n   \r\n   # try to slow down CSV reading\r\n   set_cpu_count(1)\r\n   set_io_thread_count(2)\r\n   \r\n   # hit Control-C while this line runs!\r\n   system.time(read_csv_arrow(tf))\r\n   #>    user  system elapsed \r\n   #>   2.785   0.337   3.220\r\n   ```\r\n   \r\n   <sup>Created on 2022-07-18 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\r\n   \r\n   I think the overriding calling handler is being called, or at least I can do stuff there that causes R to crash (but breakpoints and printing don't seem to work here, maybe because of the interrupt?).\n\n\n",
                    "created": "2022-07-18T15:27:11.956+0000",
                    "updated": "2022-07-18T15:27:11.956+0000",
                    "started": "2022-07-18T15:27:11.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792206",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1188226112\n\n   @pitrou Could you take a look at the signal handling code to see there's anything you can see that's incorrect? It doesn't work but I'm not sure if it's because I'm calling the Arrow API incorrectly or because I'm not registering the signal handler correctly.\r\n   \r\n   It looks like the stop source cancellation already works on Windows? https://github.com/apache/arrow/runs/7396189436?check_suite_focus=true#step:11:49243 . Does that ring any bells?\n\n\n",
                    "created": "2022-07-18T19:42:28.859+0000",
                    "updated": "2022-07-18T19:42:28.859+0000",
                    "started": "2022-07-18T19:42:28.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792323",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r924662599\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -29,6 +37,58 @@ MainRThread& GetMainRThread() {\n // [[arrow::export]]\n void InitializeMainRThread() { GetMainRThread().Initialize(); }\n \n+bool CanRunWithCapturedR() {\n+#if defined(HAS_UNWIND_PROTECT)\n+  static int on_old_windows = -1;\n+  if (on_old_windows == -1) {\n+    cpp11::function on_old_windows_fun = cpp11::package(\"arrow\")[\"on_old_windows\"];\n+    on_old_windows = on_old_windows_fun();\n+  }\n+\n+  return !on_old_windows;\n+#else\n+  return false;\n+#endif\n+}\n+\n+void SignalInterruptCondition() {\n+#ifdef _WIN32\n+  UserBreak = 1;\n+  R_CheckUserInterrupt();\n+#else\n+  Rf_onintr();\n+#endif\n+}\n+\n+void OverridingSignalHandler(int sig) {\n+  auto main_r_thread = GetMainRThread();\n\nReview Comment:\n   Is all this code really safe to execute from a signal handler (i.e. are all the APIs here reentrant)?\r\n   \n\n\n\n",
                    "created": "2022-07-19T15:35:44.787+0000",
                    "updated": "2022-07-19T15:35:44.787+0000",
                    "started": "2022-07-19T15:35:44.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792765",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r924663553\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -29,6 +37,58 @@ MainRThread& GetMainRThread() {\n // [[arrow::export]]\n void InitializeMainRThread() { GetMainRThread().Initialize(); }\n \n+bool CanRunWithCapturedR() {\n+#if defined(HAS_UNWIND_PROTECT)\n+  static int on_old_windows = -1;\n+  if (on_old_windows == -1) {\n+    cpp11::function on_old_windows_fun = cpp11::package(\"arrow\")[\"on_old_windows\"];\n+    on_old_windows = on_old_windows_fun();\n+  }\n+\n+  return !on_old_windows;\n+#else\n+  return false;\n+#endif\n+}\n+\n+void SignalInterruptCondition() {\n+#ifdef _WIN32\n+  UserBreak = 1;\n+  R_CheckUserInterrupt();\n+#else\n+  Rf_onintr();\n+#endif\n+}\n+\n+void OverridingSignalHandler(int sig) {\n+  auto main_r_thread = GetMainRThread();\n+\n+  if (!main_r_thread.IsExecutingSafeCallIntoR() && !main_r_thread.HasError() &&\n+      sig == SIGINT) {\n+    main_r_thread.RequestStopFromSignal(sig);\n+    main_r_thread.SetError(arrow::Status::Cancelled(\"User interrupt\"));\n+  } else {\n+    main_r_thread.CallPreviousSignalHandler(sig);\n+  }\n+}\n+\n+void MainRThread::SetOverrideInterruptSignal(bool enabled) {\n+  bool was_enabled = IsOverridingInterruptSignal();\n+  if (enabled && !was_enabled) {\n+    // enable override\n+    previous_signal_handler_ = signal(SIGINT, &OverridingSignalHandler);\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n+    arrow::StopIfNotOk(arrow::RegisterCancellingSignalHandler({SIGINT}));\n\nReview Comment:\n   This will register its own signal handlers, so the `signal` call above is pointless.\n\n\n\n",
                    "created": "2022-07-19T15:36:40.820+0000",
                    "updated": "2022-07-19T15:36:40.820+0000",
                    "started": "2022-07-19T15:36:40.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792768",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/792770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r924665052\n\n\n##########\nr/src/safe-call-into-r-impl.cpp:\n##########\n@@ -29,6 +37,58 @@ MainRThread& GetMainRThread() {\n // [[arrow::export]]\n void InitializeMainRThread() { GetMainRThread().Initialize(); }\n \n+bool CanRunWithCapturedR() {\n+#if defined(HAS_UNWIND_PROTECT)\n+  static int on_old_windows = -1;\n+  if (on_old_windows == -1) {\n+    cpp11::function on_old_windows_fun = cpp11::package(\"arrow\")[\"on_old_windows\"];\n+    on_old_windows = on_old_windows_fun();\n+  }\n+\n+  return !on_old_windows;\n+#else\n+  return false;\n+#endif\n+}\n+\n+void SignalInterruptCondition() {\n+#ifdef _WIN32\n+  UserBreak = 1;\n+  R_CheckUserInterrupt();\n+#else\n+  Rf_onintr();\n+#endif\n+}\n+\n+void OverridingSignalHandler(int sig) {\n+  auto main_r_thread = GetMainRThread();\n+\n+  if (!main_r_thread.IsExecutingSafeCallIntoR() && !main_r_thread.HasError() &&\n+      sig == SIGINT) {\n+    main_r_thread.RequestStopFromSignal(sig);\n+    main_r_thread.SetError(arrow::Status::Cancelled(\"User interrupt\"));\n+  } else {\n+    main_r_thread.CallPreviousSignalHandler(sig);\n+  }\n+}\n+\n+void MainRThread::SetOverrideInterruptSignal(bool enabled) {\n+  bool was_enabled = IsOverridingInterruptSignal();\n+  if (enabled && !was_enabled) {\n+    // enable override\n+    previous_signal_handler_ = signal(SIGINT, &OverridingSignalHandler);\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n+    arrow::StopIfNotOk(arrow::RegisterCancellingSignalHandler({SIGINT}));\n\nReview Comment:\n   It seems the logic from `OverridingSignalHandler` should actually be moved here and decide whether to call `RegisterCancellingSignalHandler` or not.\n\n\n\n",
                    "created": "2022-07-19T15:38:04.969+0000",
                    "updated": "2022-07-19T15:38:04.969+0000",
                    "started": "2022-07-19T15:38:04.969+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792770",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1190672157\n\n   I'm a little concerned about the prospect of messing with signal handlers in RunWithCapturedR, right before a release, since this runs during pretty much all of the most used functions in Arrow (read/write CSV, feather, and query engine after the user-defined functions PR merges).\r\n   \r\n   Is there any chance I can convince you to allow registering a (thread-safe) callback? I would love to be able to `RegisterThreadSafeUserInterruptChecker([]() { SafeCallIntoR([]() { /* return true or false */}); })` (but I understand if this is impossible or a bad idea based on how this is implemented in Arrow C++.\n\n\n",
                    "created": "2022-07-20T19:31:10.621+0000",
                    "updated": "2022-07-20T19:31:10.621+0000",
                    "started": "2022-07-20T19:31:10.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793407",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1190697603\n\n   This is actually a TODO: https://issues.apache.org/jira/browse/ARROW-12938\r\n   \r\n   What is `RegisterThreadSafeUserInterruptChecker`?\n\n\n",
                    "created": "2022-07-20T19:58:38.174+0000",
                    "updated": "2022-07-20T19:58:38.174+0000",
                    "started": "2022-07-20T19:58:38.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793410",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1190698991\n\n   Also, regardless, _some_ signal handler must be used to detect user interruption. Otherwise, how do you plan to do it?\n\n\n",
                    "created": "2022-07-20T20:00:07.353+0000",
                    "updated": "2022-07-20T20:00:07.353+0000",
                    "started": "2022-07-20T20:00:07.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793412",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1190719765\n\n   `RegisterThreadSafeUserInterruptChecker()` is my made up name for however one registers the callback that is forwarded from whatever is checking the stop token. It sounds like this is sightly different than the JIRA, which is forwarding stop requests (I was hoping to forward the call from whatever *checking* for stop requests).\r\n   \r\n   As I understand it, R already has what is basically a global stop token implemented via a signal handler; however, there is no thread-safe way to query it. Because we have `SafeCallIntoR()`, we *can* query it from any thread (but I don't think there's an API to insert that callable into Arrow).\r\n   \r\n   I'm sure temporarily overriding R's signal handler is fine too, I just don't have confidence in my ability to do that safely before the release.\n\n\n",
                    "created": "2022-07-20T20:22:50.365+0000",
                    "updated": "2022-07-20T20:22:50.365+0000",
                    "started": "2022-07-20T20:22:50.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793423",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1190720654\n\n   Ah, well, we can defer after 9.0.0 then :-)\n\n\n",
                    "created": "2022-07-20T20:23:46.343+0000",
                    "updated": "2022-07-20T20:23:46.343+0000",
                    "started": "2022-07-20T20:23:46.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793424",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1191159842\n\n   The new code looks much more reasonable. Does it work? :-)\n\n\n",
                    "created": "2022-07-21T07:49:13.635+0000",
                    "updated": "2022-07-21T07:49:13.635+0000",
                    "started": "2022-07-21T07:49:13.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793574",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1191420336\n\n   I appreciate your patience with anything I said earlier...the degree to which I misunderstood this API is difficult to describe (in particular, I didn't get that a new `StopToken` had to get passed to each cancellable operation). I'm happy to say it works! I *would* prefer to be able to subclass a `StopToken` and provide an R-specific implementation, but that's a separate discussion.\r\n   \r\n   I had to use the `StopSource::Reset()` method that is marked internal (or else cancelling one thing results in many subsequent operations marked as cancelled). I initially worked around that by using R's equivalent of a context manager to set and reset the stop source pointer, but that's difficult to program around for us because what does and does not go within `with_stop_source(some_code)` we can't always control.\r\n   \r\n   I asked in the r-lib channel about the safety of overriding signal handlers and they seemed to indicate that doing it temporarily is OK as long as the R API isn't called. Hence, I only enable the signal handlers when we're about to launch a worker thread to do \"arrow stuff\" and disable the signal handlers when `SafeCallIntoR()` is invoked. This is the part that I'm worried will break.\n\n\n",
                    "created": "2022-07-21T12:24:53.982+0000",
                    "updated": "2022-07-21T12:24:53.982+0000",
                    "started": "2022-07-21T12:24:53.982+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793711",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#issuecomment-1191472858\n\n   > I had to use the `StopSource::Reset()` method that is marked internal (or else cancelling one thing results in many subsequent operations marked as cancelled).\r\n   \r\n   Hmm, I'm curious, what do you mean with \"subsequent operations\"? Are they part of the same overall cancellable call?\n\n\n",
                    "created": "2022-07-21T13:16:17.007+0000",
                    "updated": "2022-07-21T13:16:17.007+0000",
                    "started": "2022-07-21T13:16:17.007+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793729",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r926664323\n\n\n##########\nr/_pkgdown.yml:\n##########\n@@ -139,6 +139,7 @@ reference:\n       - write_to_raw\n       - write_parquet\n       - write_csv_arrow\n+      - arrow_cancellable\n\nReview Comment:\n   Should this change be reverted?\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n\nReview Comment:\n   For the record, if this is really meant to be a singleton, perhaps you want to make the constructor private to avoid potential misuse?\r\n   \r\n   A typical idiom is to expose a static method to get the singleton, e.g.:\r\n   ```c++\r\n   class MainRThread {\r\n    public:\r\n     static MainRThread* GetInstance();\r\n   \r\n    private:\r\n     MainRThread() : ...\r\n   ```\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n   }\n \n   bool IsInitialized() { return initialized_; }\n \n   // Check if the current thread is the main R thread\n   bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n \n+  arrow::StopToken GetStopToken() {\n+    if (SignalStopSourceEnabled()) {\n+      return stop_source_->token();\n+    } else {\n+      return arrow::StopToken::Unstoppable();\n+    }\n+  }\n+\n+  bool SignalStopSourceEnabled() { return stop_source_ != nullptr; }\n+\n+  // Check if a SafeCallIntoR call is able to execute\n+  bool CanExecuteSafeCallIntoR() { return IsMainThread() || executor_ != nullptr; }\n+\n   // The Executor that is running on the main R thread, if it exists\n   arrow::internal::Executor*& Executor() { return executor_; }\n \n-  // Save an error token generated from a cpp11::unwind_exception\n-  // so that it can be properly handled after some cleanup code\n-  // has run (e.g., cancelling some futures or waiting for them\n-  // to finish).\n-  void SetError(cpp11::sexp token) { error_token_ = token; }\n+  // Save an error (possibly with an error token generated from\n+  // a cpp11::unwind_exception) so that it can be properly handled\n+  // after some cleanup code  has run (e.g., cancelling some futures\n+  // or waiting for them to finish).\n+  void SetError(arrow::Status status) { status_ = status; }\n \n-  void ResetError() { error_token_ = R_NilValue; }\n+  void ResetError() { status_ = arrow::Status::OK(); }\n \n   // Check if there is a saved error\n-  bool HasError() { return error_token_ != R_NilValue; }\n+  bool HasError() { return !status_.ok(); }\n \n-  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  // Throw an exception if there was an error executing on the main\n+  // thread.\n   void ClearError() {\n-    if (HasError()) {\n-      cpp11::unwind_exception e(error_token_);\n-      ResetError();\n-      throw e;\n+    if (SignalStopSourceEnabled()) {\n+      stop_source_->Reset();\n\nReview Comment:\n   This shouldn't be needed. Instead, `ResetSignalStopSource` will trigger creation of a new stop source the next time `SetSignalStopSource` is called.\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n   }\n \n   bool IsInitialized() { return initialized_; }\n \n   // Check if the current thread is the main R thread\n   bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n \n+  arrow::StopToken GetStopToken() {\n+    if (SignalStopSourceEnabled()) {\n+      return stop_source_->token();\n+    } else {\n+      return arrow::StopToken::Unstoppable();\n+    }\n+  }\n+\n+  bool SignalStopSourceEnabled() { return stop_source_ != nullptr; }\n+\n+  // Check if a SafeCallIntoR call is able to execute\n+  bool CanExecuteSafeCallIntoR() { return IsMainThread() || executor_ != nullptr; }\n+\n   // The Executor that is running on the main R thread, if it exists\n   arrow::internal::Executor*& Executor() { return executor_; }\n \n-  // Save an error token generated from a cpp11::unwind_exception\n-  // so that it can be properly handled after some cleanup code\n-  // has run (e.g., cancelling some futures or waiting for them\n-  // to finish).\n-  void SetError(cpp11::sexp token) { error_token_ = token; }\n+  // Save an error (possibly with an error token generated from\n+  // a cpp11::unwind_exception) so that it can be properly handled\n+  // after some cleanup code  has run (e.g., cancelling some futures\n+  // or waiting for them to finish).\n+  void SetError(arrow::Status status) { status_ = status; }\n \n-  void ResetError() { error_token_ = R_NilValue; }\n+  void ResetError() { status_ = arrow::Status::OK(); }\n \n   // Check if there is a saved error\n-  bool HasError() { return error_token_ != R_NilValue; }\n+  bool HasError() { return !status_.ok(); }\n \n-  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  // Throw an exception if there was an error executing on the main\n+  // thread.\n   void ClearError() {\n\nReview Comment:\n   Nit, but `ClearError` can be a bit misleading, perhaps name this `ReraiseError` or something?\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n\nReview Comment:\n   Hmm, this doesn't seem right (though perhaps it works by chance). As the C++ docstring says:\r\n   ```\r\n   /// The only allowed order of calls is the following:\r\n   /// - SetSignalStopSource()\r\n   /// - any number of pairs of (RegisterCancellingSignalHandler,\r\n   ///   UnregisterCancellingSignalHandler) calls\r\n   /// - ResetSignalStopSource()\r\n   ```\n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -158,7 +243,39 @@ arrow::Result<T> RunWithCapturedR(std::function<arrow::Future<T>()> make_arrow_c\n   GetMainRThread().ClearError();\n \n   return result;\n-#endif\n+}\n+\n+// Performs an Arrow call (e.g., run an exec plan) in such a way that background threads\n+// can use SafeCallIntoR(). This version is useful for Arrow calls that do not already\n+// return a Future<>(). If it is not possible to use RunWithCapturedR() (i.e.,\n+// CanRunWithCapturedR() returns false), this will run make_arrow_call on the main\n+// R thread (which will cause background threads that try to SafeCallIntoR() to\n+// error).\n+template <typename T>\n+arrow::Result<T> RunWithCapturedRIfPossible(\n+    std::function<arrow::Result<T>()> make_arrow_call) {\n+  if (CanRunWithCapturedR()) {\n+    // Note that the use of the io_context here is arbitrary (i.e. we could use\n+    // any construct that launches a background thread).\n+    const auto& io_context = arrow::io::default_io_context();\n+    return RunWithCapturedR<T>([&]() {\n+      return DeferNotOk(io_context.executor()->Submit(std::move(make_arrow_call)));\n+    });\n+  } else {\n+    return make_arrow_call();\n+  }\n+}\n+\n+// Like RunWithCapturedRIfPossible<>() but for arrow calls that don't return\n+// a Result.\n+static inline arrow::Status RunWithCapturedRIfPossibleVoid(\n+    std::function<arrow::Status()> make_arrow_call) {\n+  auto result = RunWithCapturedRIfPossible<bool>([&]() -> arrow::Result<bool> {\n+    ARROW_RETURN_NOT_OK(make_arrow_call());\n+    return true;\n+  });\n+  ARROW_RETURN_NOT_OK(result);\n+  return arrow::Status::OK();\n\nReview Comment:\n   You may prefer this explicit form or you might like a terser variant:\r\n   ```suggestion\r\n     return result.status();\r\n   ```\n\n\n\n##########\nr/src/filesystem.cpp:\n##########\n@@ -239,7 +240,8 @@ std::string fs___FileSystem__type_name(\n // [[arrow::export]]\n std::shared_ptr<fs::LocalFileSystem> fs___LocalFileSystem__create() {\n   // Affects OpenInputFile/OpenInputStream\n-  auto io_context = arrow::io::IOContext(gc_memory_pool());\n+  auto io_context =\n+      arrow::io::IOContext(gc_memory_pool(), GetMainRThread().GetStopToken());\n\nReview Comment:\n   Perhaps you want to factor out this R-specific IOContext creation, since it happens in many places?\n\n\n\n",
                    "created": "2022-07-21T13:28:01.815+0000",
                    "updated": "2022-07-21T13:28:01.815+0000",
                    "started": "2022-07-21T13:28:01.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793732",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r926692494\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n   }\n \n   bool IsInitialized() { return initialized_; }\n \n   // Check if the current thread is the main R thread\n   bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n \n+  arrow::StopToken GetStopToken() {\n+    if (SignalStopSourceEnabled()) {\n+      return stop_source_->token();\n+    } else {\n+      return arrow::StopToken::Unstoppable();\n+    }\n+  }\n+\n+  bool SignalStopSourceEnabled() { return stop_source_ != nullptr; }\n+\n+  // Check if a SafeCallIntoR call is able to execute\n+  bool CanExecuteSafeCallIntoR() { return IsMainThread() || executor_ != nullptr; }\n+\n   // The Executor that is running on the main R thread, if it exists\n   arrow::internal::Executor*& Executor() { return executor_; }\n \n-  // Save an error token generated from a cpp11::unwind_exception\n-  // so that it can be properly handled after some cleanup code\n-  // has run (e.g., cancelling some futures or waiting for them\n-  // to finish).\n-  void SetError(cpp11::sexp token) { error_token_ = token; }\n+  // Save an error (possibly with an error token generated from\n+  // a cpp11::unwind_exception) so that it can be properly handled\n+  // after some cleanup code  has run (e.g., cancelling some futures\n+  // or waiting for them to finish).\n+  void SetError(arrow::Status status) { status_ = status; }\n \n-  void ResetError() { error_token_ = R_NilValue; }\n+  void ResetError() { status_ = arrow::Status::OK(); }\n \n   // Check if there is a saved error\n-  bool HasError() { return error_token_ != R_NilValue; }\n+  bool HasError() { return !status_.ok(); }\n \n-  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  // Throw an exception if there was an error executing on the main\n+  // thread.\n   void ClearError() {\n-    if (HasError()) {\n-      cpp11::unwind_exception e(error_token_);\n-      ResetError();\n-      throw e;\n+    if (SignalStopSourceEnabled()) {\n+      stop_source_->Reset();\n\nReview Comment:\n   It's my reading that `ResetSignalStopSource()` will also invalidate the `stop_source_` pointer?\r\n   \r\n   If I do what the docs say:\r\n   \r\n   - I call `read_csv_arrow()` and cancel it\r\n   - Every subsequent call to `read_csv_arrow()` fails with `\"Cancelled: received signal 2\"` (I forget the exact message) even if I don't cancel it.\r\n   \r\n   The context manager workaround (where the `stop_source_` pointer is managed by something like `with_stop_source(some_code)`) is not practical...there are many workflows where a user creates a filesystem (e.g., `s3_bucket()`) and re-uses it between things that might be cancellable (like`read_csv_arrow(bucket$path(\"some/file.csv\")`). It's my reading that the stop token would be assigned when the filesystem is created.\n\n\n\n",
                    "created": "2022-07-21T13:43:07.680+0000",
                    "updated": "2022-07-21T13:43:07.680+0000",
                    "started": "2022-07-21T13:43:07.679+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793741",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r926694557\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n\nReview Comment:\n   The reason that one is there is because if you reload the dll (e.g., `devtools::load_all()`), you end up with an error (stop source already set up, or something). Most of the R developers do `devtools::load_all()` many times per commit, so we need something that works with that workflow.\n\n\n\n",
                    "created": "2022-07-21T13:44:52.310+0000",
                    "updated": "2022-07-21T13:44:52.310+0000",
                    "started": "2022-07-21T13:44:52.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793742",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r926821569\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n\nReview Comment:\n   Wow.\n\n\n\n",
                    "created": "2022-07-21T15:25:03.811+0000",
                    "updated": "2022-07-21T15:25:03.811+0000",
                    "started": "2022-07-21T15:25:03.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793799",
                    "issueId": "13361948"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/worklog/793800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13635:\nURL: https://github.com/apache/arrow/pull/13635#discussion_r926822836\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n   }\n \n   bool IsInitialized() { return initialized_; }\n \n   // Check if the current thread is the main R thread\n   bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n \n+  arrow::StopToken GetStopToken() {\n+    if (SignalStopSourceEnabled()) {\n+      return stop_source_->token();\n+    } else {\n+      return arrow::StopToken::Unstoppable();\n+    }\n+  }\n+\n+  bool SignalStopSourceEnabled() { return stop_source_ != nullptr; }\n+\n+  // Check if a SafeCallIntoR call is able to execute\n+  bool CanExecuteSafeCallIntoR() { return IsMainThread() || executor_ != nullptr; }\n+\n   // The Executor that is running on the main R thread, if it exists\n   arrow::internal::Executor*& Executor() { return executor_; }\n \n-  // Save an error token generated from a cpp11::unwind_exception\n-  // so that it can be properly handled after some cleanup code\n-  // has run (e.g., cancelling some futures or waiting for them\n-  // to finish).\n-  void SetError(cpp11::sexp token) { error_token_ = token; }\n+  // Save an error (possibly with an error token generated from\n+  // a cpp11::unwind_exception) so that it can be properly handled\n+  // after some cleanup code  has run (e.g., cancelling some futures\n+  // or waiting for them to finish).\n+  void SetError(arrow::Status status) { status_ = status; }\n \n-  void ResetError() { error_token_ = R_NilValue; }\n+  void ResetError() { status_ = arrow::Status::OK(); }\n \n   // Check if there is a saved error\n-  bool HasError() { return error_token_ != R_NilValue; }\n+  bool HasError() { return !status_.ok(); }\n \n-  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  // Throw an exception if there was an error executing on the main\n+  // thread.\n   void ClearError() {\n-    if (HasError()) {\n-      cpp11::unwind_exception e(error_token_);\n-      ResetError();\n-      throw e;\n+    if (SignalStopSourceEnabled()) {\n+      stop_source_->Reset();\n\nReview Comment:\n   Ah, right, the StopToken is persisted on the IOContext... hmm, that's a more general usability issue that I hadn't though about :-/\r\n   \r\n   \n\n\n\n##########\nr/src/safe-call-into-r.h:\n##########\n@@ -41,111 +49,188 @@\n // SafeCallIntoR<cpp_type>([&]() { ... }).\n class MainRThread {\n  public:\n-  MainRThread() : initialized_(false), executor_(nullptr) {}\n+  MainRThread() : initialized_(false), executor_(nullptr), stop_source_(nullptr) {}\n \n   // Call this method from the R thread (e.g., on package load)\n   // to save an internal copy of the thread id.\n   void Initialize() {\n     thread_id_ = std::this_thread::get_id();\n     initialized_ = true;\n-    SetError(R_NilValue);\n+    ResetError();\n+    arrow::ResetSignalStopSource();\n+    stop_source_ = arrow::ValueOrStop(arrow::SetSignalStopSource());\n   }\n \n   bool IsInitialized() { return initialized_; }\n \n   // Check if the current thread is the main R thread\n   bool IsMainThread() { return initialized_ && std::this_thread::get_id() == thread_id_; }\n \n+  arrow::StopToken GetStopToken() {\n+    if (SignalStopSourceEnabled()) {\n+      return stop_source_->token();\n+    } else {\n+      return arrow::StopToken::Unstoppable();\n+    }\n+  }\n+\n+  bool SignalStopSourceEnabled() { return stop_source_ != nullptr; }\n+\n+  // Check if a SafeCallIntoR call is able to execute\n+  bool CanExecuteSafeCallIntoR() { return IsMainThread() || executor_ != nullptr; }\n+\n   // The Executor that is running on the main R thread, if it exists\n   arrow::internal::Executor*& Executor() { return executor_; }\n \n-  // Save an error token generated from a cpp11::unwind_exception\n-  // so that it can be properly handled after some cleanup code\n-  // has run (e.g., cancelling some futures or waiting for them\n-  // to finish).\n-  void SetError(cpp11::sexp token) { error_token_ = token; }\n+  // Save an error (possibly with an error token generated from\n+  // a cpp11::unwind_exception) so that it can be properly handled\n+  // after some cleanup code  has run (e.g., cancelling some futures\n+  // or waiting for them to finish).\n+  void SetError(arrow::Status status) { status_ = status; }\n \n-  void ResetError() { error_token_ = R_NilValue; }\n+  void ResetError() { status_ = arrow::Status::OK(); }\n \n   // Check if there is a saved error\n-  bool HasError() { return error_token_ != R_NilValue; }\n+  bool HasError() { return !status_.ok(); }\n \n-  // Throw a cpp11::unwind_exception() with the saved token if it exists\n+  // Throw an exception if there was an error executing on the main\n+  // thread.\n   void ClearError() {\n-    if (HasError()) {\n-      cpp11::unwind_exception e(error_token_);\n-      ResetError();\n-      throw e;\n+    if (SignalStopSourceEnabled()) {\n+      stop_source_->Reset();\n\nReview Comment:\n   Ah, right, the StopToken is persisted on the IOContext... hmm, that's a more general usability issue that I hadn't though\r\n    about :-/\r\n   \r\n   \n\n\n\n",
                    "created": "2022-07-21T15:25:58.876+0000",
                    "updated": "2022-07-21T15:25:58.876+0000",
                    "started": "2022-07-21T15:25:58.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "793800",
                    "issueId": "13361948"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 52200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@246678ae[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29742ec3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43207e30[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4b2a52a1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d4d654c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6fd3650e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fc2473a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@36e4b739[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40f5d3ac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@34fa35a9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9bc4f9b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1af26cea[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 52200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 03 14:44:28 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-03T14:44:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11841/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-03-02T20:03:20.000+0000",
        "updated": "2022-10-05T20:08:24.000+0000",
        "timeoriginalestimate": null,
        "description": "When calling a long-running task (for example reading a CSV file) from the R prompt, users may want to interrupt with Ctrl-C.\r\n\r\nAllowing this will require integrating R's user interruption facility with the cancellation API that's going to be exposed in C++ (see  ARROW-8732).\r\n\r\nBelow some information I've gathered on the topic:\r\n\r\nThere is some hairy discussion of how to interrupt C++ code from R at https://stackoverflow.com/questions/40563522/r-how-to-write-interruptible-c-function-and-recover-partial-results and https://stat.ethz.ch/pipermail/r-devel/2011-April/060714.html .\r\n\r\nIt seems it may involve polling cpp11::check_user_interrupt() and catching any cpp11::unwind_exception that may signal an interruption. A complication is that apparently R APIs should only be called from the main thread. There's also a small library which claims to make writing all this easier: https://github.com/tnagler/RcppThread/blob/master/inst/include/RcppThread/RMonitor.hpp\r\n\r\nBut since user interruptions will only be noticed by the R main thread, the solution may be to launch heavy computations (e.g. CSV reading) in a separate thread and have the main R thread periodically poll for interrupts while waiting for the separate thread. This is what this dedicated thread class does in its join method: https://github.com/tnagler/RcppThread/blob/master/inst/include/RcppThread/Thread.hpp#L79\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "14.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 52200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R][C++] Allow cancelling long-running commands",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17343186",
                    "id": "17343186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "cc [~romainfrancois]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-05-12T11:16:12.159+0000",
                    "updated": "2021-05-12T11:16:12.159+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565132",
                    "id": "17565132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "From the R perspective, you can call\r\n{code}\r\nSafeCallIntoRVoid([]() { cpp11::check_user_interrupt(); })\r\n{code}\r\nanywhere in C++ and it will return a non-OK status if there's a pending interrupt. That will only work for tasks run with {{RunWithCapturedR()}}, although that includes most of the operations one would want to cancel (e.g., reading CSV, Feather, and query engine execution after ARROW-16444). It also only works for places where the R package can insert some kind of cancel callback.\r\n\r\nIf we have a Future that we can cancel, we could rig something similar, maybe using our own event loop (currently we use Arrow's RunInSerialExecutor and I don't know how customizable that is).\r\n\r\nIn addition to RMonitor, there's also the 'later' package ( https://github.com/r-lib/later ) which can also run event loops although I don't know how customizable they are.\r\n\r\nIn the R package we have the {{RMainThread}} singleton which could be an appropriate place to register a C++ cancel callback (e.g., a {{std::function}} that calls some Future's cancel callback). In most cases, though, we don't have a future we can cancel.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-11T18:09:57.118+0000",
                    "updated": "2022-07-16T10:43:02.341+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565148",
                    "id": "17565148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "{quote}If we have a Future that we can cancel, we could rig something similar, maybe using our own event loop (currently we use Arrow's RunInSerialExecutor and I don't know how customizable that is).{quote}\r\n\r\nCancellation is supported in C++ but not via cancellable futures (and probably won't be).  Instead, operations which support cancellation take in a stop token.  A stop token is something that the C++ code can poll on a regular basis to see if cancellation has been requested (very similar to {{cpp11::check_user_interrupt()}} but not global).\r\n\r\nThe stop token is connected to a stop source which the user holds onto.  If the user marks the stop source as cancelled then the stop token will see the cancellation the next time it is polled and exit.\r\n\r\nIt sounds like, for R, this stop source approach won't work (is there no way to register a callback that gets called on cancellation instead of requiring polling?)  In that case maybe we want a custom stop token implementation for R.  This stop token's poll method could check {{cpp11::check_user_interrupt()}}.  However, we'd probably want to debounce the call as a stop token might be polled very frequently and should be pretty fast.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-11T19:00:50.497+0000",
                    "updated": "2022-07-11T19:00:50.497+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565150",
                    "id": "17565150",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "One way we can do this in just the R package is to wrap {{InputStream}}/{{RandomAccessFile}} objects with ones whose read methods call {{SafeCallIntoR()}} (with care to make sure we're not checking so frequently that is slows things down)? That would limit the checking to filesystem operations but I think it's rare for a single {{Read}} or {{ReadAt}} call to be large enough to matter in this context?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-11T19:05:33.602+0000",
                    "updated": "2022-07-11T19:05:33.602+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565153",
                    "id": "17565153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Can the {{RunInSerialExecutor}} do something like {{setTimeout}} (i.e., schedule something for execution later)? If so, that could just do {{cpp11::check_user_interrupt()}}, set the C++ stop token if an interrupt has been requested, and schedule itself to run in a few seconds otherwise?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-11T19:12:00.405+0000",
                    "updated": "2022-07-11T19:12:00.405+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565165",
                    "id": "17565165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "{quote}Can the RunInSerialExecutor do something like setTimeout (i.e., schedule something for execution later)? If so, that could just do cpp11::check_user_interrupt(), set the C++ stop token if an interrupt has been requested, and schedule itself to run in a few seconds otherwise?\r\n{quote}\r\n\r\nThat's not supported today but, it should be possible, and it seems like a pretty good way to solve this problem.  One challenge is that we want to make sure to let cleanup happen (e.g. tasks that close file handles).  However, there might be some middle ground here.  {{RunInSerialExecutor}}, when it decides a timeout has occurred, could mark a StopSource as cancelled.  We would not need to override stop token in that case.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-07-11T19:36:42.346+0000",
                    "updated": "2022-07-11T19:36:42.346+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565406",
                    "id": "17565406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~paleolimbot] When you try to interrupt e.g. CSV reading using Ctrl-C in R currently, what happens? It might be that it already works, given the changes mentioned.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-12T09:50:33.504+0000",
                    "updated": "2022-07-12T09:50:33.504+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17565408",
                    "id": "17565408",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Also it would be worth taking a look how it's done in Python currently:\r\nhttps://github.com/apache/arrow/blob/2519230121b9be3ecac01ac3ed2b610382dbca48/python/pyarrow/error.pxi\r\n\r\nand the C++ APIs that it relies on:\r\nhttps://github.com/apache/arrow/blob/2519230121b9be3ecac01ac3ed2b610382dbca48/cpp/src/arrow/util/cancel.h\r\n\r\nThey allow to automatically cancel a StopToken from a set of received signals. It should in turn interrupt whatever primitive is checking for StopToken cancellations (such as CSV reading).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-12T09:55:36.970+0000",
                    "updated": "2022-07-12T09:55:36.970+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17567349",
                    "id": "17567349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "It's a little hard to test because it involves seeing how fast you can press Control-C, but I'm pretty sure that the sending an interrupt signal to CSV reading and an exec plan doesn't do anything:\r\n\r\n{code:R}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\ntf <- tempfile()\r\nreadr::write_csv(vctrs::vec_rep(mtcars, 5e5), tf)\r\n\r\n# try to slow down CSV reading\r\nset_cpu_count(1)\r\nset_io_thread_count(2)\r\n\r\n# compare timing of cancelled vs not cancelled (hard to tell the difference)\r\nsystem.time(read_csv_arrow(tf))\r\n#>    user  system elapsed \r\n#>   2.852   0.637   5.365\r\nsystem.time(open_dataset(tf, format = \"csv\") |> dplyr::collect())\r\n#>    user  system elapsed \r\n#>   2.920   0.219   3.049\r\n\r\n# compare responsiveness of cancelling the read using other APIs\r\n# (usually quite a difference)\r\nsystem.time(readr::read_csv(tf))\r\n#> Rows: 16000000 Columns: 11\r\n#> \u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n#> Delimiter: \",\"\r\n#> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb\r\n#> \r\n#> \u2139 Use `spec()` to retrieve the full column specification for this data.\r\n#> \u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\r\n#>    user  system elapsed \r\n#>  19.424   1.267   3.496\r\nsystem.time(read.csv(tf))\r\n#>    user  system elapsed \r\n#>  20.858   0.718  21.864\r\n{code}\r\n\r\nIt seems like we would need some sort of \"run this bit of code in XX seconds\" to implement this in the R bindings (or if there's an easier way that would be great!). It doesn't matter what thread it's on because {{SafeCallIntoR}} handles that...I *think* I know how to do that (start a thread, make it sleep for some number of seconds, then call SafeCallIntoR). The setup/cleanup could live in {{RunWithCapturedR}}?\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-15T18:29:35.879+0000",
                    "updated": "2022-07-15T18:29:35.879+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17567367",
                    "id": "17567367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "In your example, {{read_csv_arrow}} is actually interrupted or does it run to completion?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-15T19:29:28.216+0000",
                    "updated": "2022-07-15T19:29:28.216+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17567430",
                    "id": "17567430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "I believe that it runs to completion even if you Control-C when it's running (going on evidence that it takes the same amount of time whether you do or do not cancel it). I also checked {{open_dataset() |> write_dataset()}}, which both takes the same amount of time AND writes the same thing regardless of whether or not you Control-C in the middle of it.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-16T01:27:52.285+0000",
                    "updated": "2022-07-16T01:27:52.285+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17567433",
                    "id": "17567433",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Another piece of evidence is that if you use an R connection instead of a filename then you get immediate cancellation (because with an R connection as input it's calling {{SafeCallIntoR()}} every few ms and the error propagation will also propagate the interrupt condition).\r\n\r\n{code:R}\r\nlibrary(arrow, warn.conflicts = FALSE)\r\n#> Some features are not enabled in this build of Arrow. Run `arrow_info()` for more information.\r\n\r\ntf <- tempfile()\r\nreadr::write_csv(vctrs::vec_rep(mtcars, 5e5), tf)\r\n\r\n# try to slow down CSV reading\r\nset_cpu_count(1)\r\nset_io_thread_count(2)\r\n\r\n# you can cancel if you use an R connection because the error propagation\r\n# will also propagate the interrupt condition\r\nsystem.time(read_csv_arrow(file(tf)))\r\n#>    user  system elapsed \r\n#>   2.909   0.598   3.410\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-07-16T02:03:34.118+0000",
                    "updated": "2022-07-16T02:03:34.118+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17567497",
                    "id": "17567497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "{{RunInSerialExecutor}} internally gets a future (using the private {{SerialExecutor::Run}}) and then waits for the future to complete.\r\n\r\nInstead there should be a public way to get that future without waiting for it. Then you can wait for the future yourself, but with a timeout to implement whatever polling you want.\r\n\r\nOf course, polling is suboptimal. Ideally there would be a way to temporarily override R's signal handlers, and reuse the same strategy as in Python. Perhaps that can be done using plain {{signal}} calls in C++?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-16T15:15:14.541+0000",
                    "updated": "2022-07-16T15:15:38.749+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17567502",
                    "id": "17567502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "To elaborate on the latter strategy (temporarily override signal handlers in C++), you could mimick what is done on the Python/Cython side:\r\nhttps://github.com/apache/arrow/blob/2519230121b9be3ecac01ac3ed2b610382dbca48/python/pyarrow/error.pxi#L223-L242\r\n... except that {{PyErr_SetInterrupt}} would become either either {{Rf_onintr}} or {{Rf_onintrNoResume}} (not sure which one). And I don't think {{PyErr_CheckSignals}} needs a R equivalent at all.\r\n\r\nAs for setting and restoring signal handlers, you would do that in C++ become R doesn't seem to have any equivalent APIs (so you would use our own {{SetSignalHandler}} helper function).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-16T15:40:40.155+0000",
                    "updated": "2022-07-16T15:40:40.155+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361948/comment/17612325",
                    "id": "17612325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Issue resolved by pull request 13635\n[https://github.com/apache/arrow/pull/13635]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-10-03T14:44:28.010+0000",
                    "updated": "2022-10-03T14:44:28.010+0000"
                }
            ],
            "maxResults": 15,
            "total": 15,
            "startAt": 0
        },
        "customfield_12311820": "0|z0o89s:",
        "customfield_12314139": null
    }
}