{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13196168",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168",
    "key": "ARROW-3701",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "aggregateprogress": {
            "progress": 100800,
            "total": 100800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 100800,
            "total": 100800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3701/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 196,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra opened a new pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942\n \n \n   The code changes are complete. However, the perf in the non-fast code path is slow - I'll debug and fix that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-11T12:54:42.043+0000",
                    "updated": "2018-11-11T12:54:42.043+0000",
                    "started": "2018-11-11T12:54:42.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164749",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232491305\n \n \n\n ##########\n File path: cpp/src/gandiva/CMakeLists.txt\n ##########\n @@ -146,6 +150,7 @@ if (ARROW_GANDIVA_BUILD_TESTS)\n   add_gandiva_unit_test(lru_cache_test.cc)\n   add_gandiva_unit_test(to_date_holder_test.cc to_date_holder.cc date_utils.cc)\n   add_gandiva_unit_test(simple_arena_test.cc)\n+  add_gandiva_unit_test(decimal_type_util_test.cc decimal_type_util.cc)\n \n Review comment:\n   I'm curious why not just link the test files with libgandiva.a? This is similar to the `ADD_PARQUET_TEST` macro we have here https://github.com/apache/arrow/blob/master/cpp/src/parquet/CMakeLists.txt#L28\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-11T15:01:26.562+0000",
                    "updated": "2018-11-11T15:01:26.562+0000",
                    "started": "2018-11-11T15:01:26.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164754",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164801",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232516327\n \n \n\n ##########\n File path: cpp/src/gandiva/CMakeLists.txt\n ##########\n @@ -146,6 +150,7 @@ if (ARROW_GANDIVA_BUILD_TESTS)\n   add_gandiva_unit_test(lru_cache_test.cc)\n   add_gandiva_unit_test(to_date_holder_test.cc to_date_holder.cc date_utils.cc)\n   add_gandiva_unit_test(simple_arena_test.cc)\n+  add_gandiva_unit_test(decimal_type_util_test.cc decimal_type_util.cc)\n \n Review comment:\n   Early on, we started doing this so that each class can have it's own unit tests. but, we didn't add any mocking, so it's become unwieldy now.\r\n   \r\n   Is it okay if I fix this as part of ARROW-3597 ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T01:28:09.315+0000",
                    "updated": "2018-11-12T01:28:09.315+0000",
                    "started": "2018-11-12T01:28:09.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164801",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#issuecomment-437820201\n \n \n   I'm skeptical about the semantics here. If adding two decimals you're increasing the scale and precision. But that's as if adding two `int32` gave a `int33`. The usual idiom with decimals seems to keep a fixed precision accross all computations (see e.g. Python's [decimal](https://docs.python.org/3/library/decimal.html) library).\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:53:59.770+0000",
                    "updated": "2018-11-12T09:53:59.770+0000",
                    "started": "2018-11-12T09:53:59.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164853",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232577234\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_type_util.h\n ##########\n @@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Adapted from Apache Impala\n+\n+#ifndef GANDIVA_DECIMAL_TYPE_UTIL_H\n+#define GANDIVA_DECIMAL_TYPE_UTIL_H\n+\n+#include <algorithm>\n+#include <memory>\n+\n+#include \"arrow/type.h\"\n+#include \"gandiva/arrow.h\"\n+\n+namespace gandiva {\n+\n+/// @brief Handles conversion of scale/precision for operations on decimal types.\n+class DecimalTypeUtil {\n+ public:\n+  enum Op {\n+    kOpAdd,\n+    kOpSubtract,\n+    kOpMultiply,\n+    kOpDivide,\n+    kOpMod,\n+  };\n+\n+  /// The maximum precision representable by a 4-byte decimal\n+  static constexpr int32_t kMaxDecimal4Precision = 9;\n+\n+  /// The maximum precision representable by a 8-byte decimal\n+  static constexpr int32_t kMaxDecimal8Precision = 18;\n+\n+  /// The maximum precision representable by a 16-byte decimal\n+  static constexpr int32_t kMaxPrecision = 38;\n+\n+  static constexpr int32_t kMaxScale = kMaxPrecision;\n \n Review comment:\n   I don't understand this. Why is the max scale equal to the max precision?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.482+0000",
                    "updated": "2018-11-12T09:54:12.482+0000",
                    "started": "2018-11-12T09:54:12.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164854",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232577297\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_type_util.h\n ##########\n @@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Adapted from Apache Impala\n+\n+#ifndef GANDIVA_DECIMAL_TYPE_UTIL_H\n+#define GANDIVA_DECIMAL_TYPE_UTIL_H\n+\n+#include <algorithm>\n+#include <memory>\n+\n+#include \"arrow/type.h\"\n+#include \"gandiva/arrow.h\"\n+\n+namespace gandiva {\n+\n+/// @brief Handles conversion of scale/precision for operations on decimal types.\n+class DecimalTypeUtil {\n+ public:\n+  enum Op {\n+    kOpAdd,\n+    kOpSubtract,\n+    kOpMultiply,\n+    kOpDivide,\n+    kOpMod,\n+  };\n+\n+  /// The maximum precision representable by a 4-byte decimal\n+  static constexpr int32_t kMaxDecimal4Precision = 9;\n+\n+  /// The maximum precision representable by a 8-byte decimal\n+  static constexpr int32_t kMaxDecimal8Precision = 18;\n+\n+  /// The maximum precision representable by a 16-byte decimal\n+  static constexpr int32_t kMaxPrecision = 38;\n+\n+  static constexpr int32_t kMaxScale = kMaxPrecision;\n+  static constexpr int32_t kMinAdjustedScale = 6;\n \n Review comment:\n   What is this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.624+0000",
                    "updated": "2018-11-12T09:54:12.624+0000",
                    "started": "2018-11-12T09:54:12.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164855",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232577108\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_type_util.h\n ##########\n @@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Adapted from Apache Impala\n+\n+#ifndef GANDIVA_DECIMAL_TYPE_UTIL_H\n+#define GANDIVA_DECIMAL_TYPE_UTIL_H\n+\n+#include <algorithm>\n+#include <memory>\n+\n+#include \"arrow/type.h\"\n+#include \"gandiva/arrow.h\"\n+\n+namespace gandiva {\n+\n+/// @brief Handles conversion of scale/precision for operations on decimal types.\n+class DecimalTypeUtil {\n+ public:\n+  enum Op {\n+    kOpAdd,\n+    kOpSubtract,\n+    kOpMultiply,\n+    kOpDivide,\n+    kOpMod,\n+  };\n+\n+  /// The maximum precision representable by a 4-byte decimal\n+  static constexpr int32_t kMaxDecimal4Precision = 9;\n \n Review comment:\n   I would call those \"Decimal64\" and \"Decimal128\" out of consistency.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.663+0000",
                    "updated": "2018-11-12T09:54:12.663+0000",
                    "started": "2018-11-12T09:54:12.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164856",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232577742\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_type_util.h\n ##########\n @@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Adapted from Apache Impala\n+\n+#ifndef GANDIVA_DECIMAL_TYPE_UTIL_H\n+#define GANDIVA_DECIMAL_TYPE_UTIL_H\n+\n+#include <algorithm>\n+#include <memory>\n+\n+#include \"arrow/type.h\"\n+#include \"gandiva/arrow.h\"\n+\n+namespace gandiva {\n+\n+/// @brief Handles conversion of scale/precision for operations on decimal types.\n+class DecimalTypeUtil {\n+ public:\n+  enum Op {\n+    kOpAdd,\n+    kOpSubtract,\n+    kOpMultiply,\n+    kOpDivide,\n+    kOpMod,\n+  };\n+\n+  /// The maximum precision representable by a 4-byte decimal\n+  static constexpr int32_t kMaxDecimal4Precision = 9;\n+\n+  /// The maximum precision representable by a 8-byte decimal\n+  static constexpr int32_t kMaxDecimal8Precision = 18;\n+\n+  /// The maximum precision representable by a 16-byte decimal\n+  static constexpr int32_t kMaxPrecision = 38;\n+\n+  static constexpr int32_t kMaxScale = kMaxPrecision;\n+  static constexpr int32_t kMinAdjustedScale = 6;\n+\n+  // For specified operation and input scale/precision, determine the output\n+  // scale/precision.\n+  static Status GetResultType(Op op, const Decimal128TypeVector& in_types,\n+                              Decimal128TypePtr* out_type);\n+\n+ private:\n+  static Decimal128TypePtr MakeType(int32_t precision, int32_t scale);\n+  static Decimal128TypePtr MakeAdjustedType(int32_t precision, int32_t scale);\n+};\n+\n+inline Decimal128TypePtr DecimalTypeUtil::MakeType(int32_t precision, int32_t scale) {\n+  return std::make_shared<arrow::Decimal128Type>(precision, scale);\n \n Review comment:\n   You can use the `arrow::decimal()` factory function (see `type.h`).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.706+0000",
                    "updated": "2018-11-12T09:54:12.706+0000",
                    "started": "2018-11-12T09:54:12.705+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164857",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164858",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232582314\n \n \n\n ##########\n File path: cpp/src/gandiva/function_ir_builder.cc\n ##########\n @@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_ir_builder.h\"\n+\n+namespace gandiva {\n+\n+llvm::Value* FunctionIRBuilder::BuildIfElse(llvm::Value* condition,\n+                                            llvm::Type* return_type,\n+                                            std::function<llvm::Value*()> then_func,\n \n Review comment:\n   I'm curious: what does it bring to pass a function here, rather than directly the corresponding `llvm::Value`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.841+0000",
                    "updated": "2018-11-12T09:54:12.841+0000",
                    "started": "2018-11-12T09:54:12.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164858",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232582405\n \n \n\n ##########\n File path: cpp/src/gandiva/function_ir_builder.cc\n ##########\n @@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_ir_builder.h\"\n+\n+namespace gandiva {\n+\n+llvm::Value* FunctionIRBuilder::BuildIfElse(llvm::Value* condition,\n+                                            llvm::Type* return_type,\n+                                            std::function<llvm::Value*()> then_func,\n+                                            std::function<llvm::Value*()> else_func) {\n+  llvm::IRBuilder<>* builder = ir_builder();\n+\n+  // Create blocks for the then, else and merge cases.\n+  llvm::BasicBlock* then_bb = llvm::BasicBlock::Create(*context(), \"then\", function_);\n+  llvm::BasicBlock* else_bb = llvm::BasicBlock::Create(*context(), \"else\", function_);\n+  llvm::BasicBlock* merge_bb = llvm::BasicBlock::Create(*context(), \"merge\", function_);\n+\n+  builder->CreateCondBr(condition, then_bb, else_bb);\n+\n+  // Emit the then block.\n+  builder->SetInsertPoint(then_bb);\n+  auto then_value = then_func();\n+  builder->CreateBr(merge_bb);\n+\n+  // refresh then_bb for phi (could have changed due to code generation of then_vv).\n \n Review comment:\n   Surely you mean \"then_value\".\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.846+0000",
                    "updated": "2018-11-12T09:54:12.846+0000",
                    "started": "2018-11-12T09:54:12.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164859",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232588827\n \n \n\n ##########\n File path: cpp/src/gandiva/llvm_types.h\n ##########\n @@ -125,6 +147,20 @@ class LLVMTypes {\n     return retval;\n   }\n \n+  enum DecimalMember {\n+    kDecimalValueIdx,\n+    kDecimalPrecisionIdx,\n+    kDecimalScaleIdx,\n+  };\n+\n+  llvm::StructType* decimal128_struct_type() {\n+    return llvm::StructType::get(context_, {i128_type(), i32_type(), i32_type()}, false);\n \n Review comment:\n   This looks a bit wasteful. The types are always going to be the same along a single batch.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.883+0000",
                    "updated": "2018-11-12T09:54:12.883+0000",
                    "started": "2018-11-12T09:54:12.879+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164860",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232580672\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_type_util_test.cc\n ##########\n @@ -0,0 +1,61 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Adapted from Apache Impala\n+\n+#include <gtest/gtest.h>\n+\n+#include \"gandiva/decimal_type_util.h\"\n+#include \"tests/test_util.h\"\n+\n+namespace gandiva {\n+\n+Decimal128TypePtr MakeDecimal(int32_t precision, int32_t scale) {\n+  return std::make_shared<arrow::Decimal128Type>(precision, scale);\n+}\n+\n+Decimal128TypePtr DoOp(DecimalTypeUtil::Op op, Decimal128TypePtr d1,\n+                       Decimal128TypePtr d2) {\n+  Decimal128TypePtr ret_type;\n+  auto status = DecimalTypeUtil::GetResultType(op, {d1, d2}, &ret_type);\n+  EXPECT_TRUE(status.ok()) << status.message();\n+  return ret_type;\n+}\n+\n+TEST(DecimalResultTypes, Basic) {\n+  EXPECT_ARROW_TYPE_EQUALS(\n+      MakeDecimal(31, 10),\n+      DoOp(DecimalTypeUtil::kOpAdd, MakeDecimal(30, 10), MakeDecimal(30, 10)));\n+\n+  EXPECT_ARROW_TYPE_EQUALS(\n+      MakeDecimal(32, 6),\n+      DoOp(DecimalTypeUtil::kOpAdd, MakeDecimal(30, 6), MakeDecimal(30, 5)));\n+\n+  EXPECT_ARROW_TYPE_EQUALS(\n+      MakeDecimal(38, 9),\n+      DoOp(DecimalTypeUtil::kOpAdd, MakeDecimal(30, 10), MakeDecimal(38, 10)));\n+\n+  EXPECT_ARROW_TYPE_EQUALS(\n+      MakeDecimal(38, 9),\n+      DoOp(DecimalTypeUtil::kOpAdd, MakeDecimal(38, 10), MakeDecimal(38, 38)));\n+\n+  EXPECT_ARROW_TYPE_EQUALS(\n+      MakeDecimal(38, 6),\n \n Review comment:\n   Why? Doesn't this create truncation if the 2-scale decimal is too large? I would expect `decimal(38, 1)`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:12.987+0000",
                    "updated": "2018-11-12T09:54:12.987+0000",
                    "started": "2018-11-12T09:54:12.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164861",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232586378\n \n \n\n ##########\n File path: cpp/src/gandiva/llvm_generator.cc\n ##########\n @@ -389,6 +402,43 @@ llvm::Value* LLVMGenerator::AddFunctionCall(const std::string& full_name,\n   return value;\n }\n \n+llvm::Value* LLVMGenerator::BuildDecimal128Ref(llvm::BasicBlock* entry_block,\n+                                               llvm::Value* value,\n+                                               DataTypePtr arrow_type) {\n+  llvm::IRBuilder<>* builder = ir_builder();\n+\n+  // only decimals of size 128-bit supported.\n+  DCHECK_EQ(is_decimal_128(arrow_type), true);\n \n Review comment:\n   `DCHECK(is_decimal_128(arrow_type))`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:13.018+0000",
                    "updated": "2018-11-12T09:54:13.018+0000",
                    "started": "2018-11-12T09:54:13.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164862",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232587800\n \n \n\n ##########\n File path: cpp/src/gandiva/llvm_generator.cc\n ##########\n @@ -953,25 +1021,45 @@ LValuePtr LLVMGenerator::Visitor::BuildValueAndValidity(const ValueValidityPair&\n }\n \n LValuePtr LLVMGenerator::Visitor::BuildFunctionCall(const NativeFunction* func,\n+                                                    DataTypePtr arrow_return_type,\n                                                     std::vector<llvm::Value*>* params) {\n-  auto arrow_return_type = func->signature().ret_type()->id();\n-  auto llvm_return_type = generator_->types()->IRType(arrow_return_type);\n-\n-  // add extra arg for return length for variable len return types (alloced on stack).\n-  llvm::AllocaInst* result_len_ptr = nullptr;\n-  if (arrow::is_binary_like(arrow_return_type)) {\n-    result_len_ptr = new llvm::AllocaInst(generator_->types()->i32_type(), 0,\n-                                          \"result_len\", entry_block_);\n-    params->push_back(result_len_ptr);\n-    has_arena_allocs_ = true;\n-  }\n+  auto types = generator_->types();\n+  auto arrow_return_type_id = arrow_return_type->id();\n+  auto llvm_return_type = types->IRType(arrow_return_type_id);\n+\n+  if (arrow_return_type_id == arrow::Type::DECIMAL) {\n+    // For decimals, the output struct pointer is passed along as an input\n+    // param to the function call. This allows for a stack allocation instead\n+    // of a malloc/new.\n \n Review comment:\n   I'm not sure what you mean. AFAIK you should be able to return a struct type from a LLVM function.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:13.020+0000",
                    "updated": "2018-11-12T09:54:13.020+0000",
                    "started": "2018-11-12T09:54:13.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164863",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232585894\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_ir.cc\n ##########\n @@ -0,0 +1,470 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <sstream>\n+#include <utility>\n+\n+#include \"arrow/status.h\"\n+#include \"gandiva/decimal_ir.h\"\n+#include \"gandiva/decimal_type_util.h\"\n+\n+// Algorithms adapted from Apache Impala\n+// The equivalent C++ code (with int64_t) is present in decimal_sample.cc\n+\n+namespace gandiva {\n+\n+#define ADD_TRACE_32(msg, value) \\\n+  if (enable_ir_traces_) {       \\\n+    AddTrace32(msg, value);      \\\n+  }\n+#define ADD_TRACE_128(msg, value) \\\n+  if (enable_ir_traces_) {        \\\n+    AddTrace128(msg, value);      \\\n+  }\n+\n+const char DecimalIR::kScaleMultipliersName[] = \"kScaleMultipliers\";\n+\n+/// Populate globals required by decimal IR.\n+/// TODO: can this be done just once ?\n+void DecimalIR::AddGlobals(Engine* engine) {\n+  auto types = engine->types();\n+\n+  // populate vector : [ 1, 10, 100, 1000, ..]\n+  std::string value = \"1\";\n+  std::vector<llvm::Constant*> scale_multipliers;\n+  for (int i = 0; i < DecimalTypeUtil::kMaxPrecision + 1; ++i) {\n+    auto multiplier =\n+        llvm::ConstantInt::get(llvm::Type::getInt128Ty(*engine->context()), value, 10);\n+    scale_multipliers.push_back(multiplier);\n+    value.append(\"0\");\n+  }\n+\n+  auto array_type =\n+      llvm::ArrayType::get(types->i128_type(), DecimalTypeUtil::kMaxPrecision + 1);\n+  auto initializer = llvm::ConstantArray::get(\n+      array_type, llvm::ArrayRef<llvm::Constant*>(scale_multipliers));\n+\n+  auto globalScaleMultipliers = new llvm::GlobalVariable(\n+      *engine->module(), array_type, true /*constant*/,\n+      llvm::GlobalValue::LinkOnceAnyLinkage, initializer, kScaleMultipliersName);\n+  globalScaleMultipliers->setAlignment(16);\n+}\n+\n+// CPP:  return kScaleMultipliers[scale]\n+llvm::Value* DecimalIR::GetScaleMultiplier(llvm::Value* scale) {\n+  auto const_array = module()->getGlobalVariable(kScaleMultipliersName);\n+  auto ptr = ir_builder()->CreateGEP(const_array, {types()->i32_constant(0), scale});\n+  return ir_builder()->CreateLoad(ptr);\n+}\n+\n+// CPP:  x <= y ? y : x\n+llvm::Value* DecimalIR::GetHigherScale(llvm::Value* x_scale, llvm::Value* y_scale) {\n+  llvm::Value* le = ir_builder()->CreateICmpSLE(x_scale, y_scale);\n+  return BuildIfElse(le, types()->i32_type(), [&] { return y_scale; },\n+                     [&] { return x_scale; });\n+}\n+\n+// CPP: return (increase_scale_by <= 0)  ?\n+//              in_value : in_value * GetScaleMultiplier(increase_scale_by)\n+llvm::Value* DecimalIR::IncreaseScale(llvm::Value* in_value,\n+                                      llvm::Value* increase_scale_by) {\n+  llvm::Value* le_zero =\n+      ir_builder()->CreateICmpSLE(increase_scale_by, types()->i32_constant(0));\n+  // then block\n+  auto then_lambda = [&] { return in_value; };\n+\n+  // else block\n+  auto else_lambda = [&] {\n+    llvm::Value* multiplier = GetScaleMultiplier(increase_scale_by);\n+    return ir_builder()->CreateMul(in_value, multiplier);\n+  };\n+\n+  return BuildIfElse(le_zero, types()->i128_type(), then_lambda, else_lambda);\n+}\n+\n+// CPP: return (reduce_scale_by <= 0)  ?\n+//              in_value : in_value / GetScaleMultiplier(reduce_scale_by)\n+llvm::Value* DecimalIR::ReduceScale(llvm::Value* in_value, llvm::Value* reduce_scale_by) {\n+  auto le_zero = ir_builder()->CreateICmpSLE(reduce_scale_by, types()->i32_constant(0));\n+  // then block\n+  auto then_lambda = [&] { return in_value; };\n+\n+  // else block\n+  auto else_lambda = [&] {\n+    // TODO : handle rounding.\n+    llvm::Value* multiplier = GetScaleMultiplier(reduce_scale_by);\n+    return ir_builder()->CreateSDiv(in_value, multiplier);\n+  };\n+\n+  return BuildIfElse(le_zero, types()->i128_type(), then_lambda, else_lambda);\n+}\n+\n+llvm::Value* DecimalIR::GetWhole(llvm::Value* in_value, llvm::Value* in_scale) {\n+  return ir_builder()->CreateSDiv(in_value, GetScaleMultiplier(in_scale));\n+}\n+\n+llvm::Value* DecimalIR::GetFraction(llvm::Value* in_value, llvm::Value* in_scale) {\n+  return ir_builder()->CreateSRem(in_value, GetScaleMultiplier(in_scale));\n+}\n+\n+/// @brief Fast-path for add\n+/// Adjust x and y to the same scale, and add them.\n+llvm::Value* DecimalIR::AddFastPath(llvm::Value* x_value, llvm::Value* x_scale,\n+                                    llvm::Value* y_value, llvm::Value* y_scale) {\n+  auto higher_scale = GetHigherScale(x_scale, y_scale);\n+  ADD_TRACE_32(\"AddFastPath : higher_scale\", higher_scale);\n+\n+  // CPP : x_scaled = IncreaseScale(x_value, higher_scale - x_scale)\n+  auto x_delta = ir_builder()->CreateSub(higher_scale, x_scale);\n+  auto x_scaled = IncreaseScale(x_value, x_delta);\n+  ADD_TRACE_128(\"AddFastPath : x_scaled\", x_scaled);\n+\n+  // CPP : y_scaled = IncreaseScale(y_value, higher_scale - y_scale)\n+  auto y_delta = ir_builder()->CreateSub(higher_scale, y_scale);\n+  auto y_scaled = IncreaseScale(y_value, y_delta);\n+  ADD_TRACE_128(\"AddFastPath : y_scaled\", y_scaled);\n+\n+  return ir_builder()->CreateAdd(x_scaled, y_scaled);\n+}\n+\n+/// @brief Add numbers that are too large to be added directly.\n+/// Both x_value and y_value must be >= 0\n+llvm::Value* DecimalIR::AddLargePositive(llvm::Value* x_value, llvm::Value* x_scale,\n+                                         llvm::Value* y_value, llvm::Value* y_scale,\n+                                         llvm::Value* out_scale) {\n+  DCHECK_IR_GE(x_value, types()->i128_zero());\n+  DCHECK_IR_GE(y_value, types()->i128_zero());\n+\n+  auto higher_scale = GetHigherScale(x_scale, y_scale);\n+  DCHECK_IR_GE(higher_scale, out_scale);\n+  ADD_TRACE_32(\"AddLargePositive : higher_scale\", higher_scale);\n+\n+  // Get whole parts.\n+  auto x_left = GetWhole(x_value, x_scale);\n+  auto y_left = GetWhole(y_value, y_scale);\n+  DCHECK_IR_GE(x_left, types()->i128_zero());\n+  DCHECK_IR_GE(y_left, types()->i128_zero());\n+  ADD_TRACE_128(\"AddLargePositive : x_left\", x_left);\n+  ADD_TRACE_128(\"AddLargePositive : y_left\", y_left);\n+\n+  // Get fractional parts, and adjust both to the same scale.\n+  auto x_delta = ir_builder()->CreateSub(higher_scale, x_scale);\n+  auto x_right = GetFraction(x_value, x_scale);\n+  x_right = IncreaseScale(x_right, x_delta);\n+  DCHECK_IR_GE(x_right, types()->i128_zero());\n+  ADD_TRACE_128(\"AddLargePositive : x_right\", x_right);\n+\n+  auto y_delta = ir_builder()->CreateSub(higher_scale, y_scale);\n+  auto y_right = GetFraction(y_value, y_scale);\n+  y_right = IncreaseScale(y_right, y_delta);\n+  DCHECK_IR_GE(y_right, types()->i128_zero());\n+  ADD_TRACE_128(\"AddLargePositive : y_right\", y_right);\n+\n+  // Add the fractional parts. This can overflow - in that case, set the carryover to 1.\n+\n+  // CPP: bool sum_right_overflow = x_right >= GetScaleMultiplier(higher_scale) - y_right\n+  auto max_minux_y_right =\n+      ir_builder()->CreateSub(GetScaleMultiplier(higher_scale), y_right);\n+  auto sum_right_overflow = ir_builder()->CreateICmpSGE(x_right, max_minux_y_right);\n+\n+  // CPP:\n+  // right = (sum_right_overflow ?\n+  //            x_right + y_right - GetScaleMultiplier(higher_scale) :\n+  //            x_right + y_right\n+  auto then_lambda = [&] { return ir_builder()->CreateSub(x_right, max_minux_y_right); };\n+  auto else_lambda = [&] { return ir_builder()->CreateAdd(x_right, y_right); };\n+  auto right =\n+      BuildIfElse(sum_right_overflow, types()->i128_type(), then_lambda, else_lambda);\n+  DCHECK_IR_GE(right, types()->i128_zero());\n+\n+  // CPP: carry_to_left = sum_right_overflow ? 1 : 0\n+  auto carry_to_left = BuildIfElse(sum_right_overflow, types()->i128_type(),\n+                                   [&] { return types()->i128_one(); },\n+                                   [&] { return types()->i128_zero(); });\n+\n+  // reduce right to the scale specified in output\n+  auto reduce_scale_by = ir_builder()->CreateSub(higher_scale, out_scale);\n+  right = ReduceScale(right, reduce_scale_by);\n+  ADD_TRACE_128(\"AddLargePositive : right\", right);\n+\n+  // CPP: left = x_left + y_left + carry_to_left\n+  auto left = ir_builder()->CreateAdd(x_left, y_left);\n+  left = ir_builder()->CreateAdd(left, carry_to_left);\n+  ADD_TRACE_128(\"AddLargePositive : left\", left);\n+\n+  // CPP: left * 10^out_scale + right\n+  auto out_value = ir_builder()->CreateMul(left, GetScaleMultiplier(out_scale));\n+  out_value = ir_builder()->CreateAdd(out_value, right);\n+  return out_value;\n+}\n+\n+/// @brief Add numbers that are too large to be added directly.\n+/// x_value and y_value cannot be 0, and one must be positive and the other negative.\n+llvm::Value* DecimalIR::AddLargeNegative(llvm::Value* x_value, llvm::Value* x_scale,\n+                                         llvm::Value* y_value, llvm::Value* y_scale,\n+                                         llvm::Value* out_scale) {\n+  auto higher_scale = GetHigherScale(x_scale, y_scale);\n+  DCHECK_IR_GE(higher_scale, out_scale);\n+  ADD_TRACE_32(\"AddLargeNegative : higher_scale\", higher_scale);\n+\n+  // Get whole parts.\n+  auto x_left = GetWhole(x_value, x_scale);\n+  auto y_left = GetWhole(y_value, y_scale);\n+  DCHECK_IR_GE(x_left, types()->i128_zero());\n+  DCHECK_IR_GE(y_left, types()->i128_zero());\n+  ADD_TRACE_128(\"AddLargeNegative : x_left\", x_left);\n+  ADD_TRACE_128(\"AddLargeNegative : y_left\", y_left);\n+\n+  // Get fractional parts, and adjust both to the same scale.\n+  auto x_delta = ir_builder()->CreateSub(higher_scale, x_scale);\n+  auto x_right = GetFraction(x_value, x_scale);\n+  x_right = IncreaseScale(x_right, x_delta);\n+  DCHECK_IR_GE(x_right, types()->i128_zero());\n+  ADD_TRACE_128(\"AddLargeNegative : x_right\", x_right);\n+\n+  auto y_delta = ir_builder()->CreateSub(higher_scale, y_scale);\n+  auto y_right = GetFraction(y_value, y_scale);\n+  y_right = IncreaseScale(y_right, y_delta);\n+  DCHECK_IR_GE(y_right, types()->i128_zero());\n+  ADD_TRACE_128(\"AddLargeNegative : y_right\", y_right);\n+\n+  // Overflow not possible because one is +ve and the other is -ve.\n+  auto left = ir_builder()->CreateAdd(x_left, y_left);\n+  auto right = ir_builder()->CreateAdd(x_right, y_right);\n+\n+  auto left_lt_zero = ir_builder()->CreateICmpSLT(left, types()->i128_zero());\n+  auto left_gt_zero = ir_builder()->CreateICmpSGT(left, types()->i128_zero());\n+  auto right_lt_zero = ir_builder()->CreateICmpSLT(right, types()->i128_zero());\n+  auto right_gt_zero = ir_builder()->CreateICmpSGT(right, types()->i128_zero());\n+  auto left_lt_zero_and_right_gt_zero =\n+      ir_builder()->CreateAnd(left_lt_zero, right_gt_zero);\n+  auto left_gt_zero_and_right_lt_zero =\n+      ir_builder()->CreateAnd(left_gt_zero, right_lt_zero);\n+\n+  // If the whole and fractional parts have different signs, then we need to make the\n+  // fractional part have the same sign as the whole part. If either left or right is\n+  // zero, then nothing needs to be done.\n+  // CPP :\n+  //   if (left < 0 && right > 0) left += 1\n+  //   else if (left > 0 && right < 0) left -= 1\n+  auto then_lambda = [&] { return ir_builder()->CreateAdd(left, types()->i128_one()); };\n+  auto else_lambda = [&] {\n+    return BuildIfElse(left_gt_zero_and_right_lt_zero, types()->i128_type(),\n+                       [&] { return ir_builder()->CreateSub(left, types()->i128_one()); },\n+                       [&] { return left; });\n+  };\n+  left = BuildIfElse(left_lt_zero_and_right_gt_zero, types()->i128_type(), then_lambda,\n+                     else_lambda);\n+\n+  // CPP :\n+  //   if (left < 0 && right > 0) right -= GetScaleMultiplier(higher_scale)\n+  //   else if (left > 0 && right < 0) right += GetScaleMultiplier(higher_scale)\n+  auto then_lambda2 = [&] {\n+    return ir_builder()->CreateSub(right, GetScaleMultiplier(higher_scale));\n+  };\n+  auto else_lambda2 = [&] {\n+    return BuildIfElse(\n+        left_gt_zero_and_right_lt_zero, types()->i128_type(),\n+        [&] { return ir_builder()->CreateAdd(right, GetScaleMultiplier(higher_scale)); },\n+        [&] { return right; });\n+  };\n+  right = BuildIfElse(left_lt_zero_and_right_gt_zero, types()->i128_type(), then_lambda2,\n+                      else_lambda2);\n+\n+  // reduce right to the scale specified in output\n+  auto reduce_scale_by = ir_builder()->CreateSub(higher_scale, out_scale);\n+  right = ReduceScale(right, reduce_scale_by);\n+  ADD_TRACE_128(\"AddLargeNegative : right\", right);\n+\n+  // CPP: left * 10^out_scale + right\n+  auto out_value = ir_builder()->CreateMul(left, GetScaleMultiplier(out_scale));\n+  out_value = ir_builder()->CreateAdd(out_value, right);\n+  return out_value;\n+}\n+\n+llvm::Value* DecimalIR::ExtractMemberFromPtr(llvm::Value* ptr,\n+                                             LLVMTypes::DecimalMember member) {\n+  auto member_ptr =\n+      ir_builder()->CreateGEP(types()->decimal128_struct_type(), ptr,\n+                              {types()->i32_constant(0), types()->i32_constant(member)});\n+  return ir_builder()->CreateLoad(member_ptr, \"member\");\n+}\n+\n+llvm::Value* DecimalIR::AddLarge(llvm::Value* x_value, llvm::Value* x_scale,\n+                                 llvm::Value* y_value, llvm::Value* y_scale,\n+                                 llvm::Value* out_scale) {\n+  // CPP :\n+  // if (x_value >= 0 && y_value >= 0)\n+  //   return AddLargePositive(x_value, x_scale, y_value, y_scale, out_scale)\n+  // else if (x_value <= 0 && y_value <= 0)\n+  //   return -AddLargePositive(-x_value, x_scale, -y_value, y_scale, out_scale)\n+  // else\n+  //   return AddLargeNegative(x_value, x_scale, y_value, y_scale, out_scale);\n+  //\n+  auto x_ge_zero = ir_builder()->CreateICmpSGE(x_value, types()->i128_zero());\n+  auto x_le_zero = ir_builder()->CreateICmpSLE(x_value, types()->i128_zero());\n+  auto y_ge_zero = ir_builder()->CreateICmpSGE(y_value, types()->i128_zero());\n+  auto y_le_zero = ir_builder()->CreateICmpSLE(y_value, types()->i128_zero());\n+  auto x_ge_zero_and_y_ge_zero = ir_builder()->CreateAnd(x_ge_zero, y_ge_zero);\n+  auto x_le_zero_and_y_le_zero = ir_builder()->CreateAnd(x_le_zero, y_le_zero);\n+\n+  auto then_lambda = [&] {\n+    return AddLargePositive(x_value, x_scale, y_value, y_scale, out_scale);\n+  };\n+  auto else_lambda = [&] {\n+    auto then_lambda_inner = [&] {\n+      // CPP: -AddLargePositive(-x_value, x_scale, -y_value, y_scale, out_scale)\n+      auto x_neg = ir_builder()->CreateNeg(x_value);\n+      auto y_neg = ir_builder()->CreateNeg(y_value);\n+      auto res = AddLargePositive(x_neg, x_scale, y_neg, y_scale, out_scale);\n+      return ir_builder()->CreateNeg(res);\n+    };\n+    return BuildIfElse(\n+        x_le_zero_and_y_le_zero, types()->i128_type(), then_lambda_inner,\n+        [&] { return AddLargeNegative(x_value, x_scale, y_value, y_scale, out_scale); });\n+  };\n+  return BuildIfElse(x_ge_zero_and_y_ge_zero, types()->i128_type(), then_lambda,\n+                     else_lambda);\n+}\n+\n+/// The output scale/precision cannot be arbitary values. The algo here depends on them\n+/// to be the same as computed in DecimalTypeUtil.\n+/// TODO: enforce this.\n+Status DecimalIR::BuildAdd() {\n+  // Create fn prototype :\n+  //   void add_decimal128_decimal128(decimal128 *in1, decimal128 *in2, decimal128 *out)\n+  std::vector<llvm::Type*> arguments;\n+  arguments.push_back(types()->decimal128_ptr_type());\n+  arguments.push_back(types()->decimal128_ptr_type());\n+  arguments.push_back(types()->decimal128_ptr_type());\n+  llvm::FunctionType* prototype =\n+      llvm::FunctionType::get(types()->void_type(), arguments, false /*isVarArg*/);\n+\n+  // Create fn\n+  std::string function_name = \"add_decimal128_decimal128\";\n+  function_ = llvm::Function::Create(prototype, llvm::GlobalValue::ExternalLinkage,\n+                                     function_name, module());\n+  ARROW_RETURN_FAILURE_IF_FALSE((function_ != nullptr),\n+                                Status::CodeGenError(\"Error creating function.\"));\n+  // Name the arguments\n+  llvm::Function::arg_iterator args = function_->arg_begin();\n+  llvm::Value* arg_x = &*args;\n+  arg_x->setName(\"x\");\n+  ++args;\n+  llvm::Value* arg_y = &*args;\n+  arg_y->setName(\"y\");\n+  ++args;\n+  llvm::Value* arg_out = &*args;\n+  arg_out->setName(\"out\");\n+  ++args;\n+\n+  llvm::BasicBlock* entry = llvm::BasicBlock::Create(*context(), \"entry\", function_);\n+  llvm::BasicBlock* exit = llvm::BasicBlock::Create(*context(), \"exit\", function_);\n+\n+  ir_builder()->SetInsertPoint(entry);\n+\n+  // extract members\n+  auto x_value = ExtractMemberFromPtr(arg_x, LLVMTypes::kDecimalValueIdx);\n+  auto x_scale = ExtractMemberFromPtr(arg_x, LLVMTypes::kDecimalScaleIdx);\n+  auto y_value = ExtractMemberFromPtr(arg_y, LLVMTypes::kDecimalValueIdx);\n+  auto y_scale = ExtractMemberFromPtr(arg_y, LLVMTypes::kDecimalScaleIdx);\n+  auto out_scale = ExtractMemberFromPtr(arg_out, LLVMTypes::kDecimalScaleIdx);\n+  auto out_precision = ExtractMemberFromPtr(arg_out, LLVMTypes::kDecimalPrecisionIdx);\n+\n+  llvm::Value* lt_max_precision = ir_builder()->CreateICmpSLT(\n+      out_precision, types()->i32_constant(DecimalTypeUtil::kMaxPrecision));\n+  auto then_lambda = [&] {\n+    // fast-path add\n+    return AddFastPath(x_value, x_scale, y_value, y_scale);\n+  };\n+  auto else_lambda = [&] {\n+    // slower version : add whole/fraction parts separately\n \n Review comment:\n   I don't understand this: when is the slow path needed? When you have full precision?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:13.029+0000",
                    "updated": "2018-11-12T09:54:13.029+0000",
                    "started": "2018-11-12T09:54:13.028+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164864",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232583510\n \n \n\n ##########\n File path: cpp/src/gandiva/arrow.h\n ##########\n @@ -48,6 +51,14 @@ using ArrayDataVector = std::vector<ArrayDataPtr>;\n using Status = arrow::Status;\n using StatusCode = arrow::StatusCode;\n \n+static inline bool is_decimal_128(DataTypePtr type) {\n+  if (type->id() == arrow::Type::DECIMAL) {\n+    auto decimal_type = dynamic_cast<arrow::DecimalType*>(type.get());\n \n Review comment:\n   You can use `arrow::internal::checked_cast` (see `util/checked_cast.h`).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:13.035+0000",
                    "updated": "2018-11-12T09:54:13.035+0000",
                    "started": "2018-11-12T09:54:13.034+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164865",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232582443\n \n \n\n ##########\n File path: cpp/src/gandiva/function_ir_builder.cc\n ##########\n @@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_ir_builder.h\"\n+\n+namespace gandiva {\n+\n+llvm::Value* FunctionIRBuilder::BuildIfElse(llvm::Value* condition,\n+                                            llvm::Type* return_type,\n+                                            std::function<llvm::Value*()> then_func,\n+                                            std::function<llvm::Value*()> else_func) {\n+  llvm::IRBuilder<>* builder = ir_builder();\n+\n+  // Create blocks for the then, else and merge cases.\n+  llvm::BasicBlock* then_bb = llvm::BasicBlock::Create(*context(), \"then\", function_);\n+  llvm::BasicBlock* else_bb = llvm::BasicBlock::Create(*context(), \"else\", function_);\n+  llvm::BasicBlock* merge_bb = llvm::BasicBlock::Create(*context(), \"merge\", function_);\n+\n+  builder->CreateCondBr(condition, then_bb, else_bb);\n+\n+  // Emit the then block.\n+  builder->SetInsertPoint(then_bb);\n+  auto then_value = then_func();\n+  builder->CreateBr(merge_bb);\n+\n+  // refresh then_bb for phi (could have changed due to code generation of then_vv).\n+  then_bb = builder->GetInsertBlock();\n+\n+  // Emit the else block.\n+  builder->SetInsertPoint(else_bb);\n+  auto else_value = else_func();\n+  builder->CreateBr(merge_bb);\n+\n+  // refresh else_bb for phi (could have changed due to code generation of else_vv).\n \n Review comment:\n   \"else_value\"\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:13.068+0000",
                    "updated": "2018-11-12T09:54:13.068+0000",
                    "started": "2018-11-12T09:54:13.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164866",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232582790\n \n \n\n ##########\n File path: cpp/src/gandiva/function_ir_builder.cc\n ##########\n @@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"gandiva/function_ir_builder.h\"\n+\n+namespace gandiva {\n+\n+llvm::Value* FunctionIRBuilder::BuildIfElse(llvm::Value* condition,\n \n Review comment:\n   Isn't this function just reimplementing the `select` instruction? https://llvm.org/docs/LangRef.html#select-instruction\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T09:54:13.088+0000",
                    "updated": "2018-11-12T09:54:13.088+0000",
                    "started": "2018-11-12T09:54:13.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164867",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#issuecomment-437823718\n \n \n   > I'm skeptical about the semantics here. If adding two decimals you're increasing the scale and precision. But that's as if adding two `int32` gave a `int33`. The usual idiom with decimals seems to keep a fixed precision accross all computations (see e.g. Python's [decimal](https://docs.python.org/3/library/decimal.html) library).\r\n   \r\n   This is not true for SQL implementations, including Impala.\r\n   \r\n   https://docs.microsoft.com/en-us/sql/t-sql/data-types/precision-scale-and-length-transact-sql?view=sql-server-2017\r\n   \r\n   https://docs.oracle.com/javadb/10.6.2.1/ref/rrefsqlj36146.html#rrefsqlj36146\r\n   \r\n   Generally, for addition, the scale remains the same, but precision increases by 1 (to accommodate the extra digit).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T10:05:51.956+0000",
                    "updated": "2018-11-12T10:05:51.956+0000",
                    "started": "2018-11-12T10:05:51.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164874",
                    "issueId": "13196168"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/worklog/164878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #2942: ARROW-3701: [Gandiva] add op for decimal 128\nURL: https://github.com/apache/arrow/pull/2942#discussion_r232596489\n \n \n\n ##########\n File path: cpp/src/gandiva/decimal_type_util.h\n ##########\n @@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Adapted from Apache Impala\n+\n+#ifndef GANDIVA_DECIMAL_TYPE_UTIL_H\n+#define GANDIVA_DECIMAL_TYPE_UTIL_H\n+\n+#include <algorithm>\n+#include <memory>\n+\n+#include \"arrow/type.h\"\n+#include \"gandiva/arrow.h\"\n+\n+namespace gandiva {\n+\n+/// @brief Handles conversion of scale/precision for operations on decimal types.\n+class DecimalTypeUtil {\n+ public:\n+  enum Op {\n+    kOpAdd,\n+    kOpSubtract,\n+    kOpMultiply,\n+    kOpDivide,\n+    kOpMod,\n+  };\n+\n+  /// The maximum precision representable by a 4-byte decimal\n+  static constexpr int32_t kMaxDecimal4Precision = 9;\n \n Review comment:\n   will fix.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T10:06:51.985+0000",
                    "updated": "2018-11-12T10:06:51.985+0000",
                    "started": "2018-11-12T10:06:51.984+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164878",
                    "issueId": "13196168"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 100800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6225fb05[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bd913f8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9857005[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4a80e41e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66fba722[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@81252d6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a351e89[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@67d8bfc5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c21d6ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46bfab1b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@447c2413[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@66788dce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 100800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 08 15:32:47 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-08T15:32:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3701/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2018-11-05T06:35:57.000+0000",
        "updated": "2019-01-08T17:26:08.000+0000",
        "timeoriginalestimate": null,
        "description": "To begin with, will add support for 128-bit decimals. There are two parts :\r\n # llvm_generator needs to understand decimal types (value, precision, scale)\r\n # code decimal operations : add/subtract/multiply/divide/mod/..\r\n ** This will be c++ code that can be pre-compiled to emit IR code",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "28h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 100800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva] Add support for decimal operations",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16674787",
                    "id": "16674787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "[~wesmckinn] [~cpcloud]\u00a0[~pitrou]\u00a0[~jacques@dremio.com] [~praveenbingo]\r\n\r\n\u00a0\r\n\r\nI've looked at the re-using the code in arrow/util/decimal.h for implementing decimal operations in gandiva. However, it has the following issues :\r\n # This class is built on a pair of int64s - using a int128 will have better perf.\u00a0\r\n # The functions do not make an attempt to avoid overflow.\u00a0\r\n ** sql implementations have rules for each operation that adjust the scale when the result precision exceeds 38. [https://docs.microsoft.com/en-us/sql/t-sql/data-types/precision-scale-and-length-transact-sql?view=sql-server-2017]\r\n # The functions do not track overflow\r\n ** It will be nice if there is a warning/error generated when there is overflow.\r\n\r\n\u00a0\r\n\r\nI plan to use adapt the code from Apache Impala for this instead. Thoughts ?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-05T07:56:15.390+0000",
                    "updated": "2018-11-05T07:57:39.650+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16674831",
                    "id": "16674831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The Impala code is not cross platform. We need to make sure that Gandiva will also work on Windows. It may be that decimals work slower on Windows as a result if we need to maintain multiple implementations of things.  ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-05T08:53:53.998+0000",
                    "updated": "2018-11-05T08:53:53.998+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16674918",
                    "id": "16674918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "ok, I'll make sure that this code works on windows too.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-05T10:20:08.788+0000",
                    "updated": "2018-11-05T10:20:08.788+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16674947",
                    "id": "16674947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> This class is built on a pair of int64s - using a int128 will have better perf. \r\n\r\nCan you explain why it would? CPUs generally don't have 128 bit integer support. So any code written using a \"int128\" - which is non-standard - will get translated into 64-bit instructions at the CPU level.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T10:47:18.566+0000",
                    "updated": "2018-11-05T10:47:18.566+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675008",
                    "id": "16675008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "> CPUs generally don't have 128 bit integer support. So any code written using a \"int128\" -\r\n\r\n> which is non-standard - will get \u00a0translated into 64-bit instructions at the CPU level.\r\n\r\nI'm assuming the compilers are more efficient at this, but I may be wrong.\r\n\r\n[https://github.com/rust-lang/rfcs/blob/master/text/1504-int128.md#alternatives]\r\n\r\nWith my initial testing for adding decimals - \u00a0the perf with adding i128 is very good (almost same as adding three longs). I haven't tried doing the same with the current Decimal128 - let me give it a try.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-05T11:41:41.814+0000",
                    "updated": "2018-11-05T11:42:10.060+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675643",
                    "id": "16675643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "I ran a simple test on my desktop (macbook pro) to iterate over 10M entries of two input arrays, and perform an arithmetic operation (in a single thread). Compared the perf of arrow/util/Decimal128 with another implementation that does the same operations but with __int128 (instead of two int64).\r\n\r\nThe results were (in ms) :\r\n||Operation||Time with 2 64-bit Integers||Time with int128||\r\n|Add|31|28|\r\n|Subtract|30|27|\r\n|Multiply|63|28|\r\n|Divide|409|170|\r\n\r\nSo, add/subtract are equally efficient. but, multiply and divide perform much better with gcc's __int128.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-05T19:23:38.439+0000",
                    "updated": "2018-11-05T19:23:38.439+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675665",
                    "id": "16675665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "That sounds like a nice improvement indeed. However, we'll need to keep a standards-compliant fallback path with two int64 for compilers which don't implement a 128-bit integer.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T19:32:42.435+0000",
                    "updated": "2018-11-05T19:32:42.435+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675684",
                    "id": "16675684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Also note that Boost has a 128-bit integer type, though I don't know how fast it is:\r\nhttps://www.boost.org/doc/libs/1_68_0/libs/multiprecision/doc/html/boost_multiprecision/ref/cpp_int_ref.html",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T19:42:21.766+0000",
                    "updated": "2018-11-05T19:42:21.766+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675728",
                    "id": "16675728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "{quote}However, we'll need to keep a standards-compliant fallback path with two int64 for compilers which don't implement a 128-bit integer.\r\n{quote}\r\nI'm\u00a0confused by this comment. Aren't these functions going to be compiled into LLVM IR at build time such that the target platform needs to be supported by LLVM (not the compiling platform). In that case,\u00a0wouldn't we be able to stop worrying\u00a0about compilers on different platforms for these operations?\u00a0We could\u00a0just generate the IR on one\u00a0platform, right? (Assuming that we can use pure IR--which I believe is the most optimal pattern).\r\n\r\nFrom an IR perspective, we\u00a0probably\u00a0want to map down to LLVM's int128 operations since LLVM has that support within its IR and it allows future optimizations to be clean (and LLVM to target/compile as appropriate), right?\r\n\r\nIt seems like we should\u00a0have a very clear delineation in Gandiva between code that is compiled to IR versus code that is compiled for execution (I think Impala uses -ir.cc to identify the former).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-11-05T20:32:44.447+0000",
                    "updated": "2018-11-05T20:32:44.447+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675736",
                    "id": "16675736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "If the generated IR is indeed cross-platform, then having IR-only code that shadows other portable (no-LLVM) code seems like a good path forward. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-05T20:40:11.617+0000",
                    "updated": "2018-11-05T20:40:11.617+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675746",
                    "id": "16675746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "LLVM IR is generally not cross-platform, as it will encode platform specificities such as type widths, ABI, etc.\r\n (see LLVM FAQ at [https://llvm.org/docs/FAQ.html#can-i-compile-c-or-c-code-to-platform-independent-llvm-bitcode])\r\n\r\nPerhaps by being extra-careful it's possible to have IR generated for one platform compile and interface correctly on another platform, but it sounds a bit fragile.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T20:53:56.362+0000",
                    "updated": "2018-11-05T20:53:56.362+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675753",
                    "id": "16675753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> From an IR perspective, we probably want to map down to LLVM's int128 operations since LLVM has that support within its IR\r\n\r\nIt's not guaranteed to implement it on all backends, though. Technically, you can define ints of any size in LLVM IR (including \"int73\" or \"int31415\" if you want), but only the most common ones (8, 16, 32, 64) will be generally available. So we would have to check whether backend support for int128 is available on desired platforms.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T20:58:05.459+0000",
                    "updated": "2018-11-05T20:58:05.459+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16675804",
                    "id": "16675804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Thanks for the explanations/pointers Antoine.\r\n\r\nThis suggest to me that we need to look more closely at when we use C++ as a basis for IR. In cases like decimal operations it seems like it might be better to write operations directly in LLVM ir since it seems like most of the operations are primitive instead of using\u00a0front-end translation. Thoughts?\r\n{quote}only the most common ones (8, 16, 32, 64) will be generally available\r\n{quote}\r\nIs this documented somewhere?\r\n\r\nWe may have to pick an optimal path for the common linux/modern cpus path and then a lowest common denominator fallback :(\r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jnadeau",
                        "name": "jnadeau",
                        "key": "jnadeau",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Jacques Nadeau",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-11-05T21:59:21.979+0000",
                    "updated": "2018-11-05T21:59:21.979+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16676112",
                    "id": "16676112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "> Also note that Boost has a 128-bit integer type, though I don't know how fast it is:\r\n\r\nRepeated my earlier test with boost int128.\r\n\r\ntypedef boost::multiprecision::number<boost::multiprecision::cpp_int_backend<\r\n    128, 128, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked,\r\n    void>>\r\n    int128_t;\r\n\r\n||Operation||Time with 2 64-bit Integers||Time with boost int128||Time with int128||\r\n|Add|31|57|28|\r\n|Subtract|30|77|27|\r\n|Multiply|63|60|28|\r\n|Divide|409|181|170|\r\n\r\nBoost implementation is better than the util/Decimal128 impl for divide, but worser for add/subtract. In all cases, int128 performs better.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-06T04:16:32.963+0000",
                    "updated": "2018-11-06T04:16:32.963+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16676963",
                    "id": "16676963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "> Is this documented somewhere?\r\n\r\nI don't know. That was the result of testing some years ago. That said, it seems better supported nowadays. If you take the following IR:\r\n{code}\r\ndefine i128 @increment(i128 %a) {\r\n    %result = add i128 %a, 1\r\n    ret i128 %result\r\n}\r\n\r\ndefine i128 @square(i128 %a) {\r\n    %result = mul i128 %a, %a\r\n    ret i128 %result\r\n}\r\n\r\ndefine i128 @divide(i128 %a, i128 %b) {\r\n    %result = udiv i128 %a, %b\r\n    ret i128 %result\r\n}\r\n{code}\r\n\r\nThen compiling it seems to work fine for several targets I tried it with:\r\n{code}\r\nllc-6.0 -O3 -march=x86-64 testfile.ir\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-06T16:24:49.770+0000",
                    "updated": "2018-11-06T16:24:49.770+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16678799",
                    "id": "16678799",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Did you try on Windows? If not I can give it a try",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-07T21:31:55.598+0000",
                    "updated": "2018-11-07T21:31:55.598+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16681704",
                    "id": "16681704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "@wesm - I tried the same cmd on my windows 10 home desktop using llc from llvm-4.1. It worked fine.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-11-09T17:00:18.652+0000",
                    "updated": "2018-11-09T17:00:18.652+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16717008",
                    "id": "16717008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "After running more benchmarks, I found the following for (divide a/b)\r\n * The Decimal128 implementation has pretty consistent performance (between 300 to 400ms, for 10M iterations) whereas the i128 division varies widely (between 100ms to 2000ms) based on the value of b i.e the divisor.\r\n * when a and b are both large random numbers, i128 divide (both clang and llvm) is twice as fast as\u00a0 the Decimal128 implementation.\r\n * when b is a small number (say, 10 or 100), Decimal128 implementation is about 7 times faster. I think the reason is that the Decimal128 implementation has short-cuts for small integers.\r\n\r\nFor decimal operations, there are several cases where we need to do small divisions (to adjust scale). So, I'm using the Decimal128 implementation for divides.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-12-11T12:25:47.868+0000",
                    "updated": "2018-12-11T12:25:47.868+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16720561",
                    "id": "16720561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Will these benchmarks be in the Arrow codebase somewhere? There may be variability in different hardware, CPUs (e.g. AMD vs Intel)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-13T20:13:58.527+0000",
                    "updated": "2018-12-13T20:13:58.527+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16721208",
                    "id": "16721208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "As part of my PR, I'm adding more benchmarks to gandiva/benchmarks.cc - this'll exercise both the arrow-decimal code and gandiva-decimal code.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-12-14T10:24:06.114+0000",
                    "updated": "2018-12-14T10:24:06.114+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13196168/comment/16737236",
                    "id": "16737236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2942\n[https://github.com/apache/arrow/pull/2942]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-08T15:32:47.250+0000",
                    "updated": "2019-01-08T15:32:47.250+0000"
                }
            ],
            "maxResults": 21,
            "total": 21,
            "startAt": 0
        },
        "customfield_12311820": "0|s00420:",
        "customfield_12314139": null
    }
}