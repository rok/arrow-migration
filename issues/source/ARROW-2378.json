{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13149490",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490",
    "key": "ARROW-2378",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=maximilianroos",
            "name": "maximilianroos",
            "key": "maximilianroos",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Maximilian Roos",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2378/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@679c1cd2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@413710c6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@449f23d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7d817352[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cd61ac5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2fe133e6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64f2f43d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@121f1012[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e2320a6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@87b5887[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b5b16a9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@112e0650[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 03 04:54:31 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-03T04:47:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2378/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-02T13:28:38.000+0000",
        "updated": "2018-04-03T04:55:33.000+0000",
        "timeoriginalestimate": null,
        "description": "We should use rustfmt to format the Rust code.\r\n\r\n[https://github.com/rust-lang-nursery/rustfmt]\r\n\r\nIn Travis we should run `rustfmt diff` and fail the build if there are differences.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Use rustfmt to format source code",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423342",
                    "id": "16423342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "PR: https://github.com/apache/arrow/pull/1825",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-04-03T01:17:30.573+0000",
                    "updated": "2018-04-03T01:17:30.573+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423364",
                    "id": "16423364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on issue #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#issuecomment-378101611\n \n \n   Rust tests pass, though looks like some unrelated failures: https://travis-ci.org/apache/arrow/jobs/361443263#L3527\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T01:46:40.103+0000",
                    "updated": "2018-04-03T01:46:40.103+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423375",
                    "id": "16423375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#issuecomment-378103967\n \n \n   I wonder if you need to merge laster from upstream master - I'm hitting the same failures in my PRs\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T02:02:20.750+0000",
                    "updated": "2018-04-03T02:02:20.750+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423392",
                    "id": "16423392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on issue #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#issuecomment-378105797\n \n \n   The branch is up to date on master - I think master is failing; https://travis-ci.org/apache/arrow/builds/361256815\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T02:14:06.753+0000",
                    "updated": "2018-04-03T02:14:06.753+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423466",
                    "id": "16423466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#discussion_r178713155\n \n \n\n ##########\n File path: ci/travis_script_rust.sh\n ##########\n @@ -23,6 +23,9 @@ RUST_DIR=${TRAVIS_BUILD_DIR}/rust\n \n pushd $RUST_DIR\n \n+rustup component add rustfmt-preview\n+cargo fmt --all -- --write-mode=diff\n \n Review comment:\n   Does this fail if there is a diff?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T04:47:17.097+0000",
                    "updated": "2018-04-03T04:47:17.097+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423467",
                    "id": "16423467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1825\n[https://github.com/apache/arrow/pull/1825]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-03T04:47:47.267+0000",
                    "updated": "2018-04-03T04:47:47.267+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423468",
                    "id": "16423468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/travis_script_rust.sh b/ci/travis_script_rust.sh\nindex 89554f6e4..4405d036d 100755\n--- a/ci/travis_script_rust.sh\n+++ b/ci/travis_script_rust.sh\n@@ -23,6 +23,9 @@ RUST_DIR=${TRAVIS_BUILD_DIR}/rust\n \n pushd $RUST_DIR\n \n+rustup component add rustfmt-preview\n+cargo fmt --all -- --write-mode=diff\n+cargo build\n cargo test\n \n popd\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex 15d89c3ab..6f377cba0 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -39,18 +39,17 @@ pub enum ArrayData {\n     UInt32(Buffer<u32>),\n     UInt64(Buffer<u64>),\n     Utf8(List<u8>),\n-    Struct(Vec<Rc<Array>>)\n+    Struct(Vec<Rc<Array>>),\n }\n \n macro_rules! arraydata_from_primitive {\n-    ($DT:ty, $AT:ident) => {\n+    ($DT: ty, $AT: ident) => {\n         impl From<Vec<$DT>> for ArrayData {\n             fn from(v: Vec<$DT>) -> Self {\n                 ArrayData::$AT(Buffer::from(v))\n             }\n         }\n-\n-    }\n+    };\n }\n \n arraydata_from_primitive!(bool, Boolean);\n@@ -69,14 +68,18 @@ pub struct Array {\n     pub len: i32,\n     pub null_count: i32,\n     pub validity_bitmap: Option<Bitmap>,\n-    pub data: ArrayData\n+    pub data: ArrayData,\n }\n \n impl Array {\n-\n     /// Create a new array where there are no null values\n     pub fn new(len: usize, data: ArrayData) -> Self {\n-        Array { len: len as i32, data, validity_bitmap: None, null_count: 0 }\n+        Array {\n+            len: len as i32,\n+            data,\n+            validity_bitmap: None,\n+            null_count: 0,\n+        }\n     }\n \n     pub fn data(&self) -> &ArrayData {\n@@ -86,7 +89,6 @@ impl Array {\n     pub fn len(&self) -> usize {\n         self.len as usize\n     }\n-\n }\n \n /// type-safe array operations\n@@ -95,54 +97,54 @@ trait ArrayOps<T> {\n     /// will pattern match the type of the array on every invocation. We should add\n     /// other efficient iterator and map methods so we can perform columnar operations\n     /// instead.\n-    fn get(&self, i: usize) -> Result<T,Error>;\n+    fn get(&self, i: usize) -> Result<T, Error>;\n \n     /// Compare two same-typed arrays using a boolean closure e.g. eq, gt, lt, and so on\n-    fn compare(&self, other: &Array, f: &Fn(T,T) -> bool) -> Result<Vec<bool>, Error>;\n+    fn compare(&self, other: &Array, f: &Fn(T, T) -> bool) -> Result<Vec<bool>, Error>;\n \n     /// Perform a computation on two same-typed arrays and produce a result of the same type e.g. c = a + b\n-    fn compute(&self, other: &Array, f: &Fn(T,T) -> T) -> Result<Vec<T>, Error>;\n+    fn compute(&self, other: &Array, f: &Fn(T, T) -> T) -> Result<Vec<T>, Error>;\n }\n \n macro_rules! array_ops {\n-    ($DT:ty, $AT:ident) => {\n+    ($DT: ty, $AT: ident) => {\n         impl ArrayOps<$DT> for Array {\n-            fn get(&self, i: usize) -> Result<$DT,Error> {\n+            fn get(&self, i: usize) -> Result<$DT, Error> {\n                 match self.data() {\n-                    &ArrayData::$AT(ref buf) => Ok(unsafe {*buf.data().offset(i as isize)}),\n-                    _ => Err(Error::from(\"Request for $DT but array is not $DT\"))\n+                    &ArrayData::$AT(ref buf) => Ok(unsafe { *buf.data().offset(i as isize) }),\n+                    _ => Err(Error::from(\"Request for $DT but array is not $DT\")),\n                 }\n             }\n-            fn compare(&self, other: &Array, f: &Fn($DT,$DT) -> bool) -> Result<Vec<bool>, Error> {\n+            fn compare(&self, other: &Array, f: &Fn($DT, $DT) -> bool) -> Result<Vec<bool>, Error> {\n                 match (&self.data, &other.data) {\n                     (&ArrayData::$AT(ref l), &ArrayData::$AT(ref r)) => {\n                         let mut b: Vec<bool> = Vec::with_capacity(self.len as usize);\n                         for i in 0..self.len as isize {\n-                            let lv : $DT = unsafe { *l.data().offset(i) };\n-                            let rv : $DT = unsafe { *r.data().offset(i) };\n-                            b.push(f(lv,rv));\n+                            let lv: $DT = unsafe { *l.data().offset(i) };\n+                            let rv: $DT = unsafe { *r.data().offset(i) };\n+                            b.push(f(lv, rv));\n                         }\n                         Ok(b)\n-                    },\n-                    _ => Err(Error::from(\"Cannot compare arrays of this type\"))\n+                    }\n+                    _ => Err(Error::from(\"Cannot compare arrays of this type\")),\n                 }\n             }\n-            fn compute(&self, other: &Array, f: &Fn($DT,$DT) -> $DT) -> Result<Vec<$DT>, Error> {\n+            fn compute(&self, other: &Array, f: &Fn($DT, $DT) -> $DT) -> Result<Vec<$DT>, Error> {\n                 match (&self.data, &other.data) {\n                     (&ArrayData::$AT(ref l), &ArrayData::$AT(ref r)) => {\n                         let mut b: Vec<$DT> = Vec::with_capacity(self.len as usize);\n                         for i in 0..self.len as isize {\n-                            let lv : $DT = unsafe { *l.data().offset(i) };\n-                            let rv : $DT = unsafe { *r.data().offset(i) };\n-                            b.push(f(lv,rv));\n+                            let lv: $DT = unsafe { *l.data().offset(i) };\n+                            let rv: $DT = unsafe { *r.data().offset(i) };\n+                            b.push(f(lv, rv));\n                         }\n                         Ok(b)\n-                    },\n-                    _ => Err(Error::from(\"Cannot compare arrays of this type\"))\n+                    }\n+                    _ => Err(Error::from(\"Cannot compare arrays of this type\")),\n                 }\n             }\n         }\n-    }\n+    };\n }\n \n array_ops!(bool, Boolean);\n@@ -158,14 +160,18 @@ array_ops!(i32, Int32);\n array_ops!(i64, Int64);\n \n macro_rules! array_from_primitive {\n-    ($DT:ty) => {\n+    ($DT: ty) => {\n         impl From<Vec<$DT>> for Array {\n             fn from(v: Vec<$DT>) -> Self {\n-                Array { len: v.len() as i32, null_count: 0, validity_bitmap: None, data: ArrayData::from(v) }\n+                Array {\n+                    len: v.len() as i32,\n+                    null_count: 0,\n+                    validity_bitmap: None,\n+                    data: ArrayData::from(v),\n+                }\n             }\n         }\n-    }\n-\n+    };\n }\n \n array_from_primitive!(bool);\n@@ -180,23 +186,29 @@ array_from_primitive!(i32);\n array_from_primitive!(i64);\n \n macro_rules! array_from_optional_primitive {\n-    ($DT:ty, $DEFAULT:expr) => {\n+    ($DT: ty, $DEFAULT: expr) => {\n         impl From<Vec<Option<$DT>>> for Array {\n             fn from(v: Vec<Option<$DT>>) -> Self {\n                 let mut null_count = 0;\n                 let mut validity_bitmap = Bitmap::new(v.len());\n-                for i in 0 .. v.len() {\n+                for i in 0..v.len() {\n                     if v[i].is_none() {\n-                        null_count+=1;\n+                        null_count += 1;\n                         validity_bitmap.clear(i);\n                     }\n                 }\n-                let values = v.iter().map(|x| x.unwrap_or($DEFAULT)).collect::<Vec<$DT>>();\n-                Array { len: values.len() as i32, null_count, validity_bitmap: Some(validity_bitmap), data: ArrayData::from(values) }\n+                let values = v.iter()\n+                    .map(|x| x.unwrap_or($DEFAULT))\n+                    .collect::<Vec<$DT>>();\n+                Array {\n+                    len: values.len() as i32,\n+                    null_count,\n+                    validity_bitmap: Some(validity_bitmap),\n+                    data: ArrayData::from(values),\n+                }\n             }\n         }\n-    }\n-\n+    };\n }\n \n array_from_optional_primitive!(bool, false);\n@@ -223,7 +235,7 @@ impl From<Vec<String>> for Array {\n             len: v.len() as i32,\n             null_count: 0,\n             validity_bitmap: None,\n-            data: ArrayData::Utf8(List::from(v))\n+            data: ArrayData::Utf8(List::from(v)),\n         }\n     }\n }\n@@ -234,7 +246,7 @@ impl From<Vec<Rc<Array>>> for Array {\n             len: v.len() as i32,\n             null_count: 0,\n             validity_bitmap: None,\n-            data: ArrayData::Struct(v.iter().map(|a| a.clone()).collect())\n+            data: ArrayData::Struct(v.iter().map(|a| a.clone()).collect()),\n         }\n     }\n }\n@@ -249,15 +261,18 @@ mod tests {\n         let a = Array::from(vec![\"this\", \"is\", \"a\", \"test\"]);\n         assert_eq!(4, a.len());\n         match a.data() {\n-            &ArrayData::Utf8(List{ ref data, ref offsets }) => {\n+            &ArrayData::Utf8(List {\n+                ref data,\n+                ref offsets,\n+            }) => {\n                 assert_eq!(11, data.len());\n                 assert_eq!(0, *offsets.get(0));\n                 assert_eq!(4, *offsets.get(1));\n                 assert_eq!(6, *offsets.get(2));\n                 assert_eq!(7, *offsets.get(3));\n                 assert_eq!(11, *offsets.get(4));\n-            },\n-            _ => panic!()\n+            }\n+            _ => panic!(),\n         }\n     }\n \n@@ -271,8 +286,8 @@ mod tests {\n                 assert_eq!(\"is\", str::from_utf8(d.slice(1)).unwrap());\n                 assert_eq!(\"a\", str::from_utf8(d.slice(2)).unwrap());\n                 assert_eq!(\"test\", str::from_utf8(d.slice(3)).unwrap());\n-            },\n-            _ => panic!()\n+            }\n+            _ => panic!(),\n         }\n     }\n \n@@ -290,7 +305,6 @@ mod tests {\n \n     #[test]\n     fn test_from_i32() {\n-\n         let a = Array::from(vec![15, 14, 13, 12, 11]);\n         assert_eq!(5, a.len());\n \n@@ -316,58 +330,53 @@ mod tests {\n \n     #[test]\n     fn test_struct() {\n-\n         let _schema = Schema::new(vec![\n             Field::new(\"a\", DataType::Int32, false),\n             Field::new(\"b\", DataType::Float32, false),\n         ]);\n \n-        let a = Rc::new(Array::from(vec![1,2,3,4,5]));\n+        let a = Rc::new(Array::from(vec![1, 2, 3, 4, 5]));\n         let b = Rc::new(Array::from(vec![1.1, 2.2, 3.3, 4.4, 5.5]));\n-        let _ = Rc::new(Array::from(vec![a,b]));\n+        let _ = Rc::new(Array::from(vec![a, b]));\n     }\n \n     #[test]\n     fn test_array_eq() {\n-        let a = Array::from(vec![1,2,3,4,5]);\n-        let b = Array::from(vec![5,4,3,2,1]);\n-        let c = a.compare(&b, &|a: i32,b: i32| a == b).unwrap();\n-        assert_eq!(c, vec![false,false,true,false,false]);\n+        let a = Array::from(vec![1, 2, 3, 4, 5]);\n+        let b = Array::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.compare(&b, &|a: i32, b: i32| a == b).unwrap();\n+        assert_eq!(c, vec![false, false, true, false, false]);\n     }\n \n     #[test]\n     fn test_array_lt() {\n-        let a = Array::from(vec![1,2,3,4,5]);\n-        let b = Array::from(vec![5,4,3,2,1]);\n-        let c = a.compare(&b, &|a: i32,b: i32| a < b).unwrap();\n-        assert_eq!(c, vec![true,true,false,false,false]);\n+        let a = Array::from(vec![1, 2, 3, 4, 5]);\n+        let b = Array::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.compare(&b, &|a: i32, b: i32| a < b).unwrap();\n+        assert_eq!(c, vec![true, true, false, false, false]);\n     }\n \n     #[test]\n     fn test_array_gt() {\n-        let a = Array::from(vec![1,2,3,4,5]);\n-        let b = Array::from(vec![5,4,3,2,1]);\n-        let c = a.compare(&b, &|a: i32,b: i32| a > b).unwrap();\n-        assert_eq!(c, vec![false,false,false,true,true]);\n+        let a = Array::from(vec![1, 2, 3, 4, 5]);\n+        let b = Array::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.compare(&b, &|a: i32, b: i32| a > b).unwrap();\n+        assert_eq!(c, vec![false, false, false, true, true]);\n     }\n \n     #[test]\n     fn test_array_add() {\n-        let a = Array::from(vec![1,2,3,4,5]);\n-        let b = Array::from(vec![5,4,3,2,1]);\n-        let c = a.compute(&b, &|a: i32,b: i32| a + b).unwrap();\n-        assert_eq!(c, vec![6,6,6,6,6]);\n+        let a = Array::from(vec![1, 2, 3, 4, 5]);\n+        let b = Array::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.compute(&b, &|a: i32, b: i32| a + b).unwrap();\n+        assert_eq!(c, vec![6, 6, 6, 6, 6]);\n     }\n \n     #[test]\n     fn test_array_multiply() {\n-        let a = Array::from(vec![1,2,3,4,5]);\n-        let b = Array::from(vec![5,4,3,2,1]);\n-        let c = a.compute(&b, &|a: i32,b: i32| a * b).unwrap();\n-        assert_eq!(c, vec![5,8,9,8,5]);\n+        let a = Array::from(vec![1, 2, 3, 4, 5]);\n+        let b = Array::from(vec![5, 4, 3, 2, 1]);\n+        let c = a.compute(&b, &|a: i32, b: i32| a * b).unwrap();\n+        assert_eq!(c, vec![5, 8, 9, 8, 5]);\n     }\n }\n-\n-\n-\n-\ndiff --git a/rust/src/bitmap.rs b/rust/src/bitmap.rs\nindex 94c513a98..59c651397 100644\n--- a/rust/src/bitmap.rs\n+++ b/rust/src/bitmap.rs\n@@ -18,20 +18,25 @@\n use super::buffer::Buffer;\n \n pub struct Bitmap {\n-    bits: Buffer<u8>\n+    bits: Buffer<u8>,\n }\n \n impl Bitmap {\n-\n     pub fn new(num_bits: usize) -> Self {\n-        let num_bytes = num_bits/8 + if num_bits%8 > 0 { 1 } else { 0 };\n+        let num_bytes = num_bits / 8 + if num_bits % 8 > 0 { 1 } else { 0 };\n         let r = num_bytes % 64;\n-        let len = if r==0 { num_bytes } else { num_bytes + 64-r };\n+        let len = if r == 0 {\n+            num_bytes\n+        } else {\n+            num_bytes + 64 - r\n+        };\n         let mut v = Vec::with_capacity(len);\n-        for _ in 0 .. len {\n+        for _ in 0..len {\n             v.push(255); // 1 is not null\n         }\n-        Bitmap { bits: Buffer::from(v) }\n+        Bitmap {\n+            bits: Buffer::from(v),\n+        }\n     }\n \n     pub fn len(&self) -> i32 {\n@@ -45,15 +50,13 @@ impl Bitmap {\n \n     pub fn set(&mut self, i: usize) {\n         let byte_offset = i / 8;\n-        let v : u8 = {\n-            self.bits.get(byte_offset) | (1_u8 << ((i % 8) as u8))\n-        };\n+        let v: u8 = { self.bits.get(byte_offset) | (1_u8 << ((i % 8) as u8)) };\n         self.bits.set(byte_offset, v);\n     }\n \n     pub fn clear(&mut self, i: usize) {\n         let byte_offset = i / 8;\n-        let v : u8 = self.bits.get(byte_offset) ^ (1_u8 << ((i % 8) as u8));\n+        let v: u8 = self.bits.get(byte_offset) ^ (1_u8 << ((i % 8) as u8));\n         self.bits.set(byte_offset, v);\n     }\n }\n@@ -64,14 +67,14 @@ mod tests {\n \n     #[test]\n     fn test_bitmap_length() {\n-        assert_eq!(64, Bitmap::new(63*8).len());\n-        assert_eq!(64, Bitmap::new(64*8).len());\n-        assert_eq!(128, Bitmap::new(65*8).len());\n+        assert_eq!(64, Bitmap::new(63 * 8).len());\n+        assert_eq!(64, Bitmap::new(64 * 8).len());\n+        assert_eq!(128, Bitmap::new(65 * 8).len());\n     }\n \n     #[test]\n     fn test_set_clear_bit() {\n-        let mut b = Bitmap::new(64*8);\n+        let mut b = Bitmap::new(64 * 8);\n         assert_eq!(true, b.is_set(12));\n         b.clear(12);\n         assert_eq!(false, b.is_set(12));\n@@ -80,6 +83,3 @@ mod tests {\n     }\n \n }\n-\n-\n-\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex f70e0e2cd..e0701e9d1 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -23,11 +23,10 @@ use super::memory::*;\n \n pub struct Buffer<T> {\n     data: *const T,\n-    len: i32\n+    len: i32,\n }\n \n impl<T> Buffer<T> {\n-\n     pub fn new(data: *const T, len: i32) -> Self {\n         Buffer { data, len }\n     }\n@@ -41,7 +40,7 @@ impl<T> Buffer<T> {\n     }\n \n     pub fn slice(&self, start: usize, end: usize) -> &[T] {\n-        unsafe { slice::from_raw_parts(self.data.offset(start as isize), (end-start) as usize) }\n+        unsafe { slice::from_raw_parts(self.data.offset(start as isize), (end - start) as usize) }\n     }\n \n     pub fn get(&self, i: usize) -> &T {\n@@ -57,7 +56,7 @@ impl<T> Buffer<T> {\n }\n \n macro_rules! array_from_primitive {\n-    ($DT:ty) => {\n+    ($DT: ty) => {\n         impl From<Vec<$DT>> for Buffer<$DT> {\n             fn from(v: Vec<$DT>) -> Self {\n                 // allocate aligned memory buffer\n@@ -68,13 +67,17 @@ macro_rules! array_from_primitive {\n                     len: len as i32,\n                     data: unsafe {\n                         let dst = mem::transmute::<*const u8, *mut libc::c_void>(buffer);\n-                        libc::memcpy(dst, mem::transmute::<*const $DT, *const libc::c_void>(v.as_ptr()), len * sz);\n+                        libc::memcpy(\n+                            dst,\n+                            mem::transmute::<*const $DT, *const libc::c_void>(v.as_ptr()),\n+                            len * sz,\n+                        );\n                         mem::transmute::<*mut libc::c_void, *const $DT>(dst)\n-                    }\n+                    },\n                 }\n             }\n         }\n-    }\n+    };\n }\n \n array_from_primitive!(bool);\n@@ -89,7 +92,6 @@ array_from_primitive!(i16);\n array_from_primitive!(i32);\n array_from_primitive!(i64);\n \n-\n #[cfg(test)]\n mod tests {\n     use super::*;\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nindex cf104f372..a812f3222 100644\n--- a/rust/src/datatypes.rs\n+++ b/rust/src/datatypes.rs\n@@ -15,7 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#[derive(Debug,Clone)]\n+#[derive(Debug, Clone)]\n pub enum DataType {\n     Boolean,\n     Int8,\n@@ -29,23 +29,22 @@ pub enum DataType {\n     Float32,\n     Float64,\n     Utf8,\n-    Struct(Vec<Field>)\n+    Struct(Vec<Field>),\n }\n \n-#[derive(Debug,Clone)]\n+#[derive(Debug, Clone)]\n pub struct Field {\n     pub name: String,\n     pub data_type: DataType,\n-    pub nullable: bool\n+    pub nullable: bool,\n }\n \n impl Field {\n-\n     pub fn new(name: &str, data_type: DataType, nullable: bool) -> Self {\n         Field {\n             name: name.to_string(),\n             data_type: data_type,\n-            nullable: nullable\n+            nullable: nullable,\n         }\n     }\n \n@@ -54,32 +53,33 @@ impl Field {\n     }\n }\n \n-#[derive(Debug,Clone)]\n+#[derive(Debug, Clone)]\n pub struct Schema {\n-    pub columns: Vec<Field>\n+    pub columns: Vec<Field>,\n }\n \n impl Schema {\n-\n     /// create an empty schema\n-    pub fn empty() -> Self { Schema { columns: vec![] } }\n+    pub fn empty() -> Self {\n+        Schema { columns: vec![] }\n+    }\n \n-    pub fn new(columns: Vec<Field>) -> Self { Schema { columns: columns } }\n+    pub fn new(columns: Vec<Field>) -> Self {\n+        Schema { columns: columns }\n+    }\n \n     /// look up a column by name and return a reference to the column along with it's index\n     pub fn column(&self, name: &str) -> Option<(usize, &Field)> {\n-        self.columns.iter()\n+        self.columns\n+            .iter()\n             .enumerate()\n-            .find(|&(_,c)| c.name == name)\n+            .find(|&(_, c)| c.name == name)\n     }\n \n     pub fn to_string(&self) -> String {\n-        let s : Vec<String> = self.columns.iter()\n-            .map(|c| c.to_string())\n-            .collect();\n+        let s: Vec<String> = self.columns.iter().map(|c| c.to_string()).collect();\n         s.join(\",\")\n     }\n-\n }\n \n #[cfg(test)]\n@@ -91,10 +91,14 @@ mod tests {\n         let _person = Schema::new(vec![\n             Field::new(\"first_name\", DataType::Utf8, false),\n             Field::new(\"last_name\", DataType::Utf8, false),\n-            Field::new(\"address\", DataType::Struct(vec![\n-                Field::new(\"street\", DataType::Utf8, false),\n-                Field::new(\"zip\", DataType::UInt16, false),\n-            ]), false),\n+            Field::new(\n+                \"address\",\n+                DataType::Struct(vec![\n+                    Field::new(\"street\", DataType::Utf8, false),\n+                    Field::new(\"zip\", DataType::UInt16, false),\n+                ]),\n+                false,\n+            ),\n         ]);\n     }\n }\ndiff --git a/rust/src/error.rs b/rust/src/error.rs\nindex 837978049..d1fb742ef 100644\n--- a/rust/src/error.rs\n+++ b/rust/src/error.rs\n@@ -17,13 +17,15 @@\n \n use std::convert::*;\n \n-#[derive(Debug,Clone)]\n+#[derive(Debug, Clone)]\n pub struct Error {\n-    msg: String\n+    msg: String,\n }\n \n impl From<&'static str> for Error where {\n     fn from(msg: &'static str) -> Self {\n-        Error { msg: String::from(msg) }\n+        Error {\n+            msg: String::from(msg),\n+        }\n     }\n-}\n\\ No newline at end of file\n+}\ndiff --git a/rust/src/lib.rs b/rust/src/lib.rs\nindex b2caa6190..cd1154d16 100644\n--- a/rust/src/lib.rs\n+++ b/rust/src/lib.rs\n@@ -25,4 +25,3 @@ pub mod datatypes;\n pub mod list;\n pub mod error;\n pub mod memory;\n-\ndiff --git a/rust/src/list.rs b/rust/src/list.rs\nindex a3a4e76fd..aee8c763a 100644\n--- a/rust/src/list.rs\n+++ b/rust/src/list.rs\n@@ -17,31 +17,30 @@\n \n use std::str;\n \n-use bytes::{BytesMut, BufMut};\n+use bytes::{BufMut, BytesMut};\n \n use super::buffer::Buffer;\n \n pub struct List<T> {\n     pub data: Buffer<T>,\n-    pub offsets: Buffer<i32>\n+    pub offsets: Buffer<i32>,\n }\n \n impl<T> List<T> {\n-\n     pub fn len(&self) -> i32 {\n-        self.offsets.len()-1\n+        self.offsets.len() - 1\n     }\n \n     pub fn slice(&self, index: usize) -> &[T] {\n         let start = *self.offsets.get(index) as usize;\n-        let end = *self.offsets.get(index+1) as usize;\n+        let end = *self.offsets.get(index + 1) as usize;\n         &self.data.slice(start, end)\n     }\n }\n \n impl From<Vec<String>> for List<u8> {\n     fn from(v: Vec<String>) -> Self {\n-        let mut offsets : Vec<i32> = Vec::with_capacity(v.len() + 1);\n+        let mut offsets: Vec<i32> = Vec::with_capacity(v.len() + 1);\n         let mut buf = BytesMut::with_capacity(v.len() * 32);\n         offsets.push(0_i32);\n         v.iter().for_each(|s| {\n@@ -51,7 +50,10 @@ impl From<Vec<String>> for List<u8> {\n         let bytes = buf.freeze();\n         let buffer = Buffer::new(bytes.as_ptr(), bytes.len() as i32);\n \n-        List { data: buffer, offsets: Buffer::from(offsets) }\n+        List {\n+            data: buffer,\n+            offsets: Buffer::from(offsets),\n+        }\n     }\n }\n \n@@ -62,8 +64,6 @@ impl From<Vec<&'static str>> for List<u8> {\n     }\n }\n \n-\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -78,4 +78,4 @@ mod tests {\n         assert_eq!(\"test\", str::from_utf8(list.slice(3)).unwrap());\n     }\n \n-}\n\\ No newline at end of file\n+}\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T04:47:47.368+0000",
                    "updated": "2018-04-03T04:47:47.368+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423471",
                    "id": "16423471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on issue #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#issuecomment-378127380\n \n \n   @maxim-lian What is your correct JIRA id on https://issues.apache.org/jira/projects/ARROW/summary so that we can assign the resolved ticket to you?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T04:49:43.455+0000",
                    "updated": "2018-04-03T04:49:43.455+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423475",
                    "id": "16423475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on a change in pull request #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#discussion_r178713746\n \n \n\n ##########\n File path: ci/travis_script_rust.sh\n ##########\n @@ -23,6 +23,9 @@ RUST_DIR=${TRAVIS_BUILD_DIR}/rust\n \n pushd $RUST_DIR\n \n+rustup component add rustfmt-preview\n+cargo fmt --all -- --write-mode=diff\n \n Review comment:\n   Yes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T04:53:44.088+0000",
                    "updated": "2018-04-03T04:53:44.088+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13149490/comment/16423476",
                    "id": "16423476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on issue #1825: ARROW-2378: [Rust] Rustfmt\nURL: https://github.com/apache/arrow/pull/1825#issuecomment-378127983\n \n \n   @xhochy I have an account `maximilianroos` on JIRA\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T04:54:31.168+0000",
                    "updated": "2018-04-03T04:54:31.168+0000"
                }
            ],
            "maxResults": 10,
            "total": 10,
            "startAt": 0
        },
        "customfield_12311820": "0|i3s1r3:",
        "customfield_12314139": null
    }
}