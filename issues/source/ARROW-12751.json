{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13378105",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105",
    "key": "ARROW-12751",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12615466",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12615466",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13377986",
                    "key": "ARROW-12748",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377986",
                    "fields": {
                        "summary": "[C++] Arithmetic kernels for numeric arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12616781",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616781",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13382149",
                    "key": "ARROW-12967",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382149",
                    "fields": {
                        "summary": "[R] Add bindings for pmin() and pmax()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
            "name": "icook",
            "key": "icook",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
            },
            "displayName": "Ian Cook",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 28800,
            "total": 28800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 28800,
            "total": 28800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12751/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 48,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390\n\n\n   This is a bit messy, but implements a variadic scalar maximum/minimum kernel.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-24T22:00:39.985+0000",
                    "updated": "2021-05-24T22:00:39.985+0000",
                    "started": "2021-05-24T22:00:39.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601428",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#issuecomment-847369971\n\n\n   https://issues.apache.org/jira/browse/ARROW-12751\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-24T22:00:56.583+0000",
                    "updated": "2021-05-24T22:00:56.583+0000",
                    "started": "2021-05-24T22:00:56.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601430",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601431",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638312730\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -42,6 +42,11 @@ struct ArithmeticOptions : public FunctionOptions {\n   bool check_overflow;\n };\n \n+struct ARROW_EXPORT MinMaxOptions : public FunctionOptions {\n\nReview comment:\n       Do we want to name this something else?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -250,6 +255,24 @@ Result<Datum> Power(const Datum& left, const Datum& right,\n                     ArithmeticOptions options = ArithmeticOptions(),\n                     ExecContext* ctx = NULLPTR);\n \n+/// \\brief\n\nReview comment:\n       I forgot to fill this in, will fix.\n\n##########\nFile path: cpp/src/arrow/ipc/json_simple.cc\n##########\n@@ -911,6 +912,26 @@ Status DictArrayFromJSON(const std::shared_ptr<DataType>& type,\n       .Value(out);\n }\n \n+Status ScalarFromJSON(const std::shared_ptr<DataType>& type,\n\nReview comment:\n       I'm going to port this into ARROW-12859.\n\n##########\nFile path: cpp/src/arrow/testing/gtest_util.cc\n##########\n@@ -360,6 +360,30 @@ void AssertDatumsEqual(const Datum& expected, const Datum& actual, bool verbose)\n       break;\n   }\n }\n+ARROW_TESTING_EXPORT void AssertDatumsApproxEqual(const Datum& expected,\n\nReview comment:\n       I'm going to port this to ARROW-12859 (and fix the unimplemented case).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,6 +454,45 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class KernelGenerator, typename Op>\n\nReview comment:\n       This is rather a lot of code being generated; it might be nice if I could figure out the right template setup to consolidate the temporal types with their respective equivalent integral type.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-24T22:03:01.984+0000",
                    "updated": "2021-05-24T22:03:01.984+0000",
                    "started": "2021-05-24T22:03:01.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601431",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638316027\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/json_simple.h\n##########\n@@ -30,6 +30,7 @@ namespace arrow {\n \n class Array;\n class DataType;\n+class Scalar;\n\nReview comment:\n       This is the wrong declaration (should be `struct Scalar`).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-24T22:03:55.257+0000",
                    "updated": "2021-05-24T22:03:55.257+0000",
                    "started": "2021-05-24T22:03:55.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601432",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638487418\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernel.h\n##########\n@@ -52,7 +52,7 @@ struct ARROW_EXPORT KernelState {\n /// \\brief Context/state for the execution of a particular kernel.\n class ARROW_EXPORT KernelContext {\n  public:\n-  explicit KernelContext(ExecContext* exec_ctx) : exec_ctx_(exec_ctx) {}\n+  explicit KernelContext(ExecContext* exec_ctx) : exec_ctx_(exec_ctx), state_() {}\n\nReview comment:\n       This change is already in current code. Needs rebase?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T06:22:58.183+0000",
                    "updated": "2021-05-25T06:22:58.183+0000",
                    "started": "2021-05-25T06:22:58.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601539",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638925147\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -42,6 +42,11 @@ struct ArithmeticOptions : public FunctionOptions {\n   bool check_overflow;\n };\n \n+struct ARROW_EXPORT MinMaxOptions : public FunctionOptions {\n\nReview comment:\n       I think it is worth giving this a more general name, because there are other potential uses. Maybe `ElementWiseAggregateOptions`? (since this is aggregation, just across instead of down)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T15:46:56.308+0000",
                    "updated": "2021-05-25T15:46:56.308+0000",
                    "started": "2021-05-25T15:46:56.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601800",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638933803\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -42,6 +42,11 @@ struct ArithmeticOptions : public FunctionOptions {\n   bool check_overflow;\n };\n \n+struct ARROW_EXPORT MinMaxOptions : public FunctionOptions {\n\nReview comment:\n       If using \"Aggregate\" is too confusing, maybe \"Combine\" or \"Merge\" would work too. e.g. `ElementWiseCombineOptions`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T15:56:48.150+0000",
                    "updated": "2021-05-25T15:56:48.150+0000",
                    "started": "2021-05-25T15:56:48.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601806",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638935508\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -42,6 +42,11 @@ struct ArithmeticOptions : public FunctionOptions {\n   bool check_overflow;\n };\n \n+struct ARROW_EXPORT MinMaxOptions : public FunctionOptions {\n\nReview comment:\n       Since we have `ScalarAggregateOptions` I think `ElementWiseAggregateOptions` should be ok. I've updated the PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T15:58:55.118+0000",
                    "updated": "2021-05-25T15:58:55.118+0000",
                    "started": "2021-05-25T15:58:55.118+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601810",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638942900\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,6 +454,45 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class KernelGenerator, typename Op>\n\nReview comment:\n       There's GeneratePhysicalInteger, though that doesn't include floating point. Perhaps you could add GeneratePhysicalNumeric?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T16:04:05.070+0000",
                    "updated": "2021-05-25T16:04:05.070+0000",
                    "started": "2021-05-25T16:04:05.070+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601811",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r638953961\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +601,203 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Arg0Type, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Datum* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->scalar()->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->scalar()->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out->scalar().get());\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const bool all_scalar =\n+        std::all_of(batch.values.begin(), batch.values.end(),\n+                    [](const Datum& d) { return d.descr().shape == ValueDescr::SCALAR; });\n+    if (all_scalar) {\n+      ExecScalar(batch, options, out);\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // Exactly one array (output = input)\n+    if (batch.values.size() == 1) {\n+      *output = *batch[0].array();\n+      return Status::OK();\n+    }\n+\n+    // At least one array, two or more arguments\n+    int64_t length = 0;\n\nReview comment:\n       This should already be present in ExecBatch::length\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -453,6 +518,26 @@ struct ArithmeticFunction : ScalarFunction {\n   }\n };\n \n+struct ArithmeticVarArgsFunction : ScalarFunction {\n+  using ScalarFunction::ScalarFunction;\n+\n+  Result<const Kernel*> DispatchBest(std::vector<ValueDescr>* values) const override {\n+    RETURN_NOT_OK(CheckArity(*values));\n+\n+    using arrow::compute::detail::DispatchExactImpl;\n+    if (auto kernel = DispatchExactImpl(this, *values)) return kernel;\n+\n+    EnsureDictionaryDecoded(values);\n+\n+    if (auto type = CommonNumeric(*values)) {\n+      ReplaceTypes(type, values);\n+    }\n\nReview comment:\n       (Perhaps as a follow-up:)\r\n   ```suggestion\r\n       } else if (auto type = CommonTimestamp(*values)) {\r\n         ReplaceTypes(type, values);\r\n       } else if (auto type = CommonBinary(*values)) {\r\n         ReplaceTypes(type, values);\r\n       }\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +601,203 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Arg0Type, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Datum* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->scalar()->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->scalar()->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out->scalar().get());\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const bool all_scalar =\n+        std::all_of(batch.values.begin(), batch.values.end(),\n+                    [](const Datum& d) { return d.descr().shape == ValueDescr::SCALAR; });\n+    if (all_scalar) {\n+      ExecScalar(batch, options, out);\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // Exactly one array (output = input)\n+    if (batch.values.size() == 1) {\n+      *output = *batch[0].array();\n+      return Status::OK();\n+    }\n+\n+    // At least one array, two or more arguments\n+    int64_t length = 0;\n+    for (const auto& arg : batch.values) {\n+      if (arg.is_array()) {\n+        length = arg.array()->length;\n+        break;\n+      }\n+    }\n+\n+    if (!options.skip_nulls) {\n+      // We can precompute the validity buffer in this case\n+      // If output will be all null, just return\n+      for (const auto& arg : batch.values) {\n+        if (arg.is_scalar() && !arg.scalar()->is_valid) {\n+          ARROW_ASSIGN_OR_RAISE(\n+              auto array, MakeArrayFromScalar(*arg.scalar(), length, ctx->memory_pool()));\n+          *output = *array->data();\n+          return Status::OK();\n+        } else if (arg.is_array() && arg.array()->null_count == length) {\n+          *output = *arg.array();\n+          return Status::OK();\n+        }\n+      }\n+      // AND together the validity buffers of all arrays\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(length));\n+      bool first = true;\n+      for (const auto& arg : batch.values) {\n+        if (!arg.is_array()) continue;\n+        auto arr = arg.array();\n+        if (!arr->buffers[0]) continue;\n+        if (first) {\n+          ::arrow::internal::CopyBitmap(arr->buffers[0]->data(), arr->offset, length,\n+                                        output->buffers[0]->mutable_data(),\n+                                        /*dest_offset=*/0);\n+          first = false;\n+        } else {\n+          ::arrow::internal::BitmapAnd(\n+              output->buffers[0]->data(), /*left_offset=*/0, arr->buffers[0]->data(),\n+              arr->offset, length, /*out_offset=*/0, output->buffers[0]->mutable_data());\n+        }\n+      }\n+    }\n+\n+    if (batch.values[0].is_scalar()) {\n+      // Promote to output array\n+      ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*batch.values[0].scalar(),\n+                                                            length, ctx->memory_pool()));\n+      *output = *array->data();\n+      if (!batch.values[0].scalar()->is_valid) {\n+        // MakeArrayFromScalar reuses the same buffer for null/data in\n+        // this case, allocate a real one since we'll be writing to it\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(length));\n+        ::arrow::internal::BitmapXor(output->buffers[0]->data(), /*left_offset=*/0,\n+                                     output->buffers[0]->data(), /*right_offset=*/0,\n+                                     length, /*out_offset=*/0,\n+                                     output->buffers[0]->mutable_data());\n+      }\n+    } else {\n+      // Copy to output array\n+      const ArrayData& input = *batch.values[0].array();\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[1], ctx->Allocate(length * sizeof(OutValue)));\n+      if (options.skip_nulls && input.buffers[0]) {\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(length));\n+        ::arrow::internal::CopyBitmap(input.buffers[0]->data(), input.offset, length,\n+                                      output->buffers[0]->mutable_data(),\n+                                      /*dest_offset=*/0);\n+      }\n+      // This won't work for nested or variable-sized types\n+      std::memcpy(output->buffers[1]->mutable_data(),\n+                  input.buffers[1]->data() + (input.offset * sizeof(OutValue)),\n+                  length * sizeof(OutValue));\n+    }\n+\n+    for (size_t i = 1; i < batch.values.size(); i++) {\n+      OutputArrayWriter<OutType> writer(out->mutable_array());\n+      if (batch.values[i].is_scalar()) {\n\nReview comment:\n       I think instead it'd be useful to sort the inputs and handle all the scalars first. This would allow you to consider only arrays in this loop\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T16:22:39.758+0000",
                    "updated": "2021-05-25T16:22:39.758+0000",
                    "started": "2021-05-25T16:22:39.758+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601829",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639070715\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,6 +454,45 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class KernelGenerator, typename Op>\n\nReview comment:\n       I added this. Note that if we want to have `CommonTimestamp()` I don't think this'll fly since we'd need to scale the timestamp values to the common unit before comparison. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T18:21:44.148+0000",
                    "updated": "2021-05-25T18:21:44.148+0000",
                    "started": "2021-05-25T18:21:44.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601894",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639128759\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,6 +454,45 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class KernelGenerator, typename Op>\n\nReview comment:\n       No, CommonTimestamp indicates that an implicit cast is necessary (which in the case of timestamps includes the scaling). It's not the responsibility of the kernel to execute that implicit cast\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T19:36:36.818+0000",
                    "updated": "2021-05-25T19:36:36.818+0000",
                    "started": "2021-05-25T19:36:36.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601920",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639129786\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -428,6 +454,45 @@ ArrayKernelExec ArithmeticExecFromOp(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class KernelGenerator, typename Op>\n\nReview comment:\n       Ah! Ok, my mistake. I'll add some test cases for that.\r\n   \r\n   Binary types aren't implemented here, though (and would need some work/restructuring to handle).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T19:38:21.249+0000",
                    "updated": "2021-05-25T19:38:21.249+0000",
                    "started": "2021-05-25T19:38:21.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601921",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639130532\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1093,6 +1097,41 @@ ArrayKernelExec GeneratePhysicalInteger(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class Generator, typename... Args>\n+ArrayKernelExec GeneratePhysicalNumeric(detail::GetTypeId get_id) {\n+  switch (get_id.id) {\n+    case Type::INT8:\n+      return Generator<Int8Type, Args...>::Exec;\n+    case Type::INT16:\n+      return Generator<Int16Type, Args...>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+    case Type::TIME32:\n+      return Generator<Int32Type, Args...>::Exec;\n+    case Type::INT64:\n+    case Type::DATE64:\n+    case Type::TIMESTAMP:\n+    case Type::TIME64:\n+    case Type::DURATION:\n+      return Generator<Int64Type, Args...>::Exec;\n+    case Type::UINT8:\n+      return Generator<UInt8Type, Args...>::Exec;\n+    case Type::UINT16:\n+      return Generator<UInt16Type, Args...>::Exec;\n+    case Type::UINT32:\n+      return Generator<UInt32Type, Args...>::Exec;\n+    case Type::UINT64:\n+      return Generator<UInt64Type, Args...>::Exec;\n+    case Type::FLOAT:\n+      return Generator<FloatType, Args...>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<DoubleType, Args...>::Exec;\n\nReview comment:\n       ```suggestion\r\n       case Type::FLOAT:\r\n         return Generator<FloatType, Args...>::Exec;\r\n       case Type::DOUBLE:\r\n         return Generator<DoubleType, Args...>::Exec;\r\n       default:\r\n         return GeneratePhysicalInteger<Generator, Args...>(get_id);\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T19:39:37.940+0000",
                    "updated": "2021-05-25T19:39:37.940+0000",
                    "started": "2021-05-25T19:39:37.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601923",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639136875\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +562,202 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    bool all_scalar = true;\n+    bool any_scalar = false;\n+    size_t first_array_index = batch.values.size();\n+    for (size_t i = 0; i < batch.values.size(); i++) {\n+      const auto& datum = batch.values[i];\n+      all_scalar &= datum.descr().shape == ValueDescr::SCALAR;\n+      any_scalar |= datum.descr().shape == ValueDescr::SCALAR;\n+      if (first_array_index >= batch.values.size() &&\n+          datum.descr().shape == ValueDescr::ARRAY) {\n+        first_array_index = i;\n+      }\n+    }\n+    if (all_scalar) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // Exactly one array (output = input)\n+    if (batch.values.size() == 1) {\n+      *output = *batch[0].array();\n+      return Status::OK();\n+    }\n+\n+    // At least one array, two or more arguments\n+    DCHECK_GE(first_array_index, 0);\n+    DCHECK_LT(first_array_index, batch.values.size());\n+    DCHECK(batch.values[first_array_index].is_array());\n+    if (any_scalar) {\n\nReview comment:\n       Handling scalars should happen before the output == input bail. If the folded scalar is null then we can either ignore it (skip_nulls=true) or emit a null array without examining any array inputs (skip_nulls=false). After that we're guaranteed to have a valid scalar (for which MakeArrayFromScalar will not materialize a validity bitmap, so you can drop the BitmapXor etc)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T19:50:39.721+0000",
                    "updated": "2021-05-25T19:50:39.721+0000",
                    "started": "2021-05-25T19:50:39.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601927",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639140420\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +562,202 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    bool all_scalar = true;\n+    bool any_scalar = false;\n+    size_t first_array_index = batch.values.size();\n+    for (size_t i = 0; i < batch.values.size(); i++) {\n+      const auto& datum = batch.values[i];\n+      all_scalar &= datum.descr().shape == ValueDescr::SCALAR;\n+      any_scalar |= datum.descr().shape == ValueDescr::SCALAR;\n+      if (first_array_index >= batch.values.size() &&\n+          datum.descr().shape == ValueDescr::ARRAY) {\n+        first_array_index = i;\n+      }\n+    }\n+    if (all_scalar) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // Exactly one array (output = input)\n+    if (batch.values.size() == 1) {\n+      *output = *batch[0].array();\n+      return Status::OK();\n+    }\n+\n+    // At least one array, two or more arguments\n+    DCHECK_GE(first_array_index, 0);\n+    DCHECK_LT(first_array_index, batch.values.size());\n+    DCHECK(batch.values[first_array_index].is_array());\n+    if (any_scalar) {\n+      ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\n+                            MakeScalar(out->type(), 0));\n+      ExecScalar(batch, options, temp_scalar.get());\n+      if (options.skip_nulls || temp_scalar->is_valid) {\n+        // Promote to output array\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        if (!temp_scalar->is_valid) {\n+          // MakeArrayFromScalar reuses the same buffer for null/data in\n+          // this case, allocate a real one since we'll be writing to it\n+          ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+          ::arrow::internal::BitmapXor(output->buffers[0]->data(), /*left_offset=*/0,\n+                                       output->buffers[0]->data(), /*right_offset=*/0,\n+                                       batch.length, /*out_offset=*/0,\n+                                       output->buffers[0]->mutable_data());\n+        }\n+      } else {\n+        // Abort early\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        return Status::OK();\n+      }\n+    } else {\n+      // Copy first array argument to output array\n+      const ArrayData& input = *batch.values[first_array_index].array();\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[1],\n+                            ctx->Allocate(batch.length * sizeof(OutValue)));\n+      if (options.skip_nulls && input.buffers[0]) {\n+        // Don't copy the bitmap if !options.skip_nulls since we'll precompute it later\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+        ::arrow::internal::CopyBitmap(input.buffers[0]->data(), input.offset,\n+                                      batch.length, output->buffers[0]->mutable_data(),\n+                                      /*dest_offset=*/0);\n+      }\n+      // This won't work for nested or variable-sized types\n+      std::memcpy(output->buffers[1]->mutable_data(),\n+                  input.buffers[1]->data() + (input.offset * sizeof(OutValue)),\n+                  batch.length * sizeof(OutValue));\n+    }\n+\n+    if (!options.skip_nulls) {\n+      // We can precompute the validity buffer in this case\n+      // AND together the validity buffers of all arrays\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+      bool first = true;\n+      for (const auto& arg : batch.values) {\n+        if (!arg.is_array()) continue;\n\nReview comment:\n       instead of dealing with datums, you could build an ArrayDataVector and push the non scalar inputs (and the promoted folded scalar) into that. It'd make it explicit that you're only dealing with arrays and be a bit more readable, I think\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T19:56:25.409+0000",
                    "updated": "2021-05-25T19:56:25.409+0000",
                    "started": "2021-05-25T19:56:25.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601930",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601947",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639198243\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1093,6 +1097,41 @@ ArrayKernelExec GeneratePhysicalInteger(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class Generator, typename... Args>\n+ArrayKernelExec GeneratePhysicalNumeric(detail::GetTypeId get_id) {\n+  switch (get_id.id) {\n+    case Type::INT8:\n+      return Generator<Int8Type, Args...>::Exec;\n+    case Type::INT16:\n+      return Generator<Int16Type, Args...>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+    case Type::TIME32:\n+      return Generator<Int32Type, Args...>::Exec;\n+    case Type::INT64:\n+    case Type::DATE64:\n+    case Type::TIMESTAMP:\n+    case Type::TIME64:\n+    case Type::DURATION:\n+      return Generator<Int64Type, Args...>::Exec;\n+    case Type::UINT8:\n+      return Generator<UInt8Type, Args...>::Exec;\n+    case Type::UINT16:\n+      return Generator<UInt16Type, Args...>::Exec;\n+    case Type::UINT32:\n+      return Generator<UInt32Type, Args...>::Exec;\n+    case Type::UINT64:\n+      return Generator<UInt64Type, Args...>::Exec;\n+    case Type::FLOAT:\n+      return Generator<FloatType, Args...>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<DoubleType, Args...>::Exec;\n\nReview comment:\n       Unfortunately the two generators are slightly different since it's `GeneratePhysicalInteger<Generator, Type0, Args>` which will stamp out `Generator<Type0, Int8Type, Args>...` vs here where it's `GeneratePhysicalNumeric<Generator, Args>`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T20:55:22.202+0000",
                    "updated": "2021-05-25T20:55:22.202+0000",
                    "started": "2021-05-25T20:55:22.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601947",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/601954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#issuecomment-848282481\n\n\n   (N.B. I still need to fix CommonTimestamp, got caught up in fixing the other feedback)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-25T21:35:46.570+0000",
                    "updated": "2021-05-25T21:35:46.570+0000",
                    "started": "2021-05-25T21:35:46.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "601954",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/602341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#discussion_r639703591\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +565,190 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const size_t scalar_count =\n+        static_cast<size_t>(std::count_if(batch.values.begin(), batch.values.end(),\n+                                          [](const Datum& d) { return d.is_scalar(); }));\n+    if (scalar_count == batch.values.size()) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // At least one array, two or more arguments\n+    ArrayDataVector arrays;\n+    for (const auto& arg : batch.values) {\n+      if (!arg.is_array()) continue;\n+      arrays.push_back(arg.array());\n+    }\n+\n+    if (scalar_count > 0) {\n+      ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\n+                            MakeScalar(out->type(), 0));\n+      ExecScalar(batch, options, temp_scalar.get());\n+      if (temp_scalar->is_valid) {\n+        // Promote to output array\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        arrays.push_back(array->data());\n+      } else if (!options.skip_nulls) {\n+        // Abort early\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        return Status::OK();\n+      }\n+    }\n+\n+    // Exactly one array to consider (output = input)\n+    if (arrays.size() == 1) {\n+      *output = *arrays[0];\n+      return Status::OK();\n+    }\n+\n+    // Two or more arrays to consider\n+    if (scalar_count > 0) {\n+      // We allocated the last array from a scalar: recycle it as the output\n\nReview comment:\n       Even if the scalar was null and `options.skip_nulls` is true?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +565,190 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const size_t scalar_count =\n+        static_cast<size_t>(std::count_if(batch.values.begin(), batch.values.end(),\n+                                          [](const Datum& d) { return d.is_scalar(); }));\n+    if (scalar_count == batch.values.size()) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // At least one array, two or more arguments\n+    ArrayDataVector arrays;\n+    for (const auto& arg : batch.values) {\n+      if (!arg.is_array()) continue;\n+      arrays.push_back(arg.array());\n+    }\n+\n+    if (scalar_count > 0) {\n+      ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\n+                            MakeScalar(out->type(), 0));\n+      ExecScalar(batch, options, temp_scalar.get());\n+      if (temp_scalar->is_valid) {\n+        // Promote to output array\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        arrays.push_back(array->data());\n+      } else if (!options.skip_nulls) {\n+        // Abort early\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        return Status::OK();\n+      }\n+    }\n+\n+    // Exactly one array to consider (output = input)\n+    if (arrays.size() == 1) {\n+      *output = *arrays[0];\n+      return Status::OK();\n+    }\n+\n+    // Two or more arrays to consider\n+    if (scalar_count > 0) {\n+      // We allocated the last array from a scalar: recycle it as the output\n+      *output = *arrays.back();\n+    } else {\n+      // Copy last array argument to output array\n+      const ArrayData& input = *arrays.back();\n+      if (options.skip_nulls && input.buffers[0]) {\n+        // Don't copy the bitmap if !options.skip_nulls since we'll precompute it later\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+        ::arrow::internal::CopyBitmap(input.buffers[0]->data(), input.offset,\n+                                      batch.length, output->buffers[0]->mutable_data(),\n+                                      /*dest_offset=*/0);\n+      }\n+      // This won't work for nested or variable-sized types\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[1],\n+                            ctx->Allocate(batch.length * sizeof(OutValue)));\n+      std::memcpy(output->buffers[1]->mutable_data(),\n+                  input.buffers[1]->data() + (input.offset * sizeof(OutValue)),\n+                  batch.length * sizeof(OutValue));\n+    }\n+\n+    if (!options.skip_nulls) {\n+      // We can precompute the validity buffer in this case\n+      // AND together the validity buffers of all arrays\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n\nReview comment:\n       This will allocate a null bitmap even if all input arrays have 0 nulls.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -312,6 +313,89 @@ class TestBinaryArithmeticUnsigned : public TestBinaryArithmeticIntegral<T> {};\n template <typename T>\n class TestBinaryArithmeticFloating : public TestBinaryArithmetic<T> {};\n \n+template <typename T>\n+class TestVarArgsArithmetic : public TestBase {\n+ protected:\n+  static std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<T>::type_singleton();\n+  }\n+\n+  using VarArgsFunction = std::function<Result<Datum>(\n+      const std::vector<Datum>&, ElementWiseAggregateOptions, ExecContext*)>;\n+\n+  Datum scalar(const std::string& value) {\n+    return ScalarFromJSON(type_singleton(), value);\n+  }\n+\n+  Datum array(const std::string& value) { return ArrayFromJSON(type_singleton(), value); }\n+\n+  Datum Eval(VarArgsFunction func, const std::vector<Datum>& args) {\n+    EXPECT_OK_AND_ASSIGN(auto actual,\n+                         func(args, element_wise_aggregate_options_, nullptr));\n+    if (actual.is_array()) {\n+      auto arr = actual.make_array();\n+      ARROW_EXPECT_OK(arr->ValidateFull());\n+    }\n+    return actual;\n+  }\n+\n+  void AssertNullScalar(VarArgsFunction func, const std::vector<Datum>& args) {\n+    auto datum = this->Eval(func, args);\n+    ASSERT_TRUE(datum.is_scalar());\n+    ASSERT_FALSE(datum.scalar()->is_valid);\n+  }\n+\n+  void Assert(VarArgsFunction func, Datum expected, const std::vector<Datum>& args) {\n+    std::stringstream ss;\n+    ss << \"Inputs:\";\n+    for (const auto& arg : args) {\n+      ss << ' ';\n+      if (arg.is_scalar())\n+        ss << arg.scalar()->ToString();\n+      else if (arg.is_array())\n+        ss << arg.make_array()->ToString();\n\nReview comment:\n       Uh. I don't think generating string representations for each and every test is a good idea.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -310,6 +310,20 @@ output element is null.\n | less, less_equal         |            |                                             |                     |\n +--------------------------+------------+---------------------------------------------+---------------------+\n \n+These functions take any number of inputs of numeric type (in which case they\n+will be cast to the :ref:`common numeric type <common-numeric-type>` before\n+comparison) or of temporal types. If any input is dictionary encoded it will be\n+expanded for the purposes of comparison.\n+\n++--------------------------+------------+---------------------------------------------+---------------------+-------+\n+| Function names           | Arity      | Input types                                 | Output type         | Notes |\n\nReview comment:\n       Should add a column for the options class.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +565,190 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const size_t scalar_count =\n+        static_cast<size_t>(std::count_if(batch.values.begin(), batch.values.end(),\n+                                          [](const Datum& d) { return d.is_scalar(); }));\n+    if (scalar_count == batch.values.size()) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // At least one array, two or more arguments\n+    ArrayDataVector arrays;\n+    for (const auto& arg : batch.values) {\n+      if (!arg.is_array()) continue;\n+      arrays.push_back(arg.array());\n+    }\n+\n+    if (scalar_count > 0) {\n+      ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\n+                            MakeScalar(out->type(), 0));\n+      ExecScalar(batch, options, temp_scalar.get());\n+      if (temp_scalar->is_valid) {\n+        // Promote to output array\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        arrays.push_back(array->data());\n+      } else if (!options.skip_nulls) {\n+        // Abort early\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        return Status::OK();\n+      }\n+    }\n+\n+    // Exactly one array to consider (output = input)\n+    if (arrays.size() == 1) {\n+      *output = *arrays[0];\n+      return Status::OK();\n+    }\n+\n+    // Two or more arrays to consider\n+    if (scalar_count > 0) {\n+      // We allocated the last array from a scalar: recycle it as the output\n+      *output = *arrays.back();\n+    } else {\n+      // Copy last array argument to output array\n+      const ArrayData& input = *arrays.back();\n+      if (options.skip_nulls && input.buffers[0]) {\n+        // Don't copy the bitmap if !options.skip_nulls since we'll precompute it later\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+        ::arrow::internal::CopyBitmap(input.buffers[0]->data(), input.offset,\n+                                      batch.length, output->buffers[0]->mutable_data(),\n+                                      /*dest_offset=*/0);\n+      }\n+      // This won't work for nested or variable-sized types\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[1],\n+                            ctx->Allocate(batch.length * sizeof(OutValue)));\n+      std::memcpy(output->buffers[1]->mutable_data(),\n+                  input.buffers[1]->data() + (input.offset * sizeof(OutValue)),\n+                  batch.length * sizeof(OutValue));\n+    }\n+\n+    if (!options.skip_nulls) {\n+      // We can precompute the validity buffer in this case\n+      // AND together the validity buffers of all arrays\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+      bool first = true;\n+      for (const auto& arr : arrays) {\n+        if (!arr->buffers[0]) continue;\n+        if (first) {\n\nReview comment:\n       Instead of `if (first)`, you could move the bitmap allocation below and use `if (!output->buffers[0])`.\n\n##########\nFile path: cpp/src/arrow/ipc/json_simple.cc\n##########\n@@ -911,6 +912,26 @@ Status DictArrayFromJSON(const std::shared_ptr<DataType>& type,\n       .Value(out);\n }\n \n+Status ScalarFromJSON(const std::shared_ptr<DataType>& type,\n+                      util::string_view json_string, std::shared_ptr<Scalar>* out) {\n+  std::shared_ptr<Converter> converter;\n+  RETURN_NOT_OK(GetConverter(type, &converter));\n+\n+  rj::Document json_doc;\n+  json_doc.Parse<kParseFlags>(json_string.data(), json_string.length());\n+  if (json_doc.HasParseError()) {\n+    return Status::Invalid(\"JSON parse error at offset \", json_doc.GetErrorOffset(), \": \",\n+                           GetParseError_En(json_doc.GetParseError()));\n+  }\n+\n+  std::shared_ptr<Array> array;\n+  RETURN_NOT_OK(converter->AppendValue(json_doc));\n+  RETURN_NOT_OK(converter->Finish(&array));\n+  DCHECK_GE(array->length(), 0);\n\nReview comment:\n       Shouldn't we ensure it's equal to 1?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1093,6 +1097,41 @@ ArrayKernelExec GeneratePhysicalInteger(detail::GetTypeId get_id) {\n   }\n }\n \n+template <template <typename... Args> class Generator, typename... Args>\n+ArrayKernelExec GeneratePhysicalNumeric(detail::GetTypeId get_id) {\n+  switch (get_id.id) {\n+    case Type::INT8:\n+      return Generator<Int8Type, Args...>::Exec;\n+    case Type::INT16:\n+      return Generator<Int16Type, Args...>::Exec;\n+    case Type::INT32:\n+    case Type::DATE32:\n+    case Type::TIME32:\n+      return Generator<Int32Type, Args...>::Exec;\n+    case Type::INT64:\n+    case Type::DATE64:\n+    case Type::TIMESTAMP:\n+    case Type::TIME64:\n+    case Type::DURATION:\n+      return Generator<Int64Type, Args...>::Exec;\n+    case Type::UINT8:\n+      return Generator<UInt8Type, Args...>::Exec;\n+    case Type::UINT16:\n+      return Generator<UInt16Type, Args...>::Exec;\n+    case Type::UINT32:\n+      return Generator<UInt32Type, Args...>::Exec;\n+    case Type::UINT64:\n+      return Generator<UInt64Type, Args...>::Exec;\n+    case Type::FLOAT:\n+      return Generator<FloatType, Args...>::Exec;\n+    case Type::DOUBLE:\n+      return Generator<DoubleType, Args...>::Exec;\n\nReview comment:\n       Perhaps, but the discrepancy seems a bit gratuitous.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +565,190 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const size_t scalar_count =\n+        static_cast<size_t>(std::count_if(batch.values.begin(), batch.values.end(),\n+                                          [](const Datum& d) { return d.is_scalar(); }));\n+    if (scalar_count == batch.values.size()) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // At least one array, two or more arguments\n+    ArrayDataVector arrays;\n+    for (const auto& arg : batch.values) {\n+      if (!arg.is_array()) continue;\n+      arrays.push_back(arg.array());\n+    }\n+\n+    if (scalar_count > 0) {\n+      ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\n+                            MakeScalar(out->type(), 0));\n+      ExecScalar(batch, options, temp_scalar.get());\n+      if (temp_scalar->is_valid) {\n+        // Promote to output array\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        arrays.push_back(array->data());\n+      } else if (!options.skip_nulls) {\n+        // Abort early\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        return Status::OK();\n+      }\n+    }\n+\n+    // Exactly one array to consider (output = input)\n+    if (arrays.size() == 1) {\n+      *output = *arrays[0];\n+      return Status::OK();\n+    }\n+\n+    // Two or more arrays to consider\n+    if (scalar_count > 0) {\n+      // We allocated the last array from a scalar: recycle it as the output\n+      *output = *arrays.back();\n+    } else {\n+      // Copy last array argument to output array\n+      const ArrayData& input = *arrays.back();\n+      if (options.skip_nulls && input.buffers[0]) {\n+        // Don't copy the bitmap if !options.skip_nulls since we'll precompute it later\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+        ::arrow::internal::CopyBitmap(input.buffers[0]->data(), input.offset,\n+                                      batch.length, output->buffers[0]->mutable_data(),\n+                                      /*dest_offset=*/0);\n+      }\n+      // This won't work for nested or variable-sized types\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[1],\n+                            ctx->Allocate(batch.length * sizeof(OutValue)));\n+      std::memcpy(output->buffers[1]->mutable_data(),\n+                  input.buffers[1]->data() + (input.offset * sizeof(OutValue)),\n+                  batch.length * sizeof(OutValue));\n+    }\n+\n+    if (!options.skip_nulls) {\n+      // We can precompute the validity buffer in this case\n+      // AND together the validity buffers of all arrays\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+      bool first = true;\n+      for (const auto& arr : arrays) {\n+        if (!arr->buffers[0]) continue;\n\nReview comment:\n       Use `arr->null_count() == 0`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1255,242 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+TYPED_TEST(TestVarArgsArithmeticNumeric, Minimum) {\n+  this->AssertNullScalar(Minimum, {});\n+  this->AssertNullScalar(Minimum, {this->scalar(\"null\"), this->scalar(\"null\")});\n+\n+  this->Assert(Minimum, this->scalar(\"0\"), {this->scalar(\"0\")});\n+  this->Assert(Minimum, this->scalar(\"0\"),\n+               {this->scalar(\"2\"), this->scalar(\"0\"), this->scalar(\"1\")});\n+  this->Assert(\n+      Minimum, this->scalar(\"0\"),\n+      {this->scalar(\"2\"), this->scalar(\"0\"), this->scalar(\"1\"), this->scalar(\"null\")});\n+  this->Assert(Minimum, this->scalar(\"1\"),\n+               {this->scalar(\"null\"), this->scalar(\"null\"), this->scalar(\"1\"),\n+                this->scalar(\"null\")});\n+\n+  this->Assert(Minimum, (this->array(\"[]\")), {this->array(\"[]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 3, null]\"), {this->array(\"[1, 2, 3, null]\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->scalar(\"2\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"2\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"2\"), this->scalar(\"4\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"null\"), this->scalar(\"2\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[2, 2, 2, 2]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[2, null, 2, 2]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->array(\"[2, 2, 2, 2]\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 2, null, 6]\"),\n+               {this->array(\"[1, 2, null, null]\"), this->array(\"[4, null, null, 6]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, null, 6]\"),\n+               {this->array(\"[4, null, null, 6]\"), this->array(\"[1, 2, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 3, 4]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[null, null, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 3, 4]\"),\n+               {this->array(\"[null, null, null, null]\"), this->array(\"[1, 2, 3, 4]\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 1, 1, 1]\"),\n+               {this->scalar(\"1\"), this->array(\"[1, 2, 3, 4]\")});\n+  this->Assert(Minimum, this->array(\"[1, 1, 1, 1]\"),\n+               {this->scalar(\"1\"), this->array(\"[null, null, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[1, 1, 1, 1]\"),\n+               {this->scalar(\"null\"), this->array(\"[1, 1, 1, 1]\")});\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->scalar(\"null\"), this->array(\"[null, null, null, null]\")});\n+\n+  // Test null handling\n+  this->element_wise_aggregate_options_.skip_nulls = false;\n+  this->AssertNullScalar(Minimum, {this->scalar(\"null\"), this->scalar(\"null\")});\n+  this->AssertNullScalar(Minimum, {this->scalar(\"0\"), this->scalar(\"null\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, null, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"2\"), this->scalar(\"4\")});\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"null\"), this->scalar(\"2\")});\n+  this->Assert(Minimum, this->array(\"[1, null, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[2, null, 2, 2]\")});\n+\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->scalar(\"1\"), this->array(\"[null, null, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->scalar(\"null\"), this->array(\"[1, 1, 1, 1]\")});\n+}\n+\n+TYPED_TEST(TestVarArgsArithmeticFloating, Minimum) {\n+  this->SetNansEqual();\n\nReview comment:\n       Why isn't this done by default in the test setup?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -516,6 +565,190 @@ std::shared_ptr<ScalarFunction> MakeUnarySignedArithmeticFunctionNotNull(\n   return func;\n }\n \n+using MinMaxState = OptionsWrapper<ElementWiseAggregateOptions>;\n+\n+// Implement a variadic scalar min/max kernel.\n+template <typename OutType, typename Op>\n+struct ScalarMinMax {\n+  using OutValue = typename GetOutputType<OutType>::T;\n+\n+  static void ExecScalar(const ExecBatch& batch,\n+                         const ElementWiseAggregateOptions& options, Scalar* out) {\n+    // All arguments are scalar\n+    OutValue value{};\n+    bool valid = false;\n+    for (const auto& arg : batch.values) {\n+      // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\n+      if (!arg.is_scalar()) continue;\n+      const auto& scalar = *arg.scalar();\n+      if (!scalar.is_valid) {\n+        if (options.skip_nulls) continue;\n+        out->is_valid = false;\n+        return;\n+      }\n+      if (!valid) {\n+        value = UnboxScalar<OutType>::Unbox(scalar);\n+        valid = true;\n+      } else {\n+        value = Op::Call(value, UnboxScalar<OutType>::Unbox(scalar));\n+      }\n+    }\n+    out->is_valid = valid;\n+    if (valid) {\n+      BoxScalar<OutType>::Box(value, out);\n+    }\n+  }\n+\n+  static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n+    const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\n+    const auto descrs = batch.GetDescriptors();\n+    const size_t scalar_count =\n+        static_cast<size_t>(std::count_if(batch.values.begin(), batch.values.end(),\n+                                          [](const Datum& d) { return d.is_scalar(); }));\n+    if (scalar_count == batch.values.size()) {\n+      ExecScalar(batch, options, out->scalar().get());\n+      return Status::OK();\n+    }\n+\n+    ArrayData* output = out->mutable_array();\n+\n+    // At least one array, two or more arguments\n+    ArrayDataVector arrays;\n+    for (const auto& arg : batch.values) {\n+      if (!arg.is_array()) continue;\n+      arrays.push_back(arg.array());\n+    }\n+\n+    if (scalar_count > 0) {\n+      ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\n+                            MakeScalar(out->type(), 0));\n+      ExecScalar(batch, options, temp_scalar.get());\n+      if (temp_scalar->is_valid) {\n+        // Promote to output array\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        arrays.push_back(array->data());\n+      } else if (!options.skip_nulls) {\n+        // Abort early\n+        ARROW_ASSIGN_OR_RAISE(auto array, MakeArrayFromScalar(*temp_scalar, batch.length,\n+                                                              ctx->memory_pool()));\n+        *output = *array->data();\n+        return Status::OK();\n+      }\n+    }\n+\n+    // Exactly one array to consider (output = input)\n+    if (arrays.size() == 1) {\n+      *output = *arrays[0];\n+      return Status::OK();\n+    }\n+\n+    // Two or more arrays to consider\n+    if (scalar_count > 0) {\n+      // We allocated the last array from a scalar: recycle it as the output\n+      *output = *arrays.back();\n+    } else {\n+      // Copy last array argument to output array\n+      const ArrayData& input = *arrays.back();\n+      if (options.skip_nulls && input.buffers[0]) {\n+        // Don't copy the bitmap if !options.skip_nulls since we'll precompute it later\n+        ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+        ::arrow::internal::CopyBitmap(input.buffers[0]->data(), input.offset,\n+                                      batch.length, output->buffers[0]->mutable_data(),\n+                                      /*dest_offset=*/0);\n+      }\n+      // This won't work for nested or variable-sized types\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[1],\n+                            ctx->Allocate(batch.length * sizeof(OutValue)));\n+      std::memcpy(output->buffers[1]->mutable_data(),\n+                  input.buffers[1]->data() + (input.offset * sizeof(OutValue)),\n+                  batch.length * sizeof(OutValue));\n+    }\n+\n+    if (!options.skip_nulls) {\n+      // We can precompute the validity buffer in this case\n+      // AND together the validity buffers of all arrays\n+      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ctx->AllocateBitmap(batch.length));\n+      bool first = true;\n+      for (const auto& arr : arrays) {\n+        if (!arr->buffers[0]) continue;\n+        if (first) {\n+          ::arrow::internal::CopyBitmap(arr->buffers[0]->data(), arr->offset,\n+                                        batch.length, output->buffers[0]->mutable_data(),\n+                                        /*dest_offset=*/0);\n+          first = false;\n+        } else {\n+          ::arrow::internal::BitmapAnd(output->buffers[0]->data(), /*left_offset=*/0,\n+                                       arr->buffers[0]->data(), arr->offset, batch.length,\n+                                       /*out_offset=*/0,\n+                                       output->buffers[0]->mutable_data());\n+        }\n+      }\n+    }\n+    arrays.pop_back();\n+\n+    for (const auto& array : arrays) {\n+      OutputArrayWriter<OutType> writer(out->mutable_array());\n+      ArrayIterator<OutType> out_it(*output);\n+      int64_t index = 0;\n+      VisitArrayValuesInline<OutType>(\n+          *array,\n+          [&](OutValue value) {\n+            auto u = out_it();\n+            if (!output->buffers[0] ||\n+                BitUtil::GetBit(output->buffers[0]->data(), index)) {\n+              writer.Write(Op::Call(u, value));\n+            } else {\n+              writer.Write(value);\n+            }\n+            index++;\n+          },\n+          [&]() {\n+            // RHS is null, preserve the LHS\n+            writer.values++;\n+            index++;\n+            out_it();\n+          });\n+      // When skipping nulls, we incrementally compute the validity buffer\n+      if (options.skip_nulls && output->buffers[0]) {\n+        if (array->buffers[0]) {\n+          ::arrow::internal::BitmapOr(\n+              output->buffers[0]->data(), /*left_offset=*/0, array->buffers[0]->data(),\n+              /*right_offset=*/array->offset, batch.length, /*out_offset=*/0,\n+              output->buffers[0]->mutable_data());\n+        } else {\n+          output->buffers[0] = nullptr;\n+        }\n+      }\n+    }\n+    output->null_count = -1;\n\nReview comment:\n       Even if there is no validity bitmap?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1161,5 +1255,242 @@ TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n   }\n }\n \n+TYPED_TEST(TestVarArgsArithmeticNumeric, Minimum) {\n+  this->AssertNullScalar(Minimum, {});\n+  this->AssertNullScalar(Minimum, {this->scalar(\"null\"), this->scalar(\"null\")});\n+\n+  this->Assert(Minimum, this->scalar(\"0\"), {this->scalar(\"0\")});\n+  this->Assert(Minimum, this->scalar(\"0\"),\n+               {this->scalar(\"2\"), this->scalar(\"0\"), this->scalar(\"1\")});\n+  this->Assert(\n+      Minimum, this->scalar(\"0\"),\n+      {this->scalar(\"2\"), this->scalar(\"0\"), this->scalar(\"1\"), this->scalar(\"null\")});\n+  this->Assert(Minimum, this->scalar(\"1\"),\n+               {this->scalar(\"null\"), this->scalar(\"null\"), this->scalar(\"1\"),\n+                this->scalar(\"null\")});\n+\n+  this->Assert(Minimum, (this->array(\"[]\")), {this->array(\"[]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 3, null]\"), {this->array(\"[1, 2, 3, null]\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->scalar(\"2\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"2\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"2\"), this->scalar(\"4\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"null\"), this->scalar(\"2\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[2, 2, 2, 2]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[2, null, 2, 2]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->array(\"[2, 2, 2, 2]\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 2, null, 6]\"),\n+               {this->array(\"[1, 2, null, null]\"), this->array(\"[4, null, null, 6]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, null, 6]\"),\n+               {this->array(\"[4, null, null, 6]\"), this->array(\"[1, 2, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 3, 4]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[null, null, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[1, 2, 3, 4]\"),\n+               {this->array(\"[null, null, null, null]\"), this->array(\"[1, 2, 3, 4]\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, 1, 1, 1]\"),\n+               {this->scalar(\"1\"), this->array(\"[1, 2, 3, 4]\")});\n+  this->Assert(Minimum, this->array(\"[1, 1, 1, 1]\"),\n+               {this->scalar(\"1\"), this->array(\"[null, null, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[1, 1, 1, 1]\"),\n+               {this->scalar(\"null\"), this->array(\"[1, 1, 1, 1]\")});\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->scalar(\"null\"), this->array(\"[null, null, null, null]\")});\n+\n+  // Test null handling\n+  this->element_wise_aggregate_options_.skip_nulls = false;\n+  this->AssertNullScalar(Minimum, {this->scalar(\"null\"), this->scalar(\"null\")});\n+  this->AssertNullScalar(Minimum, {this->scalar(\"0\"), this->scalar(\"null\")});\n+\n+  this->Assert(Minimum, this->array(\"[1, null, 2, 2]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"2\"), this->scalar(\"4\")});\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->array(\"[1, null, 3, 4]\"), this->scalar(\"null\"), this->scalar(\"2\")});\n+  this->Assert(Minimum, this->array(\"[1, null, 2, 2]\"),\n+               {this->array(\"[1, 2, 3, 4]\"), this->array(\"[2, null, 2, 2]\")});\n+\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->scalar(\"1\"), this->array(\"[null, null, null, null]\")});\n+  this->Assert(Minimum, this->array(\"[null, null, null, null]\"),\n+               {this->scalar(\"null\"), this->array(\"[1, 1, 1, 1]\")});\n+}\n+\n+TYPED_TEST(TestVarArgsArithmeticFloating, Minimum) {\n+  this->SetNansEqual();\n+  this->Assert(Maximum, this->scalar(\"0\"), {this->scalar(\"0\"), this->scalar(\"NaN\")});\n+  this->Assert(Maximum, this->scalar(\"0\"), {this->scalar(\"NaN\"), this->scalar(\"0\")});\n+  this->Assert(Maximum, this->scalar(\"Inf\"), {this->scalar(\"Inf\"), this->scalar(\"NaN\")});\n+  this->Assert(Maximum, this->scalar(\"Inf\"), {this->scalar(\"NaN\"), this->scalar(\"Inf\")});\n+  this->Assert(Maximum, this->scalar(\"-Inf\"),\n+               {this->scalar(\"-Inf\"), this->scalar(\"NaN\")});\n+  this->Assert(Maximum, this->scalar(\"-Inf\"),\n+               {this->scalar(\"NaN\"), this->scalar(\"-Inf\")});\n+  this->Assert(Maximum, this->scalar(\"NaN\"), {this->scalar(\"NaN\"), this->scalar(\"null\")});\n+  this->Assert(Minimum, this->scalar(\"0\"), {this->scalar(\"0\"), this->scalar(\"Inf\")});\n+  this->Assert(Minimum, this->scalar(\"-Inf\"), {this->scalar(\"0\"), this->scalar(\"-Inf\")});\n\nReview comment:\n       Can you add some test with `-0.0` and `0.0`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T13:36:30.154+0000",
                    "updated": "2021-05-26T13:36:30.154+0000",
                    "started": "2021-05-26T13:36:30.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602341",
                    "issueId": "13378105"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/worklog/602371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #10390:\nURL: https://github.com/apache/arrow/pull/10390#issuecomment-848823194\n\n\n   > Can you explain what the point is of a variadic function when we don't have e.g. variadic addition?\r\n   \r\n   My understanding is that we are aiming for Arrow's compute API to reach parity with the collections of built-in functions available in popular SQL engines. These SQL engines include several variadic functions that combine/merge/aggregate values row-wise. Two such SQL functions are `greatest()` and `least()`. The two kernels implemented in this PR are equivalent to those two SQL functions. Another such SQL function is `concat()` and its variant `concat_ws()`, which we intend to implement in ARROW-12709.\r\n   \r\n   There are two ways we could implement this functionality without implementing variadic functions:\r\n   1. Chain multiple calls to a binary function (as is required for addition of more than two values, as you mention)\r\n   2. Combine the arrays row-wise into a ListArray, then operate on the ListArray with a unary function\r\n   \r\n   If one of those alternative approaches is superior, then perhaps we do not need a variadic function. But my current understanding is that both of these alternative approaches are inferior for reasons of usability and efficiency respectively.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-26T14:36:18.598+0000",
                    "updated": "2021-05-26T14:36:18.598+0000",
                    "started": "2021-05-26T14:36:18.598+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "602371",
                    "issueId": "13378105"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 28800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@516549a6[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@16881f87[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@655ee51f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@33fcba14[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22da32de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@511c2c3b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43f85d1a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1582636b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66bdefc7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@56f06adf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5761fd96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@51fe452a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 28800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 04 01:41:36 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-04T01:41:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12751/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-05-12T13:50:49.000+0000",
        "updated": "2021-06-04T13:24:16.000+0000",
        "timeoriginalestimate": null,
        "description": "Add a pair of variadic functions equivalent to SQL's {{least}}/{{greatest}} or R's {{pmin}}/{{pmax}}. Should take 0, 1, 2, ... same-length numeric arrays as input and return an array giving the minimum/maximum of the values found in each position of the input arrays. For example, in the case of these 2 input arrays:\r\n{code:java}\r\nArray<double>        Array<double>\r\n[                    [\r\n  1,                   2,\r\n  4                    3\r\n]                    ]\r\n{code}\r\n{{least}} would return:\r\n{code:java}\r\nArray<double>\r\n[ \r\n  1,\r\n  3\r\n] \r\n{code}\r\nand {{greatest}} would return\r\n{code:java}\r\nArray<double>\r\n[ \r\n  2,\r\n  4\r\n] \r\n{code}\r\nThe returned array should have the same data type as the input arrays, or follow promotion rules if the numeric types of the input arrays differ.\r\n\r\nShould also accept scalar numeric inputs and recycle their values.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 28800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add variadic row-wise min/max kernels (least/greatest)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/comment/17346102",
                    "id": "17346102",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Numpy has this as {{np.minimum}} and {{np.maximum}}, although those are limited to a fixed number of 2 input arrays (so a binary min/max, not variadic)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2021-05-17T11:47:20.733+0000",
                    "updated": "2021-05-17T11:47:20.733+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/comment/17349477",
                    "id": "17349477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Just to clarify, do we want to propagate nulls or ignore them? (NumPy raises an error which is also an option)\r\n{noformat}\r\nminimum([1, 2, 3], [null, 1, 1]) = [null, 1, 1] # Propagate\r\nminimum([1, 2, 3], Scalar(null)) = [null, null, null]\r\nminimum([1, 2, 3], [null, 1, 1]) = [1, 1, 1]    # Ignore\r\nminimum([1, 2, 3], Scalar(null)) = [1, 2, 3]{noformat}\r\nAlso, what do we do with 0 arguments?\r\n{noformat}\r\nminimum(Scalar(null)) = null or error?\r\nminimum() = [], NullScalar, or error? {noformat}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-21T20:57:51.553+0000",
                    "updated": "2021-05-21T20:57:51.553+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/comment/17349490",
                    "id": "17349490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "In principle this should behave the same as the min/max aggregate kernels, I think.\r\n\r\nCan we use {{ScalarAggregateOptions}} or something like it to control whether to propagate vs. ignore?\r\n\r\nWith zero arguments it should return null.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-05-21T21:48:47.302+0000",
                    "updated": "2021-05-21T22:34:14.619+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378105/comment/17357004",
                    "id": "17357004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10390\n[https://github.com/apache/arrow/pull/10390]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-04T01:41:36.827+0000",
                    "updated": "2021-06-04T01:41:36.827+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qz2g:",
        "customfield_12314139": null
    }
}