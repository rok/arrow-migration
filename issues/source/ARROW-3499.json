{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13190976",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976",
    "key": "ARROW-3499",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12545428",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12545428",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13190963",
                    "key": "ARROW-3498",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190963",
                    "fields": {
                        "summary": "[R] Make IPC APIs consistent",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3499/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/163427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915\n \n \n   Exposing the `arrow::ipc::Message` and `arrow::ipc::MessageReader` classes with some associated functions: \r\n   \r\n   ``` r\r\n   library(arrow)\r\n   \r\n   batch <- record_batch(tibble::tibble(x = 1:10))\r\n   bytes <- write_record_batch(batch, raw())\r\n   \r\n   reader <- message_reader(bytes)\r\n   m <- reader$ReadNextMessage()\r\n   m\r\n   #> arrow::ipc::Message\r\n   m$body()\r\n   #> arrow::Buffer\r\n   m$type()\r\n   #> [1] 1\r\n   m <- reader$ReadNextMessage()\r\n   m\r\n   #> arrow::ipc::Message\r\n   m$body()\r\n   #> arrow::Buffer\r\n   m$type()\r\n   #> [1] 3\r\n   ```\r\n   \r\n   <sup>Created on 2018-11-07 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1.9000)</sup>\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-07T12:37:45.021+0000",
                    "updated": "2018-11-07T12:37:45.021+0000",
                    "started": "2018-11-07T12:37:45.021+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163427",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/163428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#issuecomment-436609678\n \n \n   At this point I'm not sure what to then do with a `Message`, i.e. how to convert a schema message to an actual schema, ...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-07T12:38:47.219+0000",
                    "updated": "2018-11-07T12:38:47.219+0000",
                    "started": "2018-11-07T12:38:47.218+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163428",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/163444",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#issuecomment-436624490\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=h1) Report\n   > Merging [#2915](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/713d82a5148b7bc99c4ae245a33b15aee0d3e32e?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2915/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2915      +/-   ##\n   ==========================================\n   - Coverage   87.37%   87.36%   -0.02%     \n   ==========================================\n     Files         416      416              \n     Lines       64955    64955              \n   ==========================================\n   - Hits        56755    56745      -10     \n   - Misses       8110     8116       +6     \n   - Partials       90       94       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | [go/arrow/math/math\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9tYXRoX2FtZDY0Lmdv) | `31.57% <0%> (-5.27%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/int64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hbWQ2NC5nbw==) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `100% <0%> (+100%)` | :arrow_up: |\n   | ... and [3 more](https://codecov.io/gh/apache/arrow/pull/2915/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=footer). Last update [713d82a...e9e43db](https://codecov.io/gh/apache/arrow/pull/2915?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-07T13:36:05.875+0000",
                    "updated": "2018-11-07T13:36:05.875+0000",
                    "started": "2018-11-07T13:36:05.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163444",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/163646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#issuecomment-436776085\n \n \n   Take a look at the `test_ipc.py` test suite in Python where we read schemas, record batches, etc. from messages\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-07T21:02:18.978+0000",
                    "updated": "2018-11-07T21:02:18.978+0000",
                    "started": "2018-11-07T21:02:18.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163646",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/163910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#issuecomment-436993467\n \n \n   I'm not finding something to e.g. transform a Message to a Schema from this \ud83d\udc0d file. \r\n   \r\n   The tests that I have: \r\n   \r\n   ```r\r\n   test_that(\"read_message can read from input stream\", {\r\n     batch <- record_batch(tibble::tibble(x = 1:10))\r\n     bytes <- write_record_batch(batch, raw())\r\n     stream <- buffer_reader(bytes)\r\n   \r\n     message <- read_message(stream)\r\n     expect_equal(message$type(), MessageType$SCHEMA)\r\n     expect_is(message$body, \"arrow::Buffer\")\r\n     expect_is(message$metadata, \"arrow::Buffer\")\r\n   \r\n     message <- read_message(stream)\r\n     expect_equal(message$type(), MessageType$RECORD_BATCH)\r\n     expect_is(message$body, \"arrow::Buffer\")\r\n     expect_is(message$metadata, \"arrow::Buffer\")\r\n   \r\n     message <- read_message(stream)\r\n     expect_null(read_message(stream))\r\n   })\r\n   ```\r\n   \r\n   are similar to this I suppose: \r\n   \r\n   ```py\r\n   def test_message_reader(example_messages):\r\n       _, messages = example_messages\r\n   \r\n       assert len(messages) == 6\r\n       assert messages[0].type == 'schema'\r\n       assert isinstance(messages[0].metadata, pa.Buffer)\r\n       assert isinstance(messages[0].body, pa.Buffer)\r\n   \r\n       for msg in messages[1:]:\r\n           assert msg.type == 'record batch'\r\n           assert isinstance(msg.metadata, pa.Buffer)\r\n           assert isinstance(msg.body, pa.Buffer)\r\n   ```\r\n   \r\n   One thing I can \u2795  is a `read_record_batch( <Message>, <Schema>)` method\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T13:28:39.841+0000",
                    "updated": "2018-11-08T13:28:39.841+0000",
                    "started": "2018-11-08T13:28:39.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "163910",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164113",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#discussion_r232083072\n \n \n\n ##########\n File path: r/src/arrow_types.h\n ##########\n @@ -37,25 +37,74 @@ struct NoDelete {\n   inline void operator()(T* ptr){};\n };\n \n+namespace arrow {\n+namespace r {\n+struct symbols {\n+  static SEXP units;\n+  static SEXP xp;\n+};\n+}  // namespace r\n+}  // namespace arrow\n+\n namespace Rcpp {\n+namespace internal {\n+\n+template <typename Pointer>\n \n Review comment:\n   There's some black magic in this file. Might be worth a blog post explaining how to deal with different kinds of smart pointers using external pointers in R6 classes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:31:54.859+0000",
                    "updated": "2018-11-08T22:31:54.859+0000",
                    "started": "2018-11-08T22:31:54.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164113",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#discussion_r232084850\n \n \n\n ##########\n File path: r/tests/testthat/test-schema.R\n ##########\n @@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-schema\")\n+\n+test_that(\"reading schema from raw vector\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n \n Review comment:\n   It isn't obvious to me that this would write a complete stream (maybe this should be called `write_record_batch_stream`). In Python we have a `RecordBatch.serialize` method that produces a single Message\r\n   \r\n   https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_ipc.py#L607\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:31:54.859+0000",
                    "updated": "2018-11-08T22:31:54.859+0000",
                    "started": "2018-11-08T22:31:54.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164112",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#discussion_r232083584\n \n \n\n ##########\n File path: r/src/arrow_types.h\n ##########\n @@ -37,25 +37,74 @@ struct NoDelete {\n   inline void operator()(T* ptr){};\n };\n \n+namespace arrow {\n+namespace r {\n+struct symbols {\n+  static SEXP units;\n+  static SEXP xp;\n+};\n+}  // namespace r\n+}  // namespace arrow\n+\n namespace Rcpp {\n+namespace internal {\n+\n+template <typename Pointer>\n+Pointer r6_to_smart_pointer(SEXP self) {\n+  return reinterpret_cast<Pointer>(\n+      EXTPTR_PTR(Rf_findVarInFrame(self, arrow::r::symbols::xp)));\n+}\n+\n+}  // namespace internal\n+\n+template <typename T>\n+class ConstReferenceSmartPtrInputParameter {\n \n Review comment:\n   Should this be called \"UnwrapExternalPointer\" or something?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:31:54.900+0000",
                    "updated": "2018-11-08T22:31:54.900+0000",
                    "started": "2018-11-08T22:31:54.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164114",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164115",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#issuecomment-437180413\n \n \n   The build failed, but due to the devtools rate limit\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:32:28.129+0000",
                    "updated": "2018-11-08T22:32:28.129+0000",
                    "started": "2018-11-08T22:32:28.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164115",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/r/DESCRIPTION b/r/DESCRIPTION\nindex fbc6473b8b..e247ef856b 100644\n--- a/r/DESCRIPTION\n+++ b/r/DESCRIPTION\n@@ -57,6 +57,7 @@ Collate:\n     'dictionary.R'\n     'io.R'\n     'memory_pool.R'\n+    'message.R'\n     'on_exit.R'\n     'reexports-bit64.R'\n     'reexports-tibble.R'\ndiff --git a/r/NAMESPACE b/r/NAMESPACE\nindex 0f301b92bc..755453c2db 100644\n--- a/r/NAMESPACE\n+++ b/r/NAMESPACE\n@@ -5,6 +5,7 @@ S3method(\"==\",\"arrow::Array\")\n S3method(\"==\",\"arrow::DataType\")\n S3method(\"==\",\"arrow::Field\")\n S3method(\"==\",\"arrow::RecordBatch\")\n+S3method(\"==\",\"arrow::ipc::Message\")\n S3method(as_tibble,\"arrow::RecordBatch\")\n S3method(as_tibble,\"arrow::Table\")\n S3method(buffer,default)\n@@ -16,15 +17,25 @@ S3method(buffer_reader,default)\n S3method(fixed_size_buffer_writer,\"arrow::Buffer\")\n S3method(fixed_size_buffer_writer,default)\n S3method(length,\"arrow::Array\")\n+S3method(message_reader,\"arrow::io::InputStream\")\n+S3method(message_reader,default)\n+S3method(message_reader,raw)\n S3method(names,\"arrow::RecordBatch\")\n S3method(print,\"arrow-enum\")\n+S3method(read_message,\"arrow::io::InputStream\")\n+S3method(read_message,default)\n S3method(read_record_batch,\"arrow::io::BufferReader\")\n S3method(read_record_batch,\"arrow::io::RandomAccessFile\")\n+S3method(read_record_batch,\"arrow::ipc::Message\")\n S3method(read_record_batch,\"arrow::ipc::RecordBatchFileReader\")\n S3method(read_record_batch,\"arrow::ipc::RecordBatchStreamReader\")\n S3method(read_record_batch,character)\n S3method(read_record_batch,fs_path)\n S3method(read_record_batch,raw)\n+S3method(read_schema,\"arrow::Buffer\")\n+S3method(read_schema,\"arrow::io::InputStream\")\n+S3method(read_schema,default)\n+S3method(read_schema,raw)\n S3method(read_table,\"arrow::io::BufferReader\")\n S3method(read_table,\"arrow::io::RandomAccessFile\")\n S3method(read_table,\"arrow::ipc::RecordBatchFileReader\")\n@@ -52,6 +63,7 @@ S3method(write_table,fs_path)\n S3method(write_table,raw)\n export(DateUnit)\n export(FileMode)\n+export(MessageType)\n export(StatusCode)\n export(TimeUnit)\n export(Type)\n@@ -77,13 +89,16 @@ export(int32)\n export(int64)\n export(int8)\n export(list_of)\n+export(message_reader)\n export(mmap_create)\n export(mmap_open)\n export(mock_output_stream)\n export(null)\n export(print.integer64)\n export(read_arrow)\n+export(read_message)\n export(read_record_batch)\n+export(read_schema)\n export(read_table)\n export(record_batch)\n export(record_batch_file_reader)\ndiff --git a/r/R/ChunkedArray.R b/r/R/ChunkedArray.R\nindex 56bf198368..69c98bac2a 100644\n--- a/r/R/ChunkedArray.R\n+++ b/r/R/ChunkedArray.R\n@@ -22,15 +22,15 @@\n     length = function() ChunkedArray__length(self),\n     null_count = function() ChunkedArray__null_count(self),\n     num_chunks = function() ChunkedArray__num_chunks(self),\n-    chunk = function(i) construct(`arrow::Array`, ChunkedArray__chunk(self, i)),\n-    chunks = function() purrr::map(ChunkedArray__chunks(self), construct, class = `arrow::Array`),\n+    chunk = function(i) shared_ptr(`arrow::Array`, ChunkedArray__chunk(self, i)),\n+    chunks = function() purrr::map(ChunkedArray__chunks(self), shared_ptr, class = `arrow::Array`),\n     type = function() `arrow::DataType`$dispatch(ChunkedArray__type(self)),\n     as_vector = function() ChunkedArray__as_vector(self),\n     Slice = function(offset, length = NULL){\n       if (is.null(length)) {\n-        construct(`arrow::ChunkedArray`, ChunkArray__Slice1(self, offset))\n+        shared_ptr(`arrow::ChunkedArray`, ChunkArray__Slice1(self, offset))\n       } else {\n-        construct(`arrow::ChunkedArray`, ChunkArray__Slice2(self, offset, length))\n+        shared_ptr(`arrow::ChunkedArray`, ChunkArray__Slice2(self, offset, length))\n       }\n     }\n   )\n@@ -42,5 +42,5 @@\n #'\n #' @export\n chunked_array <- function(...){\n-  construct(`arrow::ChunkedArray`, ChunkedArray__from_list(rlang::list2(...)))\n+  shared_ptr(`arrow::ChunkedArray`, ChunkedArray__from_list(rlang::list2(...)))\n }\ndiff --git a/r/R/Column.R b/r/R/Column.R\nindex 86edade620..bf3fe0a0e1 100644\n--- a/r/R/Column.R\n+++ b/r/R/Column.R\n@@ -22,6 +22,6 @@\n     length = function() Column__length(self),\n     null_count = function() Column__null_count(self),\n     type = function() `arrow::DataType`$dispatch(Column__type(self)),\n-    data = function() construct(`arrow::ChunkedArray`, Column__data(self))\n+    data = function() shared_ptr(`arrow::ChunkedArray`, Column__data(self))\n   )\n )\ndiff --git a/r/R/Field.R b/r/R/Field.R\nindex e2f01b124e..e999b975c6 100644\n--- a/r/R/Field.R\n+++ b/r/R/Field.R\n@@ -41,7 +41,7 @@\n }\n \n field <- function(name, type) {\n-  construct(`arrow::Field`, Field__initialize(name, type))\n+  shared_ptr(`arrow::Field`, Field__initialize(name, type))\n }\n \n .fields <- function(.list){\ndiff --git a/r/R/List.R b/r/R/List.R\nindex 68bcd0fdfd..cc8c2b1c9e 100644\n--- a/r/R/List.R\n+++ b/r/R/List.R\n@@ -23,4 +23,4 @@\n \n #' @rdname DataType\n #' @export\n-list_of <- function(type) construct(`arrow::ListType`, list__(type))\n+list_of <- function(type) shared_ptr(`arrow::ListType`, list__(type))\ndiff --git a/r/R/R6.R b/r/R/R6.R\nindex 68a24ecc46..1caa885d90 100644\n--- a/r/R/R6.R\n+++ b/r/R/R6.R\n@@ -32,20 +32,21 @@\n       self$`.:xp:.` <- xp\n     },\n     print = function(...){\n-      cat(crayon::silver(glue::glue(\"{cl} <{p}>\", cl = class(self)[[1]], p = self$pointer_address())), \"\\n\")\n+      cat(crayon::silver(glue::glue(\"{cl}\", cl = class(self)[[1]])), \"\\n\")\n       if(!is.null(self$ToString)){\n         cat(self$ToString(), \"\\n\")\n       }\n       invisible(self)\n-    },\n-    pointer_address = function(){\n-      Object__pointer_address(self$pointer())\n     }\n   )\n )\n \n-construct <- function(class, xp) {\n-  if (!xptr_is_null(xp)) class$new(xp)\n+shared_ptr <- function(class, xp) {\n+  if(!shared_ptr_is_null(xp)) class$new(xp)\n+}\n+\n+unique_ptr <- function(class, xp) {\n+  if(!unique_ptr_is_null(xp)) class$new(xp)\n }\n \n #' @export\n@@ -70,7 +71,7 @@ construct <- function(class, xp) {\n       DataType__num_children(self)\n     },\n     children = function() {\n-      map(DataType__children_pointer(self), construct, class= `arrow::Field`)\n+      map(DataType__children_pointer(self), shared_ptr, class= `arrow::Field`)\n     },\n     id = function(){\n       DataType__id(self)\n@@ -94,15 +95,15 @@ construct <- function(class, xp) {\n         BINARY = stop(\"Type BINARY not implemented yet\"),\n         DATE32 = date32(),\n         DATE64 = date64(),\n-        TIMESTAMP = construct(`arrow::Timestamp`,self$pointer()),\n-        TIME32 = construct(`arrow::Time32`,self$pointer()),\n-        TIME64 = construct(`arrow::Time64`,self$pointer()),\n+        TIMESTAMP = shared_ptr(`arrow::Timestamp`,self$pointer()),\n+        TIME32 = shared_ptr(`arrow::Time32`,self$pointer()),\n+        TIME64 = shared_ptr(`arrow::Time64`,self$pointer()),\n         INTERVAL = stop(\"Type INTERVAL not implemented yet\"),\n-        DECIMAL = construct(`arrow::Decimal128Type`, self$pointer()),\n-        LIST = construct(`arrow::ListType`, self$pointer()),\n-        STRUCT = construct(`arrow::StructType`, self$pointer()),\n+        DECIMAL = shared_ptr(`arrow::Decimal128Type`, self$pointer()),\n+        LIST = shared_ptr(`arrow::ListType`, self$pointer()),\n+        STRUCT = shared_ptr(`arrow::StructType`, self$pointer()),\n         UNION = stop(\"Type UNION not implemented yet\"),\n-        DICTIONARY = construct(`arrow::DictionaryType`, self$pointer()),\n+        DICTIONARY = shared_ptr(`arrow::DictionaryType`, self$pointer()),\n         MAP = stop(\"Type MAP not implemented yet\")\n       )\n     }\n@@ -110,7 +111,7 @@ construct <- function(class, xp) {\n )\n \n `arrow::DataType`$dispatch <- function(xp){\n-  construct(`arrow::DataType`, xp)$..dispatch()\n+  shared_ptr(`arrow::DataType`, xp)$..dispatch()\n }\n \n #----- metadata\n@@ -243,88 +244,88 @@ construct <- function(class, xp) {\n #'\n #' @rdname DataType\n #' @export\n-int8 <- function() construct(`arrow::Int8`, Int8__initialize())\n+int8 <- function() shared_ptr(`arrow::Int8`, Int8__initialize())\n \n #' @rdname DataType\n #' @export\n-int16 <- function() construct(`arrow::Int16`, Int16__initialize())\n+int16 <- function() shared_ptr(`arrow::Int16`, Int16__initialize())\n \n #' @rdname DataType\n #' @export\n-int32 <- function() construct(`arrow::Int32`, Int32__initialize())\n+int32 <- function() shared_ptr(`arrow::Int32`, Int32__initialize())\n \n #' @rdname DataType\n #' @export\n-int64 <- function() construct(`arrow::Int64`, Int64__initialize())\n+int64 <- function() shared_ptr(`arrow::Int64`, Int64__initialize())\n \n #' @rdname DataType\n #' @export\n-uint8 <- function() construct(`arrow::UInt8`, UInt8__initialize())\n+uint8 <- function() shared_ptr(`arrow::UInt8`, UInt8__initialize())\n \n #' @rdname DataType\n #' @export\n-uint16 <- function() construct(`arrow::UInt16`, UInt16__initialize())\n+uint16 <- function() shared_ptr(`arrow::UInt16`, UInt16__initialize())\n \n #' @rdname DataType\n #' @export\n-uint32 <- function() construct(`arrow::UInt32`, UInt32__initialize())\n+uint32 <- function() shared_ptr(`arrow::UInt32`, UInt32__initialize())\n \n #' @rdname DataType\n #' @export\n-uint64 <- function() construct(`arrow::UInt64`, UInt64__initialize())\n+uint64 <- function() shared_ptr(`arrow::UInt64`, UInt64__initialize())\n \n #' @rdname DataType\n #' @export\n-float16 <- function() construct(`arrow::Float16`,  Float16__initialize())\n+float16 <- function() shared_ptr(`arrow::Float16`,  Float16__initialize())\n \n #' @rdname DataType\n #' @export\n-float32 <- function() construct(`arrow::Float32`, Float32__initialize())\n+float32 <- function() shared_ptr(`arrow::Float32`, Float32__initialize())\n \n #' @rdname DataType\n #' @export\n-float64 <- function() construct(`arrow::Float64`, Float64__initialize())\n+float64 <- function() shared_ptr(`arrow::Float64`, Float64__initialize())\n \n #' @rdname DataType\n #' @export\n-boolean <- function() construct(`arrow::Boolean`, Boolean__initialize())\n+boolean <- function() shared_ptr(`arrow::Boolean`, Boolean__initialize())\n \n #' @rdname DataType\n #' @export\n-utf8 <- function() construct(`arrow::Utf8`, Utf8__initialize())\n+utf8 <- function() shared_ptr(`arrow::Utf8`, Utf8__initialize())\n \n #' @rdname DataType\n #' @export\n-date32 <- function() construct(`arrow::Date32`, Date32__initialize())\n+date32 <- function() shared_ptr(`arrow::Date32`, Date32__initialize())\n \n #' @rdname DataType\n #' @export\n-date64 <- function() construct(`arrow::Date64`, Date64__initialize())\n+date64 <- function() shared_ptr(`arrow::Date64`, Date64__initialize())\n \n #' @rdname DataType\n #' @export\n-time32 <- function(unit) construct(`arrow::Time32`, Time32__initialize(unit))\n+time32 <- function(unit) shared_ptr(`arrow::Time32`, Time32__initialize(unit))\n \n #' @rdname DataType\n #' @export\n-time64 <- function(unit) construct(`arrow::Time64`, Time64__initialize(unit))\n+time64 <- function(unit) shared_ptr(`arrow::Time64`, Time64__initialize(unit))\n \n #' @rdname DataType\n #' @export\n-null <- function() construct(`arrow::Null`, Null__initialize())\n+null <- function() shared_ptr(`arrow::Null`, Null__initialize())\n \n #' @rdname DataType\n #' @export\n timestamp <- function(unit, timezone) {\n   if (missing(timezone)) {\n-    construct(`arrow::Timestamp`, Timestamp__initialize1(unit))\n+    shared_ptr(`arrow::Timestamp`, Timestamp__initialize1(unit))\n   } else {\n-    construct(`arrow::Timestamp`, Timestamp__initialize2(unit, timezone))\n+    shared_ptr(`arrow::Timestamp`, Timestamp__initialize2(unit, timezone))\n   }\n }\n \n #' @rdname DataType\n #' @export\n-decimal <- function(precision, scale) construct(`arrow::Decimal128Type`, Decimal128Type__initialize(precision, scale))\n+decimal <- function(precision, scale) shared_ptr(`arrow::Decimal128Type`, Decimal128Type__initialize(precision, scale))\n \n `arrow::NestedType` <- R6Class(\"arrow::NestedType\", inherit = `arrow::DataType`)\ndiff --git a/r/R/RcppExports.R b/r/R/RcppExports.R\nindex 2d90f33958..664d2784f9 100644\n--- a/r/R/RcppExports.R\n+++ b/r/R/RcppExports.R\n@@ -169,8 +169,12 @@ Column__data <- function(column) {\n     .Call(`_arrow_Column__data`, column)\n }\n \n-xptr_is_null <- function(xp) {\n-    .Call(`_arrow_xptr_is_null`, xp)\n+shared_ptr_is_null <- function(xp) {\n+    .Call(`_arrow_shared_ptr_is_null`, xp)\n+}\n+\n+unique_ptr_is_null <- function(xp) {\n+    .Call(`_arrow_unique_ptr_is_null`, xp)\n }\n \n Int8__initialize <- function() {\n@@ -341,10 +345,6 @@ TimestampType__unit <- function(type) {\n     .Call(`_arrow_TimestampType__unit`, type)\n }\n \n-Object__pointer_address <- function(obj) {\n-    .Call(`_arrow_Object__pointer_address`, obj)\n-}\n-\n DictionaryType__initialize <- function(type, array, ordered) {\n     .Call(`_arrow_DictionaryType__initialize`, type, array, ordered)\n }\n@@ -477,6 +477,50 @@ MemoryPool__max_memory <- function(pool) {\n     .Call(`_arrow_MemoryPool__max_memory`, pool)\n }\n \n+ipc___Message__body_length <- function(message) {\n+    .Call(`_arrow_ipc___Message__body_length`, message)\n+}\n+\n+ipc___Message__metadata <- function(message) {\n+    .Call(`_arrow_ipc___Message__metadata`, message)\n+}\n+\n+ipc___Message__body <- function(message) {\n+    .Call(`_arrow_ipc___Message__body`, message)\n+}\n+\n+ipc___Message__Verify <- function(message) {\n+    .Call(`_arrow_ipc___Message__Verify`, message)\n+}\n+\n+ipc___Message__type <- function(message) {\n+    .Call(`_arrow_ipc___Message__type`, message)\n+}\n+\n+ipc___Message__Equals <- function(x, y) {\n+    .Call(`_arrow_ipc___Message__Equals`, x, y)\n+}\n+\n+ipc___ReadRecordBatch__Message__Schema <- function(message, schema) {\n+    .Call(`_arrow_ipc___ReadRecordBatch__Message__Schema`, message, schema)\n+}\n+\n+ipc___ReadSchema_InputStream <- function(stream) {\n+    .Call(`_arrow_ipc___ReadSchema_InputStream`, stream)\n+}\n+\n+ipc___MessageReader__Open <- function(stream) {\n+    .Call(`_arrow_ipc___MessageReader__Open`, stream)\n+}\n+\n+ipc___MessageReader__ReadNextMessage <- function(reader) {\n+    .Call(`_arrow_ipc___MessageReader__ReadNextMessage`, reader)\n+}\n+\n+ipc___ReadMessage <- function(stream) {\n+    .Call(`_arrow_ipc___ReadMessage`, stream)\n+}\n+\n RecordBatch__num_columns <- function(x) {\n     .Call(`_arrow_RecordBatch__num_columns`, x)\n }\ndiff --git a/r/R/RecordBatch.R b/r/R/RecordBatch.R\nindex 4ac8213a9f..8358e37beb 100644\n--- a/r/R/RecordBatch.R\n+++ b/r/R/RecordBatch.R\n@@ -21,8 +21,8 @@\n   public = list(\n     num_columns = function() RecordBatch__num_columns(self),\n     num_rows = function() RecordBatch__num_rows(self),\n-    schema = function() construct(`arrow::Schema`, RecordBatch__schema(self)),\n-    column = function(i) construct(`arrow::Array`, RecordBatch__column(self, i)),\n+    schema = function() shared_ptr(`arrow::Schema`, RecordBatch__schema(self)),\n+    column = function(i) shared_ptr(`arrow::Array`, RecordBatch__column(self, i)),\n     column_name = function(i) RecordBatch__column_name(self, i),\n     names = function() RecordBatch__names(self),\n     Equals = function(other) {\n@@ -30,13 +30,13 @@\n       RecordBatch__Equals(self, other)\n     },\n     RemoveColumn = function(i){\n-      construct(`arrow::RecordBatch`, RecordBatch__RemoveColumn(self, i))\n+      shared_ptr(`arrow::RecordBatch`, RecordBatch__RemoveColumn(self, i))\n     },\n     Slice = function(offset, length = NULL) {\n       if (is.null(length)) {\n-        construct(`arrow::RecordBatch`, RecordBatch__Slice1(self, offset))\n+        shared_ptr(`arrow::RecordBatch`, RecordBatch__Slice1(self, offset))\n       } else {\n-        construct(`arrow::RecordBatch`, RecordBatch__Slice2(self, offset, length))\n+        shared_ptr(`arrow::RecordBatch`, RecordBatch__Slice2(self, offset, length))\n       }\n     },\n \n@@ -65,5 +65,5 @@\n #'\n #' @export\n record_batch <- function(.data){\n-  construct(`arrow::RecordBatch`, RecordBatch__from_dataframe(.data))\n+  shared_ptr(`arrow::RecordBatch`, RecordBatch__from_dataframe(.data))\n }\ndiff --git a/r/R/RecordBatchReader.R b/r/R/RecordBatchReader.R\nindex 4232b73c09..3503753842 100644\n--- a/r/R/RecordBatchReader.R\n+++ b/r/R/RecordBatchReader.R\n@@ -19,9 +19,9 @@\n \n `arrow::RecordBatchReader` <- R6Class(\"arrow::RecordBatchReader\", inherit = `arrow::Object`,\n   public = list(\n-    schema = function() construct(`arrow::Schema`, RecordBatchReader__schema(self)),\n+    schema = function() shared_ptr(`arrow::Schema`, RecordBatchReader__schema(self)),\n     ReadNext = function() {\n-      construct(`arrow::RecordBatch`, RecordBatchReader__ReadNext(self))\n+      shared_ptr(`arrow::RecordBatch`, RecordBatchReader__ReadNext(self))\n     }\n   )\n )\n@@ -30,9 +30,9 @@\n \n `arrow::ipc::RecordBatchFileReader` <- R6Class(\"arrow::ipc::RecordBatchFileReader\", inherit = `arrow::Object`,\n   public = list(\n-    schema = function() construct(`arrow::Schema`, ipc___RecordBatchFileReader__schema(self)),\n+    schema = function() shared_ptr(`arrow::Schema`, ipc___RecordBatchFileReader__schema(self)),\n     num_record_batches = function() ipc___RecordBatchFileReader__num_record_batches(self),\n-    ReadRecordBatch = function(i) construct(`arrow::RecordBatch`, ipc___RecordBatchFileReader__ReadRecordBatch(self, i))\n+    ReadRecordBatch = function(i) shared_ptr(`arrow::RecordBatch`, ipc___RecordBatchFileReader__ReadRecordBatch(self, i))\n   )\n )\n \n@@ -47,7 +47,7 @@ record_batch_stream_reader <- function(stream){\n \n #' @export\n `record_batch_stream_reader.arrow::io::InputStream` <- function(stream) {\n-  construct(`arrow::ipc::RecordBatchStreamReader`, ipc___RecordBatchStreamReader__Open(stream))\n+  shared_ptr(`arrow::ipc::RecordBatchStreamReader`, ipc___RecordBatchStreamReader__Open(stream))\n }\n \n #' @export\n@@ -67,7 +67,7 @@ record_batch_file_reader <- function(file) {\n \n #' @export\n `record_batch_file_reader.arrow::io::RandomAccessFile` <- function(file) {\n-  construct(`arrow::ipc::RecordBatchFileReader`, ipc___RecordBatchFileReader__Open(file))\n+  shared_ptr(`arrow::ipc::RecordBatchFileReader`, ipc___RecordBatchFileReader__Open(file))\n }\n \n #' @export\n@@ -135,6 +135,13 @@ read_record_batch.raw <- function(stream, ...){\n   stream$ReadRecordBatch(i)\n }\n \n+#' @export\n+`read_record_batch.arrow::ipc::Message` <- function(stream, schema, ...) {\n+  assert_that(inherits(schema, \"arrow::Schema\"))\n+  shared_ptr(`arrow::RecordBatch`, ipc___ReadRecordBatch__Message__Schema(stream, schema))\n+}\n+\n+\n #--------- read_table\n \n #' Read an arrow::Table from a stream\n@@ -166,12 +173,12 @@ read_table.fs_path <- function(stream) {\n \n #' @export\n `read_table.arrow::ipc::RecordBatchFileReader` <- function(stream) {\n-  construct(`arrow::Table`, Table__from_RecordBatchFileReader(stream))\n+  shared_ptr(`arrow::Table`, Table__from_RecordBatchFileReader(stream))\n }\n \n #' @export\n `read_table.arrow::ipc::RecordBatchStreamReader` <- function(stream) {\n-  construct(`arrow::Table`, Table__from_RecordBatchStreamReader(stream))\n+  shared_ptr(`arrow::Table`, Table__from_RecordBatchStreamReader(stream))\n }\n \n #' @export\ndiff --git a/r/R/RecordBatchWriter.R b/r/R/RecordBatchWriter.R\nindex 687c83086d..515b6986b9 100644\n--- a/r/R/RecordBatchWriter.R\n+++ b/r/R/RecordBatchWriter.R\n@@ -41,7 +41,7 @@ record_batch_file_writer <- function(stream, schema) {\n     inherits(stream, \"arrow::io::OutputStream\"),\n     inherits(schema, \"arrow::Schema\")\n   )\n-  construct(`arrow::ipc::RecordBatchFileWriter`, ipc___RecordBatchFileWriter__Open(stream, schema))\n+  shared_ptr(`arrow::ipc::RecordBatchFileWriter`, ipc___RecordBatchFileWriter__Open(stream, schema))\n }\n \n #' Create a record batch stream writer\n@@ -55,7 +55,7 @@ record_batch_stream_writer <- function(stream, schema) {\n     inherits(stream, \"arrow::io::OutputStream\"),\n     inherits(schema, \"arrow::Schema\")\n   )\n-  construct(`arrow::ipc::RecordBatchStreamWriter`, ipc___RecordBatchStreamWriter__Open(stream, schema))\n+  shared_ptr(`arrow::ipc::RecordBatchStreamWriter`, ipc___RecordBatchStreamWriter__Open(stream, schema))\n }\n \n #-------- write_record_batch\ndiff --git a/r/R/Schema.R b/r/R/Schema.R\nindex f2262bfc59..505279a5c4 100644\n--- a/r/R/Schema.R\n+++ b/r/R/Schema.R\n@@ -22,12 +22,47 @@\n   public = list(\n     ToString = function() Schema__ToString(self),\n     num_fields = function() Schema__num_fields(self),\n-    field = function(i) construct(`arrow::Field`, Schema__field(self, i))\n+    field = function(i) shared_ptr(`arrow::Field`, Schema__field(self, i))\n   )\n )\n \n-#' @rdname DataType\n+#' Schema functions\n+#'\n+#' @param ... named list of data types\n+#'\n+#' @return a Schema\n+#'\n #' @export\n schema <- function(...){\n-  construct(`arrow::Schema`, schema_(.fields(list(...))))\n+  shared_ptr(`arrow::Schema`, schema_(.fields(list(...))))\n+}\n+\n+#' read a Schema from a stream\n+#'\n+#' @param stream a stream\n+#' @param ... currently ignored\n+#'\n+#' @export\n+read_schema <- function(stream, ...) {\n+  UseMethod(\"read_schema\")\n+}\n+\n+#' @export\n+read_schema.default <- function(stream, ...) {\n+  stop(\"unsupported\")\n+}\n+\n+#' @export\n+`read_schema.arrow::io::InputStream` <- function(stream, ...) {\n+  shared_ptr(`arrow::Schema`, ipc___ReadSchema_InputStream(stream))\n+}\n+\n+#' @export\n+`read_schema.arrow::Buffer` <- function(stream, ...) {\n+  read_schema(buffer_reader(stream), ...)\n+}\n+\n+#' @export\n+`read_schema.raw` <- function(stream, ...) {\n+  read_schema(buffer(stream), ...)\n }\ndiff --git a/r/R/Struct.R b/r/R/Struct.R\nindex 047cddc669..ec786996c9 100644\n--- a/r/R/Struct.R\n+++ b/r/R/Struct.R\n@@ -24,5 +24,5 @@\n #' @rdname DataType\n #' @export\n struct <- function(...){\n-  construct(`arrow::StructType`, struct_(.fields(list(...))))\n+  shared_ptr(`arrow::StructType`, struct_(.fields(list(...))))\n }\ndiff --git a/r/R/Table.R b/r/R/Table.R\nindex 0d401b9876..2574448770 100644\n--- a/r/R/Table.R\n+++ b/r/R/Table.R\n@@ -21,8 +21,8 @@\n   public = list(\n     num_columns = function() Table__num_columns(self),\n     num_rows = function() Table__num_rows(self),\n-    schema = function() construct(`arrow::Schema`, Table__schema(self)),\n-    column = function(i) construct(`arrow::Column`, Table__column(self, i)),\n+    schema = function() shared_ptr(`arrow::Schema`, Table__schema(self)),\n+    column = function(i) shared_ptr(`arrow::Column`, Table__column(self, i)),\n \n     serialize = function(output_stream, ...) write_table(self, output_stream, ...)\n   )\n@@ -34,7 +34,7 @@\n #'\n #' @export\n table <- function(.data){\n-  construct(`arrow::Table`, Table__from_dataframe(.data))\n+  shared_ptr(`arrow::Table`, Table__from_dataframe(.data))\n }\n \n #' @export\ndiff --git a/r/R/array.R b/r/R/array.R\nindex a514df2e15..869479b198 100644\n--- a/r/R/array.R\n+++ b/r/R/array.R\n@@ -29,14 +29,14 @@\n     type_id = function() Array__type_id(self),\n     Equals = function(other) Array__Equals(self, other),\n     ApproxEquals = function(othet) Array__ApproxEquals(self, other),\n-    data = function() construct(`arrow::ArrayData`, Array__data(self)),\n+    data = function() shared_ptr(`arrow::ArrayData`, Array__data(self)),\n     as_vector = function() Array__as_vector(self),\n     ToString = function() Array__ToString(self),\n     Slice = function(offset, length = NULL){\n       if (is.null(length)) {\n-        construct(`arrow::Array`, Array__Slice1(self, offset))\n+        shared_ptr(`arrow::Array`, Array__Slice1(self, offset))\n       } else {\n-        construct(`arrow::Array`, Array__Slice2(self, offset, length))\n+        shared_ptr(`arrow::Array`, Array__Slice2(self, offset, length))\n       }\n     },\n     RangeEquals = function(other, start_idx, end_idx, other_start_idx) {\n@@ -47,9 +47,9 @@\n )\n \n `arrow::Array`$dispatch <- function(xp){\n-  a <- construct(`arrow::Array`, xp)\n+  a <- shared_ptr(`arrow::Array`, xp)\n   if(a$type_id() == Type$DICTIONARY){\n-    a <- construct(`arrow::DictionaryArray`, xp)\n+    a <- shared_ptr(`arrow::DictionaryArray`, xp)\n   }\n   a\n }\ndiff --git a/r/R/buffer.R b/r/R/buffer.R\nindex 3c012d8a95..0101a7eb2a 100644\n--- a/r/R/buffer.R\n+++ b/r/R/buffer.R\n@@ -47,15 +47,15 @@ buffer.default <- function(x) {\n \n #' @export\n buffer.raw <- function(x) {\n-  construct(`arrow::Buffer`, r___RBuffer__initialize(x))\n+  shared_ptr(`arrow::Buffer`, r___RBuffer__initialize(x))\n }\n \n #' @export\n buffer.numeric <- function(x) {\n-  construct(`arrow::Buffer`, r___RBuffer__initialize(x))\n+  shared_ptr(`arrow::Buffer`, r___RBuffer__initialize(x))\n }\n \n #' @export\n buffer.integer <- function(x) {\n-  construct(`arrow::Buffer`, r___RBuffer__initialize(x))\n+  shared_ptr(`arrow::Buffer`, r___RBuffer__initialize(x))\n }\ndiff --git a/r/R/dictionary.R b/r/R/dictionary.R\nindex 28147f8fba..d8a71d92a9 100644\n--- a/r/R/dictionary.R\n+++ b/r/R/dictionary.R\n@@ -22,7 +22,7 @@\n   public = list(\n     index_type = function() `arrow::DataType`$dispatch(DictionaryType__index_type(self)),\n     name = function() DictionaryType__name(self),\n-    dictionary = function() construct(`arrow::Array`, DictionaryType__dictionary(self)),\n+    dictionary = function() shared_ptr(`arrow::Array`, DictionaryType__dictionary(self)),\n     ordered = function() DictionaryType__ordered(self)\n   )\n \n@@ -40,5 +40,5 @@ dictionary <- function(type, values, ordered = FALSE) {\n     inherits(type, \"arrow::DataType\"),\n     inherits(values, \"arrow::Array\")\n   )\n-  construct(`arrow::DictionaryType`, DictionaryType__initialize(type, values, ordered))\n+  shared_ptr(`arrow::DictionaryType`, DictionaryType__initialize(type, values, ordered))\n }\ndiff --git a/r/R/enums.R b/r/R/enums.R\nindex 657dc1a4b2..35e6aaa440 100644\n--- a/r/R/enums.R\n+++ b/r/R/enums.R\n@@ -64,3 +64,9 @@ StatusCode <- enum(\"arrow::StatusCode\",\n FileMode <- enum(\"arrow::io::FileMode\",\n   READ = 0L, WRITE = 1L, READWRITE = 2L\n )\n+\n+#' @rdname DataType\n+#' @export\n+MessageType <- enum(\"arrow::ipc::Message::Type\",\n+  NONE = 0L, SCHEMA = 1L, DICTIONARY_BATCH = 2L, RECORD_BATCH = 3L, TENSOR = 4L\n+)\ndiff --git a/r/R/io.R b/r/R/io.R\nindex 9b0c2cdc7f..d453492741 100644\n--- a/r/R/io.R\n+++ b/r/R/io.R\n@@ -21,7 +21,7 @@\n \n `arrow::io::Readable` <- R6Class(\"arrow::io::Readable\", inherit = `arrow::Object`,\n   public = list(\n-    Read = function(nbytes) construct(`arrow::Buffer`, io___Readable__Read(self, nbytes))\n+    Read = function(nbytes) shared_ptr(`arrow::Buffer`, io___Readable__Read(self, nbytes))\n   )\n )\n \n@@ -50,7 +50,7 @@\n `arrow::io::BufferOutputStream` <- R6Class(\"arrow::io::BufferOutputStream\", inherit = `arrow::io::OutputStream`,\n   public = list(\n     capacity = function() io___BufferOutputStream__capacity(self),\n-    Finish = function() construct(`arrow::Buffer`, io___BufferOutputStream__Finish(self)),\n+    Finish = function() shared_ptr(`arrow::Buffer`, io___BufferOutputStream__Finish(self)),\n     Write = function(bytes) io___BufferOutputStream__Write(self, bytes),\n     Tell = function() io___BufferOutputStream__Tell(self)\n   )\n@@ -88,38 +88,38 @@\n #' @rdname io\n #' @export\n mmap_create <- `arrow::io::MemoryMappedFile`$create <- function(path, size) {\n-  construct(`arrow::io::MemoryMappedFile`, io___MemoryMappedFile__Create(fs::path_abs(path), size))\n+  shared_ptr(`arrow::io::MemoryMappedFile`, io___MemoryMappedFile__Create(fs::path_abs(path), size))\n }\n \n #' @rdname io\n #' @export\n mmap_open <- `arrow::io::MemoryMappedFile`$open <- function(path, mode = c(\"read\", \"write\", \"readwrite\")) {\n   mode <- match(match.arg(mode), c(\"read\", \"write\", \"readwrite\")) - 1L\n-  construct(`arrow::io::MemoryMappedFile`, io___MemoryMappedFile__Open(fs::path_abs(path), mode))\n+  shared_ptr(`arrow::io::MemoryMappedFile`, io___MemoryMappedFile__Open(fs::path_abs(path), mode))\n }\n \n #' @rdname io\n #' @export\n file_open <- `arrow::io::ReadableFile`$open <- function(path) {\n-  construct(`arrow::io::ReadableFile`, io___ReadableFile__Open(fs::path_abs(path)))\n+  shared_ptr(`arrow::io::ReadableFile`, io___ReadableFile__Open(fs::path_abs(path)))\n }\n \n #' @rdname io\n #' @export\n file_output_stream <- function(path) {\n-  construct(`arrow::io::FileOutputStream`, io___FileOutputStream__Open(path))\n+  shared_ptr(`arrow::io::FileOutputStream`, io___FileOutputStream__Open(path))\n }\n \n #' @rdname io\n #' @export\n mock_output_stream <- function() {\n-  construct(`arrow::io::MockOutputStream`, io___MockOutputStream__initialize())\n+  shared_ptr(`arrow::io::MockOutputStream`, io___MockOutputStream__initialize())\n }\n \n #' @rdname io\n #' @export\n buffer_output_stream <- function(initial_capacity = 0L) {\n-  construct(`arrow::io::BufferOutputStream`, io___BufferOutputStream__Create(initial_capacity))\n+  shared_ptr(`arrow::io::BufferOutputStream`, io___BufferOutputStream__Create(initial_capacity))\n }\n \n #' @rdname io\n@@ -136,7 +136,7 @@ fixed_size_buffer_writer.default <- function(buffer){\n #' @export\n `fixed_size_buffer_writer.arrow::Buffer` <- function(buffer){\n   assert_that(buffer$is_mutable())\n-  construct(`arrow::io::FixedSizeBufferWriter`, io___FixedSizeBufferWriter__initialize(buffer))\n+  shared_ptr(`arrow::io::FixedSizeBufferWriter`, io___FixedSizeBufferWriter__initialize(buffer))\n }\n \n #' Create a `arrow::BufferReader`\n@@ -150,7 +150,7 @@ buffer_reader <- function(x) {\n \n #' @export\n `buffer_reader.arrow::Buffer` <- function(x) {\n-  construct(`arrow::io::BufferReader`, io___BufferReader__initialize(x))\n+  shared_ptr(`arrow::io::BufferReader`, io___BufferReader__initialize(x))\n }\n \n #' @export\ndiff --git a/r/R/memory_pool.R b/r/R/memory_pool.R\nindex cc2fcc72ec..49f65d2a1f 100644\n--- a/r/R/memory_pool.R\n+++ b/r/R/memory_pool.R\n@@ -29,5 +29,5 @@\n )\n \n default_memory_pool <- function() {\n-  construct(`arrow::MemoryPool`, MemoryPool__default())\n+  shared_ptr(`arrow::MemoryPool`, MemoryPool__default())\n }\ndiff --git a/r/R/message.R b/r/R/message.R\nnew file mode 100644\nindex 0000000000..f31fb9a53b\n--- /dev/null\n+++ b/r/R/message.R\n@@ -0,0 +1,86 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include R6.R\n+\n+`arrow::ipc::Message` <- R6Class(\"arrow::ipc::Message\", inherit = `arrow::Object`,\n+  public = list(\n+    Equals = function(other){\n+      assert_that(inherits(other), \"arrow::ipc::Message\")\n+      ipc___Message__Equals(self, other)\n+    },\n+    body_length = function() ipc___Message__body_length(self),\n+    Verify = function() ipc___Message__Verify(self),\n+    type = function() ipc___Message__type(self)\n+  ),\n+  active = list(\n+    metadata = function() shared_ptr(`arrow::Buffer`, ipc___Message__metadata(self)),\n+    body = function() shared_ptr(`arrow::Buffer`, ipc___Message__body(self))\n+  )\n+)\n+\n+#' @export\n+`==.arrow::ipc::Message` <- function(x, y) x$Equals(y)\n+\n+`arrow::ipc::MessageReader` <- R6Class(\"arrow::ipc::MessageReader\", inherit = `arrow::Object`,\n+  public = list(\n+    ReadNextMessage = function() unique_ptr(`arrow::ipc::Message`, ipc___MessageReader__ReadNextMessage(self))\n+  )\n+)\n+\n+#' Read a Message from a stream\n+#'\n+#' @param stream an InputStream\n+#'\n+#' @export\n+read_message <- function(stream) {\n+  UseMethod(\"read_message\")\n+}\n+\n+#' @export\n+read_message.default <- function(stream) {\n+  stop(\"unsupported\")\n+}\n+\n+#' @export\n+`read_message.arrow::io::InputStream` <- function(stream) {\n+  unique_ptr(`arrow::ipc::Message`, ipc___ReadMessage(stream) )\n+}\n+\n+#' Open a MessageReader that reads from a stream\n+#'\n+#' @param stream an InputStream\n+#'\n+#' @export\n+message_reader <- function(stream) {\n+  UseMethod(\"message_reader\")\n+}\n+\n+#' @export\n+message_reader.default <- function(stream) {\n+  stop(\"unsupported\")\n+}\n+\n+#' @export\n+message_reader.raw <- function(stream) {\n+  message_reader(buffer_reader(stream))\n+}\n+\n+#' @export\n+`message_reader.arrow::io::InputStream` <- function(stream) {\n+  unique_ptr(`arrow::ipc::MessageReader`, ipc___MessageReader__Open(stream))\n+}\ndiff --git a/r/man/DataType.Rd b/r/man/DataType.Rd\nindex 5063bbc64a..b10414020b 100644\n--- a/r/man/DataType.Rd\n+++ b/r/man/DataType.Rd\n@@ -1,6 +1,5 @@\n % Generated by roxygen2: do not edit by hand\n-% Please edit documentation in R/enums.R, R/R6.R, R/List.R, R/Schema.R,\n-%   R/Struct.R\n+% Please edit documentation in R/enums.R, R/R6.R, R/List.R, R/Struct.R\n \\docType{data}\n \\name{TimeUnit}\n \\alias{TimeUnit}\n@@ -8,6 +7,7 @@\n \\alias{Type}\n \\alias{StatusCode}\n \\alias{FileMode}\n+\\alias{MessageType}\n \\alias{int8}\n \\alias{int16}\n \\alias{int32}\n@@ -29,7 +29,6 @@\n \\alias{timestamp}\n \\alias{decimal}\n \\alias{list_of}\n-\\alias{schema}\n \\alias{struct}\n \\title{Apache Arrow data types}\n \\format{An object of class \\code{arrow::TimeUnit::type} (inherits from \\code{arrow-enum}) of length 4.}\n@@ -44,6 +43,8 @@ StatusCode\n \n FileMode\n \n+MessageType\n+\n int8()\n \n int16()\n@@ -86,8 +87,6 @@ decimal(precision, scale)\n \n list_of(type)\n \n-schema(...)\n-\n struct(...)\n }\n \\arguments{\ndiff --git a/r/man/message_reader.Rd b/r/man/message_reader.Rd\nnew file mode 100644\nindex 0000000000..0d8b1e7ff6\n--- /dev/null\n+++ b/r/man/message_reader.Rd\n@@ -0,0 +1,14 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/message.R\n+\\name{message_reader}\n+\\alias{message_reader}\n+\\title{Open a MessageReader that reads from a stream}\n+\\usage{\n+message_reader(stream)\n+}\n+\\arguments{\n+\\item{stream}{an InputStream}\n+}\n+\\description{\n+Open a MessageReader that reads from a stream\n+}\ndiff --git a/r/man/read_message.Rd b/r/man/read_message.Rd\nnew file mode 100644\nindex 0000000000..444c76c862\n--- /dev/null\n+++ b/r/man/read_message.Rd\n@@ -0,0 +1,14 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/message.R\n+\\name{read_message}\n+\\alias{read_message}\n+\\title{Read a Message from a stream}\n+\\usage{\n+read_message(stream)\n+}\n+\\arguments{\n+\\item{stream}{an InputStream}\n+}\n+\\description{\n+Read a Message from a stream\n+}\ndiff --git a/r/man/read_schema.Rd b/r/man/read_schema.Rd\nnew file mode 100644\nindex 0000000000..408fd1baaa\n--- /dev/null\n+++ b/r/man/read_schema.Rd\n@@ -0,0 +1,16 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/Schema.R\n+\\name{read_schema}\n+\\alias{read_schema}\n+\\title{read a Schema from a stream}\n+\\usage{\n+read_schema(stream, ...)\n+}\n+\\arguments{\n+\\item{stream}{a stream}\n+\n+\\item{...}{currently ignored}\n+}\n+\\description{\n+read a Schema from a stream\n+}\ndiff --git a/r/man/schema.Rd b/r/man/schema.Rd\nnew file mode 100644\nindex 0000000000..9b77d47b61\n--- /dev/null\n+++ b/r/man/schema.Rd\n@@ -0,0 +1,17 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/Schema.R\n+\\name{schema}\n+\\alias{schema}\n+\\title{Schema functions}\n+\\usage{\n+schema(...)\n+}\n+\\arguments{\n+\\item{...}{named list of data types}\n+}\n+\\value{\n+a Schema\n+}\n+\\description{\n+Schema functions\n+}\ndiff --git a/r/src/RcppExports.cpp b/r/src/RcppExports.cpp\nindex 3e61cee3ad..758aa70a60 100644\n--- a/r/src/RcppExports.cpp\n+++ b/r/src/RcppExports.cpp\n@@ -482,14 +482,25 @@ BEGIN_RCPP\n     return rcpp_result_gen;\n END_RCPP\n }\n-// xptr_is_null\n-bool xptr_is_null(SEXP xp);\n-RcppExport SEXP _arrow_xptr_is_null(SEXP xpSEXP) {\n+// shared_ptr_is_null\n+bool shared_ptr_is_null(SEXP xp);\n+RcppExport SEXP _arrow_shared_ptr_is_null(SEXP xpSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n     Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);\n-    rcpp_result_gen = Rcpp::wrap(xptr_is_null(xp));\n+    rcpp_result_gen = Rcpp::wrap(shared_ptr_is_null(xp));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// unique_ptr_is_null\n+bool unique_ptr_is_null(SEXP xp);\n+RcppExport SEXP _arrow_unique_ptr_is_null(SEXP xpSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);\n+    rcpp_result_gen = Rcpp::wrap(unique_ptr_is_null(xp));\n     return rcpp_result_gen;\n END_RCPP\n }\n@@ -943,17 +954,6 @@ BEGIN_RCPP\n     return rcpp_result_gen;\n END_RCPP\n }\n-// Object__pointer_address\n-std::string Object__pointer_address(SEXP obj);\n-RcppExport SEXP _arrow_Object__pointer_address(SEXP objSEXP) {\n-BEGIN_RCPP\n-    Rcpp::RObject rcpp_result_gen;\n-    Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);\n-    rcpp_result_gen = Rcpp::wrap(Object__pointer_address(obj));\n-    return rcpp_result_gen;\n-END_RCPP\n-}\n // DictionaryType__initialize\n std::shared_ptr<arrow::DataType> DictionaryType__initialize(const std::shared_ptr<arrow::DataType>& type, const std::shared_ptr<arrow::Array>& array, bool ordered);\n RcppExport SEXP _arrow_DictionaryType__initialize(SEXP typeSEXP, SEXP arraySEXP, SEXP orderedSEXP) {\n@@ -1036,23 +1036,23 @@ BEGIN_RCPP\n END_RCPP\n }\n // Field__name\n-std::string Field__name(std::shared_ptr<arrow::Field> type);\n+std::string Field__name(const std::shared_ptr<arrow::Field>& type);\n RcppExport SEXP _arrow_Field__name(SEXP typeSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< std::shared_ptr<arrow::Field> >::type type(typeSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type type(typeSEXP);\n     rcpp_result_gen = Rcpp::wrap(Field__name(type));\n     return rcpp_result_gen;\n END_RCPP\n }\n // Field__nullable\n-bool Field__nullable(std::shared_ptr<arrow::Field> type);\n+bool Field__nullable(const std::shared_ptr<arrow::Field>& type);\n RcppExport SEXP _arrow_Field__nullable(SEXP typeSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< std::shared_ptr<arrow::Field> >::type type(typeSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Field>& >::type type(typeSEXP);\n     rcpp_result_gen = Rcpp::wrap(Field__nullable(type));\n     return rcpp_result_gen;\n END_RCPP\n@@ -1299,27 +1299,150 @@ BEGIN_RCPP\n END_RCPP\n }\n // MemoryPool__bytes_allocated\n-int MemoryPool__bytes_allocated(std::shared_ptr<arrow::MemoryPool> pool);\n+int MemoryPool__bytes_allocated(const std::shared_ptr<arrow::MemoryPool>& pool);\n RcppExport SEXP _arrow_MemoryPool__bytes_allocated(SEXP poolSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< std::shared_ptr<arrow::MemoryPool> >::type pool(poolSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::MemoryPool>& >::type pool(poolSEXP);\n     rcpp_result_gen = Rcpp::wrap(MemoryPool__bytes_allocated(pool));\n     return rcpp_result_gen;\n END_RCPP\n }\n // MemoryPool__max_memory\n-int MemoryPool__max_memory(std::shared_ptr<arrow::MemoryPool> pool);\n+int MemoryPool__max_memory(const std::shared_ptr<arrow::MemoryPool>& pool);\n RcppExport SEXP _arrow_MemoryPool__max_memory(SEXP poolSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< std::shared_ptr<arrow::MemoryPool> >::type pool(poolSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::MemoryPool>& >::type pool(poolSEXP);\n     rcpp_result_gen = Rcpp::wrap(MemoryPool__max_memory(pool));\n     return rcpp_result_gen;\n END_RCPP\n }\n+// ipc___Message__body_length\n+int64_t ipc___Message__body_length(const std::unique_ptr<arrow::ipc::Message>& message);\n+RcppExport SEXP _arrow_ipc___Message__body_length(SEXP messageSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___Message__body_length(message));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___Message__metadata\n+std::shared_ptr<arrow::Buffer> ipc___Message__metadata(const std::unique_ptr<arrow::ipc::Message>& message);\n+RcppExport SEXP _arrow_ipc___Message__metadata(SEXP messageSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___Message__metadata(message));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___Message__body\n+std::shared_ptr<arrow::Buffer> ipc___Message__body(const std::unique_ptr<arrow::ipc::Message>& message);\n+RcppExport SEXP _arrow_ipc___Message__body(SEXP messageSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___Message__body(message));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___Message__Verify\n+int64_t ipc___Message__Verify(const std::unique_ptr<arrow::ipc::Message>& message);\n+RcppExport SEXP _arrow_ipc___Message__Verify(SEXP messageSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___Message__Verify(message));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___Message__type\n+arrow::ipc::Message::Type ipc___Message__type(const std::unique_ptr<arrow::ipc::Message>& message);\n+RcppExport SEXP _arrow_ipc___Message__type(SEXP messageSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___Message__type(message));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___Message__Equals\n+bool ipc___Message__Equals(const std::unique_ptr<arrow::ipc::Message>& x, const std::unique_ptr<arrow::ipc::Message>& y);\n+RcppExport SEXP _arrow_ipc___Message__Equals(SEXP xSEXP, SEXP ySEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type x(xSEXP);\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type y(ySEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___Message__Equals(x, y));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___ReadRecordBatch__Message__Schema\n+std::shared_ptr<arrow::RecordBatch> ipc___ReadRecordBatch__Message__Schema(const std::unique_ptr<arrow::ipc::Message>& message, const std::shared_ptr<arrow::Schema>& schema);\n+RcppExport SEXP _arrow_ipc___ReadRecordBatch__Message__Schema(SEXP messageSEXP, SEXP schemaSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::Message>& >::type message(messageSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___ReadRecordBatch__Message__Schema(message, schema));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___ReadSchema_InputStream\n+std::shared_ptr<arrow::Schema> ipc___ReadSchema_InputStream(const std::shared_ptr<arrow::io::InputStream>& stream);\n+RcppExport SEXP _arrow_ipc___ReadSchema_InputStream(SEXP streamSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___ReadSchema_InputStream(stream));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___MessageReader__Open\n+std::unique_ptr<arrow::ipc::MessageReader> ipc___MessageReader__Open(const std::shared_ptr<arrow::io::InputStream>& stream);\n+RcppExport SEXP _arrow_ipc___MessageReader__Open(SEXP streamSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___MessageReader__Open(stream));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___MessageReader__ReadNextMessage\n+std::unique_ptr<arrow::ipc::Message> ipc___MessageReader__ReadNextMessage(const std::unique_ptr<arrow::ipc::MessageReader>& reader);\n+RcppExport SEXP _arrow_ipc___MessageReader__ReadNextMessage(SEXP readerSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::unique_ptr<arrow::ipc::MessageReader>& >::type reader(readerSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___MessageReader__ReadNextMessage(reader));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ipc___ReadMessage\n+std::unique_ptr<arrow::ipc::Message> ipc___ReadMessage(const std::shared_ptr<arrow::io::InputStream>& stream);\n+RcppExport SEXP _arrow_ipc___ReadMessage(SEXP streamSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::io::InputStream>& >::type stream(streamSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ipc___ReadMessage(stream));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n // RecordBatch__num_columns\n int RecordBatch__num_columns(const std::shared_ptr<arrow::RecordBatch>& x);\n RcppExport SEXP _arrow_RecordBatch__num_columns(SEXP xSEXP) {\n@@ -1435,24 +1558,24 @@ BEGIN_RCPP\n END_RCPP\n }\n // RecordBatch__Slice1\n-std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(std::shared_ptr<arrow::RecordBatch>& self, int offset);\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(const std::shared_ptr<arrow::RecordBatch>& self, int offset);\n RcppExport SEXP _arrow_RecordBatch__Slice1(SEXP selfSEXP, SEXP offsetSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);\n     Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);\n     rcpp_result_gen = Rcpp::wrap(RecordBatch__Slice1(self, offset));\n     return rcpp_result_gen;\n END_RCPP\n }\n // RecordBatch__Slice2\n-std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(std::shared_ptr<arrow::RecordBatch>& self, int offset, int length);\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(const std::shared_ptr<arrow::RecordBatch>& self, int offset, int length);\n RcppExport SEXP _arrow_RecordBatch__Slice2(SEXP selfSEXP, SEXP offsetSEXP, SEXP lengthSEXP) {\n BEGIN_RCPP\n     Rcpp::RObject rcpp_result_gen;\n     Rcpp::RNGScope rcpp_rngScope_gen;\n-    Rcpp::traits::input_parameter< std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type self(selfSEXP);\n     Rcpp::traits::input_parameter< int >::type offset(offsetSEXP);\n     Rcpp::traits::input_parameter< int >::type length(lengthSEXP);\n     rcpp_result_gen = Rcpp::wrap(RecordBatch__Slice2(self, offset, length));\n@@ -1727,7 +1850,8 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_Column__null_count\", (DL_FUNC) &_arrow_Column__null_count, 1},\n     {\"_arrow_Column__type\", (DL_FUNC) &_arrow_Column__type, 1},\n     {\"_arrow_Column__data\", (DL_FUNC) &_arrow_Column__data, 1},\n-    {\"_arrow_xptr_is_null\", (DL_FUNC) &_arrow_xptr_is_null, 1},\n+    {\"_arrow_shared_ptr_is_null\", (DL_FUNC) &_arrow_shared_ptr_is_null, 1},\n+    {\"_arrow_unique_ptr_is_null\", (DL_FUNC) &_arrow_unique_ptr_is_null, 1},\n     {\"_arrow_Int8__initialize\", (DL_FUNC) &_arrow_Int8__initialize, 0},\n     {\"_arrow_Int16__initialize\", (DL_FUNC) &_arrow_Int16__initialize, 0},\n     {\"_arrow_Int32__initialize\", (DL_FUNC) &_arrow_Int32__initialize, 0},\n@@ -1770,7 +1894,6 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_DecimalType__scale\", (DL_FUNC) &_arrow_DecimalType__scale, 1},\n     {\"_arrow_TimestampType__timezone\", (DL_FUNC) &_arrow_TimestampType__timezone, 1},\n     {\"_arrow_TimestampType__unit\", (DL_FUNC) &_arrow_TimestampType__unit, 1},\n-    {\"_arrow_Object__pointer_address\", (DL_FUNC) &_arrow_Object__pointer_address, 1},\n     {\"_arrow_DictionaryType__initialize\", (DL_FUNC) &_arrow_DictionaryType__initialize, 3},\n     {\"_arrow_DictionaryType__index_type\", (DL_FUNC) &_arrow_DictionaryType__index_type, 1},\n     {\"_arrow_DictionaryType__name\", (DL_FUNC) &_arrow_DictionaryType__name, 1},\n@@ -1804,6 +1927,17 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_MemoryPool__default\", (DL_FUNC) &_arrow_MemoryPool__default, 0},\n     {\"_arrow_MemoryPool__bytes_allocated\", (DL_FUNC) &_arrow_MemoryPool__bytes_allocated, 1},\n     {\"_arrow_MemoryPool__max_memory\", (DL_FUNC) &_arrow_MemoryPool__max_memory, 1},\n+    {\"_arrow_ipc___Message__body_length\", (DL_FUNC) &_arrow_ipc___Message__body_length, 1},\n+    {\"_arrow_ipc___Message__metadata\", (DL_FUNC) &_arrow_ipc___Message__metadata, 1},\n+    {\"_arrow_ipc___Message__body\", (DL_FUNC) &_arrow_ipc___Message__body, 1},\n+    {\"_arrow_ipc___Message__Verify\", (DL_FUNC) &_arrow_ipc___Message__Verify, 1},\n+    {\"_arrow_ipc___Message__type\", (DL_FUNC) &_arrow_ipc___Message__type, 1},\n+    {\"_arrow_ipc___Message__Equals\", (DL_FUNC) &_arrow_ipc___Message__Equals, 2},\n+    {\"_arrow_ipc___ReadRecordBatch__Message__Schema\", (DL_FUNC) &_arrow_ipc___ReadRecordBatch__Message__Schema, 2},\n+    {\"_arrow_ipc___ReadSchema_InputStream\", (DL_FUNC) &_arrow_ipc___ReadSchema_InputStream, 1},\n+    {\"_arrow_ipc___MessageReader__Open\", (DL_FUNC) &_arrow_ipc___MessageReader__Open, 1},\n+    {\"_arrow_ipc___MessageReader__ReadNextMessage\", (DL_FUNC) &_arrow_ipc___MessageReader__ReadNextMessage, 1},\n+    {\"_arrow_ipc___ReadMessage\", (DL_FUNC) &_arrow_ipc___ReadMessage, 1},\n     {\"_arrow_RecordBatch__num_columns\", (DL_FUNC) &_arrow_RecordBatch__num_columns, 1},\n     {\"_arrow_RecordBatch__num_rows\", (DL_FUNC) &_arrow_RecordBatch__num_rows, 1},\n     {\"_arrow_RecordBatch__schema\", (DL_FUNC) &_arrow_RecordBatch__schema, 1},\ndiff --git a/r/src/arrow_types.h b/r/src/arrow_types.h\nindex e3f1e621d7..194bb96c22 100644\n--- a/r/src/arrow_types.h\n+++ b/r/src/arrow_types.h\n@@ -37,10 +37,54 @@ struct NoDelete {\n   inline void operator()(T* ptr){};\n };\n \n+namespace arrow {\n+namespace r {\n+struct symbols {\n+  static SEXP units;\n+  static SEXP xp;\n+};\n+}  // namespace r\n+}  // namespace arrow\n+\n namespace Rcpp {\n+namespace internal {\n+\n+template <typename Pointer>\n+Pointer r6_to_smart_pointer(SEXP self) {\n+  return reinterpret_cast<Pointer>(\n+      EXTPTR_PTR(Rf_findVarInFrame(self, arrow::r::symbols::xp)));\n+}\n+\n+}  // namespace internal\n+\n+template <typename T>\n+class ConstReferenceSmartPtrInputParameter {\n+ public:\n+  using const_reference = const T&;\n+\n+  ConstReferenceSmartPtrInputParameter(SEXP self)\n+      : ptr(internal::r6_to_smart_pointer<const T*>(self)) {}\n+\n+  inline operator const_reference() { return *ptr; }\n+\n+ private:\n+  const T* ptr;\n+};\n+\n namespace traits {\n \n+template <typename T>\n+struct input_parameter<const std::shared_ptr<T>&> {\n+  typedef typename Rcpp::ConstReferenceSmartPtrInputParameter<std::shared_ptr<T>> type;\n+};\n+\n+template <typename T>\n+struct input_parameter<const std::unique_ptr<T>&> {\n+  typedef typename Rcpp::ConstReferenceSmartPtrInputParameter<std::unique_ptr<T>> type;\n+};\n+\n struct wrap_type_shared_ptr_tag {};\n+struct wrap_type_unique_ptr_tag {};\n \n template <typename T>\n struct wrap_type_traits<std::shared_ptr<T>> {\n@@ -48,7 +92,9 @@ struct wrap_type_traits<std::shared_ptr<T>> {\n };\n \n template <typename T>\n-class Exporter<std::shared_ptr<T>>;\n+struct wrap_type_traits<std::unique_ptr<T>> {\n+  using wrap_category = wrap_type_unique_ptr_tag;\n+};\n \n }  // namespace traits\n namespace internal {\n@@ -56,6 +102,9 @@ namespace internal {\n template <typename T>\n inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag);\n \n+template <typename T>\n+inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_unique_ptr_tag);\n+\n }  // namespace internal\n \n }  // namespace Rcpp\n@@ -67,28 +116,9 @@ RCPP_EXPOSED_ENUM_NODECL(arrow::DateUnit)\n RCPP_EXPOSED_ENUM_NODECL(arrow::TimeUnit::type)\n RCPP_EXPOSED_ENUM_NODECL(arrow::StatusCode)\n RCPP_EXPOSED_ENUM_NODECL(arrow::io::FileMode::type)\n+RCPP_EXPOSED_ENUM_NODECL(arrow::ipc::Message::Type)\n \n namespace Rcpp {\n-namespace traits {\n-\n-template <typename T>\n-class Exporter<std::shared_ptr<T>> {\n- public:\n-  Exporter(SEXP self) : xp(extract_xp(self)) {}\n-\n-  inline std::shared_ptr<T> get() { return *Rcpp::XPtr<std::shared_ptr<T>>(xp); }\n-\n- private:\n-  SEXP xp;\n-\n-  SEXP extract_xp(SEXP self) {\n-    static SEXP symb_xp = Rf_install(\".:xp:.\");\n-    return Rf_findVarInFrame(self, symb_xp);\n-  }\n-};\n-\n-}  // namespace traits\n-\n namespace internal {\n \n template <typename T>\n@@ -97,6 +127,12 @@ inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag) {\n       new std::shared_ptr<typename T::element_type>(x));\n }\n \n+template <typename T>\n+inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_unique_ptr_tag) {\n+  return Rcpp::XPtr<std::unique_ptr<typename T::element_type>>(\n+      new std::unique_ptr<typename T::element_type>(const_cast<T&>(x).release()));\n+}\n+\n }  // namespace internal\n \n }  // namespace Rcpp\n@@ -150,9 +186,5 @@ class RBuffer : public MutableBuffer {\n   Vec vec_;\n };\n \n-struct symbols {\n-  static SEXP units;\n-};\n-\n }  // namespace r\n }  // namespace arrow\ndiff --git a/r/src/datatype.cpp b/r/src/datatype.cpp\nindex 64ca1c92b5..fa543857b6 100644\n--- a/r/src/datatype.cpp\n+++ b/r/src/datatype.cpp\n@@ -20,10 +20,15 @@\n using namespace Rcpp;\n \n // [[Rcpp::export]]\n-bool xptr_is_null(SEXP xp) {\n+bool shared_ptr_is_null(SEXP xp) {\n   return reinterpret_cast<std::shared_ptr<void>*>(EXTPTR_PTR(xp))->get() == nullptr;\n }\n \n+// [[Rcpp::export]]\n+bool unique_ptr_is_null(SEXP xp) {\n+  return reinterpret_cast<std::unique_ptr<void>*>(EXTPTR_PTR(xp))->get() == nullptr;\n+}\n+\n // [[Rcpp::export]]\n std::shared_ptr<arrow::DataType> Int8__initialize() { return arrow::int8(); }\n \n@@ -107,11 +112,13 @@ std::shared_ptr<arrow::DataType> Time64__initialize(arrow::TimeUnit::type unit)\n // [[Rcpp::export]]\n SEXP list__(SEXP x) {\n   if (Rf_inherits(x, \"arrow::Field\")) {\n-    return wrap(arrow::list(Rcpp::as<std::shared_ptr<arrow::Field>>(x)));\n+    Rcpp::ConstReferenceSmartPtrInputParameter<std::shared_ptr<arrow::Field>> field(x);\n+    return wrap(arrow::list(field));\n   }\n \n   if (Rf_inherits(x, \"arrow::DataType\")) {\n-    return wrap(arrow::list(Rcpp::as<std::shared_ptr<arrow::DataType>>(x)));\n+    Rcpp::ConstReferenceSmartPtrInputParameter<std::shared_ptr<arrow::DataType>> type(x);\n+    return wrap(arrow::list(type));\n   }\n \n   stop(\"incompatible\");\n@@ -122,7 +129,8 @@ template <typename T>\n std::vector<std::shared_ptr<T>> List_to_shared_ptr_vector(List x) {\n   std::vector<std::shared_ptr<T>> vec;\n   for (SEXP element : x) {\n-    vec.push_back(as<std::shared_ptr<T>>(element));\n+    Rcpp::ConstReferenceSmartPtrInputParameter<std::shared_ptr<T>> ptr(element);\n+    vec.push_back(ptr);\n   }\n   return vec;\n }\n@@ -229,11 +237,6 @@ arrow::TimeUnit::type TimestampType__unit(\n   return type->unit();\n }\n \n-// [[Rcpp::export]]\n-std::string Object__pointer_address(SEXP obj) {\n-  return tfm::format(\"%p\", EXTPTR_PTR(obj));\n-}\n-\n // [[Rcpp::export]]\n std::shared_ptr<arrow::DataType> DictionaryType__initialize(\n     const std::shared_ptr<arrow::DataType>& type,\ndiff --git a/r/src/field.cpp b/r/src/field.cpp\nindex 88ae286bab..417694c1af 100644\n--- a/r/src/field.cpp\n+++ b/r/src/field.cpp\n@@ -34,7 +34,11 @@ std::string Field__ToString(const std::shared_ptr<arrow::Field>& type) {\n }\n \n // [[Rcpp::export]]\n-std::string Field__name(std::shared_ptr<arrow::Field> type) { return type->name(); }\n+std::string Field__name(const std::shared_ptr<arrow::Field>& type) {\n+  return type->name();\n+}\n \n // [[Rcpp::export]]\n-bool Field__nullable(std::shared_ptr<arrow::Field> type) { return type->nullable(); }\n+bool Field__nullable(const std::shared_ptr<arrow::Field>& type) {\n+  return type->nullable();\n+}\ndiff --git a/r/src/memorypool.cpp b/r/src/memorypool.cpp\nindex d0e4c2406d..76f1b5736a 100644\n--- a/r/src/memorypool.cpp\n+++ b/r/src/memorypool.cpp\n@@ -26,11 +26,11 @@ std::shared_ptr<arrow::MemoryPool> MemoryPool__default() {\n }\n \n // [[Rcpp::export]]\n-int MemoryPool__bytes_allocated(std::shared_ptr<arrow::MemoryPool> pool) {\n+int MemoryPool__bytes_allocated(const std::shared_ptr<arrow::MemoryPool>& pool) {\n   return pool->bytes_allocated();\n }\n \n // [[Rcpp::export]]\n-int MemoryPool__max_memory(std::shared_ptr<arrow::MemoryPool> pool) {\n+int MemoryPool__max_memory(const std::shared_ptr<arrow::MemoryPool>& pool) {\n   return pool->max_memory();\n }\ndiff --git a/r/src/message.cpp b/r/src/message.cpp\nnew file mode 100644\nindex 0000000000..03504b186e\n--- /dev/null\n+++ b/r/src/message.cpp\n@@ -0,0 +1,95 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+\n+// [[Rcpp::export]]\n+int64_t ipc___Message__body_length(const std::unique_ptr<arrow::ipc::Message>& message) {\n+  return message->body_length();\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::Buffer> ipc___Message__metadata(\n+    const std::unique_ptr<arrow::ipc::Message>& message) {\n+  return message->metadata();\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::Buffer> ipc___Message__body(\n+    const std::unique_ptr<arrow::ipc::Message>& message) {\n+  return message->body();\n+}\n+\n+// [[Rcpp::export]]\n+int64_t ipc___Message__Verify(const std::unique_ptr<arrow::ipc::Message>& message) {\n+  return message->Verify();\n+}\n+\n+// [[Rcpp::export]]\n+arrow::ipc::Message::Type ipc___Message__type(\n+    const std::unique_ptr<arrow::ipc::Message>& message) {\n+  return message->type();\n+}\n+\n+// [[Rcpp::export]]\n+bool ipc___Message__Equals(const std::unique_ptr<arrow::ipc::Message>& x,\n+                           const std::unique_ptr<arrow::ipc::Message>& y) {\n+  return x->Equals(*y);\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::RecordBatch> ipc___ReadRecordBatch__Message__Schema(\n+    const std::unique_ptr<arrow::ipc::Message>& message,\n+    const std::shared_ptr<arrow::Schema>& schema) {\n+  std::shared_ptr<arrow::RecordBatch> batch;\n+  R_ERROR_NOT_OK(arrow::ipc::ReadRecordBatch(*message, schema, &batch));\n+  return batch;\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::Schema> ipc___ReadSchema_InputStream(\n+    const std::shared_ptr<arrow::io::InputStream>& stream) {\n+  std::shared_ptr<arrow::Schema> schema;\n+  R_ERROR_NOT_OK(arrow::ipc::ReadSchema(stream.get(), &schema));\n+  return schema;\n+}\n+\n+//--------- MessageReader\n+\n+// [[Rcpp::export]]\n+std::unique_ptr<arrow::ipc::MessageReader> ipc___MessageReader__Open(\n+    const std::shared_ptr<arrow::io::InputStream>& stream) {\n+  return arrow::ipc::MessageReader::Open(stream);\n+}\n+\n+// [[Rcpp::export]]\n+std::unique_ptr<arrow::ipc::Message> ipc___MessageReader__ReadNextMessage(\n+    const std::unique_ptr<arrow::ipc::MessageReader>& reader) {\n+  std::unique_ptr<arrow::ipc::Message> message;\n+  R_ERROR_NOT_OK(reader->ReadNextMessage(&message));\n+  return message;\n+}\n+\n+// [[Rcpp::export]]\n+std::unique_ptr<arrow::ipc::Message> ipc___ReadMessage(\n+    const std::shared_ptr<arrow::io::InputStream>& stream) {\n+  std::unique_ptr<arrow::ipc::Message> message;\n+  R_ERROR_NOT_OK(arrow::ipc::ReadMessage(stream.get(), &message));\n+  return message;\n+}\ndiff --git a/r/src/recordbatch.cpp b/r/src/recordbatch.cpp\nindex 5428f21bb8..90a351f41e 100644\n--- a/r/src/recordbatch.cpp\n+++ b/r/src/recordbatch.cpp\n@@ -111,12 +111,12 @@ CharacterVector RecordBatch__names(const std::shared_ptr<arrow::RecordBatch>& ba\n \n // [[Rcpp::export]]\n std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(\n-    std::shared_ptr<arrow::RecordBatch>& self, int offset) {\n+    const std::shared_ptr<arrow::RecordBatch>& self, int offset) {\n   return self->Slice(offset);\n }\n \n // [[Rcpp::export]]\n std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(\n-    std::shared_ptr<arrow::RecordBatch>& self, int offset, int length) {\n+    const std::shared_ptr<arrow::RecordBatch>& self, int offset, int length) {\n   return self->Slice(offset, length);\n }\ndiff --git a/r/src/symbols.cpp b/r/src/symbols.cpp\nindex 45dda38102..e60bcce631 100644\n--- a/r/src/symbols.cpp\n+++ b/r/src/symbols.cpp\n@@ -20,5 +20,6 @@\n namespace arrow {\n namespace r {\n SEXP symbols::units = Rf_install(\"units\");\n-}\n+SEXP symbols::xp = Rf_install(\".:xp:.\");\n+}  // namespace r\n }  // namespace arrow\ndiff --git a/r/tests/testthat/test-RecordBatch.R b/r/tests/testthat/test-RecordBatch.R\nindex 2f535c343f..e48be188a9 100644\n--- a/r/tests/testthat/test-RecordBatch.R\n+++ b/r/tests/testthat/test-RecordBatch.R\n@@ -156,3 +156,17 @@ test_that(\"read_record_batch handles various streams (ARROW-3450, ARROW-3505)\",\n   expect_equal(batch, batch7)\n   expect_equal(batch, batch8)\n })\n+\n+test_that(\"read_record_batch can handle Message, Schema parameters (ARROW-3499)\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  stream <- buffer_reader(write_record_batch(batch, raw()))\n+\n+  # schema\n+  message <- read_message(stream)\n+\n+  # batch\n+  message <- read_message(stream)\n+  schema <- batch$schema()\n+  batch2 <- read_record_batch(message, schema)\n+  expect_equal(batch, batch2)\n+})\ndiff --git a/r/tests/testthat/test-message.R b/r/tests/testthat/test-message.R\nnew file mode 100644\nindex 0000000000..fd05b86056\n--- /dev/null\n+++ b/r/tests/testthat/test-message.R\n@@ -0,0 +1,37 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"arrow::ipc::Message\")\n+\n+test_that(\"read_message can read from input stream\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n+  stream <- buffer_reader(bytes)\n+\n+  message <- read_message(stream)\n+  expect_equal(message$type(), MessageType$SCHEMA)\n+  expect_is(message$body, \"arrow::Buffer\")\n+  expect_is(message$metadata, \"arrow::Buffer\")\n+\n+  message <- read_message(stream)\n+  expect_equal(message$type(), MessageType$RECORD_BATCH)\n+  expect_is(message$body, \"arrow::Buffer\")\n+  expect_is(message$metadata, \"arrow::Buffer\")\n+\n+  message <- read_message(stream)\n+  expect_null(read_message(stream))\n+})\ndiff --git a/r/tests/testthat/test-messagereader.R b/r/tests/testthat/test-messagereader.R\nnew file mode 100644\nindex 0000000000..4527a2882f\n--- /dev/null\n+++ b/r/tests/testthat/test-messagereader.R\n@@ -0,0 +1,57 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"arrow::ipc::MessageReader\")\n+\n+test_that(\"MessageReader can be created from raw vectors\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n+\n+  reader <- message_reader(bytes)\n+  message <- reader$ReadNextMessage()\n+  expect_equal(message$type(), MessageType$SCHEMA)\n+  expect_is(message$body, \"arrow::Buffer\")\n+  expect_is(message$metadata, \"arrow::Buffer\")\n+\n+  message <- reader$ReadNextMessage()\n+  expect_equal(message$type(), MessageType$RECORD_BATCH)\n+  expect_is(message$body, \"arrow::Buffer\")\n+  expect_is(message$metadata, \"arrow::Buffer\")\n+\n+  message <- reader$ReadNextMessage()\n+  expect_null(message)\n+})\n+\n+test_that(\"MessageReader can be created from input stream\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n+  stream <- buffer_reader(bytes)\n+\n+  reader <- message_reader(stream)\n+  message <- reader$ReadNextMessage()\n+  expect_equal(message$type(), MessageType$SCHEMA)\n+  expect_is(message$body, \"arrow::Buffer\")\n+  expect_is(message$metadata, \"arrow::Buffer\")\n+\n+  message <- reader$ReadNextMessage()\n+  expect_equal(message$type(), MessageType$RECORD_BATCH)\n+  expect_is(message$body, \"arrow::Buffer\")\n+  expect_is(message$metadata, \"arrow::Buffer\")\n+\n+  message <- reader$ReadNextMessage()\n+  expect_null(message)\n+})\ndiff --git a/r/tests/testthat/test-schema.R b/r/tests/testthat/test-schema.R\nnew file mode 100644\nindex 0000000000..b5a514eaba\n--- /dev/null\n+++ b/r/tests/testthat/test-schema.R\n@@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-schema\")\n+\n+test_that(\"reading schema from raw vector\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n+  schema <- read_schema(bytes)\n+  expect_equal(schema, batch$schema())\n+})\n+\n+test_that(\"reading schema from streams\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n+  stream <- buffer_reader(bytes)\n+\n+  schema <- read_schema(stream)\n+  expect_equal(schema, batch$schema())\n+})\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:33:11.007+0000",
                    "updated": "2018-11-08T22:33:11.007+0000",
                    "started": "2018-11-08T22:33:11.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164116",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#issuecomment-437180731\n \n \n   I just opened https://issues.apache.org/jira/browse/ARROW-3732, so that can be undertaken later\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-08T22:33:43.054+0000",
                    "updated": "2018-11-08T22:33:43.054+0000",
                    "started": "2018-11-08T22:33:43.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164118",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#discussion_r232157585\n \n \n\n ##########\n File path: r/src/arrow_types.h\n ##########\n @@ -37,25 +37,74 @@ struct NoDelete {\n   inline void operator()(T* ptr){};\n };\n \n+namespace arrow {\n+namespace r {\n+struct symbols {\n+  static SEXP units;\n+  static SEXP xp;\n+};\n+}  // namespace r\n+}  // namespace arrow\n+\n namespace Rcpp {\n+namespace internal {\n+\n+template <typename Pointer>\n+Pointer r6_to_smart_pointer(SEXP self) {\n+  return reinterpret_cast<Pointer>(\n+      EXTPTR_PTR(Rf_findVarInFrame(self, arrow::r::symbols::xp)));\n+}\n+\n+}  // namespace internal\n+\n+template <typename T>\n+class ConstReferenceSmartPtrInputParameter {\n \n Review comment:\n   This is following the existing pattern from Rcpp, that has `ConstReferenceInputParameter<T>`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T07:01:28.788+0000",
                    "updated": "2018-11-09T07:01:28.788+0000",
                    "started": "2018-11-09T07:01:28.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164260",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#discussion_r232158083\n \n \n\n ##########\n File path: r/src/arrow_types.h\n ##########\n @@ -37,25 +37,74 @@ struct NoDelete {\n   inline void operator()(T* ptr){};\n };\n \n+namespace arrow {\n+namespace r {\n+struct symbols {\n+  static SEXP units;\n+  static SEXP xp;\n+};\n+}  // namespace r\n+}  // namespace arrow\n+\n namespace Rcpp {\n+namespace internal {\n+\n+template <typename Pointer>\n \n Review comment:\n   Yes definitely on my list of things. This is close to Rcpp's metal so that might be interesting to that community as well. \r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T07:04:53.872+0000",
                    "updated": "2018-11-09T07:04:53.872+0000",
                    "started": "2018-11-09T07:04:53.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164261",
                    "issueId": "13190976"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/worklog/164262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #2915: ARROW-3499: [R] Expose arrow::ipc::Message type\nURL: https://github.com/apache/arrow/pull/2915#discussion_r232158230\n \n \n\n ##########\n File path: r/tests/testthat/test-schema.R\n ##########\n @@ -0,0 +1,34 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"test-schema\")\n+\n+test_that(\"reading schema from raw vector\", {\n+  batch <- record_batch(tibble::tibble(x = 1:10))\n+  bytes <- write_record_batch(batch, raw())\n \n Review comment:\n   Yeah. At some point we need to sit down and have a chat about ipc api in this package. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-09T07:05:49.539+0000",
                    "updated": "2018-11-09T07:05:49.539+0000",
                    "started": "2018-11-09T07:05:49.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164262",
                    "issueId": "13190976"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@569f42de[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b31f3cc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cf5813a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@289eb0fb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ba40913[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2ea39469[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e9f2cd6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@33db5096[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@787c2b6f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4acef8d5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5da084c6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@34163004[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 08 22:32:57 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-08T22:32:57.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3499/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-10-11T16:26:40.000+0000",
        "updated": "2018-11-09T07:05:49.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a natural type to use for deserializing message components (e.g. see {{pyarrow.read_record_batch}})",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Expose arrow::ipc::Message type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/comment/16651930",
                    "id": "16651930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
                        "name": "romainfrancois",
                        "key": "romainfrancois",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
                        },
                        "displayName": "Romain Francois",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "This requires some additional scaffolding\u00a0to\u00a0handle unique_ptr",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
                        "name": "romainfrancois",
                        "key": "romainfrancois",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
                        },
                        "displayName": "Romain Francois",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-10-16T15:31:50.376+0000",
                    "updated": "2018-10-16T15:31:50.376+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/comment/16652798",
                    "id": "16652798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ah. Probably a good investment in any case",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-17T01:23:45.918+0000",
                    "updated": "2018-10-17T01:23:45.918+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190976/comment/16680508",
                    "id": "16680508",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2915\n[https://github.com/apache/arrow/pull/2915]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-08T22:32:57.367+0000",
                    "updated": "2018-11-08T22:32:57.367+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3z3dz:",
        "customfield_12314139": null
    }
}