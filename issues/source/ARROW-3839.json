{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13199381",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381",
    "key": "ARROW-3839",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 37800,
            "total": 37800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3839/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 75,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128\n \n \n   This adds the ability to infer schema on reading a CSV file. I've changed the `Reader` interface to take `Option<Schema>`, for which we infer the schema if none is provided.\r\n   \r\n   I would have liked to also include timestamp inferrence, but looks like we don't yet have time support. I opened [ARROW-3959](https://issues.apache.org/jira/browse/ARROW-3959) to track this.\r\n   \r\n   There are some outstanding design considerations that I'd appreciate some input on:\r\n   \r\n   1. How to best structure the function's arguments. We'll need to pass in options for timestamp parsing, not sure what else. I've added a field delimiter in the interim.\r\n   2. What should happen if one tries to read a file with no headers? I haven't added a test case for that, and I think the response should be a failure\r\n   3. When inferring the schema, should we read the whole file, or a portion of the file. A lot of tools tend to read `n` first records (e.g. MSSQL import tool), but Spark reads the whole file. I prefer the latter as it'd guarantee that the generated schema won't fail to read the file\r\n   \r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-08T10:01:11.936+0000",
                    "updated": "2018-12-08T10:01:11.936+0000",
                    "started": "2018-12-08T10:01:11.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173183",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240075423\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -52,6 +53,127 @@ use crate::record_batch::RecordBatch;\n \n use csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d*.).\\d+$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = Regex::new(r\"^(true)$|^(false)$\").unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n+}\n+\n+/// Infer the schema of a record\n+fn infer_field_schema(field_name: String, vector: &Vec<Option<String>>) -> Field {\n+\n+    // a list of possible types, with the order:\n+    // 1. Boolean\n+    // 2. Timestamp\n+    // 3. Decimal\n+    // 4. Integer\n+    // Defaults to UTF8 string\n+    let mut possibilities: Vec<i8> = vec![];\n+    let mut has_nulls = false;\n+    for x in vector.iter() {\n+        match x {\n+            Some(v) => {\n+                if v == \"\" {\n+                    has_nulls = true;\n+                } else {\n+                    // match regex in a particular order\n+                    if BOOLEAN_RE.is_match(v) {\n+                        possibilities.push(1);\n+                    // } else if UTC_TIMESTAMP_RE.is_match(v) {\n+                        // possibilities.push(2);\n+                    } else if DECIMAL_RE.is_match(v) {\n+                        possibilities.push(3);\n+                    } else if INTEGER_RE.is_match(v) {\n+                        possibilities.push(4);\n+                    } else {\n+                        // we have a string, so the schema becomes a string\n+                        return Field::new(&field_name, DataType::Utf8, false)\n+                    }\n+                }\n+            },\n+            None => {\n+                // do nothing, we'll return an optional String\n+                possibilities.push(0);\n+            }\n+        }\n+    }\n+    possibilities.sort();\n+    possibilities.dedup();\n+    if possibilities.len() == 1 {\n+        match possibilities[0] {\n+            0 => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+            1 => { return Field::new(&field_name, DataType::Boolean, has_nulls) },\n+            2 => { return Field::new(&field_name, DataType::Int64, has_nulls) },\n+            3 => { return Field::new(&field_name, DataType::Float64, has_nulls) },\n+            4 => { return Field::new(&field_name, DataType::Int32, has_nulls) },\n+            _ => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+        }\n+    } else if possibilities.len() > 2 {\n+        return Field::new(&field_name, DataType::Utf8, has_nulls)\n+    } else {\n+        if possibilities.contains(&1) || possibilities.contains(&2) {\n+            // boolean or timestamp is incompatible with other types, return string\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        } else if possibilities.contains(&3) && possibilities.contains(&4) {\n+            // we have an integer and double, fall down to double\n+            return Field::new(&field_name, DataType::Float64, has_nulls)\n+        } else {\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        }\n+    }\n+}\n+\n+/// Infer the schema of a csv file\n+fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n+\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let mut csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // get header names\n+    let headers = &csv_reader.headers().unwrap();\n+\n+    let my_headers: Vec<&str> = headers.clone().iter().collect();\n+    let header_length = my_headers.len();\n+    let mut my_vals: Vec<Vec<Option<String>>> = vec![vec![]; header_length];\n+\n+    // return file seek back to start\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // take at most 100 rows for schema inference\n+    // [TODO] it's often better to read the whole file and infer its schema\n+    for result in csv_reader.into_records().take(100) {\n+        let record = result.unwrap();\n+\n+        for i in 0..header_length {\n+            let borrowed = record.clone();\n+            my_vals[i].push(borrowed.get(i).map(|s| s.to_string()));\n \n Review comment:\n   Building an in-memory list of all values seems expensive. Could we just build a set of possible types per column here instead? That way the max number of items per column is very low (limited to the number of data types)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T03:19:32.903+0000",
                    "updated": "2018-12-10T03:19:32.903+0000",
                    "started": "2018-12-10T03:19:32.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173375",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240075150\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -52,6 +53,127 @@ use crate::record_batch::RecordBatch;\n \n use csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d*.).\\d+$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = Regex::new(r\"^(true)$|^(false)$\").unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n+}\n+\n+/// Infer the schema of a record\n+fn infer_field_schema(field_name: String, vector: &Vec<Option<String>>) -> Field {\n+\n+    // a list of possible types, with the order:\n+    // 1. Boolean\n+    // 2. Timestamp\n+    // 3. Decimal\n+    // 4. Integer\n+    // Defaults to UTF8 string\n+    let mut possibilities: Vec<i8> = vec![];\n+    let mut has_nulls = false;\n+    for x in vector.iter() {\n+        match x {\n+            Some(v) => {\n+                if v == \"\" {\n+                    has_nulls = true;\n+                } else {\n+                    // match regex in a particular order\n+                    if BOOLEAN_RE.is_match(v) {\n+                        possibilities.push(1);\n+                    // } else if UTC_TIMESTAMP_RE.is_match(v) {\n+                        // possibilities.push(2);\n+                    } else if DECIMAL_RE.is_match(v) {\n+                        possibilities.push(3);\n+                    } else if INTEGER_RE.is_match(v) {\n+                        possibilities.push(4);\n+                    } else {\n+                        // we have a string, so the schema becomes a string\n+                        return Field::new(&field_name, DataType::Utf8, false)\n+                    }\n+                }\n+            },\n+            None => {\n+                // do nothing, we'll return an optional String\n+                possibilities.push(0);\n+            }\n+        }\n+    }\n+    possibilities.sort();\n+    possibilities.dedup();\n+    if possibilities.len() == 1 {\n+        match possibilities[0] {\n+            0 => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+            1 => { return Field::new(&field_name, DataType::Boolean, has_nulls) },\n+            2 => { return Field::new(&field_name, DataType::Int64, has_nulls) },\n+            3 => { return Field::new(&field_name, DataType::Float64, has_nulls) },\n+            4 => { return Field::new(&field_name, DataType::Int32, has_nulls) },\n+            _ => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+        }\n+    } else if possibilities.len() > 2 {\n+        return Field::new(&field_name, DataType::Utf8, has_nulls)\n+    } else {\n+        if possibilities.contains(&1) || possibilities.contains(&2) {\n+            // boolean or timestamp is incompatible with other types, return string\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        } else if possibilities.contains(&3) && possibilities.contains(&4) {\n+            // we have an integer and double, fall down to double\n+            return Field::new(&field_name, DataType::Float64, has_nulls)\n+        } else {\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        }\n+    }\n+}\n+\n+/// Infer the schema of a csv file\n+fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n+\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let mut csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // get header names\n+    let headers = &csv_reader.headers().unwrap();\n+\n+    let my_headers: Vec<&str> = headers.clone().iter().collect();\n+    let header_length = my_headers.len();\n+    let mut my_vals: Vec<Vec<Option<String>>> = vec![vec![]; header_length];\n+\n+    // return file seek back to start\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // take at most 100 rows for schema inference\n+    // [TODO] it's often better to read the whole file and infer its schema\n+    for result in csv_reader.into_records().take(100) {\n \n Review comment:\n   It would be nice to give user the ability to pass in number of records to read as an Optional where the default is to read all rows\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T03:19:32.910+0000",
                    "updated": "2018-12-10T03:19:32.910+0000",
                    "started": "2018-12-10T03:19:32.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173376",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173547",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240203304\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -149,21 +151,33 @@ fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n         .delimiter(delimiter)\n         .from_reader(BufReader::new(file.try_clone().unwrap()));\n \n-    // take at most 100 rows for schema inference\n-    // [TODO] it's often better to read the whole file and infer its schema\n-    for result in csv_reader.into_records().take(100) {\n-        let record = result.unwrap();\n+    match max_records {\n+        Some(n) => {\n+            for result in csv_reader.into_records().take(n) {\n \n Review comment:\n   Instead of repeating the logic, you can just get a single iterator based on max_records like this:\r\n   \r\n   ```\r\n       let records: Box<Iterator<Item = Result<StringRecord>>> = match max_records {\r\n           Some(n) => Box::new(csv.record_iter.take(n)),\r\n           None => Box::new(csv.record_iter)\r\n       };\r\n   \r\n       for record  in records {\r\n   \r\n       }\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T13:13:23.846+0000",
                    "updated": "2018-12-10T13:13:23.846+0000",
                    "started": "2018-12-10T13:13:23.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173547",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240274990\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -149,21 +151,33 @@ fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n         .delimiter(delimiter)\n         .from_reader(BufReader::new(file.try_clone().unwrap()));\n \n-    // take at most 100 rows for schema inference\n-    // [TODO] it's often better to read the whole file and infer its schema\n-    for result in csv_reader.into_records().take(100) {\n-        let record = result.unwrap();\n+    match max_records {\n+        Some(n) => {\n+            for result in csv_reader.into_records().take(n) {\n \n Review comment:\n   I had tried reusing the logic, but couldn't get it to work. \r\n   \r\n   I'm not getting your suggestion to work,\r\n   \r\n   ```rust\r\n   error[E0271]: type mismatch resolving `<csv_crate::StringRecordsIntoIter<std::io::BufReader<std::fs::File>> as std::iter::Iterator>::Item == std::result::Result<csv_crate::StringRecord, error::ArrowError>`\r\n      --> src\\csv\\reader.rs:155:63\r\n       |\r\n   155 |       let records: Box<Iterator<Item = Result<StringRecord>>> = match max_records {\r\n       |  _______________________________________________________________^\r\n   156 | |         Some(n) => Box::new(csv_reader.into_records().take(n)),\r\n   157 | |         None => Box::new(csv_reader.into_records())\r\n   158 | |     };\r\n       | |_____^ expected struct `csv_crate::Error`, found enum `error::ArrowError`\r\n       |\r\n       = note: expected type `std::result::Result<_, csv_crate::Error>`\r\n                  found type `std::result::Result<_, error::ArrowError>`\r\n       = note: required for the cast to the object type `dyn std::iter::Iterator<Item=std::result::Result<csv_crate::StringRecord, error::ArrowError>>\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T16:11:54.399+0000",
                    "updated": "2018-12-10T16:11:54.399+0000",
                    "started": "2018-12-10T16:11:54.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173674",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240317552\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -52,6 +53,127 @@ use crate::record_batch::RecordBatch;\n \n use csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d*.).\\d+$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = Regex::new(r\"^(true)$|^(false)$\").unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n+}\n+\n+/// Infer the schema of a record\n+fn infer_field_schema(field_name: String, vector: &Vec<Option<String>>) -> Field {\n+\n+    // a list of possible types, with the order:\n+    // 1. Boolean\n+    // 2. Timestamp\n+    // 3. Decimal\n+    // 4. Integer\n+    // Defaults to UTF8 string\n+    let mut possibilities: Vec<i8> = vec![];\n+    let mut has_nulls = false;\n+    for x in vector.iter() {\n+        match x {\n+            Some(v) => {\n+                if v == \"\" {\n+                    has_nulls = true;\n+                } else {\n+                    // match regex in a particular order\n+                    if BOOLEAN_RE.is_match(v) {\n+                        possibilities.push(1);\n+                    // } else if UTC_TIMESTAMP_RE.is_match(v) {\n+                        // possibilities.push(2);\n+                    } else if DECIMAL_RE.is_match(v) {\n+                        possibilities.push(3);\n+                    } else if INTEGER_RE.is_match(v) {\n+                        possibilities.push(4);\n+                    } else {\n+                        // we have a string, so the schema becomes a string\n+                        return Field::new(&field_name, DataType::Utf8, false)\n+                    }\n+                }\n+            },\n+            None => {\n+                // do nothing, we'll return an optional String\n+                possibilities.push(0);\n+            }\n+        }\n+    }\n+    possibilities.sort();\n+    possibilities.dedup();\n+    if possibilities.len() == 1 {\n+        match possibilities[0] {\n+            0 => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+            1 => { return Field::new(&field_name, DataType::Boolean, has_nulls) },\n+            2 => { return Field::new(&field_name, DataType::Int64, has_nulls) },\n+            3 => { return Field::new(&field_name, DataType::Float64, has_nulls) },\n+            4 => { return Field::new(&field_name, DataType::Int32, has_nulls) },\n+            _ => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+        }\n+    } else if possibilities.len() > 2 {\n+        return Field::new(&field_name, DataType::Utf8, has_nulls)\n+    } else {\n+        if possibilities.contains(&1) || possibilities.contains(&2) {\n+            // boolean or timestamp is incompatible with other types, return string\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        } else if possibilities.contains(&3) && possibilities.contains(&4) {\n+            // we have an integer and double, fall down to double\n+            return Field::new(&field_name, DataType::Float64, has_nulls)\n+        } else {\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        }\n+    }\n+}\n+\n+/// Infer the schema of a csv file\n+fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n+\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let mut csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // get header names\n+    let headers = &csv_reader.headers().unwrap();\n+\n+    let my_headers: Vec<&str> = headers.clone().iter().collect();\n+    let header_length = my_headers.len();\n+    let mut my_vals: Vec<Vec<Option<String>>> = vec![vec![]; header_length];\n+\n+    // return file seek back to start\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // take at most 100 rows for schema inference\n+    // [TODO] it's often better to read the whole file and infer its schema\n+    for result in csv_reader.into_records().take(100) {\n+        let record = result.unwrap();\n+\n+        for i in 0..header_length {\n+            let borrowed = record.clone();\n+            my_vals[i].push(borrowed.get(i).map(|s| s.to_string()));\n \n Review comment:\n   Done, memory usage is much better, especially for low cardinality values. I tested with a 2GB csv file, and memory usage was reasonable, although inference is slow if I din't limit max records.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T18:01:02.704+0000",
                    "updated": "2018-12-10T18:01:02.704+0000",
                    "started": "2018-12-10T18:01:02.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173720",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240461217\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -149,21 +151,33 @@ fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n         .delimiter(delimiter)\n         .from_reader(BufReader::new(file.try_clone().unwrap()));\n \n-    // take at most 100 rows for schema inference\n-    // [TODO] it's often better to read the whole file and infer its schema\n-    for result in csv_reader.into_records().take(100) {\n-        let record = result.unwrap();\n+    match max_records {\n+        Some(n) => {\n+            for result in csv_reader.into_records().take(n) {\n \n Review comment:\n   OK not to worry I can make this minor optimization as a separate PR once this one is merged\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T03:17:40.510+0000",
                    "updated": "2018-12-11T03:17:40.510+0000",
                    "started": "2018-12-11T03:17:40.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173881",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240461414\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -52,6 +53,127 @@ use crate::record_batch::RecordBatch;\n \n use csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d*.).\\d+$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = Regex::new(r\"^(true)$|^(false)$\").unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n+}\n+\n+/// Infer the schema of a record\n+fn infer_field_schema(field_name: String, vector: &Vec<Option<String>>) -> Field {\n+\n+    // a list of possible types, with the order:\n+    // 1. Boolean\n+    // 2. Timestamp\n+    // 3. Decimal\n+    // 4. Integer\n+    // Defaults to UTF8 string\n+    let mut possibilities: Vec<i8> = vec![];\n+    let mut has_nulls = false;\n+    for x in vector.iter() {\n+        match x {\n+            Some(v) => {\n+                if v == \"\" {\n+                    has_nulls = true;\n+                } else {\n+                    // match regex in a particular order\n+                    if BOOLEAN_RE.is_match(v) {\n+                        possibilities.push(1);\n+                    // } else if UTC_TIMESTAMP_RE.is_match(v) {\n+                        // possibilities.push(2);\n+                    } else if DECIMAL_RE.is_match(v) {\n+                        possibilities.push(3);\n+                    } else if INTEGER_RE.is_match(v) {\n+                        possibilities.push(4);\n+                    } else {\n+                        // we have a string, so the schema becomes a string\n+                        return Field::new(&field_name, DataType::Utf8, false)\n+                    }\n+                }\n+            },\n+            None => {\n+                // do nothing, we'll return an optional String\n+                possibilities.push(0);\n+            }\n+        }\n+    }\n+    possibilities.sort();\n+    possibilities.dedup();\n+    if possibilities.len() == 1 {\n+        match possibilities[0] {\n+            0 => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+            1 => { return Field::new(&field_name, DataType::Boolean, has_nulls) },\n+            2 => { return Field::new(&field_name, DataType::Int64, has_nulls) },\n+            3 => { return Field::new(&field_name, DataType::Float64, has_nulls) },\n+            4 => { return Field::new(&field_name, DataType::Int32, has_nulls) },\n+            _ => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+        }\n+    } else if possibilities.len() > 2 {\n+        return Field::new(&field_name, DataType::Utf8, has_nulls)\n+    } else {\n+        if possibilities.contains(&1) || possibilities.contains(&2) {\n+            // boolean or timestamp is incompatible with other types, return string\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        } else if possibilities.contains(&3) && possibilities.contains(&4) {\n+            // we have an integer and double, fall down to double\n+            return Field::new(&field_name, DataType::Float64, has_nulls)\n+        } else {\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        }\n+    }\n+}\n+\n+/// Infer the schema of a csv file\n+fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n+\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let mut csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // get header names\n+    let headers = &csv_reader.headers().unwrap();\n+\n+    let my_headers: Vec<&str> = headers.clone().iter().collect();\n+    let header_length = my_headers.len();\n+    let mut my_vals: Vec<Vec<Option<String>>> = vec![vec![]; header_length];\n+\n+    // return file seek back to start\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // take at most 100 rows for schema inference\n+    // [TODO] it's often better to read the whole file and infer its schema\n+    for result in csv_reader.into_records().take(100) {\n+        let record = result.unwrap();\n+\n+        for i in 0..header_length {\n+            let borrowed = record.clone();\n+            my_vals[i].push(borrowed.get(i).map(|s| s.to_string()));\n \n Review comment:\n   I think I did a poor job explaining this... currently you build a HashSet of unique values per column (potentially pretty large) in one pass and then process that hashset to get a hashset of possible types ... what I was suggesting is why not just build the hashset of possible types as you go and then there is no need to store the actual values at all ... does that make sense?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T03:19:11.789+0000",
                    "updated": "2018-12-11T03:19:11.789+0000",
                    "started": "2018-12-11T03:19:11.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173883",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240465295\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -259,7 +457,21 @@ mod tests {\n \n         let file = File::open(\"test/data/null_test.csv\").unwrap();\n \n-        let mut csv = Reader::new(file, Arc::new(schema), true, 1024, None);\n+        let mut csv = Reader::new(file, Some(Arc::new(schema)), true, None, None, 1024, None);\n+        let batch = csv.next().unwrap().unwrap();\n+\n+        assert_eq!(false, batch.column(1).is_null(0));\n+        assert_eq!(false, batch.column(1).is_null(1));\n+        assert_eq!(true, batch.column(1).is_null(2));\n+        assert_eq!(false, batch.column(1).is_null(3));\n+        assert_eq!(false, batch.column(1).is_null(4));\n+    }\n+\n+    #[test]\n+    fn test_nulls_with_inference() {\n \n Review comment:\n   It's good to check for nulls but we should test the inference logic here too.  i.e. a column with ints and floats should be inferred to be float.  We should cover each of the cases possible.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T03:57:04.136+0000",
                    "updated": "2018-12-11T03:57:04.136+0000",
                    "started": "2018-12-11T03:57:04.135+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173893",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240464713\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -208,7 +369,36 @@ mod tests {\n \n         let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n \n-        let mut csv = Reader::new(file, Arc::new(schema), false, 1024, None);\n+        let mut csv = Reader::new(file, Some(Arc::new(schema)), false, None, None, 1024, None);\n+        let batch = csv.next().unwrap().unwrap();\n+        assert_eq!(37, batch.num_rows());\n+        assert_eq!(3, batch.num_columns());\n+\n+        // access data from a primitive array\n+        let lat = batch\n+            .column(1)\n+            .as_any()\n+            .downcast_ref::<Float64Array>()\n+            .unwrap();\n+        assert_eq!(57.653484, lat.value(0));\n+\n+        // access data from a string array (ListArray<u8>)\n+        let city = batch\n+            .column(0)\n+            .as_any()\n+            .downcast_ref::<BinaryArray>()\n+            .unwrap();\n+\n+        let city_name: String = String::from_utf8(city.get_value(13).to_vec()).unwrap();\n+\n+        assert_eq!(\"Aberdeen, Aberdeen City, UK\", city_name);\n+    }\n+\n+    #[test]\n+    fn test_csv_with_schema_inferrence() {\n \n Review comment:\n   nit: typo\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T03:57:04.143+0000",
                    "updated": "2018-12-11T03:57:04.143+0000",
                    "started": "2018-12-11T03:57:04.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173894",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/173895",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r240466019\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -149,21 +151,33 @@ fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n         .delimiter(delimiter)\n         .from_reader(BufReader::new(file.try_clone().unwrap()));\n \n-    // take at most 100 rows for schema inference\n-    // [TODO] it's often better to read the whole file and infer its schema\n-    for result in csv_reader.into_records().take(100) {\n-        let record = result.unwrap();\n+    match max_records {\n+        Some(n) => {\n+            for result in csv_reader.into_records().take(n) {\n \n Review comment:\n   Yes, the code in this section does seem a little repetitive...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-11T03:57:04.145+0000",
                    "updated": "2018-12-11T03:57:04.145+0000",
                    "started": "2018-12-11T03:57:04.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173895",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/175986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3128: [WIP] ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r242127199\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -52,6 +53,127 @@ use crate::record_batch::RecordBatch;\n \n use csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d*.).\\d+$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = Regex::new(r\"^(true)$|^(false)$\").unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n+}\n+\n+/// Infer the schema of a record\n+fn infer_field_schema(field_name: String, vector: &Vec<Option<String>>) -> Field {\n+\n+    // a list of possible types, with the order:\n+    // 1. Boolean\n+    // 2. Timestamp\n+    // 3. Decimal\n+    // 4. Integer\n+    // Defaults to UTF8 string\n+    let mut possibilities: Vec<i8> = vec![];\n+    let mut has_nulls = false;\n+    for x in vector.iter() {\n+        match x {\n+            Some(v) => {\n+                if v == \"\" {\n+                    has_nulls = true;\n+                } else {\n+                    // match regex in a particular order\n+                    if BOOLEAN_RE.is_match(v) {\n+                        possibilities.push(1);\n+                    // } else if UTC_TIMESTAMP_RE.is_match(v) {\n+                        // possibilities.push(2);\n+                    } else if DECIMAL_RE.is_match(v) {\n+                        possibilities.push(3);\n+                    } else if INTEGER_RE.is_match(v) {\n+                        possibilities.push(4);\n+                    } else {\n+                        // we have a string, so the schema becomes a string\n+                        return Field::new(&field_name, DataType::Utf8, false)\n+                    }\n+                }\n+            },\n+            None => {\n+                // do nothing, we'll return an optional String\n+                possibilities.push(0);\n+            }\n+        }\n+    }\n+    possibilities.sort();\n+    possibilities.dedup();\n+    if possibilities.len() == 1 {\n+        match possibilities[0] {\n+            0 => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+            1 => { return Field::new(&field_name, DataType::Boolean, has_nulls) },\n+            2 => { return Field::new(&field_name, DataType::Int64, has_nulls) },\n+            3 => { return Field::new(&field_name, DataType::Float64, has_nulls) },\n+            4 => { return Field::new(&field_name, DataType::Int32, has_nulls) },\n+            _ => { return Field::new(&field_name, DataType::Utf8, has_nulls) },\n+        }\n+    } else if possibilities.len() > 2 {\n+        return Field::new(&field_name, DataType::Utf8, has_nulls)\n+    } else {\n+        if possibilities.contains(&1) || possibilities.contains(&2) {\n+            // boolean or timestamp is incompatible with other types, return string\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        } else if possibilities.contains(&3) && possibilities.contains(&4) {\n+            // we have an integer and double, fall down to double\n+            return Field::new(&field_name, DataType::Float64, has_nulls)\n+        } else {\n+            return Field::new(&field_name, DataType::Utf8, has_nulls)\n+        }\n+    }\n+}\n+\n+/// Infer the schema of a csv file\n+fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n+\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let mut csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // get header names\n+    let headers = &csv_reader.headers().unwrap();\n+\n+    let my_headers: Vec<&str> = headers.clone().iter().collect();\n+    let header_length = my_headers.len();\n+    let mut my_vals: Vec<Vec<Option<String>>> = vec![vec![]; header_length];\n+\n+    // return file seek back to start\n+    file.seek(SeekFrom::Start(0)).unwrap();\n+\n+    let csv_reader = csv::ReaderBuilder::new()\n+        .delimiter(delimiter)\n+        .from_reader(BufReader::new(file.try_clone().unwrap()));\n+\n+    // take at most 100 rows for schema inference\n+    // [TODO] it's often better to read the whole file and infer its schema\n+    for result in csv_reader.into_records().take(100) {\n+        let record = result.unwrap();\n+\n+        for i in 0..header_length {\n+            let borrowed = record.clone();\n+            my_vals[i].push(borrowed.get(i).map(|s| s.to_string()));\n \n Review comment:\n   Done, PTAL at latest implementation\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T12:24:59.801+0000",
                    "updated": "2018-12-17T12:24:59.801+0000",
                    "started": "2018-12-17T12:24:59.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175986",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/175988",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3128: [WIP] ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r242128181\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -149,21 +151,33 @@ fn infer_schema(mut file: File, delimiter: u8) -> Schema {\n         .delimiter(delimiter)\n         .from_reader(BufReader::new(file.try_clone().unwrap()));\n \n-    // take at most 100 rows for schema inference\n-    // [TODO] it's often better to read the whole file and infer its schema\n-    for result in csv_reader.into_records().take(100) {\n-        let record = result.unwrap();\n+    match max_records {\n+        Some(n) => {\n+            for result in csv_reader.into_records().take(n) {\n \n Review comment:\n   I've marked the PR as WIP until I can figure this out. After refactoring the code to address other review comments, trying to `take(n)` becomes more repetitive. I think the reason why boxing the iterator isn't working might be to do with `csv::StringBuilder` as a 'normal' iterable should work. I couldn't find a solution from looking into the `csv` crate though.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T12:28:30.047+0000",
                    "updated": "2018-12-17T12:28:30.047+0000",
                    "started": "2018-12-17T12:28:30.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175988",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/175989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3128: [WIP] ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r242128262\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -208,7 +369,36 @@ mod tests {\n \n         let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n \n-        let mut csv = Reader::new(file, Arc::new(schema), false, 1024, None);\n+        let mut csv = Reader::new(file, Some(Arc::new(schema)), false, None, None, 1024, None);\n+        let batch = csv.next().unwrap().unwrap();\n+        assert_eq!(37, batch.num_rows());\n+        assert_eq!(3, batch.num_columns());\n+\n+        // access data from a primitive array\n+        let lat = batch\n+            .column(1)\n+            .as_any()\n+            .downcast_ref::<Float64Array>()\n+            .unwrap();\n+        assert_eq!(57.653484, lat.value(0));\n+\n+        // access data from a string array (ListArray<u8>)\n+        let city = batch\n+            .column(0)\n+            .as_any()\n+            .downcast_ref::<BinaryArray>()\n+            .unwrap();\n+\n+        let city_name: String = String::from_utf8(city.get_value(13).to_vec()).unwrap();\n+\n+        assert_eq!(\"Aberdeen, Aberdeen City, UK\", city_name);\n+    }\n+\n+    #[test]\n+    fn test_csv_with_schema_inferrence() {\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T12:28:48.538+0000",
                    "updated": "2018-12-17T12:28:48.538+0000",
                    "started": "2018-12-17T12:28:48.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175989",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/175990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3128: [WIP] ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r242128495\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -259,7 +457,21 @@ mod tests {\n \n         let file = File::open(\"test/data/null_test.csv\").unwrap();\n \n-        let mut csv = Reader::new(file, Arc::new(schema), true, 1024, None);\n+        let mut csv = Reader::new(file, Some(Arc::new(schema)), true, None, None, 1024, None);\n+        let batch = csv.next().unwrap().unwrap();\n+\n+        assert_eq!(false, batch.column(1).is_null(0));\n+        assert_eq!(false, batch.column(1).is_null(1));\n+        assert_eq!(true, batch.column(1).is_null(2));\n+        assert_eq!(false, batch.column(1).is_null(3));\n+        assert_eq!(false, batch.column(1).is_null(4));\n+    }\n+\n+    #[test]\n+    fn test_nulls_with_inference() {\n \n Review comment:\n   I've done that, and came across an interesting problem with inferring the schema of numbers that are quoted. I'll ask @andygrove for some guidance in this regard.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T12:29:44.040+0000",
                    "updated": "2018-12-17T12:29:44.040+0000",
                    "started": "2018-12-17T12:29:44.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175990",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/175991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3128: [WIP] ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#issuecomment-447831484\n \n \n   @andygrove @paddyhoran the test that currently (will) fail is related to the below:\r\n   \r\n   Given a csv that looks like:\r\n   \r\n   ```csv\r\n   | c_int    | c_float | c_string | c_bool | \r\n   |----------|---------|----------|--------| \r\n   | 1        | 1.1     | \"1.11\"   | true   | \r\n   | 2        | 2.2     | \"2.22\"   | true   | \r\n   | 3        |         | \"3.33\"   | true   | \r\n   | 4        | 4.4     |          | false  | \r\n   | 5,6.6,\"\" | false   | \"\"       |        | \r\n   ```\r\n   \r\n   `c_string` can either be a float or a string, but I presume that we want it to be a string in this instance. The schema inference converts it to a float, which causes the test failure.\r\n   \r\n   The `csv` crate has an option on the `ReaderBuilder` to [tweak the quoting behaviour](https://docs.rs/csv/1.0.5/csv/struct.ReaderBuilder.html#method.quoting), which doesn't remove the quotes when modified. Doing that however results in an error as line 4 on the csv table above is inconsistent. \r\n   \r\n   The empty `c_string` column shouldn't be entirely empty, but should be `\"\"`.\r\n   \r\n   Should I modify it to be like line 5?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T12:38:23.299+0000",
                    "updated": "2018-12-17T12:38:23.299+0000",
                    "started": "2018-12-17T12:38:23.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175991",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/175992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me edited a comment on issue #3128: [WIP] ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#issuecomment-447831484\n \n \n   @andygrove @paddyhoran the test that currently (will) fail is related to the below:\r\n   \r\n   Given a csv that looks like:\r\n   \r\n   ```csv\r\n   | c_int | c_float | c_string | c_bool | \r\n   |-------|---------|----------|--------| \r\n   | 1     | 1.1     | \"1.11\"   | true   | \r\n   | 2     | 2.2     | \"2.22\"   | true   | \r\n   | 3     |         | \"3.33\"   | true   | \r\n   | 4     | 4.4     |          | false  | \r\n   | 5     | 6.6     | \"\"       | false  | \r\n   ```\r\n   \r\n   `c_string` can either be a float or a string, but I presume that we want it to be a string in this instance. The schema inference converts it to a float, which causes the test failure.\r\n   \r\n   The `csv` crate has an option on the `ReaderBuilder` to [tweak the quoting behaviour](https://docs.rs/csv/1.0.5/csv/struct.ReaderBuilder.html#method.quoting), which doesn't remove the quotes when modified. Doing that however results in an error as line 4 on the csv table above is inconsistent. \r\n   \r\n   The empty `c_string` column shouldn't be entirely empty, but should be `\"\"`.\r\n   \r\n   Should I modify it to be like line 5?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T12:39:43.334+0000",
                    "updated": "2018-12-17T12:39:43.334+0000",
                    "started": "2018-12-17T12:39:43.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "175992",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/177305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#issuecomment-448842066\n \n \n   The CI failures are parquet related, @andygrove @paddyhoran @sunchao please take another look. Thanks\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T03:03:19.881+0000",
                    "updated": "2018-12-20T03:03:19.881+0000",
                    "started": "2018-12-20T03:03:19.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177305",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/178087",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r243490992\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -54,6 +65,129 @@ use crate::record_batch::RecordBatch;\n \n use self::csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d+\\.\\d+)$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = RegexBuilder::new(r\"^(true)$|^(false)$\").case_insensitive(true).build().unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n \n Review comment:\n   nit: can you remove this for now? we can add it in ARROW-3959.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-21T18:46:11.962+0000",
                    "updated": "2018-12-21T18:46:11.962+0000",
                    "started": "2018-12-21T18:46:11.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "178087",
                    "issueId": "13199381"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/worklog/178088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3128: ARROW-3839: [Rust] Add ability to infer schema in CSV reader\nURL: https://github.com/apache/arrow/pull/3128#discussion_r243491163\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -54,6 +65,129 @@ use crate::record_batch::RecordBatch;\n \n use self::csv_crate::{StringRecord, StringRecordsIntoIter};\n \n+lazy_static! {\n+    static ref DECIMAL_RE: Regex = Regex::new(r\"^-?(\\d+\\.\\d+)$\").unwrap();\n+    static ref INTEGER_RE: Regex = Regex::new(r\"^-?(\\d*.)$\").unwrap();\n+    static ref BOOLEAN_RE: Regex = RegexBuilder::new(r\"^(true)$|^(false)$\").case_insensitive(true).build().unwrap();\n+\n+    // TODO add support for timestamp parsing after ARROW-3959\n+    // static ref UTC_TIMESTAMP_RE: Regex = Regex::new(r\"^(-?(?:[1-9][\\d]*)?[\\d]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][\\d])T(2[0-3]|[01][\\d]):([0-5][\\d]):([0-5][\\d])(\\\\.[\\d]+)?(\\.\\d{0,3})(Z)?$\").unwrap();\n+}\n+\n+/// Infer the schema of a record\n+fn infer_field_schema(string: &str) -> usize {\n+    // when quoting is enabled in the reader, these quotes aren't escaped, we default to Utf8 for them\n+    if string.starts_with(\"\\\"\") {\n+        return 5;\n+    }\n+    // match regex in a particular order\"\n+    if BOOLEAN_RE.is_match(string) {\n+        return 1;\n+    // } else if UTC_TIMESTAMP_RE.is_match(v) {\n \n Review comment:\n   nit: also please remove this commented code - we can add then in ARROW-3959.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-21T18:46:11.997+0000",
                    "updated": "2018-12-21T18:46:11.997+0000",
                    "started": "2018-12-21T18:46:11.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "178088",
                    "issueId": "13199381"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 37800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@702fa567[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f280aed[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@120af5b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7d1afa79[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17200dd9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@135ae687[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56381e16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7cdbef9a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b826b1d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2fa8d634[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39f6b579[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1af23ae2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 37800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 08 23:49:20 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-01-08T23:49:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3839/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-11-19T16:38:49.000+0000",
        "updated": "2019-01-08T23:49:32.000+0000",
        "timeoriginalestimate": null,
        "description": "A CSV reader is being added in ARROW-3726 and it currently requires an explicit schema to be provided.\r\n\r\nIt would be nice to have an option where the schema can be inferred automatically.\r\n\r\nThe user should be able to specify some defaults, such as date/time formats.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 37800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add ability to infer schema in CSV reader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/comment/16695294",
                    "id": "16695294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Hi [~andygrove], I've created a prototype of schema inference in\u00a0[https://github.com/nevi-me/arrow/commit/e9875c482056a697177222a5fdd70371d7549ed5|[https://github.com/nevi-me/arrow/commit/e9875c482056a697177222a5fdd70371d7549ed5],]\u00a0where I use regex on a sample of records to infer the schema of the csv.\r\n\r\nThe code isn't clean, and I was more creating it as a prototype, but may you(or anyone else) please have a brief look if you can. I couldn't figure out how to read the file once to infer the schema, then use the same reader to create an iterator of records. I'll try figure it out when I get some time.\r\n\r\nThanks",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2018-11-21T21:50:16.705+0000",
                    "updated": "2018-11-21T21:50:16.705+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13199381/comment/16737660",
                    "id": "16737660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 3349\n[https://github.com/apache/arrow/pull/3349]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-01-08T23:49:20.393+0000",
                    "updated": "2019-01-08T23:49:20.393+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|s00nu8:",
        "customfield_12314139": null
    }
}