{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13195616",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616",
    "key": "ARROW-3672",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alexandreyc",
            "name": "alexandreyc",
            "key": "alexandreyc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Alexandre Crayssac",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9600,
            "total": 9600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3672/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 16,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/164784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc opened a new pull request #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944\n \n \n   Hello everyone,\r\n   \r\n   My attempt at adding support for time32 and time64 array. Need review because I'm not sure I added all that is needed.\r\n   \r\n   Thanks,\r\n   \r\n   Alexandre\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-11T20:44:02.731+0000",
                    "updated": "2018-11-11T20:44:02.731+0000",
                    "started": "2018-11-11T20:44:02.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164784",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/164786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-437703526\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=h1) Report\n   > Merging [#2944](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ffcc3636d2e0f06eb0905fac5be5381cf0677cbc?src=pr&el=desc) will **decrease** coverage by `24.18%`.\n   > The diff coverage is `0%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2944/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2944       +/-   ##\n   ===========================================\n   - Coverage   86.42%   62.23%   -24.19%     \n   ===========================================\n     Files         490       56      -434     \n     Lines       68838     3612    -65226     \n   ===========================================\n   - Hits        59491     2248    -57243     \n   + Misses       9257     1274     -7983     \n     Partials       90       90\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | `15% <0%> (-2.73%)` | :arrow_down: |\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | `15.38% <0%> (-13.19%)` | :arrow_down: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `50.05% <0%> (-9.11%)` | :arrow_down: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `38.73% <0%> (-7.05%)` | :arrow_down: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `93.1% <0%> (-3.33%)` | :arrow_down: |\n   | [python/pyarrow/ipc.pxi](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaXBjLnB4aQ==) | | |\n   | [cpp/src/parquet/column\\_page.h](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl9wYWdlLmg=) | | |\n   | [cpp/src/parquet/bloom\\_filter-test.cc](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci10ZXN0LmNj) | | |\n   | [cpp/src/plasma/client.cc](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvY2xpZW50LmNj) | | |\n   | [cpp/src/arrow/io/test-common.h](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby90ZXN0LWNvbW1vbi5o) | | |\n   | ... and [429 more](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=footer). Last update [ffcc363...e79db33](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-11T20:49:26.752+0000",
                    "updated": "2018-11-11T20:49:26.752+0000",
                    "started": "2018-11-11T20:49:26.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164786",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438014481\n \n \n   Yes, will do that.\r\n   \r\n   What do you think about templating all the tests for numeric arrays/builders?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T20:16:32.253+0000",
                    "updated": "2018-11-12T20:16:32.253+0000",
                    "started": "2018-11-12T20:16:32.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165112",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sbinet commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438016871\n \n \n   IMHO, that would be a good strategy to cover all the bases.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T20:24:37.408+0000",
                    "updated": "2018-11-12T20:24:37.408+0000",
                    "started": "2018-11-12T20:24:37.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165116",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165123",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-437703526\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=h1) Report\n   > Merging [#2944](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ffcc3636d2e0f06eb0905fac5be5381cf0677cbc?src=pr&el=desc) will **decrease** coverage by `19.58%`.\n   > The diff coverage is `63.41%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2944/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2944       +/-   ##\n   ===========================================\n   - Coverage   86.42%   66.83%   -19.59%     \n   ===========================================\n     Files         490       56      -434     \n     Lines       68838     3612    -65226     \n   ===========================================\n   - Hits        59491     2414    -57077     \n   + Misses       9257     1106     -8151     \n   - Partials       90       92        +2\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | `15% <0%> (-2.73%)` | :arrow_down: |\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | `15.38% <0%> (-13.19%)` | :arrow_down: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `93.1% <0%> (-3.33%)` | :arrow_down: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `46.42% <50%> (+0.64%)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `63.92% <90.14%> (+4.76%)` | :arrow_up: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | `33.33% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [442 more](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=footer). Last update [ffcc363...dc4d9a1](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-12T20:38:17.004+0000",
                    "updated": "2018-11-12T20:38:17.004+0000",
                    "started": "2018-11-12T20:38:17.003+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165123",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438670810\n \n \n   Still need tests for arrays. I'm working on it and it should be ready soon.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T13:59:03.241+0000",
                    "updated": "2018-11-14T13:59:03.241+0000",
                    "started": "2018-11-14T13:59:03.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165887",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stuartcarnie commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438689443\n \n \n   @sbinet looks good to me, too. Thanks for the contribution, @alexandreyc!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T14:54:27.463+0000",
                    "updated": "2018-11-14T14:54:27.463+0000",
                    "started": "2018-11-14T14:54:27.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165906",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165971",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438745862\n \n \n   Should be good now! Fixed a little typo which caused time64 array tests to fail.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T17:23:48.540+0000",
                    "updated": "2018-11-14T17:23:48.540+0000",
                    "started": "2018-11-14T17:23:48.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165971",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/165996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-437703526\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=h1) Report\n   > Merging [#2944](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/976964428927f3045a5cb37a58a522ae741f5bfa?src=pr&el=desc) will **decrease** coverage by `0.16%`.\n   > The diff coverage is `65.85%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2944/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2944      +/-   ##\n   ==========================================\n   - Coverage   86.44%   86.27%   -0.17%     \n   ==========================================\n     Files         490      478      -12     \n     Lines       68852    67291    -1561     \n   ==========================================\n   - Hits        59519    58058    -1461     \n   + Misses       9247     9137     -110     \n   - Partials       86       96      +10\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | `15% <0%> (-2.73%)` | :arrow_down: |\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | `15.38% <0%> (-13.19%)` | :arrow_down: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `96.55% <100%> (+0.12%)` | :arrow_up: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `46.42% <50%> (+0.64%)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `64.35% <92.95%> (+5.2%)` | :arrow_up: |\n   | [go/arrow/math/int64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2F2eDJfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hbWQ2NC5nbw==) | `28.57% <0%> (-14.29%)` | :arrow_down: |\n   | ... and [21 more](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=footer). Last update [9769644...dd2a5d0](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T18:10:45.354+0000",
                    "updated": "2018-11-14T18:10:45.354+0000",
                    "started": "2018-11-14T18:10:45.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165996",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438803572\n \n \n   I noticed you are using unicode \"mu\" for microseconds here https://github.com/apache/arrow/commit/df54da211448b5202aa08ed2b245eb78cfd1e50c. Is that really what you want? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T20:17:48.392+0000",
                    "updated": "2018-11-14T20:17:48.392+0000",
                    "started": "2018-11-14T20:17:48.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166077",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438809659\n \n \n   Yes, it's one character like other fractions and translate well to microseconds. I'm open to renaming this if needed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T20:38:07.457+0000",
                    "updated": "2018-11-14T20:38:07.457+0000",
                    "started": "2018-11-14T20:38:07.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166095",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-438822178\n \n \n   Some other projects use \"us\" instead of \"\u03bcs\". I had to Google the \"mu\" unicode character and copy-and-paste it because I'm on Linux and don't know how to type such characters from an English keyboard layout\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T21:18:25.999+0000",
                    "updated": "2018-11-14T21:18:25.999+0000",
                    "started": "2018-11-14T21:18:25.999+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166128",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alexandreyc commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-439005255\n \n \n   Switched to \"us\".\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T11:13:36.541+0000",
                    "updated": "2018-11-15T11:13:36.541+0000",
                    "started": "2018-11-15T11:13:36.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166383",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-437703526\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=h1) Report\n   > Merging [#2944](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/976964428927f3045a5cb37a58a522ae741f5bfa?src=pr&el=desc) will **increase** coverage by `0.07%`.\n   > The diff coverage is `65.99%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2944/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2944      +/-   ##\n   ==========================================\n   + Coverage    86.5%   86.58%   +0.07%     \n   ==========================================\n     Files         490      478      -12     \n     Lines       68852    67530    -1322     \n   ==========================================\n   - Hits        59562    58470    -1092     \n   + Misses       9202     8968     -234     \n   - Partials       88       92       +4\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/type\\_traits\\_numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvdHlwZV90cmFpdHNfbnVtZXJpYy5nZW4uZ28=) | `15% <0%> (-2.73%)` | :arrow_down: |\n   | [go/arrow/array/array.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYXJyYXkuZ28=) | `96.55% <100%> (+0.12%)` | :arrow_up: |\n   | [go/arrow/datatype\\_fixedwidth.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfZml4ZWR3aWR0aC5nbw==) | `15.38% <14.28%> (-13.19%)` | :arrow_down: |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | `46.42% <50%> (+0.64%)` | :arrow_up: |\n   | [go/arrow/array/numericbuilder.gen.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpY2J1aWxkZXIuZ2VuLmdv) | `64.35% <92.95%> (+5.2%)` | :arrow_up: |\n   | [go/arrow/math/uint64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfc3NlNF9hbWQ2NC5nbw==) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X3NzZTRfYW1kNjQuZ28=) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/memory/memory\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/int64\\_sse4\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9pbnQ2NF9zc2U0X2FtZDY0Lmdv) | `0% <0%> (-100%)` | :arrow_down: |\n   | [go/arrow/math/float64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC9mbG9hdDY0X2FtZDY0Lmdv) | `33.33% <0%> (-33.34%)` | :arrow_down: |\n   | ... and [43 more](https://codecov.io/gh/apache/arrow/pull/2944/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=footer). Last update [9769644...e686b19](https://codecov.io/gh/apache/arrow/pull/2944?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T12:19:20.910+0000",
                    "updated": "2018-11-15T12:19:20.910+0000",
                    "started": "2018-11-15T12:19:20.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166403",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166427",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944#issuecomment-439039353\n \n \n   :+1:. thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T13:27:10.118+0000",
                    "updated": "2018-11-15T13:27:10.118+0000",
                    "started": "2018-11-15T13:27:10.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166427",
                    "issueId": "13195616"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/worklog/166428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2944: ARROW-3672 & ARROW-3673: [Go] add support for time32 and time64 array\nURL: https://github.com/apache/arrow/pull/2944\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/go/arrow/array/array.go b/go/arrow/array/array.go\nindex d1dd31d2c2..a225693262 100644\n--- a/go/arrow/array/array.go\n+++ b/go/arrow/array/array.go\n@@ -183,8 +183,8 @@ func init() {\n \t\tarrow.DATE32:            unsupportedArrayType,\n \t\tarrow.DATE64:            unsupportedArrayType,\n \t\tarrow.TIMESTAMP:         func(data *Data) Interface { return NewTimestampData(data) },\n-\t\tarrow.TIME32:            unsupportedArrayType,\n-\t\tarrow.TIME64:            unsupportedArrayType,\n+\t\tarrow.TIME32:            func(data *Data) Interface { return NewTime32Data(data) },\n+\t\tarrow.TIME64:            func(data *Data) Interface { return NewTime64Data(data) },\n \t\tarrow.INTERVAL:          unsupportedArrayType,\n \t\tarrow.DECIMAL:           unsupportedArrayType,\n \t\tarrow.LIST:              func(data *Data) Interface { return NewListData(data) },\ndiff --git a/go/arrow/array/numeric.gen.go b/go/arrow/array/numeric.gen.go\nindex 6f633ea176..1f734c0512 100644\n--- a/go/arrow/array/numeric.gen.go\n+++ b/go/arrow/array/numeric.gen.go\n@@ -519,3 +519,93 @@ func (a *Timestamp) setData(data *Data) {\n \t\ta.values = a.values[beg:end]\n \t}\n }\n+\n+// A type which represents an immutable sequence of arrow.Time32 values.\n+type Time32 struct {\n+\tarray\n+\tvalues []arrow.Time32\n+}\n+\n+func NewTime32Data(data *Data) *Time32 {\n+\ta := &Time32{}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+func (a *Time32) Value(i int) arrow.Time32     { return a.values[i] }\n+func (a *Time32) Time32Values() []arrow.Time32 { return a.values }\n+\n+func (a *Time32) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i, v := range a.values {\n+\t\tif i > 0 {\n+\t\t\tfmt.Fprintf(o, \" \")\n+\t\t}\n+\t\tswitch {\n+\t\tcase a.IsNull(i):\n+\t\t\to.WriteString(\"(null)\")\n+\t\tdefault:\n+\t\t\tfmt.Fprintf(o, \"%v\", v)\n+\t\t}\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *Time32) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.values = arrow.Time32Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := a.array.data.offset\n+\t\tend := beg + a.array.data.length\n+\t\ta.values = a.values[beg:end]\n+\t}\n+}\n+\n+// A type which represents an immutable sequence of arrow.Time64 values.\n+type Time64 struct {\n+\tarray\n+\tvalues []arrow.Time64\n+}\n+\n+func NewTime64Data(data *Data) *Time64 {\n+\ta := &Time64{}\n+\ta.refCount = 1\n+\ta.setData(data)\n+\treturn a\n+}\n+\n+func (a *Time64) Value(i int) arrow.Time64     { return a.values[i] }\n+func (a *Time64) Time64Values() []arrow.Time64 { return a.values }\n+\n+func (a *Time64) String() string {\n+\to := new(strings.Builder)\n+\to.WriteString(\"[\")\n+\tfor i, v := range a.values {\n+\t\tif i > 0 {\n+\t\t\tfmt.Fprintf(o, \" \")\n+\t\t}\n+\t\tswitch {\n+\t\tcase a.IsNull(i):\n+\t\t\to.WriteString(\"(null)\")\n+\t\tdefault:\n+\t\t\tfmt.Fprintf(o, \"%v\", v)\n+\t\t}\n+\t}\n+\to.WriteString(\"]\")\n+\treturn o.String()\n+}\n+\n+func (a *Time64) setData(data *Data) {\n+\ta.array.setData(data)\n+\tvals := data.buffers[1]\n+\tif vals != nil {\n+\t\ta.values = arrow.Time64Traits.CastFromBytes(vals.Bytes())\n+\t\tbeg := a.array.data.offset\n+\t\tend := beg + a.array.data.length\n+\t\ta.values = a.values[beg:end]\n+\t}\n+}\ndiff --git a/go/arrow/array/numeric_test.go b/go/arrow/array/numeric_test.go\nindex 352ccd1525..9e8267a70d 100644\n--- a/go/arrow/array/numeric_test.go\n+++ b/go/arrow/array/numeric_test.go\n@@ -134,3 +134,263 @@ func TestFloat64SliceDataWithNull(t *testing.T) {\n \t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n \t}\n }\n+\n+func TestNewTime32Data(t *testing.T) {\n+\tdata := []arrow.Time32{\n+\t\tarrow.Time32(1),\n+\t\tarrow.Time32(2),\n+\t\tarrow.Time32(4),\n+\t\tarrow.Time32(8),\n+\t\tarrow.Time32(16),\n+\t}\n+\n+\tdtype := arrow.FixedWidthTypes.Time32s\n+\tad := array.NewData(dtype, len(data),\n+\t\t[]*memory.Buffer{nil, memory.NewBufferBytes(arrow.Time32Traits.CastToBytes(data))},\n+\t\tnil, 0, 0,\n+\t)\n+\tt32a := array.NewTime32Data(ad)\n+\n+\tassert.Equal(t, len(data), t32a.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, data, t32a.Time32Values(), \"unexpected Float64Values()\")\n+}\n+\n+func TestTime32SliceData(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 4\n+\t)\n+\n+\tvar (\n+\t\tvs = []arrow.Time32{\n+\t\t\tarrow.Time32(1),\n+\t\t\tarrow.Time32(2),\n+\t\t\tarrow.Time32(4),\n+\t\t\tarrow.Time32(8),\n+\t\t\tarrow.Time32(16),\n+\t\t}\n+\t\tsub = vs[beg:end]\n+\t)\n+\n+\tdtype := arrow.FixedWidthTypes.Time32s\n+\tb := array.NewTime32Builder(pool, dtype.(*arrow.Time32Type))\n+\tdefer b.Release()\n+\n+\tfor _, v := range vs {\n+\t\tb.Append(v)\n+\t}\n+\n+\tarr := b.NewArray().(*array.Time32)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(vs); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Time32Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Time32)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Time32Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\n+\n+func TestTime32SliceDataWithNull(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 5\n+\t)\n+\n+\tvar (\n+\t\tvalids = []bool{true, true, true, false, true, true}\n+\t\tvs     = []arrow.Time32{\n+\t\t\tarrow.Time32(1),\n+\t\t\tarrow.Time32(2),\n+\t\t\tarrow.Time32(3),\n+\t\t\tarrow.Time32(0),\n+\t\t\tarrow.Time32(4),\n+\t\t\tarrow.Time32(5),\n+\t\t}\n+\t\tsub = vs[beg:end]\n+\t)\n+\n+\tdtype := arrow.FixedWidthTypes.Time32s\n+\tb := array.NewTime32Builder(pool, dtype.(*arrow.Time32Type))\n+\tdefer b.Release()\n+\n+\tb.AppendValues(vs, valids)\n+\n+\tarr := b.NewArray().(*array.Time32)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(valids); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 1; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Time32Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Time32)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.NullN(), 1; got != want {\n+\t\tt.Errorf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Time32Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\n+\n+func TestNewTime64Data(t *testing.T) {\n+\tdata := []arrow.Time64{\n+\t\tarrow.Time64(1),\n+\t\tarrow.Time64(2),\n+\t\tarrow.Time64(4),\n+\t\tarrow.Time64(8),\n+\t\tarrow.Time64(16),\n+\t}\n+\n+\tdtype := arrow.FixedWidthTypes.Time64us\n+\tad := array.NewData(dtype, len(data),\n+\t\t[]*memory.Buffer{nil, memory.NewBufferBytes(arrow.Time64Traits.CastToBytes(data))},\n+\t\tnil, 0, 0,\n+\t)\n+\tt64a := array.NewTime64Data(ad)\n+\n+\tassert.Equal(t, len(data), t64a.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, data, t64a.Time64Values(), \"unexpected Float64Values()\")\n+}\n+\n+func TestTime64SliceData(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 4\n+\t)\n+\n+\tvar (\n+\t\tvs = []arrow.Time64{\n+\t\t\tarrow.Time64(1),\n+\t\t\tarrow.Time64(2),\n+\t\t\tarrow.Time64(4),\n+\t\t\tarrow.Time64(8),\n+\t\t\tarrow.Time64(16),\n+\t\t}\n+\t\tsub = vs[beg:end]\n+\t)\n+\n+\tdtype := arrow.FixedWidthTypes.Time64us\n+\tb := array.NewTime64Builder(pool, dtype.(*arrow.Time64Type))\n+\tdefer b.Release()\n+\n+\tfor _, v := range vs {\n+\t\tb.Append(v)\n+\t}\n+\n+\tarr := b.NewArray().(*array.Time64)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(vs); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Time64Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Time64)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Time64Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\n+\n+func TestTime64SliceDataWithNull(t *testing.T) {\n+\tpool := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer pool.AssertSize(t, 0)\n+\n+\tconst (\n+\t\tbeg = 2\n+\t\tend = 5\n+\t)\n+\n+\tvar (\n+\t\tvalids = []bool{true, true, true, false, true, true}\n+\t\tvs     = []arrow.Time64{\n+\t\t\tarrow.Time64(1),\n+\t\t\tarrow.Time64(2),\n+\t\t\tarrow.Time64(3),\n+\t\t\tarrow.Time64(0),\n+\t\t\tarrow.Time64(4),\n+\t\t\tarrow.Time64(5),\n+\t\t}\n+\t\tsub = vs[beg:end]\n+\t)\n+\n+\tdtype := arrow.FixedWidthTypes.Time64us\n+\tb := array.NewTime64Builder(pool, dtype.(*arrow.Time64Type))\n+\tdefer b.Release()\n+\n+\tb.AppendValues(vs, valids)\n+\n+\tarr := b.NewArray().(*array.Time64)\n+\tdefer arr.Release()\n+\n+\tif got, want := arr.Len(), len(valids); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.NullN(), 1; got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := arr.Time64Values(), vs; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+\n+\tslice := array.NewSlice(arr, beg, end).(*array.Time64)\n+\tdefer slice.Release()\n+\n+\tif got, want := slice.NullN(), 1; got != want {\n+\t\tt.Errorf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Len(), len(sub); got != want {\n+\t\tt.Fatalf(\"got=%d, want=%d\", got, want)\n+\t}\n+\n+\tif got, want := slice.Time64Values(), sub; !reflect.DeepEqual(got, want) {\n+\t\tt.Fatalf(\"got=%v, want=%v\", got, want)\n+\t}\n+}\ndiff --git a/go/arrow/array/numericbuilder.gen.go b/go/arrow/array/numericbuilder.gen.go\nindex 6585474a28..3a7dc167f1 100644\n--- a/go/arrow/array/numericbuilder.gen.go\n+++ b/go/arrow/array/numericbuilder.gen.go\n@@ -1502,6 +1502,276 @@ func (b *TimestampBuilder) newData() (data *Data) {\n \treturn\n }\n \n+type Time32Builder struct {\n+\tbuilder\n+\n+\tdtype   *arrow.Time32Type\n+\tdata    *memory.Buffer\n+\trawData []arrow.Time32\n+}\n+\n+func NewTime32Builder(mem memory.Allocator, dtype *arrow.Time32Type) *Time32Builder {\n+\treturn &Time32Builder{builder: builder{refCount: 1, mem: mem}, dtype: dtype}\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+func (b *Time32Builder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tif b.nullBitmap != nil {\n+\t\t\tb.nullBitmap.Release()\n+\t\t\tb.nullBitmap = nil\n+\t\t}\n+\t\tif b.data != nil {\n+\t\t\tb.data.Release()\n+\t\t\tb.data = nil\n+\t\t\tb.rawData = nil\n+\t\t}\n+\t}\n+}\n+\n+func (b *Time32Builder) Append(v arrow.Time32) {\n+\tb.Reserve(1)\n+\tb.UnsafeAppend(v)\n+}\n+\n+func (b *Time32Builder) AppendNull() {\n+\tb.Reserve(1)\n+\tb.UnsafeAppendBoolToBitmap(false)\n+}\n+\n+func (b *Time32Builder) UnsafeAppend(v arrow.Time32) {\n+\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\tb.rawData[b.length] = v\n+\tb.length++\n+}\n+\n+func (b *Time32Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n+\tif isValid {\n+\t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\t} else {\n+\t\tb.nulls++\n+\t}\n+\tb.length++\n+}\n+\n+// AppendValues will append the values in the v slice. The valid slice determines which values\n+// in v are valid (not null). The valid slice must either be empty or be equal in length to v. If empty,\n+// all values in v are appended and considered valid.\n+func (b *Time32Builder) AppendValues(v []arrow.Time32, valid []bool) {\n+\tif len(v) != len(valid) && len(valid) != 0 {\n+\t\tpanic(\"len(v) != len(valid) && len(valid) != 0\")\n+\t}\n+\n+\tb.Reserve(len(v))\n+\tif len(v) > 0 {\n+\t\tarrow.Time32Traits.Copy(b.rawData[b.length:], v)\n+\t}\n+\tb.builder.unsafeAppendBoolsToBitmap(valid, len(v))\n+}\n+\n+func (b *Time32Builder) init(capacity int) {\n+\tb.builder.init(capacity)\n+\n+\tb.data = memory.NewResizableBuffer(b.mem)\n+\tbytesN := arrow.Time32Traits.BytesRequired(capacity)\n+\tb.data.Resize(bytesN)\n+\tb.rawData = arrow.Time32Traits.CastFromBytes(b.data.Bytes())\n+}\n+\n+// Reserve ensures there is enough space for appending n elements\n+// by checking the capacity and calling Resize if necessary.\n+func (b *Time32Builder) Reserve(n int) {\n+\tb.builder.reserve(n, b.Resize)\n+}\n+\n+// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+func (b *Time32Builder) Resize(n int) {\n+\tnBuilder := n\n+\tif n < minBuilderCapacity {\n+\t\tn = minBuilderCapacity\n+\t}\n+\n+\tif b.capacity == 0 {\n+\t\tb.init(n)\n+\t} else {\n+\t\tb.builder.resize(nBuilder, b.init)\n+\t\tb.data.Resize(arrow.Time32Traits.BytesRequired(n))\n+\t\tb.rawData = arrow.Time32Traits.CastFromBytes(b.data.Bytes())\n+\t}\n+}\n+\n+// NewArray creates a Time32 array from the memory buffers used by the builder and resets the Time32Builder\n+// so it can be used to build a new array.\n+func (b *Time32Builder) NewArray() Interface {\n+\treturn b.NewTime32Array()\n+}\n+\n+// NewTime32Array creates a Time32 array from the memory buffers used by the builder and resets the Time32Builder\n+// so it can be used to build a new array.\n+func (b *Time32Builder) NewTime32Array() (a *Time32) {\n+\tdata := b.newData()\n+\ta = NewTime32Data(data)\n+\tdata.Release()\n+\treturn\n+}\n+\n+func (b *Time32Builder) newData() (data *Data) {\n+\tbytesRequired := arrow.Time32Traits.BytesRequired(b.length)\n+\tif bytesRequired > 0 && bytesRequired < b.data.Len() {\n+\t\t// trim buffers\n+\t\tb.data.Resize(bytesRequired)\n+\t}\n+\tdata = NewData(b.dtype, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls, 0)\n+\tb.reset()\n+\n+\tif b.data != nil {\n+\t\tb.data.Release()\n+\t\tb.data = nil\n+\t\tb.rawData = nil\n+\t}\n+\n+\treturn\n+}\n+\n+type Time64Builder struct {\n+\tbuilder\n+\n+\tdtype   *arrow.Time64Type\n+\tdata    *memory.Buffer\n+\trawData []arrow.Time64\n+}\n+\n+func NewTime64Builder(mem memory.Allocator, dtype *arrow.Time64Type) *Time64Builder {\n+\treturn &Time64Builder{builder: builder{refCount: 1, mem: mem}, dtype: dtype}\n+}\n+\n+// Release decreases the reference count by 1.\n+// When the reference count goes to zero, the memory is freed.\n+func (b *Time64Builder) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&b.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&b.refCount, -1) == 0 {\n+\t\tif b.nullBitmap != nil {\n+\t\t\tb.nullBitmap.Release()\n+\t\t\tb.nullBitmap = nil\n+\t\t}\n+\t\tif b.data != nil {\n+\t\t\tb.data.Release()\n+\t\t\tb.data = nil\n+\t\t\tb.rawData = nil\n+\t\t}\n+\t}\n+}\n+\n+func (b *Time64Builder) Append(v arrow.Time64) {\n+\tb.Reserve(1)\n+\tb.UnsafeAppend(v)\n+}\n+\n+func (b *Time64Builder) AppendNull() {\n+\tb.Reserve(1)\n+\tb.UnsafeAppendBoolToBitmap(false)\n+}\n+\n+func (b *Time64Builder) UnsafeAppend(v arrow.Time64) {\n+\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\tb.rawData[b.length] = v\n+\tb.length++\n+}\n+\n+func (b *Time64Builder) UnsafeAppendBoolToBitmap(isValid bool) {\n+\tif isValid {\n+\t\tbitutil.SetBit(b.nullBitmap.Bytes(), b.length)\n+\t} else {\n+\t\tb.nulls++\n+\t}\n+\tb.length++\n+}\n+\n+// AppendValues will append the values in the v slice. The valid slice determines which values\n+// in v are valid (not null). The valid slice must either be empty or be equal in length to v. If empty,\n+// all values in v are appended and considered valid.\n+func (b *Time64Builder) AppendValues(v []arrow.Time64, valid []bool) {\n+\tif len(v) != len(valid) && len(valid) != 0 {\n+\t\tpanic(\"len(v) != len(valid) && len(valid) != 0\")\n+\t}\n+\n+\tb.Reserve(len(v))\n+\tif len(v) > 0 {\n+\t\tarrow.Time64Traits.Copy(b.rawData[b.length:], v)\n+\t}\n+\tb.builder.unsafeAppendBoolsToBitmap(valid, len(v))\n+}\n+\n+func (b *Time64Builder) init(capacity int) {\n+\tb.builder.init(capacity)\n+\n+\tb.data = memory.NewResizableBuffer(b.mem)\n+\tbytesN := arrow.Time64Traits.BytesRequired(capacity)\n+\tb.data.Resize(bytesN)\n+\tb.rawData = arrow.Time64Traits.CastFromBytes(b.data.Bytes())\n+}\n+\n+// Reserve ensures there is enough space for appending n elements\n+// by checking the capacity and calling Resize if necessary.\n+func (b *Time64Builder) Reserve(n int) {\n+\tb.builder.reserve(n, b.Resize)\n+}\n+\n+// Resize adjusts the space allocated by b to n elements. If n is greater than b.Cap(),\n+// additional memory will be allocated. If n is smaller, the allocated memory may reduced.\n+func (b *Time64Builder) Resize(n int) {\n+\tnBuilder := n\n+\tif n < minBuilderCapacity {\n+\t\tn = minBuilderCapacity\n+\t}\n+\n+\tif b.capacity == 0 {\n+\t\tb.init(n)\n+\t} else {\n+\t\tb.builder.resize(nBuilder, b.init)\n+\t\tb.data.Resize(arrow.Time64Traits.BytesRequired(n))\n+\t\tb.rawData = arrow.Time64Traits.CastFromBytes(b.data.Bytes())\n+\t}\n+}\n+\n+// NewArray creates a Time64 array from the memory buffers used by the builder and resets the Time64Builder\n+// so it can be used to build a new array.\n+func (b *Time64Builder) NewArray() Interface {\n+\treturn b.NewTime64Array()\n+}\n+\n+// NewTime64Array creates a Time64 array from the memory buffers used by the builder and resets the Time64Builder\n+// so it can be used to build a new array.\n+func (b *Time64Builder) NewTime64Array() (a *Time64) {\n+\tdata := b.newData()\n+\ta = NewTime64Data(data)\n+\tdata.Release()\n+\treturn\n+}\n+\n+func (b *Time64Builder) newData() (data *Data) {\n+\tbytesRequired := arrow.Time64Traits.BytesRequired(b.length)\n+\tif bytesRequired > 0 && bytesRequired < b.data.Len() {\n+\t\t// trim buffers\n+\t\tb.data.Resize(bytesRequired)\n+\t}\n+\tdata = NewData(b.dtype, b.length, []*memory.Buffer{b.nullBitmap, b.data}, nil, b.nulls, 0)\n+\tb.reset()\n+\n+\tif b.data != nil {\n+\t\tb.data.Release()\n+\t\tb.data = nil\n+\t\tb.rawData = nil\n+\t}\n+\n+\treturn\n+}\n+\n var (\n \t_ Builder = (*Int64Builder)(nil)\n \t_ Builder = (*Uint64Builder)(nil)\n@@ -1514,4 +1784,6 @@ var (\n \t_ Builder = (*Int8Builder)(nil)\n \t_ Builder = (*Uint8Builder)(nil)\n \t_ Builder = (*TimestampBuilder)(nil)\n+\t_ Builder = (*Time32Builder)(nil)\n+\t_ Builder = (*Time64Builder)(nil)\n )\ndiff --git a/go/arrow/array/numericbuilder.gen.go.tmpl b/go/arrow/array/numericbuilder.gen.go.tmpl\nindex 7a3a311704..5ae3737452 100644\n--- a/go/arrow/array/numericbuilder.gen.go.tmpl\n+++ b/go/arrow/array/numericbuilder.gen.go.tmpl\n@@ -18,6 +18,7 @@ package array\n \n import (\n \t\"github.com/apache/arrow/go/arrow\"\n+\t\"github.com/apache/arrow/go/arrow/internal/bitutil\"\n \t\"github.com/apache/arrow/go/arrow/internal/debug\"\n \t\"github.com/apache/arrow/go/arrow/memory\"\n )\ndiff --git a/go/arrow/array/numericbuilder_test.go b/go/arrow/array/numericbuilder_test.go\nindex eb60569dae..65f3c86c2e 100644\n--- a/go/arrow/array/numericbuilder_test.go\n+++ b/go/arrow/array/numericbuilder_test.go\n@@ -19,6 +19,7 @@ package array_test\n import (\n \t\"testing\"\n \n+\t\"github.com/apache/arrow/go/arrow\"\n \t\"github.com/apache/arrow/go/arrow/array\"\n \t\"github.com/apache/arrow/go/arrow/memory\"\n \t\"github.com/stretchr/testify/assert\"\n@@ -133,3 +134,231 @@ func TestFloat64Builder_Resize(t *testing.T) {\n \n \tab.Release()\n }\n+\n+func TestNewTime32Builder(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time32Type{Unit: arrow.Second}\n+\tab := array.NewTime32Builder(mem, dtype)\n+\n+\tab.Append(1)\n+\tab.Append(2)\n+\tab.Append(3)\n+\tab.AppendNull()\n+\tab.Append(5)\n+\tab.Append(6)\n+\tab.AppendNull()\n+\tab.Append(8)\n+\tab.Append(9)\n+\tab.Append(10)\n+\n+\t// check state of builder before NewTime32Array\n+\tassert.Equal(t, 10, ab.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, 2, ab.NullN(), \"unexpected NullN()\")\n+\n+\ta := ab.NewTime32Array()\n+\n+\t// check state of builder after NewTime32Array\n+\tassert.Zero(t, ab.Len(), \"unexpected ArrayBuilder.Len(), NewTime32Array did not reset state\")\n+\tassert.Zero(t, ab.Cap(), \"unexpected ArrayBuilder.Cap(), NewTime32Array did not reset state\")\n+\tassert.Zero(t, ab.NullN(), \"unexpected ArrayBuilder.NullN(), NewTime32Array did not reset state\")\n+\n+\t// check state of array\n+\tassert.Equal(t, 2, a.NullN(), \"unexpected null count\")\n+\tassert.Equal(t, []arrow.Time32{1, 2, 3, 0, 5, 6, 0, 8, 9, 10}, a.Time32Values(), \"unexpected Time32Values\")\n+\tassert.Equal(t, []byte{0xb7}, a.NullBitmapBytes()[:1]) // 4 bytes due to minBuilderCapacity\n+\tassert.Len(t, a.Time32Values(), 10, \"unexpected length of Time32Values\")\n+\n+\ta.Release()\n+\n+\tab.Append(7)\n+\tab.Append(8)\n+\n+\ta = ab.NewTime32Array()\n+\n+\tassert.Equal(t, 0, a.NullN())\n+\tassert.Equal(t, []arrow.Time32{7, 8}, a.Time32Values())\n+\tassert.Len(t, a.Time32Values(), 2)\n+\n+\ta.Release()\n+}\n+\n+func TestTime32Builder_AppendValues(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time32Type{Unit: arrow.Second}\n+\tab := array.NewTime32Builder(mem, dtype)\n+\n+\texp := []arrow.Time32{0, 1, 2, 3}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewTime32Array()\n+\tassert.Equal(t, exp, a.Time32Values())\n+\n+\ta.Release()\n+\tab.Release()\n+}\n+\n+func TestTime32Builder_Empty(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time32Type{Unit: arrow.Second}\n+\tab := array.NewTime32Builder(mem, dtype)\n+\n+\texp := []arrow.Time32{0, 1, 2, 3}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewTime32Array()\n+\tassert.Equal(t, exp, a.Time32Values())\n+\ta.Release()\n+\n+\ta = ab.NewTime32Array()\n+\tassert.Zero(t, a.Len())\n+\ta.Release()\n+\n+\tab.Release()\n+}\n+\n+func TestTime32Builder_Resize(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time32Type{Unit: arrow.Second}\n+\tab := array.NewTime32Builder(mem, dtype)\n+\n+\tassert.Equal(t, 0, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tab.Reserve(63)\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tfor i := 0; i < 63; i++ {\n+\t\tab.Append(0)\n+\t}\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 63, ab.Len())\n+\n+\tab.Resize(5)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Resize(32)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Release()\n+}\n+\n+func TestNewTime64Builder(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time64Type{Unit: arrow.Second}\n+\tab := array.NewTime64Builder(mem, dtype)\n+\n+\tab.Append(1)\n+\tab.Append(2)\n+\tab.Append(3)\n+\tab.AppendNull()\n+\tab.Append(5)\n+\tab.Append(6)\n+\tab.AppendNull()\n+\tab.Append(8)\n+\tab.Append(9)\n+\tab.Append(10)\n+\n+\t// check state of builder before NewTime64Array\n+\tassert.Equal(t, 10, ab.Len(), \"unexpected Len()\")\n+\tassert.Equal(t, 2, ab.NullN(), \"unexpected NullN()\")\n+\n+\ta := ab.NewTime64Array()\n+\n+\t// check state of builder after NewTime64Array\n+\tassert.Zero(t, ab.Len(), \"unexpected ArrayBuilder.Len(), NewTime64Array did not reset state\")\n+\tassert.Zero(t, ab.Cap(), \"unexpected ArrayBuilder.Cap(), NewTime64Array did not reset state\")\n+\tassert.Zero(t, ab.NullN(), \"unexpected ArrayBuilder.NullN(), NewTime64Array did not reset state\")\n+\n+\t// check state of array\n+\tassert.Equal(t, 2, a.NullN(), \"unexpected null count\")\n+\tassert.Equal(t, []arrow.Time64{1, 2, 3, 0, 5, 6, 0, 8, 9, 10}, a.Time64Values(), \"unexpected Time64Values\")\n+\tassert.Equal(t, []byte{0xb7}, a.NullBitmapBytes()[:1]) // 4 bytes due to minBuilderCapacity\n+\tassert.Len(t, a.Time64Values(), 10, \"unexpected length of Time64Values\")\n+\n+\ta.Release()\n+\n+\tab.Append(7)\n+\tab.Append(8)\n+\n+\ta = ab.NewTime64Array()\n+\n+\tassert.Equal(t, 0, a.NullN())\n+\tassert.Equal(t, []arrow.Time64{7, 8}, a.Time64Values())\n+\tassert.Len(t, a.Time64Values(), 2)\n+\n+\ta.Release()\n+}\n+\n+func TestTime64Builder_AppendValues(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time64Type{Unit: arrow.Second}\n+\tab := array.NewTime64Builder(mem, dtype)\n+\n+\texp := []arrow.Time64{0, 1, 2, 3}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewTime64Array()\n+\tassert.Equal(t, exp, a.Time64Values())\n+\n+\ta.Release()\n+\tab.Release()\n+}\n+\n+func TestTime64Builder_Empty(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time64Type{Unit: arrow.Second}\n+\tab := array.NewTime64Builder(mem, dtype)\n+\n+\texp := []arrow.Time64{0, 1, 2, 3}\n+\tab.AppendValues(exp, nil)\n+\ta := ab.NewTime64Array()\n+\tassert.Equal(t, exp, a.Time64Values())\n+\ta.Release()\n+\n+\ta = ab.NewTime64Array()\n+\tassert.Zero(t, a.Len())\n+\ta.Release()\n+\n+\tab.Release()\n+}\n+\n+func TestTime64Builder_Resize(t *testing.T) {\n+\tmem := memory.NewCheckedAllocator(memory.NewGoAllocator())\n+\tdefer mem.AssertSize(t, 0)\n+\n+\tdtype := &arrow.Time64Type{Unit: arrow.Second}\n+\tab := array.NewTime64Builder(mem, dtype)\n+\n+\tassert.Equal(t, 0, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tab.Reserve(63)\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 0, ab.Len())\n+\n+\tfor i := 0; i < 63; i++ {\n+\t\tab.Append(0)\n+\t}\n+\tassert.Equal(t, 64, ab.Cap())\n+\tassert.Equal(t, 63, ab.Len())\n+\n+\tab.Resize(5)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Resize(32)\n+\tassert.Equal(t, 5, ab.Len())\n+\n+\tab.Release()\n+}\ndiff --git a/go/arrow/datatype_fixedwidth.go b/go/arrow/datatype_fixedwidth.go\nindex de96ccba4f..cbddcefdb2 100644\n--- a/go/arrow/datatype_fixedwidth.go\n+++ b/go/arrow/datatype_fixedwidth.go\n@@ -26,6 +26,8 @@ func (t *BooleanType) BitWidth() int { return 1 }\n \n type (\n \tTimestamp int64\n+\tTime32    int32\n+\tTime64    int64\n \tTimeUnit  int\n )\n \n@@ -36,7 +38,7 @@ const (\n \tSecond\n )\n \n-func (u TimeUnit) String() string { return [...]string{\"ns\", \"\u00b5s\", \"ms\", \"s\"}[uint(u)&3] }\n+func (u TimeUnit) String() string { return [...]string{\"ns\", \"us\", \"ms\", \"s\"}[uint(u)&3] }\n \n // TimestampType is encoded as a 64-bit signed integer since the UNIX epoch (2017-01-01T00:00:00Z).\n // The zero-value is a nanosecond and time zone neutral. Time zone neutral can be\n@@ -52,10 +54,36 @@ func (*TimestampType) Name() string { return \"timestamp\" }\n // BitWidth returns the number of bits required to store a single element of this data type in memory.\n func (*TimestampType) BitWidth() int { return 64 }\n \n+// Time32Type is encoded as a 32-bit signed integer, representing either seconds or milliseconds since midnight.\n+type Time32Type struct {\n+\tUnit TimeUnit\n+}\n+\n+func (*Time32Type) ID() Type      { return TIME32 }\n+func (*Time32Type) Name() string  { return \"time32\" }\n+func (*Time32Type) BitWidth() int { return 32 }\n+\n+// Time64Type is encoded as a 64-bit signed integer, representing either microseconds or nanoseconds since midnight.\n+type Time64Type struct {\n+\tUnit TimeUnit\n+}\n+\n+func (*Time64Type) ID() Type      { return TIME64 }\n+func (*Time64Type) Name() string  { return \"time64\" }\n+func (*Time64Type) BitWidth() int { return 64 }\n+\n var (\n \tFixedWidthTypes = struct {\n-\t\tBoolean FixedWidthDataType\n+\t\tBoolean  FixedWidthDataType\n+\t\tTime32s  FixedWidthDataType\n+\t\tTime32ms FixedWidthDataType\n+\t\tTime64us FixedWidthDataType\n+\t\tTime64ns FixedWidthDataType\n \t}{\n-\t\tBoolean: &BooleanType{},\n+\t\tBoolean:  &BooleanType{},\n+\t\tTime32s:  &Time32Type{Unit: Second},\n+\t\tTime32ms: &Time32Type{Unit: Millisecond},\n+\t\tTime64us: &Time64Type{Unit: Microsecond},\n+\t\tTime64ns: &Time64Type{Unit: Nanosecond},\n \t}\n )\ndiff --git a/go/arrow/datatype_fixedwidth_test.go b/go/arrow/datatype_fixedwidth_test.go\nindex 44fbdd1357..865f0aeffb 100644\n--- a/go/arrow/datatype_fixedwidth_test.go\n+++ b/go/arrow/datatype_fixedwidth_test.go\n@@ -30,7 +30,7 @@ func TestTimeUnit_String(t *testing.T) {\n \t\texp string\n \t}{\n \t\t{arrow.Nanosecond, \"ns\"},\n-\t\t{arrow.Microsecond, \"\u00b5s\"},\n+\t\t{arrow.Microsecond, \"us\"},\n \t\t{arrow.Millisecond, \"ms\"},\n \t\t{arrow.Second, \"s\"},\n \t}\ndiff --git a/go/arrow/numeric.tmpldata b/go/arrow/numeric.tmpldata\nindex ea08d8bded..b9e976eea0 100644\n--- a/go/arrow/numeric.tmpldata\n+++ b/go/arrow/numeric.tmpldata\n@@ -83,5 +83,29 @@\n     \"Opt\": {\n       \"Parametric\": true\n     }\n+  },\n+  {\n+    \"Name\": \"Time32\",\n+    \"name\": \"time32\",\n+    \"Type\": \"Time32\",\n+    \"QualifiedType\": \"arrow.Time32\",\n+    \"InternalType\": \"int32\",\n+    \"Default\": \"0\",\n+    \"Size\": \"4\",\n+    \"Opt\": {\n+      \"Parametric\": true\n+    }\n+  },\n+  {\n+    \"Name\": \"Time64\",\n+    \"name\": \"time64\",\n+    \"Type\": \"Time64\",\n+    \"QualifiedType\": \"arrow.Time64\",\n+    \"InternalType\": \"int64\",\n+    \"Default\": \"0\",\n+    \"Size\": \"8\",\n+    \"Opt\": {\n+      \"Parametric\": true\n+    }\n   }\n ]\n\\ No newline at end of file\ndiff --git a/go/arrow/type_traits_numeric.gen.go b/go/arrow/type_traits_numeric.gen.go\nindex b51960b6dd..59ed13f541 100644\n--- a/go/arrow/type_traits_numeric.gen.go\n+++ b/go/arrow/type_traits_numeric.gen.go\n@@ -36,6 +36,8 @@ var (\n \tInt8Traits      int8Traits\n \tUint8Traits     uint8Traits\n \tTimestampTraits timestampTraits\n+\tTime32Traits    time32Traits\n+\tTime64Traits    time64Traits\n )\n \n // Int64 traits\n@@ -565,3 +567,99 @@ func (timestampTraits) CastToBytes(b []Timestamp) []byte {\n \n // Copy copies src to dst.\n func (timestampTraits) Copy(dst, src []Timestamp) { copy(dst, src) }\n+\n+// Time32 traits\n+\n+const (\n+\t// Time32SizeBytes specifies the number of bytes required to store a single Time32 in memory\n+\tTime32SizeBytes = int(unsafe.Sizeof(Time32(0)))\n+)\n+\n+type time32Traits struct{}\n+\n+// BytesRequired returns the number of bytes required to store n elements in memory.\n+func (time32Traits) BytesRequired(n int) int { return Time32SizeBytes * n }\n+\n+// PutValue\n+func (time32Traits) PutValue(b []byte, v Time32) {\n+\tbinary.LittleEndian.PutUint32(b, uint32(v))\n+}\n+\n+// CastFromBytes reinterprets the slice b to a slice of type Time32.\n+//\n+// NOTE: len(b) must be a multiple of Time32SizeBytes.\n+func (time32Traits) CastFromBytes(b []byte) []Time32 {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []Time32\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len / Time32SizeBytes\n+\ts.Cap = h.Cap / Time32SizeBytes\n+\n+\treturn res\n+}\n+\n+// CastToBytes reinterprets the slice b to a slice of bytes.\n+func (time32Traits) CastToBytes(b []Time32) []byte {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []byte\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len * Time32SizeBytes\n+\ts.Cap = h.Cap * Time32SizeBytes\n+\n+\treturn res\n+}\n+\n+// Copy copies src to dst.\n+func (time32Traits) Copy(dst, src []Time32) { copy(dst, src) }\n+\n+// Time64 traits\n+\n+const (\n+\t// Time64SizeBytes specifies the number of bytes required to store a single Time64 in memory\n+\tTime64SizeBytes = int(unsafe.Sizeof(Time64(0)))\n+)\n+\n+type time64Traits struct{}\n+\n+// BytesRequired returns the number of bytes required to store n elements in memory.\n+func (time64Traits) BytesRequired(n int) int { return Time64SizeBytes * n }\n+\n+// PutValue\n+func (time64Traits) PutValue(b []byte, v Time64) {\n+\tbinary.LittleEndian.PutUint64(b, uint64(v))\n+}\n+\n+// CastFromBytes reinterprets the slice b to a slice of type Time64.\n+//\n+// NOTE: len(b) must be a multiple of Time64SizeBytes.\n+func (time64Traits) CastFromBytes(b []byte) []Time64 {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []Time64\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len / Time64SizeBytes\n+\ts.Cap = h.Cap / Time64SizeBytes\n+\n+\treturn res\n+}\n+\n+// CastToBytes reinterprets the slice b to a slice of bytes.\n+func (time64Traits) CastToBytes(b []Time64) []byte {\n+\th := (*reflect.SliceHeader)(unsafe.Pointer(&b))\n+\n+\tvar res []byte\n+\ts := (*reflect.SliceHeader)(unsafe.Pointer(&res))\n+\ts.Data = h.Data\n+\ts.Len = h.Len * Time64SizeBytes\n+\ts.Cap = h.Cap * Time64SizeBytes\n+\n+\treturn res\n+}\n+\n+// Copy copies src to dst.\n+func (time64Traits) Copy(dst, src []Time64) { copy(dst, src) }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T13:27:39.674+0000",
                    "updated": "2018-11-15T13:27:39.674+0000",
                    "started": "2018-11-15T13:27:39.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166428",
                    "issueId": "13195616"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@d0bf891[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a1279b2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17d3bd9e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3ea5893f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@420a29c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@772793ef[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d92ffd8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6fec6d24[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c3b0d22[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@374851a1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5dce14af[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@51c7d77f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 15 13:27:33 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-15T13:27:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3672/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-11-01T10:38:43.000+0000",
        "updated": "2018-11-15T13:28:41.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] implement Time32 array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/comment/16683010",
                    "id": "16683010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alexandreyc",
                        "name": "alexandreyc",
                        "key": "alexandreyc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Alexandre Crayssac",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Submitted PR: https://github.com/apache/arrow/pull/2944",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alexandreyc",
                        "name": "alexandreyc",
                        "key": "alexandreyc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Alexandre Crayssac",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-11-11T20:59:27.180+0000",
                    "updated": "2018-11-11T20:59:27.180+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195616/comment/16688047",
                    "id": "16688047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2944\n[https://github.com/apache/arrow/pull/2944]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-15T13:27:33.514+0000",
                    "updated": "2018-11-15T13:27:33.514+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|s000nk:",
        "customfield_12314139": null
    }
}