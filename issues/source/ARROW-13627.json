{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13395191",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191",
    "key": "ARROW-13627",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12621608",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12621608",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13392603",
                    "key": "ARROW-13497",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13392603",
                    "fields": {
                        "summary": "[C++][R] FunctionOptions not used by aggregation nodes",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13627/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/638223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#issuecomment-899616042\n\n\n   https://issues.apache.org/jira/browse/ARROW-13627\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T15:47:45.913+0000",
                    "updated": "2021-08-16T15:47:45.913+0000",
                    "started": "2021-08-16T15:47:45.913+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638223",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/638311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#issuecomment-899686782\n\n\n   D'oh, I forgot to check the R tests that motivated this in the first place.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T17:29:04.348+0000",
                    "updated": "2021-08-16T17:29:04.348+0000",
                    "started": "2021-08-16T17:29:04.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638311",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/638348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#issuecomment-899733302\n\n\n   Blocked on ARROW-13638.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-16T18:40:26.246+0000",
                    "updated": "2021-08-16T18:40:26.246+0000",
                    "started": "2021-08-16T18:40:26.246+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638348",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/638908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r690755756\n\n\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -390,29 +392,6 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n   return from_datum(std::move(out));\n }\n \n-// [[arrow::export]]\n-SEXP compute__GroupBy(cpp11::list arguments, cpp11::list keys, cpp11::list options) {\n\nReview comment:\n       FWIW, this appeared unused to me.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-17T22:06:48.450+0000",
                    "updated": "2021-08-17T22:06:48.450+0000",
                    "started": "2021-08-17T22:06:48.450+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "638908",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691211988\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -172,6 +173,7 @@ struct ProductImpl : public ScalarAggregator {\n     } else {\n       const auto& data = *batch[0].scalar();\n       this->count += data.is_valid * batch.length;\n+      this->nulls_observed = this->nulls_observed || !data.is_valid;\n\nReview comment:\n       Is there a possible optimization: if options.skip_nulls, either check the bitmask up front for missings and exit early if any, or exit after the first one is found? It looks like as it is, we still go through and count/sum/etc. all non-null values always.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T12:59:01.320+0000",
                    "updated": "2021-08-18T12:59:01.320+0000",
                    "started": "2021-08-18T12:59:01.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639061",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691218753\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -172,6 +173,7 @@ struct ProductImpl : public ScalarAggregator {\n     } else {\n       const auto& data = *batch[0].scalar();\n       this->count += data.is_valid * batch.length;\n+      this->nulls_observed = this->nulls_observed || !data.is_valid;\n\nReview comment:\n       Ah yes, we can short-circuit as soon as nulls_observed if we have !skip_nulls. Updated, thanks for pointing this out.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T13:07:03.368+0000",
                    "updated": "2021-08-18T13:07:03.368+0000",
                    "started": "2021-08-18T13:07:03.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639066",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r690755756\n\n\n\n##########\nFile path: r/src/compute.cpp\n##########\n@@ -390,29 +392,6 @@ SEXP compute__CallFunction(std::string func_name, cpp11::list args, cpp11::list\n   return from_datum(std::move(out));\n }\n \n-// [[arrow::export]]\n-SEXP compute__GroupBy(cpp11::list arguments, cpp11::list keys, cpp11::list options) {\n\nReview comment:\n       FWIW, this appeared unused to me.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -172,6 +173,7 @@ struct ProductImpl : public ScalarAggregator {\n     } else {\n       const auto& data = *batch[0].scalar();\n       this->count += data.is_valid * batch.length;\n+      this->nulls_observed = this->nulls_observed || !data.is_valid;\n\nReview comment:\n       Ah yes, we can short-circuit as soon as nulls_observed if we have !skip_nulls. Updated, thanks for pointing this out.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:49:07.261+0000",
                    "updated": "2021-08-18T16:49:07.261+0000",
                    "started": "2021-08-18T16:49:07.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639371",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691211988\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -172,6 +173,7 @@ struct ProductImpl : public ScalarAggregator {\n     } else {\n       const auto& data = *batch[0].scalar();\n       this->count += data.is_valid * batch.length;\n+      this->nulls_observed = this->nulls_observed || !data.is_valid;\n\nReview comment:\n       Is there a possible optimization: if options.skip_nulls, either check the bitmask up front for missings and exit early if any, or exit after the first one is found? It looks like as it is, we still go through and count/sum/etc. all non-null values always.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:57:37.151+0000",
                    "updated": "2021-08-18T16:57:37.151+0000",
                    "started": "2021-08-18T16:57:37.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639446",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691943848\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -297,11 +310,13 @@ struct BooleanAnyImpl : public ScalarAggregator {\n     const auto& other = checked_cast<const BooleanAnyImpl&>(src);\n     this->any |= other.any;\n     this->has_nulls |= other.has_nulls;\n+    this->count += other.count;\n     return Status::OK();\n   }\n \n   Status Finalize(KernelContext* ctx, Datum* out) override {\n-    if (!options.skip_nulls && !this->any && this->has_nulls) {\n+    if ((!options.skip_nulls && !this->any && this->has_nulls) ||\n+        this->count < options.min_count) {\n\nReview comment:\n       I'm curious about this condition: if there are nulls and `options.skip_nulls` is false, this kernel can still return true?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T09:27:45.871+0000",
                    "updated": "2021-08-19T09:27:45.871+0000",
                    "started": "2021-08-19T09:27:45.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639762",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691943848\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -297,11 +310,13 @@ struct BooleanAnyImpl : public ScalarAggregator {\n     const auto& other = checked_cast<const BooleanAnyImpl&>(src);\n     this->any |= other.any;\n     this->has_nulls |= other.has_nulls;\n+    this->count += other.count;\n     return Status::OK();\n   }\n \n   Status Finalize(KernelContext* ctx, Datum* out) override {\n-    if (!options.skip_nulls && !this->any && this->has_nulls) {\n+    if ((!options.skip_nulls && !this->any && this->has_nulls) ||\n+        this->count < options.min_count) {\n\nReview comment:\n       I'm curious about this condition: if there are nulls and `options.skip_nulls` is false, this kernel can still return true (when `this->any` is true)?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T09:28:19.245+0000",
                    "updated": "2021-08-19T09:28:19.245+0000",
                    "started": "2021-08-19T09:28:19.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639763",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691946420\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -363,11 +381,13 @@ struct BooleanAllImpl : public ScalarAggregator {\n     const auto& other = checked_cast<const BooleanAllImpl&>(src);\n     this->all &= other.all;\n     this->has_nulls |= other.has_nulls;\n+    this->count += other.count;\n     return Status::OK();\n   }\n \n   Status Finalize(KernelContext*, Datum* out) override {\n-    if (!options.skip_nulls && this->all && this->has_nulls) {\n+    if ((!options.skip_nulls && this->all && this->has_nulls) ||\n+        this->count < options.min_count) {\n\nReview comment:\n       Same question here: if the input is `[false, true, null]` and `skip_nulls` is false, then the result is `false` rather than `null`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T09:31:03.562+0000",
                    "updated": "2021-08-19T09:31:03.562+0000",
                    "started": "2021-08-19T09:31:03.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639764",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r691949321\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -174,19 +172,23 @@ TEST(TestBooleanAggregation, Sum) {\n                           ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/2));\n   ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(),\n                           ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/3));\n-  ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(1),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n-  ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(1),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/2));\n+  ValidateBooleanAgg<Sum>(\"[]\", std::make_shared<UInt64Scalar>(0),\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n   ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/3));\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n\nReview comment:\n       Why remove the non-zero min_count tests here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1104,6 +1130,17 @@ struct GroupedProductImpl final : public GroupedAggregator {\n       BitUtil::SetBitTo(null_bitmap->mutable_data(), i, false);\n     }\n \n+    if (!options_.skip_nulls) {\n+      null_count = kUnknownNullCount;\n+      if (null_bitmap) {\n+        arrow::internal::BitmapAnd(null_bitmap->data(), /*left_offset=*/0,\n+                                   no_nulls_.data(), /*right_offset=*/0, num_groups_,\n+                                   /*out_offset=*/0, null_bitmap->mutable_data());\n+      } else {\n+        ARROW_ASSIGN_OR_RAISE(null_bitmap, no_nulls_.Finish());\n+      }\n+    }\n+\n\nReview comment:\n       Sidenote: the Sum, Product and Mean aggregators probably have a lot of code in common. Do you think it can be factored out in some kind of mixin or base class?\r\n   Or, conversely, that the operation-specific code can be moved into a separate class on which the main aggregator implementation would be templated?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -219,21 +221,24 @@ TEST(TestBooleanAggregation, Product) {\n       json, std::make_shared<UInt64Scalar>(),\n       ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/3));\n   ValidateBooleanAgg<Product>(\n-      json, std::make_shared<UInt64Scalar>(1),\n-      ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n-  ValidateBooleanAgg<Product>(\n-      json, std::make_shared<UInt64Scalar>(1),\n-      ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/2));\n+      \"[]\", std::make_shared<UInt64Scalar>(1),\n+      ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n   ValidateBooleanAgg<Product>(\n       json, std::make_shared<UInt64Scalar>(),\n-      ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/3));\n+      ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n\nReview comment:\n       Same question here.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate_test.cc\n##########\n@@ -1269,6 +1297,64 @@ TEST(GroupBy, Product) {\n                           /*verbose=*/true);\n }\n \n+TEST(GroupBy, SumMeanProduct) {\n\nReview comment:\n       Call this `SumMeanProductKeepNulls`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1740,117 +1790,239 @@ struct GroupedMinMaxFactory {\n // Any/All implementation\n \n struct GroupedAnyImpl : public GroupedAggregator {\n-  Status Init(ExecContext* ctx, const FunctionOptions*) override {\n-    seen_ = TypedBufferBuilder<bool>(ctx->memory_pool());\n+  Status Init(ExecContext* ctx, const FunctionOptions* options) override {\n+    options_ = checked_cast<const ScalarAggregateOptions&>(*options);\n+    pool_ = ctx->memory_pool();\n+    seen_ = TypedBufferBuilder<bool>(pool_);\n+    no_nulls_ = TypedBufferBuilder<bool>(pool_);\n+    counts_ = TypedBufferBuilder<int64_t>(pool_);\n     return Status::OK();\n   }\n \n   Status Resize(int64_t new_num_groups) override {\n     auto added_groups = new_num_groups - num_groups_;\n     num_groups_ = new_num_groups;\n-    return seen_.Append(added_groups, false);\n+    RETURN_NOT_OK(seen_.Append(added_groups, false));\n+    RETURN_NOT_OK(no_nulls_.Append(added_groups, true));\n+    return counts_.Append(added_groups, 0);\n+  }\n+\n+  Status Consume(const ExecBatch& batch) override {\n+    uint8_t* seen = seen_.mutable_data();\n+    uint8_t* no_nulls = no_nulls_.mutable_data();\n+    int64_t* counts = counts_.mutable_data();\n+    const auto& input = *batch[0].array();\n+    auto g = batch[1].array()->GetValues<uint32_t>(1);\n+\n+    if (input.MayHaveNulls()) {\n+      const uint8_t* bitmap = input.buffers[1]->data();\n+      arrow::internal::VisitBitBlocksVoid(\n+          input.buffers[0], input.offset, input.length,\n+          [&](int64_t position) {\n+            counts[*g]++;\n+            BitUtil::SetBitTo(\n\nReview comment:\n       Can probably shortcut here:\r\n   ```c++\r\n   if (!BitUtil::GetBit(seen, *g) && BitUtil::GetBit(bitmap, position)) {\r\n     BitUtil::SetBitTo(seen, *g);\r\n   }\r\n   ```\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1740,117 +1790,239 @@ struct GroupedMinMaxFactory {\n // Any/All implementation\n \n struct GroupedAnyImpl : public GroupedAggregator {\n-  Status Init(ExecContext* ctx, const FunctionOptions*) override {\n-    seen_ = TypedBufferBuilder<bool>(ctx->memory_pool());\n+  Status Init(ExecContext* ctx, const FunctionOptions* options) override {\n+    options_ = checked_cast<const ScalarAggregateOptions&>(*options);\n+    pool_ = ctx->memory_pool();\n+    seen_ = TypedBufferBuilder<bool>(pool_);\n+    no_nulls_ = TypedBufferBuilder<bool>(pool_);\n+    counts_ = TypedBufferBuilder<int64_t>(pool_);\n     return Status::OK();\n   }\n \n   Status Resize(int64_t new_num_groups) override {\n     auto added_groups = new_num_groups - num_groups_;\n     num_groups_ = new_num_groups;\n-    return seen_.Append(added_groups, false);\n+    RETURN_NOT_OK(seen_.Append(added_groups, false));\n+    RETURN_NOT_OK(no_nulls_.Append(added_groups, true));\n+    return counts_.Append(added_groups, 0);\n+  }\n+\n+  Status Consume(const ExecBatch& batch) override {\n+    uint8_t* seen = seen_.mutable_data();\n+    uint8_t* no_nulls = no_nulls_.mutable_data();\n+    int64_t* counts = counts_.mutable_data();\n+    const auto& input = *batch[0].array();\n+    auto g = batch[1].array()->GetValues<uint32_t>(1);\n+\n+    if (input.MayHaveNulls()) {\n+      const uint8_t* bitmap = input.buffers[1]->data();\n+      arrow::internal::VisitBitBlocksVoid(\n+          input.buffers[0], input.offset, input.length,\n+          [&](int64_t position) {\n+            counts[*g]++;\n+            BitUtil::SetBitTo(\n+                seen, *g, BitUtil::GetBit(seen, *g) || BitUtil::GetBit(bitmap, position));\n+            g++;\n+          },\n+          [&] { BitUtil::SetBitTo(no_nulls, *g++, false); });\n+    } else {\n+      arrow::internal::VisitBitBlocksVoid(\n+          input.buffers[1], input.offset, input.length,\n+          [&](int64_t) {\n+            counts[*g++]++;\n+            BitUtil::SetBitTo(seen, *g++, true);\n+          },\n+          [&]() { counts[*g]++; });\n+    }\n+    return Status::OK();\n   }\n \n   Status Merge(GroupedAggregator&& raw_other,\n                const ArrayData& group_id_mapping) override {\n     auto other = checked_cast<GroupedAnyImpl*>(&raw_other);\n \n-    auto seen = seen_.mutable_data();\n-    auto other_seen = other->seen_.data();\n+    uint8_t* seen = seen_.mutable_data();\n+    uint8_t* no_nulls = no_nulls_.mutable_data();\n+    int64_t* counts = counts_.mutable_data();\n+\n+    const uint8_t* other_seen = other->seen_.mutable_data();\n+    const uint8_t* other_no_nulls = other->no_nulls_.mutable_data();\n+    const int64_t* other_counts = other->counts_.mutable_data();\n \n     auto g = group_id_mapping.GetValues<uint32_t>(1);\n     for (int64_t other_g = 0; other_g < group_id_mapping.length; ++other_g, ++g) {\n-      if (BitUtil::GetBit(other_seen, other_g)) BitUtil::SetBitTo(seen, *g, true);\n+      counts[*g] += other_counts[other_g];\n+      BitUtil::SetBitTo(\n+          seen, *g, BitUtil::GetBit(seen, *g) || BitUtil::GetBit(other_seen, other_g));\n+      BitUtil::SetBitTo(\n+          no_nulls, *g,\n+          BitUtil::GetBit(no_nulls, *g) && BitUtil::GetBit(other_no_nulls, other_g));\n     }\n     return Status::OK();\n   }\n \n-  Status Consume(const ExecBatch& batch) override {\n-    auto seen = seen_.mutable_data();\n+  Result<Datum> Finalize() override {\n+    std::shared_ptr<Buffer> null_bitmap;\n+    const int64_t* counts = counts_.data();\n+    int64_t null_count = 0;\n \n-    const auto& input = *batch[0].array();\n+    for (int64_t i = 0; i < num_groups_; ++i) {\n+      if (counts[i] >= options_.min_count) continue;\n \n-    auto g = batch[1].array()->GetValues<uint32_t>(1);\n-    arrow::internal::VisitTwoBitBlocksVoid(\n-        input.buffers[0], input.offset, input.buffers[1], input.offset, input.length,\n-        [&](int64_t) { BitUtil::SetBitTo(seen, *g++, true); }, [&]() { g++; });\n-    return Status::OK();\n-  }\n+      if (null_bitmap == nullptr) {\n+        ARROW_ASSIGN_OR_RAISE(null_bitmap, AllocateBitmap(num_groups_, pool_));\n+        BitUtil::SetBitsTo(null_bitmap->mutable_data(), 0, num_groups_, true);\n+      }\n+\n+      null_count += 1;\n+      BitUtil::SetBitTo(null_bitmap->mutable_data(), i, false);\n+    }\n \n-  Result<Datum> Finalize() override {\n     ARROW_ASSIGN_OR_RAISE(auto seen, seen_.Finish());\n-    return std::make_shared<BooleanArray>(num_groups_, std::move(seen));\n+    if (!options_.skip_nulls) {\n+      null_count = kUnknownNullCount;\n+      ARROW_ASSIGN_OR_RAISE(auto no_nulls, no_nulls_.Finish());\n+      arrow::internal::BitmapOr(no_nulls->data(), /*left_offset=*/0, seen->data(),\n+                                /*right_offset=*/0, num_groups_,\n+                                /*out_offset=*/0, no_nulls->mutable_data());\n+      if (null_bitmap) {\n+        arrow::internal::BitmapAnd(null_bitmap->data(), /*left_offset=*/0,\n+                                   no_nulls->data(), /*right_offset=*/0, num_groups_,\n+                                   /*out_offset=*/0, null_bitmap->mutable_data());\n+      } else {\n+        null_bitmap = std::move(no_nulls);\n+      }\n+    }\n+\n+    return ArrayData::Make(out_type(), num_groups_,\n+                           {std::move(null_bitmap), std::move(seen)}, null_count);\n   }\n \n   std::shared_ptr<DataType> out_type() const override { return boolean(); }\n \n   int64_t num_groups_ = 0;\n   ScalarAggregateOptions options_;\n-  TypedBufferBuilder<bool> seen_;\n+  TypedBufferBuilder<bool> seen_, no_nulls_;\n+  TypedBufferBuilder<int64_t> counts_;\n+  MemoryPool* pool_;\n };\n \n struct GroupedAllImpl : public GroupedAggregator {\n-  Status Init(ExecContext* ctx, const FunctionOptions*) override {\n-    seen_ = TypedBufferBuilder<bool>(ctx->memory_pool());\n+  Status Init(ExecContext* ctx, const FunctionOptions* options) override {\n+    options_ = checked_cast<const ScalarAggregateOptions&>(*options);\n+    pool_ = ctx->memory_pool();\n+    seen_ = TypedBufferBuilder<bool>(pool_);\n+    no_nulls_ = TypedBufferBuilder<bool>(pool_);\n+    counts_ = TypedBufferBuilder<int64_t>(pool_);\n     return Status::OK();\n   }\n \n   Status Resize(int64_t new_num_groups) override {\n     auto added_groups = new_num_groups - num_groups_;\n     num_groups_ = new_num_groups;\n-    return seen_.Append(added_groups, true);\n-  }\n-\n-  Status Merge(GroupedAggregator&& raw_other,\n-               const ArrayData& group_id_mapping) override {\n-    auto other = checked_cast<GroupedAllImpl*>(&raw_other);\n-\n-    auto seen = seen_.mutable_data();\n-    auto other_seen = other->seen_.data();\n-\n-    auto g = group_id_mapping.GetValues<uint32_t>(1);\n-    for (int64_t other_g = 0; other_g < group_id_mapping.length; ++other_g, ++g) {\n-      BitUtil::SetBitTo(\n-          seen, *g, BitUtil::GetBit(seen, *g) && BitUtil::GetBit(other_seen, other_g));\n-    }\n-    return Status::OK();\n+    RETURN_NOT_OK(seen_.Append(added_groups, true));\n+    RETURN_NOT_OK(no_nulls_.Append(added_groups, true));\n+    return counts_.Append(added_groups, 0);\n   }\n \n   Status Consume(const ExecBatch& batch) override {\n-    auto seen = seen_.mutable_data();\n-\n+    uint8_t* seen = seen_.mutable_data();\n+    uint8_t* no_nulls = no_nulls_.mutable_data();\n+    int64_t* counts = counts_.mutable_data();\n     const auto& input = *batch[0].array();\n-\n     auto g = batch[1].array()->GetValues<uint32_t>(1);\n+\n     if (input.MayHaveNulls()) {\n       const uint8_t* bitmap = input.buffers[1]->data();\n       arrow::internal::VisitBitBlocksVoid(\n           input.buffers[0], input.offset, input.length,\n           [&](int64_t position) {\n+            counts[*g]++;\n             BitUtil::SetBitTo(seen, *g,\n                               BitUtil::GetBit(seen, *g) &&\n                                   BitUtil::GetBit(bitmap, input.offset + position));\n             g++;\n           },\n-          [&]() { g++; });\n+          [&]() { BitUtil::SetBitTo(no_nulls, *g++, false); });\n     } else {\n       arrow::internal::VisitBitBlocksVoid(\n-          input.buffers[1], input.offset, input.length, [&](int64_t) { g++; },\n-          [&]() { BitUtil::SetBitTo(seen, *g++, false); });\n+          input.buffers[1], input.offset, input.length, [&](int64_t) { counts[*g++]++; },\n+          [&]() {\n+            counts[*g]++;\n+            BitUtil::SetBitTo(seen, *g++, false);\n+          });\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Merge(GroupedAggregator&& raw_other,\n+               const ArrayData& group_id_mapping) override {\n+    auto other = checked_cast<GroupedAllImpl*>(&raw_other);\n+\n+    uint8_t* seen = seen_.mutable_data();\n+    uint8_t* no_nulls = no_nulls_.mutable_data();\n+    int64_t* counts = counts_.mutable_data();\n+\n+    const uint8_t* other_seen = other->seen_.mutable_data();\n+    const uint8_t* other_no_nulls = other->no_nulls_.mutable_data();\n+    const int64_t* other_counts = other->counts_.mutable_data();\n+\n+    auto g = group_id_mapping.GetValues<uint32_t>(1);\n+    for (int64_t other_g = 0; other_g < group_id_mapping.length; ++other_g, ++g) {\n+      counts[*g] += other_counts[other_g];\n+      BitUtil::SetBitTo(\n+          seen, *g, BitUtil::GetBit(seen, *g) && BitUtil::GetBit(other_seen, other_g));\n+      BitUtil::SetBitTo(\n+          no_nulls, *g,\n+          BitUtil::GetBit(no_nulls, *g) && BitUtil::GetBit(other_no_nulls, other_g));\n     }\n     return Status::OK();\n   }\n \n   Result<Datum> Finalize() override {\n+    std::shared_ptr<Buffer> null_bitmap;\n+    const int64_t* counts = counts_.data();\n+    int64_t null_count = 0;\n+\n+    for (int64_t i = 0; i < num_groups_; ++i) {\n+      if (counts[i] >= options_.min_count) continue;\n+\n+      if (null_bitmap == nullptr) {\n+        ARROW_ASSIGN_OR_RAISE(null_bitmap, AllocateBitmap(num_groups_, pool_));\n+        BitUtil::SetBitsTo(null_bitmap->mutable_data(), 0, num_groups_, true);\n+      }\n+\n+      null_count += 1;\n+      BitUtil::SetBitTo(null_bitmap->mutable_data(), i, false);\n+    }\n+\n     ARROW_ASSIGN_OR_RAISE(auto seen, seen_.Finish());\n-    return std::make_shared<BooleanArray>(num_groups_, std::move(seen));\n+    if (!options_.skip_nulls) {\n+      null_count = kUnknownNullCount;\n+      ARROW_ASSIGN_OR_RAISE(auto no_nulls, no_nulls_.Finish());\n+      arrow::internal::BitmapOrNot(no_nulls->data(), /*left_offset=*/0, seen->data(),\n+                                   /*right_offset=*/0, num_groups_,\n+                                   /*out_offset=*/0, no_nulls->mutable_data());\n+      if (null_bitmap) {\n+        arrow::internal::BitmapAnd(null_bitmap->data(), /*left_offset=*/0,\n+                                   no_nulls->data(), /*right_offset=*/0, num_groups_,\n+                                   /*out_offset=*/0, null_bitmap->mutable_data());\n+      } else {\n+        null_bitmap = std::move(no_nulls);\n+      }\n+    }\n+\n+    return ArrayData::Make(out_type(), num_groups_,\n+                           {std::move(null_bitmap), std::move(seen)}, null_count);\n   }\n \n   std::shared_ptr<DataType> out_type() const override { return boolean(); }\n \n   int64_t num_groups_ = 0;\n   ScalarAggregateOptions options_;\n-  TypedBufferBuilder<bool> seen_;\n+  TypedBufferBuilder<bool> seen_, no_nulls_;\n+  TypedBufferBuilder<int64_t> counts_;\n+  MemoryPool* pool_;\n\nReview comment:\n       Similarly to the remark above about Sum / Mean / Product, I also wonder if Any and All can be reconciled.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T09:52:02.391+0000",
                    "updated": "2021-08-19T09:52:02.391+0000",
                    "started": "2021-08-19T09:52:02.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639771",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r692053961\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -297,11 +310,13 @@ struct BooleanAnyImpl : public ScalarAggregator {\n     const auto& other = checked_cast<const BooleanAnyImpl&>(src);\n     this->any |= other.any;\n     this->has_nulls |= other.has_nulls;\n+    this->count += other.count;\n     return Status::OK();\n   }\n \n   Status Finalize(KernelContext* ctx, Datum* out) override {\n-    if (!options.skip_nulls && !this->any && this->has_nulls) {\n+    if ((!options.skip_nulls && !this->any && this->has_nulls) ||\n+        this->count < options.min_count) {\n\nReview comment:\n       Yes, it looked weird to me as well, but that is how [Kleene logic](https://en.wikipedia.org/wiki/Three-valued_logic#Kleene_and_Priest_logics) works, and you can observe this in R:\r\n   \r\n   ```r\r\n   > any(c(NA), na.rm = FALSE)\r\n   [1] NA\r\n   > any(c(NA, TRUE), na.rm = FALSE)\r\n   [1] TRUE\r\n   > any(c(NA, FALSE), na.rm = FALSE)\r\n   [1] NA\r\n   > any(c(), na.rm = FALSE)\r\n   [1] FALSE\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T12:14:56.759+0000",
                    "updated": "2021-08-19T12:14:56.759+0000",
                    "started": "2021-08-19T12:14:56.759+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639811",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r692054484\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic.cc\n##########\n@@ -363,11 +381,13 @@ struct BooleanAllImpl : public ScalarAggregator {\n     const auto& other = checked_cast<const BooleanAllImpl&>(src);\n     this->all &= other.all;\n     this->has_nulls |= other.has_nulls;\n+    this->count += other.count;\n     return Status::OK();\n   }\n \n   Status Finalize(KernelContext*, Datum* out) override {\n-    if (!options.skip_nulls && this->all && this->has_nulls) {\n+    if ((!options.skip_nulls && this->all && this->has_nulls) ||\n+        this->count < options.min_count) {\n\nReview comment:\n       Yes, and this matches base R/dplyr's behavior:\r\n   \r\n   ```r\r\n   > all(c(FALSE, TRUE, NA), na.rm = FALSE)\r\n   [1] FALSE\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T12:15:43.278+0000",
                    "updated": "2021-08-19T12:15:43.278+0000",
                    "started": "2021-08-19T12:15:43.278+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639813",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/639995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r692413118\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/hash_aggregate.cc\n##########\n@@ -1104,6 +1130,17 @@ struct GroupedProductImpl final : public GroupedAggregator {\n       BitUtil::SetBitTo(null_bitmap->mutable_data(), i, false);\n     }\n \n+    if (!options_.skip_nulls) {\n+      null_count = kUnknownNullCount;\n+      if (null_bitmap) {\n+        arrow::internal::BitmapAnd(null_bitmap->data(), /*left_offset=*/0,\n+                                   no_nulls_.data(), /*right_offset=*/0, num_groups_,\n+                                   /*out_offset=*/0, null_bitmap->mutable_data());\n+      } else {\n+        ARROW_ASSIGN_OR_RAISE(null_bitmap, no_nulls_.Finish());\n+      }\n+    }\n+\n\nReview comment:\n       I've made all 5 kernels use CRTP. GroupedMeanImpl is kind of iffy under this pattern but the other 4 kernels consolidate nicely.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-19T19:15:46.274+0000",
                    "updated": "2021-08-19T19:15:46.274+0000",
                    "started": "2021-08-19T19:15:46.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639995",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/640757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r694119940\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -174,19 +172,23 @@ TEST(TestBooleanAggregation, Sum) {\n                           ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/2));\n   ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(),\n                           ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/3));\n-  ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(1),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n-  ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(1),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/2));\n+  ValidateBooleanAgg<Sum>(\"[]\", std::make_shared<UInt64Scalar>(0),\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n   ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/3));\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n\nReview comment:\n       Ping here.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -744,20 +771,10 @@ TYPED_TEST(TestMeanKernelNumeric, ScalarAggregateOptions) {\n \n   ValidateMean<TypeParam>(\"[]\", nan_result,\n                           ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n-  ValidateMean<TypeParam>(\"[null]\", nan_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n-  ValidateMean<TypeParam>(\"[]\", null_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n   ValidateMean<TypeParam>(\"[null]\", null_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n-  ValidateMean<TypeParam>(json, expected_result,\n                           ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n-  ValidateMean<TypeParam>(json, expected_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/3));\n-  ValidateMean<TypeParam>(json, expected_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/4));\n   ValidateMean<TypeParam>(json, null_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/15));\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n\nReview comment:\n       It seems like there should be some tests with `skip_nulls=false` and a non-zero `min_count`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-23T16:25:45.618+0000",
                    "updated": "2021-08-23T16:25:45.618+0000",
                    "started": "2021-08-23T16:25:45.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640757",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/640764",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942#discussion_r694136128\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -744,20 +771,10 @@ TYPED_TEST(TestMeanKernelNumeric, ScalarAggregateOptions) {\n \n   ValidateMean<TypeParam>(\"[]\", nan_result,\n                           ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n-  ValidateMean<TypeParam>(\"[null]\", nan_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n-  ValidateMean<TypeParam>(\"[]\", null_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n   ValidateMean<TypeParam>(\"[null]\", null_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n-  ValidateMean<TypeParam>(json, expected_result,\n                           ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n-  ValidateMean<TypeParam>(json, expected_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/3));\n-  ValidateMean<TypeParam>(json, expected_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/4));\n   ValidateMean<TypeParam>(json, null_result,\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/15));\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n\nReview comment:\n       Added, sorry.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -174,19 +172,23 @@ TEST(TestBooleanAggregation, Sum) {\n                           ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/2));\n   ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(),\n                           ScalarAggregateOptions(/*skip_nulls=*/true, /*min_count=*/3));\n-  ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(1),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/1));\n-  ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(1),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/2));\n+  ValidateBooleanAgg<Sum>(\"[]\", std::make_shared<UInt64Scalar>(0),\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n   ValidateBooleanAgg<Sum>(json, std::make_shared<UInt64Scalar>(),\n-                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/3));\n+                          ScalarAggregateOptions(/*skip_nulls=*/false, /*min_count=*/0));\n\nReview comment:\n       The cases as written were pointless, so I removed them. I've added some new cases instead.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-23T16:41:47.016+0000",
                    "updated": "2021-08-23T16:41:47.016+0000",
                    "started": "2021-08-23T16:41:47.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640764",
                    "issueId": "13395191"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/worklog/640783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #10942:\nURL: https://github.com/apache/arrow/pull/10942\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-23T17:27:37.908+0000",
                    "updated": "2021-08-23T17:27:37.908+0000",
                    "started": "2021-08-23T17:27:37.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640783",
                    "issueId": "13395191"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2889d91d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49afb38d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67933779[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5314c3dd[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20bb18de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3974ce5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7dc18b11[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@83eb55f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@703b216e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@49f2bbe8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@389a28c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@45f3e6c5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 07 01:39:15 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-23T17:27:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13627/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2021-08-13T19:02:10.000+0000",
        "updated": "2021-09-07T01:39:15.000+0000",
        "timeoriginalestimate": null,
        "description": "R's aggregation functions have a {{na.rm}} argument that governs how missing data is handled. Assume {{x <- c(1, 2, NA, 3)}}. {{sum(x, na.rm = TRUE) == 6}} and {{sum(x, na.rm = FALSE)}} is {{NA}} because there is at least one missing value. \r\n\r\nThe ScalarAggregateOptions have two options: skip_nulls and min_count. From what I can tell reading the source, in the context of sum(), skip_nulls affects whether each element of the Array is added to \"count\", and if count < min_count, you get a null value returned. So to get the expected behavior when calling \"sum\" on an Array, when na.rm = TRUE, we pass skip_nulls = false, min_count = 0. When na.rm = FALSE, we pass skip_nulls = true, min_count = length(x), the reasoning being that you return a null value unless all values are non-null (and count == length). See https://github.com/apache/arrow/blob/master/r/R/compute.R#L125-L130\r\n\r\nThis doesn't really work in the query engine, though. We don't know how many rows are in the data to set an appropriate min_count to get the expected behavior--the dataset being queried may have filtering. And when doing hash aggregation, each group may have a different number of rows. \r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] ScalarAggregateOptions don't make sense (in hash aggregation)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/comment/17398871",
                    "id": "17398871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=keith.j.kraus",
                        "name": "keith.j.kraus",
                        "key": "keith.j.kraus",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Keith Kraus",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I would have expected the `na.rm` R argument to map directly to the `skip_nulls` Arrow C++ argument. Given that Arrow arithmetic functions return null if any input is null, I would expect `skip_nulls=False` to return `null` if any value in the input array is `null` which would map to R's expected behavior without needing to get the size of the array.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=keith.j.kraus",
                        "name": "keith.j.kraus",
                        "key": "keith.j.kraus",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Keith Kraus",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-08-13T19:13:13.509+0000",
                    "updated": "2021-08-13T19:13:13.509+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/comment/17398873",
                    "id": "17398873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Right now (hash) sum/mean/etc. ignore skip_nulls altogether. So we should just implement actual support for that, such that na.rm = TRUE maps to skip_nulls = true, na.rm = FALSE maps to skip_nulls = false, and min_count should always be 0 (such that sum([]) == 0 instead of NA).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-08-13T19:18:01.640+0000",
                    "updated": "2021-08-13T19:18:01.640+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/comment/17403314",
                    "id": "17403314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10942\n[https://github.com/apache/arrow/pull/10942]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-23T17:27:39.080+0000",
                    "updated": "2021-08-23T17:27:39.080+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/comment/17410867",
                    "id": "17410867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Walli",
                        "name": "Walli",
                        "key": "walli",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Gamel Alomaisi",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Hey hey what\u2019s up ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Walli",
                        "name": "Walli",
                        "key": "walli",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Gamel Alomaisi",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2021-09-07T01:38:57.495+0000",
                    "updated": "2021-09-07T01:38:57.495+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13395191/comment/17410868",
                    "id": "17410868",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Walli",
                        "name": "Walli",
                        "key": "walli",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Gamel Alomaisi",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Hey what\u2019s up with your ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=Walli",
                        "name": "Walli",
                        "key": "walli",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Gamel Alomaisi",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2021-09-07T01:39:15.937+0000",
                    "updated": "2021-09-07T01:39:15.937+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0twbs:",
        "customfield_12314139": null
    }
}