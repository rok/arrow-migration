{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13416613",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613",
    "key": "ARROW-15062",
    "fields": {
        "parent": {
            "id": "13416610",
            "key": "ARROW-15059",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13416610",
            "fields": {
                "summary": "[C++] Add basic visibility into execution engine performance",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alvinj15",
            "name": "alvinj15",
            "key": "JIRAUSER280323",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Alvin Chunga Mamani",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15062/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 41,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/746993",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 opened a new pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702\n\n\n   Add memory information to the current spans, bytes in memory_pool and RSS\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T07:57:19.836+0000",
                    "updated": "2022-03-24T07:57:19.836+0000",
                    "started": "2022-03-24T07:57:19.836+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746993",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/746994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#issuecomment-1077338527\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T07:57:47.498+0000",
                    "updated": "2022-03-24T07:57:47.498+0000",
                    "started": "2022-03-24T07:57:47.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "746994",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/747032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r834065668\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n\nReview comment:\n       We try to write C++ code not C code, so this function should take a `util::string_view` IMHO.\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -48,6 +48,12 @@ namespace tracing {\n ARROW_EXPORT\n opentelemetry::trace::Tracer* GetTracer();\n \n+ARROW_EXPORT\n+size_t GetMemoryUsed();\n+\n+ARROW_EXPORT\n+size_t GetMemoryUsedByProcess();\n\nReview comment:\n       These functions should go into `arrow/util/io_util.{h,cc}` instead.\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -48,6 +48,12 @@ namespace tracing {\n ARROW_EXPORT\n opentelemetry::trace::Tracer* GetTracer();\n \n+ARROW_EXPORT\n+size_t GetMemoryUsed();\n+\n+ARROW_EXPORT\n+size_t GetMemoryUsedByProcess();\n\nReview comment:\n       Please return `int64_t` instead.\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n+  size_t result = -1;\n+  char line[128];\n+\n+  while (fgets(line, 128, file) != NULL){\n+    if (strncmp(line, \"VmRSS:\", 6) == 0){\n+      result = parseLine(line);\n+      break;\n+    }\n+  }\n+  fclose(file);\n+  return result*1000;\n+}\n+\n+size_t GetMemoryUsed() {\n+  size_t total_memory_size;\n+  size_t used_memory_size;\n+  struct sysinfo si;\n+  sysinfo(&si);\n\nReview comment:\n       This is unfortunately Linux-specific, we'll need a portable implementation (is there a third-party library that we can use to make our life easier?).\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n+  size_t result = -1;\n+  char line[128];\n+\n+  while (fgets(line, 128, file) != NULL){\n+    if (strncmp(line, \"VmRSS:\", 6) == 0){\n+      result = parseLine(line);\n+      break;\n+    }\n+  }\n+  fclose(file);\n+  return result*1000;\n\nReview comment:\n       Are you sure it's not 1024, rather?\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n\nReview comment:\n       1) You'll need to check for errors here; 2) would it be easier to use `std::fstream`?\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n     for (size_t i = 0; i < kernels_.size(); ++i) {\n       util::tracing::Span span;\n-      START_SPAN(span, aggs_[i].function,\n-                 {{\"function.name\", aggs_[i].function},\n-                  {\"function.options\",\n-                   aggs_[i].options ? aggs_[i].options->ToString() : \"<NULLPTR>\"},\n-                  {\"function.kind\", std::string(kind_name()) + \"::Consume\"}});\n+      START_SPAN(\n+          span, aggs_[i].function,\n+          {{\"function.name\", aggs_[i].function},\n+           {\"function.options\",\n+            aggs_[i].options ? aggs_[i].options->ToString() : \"<NULLPTR>\"},\n+           {\"function.kind\", std::string(kind_name()) + \"::Consume\"},\n+           {\"memory_pool_bytes\", plan_->exec_context()->memory_pool()->bytes_allocated()},\n+           {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+           {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       We should certainly avoid repeating this everywhere, and instead find a way to factor out those common span attributes (perhaps using a dedicated macro?).\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       These calls are potentially costly since they will be issueing system calls (and perhaps even read a file). I'm not sure this is desirable. @lidavidm What do you think?\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n\nReview comment:\n       Which one? The one returned by the function?\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n\nReview comment:\n       Also, this is probably Linux-specific...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T09:02:46.091+0000",
                    "updated": "2022-03-24T09:02:46.091+0000",
                    "started": "2022-03-24T09:02:46.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747032",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/747173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r834246278\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       Yes, this seems it will be quite expensive. Do we need information that's this fine-grained?\r\n   \r\n   We could cache the values, and only update them if they're out of date. Or we could actually record the memory pool's statistics instead. Also, this information isn't really thread- or span- specific. Maybe it could be done by a background thread on a fixed schedule, especially if it's process memory and not memory pool allocations? \n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n     for (size_t i = 0; i < kernels_.size(); ++i) {\n       util::tracing::Span span;\n-      START_SPAN(span, aggs_[i].function,\n-                 {{\"function.name\", aggs_[i].function},\n-                  {\"function.options\",\n-                   aggs_[i].options ? aggs_[i].options->ToString() : \"<NULLPTR>\"},\n-                  {\"function.kind\", std::string(kind_name()) + \"::Consume\"}});\n+      START_SPAN(\n+          span, aggs_[i].function,\n+          {{\"function.name\", aggs_[i].function},\n+           {\"function.options\",\n+            aggs_[i].options ? aggs_[i].options->ToString() : \"<NULLPTR>\"},\n+           {\"function.kind\", std::string(kind_name()) + \"::Consume\"},\n+           {\"memory_pool_bytes\", plan_->exec_context()->memory_pool()->bytes_allocated()},\n+           {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+           {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       This could be done by a span processor, though that has a couple caveats:\r\n   - Processors are configured as part of the tracing setup, by the end user application (generally not by a library),\r\n   - IIRC, processors may not run immediately (one of the processors batches spans and processes them on a background thread, I think)\r\n   \r\n   I think some span recorders can also be configured to attach this sort of information as well? (Though again, the timestamps won't line up anymore.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T12:21:26.511+0000",
                    "updated": "2022-03-24T12:21:26.511+0000",
                    "started": "2022-03-24T12:21:26.511+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747173",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/747454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r834730496\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n+  size_t result = -1;\n+  char line[128];\n+\n+  while (fgets(line, 128, file) != NULL){\n+    if (strncmp(line, \"VmRSS:\", 6) == 0){\n+      result = parseLine(line);\n+      break;\n+    }\n+  }\n+  fclose(file);\n+  return result*1000;\n+}\n+\n+size_t GetMemoryUsed() {\n+  size_t total_memory_size;\n+  size_t used_memory_size;\n+  struct sysinfo si;\n+  sysinfo(&si);\n\nReview comment:\n       There was a portable implementation as part of a PR here: https://github.com/apache/arrow/pull/11426/files#diff-5d7d9a549780da2ec4baba08a43db3e1d524b70d6e8ae4f29cc8bfe831357f9cR178-R199 \r\n   \r\n   We didn't end up pursuing the PR but you might be able to borrow some from that particular function.\r\n   \r\n   That being said, I wonder if it would be more valuable to report `default_memory_pool()->bytes_allocated()`.  `sysinfo` is going to give us statistics on the entire server and `freeram` is sometimes misleading (e.g. if there are a lot of dirty pages then `freeram` could be high while at the same time we might be thrashing swap).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T21:06:17.508+0000",
                    "updated": "2022-03-24T21:06:17.508+0000",
                    "started": "2022-03-24T21:06:17.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747454",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/747458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r834734593\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       Background thread on a fixed schedule was the original ask but I think there was some concern around having two streams of telemetry information.  As a start I think only using `memory_pool_bytes` would be sufficient.  Longer term it could be handy to have some idea of the RSS of the process just to have some sense for how we are doing on fragmentation and non-pool allocations.  Since a system call is expensive I wonder if there would be a way to debounce this information and only report it at most every 10ms or on some configurable threshold.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T21:11:25.047+0000",
                    "updated": "2022-03-24T21:11:25.047+0000",
                    "started": "2022-03-24T21:11:25.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747458",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/747463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r834739482\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n     for (size_t i = 0; i < kernels_.size(); ++i) {\n       util::tracing::Span span;\n-      START_SPAN(span, aggs_[i].function,\n-                 {{\"function.name\", aggs_[i].function},\n-                  {\"function.options\",\n-                   aggs_[i].options ? aggs_[i].options->ToString() : \"<NULLPTR>\"},\n-                  {\"function.kind\", std::string(kind_name()) + \"::Consume\"}});\n+      START_SPAN(\n+          span, aggs_[i].function,\n+          {{\"function.name\", aggs_[i].function},\n+           {\"function.options\",\n+            aggs_[i].options ? aggs_[i].options->ToString() : \"<NULLPTR>\"},\n+           {\"function.kind\", std::string(kind_name()) + \"::Consume\"},\n+           {\"memory_pool_bytes\", plan_->exec_context()->memory_pool()->bytes_allocated()},\n+           {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+           {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       Given that these memory statistics are process-wide anyways maybe it makes sense to only enable collection of memory statistics in our own profiling tools.  For example, when running the query tester we can add a span processor that collects memory statistics.\r\n   \r\n   Then the actual library code would only instrument things specific to the library.\r\n   \r\n   That only leaves the batching concern but, glancing at the description, and knowing nothing of the OT spec, I think the span processor itself might batch its output but its input (the span start/stop calls) won't be batched.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-24T21:19:30.381+0000",
                    "updated": "2022-03-24T21:19:30.381+0000",
                    "started": "2022-03-24T21:19:30.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "747463",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/749103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r837028159\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n\nReview comment:\n       The value obtained from the system. This function was re-implemented and documented in the io_utils.h\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -48,6 +48,12 @@ namespace tracing {\n ARROW_EXPORT\n opentelemetry::trace::Tracer* GetTracer();\n \n+ARROW_EXPORT\n+size_t GetMemoryUsed();\n+\n+ARROW_EXPORT\n+size_t GetMemoryUsedByProcess();\n\nReview comment:\n       moved\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T03:45:08.079+0000",
                    "updated": "2022-03-29T03:45:08.079+0000",
                    "started": "2022-03-29T03:45:08.079+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749103",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/749649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r837931262\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       @westonpace I can create the background thread for report the `system RAM`, but where can I place it? inside the memory pool constructor?  and using the same exporter or creating a new one just for this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T21:36:59.853+0000",
                    "updated": "2022-03-29T21:36:59.853+0000",
                    "started": "2022-03-29T21:36:59.853+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749649",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/749654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r837933770\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n+  size_t result = -1;\n+  char line[128];\n+\n+  while (fgets(line, 128, file) != NULL){\n+    if (strncmp(line, \"VmRSS:\", 6) == 0){\n+      result = parseLine(line);\n+      break;\n+    }\n+  }\n+  fclose(file);\n+  return result*1000;\n+}\n+\n+size_t GetMemoryUsed() {\n+  size_t total_memory_size;\n+  size_t used_memory_size;\n+  struct sysinfo si;\n+  sysinfo(&si);\n\nReview comment:\n       @westonpace I get the bytes from the memory pool in the first span, but in the next ones I extracted the statistics from the sysinfo for report the RSS, I looked the PR which you mentioned, and there the method return just the FreeRam and for calculate the Current Ram in used I still need to use sysinfo.total_memory, but after that PR get merged I can add another function for get that, and don't use system includes here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T21:41:10.901+0000",
                    "updated": "2022-03-29T21:41:10.901+0000",
                    "started": "2022-03-29T21:41:10.901+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749654",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/749715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r837984168\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/aggregate_node.cc\n##########\n@@ -168,17 +168,26 @@ class ScalarAggregateNode : public ExecNode {\n \n   Status DoConsume(const ExecBatch& batch, size_t thread_index) {\n     util::tracing::Span span;\n-    START_SPAN(span, \"Consume\",\n-               {{\"aggregate\", ToStringExtra()},\n-                {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+    START_SPAN(\n+        span, \"Consume\",\n+        {{\"aggregate\", ToStringExtra()},\n+         {\"node.label\", label()},\n+         {\"batch.length\", batch.length},\n+         {\"memory_pool_bytes\",\n+          plan_->exec_context()->memory_pool()->bytes_allocated()},\n+         {\"memory_used\", arrow::internal::tracing::GetMemoryUsed()},\n+         {\"memory_used_process\", arrow::internal::tracing::GetMemoryUsedByProcess()}});\n\nReview comment:\n       To be clear, I am not asking for a background thread in that comment.  It is ok either way.  I have no preference either way.  I only mentioned the background thread in the comment to explain the context.\r\n   \r\n   In both cases (background thread or span processor) I now think we want to move the initialization into the query testing tool (which unfortunately, is not yet merged).  This means the feature will not be enabled for library users but I think that is ok.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T23:19:34.164+0000",
                    "updated": "2022-03-29T23:19:34.164+0000",
                    "started": "2022-03-29T23:19:34.163+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749715",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/749718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r837987266\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.cc\n##########\n@@ -184,6 +188,41 @@ opentelemetry::trace::Tracer* GetTracer() {\n   return tracer.get();\n }\n \n+int parseLine(char* line){\n+  // This assumes that a digit will be found and the line ends in \" Kb\".\n+  int i = strlen(line);\n+  const char* p = line;\n+  while (*p <'0' || *p > '9') p++;\n+  line[i-3] = '\\0';\n+  i = atoi(p);\n+  return i;\n+}\n+\n+size_t GetMemoryUsedByProcess() { //Note: this value is in KB!\n+  FILE* file = fopen(\"/proc/self/status\", \"r\");\n+  size_t result = -1;\n+  char line[128];\n+\n+  while (fgets(line, 128, file) != NULL){\n+    if (strncmp(line, \"VmRSS:\", 6) == 0){\n+      result = parseLine(line);\n+      break;\n+    }\n+  }\n+  fclose(file);\n+  return result*1000;\n+}\n+\n+size_t GetMemoryUsed() {\n+  size_t total_memory_size;\n+  size_t used_memory_size;\n+  struct sysinfo si;\n+  sysinfo(&si);\n\nReview comment:\n       Ah, yes, I see now that you are grabbing all three numbers.  `GetMemoryUsed` is less interesting than `GetMemoryUsedByProcess` in my opinion but I don't think it would hurt to report it.\r\n   \r\n   > but after that PR get merged I can add another function for get that, and don't use system includes here.\r\n   \r\n   That PR that I linked to will not be merged.  We ended up pursuing a different approach.  So we don't want to wait on it.  However, you're welcome to copy the approach that was being taken for this method.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-29T23:26:57.096+0000",
                    "updated": "2022-03-29T23:26:57.096+0000",
                    "started": "2022-03-29T23:26:57.096+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "749718",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/756107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r848961300\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __unix__ || __unix || unix || (__APPLE__ && __MACH__)\n+#include <sys/resource.h>\n+\n+#if __APPLE__ && __MACH__\n+#include <mach/mach.h>\n+\n+#elif (_AIX || __TOS__AIX__) || (__sun__ || __sun || sun && (_SVR4 || __svr4__))\n+#include <procfs.h>\n\nReview Comment:\n   Does this branch actually get used in the implementation?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __unix__ || __unix || unix || (__APPLE__ && __MACH__)\n+#include <sys/resource.h>\n+\n+#if __APPLE__ && __MACH__\n\nReview Comment:\n   We use `#if __APPLE__` quite a bit in the code base.  However, we never use `__MACH__`.  Do you know what this is adding that `__APPLE__` doesn't already specify?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __unix__ || __unix || unix || (__APPLE__ && __MACH__)\n+#include <sys/resource.h>\n\nReview Comment:\n   I'm not sure this include is used anywhere.\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1889,42 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+// See: https://stackoverflow.com/a/14927379\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return (int64_t)info.WorkingSetSize;\n\nReview Comment:\n   ```suggestion\r\n     return static_cast<int64_t>(info.WorkingSetSize);\r\n   ```\r\n   For consistency with the rest of the codebase here (and elsewhere in this file) we should prefer C++ style casts:\r\n   \n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __unix__ || __unix || unix || (__APPLE__ && __MACH__)\n+#include <sys/resource.h>\n+\n+#if __APPLE__ && __MACH__\n+#include <mach/mach.h>\n+\n+#elif (_AIX || __TOS__AIX__) || (__sun__ || __sun || sun && (_SVR4 || __svr4__))\n+#include <procfs.h>\n+\n+#elif __linux__ || __linux || linux || __gnu_linux__\n+#include <stdio.h>\n+\n+#endif\n+\n+#else\n+#error \"Cannot define getPeakRSS( ) or getCurrentRSS( ) for an unknown OS.\"\n\nReview Comment:\n   Can we just use a dummy implementation in this case that returns 0 rather than prevent compilation?  Actually, it looks like that might be what you do already so can you just remove this error?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1889,42 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+// See: https://stackoverflow.com/a/14927379\n\nReview Comment:\n   In general we try to avoid directly copy/pasting chunks of code from SO for licensing reasons but I don't know that we ever got an authoritative answer for this.  Either way, I think things are paraphrased enough by this point it isn't a concern.\n\n\n\n##########\nr/src/arrowExports.cpp:\n##########\n@@ -7879,12 +7879,12 @@ return Rf_ScalarLogical(\n );\n }\n static const R_CallMethodDef CallEntries[] = {\n-{ \"_arrow_available\", (DL_FUNC)& _arrow_available, 0 },\n-{ \"_dataset_available\", (DL_FUNC)& _dataset_available, 0 },\n-{ \"_engine_available\", (DL_FUNC)& _engine_available, 0 },\n-{ \"_parquet_available\", (DL_FUNC)& _parquet_available, 0 },\n-{ \"_s3_available\", (DL_FUNC)& _s3_available, 0 },\n-{ \"_json_available\", (DL_FUNC)& _json_available, 0 },\n+\t\t{ \"_arrow_available\", (DL_FUNC)& _arrow_available, 0 },\n\nReview Comment:\n   I'm not sure these changes are related.  Maybe a rebase will get them to go away?\n\n\n\n##########\ncpp/src/arrow/util/io_util.h:\n##########\n@@ -346,5 +346,11 @@ int64_t GetRandomSeed();\n ARROW_EXPORT\n uint64_t GetThreadId();\n \n+/// \\brief Get the current memory used by current process in bytes\n+///\n+/// This function support Windows and Linux\n\nReview Comment:\n   ```suggestion\r\n   /// \\brief Get the current memory used by the current process in bytes\r\n   ///\r\n   /// This function supports Windows, Linux, and Mac and will return 0 otherwise\r\n   ```\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n\nReview Comment:\n   Nit: Can we merge these two ifdef sections?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1889,42 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+// See: https://stackoverflow.com/a/14927379\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return (int64_t)info.WorkingSetSize;\n+\n+#elif defined(__APPLE__) && defined(__MACH__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS)\n+    return (int64_t)0L;\n+  return (int64_t)info.resident_size;\n+\n+#elif defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)\n+  // Linux ----------------------------------------------------\n+  int64_t rss = 0L;\n+  FILE* fp = NULL;\n+  if ((fp = fopen(\"/proc/self/statm\", \"r\")) == NULL) return (int64_t)0L;\n+  if (fscanf(fp, \"%*s%ld\", &rss) != 1) {\n+    fclose(fp);\n\nReview Comment:\n   `fclose` returns a return code.  If we want to ignore it (might be ok here, not sure in what situations that close would fail and what we would even do about it) then it might be best to wrap in ARROW_UNUSED so it is explicit or add a comment.\n\n\n\n",
                    "created": "2022-04-13T00:35:56.050+0000",
                    "updated": "2022-04-13T00:35:56.050+0000",
                    "started": "2022-04-13T00:35:56.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756107",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/756125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r848994594\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __unix__ || __unix || unix || (__APPLE__ && __MACH__)\n+#include <sys/resource.h>\n+\n+#if __APPLE__ && __MACH__\n+#include <mach/mach.h>\n+\n+#elif (_AIX || __TOS__AIX__) || (__sun__ || __sun || sun && (_SVR4 || __svr4__))\n+#include <procfs.h>\n\nReview Comment:\n   it was unused and was removed.\n\n\n\n",
                    "created": "2022-04-13T01:34:57.374+0000",
                    "updated": "2022-04-13T01:34:57.374+0000",
                    "started": "2022-04-13T01:34:57.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756125",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/756126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r848998577\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,10 +97,32 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __unix__ || __unix || unix || (__APPLE__ && __MACH__)\n+#include <sys/resource.h>\n+\n+#if __APPLE__ && __MACH__\n\nReview Comment:\n   https://sourceforge.net/p/predef/wiki/OperatingSystems/ here it uses both conditions, but it seems to be ok if I just let \r\n    `__APPLE__`\n\n\n\n",
                    "created": "2022-04-13T01:46:08.506+0000",
                    "updated": "2022-04-13T01:46:08.506+0000",
                    "started": "2022-04-13T01:46:08.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756126",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/756396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r849479300\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -97,8 +97,16 @@\n #include \"arrow/util/logging.h\"\n \n // For filename conversion\n-#if defined(_WIN32)\n+#ifdef _WIN32\n\nReview Comment:\n   This does not really fall into the \"filename conversion\" category, can you move these additions up?\n\n\n\n##########\ncpp/src/arrow/util/tracing_internal.cc:\n##########\n@@ -18,6 +18,10 @@\n #include \"arrow/util/tracing_internal.h\"\n #include \"arrow/util/tracing.h\"\n \n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys/sysinfo.h>\n\nReview Comment:\n   Two things: 1) can we use the C++ includes where available (e.g. `<cstdio>` instead of `<stdio.h`>)? 2) can we keep the system includes alphabetically ordered?\n\n\n\n##########\ncpp/src/arrow/compute/exec/aggregate_node.cc:\n##########\n@@ -171,14 +171,16 @@ class ScalarAggregateNode : public ExecNode {\n     START_SPAN(span, \"Consume\",\n                {{\"aggregate\", ToStringExtra()},\n                 {\"node.label\", label()},\n-                {\"batch.length\", batch.length}});\n+                {\"batch.length\", batch.length},\n+                GET_MEMORY_POOL_INFO});\n\nReview Comment:\n   Instead of adding this by hand everywhere, can we define for example a `START_COMPUTE_SPAN` macro that does it automatically?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1875,41 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return static_cast<int64_t>(info.WorkingSetSize);\n+\n+#elif defined(__APPLE__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS)\n+    return (int64_t)0L;\n+  return (int64_t)info.resident_size;\n+\n+#elif defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)\n+  // Linux ----------------------------------------------------\n+  int64_t rss = 0L;\n+  FILE* fp = NULL;\n+  if ((fp = fopen(\"/proc/self/statm\", \"r\")) == NULL) return static_cast<int64_t>(0L);\n\nReview Comment:\n   Same here: log the error?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1875,41 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return static_cast<int64_t>(info.WorkingSetSize);\n+\n+#elif defined(__APPLE__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS)\n+    return (int64_t)0L;\n+  return (int64_t)info.resident_size;\n+\n+#elif defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)\n+  // Linux ----------------------------------------------------\n+  int64_t rss = 0L;\n\nReview Comment:\n   Should be `long` for `%ld`. But perhaps it would be better to use `std::fstream`, so that you can avoid the `fscanf` call?\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1875,41 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return static_cast<int64_t>(info.WorkingSetSize);\n+\n+#elif defined(__APPLE__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS)\n+    return (int64_t)0L;\n\nReview Comment:\n   Can we log the error using e.g. `ARROW_LOG(WARNING)`?\n\n\n\n",
                    "created": "2022-04-13T13:37:49.632+0000",
                    "updated": "2022-04-13T13:37:49.632+0000",
                    "started": "2022-04-13T13:37:49.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756396",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/756815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r850044429\n\n\n##########\ncpp/src/arrow/util/tracing_internal.cc:\n##########\n@@ -18,6 +18,10 @@\n #include \"arrow/util/tracing_internal.h\"\n #include \"arrow/util/tracing.h\"\n \n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys/sysinfo.h>\n\nReview Comment:\n   Why were these includes added to this particular file anyways?  Is this a case where we weren't following IWYU and you are making it more clear?\n\n\n\n",
                    "created": "2022-04-14T03:01:22.402+0000",
                    "updated": "2022-04-14T03:01:22.402+0000",
                    "started": "2022-04-14T03:01:22.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756815",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/758970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlvinJ15 commented on PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#issuecomment-1103490185\n\n   @mbrobbel \n\n\n",
                    "created": "2022-04-20T05:36:34.190+0000",
                    "updated": "2022-04-20T05:36:34.190+0000",
                    "started": "2022-04-20T05:36:34.189+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "758970",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/759052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r853881766\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1879,45 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return static_cast<int64_t>(info.WorkingSetSize);\n+\n+#elif defined(__APPLE__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS) {\n+    ARROW_LOG(WARNING) << \"Can't resolve RSS value\";\n+    return static_cast<int64_t>(0L);\n+  }\n+  return static_cast<int64_t>(info.resident_size);\n+\n+#elif defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)\n+  // Linux ----------------------------------------------------\n+  int64_t rss = 0L;\n+\n+  std::ifstream fp(\"/proc/self/statm\");\n+  if (fp.is_open()) {\n+    fp >> rss;\n+  } else {\n+    ARROW_LOG(WARNING) << \"Can't resolve RSS value from /proc/self/statm\";\n+    return static_cast<int64_t>(0L);\n+  }\n+  if (fp.is_open()) fp.close();\n+  return static_cast<int64_t>(rss) * static_cast<int64_t>(sysconf(_SC_PAGESIZE));\n\nReview Comment:\n   Simplify this code a bit, also the `ifstream` destructor should close the file for you:\r\n   ```suggestion\r\n     if (fp) {\r\n       fp >> rss;\r\n       return rss * sysconf(_SC_PAGESIZE);\r\n     } else {\r\n       ARROW_LOG(WARNING) << \"Can't resolve RSS value from /proc/self/statm\";\r\n       return 0;\r\n     }\r\n   ```\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1879,45 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return static_cast<int64_t>(info.WorkingSetSize);\n+\n+#elif defined(__APPLE__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS) {\n+    ARROW_LOG(WARNING) << \"Can't resolve RSS value\";\n+    return static_cast<int64_t>(0L);\n\nReview Comment:\n   Nit: no need for an explicit cast\r\n   ```suggestion\r\n       return 0;\r\n   ```\n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -101,6 +101,18 @@\n #include \"arrow/util/utf8.h\"\n #endif\n \n+#ifdef _WIN32\n+#include <psapi.h>\n+#include <windows.h>\n+\n+#elif __APPLE__\n+#include <mach/mach.h>\n+\n+#elif __linux__ || __linux || linux || __gnu_linux__\n\nReview Comment:\n   AFAIK, `__linux__` is sufficient.\n\n\n\n##########\ncpp/src/arrow/util/tracing_internal.h:\n##########\n@@ -114,23 +117,38 @@ class SpanImpl {\n opentelemetry::trace::StartSpanOptions SpanOptionsWithParent(\n     const util::tracing::Span& parent_span);\n \n-#define START_SPAN(target_span, ...)                                                \\\n-  auto opentelemetry_scope##__LINE__ =                                              \\\n-      ::arrow::internal::tracing::GetTracer()->WithActiveSpan(                      \\\n-          target_span                                                               \\\n-              .Set(::arrow::util::tracing::Span::Impl{                              \\\n-                  ::arrow::internal::tracing::GetTracer()->StartSpan(__VA_ARGS__)}) \\\n-              .span)\n+#define FIRST_ARG(first, ...) first\n+\n+#define START_COMPUTE_SPAN(target_span, ...) \\\n+  START_SPAN(target_span, __VA_ARGS__);      \\\n+  START_SPAN(target_span, FIRST_ARG(__VA_ARGS__), {GET_MEMORY_POOL_INFO});\n\nReview Comment:\n   I don't really understand why this starting two spans (or starting the same span twice)? @lidavidm Does this look right?\n\n\n\n##########\ncpp/src/arrow/util/tracing_internal.h:\n##########\n@@ -114,23 +117,38 @@ class SpanImpl {\n opentelemetry::trace::StartSpanOptions SpanOptionsWithParent(\n     const util::tracing::Span& parent_span);\n \n-#define START_SPAN(target_span, ...)                                                \\\n-  auto opentelemetry_scope##__LINE__ =                                              \\\n-      ::arrow::internal::tracing::GetTracer()->WithActiveSpan(                      \\\n-          target_span                                                               \\\n-              .Set(::arrow::util::tracing::Span::Impl{                              \\\n-                  ::arrow::internal::tracing::GetTracer()->StartSpan(__VA_ARGS__)}) \\\n-              .span)\n+#define FIRST_ARG(first, ...) first\n+\n+#define START_COMPUTE_SPAN(target_span, ...) \\\n+  START_SPAN(target_span, __VA_ARGS__);      \\\n+  START_SPAN(target_span, FIRST_ARG(__VA_ARGS__), {GET_MEMORY_POOL_INFO});\n+\n+#define START_COMPUTE_SPAN_WITH_PARENT(target_span, parent_span, ...)      \\\n+  START_SPAN_WITH_PARENT(target_span, parent_span, __VA_ARGS__);           \\\n+  START_SPAN_WITH_PARENT(target_span, parent_span, FIRST_ARG(__VA_ARGS__), \\\n+                         {GET_MEMORY_POOL_INFO});\n+\n+#define START_SPAN(target_span, ...)                                                  \\\n+  {                                                                                   \\\n+    auto opentelemetry_scope##__LINE__ =                                              \\\n+        ::arrow::internal::tracing::GetTracer()->WithActiveSpan(                      \\\n+            target_span                                                               \\\n+                .Set(::arrow::util::tracing::Span::Impl{                              \\\n+                    ::arrow::internal::tracing::GetTracer()->StartSpan(__VA_ARGS__)}) \\\n+                .span);                                                               \\\n+  }\n\nReview Comment:\n   I'm not sure how those work in OpenTelemetry, but this seems to close the scope at the end of the macro, is this right? @lidavidm \n\n\n\n##########\ncpp/src/arrow/util/io_util.cc:\n##########\n@@ -1867,5 +1879,45 @@ uint64_t GetOptionalThreadId() {\n   return (tid == 0) ? tid - 1 : tid;\n }\n \n+// Returns the current resident set size (physical memory use) measured\n+// in bytes, or zero if the value cannot be determined on this OS.\n+int64_t GetCurrentRSS() {\n+#if defined(_WIN32)\n+  // Windows --------------------------------------------------\n+  PROCESS_MEMORY_COUNTERS info;\n+  GetProcessMemoryInfo(GetCurrentProcess(), &info, sizeof(info));\n+  return static_cast<int64_t>(info.WorkingSetSize);\n+\n+#elif defined(__APPLE__)\n+  // OSX ------------------------------------------------------\n+  struct mach_task_basic_info info;\n+  mach_msg_type_number_t infoCount = MACH_TASK_BASIC_INFO_COUNT;\n+  if (task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &infoCount) !=\n+      KERN_SUCCESS) {\n+    ARROW_LOG(WARNING) << \"Can't resolve RSS value\";\n+    return static_cast<int64_t>(0L);\n+  }\n+  return static_cast<int64_t>(info.resident_size);\n+\n+#elif defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)\n+  // Linux ----------------------------------------------------\n+  int64_t rss = 0L;\n+\n+  std::ifstream fp(\"/proc/self/statm\");\n+  if (fp.is_open()) {\n+    fp >> rss;\n+  } else {\n+    ARROW_LOG(WARNING) << \"Can't resolve RSS value from /proc/self/statm\";\n+    return static_cast<int64_t>(0L);\n+  }\n+  if (fp.is_open()) fp.close();\n+  return static_cast<int64_t>(rss) * static_cast<int64_t>(sysconf(_SC_PAGESIZE));\n+\n+#else\n+  // AIX, BSD, Solaris, and Unknown OS ------------------------\n+  return static_cast<int64_t>(0L);  // Unsupported.\n\nReview Comment:\n   Nit: no need for an explicit cast.\r\n   ```suggestion\r\n     return 0;  // Unsupported.\r\n   ```\n\n\n\n",
                    "created": "2022-04-20T08:49:28.866+0000",
                    "updated": "2022-04-20T08:49:28.866+0000",
                    "started": "2022-04-20T08:49:28.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "759052",
                    "issueId": "13416613"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/worklog/759101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mbrobbel commented on code in PR #12702:\nURL: https://github.com/apache/arrow/pull/12702#discussion_r853975196\n\n\n##########\ncpp/src/arrow/util/tracing_internal.h:\n##########\n@@ -114,23 +117,38 @@ class SpanImpl {\n opentelemetry::trace::StartSpanOptions SpanOptionsWithParent(\n     const util::tracing::Span& parent_span);\n \n-#define START_SPAN(target_span, ...)                                                \\\n-  auto opentelemetry_scope##__LINE__ =                                              \\\n-      ::arrow::internal::tracing::GetTracer()->WithActiveSpan(                      \\\n-          target_span                                                               \\\n-              .Set(::arrow::util::tracing::Span::Impl{                              \\\n-                  ::arrow::internal::tracing::GetTracer()->StartSpan(__VA_ARGS__)}) \\\n-              .span)\n+#define FIRST_ARG(first, ...) first\n+\n+#define START_COMPUTE_SPAN(target_span, ...) \\\n+  START_SPAN(target_span, __VA_ARGS__);      \\\n+  START_SPAN(target_span, FIRST_ARG(__VA_ARGS__), {GET_MEMORY_POOL_INFO});\n+\n+#define START_COMPUTE_SPAN_WITH_PARENT(target_span, parent_span, ...)      \\\n+  START_SPAN_WITH_PARENT(target_span, parent_span, __VA_ARGS__);           \\\n+  START_SPAN_WITH_PARENT(target_span, parent_span, FIRST_ARG(__VA_ARGS__), \\\n+                         {GET_MEMORY_POOL_INFO});\n+\n+#define START_SPAN(target_span, ...)                                                  \\\n+  {                                                                                   \\\n+    auto opentelemetry_scope##__LINE__ =                                              \\\n+        ::arrow::internal::tracing::GetTracer()->WithActiveSpan(                      \\\n+            target_span                                                               \\\n+                .Set(::arrow::util::tracing::Span::Impl{                              \\\n+                    ::arrow::internal::tracing::GetTracer()->StartSpan(__VA_ARGS__)}) \\\n+                .span);                                                               \\\n+  }\n\nReview Comment:\n   Yes, we shouldn't create the OT scope in a C++ scope here, because the OT scope object controls how long a span is active.\n\n\n\n",
                    "created": "2022-04-20T10:23:43.012+0000",
                    "updated": "2022-04-20T10:23:43.012+0000",
                    "started": "2022-04-20T10:23:43.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "759101",
                    "issueId": "13416613"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 24600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@306e8fe2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21b3702f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39842d79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@30c006e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4506ee11[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@35c20ec3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2db512e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4ed9684f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cdd71e3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@19ccd4ad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c6bcf59[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1975478b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 28 10:00:02 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-28T10:00:02.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15062/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-12-10T17:05:39.000+0000",
        "updated": "2022-05-04T11:01:45.000+0000",
        "timeoriginalestimate": null,
        "description": "This would simply log, on some configurable interval, the bytes allocated in the memory pool used by the exec plan and also the RSS of the process if that is easily and cheaply obtained.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add regular logging of exec plan performance metrics",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416613/comment/17529348",
                    "id": "17529348",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12702\n[https://github.com/apache/arrow/pull/12702]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-04-28T10:00:02.838+0000",
                    "updated": "2022-04-28T10:00:02.838+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xka8:",
        "customfield_12314139": null
    }
}