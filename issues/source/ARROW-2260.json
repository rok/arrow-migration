{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13142516",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516",
    "key": "ARROW-2260",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12578328",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12578328",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13279676",
                    "key": "ARROW-7585",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13279676",
                    "fields": {
                        "summary": "Plasma-store-server does not support --help, shows backtrace on getopt error",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
            "name": "chrish42",
            "key": "chrish42",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Christian Hudon",
            "active": true,
            "timeZone": "America/Toronto"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2260/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/426721",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chrish42 opened a new pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025\n\n\n   The following patch ads Gflags support to `plasma-store-server`, leaves out the backtraces on invalid command-line options, and generally tries to make the error messages more useful in terms of nudging the user in the right direction.\r\n   \r\n   Now, calling `plasma-store-server` alone prints `plasma-store-server: please specify socket for incoming connections with -s, and the amount of memory (in bytes) to use with -m`. Likewise with `-h`, although that's a happy coincidence (`-h` was already assigned to turn on hugepage support, and the command-line parsing errors on the missing mandatory options before getting to that).\r\n   \r\n   Calling `plasma-store-server -help` produces:\r\n   ```\r\n   plasma-store-server: Shared-memory server for Arrow data.\r\n   Usage: \r\n   \r\n     Flags from ../src/plasma/store.cc:\r\n       -d (directory where to create the memory-backed file) type: string\r\n         default: \"/tmp\"\r\n       -e (endpoint for external storage service, where objects evicted from\r\n         Plasma store can be written to, optional) type: string default: \"\"\r\n       -h (whether to enable hugepage support) type: bool default: false\r\n       -m (amount of memory in bytes to use for Plasma store, required)\r\n         type: string default: \"\"\r\n       -s (socket name where the Plasma store will listen for requests, required)\r\n         type: string default: \"\"\r\n   \r\n   \r\n   \r\n     Flags from /tmp/gflags-20190105-85639-1w01usg/gflags-2.2.2/src/gflags.cc:\r\n       -flagfile (load flags from file) type: string default: \"\"\r\n       -fromenv (set flags from the environment [use 'export FLAGS_flag1=value'])\r\n         type: string default: \"\"\r\n       -tryfromenv (set flags from the environment if present) type: string\r\n         default: \"\"\r\n       -undefok (comma-separated list of flag names that it is okay to specify on\r\n         the command line even if the program does not define a flag with that\r\n         name.  IMPORTANT: flags in this list that have arguments MUST use the\r\n         flag=value format) type: string default: \"\"\r\n   \r\n     Flags from /tmp/gflags-20190105-85639-1w01usg/gflags-2.2.2/src/gflags_completions.cc:\r\n       -tab_completion_columns (Number of columns to use in output for tab\r\n         completion) type: int32 default: 80\r\n       -tab_completion_word (If non-empty, HandleCommandLineCompletions() will\r\n         hijack the process and attempt to do bash-style command line flag\r\n         completion on this value.) type: string default: \"\"\r\n   \r\n     Flags from /tmp/gflags-20190105-85639-1w01usg/gflags-2.2.2/src/gflags_reporting.cc:\r\n       -help (show help on all flags [tip: all flags can have two dashes])\r\n         type: bool default: false currently: true\r\n       -helpfull (show help on all flags -- same as -help) type: bool\r\n         default: false\r\n       -helpmatch (show help on modules whose name contains the specified substr)\r\n         type: string default: \"\"\r\n       -helpon (show help on the modules named by this flag value) type: string\r\n         default: \"\"\r\n       -helppackage (show help on all modules in the main package) type: bool\r\n         default: false\r\n       -helpshort (show help on only the main module for this program) type: bool\r\n         default: false\r\n       -helpxml (produce an xml version of help) type: bool default: false\r\n       -version (show version and build info and exit) type: bool default: false\r\n   ```\r\n   which is rather verbose, but at least does the job.\r\n   \r\n   Outstanding questions:\r\n   - Is there a way to ask Gflags to suppress all that other stuff? Or do we ditch Gflags and go back to `getopt()` but with a handcrafted help option and message? Or is this good enough?\r\n   - I'm assuming we want to be as backward compatible as possible? Otherwise I'd be tempted to move the non-optional command-line options to arguments, and maybe leave `-h` for help.\r\n   - In the name of being as backward-compatible as possible, I'm exiting with -1 if the external store directory is not empty, but with 1 for other usage errors? Was that worth the tiny bit of complexity to preserve that behavior?\r\n   - Which version define do I use to report `plasma-store-server`'s version?\r\n   - Any comments on the description of \"Shared-memory server for Arrow data.\", or is that good? \r\n    \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T20:19:12.251+0000",
                    "updated": "2020-04-23T20:19:12.251+0000",
                    "started": "2020-04-23T20:19:12.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426721",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/426729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-618651266\n\n\n   https://issues.apache.org/jira/browse/ARROW-2260\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T20:31:41.724+0000",
                    "updated": "2020-04-23T20:31:41.724+0000",
                    "started": "2020-04-23T20:31:41.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426729",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/427154",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-619317374\n\n\n   @chrish42 Thank you for the PR, I'll take a look now.  Note it looks like lint is failing due to formatting issues.  You need to run \"make format\" or \"ninja format\" to run clang-format (we are currently using version 8 I believe).\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T04:16:29.996+0000",
                    "updated": "2020-04-25T04:16:29.996+0000",
                    "started": "2020-04-25T04:16:29.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427154",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/427155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#discussion_r414974208\n\n\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n\nReview comment:\n       it seems like this could be done by adding a a define using ARROW_VERSION cmake variable.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T04:20:25.771+0000",
                    "updated": "2020-04-25T04:20:25.771+0000",
                    "started": "2020-04-25T04:20:25.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427155",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/427156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#discussion_r414975521\n\n\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n\nReview comment:\n       please comment literal parameters /\\*parameter_name=\\*/\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1304,8 +1320,9 @@ int main(int argc, char* argv[]) {\n         plasma::ExternalStores::ExtractStoreName(external_store_endpoint, &name));\n     external_store = plasma::ExternalStores::GetStore(name);\n     if (external_store == nullptr) {\n-      ARROW_LOG(FATAL) << \"No such external store \\\"\" << name << \"\\\"\";\n-      return -1;\n+      std::ostringstream error_msg;\n+      error_msg << \"no such external store \\\"\" << name << \"\\\"\";\n+      plasma::UsageError(error_msg.str().c_str(), -1);\n\nReview comment:\n       please comment literals with parameter name /*parameter_name=*/\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n\nReview comment:\n       might be worth a comment on why this doesn't use ARROW_LOG(FATAL)\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n+    // Set system memory capacity\n+    plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n+    ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n+                    << static_cast<double>(system_memory) / 1000000000\n+                    << \"GB of memory.\";\n   }\n+\n   // Sanity check command line options.\n-  if (!socket_name) {\n-    ARROW_LOG(FATAL) << \"please specify socket for incoming connections with -s switch\";\n+  if (!socket_name && system_memory == -1) {\n+    plasma::UsageError(\"please specify socket for incoming connections with -s, \"\n+                       \"and the amount of memory (in bytes) to use with -m\");\n   }\n-  if (system_memory == -1) {\n-    ARROW_LOG(FATAL) << \"please specify the amount of system memory with -m switch\";\n+  else if (!socket_name) {\n\nReview comment:\n       nit: not your code but socket_name != nullptr\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n\nReview comment:\n       replace with UsageError(...)?\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n+    // Set system memory capacity\n+    plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n+    ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n+                    << static_cast<double>(system_memory) / 1000000000\n+                    << \"GB of memory.\";\n   }\n+\n   // Sanity check command line options.\n-  if (!socket_name) {\n-    ARROW_LOG(FATAL) << \"please specify socket for incoming connections with -s switch\";\n+  if (!socket_name && system_memory == -1) {\n\nReview comment:\n       \"||\"?\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1304,8 +1320,9 @@ int main(int argc, char* argv[]) {\n         plasma::ExternalStores::ExtractStoreName(external_store_endpoint, &name));\n     external_store = plasma::ExternalStores::GetStore(name);\n     if (external_store == nullptr) {\n-      ARROW_LOG(FATAL) << \"No such external store \\\"\" << name << \"\\\"\";\n-      return -1;\n+      std::ostringstream error_msg;\n+      error_msg << \"no such external store \\\"\" << name << \"\\\"\";\n+      plasma::UsageError(error_msg.str().c_str(), -1);\n\nReview comment:\n       I'm not actually sure -1 is needed here  I don't think the prior code would get past ARROW_LOG(FATAL)?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-25T04:42:13.664+0000",
                    "updated": "2020-04-25T04:42:13.664+0000",
                    "started": "2020-04-25T04:42:13.664+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427156",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/427819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chrish42 commented on a change in pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#discussion_r416057944\n\n\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n+    // Set system memory capacity\n+    plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n+    ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n+                    << static_cast<double>(system_memory) / 1000000000\n+                    << \"GB of memory.\";\n   }\n+\n   // Sanity check command line options.\n-  if (!socket_name) {\n-    ARROW_LOG(FATAL) << \"please specify socket for incoming connections with -s switch\";\n+  if (!socket_name && system_memory == -1) {\n\nReview comment:\n       I'm checking here if both are wrong to give a better error message, so people who run the program without arguments get it right the second time, instead of getting an error telling them about `-s`, only to then get a second error telling them about `-m`. But I guess I could add a little comment about that...\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n\nReview comment:\n       There was already an ARROW_VERSION define in \"arrow/util/config.h\" that was a single number (e.g. 01800), so I added an ARROW_VERSION_STRING define, that is the usual dotted string version number (e.g. \"0.18.0\").\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n\nReview comment:\n       Good point. Added a comment.\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n\nReview comment:\n       Yes, good point. Done.\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n+    // Set system memory capacity\n+    plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n+    ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n+                    << static_cast<double>(system_memory) / 1000000000\n+                    << \"GB of memory.\";\n   }\n+\n   // Sanity check command line options.\n-  if (!socket_name) {\n-    ARROW_LOG(FATAL) << \"please specify socket for incoming connections with -s switch\";\n+  if (!socket_name && system_memory == -1) {\n\nReview comment:\n       Added a comment to clarify that this is the \"no required switches were passed\" case.\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n\nReview comment:\n       Done.\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1207,65 +1211,77 @@ void StartServer(char* socket_name, std::string plasma_directory, bool hugepages\n   g_runner->Start(socket_name, plasma_directory, hugepages_enabled, external_store);\n }\n \n+void UsageError(const char* error_msg, int exit_code=1) {\n+  std::cerr << gflags::ProgramInvocationShortName() << \": \" << error_msg << std::endl;\n+  exit(exit_code);\n+}\n+\n }  // namespace plasma\n \n+#ifdef __linux__\n+#define SHM_DEFAULT_PATH \"/dev/shm\"\n+#else\n+#define SHM_DEFAULT_PATH \"/tmp\"\n+#endif\n+\n+// Command-line flags.\n+DEFINE_string(d, SHM_DEFAULT_PATH, \"directory where to create the memory-backed file\");\n+DEFINE_string(e, \"\", \"endpoint for external storage service, where objects \"\n+\"evicted from Plasma store can be written to, optional\");\n+DEFINE_bool(h, false, \"whether to enable hugepage support\");\n+DEFINE_string(s, \"\", \"socket name where the Plasma store will listen for requests, required\");\n+DEFINE_string(m, \"\", \"amount of memory in bytes to use for Plasma store, required\");\n+\n int main(int argc, char* argv[]) {\n   ArrowLog::StartArrowLog(argv[0], ArrowLogLevel::ARROW_INFO);\n   ArrowLog::InstallFailureSignalHandler();\n+\n+  gflags::SetUsageMessage(\"Shared-memory server for Arrow data.\\nUsage: \");\n+  gflags::SetVersionString(\"TODO\");\n+\n   char* socket_name = nullptr;\n   // Directory where plasma memory mapped files are stored.\n   std::string plasma_directory;\n   std::string external_store_endpoint;\n   bool hugepages_enabled = false;\n   int64_t system_memory = -1;\n-  int c;\n-  while ((c = getopt(argc, argv, \"s:m:d:e:h\")) != -1) {\n-    switch (c) {\n-      case 'd':\n-        plasma_directory = std::string(optarg);\n-        break;\n-      case 'e':\n-        external_store_endpoint = std::string(optarg);\n-        break;\n-      case 'h':\n-        hugepages_enabled = true;\n-        break;\n-      case 's':\n-        socket_name = optarg;\n-        break;\n-      case 'm': {\n-        char extra;\n-        int scanned = sscanf(optarg, \"%\" SCNd64 \"%c\", &system_memory, &extra);\n-        ARROW_CHECK(scanned == 1);\n-        // Set system memory capacity\n-        plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n-        ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n-                        << static_cast<double>(system_memory) / 1000000000\n-                        << \"GB of memory.\";\n-        break;\n-      }\n-      default:\n-        exit(-1);\n-    }\n+\n+  gflags::ParseCommandLineFlags(&argc, &argv, true);\n+  plasma_directory = FLAGS_d;\n+  external_store_endpoint = FLAGS_e;\n+  hugepages_enabled = FLAGS_h;\n+  if (!FLAGS_s.empty()) {\n+    // We only check below if socket_name is null, so don't set it if the flag was empty.\n+    socket_name = const_cast<char*>(FLAGS_s.c_str());\n+  }\n+\n+  if (!FLAGS_m.empty()) {\n+    char extra;\n+    int scanned = sscanf(FLAGS_m.c_str(), \"%\" SCNd64 \"%c\", &system_memory, &extra);\n+    ARROW_CHECK(scanned == 1);\n+    // Set system memory capacity\n+    plasma::PlasmaAllocator::SetFootprintLimit(static_cast<size_t>(system_memory));\n+    ARROW_LOG(INFO) << \"Allowing the Plasma store to use up to \"\n+                    << static_cast<double>(system_memory) / 1000000000\n+                    << \"GB of memory.\";\n   }\n+\n   // Sanity check command line options.\n-  if (!socket_name) {\n-    ARROW_LOG(FATAL) << \"please specify socket for incoming connections with -s switch\";\n+  if (!socket_name && system_memory == -1) {\n+    plasma::UsageError(\"please specify socket for incoming connections with -s, \"\n+                       \"and the amount of memory (in bytes) to use with -m\");\n   }\n-  if (system_memory == -1) {\n-    ARROW_LOG(FATAL) << \"please specify the amount of system memory with -m switch\";\n+  else if (!socket_name) {\n\nReview comment:\n       Changed, and at a couple other places too in this function.\n\n##########\nFile path: cpp/src/plasma/store.cc\n##########\n@@ -1304,8 +1320,9 @@ int main(int argc, char* argv[]) {\n         plasma::ExternalStores::ExtractStoreName(external_store_endpoint, &name));\n     external_store = plasma::ExternalStores::GetStore(name);\n     if (external_store == nullptr) {\n-      ARROW_LOG(FATAL) << \"No such external store \\\"\" << name << \"\\\"\";\n-      return -1;\n+      std::ostringstream error_msg;\n+      error_msg << \"no such external store \\\"\" << name << \"\\\"\";\n+      plasma::UsageError(error_msg.str().c_str(), -1);\n\nReview comment:\n       Good point, yes. That simplifies things. I've also renamed the function to `ExitWithUsageError()` so it's unambiguous that it never returns.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T19:46:10.272+0000",
                    "updated": "2020-04-27T19:46:10.272+0000",
                    "started": "2020-04-27T19:46:10.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427819",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/428202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chrish42 commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-620679645\n\n\n   Okay, figured out how to run clang-format-8 on the code. (It feels like something that should definitely be easier, especially if it fails the build on the CI.) Let me know if you think anything is missing, because this looks done to me.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T15:31:11.336+0000",
                    "updated": "2020-04-28T15:31:11.336+0000",
                    "started": "2020-04-28T15:31:11.336+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428202",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/428303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chrish42 commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-620771984\n\n\n   Hmm. The dev / lint failure is from `arrow/rust/parquet/src/util/io.rs`, which I didn't touch... \ud83e\udd14\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T18:14:36.745+0000",
                    "updated": "2020-04-28T18:14:36.745+0000",
                    "started": "2020-04-28T18:14:36.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428303",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/428412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-620886116\n\n\n   @chrish42 you can ignore the Rust lint failures until the Rust nightly linting issues are resolved\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T22:22:33.381+0000",
                    "updated": "2020-04-28T22:22:33.381+0000",
                    "started": "2020-04-28T22:22:33.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428412",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/428510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-620985725\n\n\n   This seems like a strictly cleaner code, so I'll merge.  Thanks @chrish42 \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-29T04:44:46.344+0000",
                    "updated": "2020-04-29T04:44:46.344+0000",
                    "started": "2020-04-29T04:44:46.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428510",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/428513",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-620986493\n\n\n   @chrish42 do you have a JIRA account setup, I'd like to assign the JIRA to you for book-keeping purposes.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-29T04:48:09.663+0000",
                    "updated": "2020-04-29T04:48:09.663+0000",
                    "started": "2020-04-29T04:48:09.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428513",
                    "issueId": "13142516"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/worklog/428588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chrish42 commented on pull request #7025:\nURL: https://github.com/apache/arrow/pull/7025#issuecomment-621243467\n\n\n   @emkornfield I'm chrish42 on the Apache JIRA too. Thanks!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-29T14:22:27.557+0000",
                    "updated": "2020-04-29T14:22:27.557+0000",
                    "started": "2020-04-29T14:22:27.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428588",
                    "issueId": "13142516"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@73e22ab3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a7f1aaa[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a3351bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@788bac1d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f03a1c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5f28871[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@753cbffd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50721e03[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@725db87e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@637d1744[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@732e8f81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@33ec15e1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 29 04:48:08 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-04-29T04:48:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2260/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2018-03-05T13:07:29.000+0000",
        "updated": "2020-04-30T02:42:11.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently the options exposed by the {{plasma_store}} executable aren't very discoverable:\r\n\r\n{code:bash}\r\n$ plasma_store -h\r\nplease specify socket for incoming connections with -s switch\r\nAbandon\r\n(pyarrow) antoine@fsol:~/arrow/cpp (ARROW-2135-nan-conversion-when-casting *)$ plasma_store \r\nplease specify socket for incoming connections with -s switch\r\nAbandon\r\n(pyarrow) antoine@fsol:~/arrow/cpp (ARROW-2135-nan-conversion-when-casting *)$ plasma_store --help\r\nplasma_store: invalid option -- '-'\r\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Plasma] plasma_store should show usage",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/comment/16451221",
                    "id": "16451221",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~pcmoritz], [~robertnishihara].",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-04-24T21:05:15.930+0000",
                    "updated": "2018-04-24T21:05:15.930+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/comment/16942242",
                    "id": "16942242",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Ran into this today. Pretty unfriendly\r\n\r\n{code}\r\n$ plasma_store -h\r\nWARNING: Logging before InitGoogleLogging() is written to STDERR\r\nF1001 14:09:55.488880 366765504 store.cc:1160] please specify socket for incoming connections with -s switch\r\n*** Check failure stack trace: ***\r\n*** Aborted at 1569956995 (unix time) try \"date -d @1569956995\" if you are using GNU date ***\r\nPC: @                0x0 (unknown)\r\n*** SIGABRT (@0x7fff785eb2c6) received by PID 3111 (TID 0x115dc65c0) stack trace: ***\r\n    @     0x7fff7869bb5d _sigtramp\r\nAbort trap: 6\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-10-01T19:10:40.980+0000",
                    "updated": "2019-10-01T19:10:40.980+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/comment/17016349",
                    "id": "17016349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "body": "Oups. Didn't check for duplicates before reporting ARROW-7585. I'm willing to do the work to fix this as a good first Arrow pull request. Antoine mentioned GFlags as the library to use (that would be more featureful than getopt()), so I'll use that unless someone says otherwise here...\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=chrish42",
                        "name": "chrish42",
                        "key": "chrish42",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Christian Hudon",
                        "active": true,
                        "timeZone": "America/Toronto"
                    },
                    "created": "2020-01-15T21:37:51.613+0000",
                    "updated": "2020-01-15T21:37:51.613+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13142516/comment/17095062",
                    "id": "17095062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 7025\n[https://github.com/apache/arrow/pull/7025]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-04-29T04:48:08.779+0000",
                    "updated": "2020-04-29T04:48:08.779+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3qv8f:",
        "customfield_12314139": null
    }
}