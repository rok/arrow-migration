{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "12947906",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906",
    "key": "ARROW-47",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12541286",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12541286",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13179815",
                    "key": "ARROW-3087",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179815",
                    "fields": {
                        "summary": "[C++] Add kernels for comparison operations to scalars",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-47/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 26,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604\n \n \n   This is the start of a Scalar object model suitable for static and dynamic dispatch to correspond with the existing array and array builder types. \r\n   \r\n   I modified the first aggregation kernel (sum) to use these types for outputs. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T06:06:44.299+0000",
                    "updated": "2019-02-11T06:06:44.299+0000",
                    "started": "2019-02-11T06:06:44.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196787",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255519961\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n+\n+/// \\brief A scalar value for NullType. Never valid\n+struct ARROW_EXPORT NullScalar : public Scalar {\n+ public:\n+  NullScalar() : Scalar{false, null()} {}\n+};\n+\n+struct ARROW_EXPORT BooleanScalar : public Scalar {\n+  bool value;\n+  explicit BooleanScalar(bool value, bool is_valid = true)\n+      : Scalar{is_valid, boolean()}, value(value) {}\n+};\n+\n+template <typename Type>\n+struct NumericScalar : public Scalar {\n+  using T = typename Type::c_type;\n+  T value;\n+\n+  explicit NumericScalar(T value, bool is_valid = true)\n+      : Scalar{is_valid, TypeTraits<Type>::type_singleton()}, value(value) {}\n+};\n+\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using HalfFloatScalar = NumericScalar<HalfFloatType>;\n+using FloatScalar = NumericScalar<FloatType>;\n+using DoubleScalar = NumericScalar<DoubleType>;\n+\n+struct ARROW_EXPORT BinaryScalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n+  explicit BinaryScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, binary(), is_valid) {}\n+\n+ protected:\n+  BinaryScalar(const std::shared_ptr<Buffer>& value,\n+               const std::shared_ptr<DataType>& type, bool is_valid = true)\n+      : Scalar{is_valid, type}, value(value) {}\n+};\n+\n+struct ARROW_EXPORT FixedSizeBinaryScalar : public BinaryScalar {\n+  FixedSizeBinaryScalar(const std::shared_ptr<Buffer>& value,\n+                        const std::shared_ptr<DataType>& type, bool is_valid = true);\n+};\n+\n+struct ARROW_EXPORT StringScalar : public BinaryScalar {\n+  explicit StringScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, utf8(), is_valid) {}\n+};\n+\n+class ARROW_EXPORT Date32Scalar : public NumericScalar<Date32Type> {\n+ public:\n+  using NumericScalar<Date32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Date64Scalar : public NumericScalar<Date64Type> {\n+ public:\n+  using NumericScalar<Date64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time32Scalar : public NumericScalar<Time32Type> {\n+ public:\n+  using NumericScalar<Time32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time64Scalar : public NumericScalar<Time64Type> {\n+ public:\n+  using NumericScalar<Time64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT TimestampScalar : public NumericScalar<TimestampType> {\n+ public:\n+  using NumericScalar<TimestampType>::NumericScalar;\n+};\n+\n+struct ARROW_EXPORT Decimal128Scalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n \n Review comment:\n   Why not `char[16]`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T14:28:12.205+0000",
                    "updated": "2019-02-11T14:28:12.205+0000",
                    "started": "2019-02-11T14:28:12.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196937",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196938",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255506385\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/aggregate-test.cc\n ##########\n @@ -115,24 +120,23 @@ void ValidateSum(FunctionContext* ctx, const Array& array) {\n template <typename ArrowType>\n class TestSumKernelNumeric : public ComputeFixture, public TestBase {};\n \n-typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n-                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType>\n-    NumericArrowTypes;\n-\n TYPED_TEST_CASE(TestSumKernelNumeric, NumericArrowTypes);\n TYPED_TEST(TestSumKernelNumeric, SimpleSum) {\n-  using CType = typename TypeParam::c_type;\n-  using SumType = typename FindAccumulatorType<CType>::Type;\n+  using SumType = typename FindAccumulatorType<TypeParam>::Type;\n+  using ScalarType = typename TypeTraits<SumType>::ScalarType;\n+  using T = typename TypeParam::c_type;\n \n-  ValidateSum<TypeParam>(&this->ctx_, \"[]\", Datum());\n+  ValidateSum<TypeParam>(&this->ctx_, \"[]\",\n+                         Datum(std::make_shared<ScalarType>(0, false)));\n \n   ValidateSum<TypeParam>(&this->ctx_, \"[0, 1, 2, 3, 4, 5]\",\n-                         Datum(Scalar(static_cast<SumType>(5 * 6 / 2))));\n+                         Datum(std::make_shared<ScalarType>(static_cast<T>(5 * 6 / 2))));\n \n   // Avoid this tests for (U)Int8Type\n-  if (sizeof(CType) > 1)\n+  if (sizeof(typename TypeParam::c_type) > 1) {\n \n Review comment:\n   `sizeof(T)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T14:28:12.989+0000",
                    "updated": "2019-02-11T14:28:12.989+0000",
                    "started": "2019-02-11T14:28:12.988+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196938",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255539671\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n+\n+/// \\brief A scalar value for NullType. Never valid\n+struct ARROW_EXPORT NullScalar : public Scalar {\n+ public:\n+  NullScalar() : Scalar{false, null()} {}\n+};\n+\n+struct ARROW_EXPORT BooleanScalar : public Scalar {\n+  bool value;\n+  explicit BooleanScalar(bool value, bool is_valid = true)\n+      : Scalar{is_valid, boolean()}, value(value) {}\n+};\n+\n+template <typename Type>\n+struct NumericScalar : public Scalar {\n+  using T = typename Type::c_type;\n+  T value;\n+\n+  explicit NumericScalar(T value, bool is_valid = true)\n+      : Scalar{is_valid, TypeTraits<Type>::type_singleton()}, value(value) {}\n+};\n+\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using HalfFloatScalar = NumericScalar<HalfFloatType>;\n+using FloatScalar = NumericScalar<FloatType>;\n+using DoubleScalar = NumericScalar<DoubleType>;\n+\n+struct ARROW_EXPORT BinaryScalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n+  explicit BinaryScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, binary(), is_valid) {}\n+\n+ protected:\n+  BinaryScalar(const std::shared_ptr<Buffer>& value,\n+               const std::shared_ptr<DataType>& type, bool is_valid = true)\n+      : Scalar{is_valid, type}, value(value) {}\n+};\n+\n+struct ARROW_EXPORT FixedSizeBinaryScalar : public BinaryScalar {\n+  FixedSizeBinaryScalar(const std::shared_ptr<Buffer>& value,\n+                        const std::shared_ptr<DataType>& type, bool is_valid = true);\n+};\n+\n+struct ARROW_EXPORT StringScalar : public BinaryScalar {\n+  explicit StringScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, utf8(), is_valid) {}\n+};\n+\n+class ARROW_EXPORT Date32Scalar : public NumericScalar<Date32Type> {\n+ public:\n+  using NumericScalar<Date32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Date64Scalar : public NumericScalar<Date64Type> {\n+ public:\n+  using NumericScalar<Date64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time32Scalar : public NumericScalar<Time32Type> {\n+ public:\n+  using NumericScalar<Time32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time64Scalar : public NumericScalar<Time64Type> {\n+ public:\n+  using NumericScalar<Time64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT TimestampScalar : public NumericScalar<TimestampType> {\n+ public:\n+  using NumericScalar<TimestampType>::NumericScalar;\n+};\n+\n+struct ARROW_EXPORT Decimal128Scalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n \n Review comment:\n   If anything this should probably be `arrow::Decimal128`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T14:53:25.410+0000",
                    "updated": "2019-02-11T14:53:25.410+0000",
                    "started": "2019-02-11T14:53:25.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196953",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255540917\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n \n Review comment:\n   Swap the order of is_valid and type, you'll get better struct packing & alignment.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T14:56:13.159+0000",
                    "updated": "2019-02-11T14:56:13.159+0000",
                    "started": "2019-02-11T14:56:13.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196957",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255541104\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n+\n+/// \\brief A scalar value for NullType. Never valid\n+struct ARROW_EXPORT NullScalar : public Scalar {\n+ public:\n+  NullScalar() : Scalar{false, null()} {}\n+};\n+\n+struct ARROW_EXPORT BooleanScalar : public Scalar {\n+  bool value;\n+  explicit BooleanScalar(bool value, bool is_valid = true)\n+      : Scalar{is_valid, boolean()}, value(value) {}\n+};\n+\n+template <typename Type>\n+struct NumericScalar : public Scalar {\n+  using T = typename Type::c_type;\n+  T value;\n+\n+  explicit NumericScalar(T value, bool is_valid = true)\n+      : Scalar{is_valid, TypeTraits<Type>::type_singleton()}, value(value) {}\n+};\n+\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using HalfFloatScalar = NumericScalar<HalfFloatType>;\n+using FloatScalar = NumericScalar<FloatType>;\n+using DoubleScalar = NumericScalar<DoubleType>;\n+\n+struct ARROW_EXPORT BinaryScalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n+  explicit BinaryScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, binary(), is_valid) {}\n+\n+ protected:\n+  BinaryScalar(const std::shared_ptr<Buffer>& value,\n+               const std::shared_ptr<DataType>& type, bool is_valid = true)\n+      : Scalar{is_valid, type}, value(value) {}\n+};\n+\n+struct ARROW_EXPORT FixedSizeBinaryScalar : public BinaryScalar {\n+  FixedSizeBinaryScalar(const std::shared_ptr<Buffer>& value,\n+                        const std::shared_ptr<DataType>& type, bool is_valid = true);\n+};\n+\n+struct ARROW_EXPORT StringScalar : public BinaryScalar {\n+  explicit StringScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, utf8(), is_valid) {}\n+};\n+\n+class ARROW_EXPORT Date32Scalar : public NumericScalar<Date32Type> {\n+ public:\n+  using NumericScalar<Date32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Date64Scalar : public NumericScalar<Date64Type> {\n+ public:\n+  using NumericScalar<Date64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time32Scalar : public NumericScalar<Time32Type> {\n+ public:\n+  using NumericScalar<Time32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time64Scalar : public NumericScalar<Time64Type> {\n+ public:\n+  using NumericScalar<Time64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT TimestampScalar : public NumericScalar<TimestampType> {\n+ public:\n+  using NumericScalar<TimestampType>::NumericScalar;\n+};\n+\n+struct ARROW_EXPORT Decimal128Scalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n \n Review comment:\n   There's `uint128` in abseil.io and in the future, `int128`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T14:56:39.966+0000",
                    "updated": "2019-02-11T14:56:39.966+0000",
                    "started": "2019-02-11T14:56:39.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196958",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196963",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255545275\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n \n Review comment:\n   Will do, though if this ever mattered these classes are being used wrong ;) \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T15:05:41.369+0000",
                    "updated": "2019-02-11T15:05:41.369+0000",
                    "started": "2019-02-11T15:05:41.368+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196963",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196969",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255551217\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n \n Review comment:\n   Should we write small document in the Kernel header about this subject?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T15:18:56.052+0000",
                    "updated": "2019-02-11T15:18:56.052+0000",
                    "started": "2019-02-11T15:18:56.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196969",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255555542\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n \n Review comment:\n   Doesn't this need a virtual destructor if we're going to be using `shared_ptr<Scalar>`s?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T15:27:48.104+0000",
                    "updated": "2019-02-11T15:27:48.104+0000",
                    "started": "2019-02-11T15:27:48.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196978",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255561657\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n+\n+/// \\brief A scalar value for NullType. Never valid\n+struct ARROW_EXPORT NullScalar : public Scalar {\n+ public:\n+  NullScalar() : Scalar{false, null()} {}\n+};\n+\n+struct ARROW_EXPORT BooleanScalar : public Scalar {\n+  bool value;\n+  explicit BooleanScalar(bool value, bool is_valid = true)\n+      : Scalar{is_valid, boolean()}, value(value) {}\n+};\n+\n+template <typename Type>\n+struct NumericScalar : public Scalar {\n+  using T = typename Type::c_type;\n+  T value;\n+\n+  explicit NumericScalar(T value, bool is_valid = true)\n+      : Scalar{is_valid, TypeTraits<Type>::type_singleton()}, value(value) {}\n+};\n+\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using HalfFloatScalar = NumericScalar<HalfFloatType>;\n+using FloatScalar = NumericScalar<FloatType>;\n+using DoubleScalar = NumericScalar<DoubleType>;\n+\n+struct ARROW_EXPORT BinaryScalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n+  explicit BinaryScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, binary(), is_valid) {}\n+\n+ protected:\n+  BinaryScalar(const std::shared_ptr<Buffer>& value,\n+               const std::shared_ptr<DataType>& type, bool is_valid = true)\n+      : Scalar{is_valid, type}, value(value) {}\n+};\n+\n+struct ARROW_EXPORT FixedSizeBinaryScalar : public BinaryScalar {\n+  FixedSizeBinaryScalar(const std::shared_ptr<Buffer>& value,\n+                        const std::shared_ptr<DataType>& type, bool is_valid = true);\n+};\n+\n+struct ARROW_EXPORT StringScalar : public BinaryScalar {\n+  explicit StringScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, utf8(), is_valid) {}\n+};\n+\n+class ARROW_EXPORT Date32Scalar : public NumericScalar<Date32Type> {\n+ public:\n+  using NumericScalar<Date32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Date64Scalar : public NumericScalar<Date64Type> {\n+ public:\n+  using NumericScalar<Date64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time32Scalar : public NumericScalar<Time32Type> {\n+ public:\n+  using NumericScalar<Time32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time64Scalar : public NumericScalar<Time64Type> {\n+ public:\n+  using NumericScalar<Time64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT TimestampScalar : public NumericScalar<TimestampType> {\n+ public:\n+  using NumericScalar<TimestampType>::NumericScalar;\n+};\n+\n+struct ARROW_EXPORT Decimal128Scalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n \n Review comment:\n   I don't think this is worth stressing over\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T15:40:20.781+0000",
                    "updated": "2019-02-11T15:40:20.781+0000",
                    "started": "2019-02-11T15:40:20.780+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196991",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/196998",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255566078\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n \n Review comment:\n   Good question. I just added some checks to see if `shared_ptr<Buffer>` in a subclass is properly destructed and it is. I'm happy to add a virtual dtor for good measure, though\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T15:49:11.492+0000",
                    "updated": "2019-02-11T15:49:11.492+0000",
                    "started": "2019-02-11T15:49:11.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "196998",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255584532\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n+\n+/// \\brief A scalar value for NullType. Never valid\n+struct ARROW_EXPORT NullScalar : public Scalar {\n+ public:\n+  NullScalar() : Scalar{false, null()} {}\n+};\n+\n+struct ARROW_EXPORT BooleanScalar : public Scalar {\n+  bool value;\n+  explicit BooleanScalar(bool value, bool is_valid = true)\n+      : Scalar{is_valid, boolean()}, value(value) {}\n+};\n+\n+template <typename Type>\n+struct NumericScalar : public Scalar {\n+  using T = typename Type::c_type;\n+  T value;\n+\n+  explicit NumericScalar(T value, bool is_valid = true)\n+      : Scalar{is_valid, TypeTraits<Type>::type_singleton()}, value(value) {}\n+};\n+\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using UInt8Scalar = NumericScalar<UInt8Type>;\n+using UInt16Scalar = NumericScalar<UInt16Type>;\n+using UInt32Scalar = NumericScalar<UInt32Type>;\n+using UInt64Scalar = NumericScalar<UInt64Type>;\n+using HalfFloatScalar = NumericScalar<HalfFloatType>;\n+using FloatScalar = NumericScalar<FloatType>;\n+using DoubleScalar = NumericScalar<DoubleType>;\n+\n+struct ARROW_EXPORT BinaryScalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n+  explicit BinaryScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, binary(), is_valid) {}\n+\n+ protected:\n+  BinaryScalar(const std::shared_ptr<Buffer>& value,\n+               const std::shared_ptr<DataType>& type, bool is_valid = true)\n+      : Scalar{is_valid, type}, value(value) {}\n+};\n+\n+struct ARROW_EXPORT FixedSizeBinaryScalar : public BinaryScalar {\n+  FixedSizeBinaryScalar(const std::shared_ptr<Buffer>& value,\n+                        const std::shared_ptr<DataType>& type, bool is_valid = true);\n+};\n+\n+struct ARROW_EXPORT StringScalar : public BinaryScalar {\n+  explicit StringScalar(const std::shared_ptr<Buffer>& value, bool is_valid = true)\n+      : BinaryScalar(value, utf8(), is_valid) {}\n+};\n+\n+class ARROW_EXPORT Date32Scalar : public NumericScalar<Date32Type> {\n+ public:\n+  using NumericScalar<Date32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Date64Scalar : public NumericScalar<Date64Type> {\n+ public:\n+  using NumericScalar<Date64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time32Scalar : public NumericScalar<Time32Type> {\n+ public:\n+  using NumericScalar<Time32Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT Time64Scalar : public NumericScalar<Time64Type> {\n+ public:\n+  using NumericScalar<Time64Type>::NumericScalar;\n+};\n+\n+class ARROW_EXPORT TimestampScalar : public NumericScalar<TimestampType> {\n+ public:\n+  using NumericScalar<TimestampType>::NumericScalar;\n+};\n+\n+struct ARROW_EXPORT Decimal128Scalar : public Scalar {\n+  std::shared_ptr<Buffer> value;\n \n Review comment:\n   :+1: \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T16:27:33.743+0000",
                    "updated": "2019-02-11T16:27:33.743+0000",
                    "started": "2019-02-11T16:27:33.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197024",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255603875\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n \n Review comment:\n   Ah, I forgot: `shared_ptr`'s block manager is instantiated with the constructed type, so `base_ref` is pointing to a `manager<BinaryScalar>` which calls `~BinaryScalar`. The memory won't leak with `shared_ptr<Scalar>`, but it will leak for `unique_ptr<Scalar>`. Probably best to add the virtual dtor\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T17:08:38.803+0000",
                    "updated": "2019-02-11T17:08:38.803+0000",
                    "started": "2019-02-11T17:08:38.802+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197048",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255729899\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n+\n+  /// \\brief The type of the scalar value\n+  std::shared_ptr<DataType> type;\n+};\n \n Review comment:\n   done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T22:59:23.534+0000",
                    "updated": "2019-02-11T22:59:23.534+0000",
                    "started": "2019-02-11T22:59:23.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197231",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255730124\n \n \n\n ##########\n File path: cpp/src/arrow/scalar.h\n ##########\n @@ -0,0 +1,143 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// Object model for scalar (non-Array) values. Not intended for use with large\n+// amounts of data\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/variant.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+\n+/// \\brief Base class for scalar values, representing a single value occupying\n+/// an array \"slot\"\n+struct ARROW_EXPORT Scalar {\n+  /// \\brief Whether the value is valid (not null) or not\n+  bool is_valid;\n \n Review comment:\n   I'm not sure what to write\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T22:59:57.925+0000",
                    "updated": "2019-02-11T22:59:57.925+0000",
                    "started": "2019-02-11T22:59:57.924+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197232",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3604: ARROW-47: [C++] RFC arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#issuecomment-462529847\n \n \n   I added a note that the API is experimental in 0.13 so we can change things.\r\n   \r\n   @xhochy could you take a glance at this and let me know if you're OK with it going in? I think this will be the subject of some iteration as we write more kernels that use these objects. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-11T23:01:02.812+0000",
                    "updated": "2019-02-11T23:01:02.812+0000",
                    "started": "2019-02-11T23:01:02.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197236",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3604: ARROW-47: [C++] Preliminary arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255801712\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -244,6 +260,8 @@ struct TypeTraits<UnionType> {\n template <>\n struct TypeTraits<DictionaryType> {\n   using ArrayType = DictionaryArray;\n+  // TODO(wesm): Not sure what to do about this\n \n Review comment:\n   It seems like maybe one shouldn't exist?  Otherwise just an int and a dictionary pointer?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T04:49:12.349+0000",
                    "updated": "2019-02-12T04:49:12.349+0000",
                    "started": "2019-02-12T04:49:12.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197368",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197367",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #3604: ARROW-47: [C++] Preliminary arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255795894\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernel.h\n ##########\n @@ -55,68 +56,20 @@ class ARROW_EXPORT OpKernel {\n   virtual ~OpKernel() = default;\n };\n \n-/// \\brief Placeholder for Scalar values until we implement these\n-struct ARROW_EXPORT Scalar {\n-  util::variant<bool, uint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, uint64_t,\n-                int64_t, float, double>\n-      value;\n-\n-  explicit Scalar(bool value) : value(value) {}\n-  explicit Scalar(uint8_t value) : value(value) {}\n-  explicit Scalar(int8_t value) : value(value) {}\n-  explicit Scalar(uint16_t value) : value(value) {}\n-  explicit Scalar(int16_t value) : value(value) {}\n-  explicit Scalar(uint32_t value) : value(value) {}\n-  explicit Scalar(int32_t value) : value(value) {}\n-  explicit Scalar(uint64_t value) : value(value) {}\n-  explicit Scalar(int64_t value) : value(value) {}\n-  explicit Scalar(float value) : value(value) {}\n-  explicit Scalar(double value) : value(value) {}\n-\n-  Type::type kind() const {\n-    switch (this->value.which()) {\n-      case 0:\n-        return Type::BOOL;\n-      case 1:\n-        return Type::UINT8;\n-      case 2:\n-        return Type::INT8;\n-      case 3:\n-        return Type::UINT16;\n-      case 4:\n-        return Type::INT16;\n-      case 5:\n-        return Type::UINT32;\n-      case 6:\n-        return Type::INT32;\n-      case 7:\n-        return Type::UINT64;\n-      case 8:\n-        return Type::INT64;\n-      case 9:\n-        return Type::FLOAT;\n-      case 10:\n-        return Type::DOUBLE;\n-      default:\n-        return Type::NA;\n-    }\n-  }\n-};\n-\n /// \\class Datum\n /// \\brief Variant type for various Arrow C++ data structures\n struct ARROW_EXPORT Datum {\n   enum type { NONE, SCALAR, ARRAY, CHUNKED_ARRAY, RECORD_BATCH, TABLE, COLLECTION };\n \n-  util::variant<decltype(NULLPTR), Scalar, std::shared_ptr<ArrayData>,\n+  util::variant<decltype(NULLPTR), std::shared_ptr<Scalar>, std::shared_ptr<ArrayData>,\n \n Review comment:\n   given scalars are supposed to be \"small\" it might be worth comment on why you use a shared_ptr type here (i.e. instead of the previous variant)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T04:49:12.349+0000",
                    "updated": "2019-02-12T04:49:12.349+0000",
                    "started": "2019-02-12T04:49:12.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197367",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #3604: ARROW-47: [C++] Preliminary arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#discussion_r255940367\n \n \n\n ##########\n File path: cpp/src/arrow/type_traits.h\n ##########\n @@ -244,6 +260,8 @@ struct TypeTraits<UnionType> {\n template <>\n struct TypeTraits<DictionaryType> {\n   using ArrayType = DictionaryArray;\n+  // TODO(wesm): Not sure what to do about this\n \n Review comment:\n   We're also lacking BuilderType here for fundamentally the same reason. `pair<int64_t, std::shared_ptr<Array>>` is attractive but is it acceptable for when the index type is `uint64_t`?\r\n   \r\n   An option is to use/wrap `Scalar` or `std::shared_ptr<Scalar>` here. Then BuilderType could be TypeErasedDictionaryBuilder or so:\r\n   \r\n   ```\r\n   std:: unique_ptr<ArrayBuilder> builder;\r\n   RETURN_NOT_OK(MakeBuilder(pool, dictionary(int32(), string_array), &builder));\r\n   for (std::shared_ptr<Scalar> s : user_inputs) {\r\n     RETURN_NOT_OK(builder->Append(s));\r\n     // Append null for strings not in string_array\r\n     // and non-StringScalars\r\n   }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T12:58:20.082+0000",
                    "updated": "2019-02-12T12:58:20.082+0000",
                    "started": "2019-02-12T12:58:20.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197541",
                    "issueId": "12947906"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/worklog/197559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #3604: ARROW-47: [C++] Preliminary arrow::Scalar object model\nURL: https://github.com/apache/arrow/pull/3604#issuecomment-462760852\n \n \n   @wesm Looks good, the things that most annoys me is the GTEST_VENDORED option ;)(\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-12T13:34:43.524+0000",
                    "updated": "2019-02-12T13:34:43.524+0000",
                    "started": "2019-02-12T13:34:43.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "197559",
                    "issueId": "12947906"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@edc6344[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d6fcbb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ddaf51a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29ddf13e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@692a2106[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1250cbc6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58688eb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1e7ac081[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26e0e059[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@32fa11b8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e7b1c42[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@664dbfc4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Feb 13 15:26:17 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-13T15:26:17.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-47/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2016-03-08T05:17:00.000+0000",
        "updated": "2019-02-13T15:26:30.000+0000",
        "timeoriginalestimate": null,
        "description": "Just did this on the Python side. In later analytics routines, passing in scalar values (example: Array + Scalar) requires some kind of container. Some systems, like the R language, solve this problem with length-1 arrays, but we should do some analysis of use cases and figure out what will work best for Arrow.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Consider adding a scalar type object model",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719027",
                    "id": "16719027",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I think there are several dimensions in the design space that should be explored.\r\n\r\n* Should scalars be backed by an ArrayData, or be standalone (or possibly one or the other)? Backing by an ArrayData allows cheap passing of binary values for example (like a std::string_view), while standalone values would be more expensive (some types will come with their owned piece of memory like a std::string). But standalone values are also more flexible in usage (you don't need a separate ArrayData that you must remember to keep alive...).\r\n\r\n* Can scalars have disjoint types, or is a common base class desired? Or perhaps even a single union type, possible a {{variant}}? Those different solutions have different costs, and also different usage models.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-12-12T14:32:27.452+0000",
                    "updated": "2018-12-12T14:32:27.452+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719077",
                    "id": "16719077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I had been thinking about having standalone in-struct storage for primitive types and using Array/ArrayData for list scalars at least. For binary I'm not sure. I just sketched the following\r\n\r\n{code:c++}\r\n\r\nclass Scalar {\r\n  std::shared_ptr<DataType> type() const { return type_; }\r\n\r\n  bool is_valid() const { return is_valid_; }\r\n\r\n protected:\r\n  std::shared_ptr<DataType> type_;\r\n  bool is_valid_;\r\n};\r\n\r\ntemplate <typename Type>\r\nclass PrimitiveScalar : public Scalar {\r\n public:\r\n  using T = typename Type::c_type;\r\n\r\n  T value() const { return value_; }\r\n\r\n private:\r\n  T value_;\r\n};\r\n\r\nclass BinaryScalar : public Scalar {\r\n protected:\r\n  std::shared_ptr<Buffer> value_;\r\n};\r\n\r\nclass ListScalar : public Scalar {\r\n protected:\r\n  std::shared_ptr<Array> value_;\r\n};\r\n{code}\r\n\r\nI think using {{Buffer}} for binary scalars is probably the lightest weight thing that also ensures memory lifetime. In practice (e.g. in analytics code paths), we will do dynamic dispatch on the type, so as long as we have a reasonable base class that exposes that, we should try to make the object as lightweight / simple as possible.\r\n\r\nI don't anticipate we'll be dealing with large collections of these scalar objects. But we want to be able to have a suitable way to algebraically represent the data when executing a computation graph (and writing kernel implementations that may accept either array or scalar -- with \"broadcasting\" -- arguments)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T15:14:18.446+0000",
                    "updated": "2018-12-12T15:14:18.446+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719079",
                    "id": "16719079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm not sure about what {{StructScalar}} should look like. as we are perhaps not overly concerned about efficiency with these objects, a struct could have an internal vector of {{shared_ptr<Scalar>}}\r\n\r\ncc [~fsaintjacques] [~bkietz] [~xhochy] for any thoughts",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T15:15:38.080+0000",
                    "updated": "2018-12-12T15:15:38.080+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719134",
                    "id": "16719134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "At first sight, I'd say that StructScalar (and Scalar) memory layout will be critical to the implementation of\u00a0ARROW-3978 (and joins of multiple columns/expressions), hashing/probing\u00a0on the columnar representation SoA is a performance killer (due k pointer indirections and cacheline reads where k is the number of field).\r\n\r\nThe second thing, is that when we'll work with intermediary results of `Scalar`s, the types will almost always be homogeneous.\u00a0For example, when computing the hash table of a join/group-by, you'll have something like `hash<Scalar, Result>` where the type for each scalar instances is the same (minus Null, but we can and should specialize for nullability). Thus adding the type shared_ptr _and_ an `is_valid` boolean is somewhat costly (16 + 1 + sizeof(primitive_type).\r\n\r\nThis optimization can be hidden in the implementation, but I wonder if we'll have to expose the collections at the API boundaries.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T16:11:04.925+0000",
                    "updated": "2018-12-12T16:11:04.925+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719136",
                    "id": "16719136",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I do not think these objects should be used on computation hot paths at all (like joins or hash aggregations); since such code is vector-oriented in general it will require more specialization",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T16:15:03.984+0000",
                    "updated": "2018-12-12T16:15:03.984+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719205",
                    "id": "16719205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "One alternative to using {{vector<shared_ptr<Scalar>>}} would be a flatbuffer, which would make hashing pretty straightforward and keep small allocations low:\r\n{code:java|title=struct_scalar.h}\r\nstruct StructScalar {\r\n  template <typename T>\r\n  T GetFieldAs(int field_index);\r\n\r\n  flatbuffers::Table *root_;\r\n  std::vector<flatbuffers::reflection::Field*> fields_;\r\n  std::shared_ptr<Buffer> storage_;\r\n};\r\n{code}\r\nIn any case, the main challenge I see is the amount of fragile unboxing boilerplate that StructScalar would require to be user friendly. That can be mitigated with good metaprogramming, but it's still a bit verbose:\r\n{code:java|title=unbox_styles.cc}\r\nStructScalar* obj = get();\r\nStatus s = Unbox1<int, string, ignore, bool>(obj, [](bitset<4> is_valid, int id, string_view name, ignore, bool admin) {\r\n  // ...\r\n});\r\n\r\nbitset<4> is_valid;\r\ntuple<int, string_view, ignore, bool> employee;\r\nRETURN_NOT_OK(Unbox2(obj, &employee, &is_valid));\r\n\r\npair<bool, int> id;\r\npair<bool, string_view> name;\r\npair<bool, bool> admin;\r\nRETURN_NOT_OK(Unbox3(obj, 0, &id));\r\nRETURN_NOT_OK(Unbox3(obj, 1, &name));\r\nRETURN_NOT_OK(Unbox3(obj, 3, &admin));\r\n\r\n// more options available beyond c++11\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T17:03:44.191+0000",
                    "updated": "2018-12-13T15:41:13.031+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16719262",
                    "id": "16719262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That's an interesting approach. \r\n\r\nIn any case, I don't think there's a need to do anything very complicated right now. The basic requirements are:\r\n\r\n* A base type {{Scalar}} that exposes its type information, and nullness\r\n* A public API for accessing values in concrete subclasses, including nested types\r\n\r\nSo, a scalar analogue to the {{Array}} classes. Let's start with making sure we can do things like {{Add(Array, Scalar)}}. The implementation details of the data structure would best be encapsulated behind a public API for the time being. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-12T17:53:59.466+0000",
                    "updated": "2018-12-12T17:53:59.466+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16748454",
                    "id": "16748454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Is this covered by Datum and the implementation at [https://github.com/apache/arrow/pull/3407/files]\u00a0?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-01-22T07:33:36.573+0000",
                    "updated": "2019-01-22T07:33:36.573+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16748499",
                    "id": "16748499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "The implementation in https://github.com/apache/arrow/pull/3407/files looks like a good start. I think we can resolve this issue when the PR is merged. We probably need to add more scalar types in future, e.g. for strings but the implementation in the PR looks sufficient at the moment.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-01-22T08:46:07.173+0000",
                    "updated": "2019-01-22T08:46:07.173+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12947906/comment/16767307",
                    "id": "16767307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3604\n[https://github.com/apache/arrow/pull/3604]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-13T15:26:17.602+0000",
                    "updated": "2019-02-13T15:26:17.602+0000"
                }
            ],
            "maxResults": 10,
            "total": 10,
            "startAt": 0
        },
        "customfield_12311820": "0|i2ubef:",
        "customfield_12314139": null
    }
}