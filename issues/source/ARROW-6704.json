{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13258991",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991",
    "key": "ARROW-6704",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6704/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/326787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623\n \n \n   https://issues.apache.org/jira/browse/ARROW-6704\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T08:47:13.173+0000",
                    "updated": "2019-10-11T08:47:13.173+0000",
                    "started": "2019-10-11T08:47:13.173+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326787",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/326790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r333889186\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n+                                          input.length);\n+        for (int64_t i = 0; i < input.length; i++) {\n+          out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+          if (bit_reader.IsSet() && (out_data[i] / factor != in_data[i])) {\n \n Review comment:\n   I am dividing again to see if this is then equal the approach used in for truncation when the original divides). But in principle, we could also define minimum and maximum values for each resolution, and compare with those two (that might be more performant?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T08:50:00.995+0000",
                    "updated": "2019-10-11T08:50:00.995+0000",
                    "started": "2019-10-11T08:50:00.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326790",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/326791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r333889647\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n \n Review comment:\n   I reused `allow_time_truncate` for now, but it's not exactly the same, so should I add a `CastOptions.allow_time_overflow` or `allow_time_outofbounds` ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T08:50:01.038+0000",
                    "updated": "2019-10-11T08:50:01.038+0000",
                    "started": "2019-10-11T08:50:01.038+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326791",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/326804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#issuecomment-540981695\n \n \n   https://issues.apache.org/jira/browse/ARROW-6704\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-11T09:03:23.588+0000",
                    "updated": "2019-10-11T09:03:23.588+0000",
                    "started": "2019-10-11T09:03:23.588+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "326804",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/327887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r334529407\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   Using `ArrayDataVisitor` would allow abstracting this away.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:18:07.082+0000",
                    "updated": "2019-10-14T15:18:07.082+0000",
                    "started": "2019-10-14T15:18:07.082+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327887",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/327888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r334529111\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n \n Review comment:\n   Hmm... unless we want to micro-optimize performance, I'm not sure why we would ever accept casting out-of-bounds. @xhochy @wesm what do you think about this?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:18:07.086+0000",
                    "updated": "2019-10-14T15:18:07.086+0000",
                    "started": "2019-10-14T15:18:07.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327888",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/327889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r334534018\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n+                                          input.length);\n+        for (int64_t i = 0; i < input.length; i++) {\n+          out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+          if (bit_reader.IsSet() && (out_data[i] / factor != in_data[i])) {\n \n Review comment:\n   I think it would be much more performant than doing an integer division on the critical path, yes. You can just compute the min/max dynamically at function start, I think.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:18:07.139+0000",
                    "updated": "2019-10-14T15:18:07.139+0000",
                    "started": "2019-10-14T15:18:07.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327889",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/327926",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r333889186\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n+                                          input.length);\n+        for (int64_t i = 0; i < input.length; i++) {\n+          out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+          if (bit_reader.IsSet() && (out_data[i] / factor != in_data[i])) {\n \n Review comment:\n   I am dividing again to see if this is then equal (the approach used in the case for truncation when the original divides). But in principle, we could also define minimum and maximum values for each resolution, and compare with those two (that might be more performant?)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-14T15:55:54.071+0000",
                    "updated": "2019-10-14T15:55:54.071+0000",
                    "started": "2019-10-14T15:55:54.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "327926",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/329310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r335636921\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n+                                          input.length);\n+        for (int64_t i = 0; i < input.length; i++) {\n+          out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+          if (bit_reader.IsSet() && (out_data[i] / factor != in_data[i])) {\n \n Review comment:\n   Updated to compute min/max dynamically\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-16T18:20:59.259+0000",
                    "updated": "2019-10-16T18:20:59.259+0000",
                    "started": "2019-10-16T18:20:59.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "329310",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/329334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on issue #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#issuecomment-542840365\n \n \n   > Hmm... unless we want to micro-optimize performance, I'm not sure why we would ever accept casting out-of-bounds. @xhochy @wesm what do you think about this?\r\n   \r\n   We allow integer overflow as well with a non-safe cast, so that seems similar? \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-16T18:48:54.275+0000",
                    "updated": "2019-10-16T18:48:54.275+0000",
                    "started": "2019-10-16T18:48:54.273+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "329334",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/329336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#issuecomment-542841165\n \n \n   > We allow integer overflow as well with a non-safe cast, so that seems similar?\r\n   \r\n   I see. Then it sounds purely like a performance optimization, so keeping a single option sounds fine.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-16T18:50:54.789+0000",
                    "updated": "2019-10-16T18:50:54.789+0000",
                    "started": "2019-10-16T18:50:54.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "329336",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/329512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#issuecomment-542951295\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=h1) Report\n   > Merging [#5623](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/3572af2a7b25dde50647d7aa4b081da9a6c4f665?src=pr&el=desc) will **increase** coverage by `0.55%`.\n   > The diff coverage is `75%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5623/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5623      +/-   ##\n   ==========================================\n   + Coverage   88.94%   89.49%   +0.55%     \n   ==========================================\n     Files         989      797     -192     \n     Lines      134421   118933   -15488     \n     Branches     1501        0    -1501     \n   ==========================================\n   - Hits       119555   106437   -13118     \n   + Misses      14501    12496    -2005     \n   + Partials      365        0     -365\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/kernels/cast\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdF90ZXN0LmNj) | `99.63% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `95.63% <68.42%> (-1.08%)` | :arrow_down: |\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `70.75% <0%> (-0.95%)` | :arrow_down: |\n   | [go/arrow/ipc/writer.go](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL3dyaXRlci5nbw==) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/ipc/file\\_reader.go](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaXBjL2ZpbGVfcmVhZGVyLmdv) | | |\n   | [js/src/builder/index.ts](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-anMvc3JjL2J1aWxkZXIvaW5kZXgudHM=) | | |\n   | [js/src/enum.ts](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-anMvc3JjL2VudW0udHM=) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | ... and [186 more](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=footer). Last update [3572af2...b9f248b](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-17T01:00:22.065+0000",
                    "updated": "2019-10-17T01:00:22.065+0000",
                    "started": "2019-10-17T01:00:22.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "329512",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/330748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r336662516\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   @pitrou I tries doing this, for now without taking into the options or templating, with:\r\n   \r\n   ```cpp\r\n   // <TimestampType, TimestampType> and <DurationType, DurationType>\r\n   template <typename O, typename I>\r\n   struct CastFunctor<O, I, ..enable..>\r\n     void operator()(FunctionContext* ctx, const CastOptions& options,\r\n                     const ArrayData& input, ArrayData* output) {\r\n       // If units are the same, zero copy, otherwise convert\r\n       const auto& in_type = checked_cast<const I&>(*input.type);\r\n       const auto& out_type = checked_cast<const O&>(*output->type);\r\n   \r\n       if (in_type.unit() == out_type.unit()) {\r\n         ZeroCopyData(input, output);\r\n         return;\r\n       }\r\n   \r\n       // std::pair<bool, int64_t> conversion =\r\n       //     kTimeConversionTable[static_cast<int>(in_type.unit())]\r\n       //                         [static_cast<int>(out_type.unit())];\r\n   \r\n       in_data_ = input.GetValues<int64_t>(1);\r\n       out_data_ = output->GetMutableValues<int64_t>(1);\r\n   \r\n       ArrayDataVisitor<I> visitor;\r\n       Status st = visitor.Visit(input, this);\r\n       if (!st.ok()) {\r\n         ctx->SetStatus(st);\r\n         return;\r\n       }\r\n       // ShiftTime<int64_t, int64_t>(ctx, options, conversion.first, conversion.second, input,\r\n       //                             output);\r\n     }\r\n   \r\n     Status VisitNull() {\r\n       idx_ += 1;\r\n       return Status::OK();\r\n     }\r\n   \r\n     Status VisitValue(int64_t value) {\r\n       out_data_[idx_] = static_cast<int64_t>(value * 1000);\r\n       idx_ += 1;\r\n       return Status::OK();\r\n     }\r\n   \r\n     int64_t idx_ = 0;\r\n     const int64_t* in_data_;\r\n     int64_t* out_data_;\r\n   };\r\n   ```\r\n   \r\n   Is keeping track of an index like that a good way to write to `out_data_` ? (the `VisitValue` is not aware of an index I think) Another option could be to memcpy to it and shift it each time?\r\n   \r\n   But from a quick timing, this seems to be quite a bit slower as the specialized loops in `ShiftTime` (for an array of 100k elements it went from 240 us to 1.6 ms) That's not expected? Or is there something I am doing wrong in the above implementation?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-18T20:23:56.347+0000",
                    "updated": "2019-10-18T20:23:56.347+0000",
                    "started": "2019-10-18T20:23:56.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "330748",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r337620570\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   Writing `out_data_` looks fine to me.\r\n   \r\n   As for `ShiftTime`, it's optimal as it is now: it can operate without checking for null bits, which is faster. The case where you have to check for null bits (because you shouldn't try to detect an overflow on a null value) is where `ArrayDataVisitor` is recommended.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-22T16:25:22.273+0000",
                    "updated": "2019-10-22T16:25:22.273+0000",
                    "started": "2019-10-22T16:25:22.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332068",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r337620570\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   Writing `out_data_` looks fine to me.\r\n   \r\n   As for the pure-multiply path in `ShiftTime`, it's optimal as it is now: it can operate without checking for null bits, which is faster. The case where you have to check for null bits (because you shouldn't try to detect an overflow on a null value) is where `ArrayDataVisitor` is recommended.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-22T16:25:42.519+0000",
                    "updated": "2019-10-22T16:25:42.519+0000",
                    "started": "2019-10-22T16:25:42.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332069",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r337887364\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   > The case where you have to check for null bits (because you shouldn't try to detect an overflow on a null value) is where ArrayDataVisitor is recommended.\r\n   \r\n   Also for that case, the current code is quite a bit more efficient (when a null is introduced, casting goes from ca 300us to 640us using the existing `ShiftTime` implementation, while the ArrayDataVisitor (as implemented above) gives ca 1.6ms)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-23T07:30:34.979+0000",
                    "updated": "2019-10-23T07:30:34.979+0000",
                    "started": "2019-10-23T07:30:34.978+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332478",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332518",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r337947807\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   Interesting. Are you sure you measured in release mode?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-23T09:41:31.701+0000",
                    "updated": "2019-10-23T09:41:31.701+0000",
                    "started": "2019-10-23T09:41:31.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332518",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332528",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#discussion_r337960251\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/cast.cc\n ##########\n @@ -427,8 +427,38 @@ void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_m\n       out_data[i] = static_cast<out_type>(in_data[i]);\n     }\n   } else if (is_multiply) {\n-    for (int64_t i = 0; i < input.length; i++) {\n-      out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+    if (options.allow_time_truncate) {\n+      for (int64_t i = 0; i < input.length; i++) {\n+        out_data[i] = static_cast<out_type>(in_data[i] * factor);\n+      }\n+    } else {\n+#define RAISE_OVERFLOW_CAST(VAL)                                                  \\\n+  ctx->SetStatus(Status::Invalid(\"Casting from \", input.type->ToString(), \" to \", \\\n+                                 output->type->ToString(), \" would result in \",   \\\n+                                 \"out of bounds timestamp: \", VAL));\n+\n+      if (input.null_count != 0) {\n+        internal::BitmapReader bit_reader(input.buffers[0]->data(), input.offset,\n \n Review comment:\n   Ah, that's a good question. I did not, sorry.\r\n   \r\n   And with release mode, everything is much faster, and using the ArrayDataVisitor does not give any slowdown (also not for the non-null case it seems). \r\n   OK, will look a bit further into integrating all the options with the code snippet above.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-23T10:08:22.812+0000",
                    "updated": "2019-10-23T10:08:22.812+0000",
                    "started": "2019-10-23T10:08:22.811+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332528",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#issuecomment-542951295\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=h1) Report\n   > Merging [#5623](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/c02a572dda68268e972f67d4b22327264e8f884c?src=pr&el=desc) will **increase** coverage by `0.55%`.\n   > The diff coverage is `90.69%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5623/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5623      +/-   ##\n   ==========================================\n   + Coverage   88.97%   89.52%   +0.55%     \n   ==========================================\n     Files         990      798     -192     \n     Lines      134876   119406   -15470     \n     Branches     1501        0    -1501     \n   ==========================================\n   - Hits       120010   106902   -13108     \n   + Misses      14501    12504    -1997     \n   + Partials      365        0     -365\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_pandas.py](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYW5kYXMucHk=) | `94.66% <100%> (+0.02%)` | :arrow_up: |\n   | [python/pyarrow/array.pxi](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvYXJyYXkucHhp) | `80.66% <100%> (+0.11%)` | :arrow_up: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `86.32% <100%> (+0.08%)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdF90ZXN0LmNj) | `99.64% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.h](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5o) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `96.03% <78.94%> (-0.69%)` | :arrow_down: |\n   | [cpp/src/arrow/json/converter.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9qc29uL2NvbnZlcnRlci5jYw==) | `90.05% <0%> (-1.76%)` | :arrow_down: |\n   | [cpp/src/arrow/json/chunked\\_builder.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9qc29uL2NodW5rZWRfYnVpbGRlci5jYw==) | `80% <0%> (-1.67%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread\\_pool\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZF9wb29sX3Rlc3QuY2M=) | `97.66% <0%> (-0.94%)` | :arrow_down: |\n   | [cpp/src/arrow/python/arrow\\_to\\_pandas.cc](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9weXRob24vYXJyb3dfdG9fcGFuZGFzLmNj) | `89.97% <0%> (-0.27%)` | :arrow_down: |\n   | ... and [193 more](https://codecov.io/gh/apache/arrow/pull/5623/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=footer). Last update [c02a572...d854244](https://codecov.io/gh/apache/arrow/pull/5623?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-23T11:13:55.648+0000",
                    "updated": "2019-10-23T11:13:55.648+0000",
                    "started": "2019-10-23T11:13:55.648+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332534",
                    "issueId": "13258991"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/worklog/332571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on issue #5623: ARROW-6704: [C++] Check for out of bounds timestamp in unsafe cast\nURL: https://github.com/apache/arrow/pull/5623#issuecomment-545441186\n \n \n   @pitrou I would propose to keep the ArrayDataVisitor for a separate issue/PR (opened https://issues.apache.org/jira/browse/ARROW-6974 for this). I tried a bit further (the \"unsafe\" case is still slower), but it will get a bigger diff largely unrelated to the addition of the out of bounds checking, so that might be easier to discuss in a separate PR.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-23T13:22:51.010+0000",
                    "updated": "2019-10-23T13:22:51.010+0000",
                    "started": "2019-10-23T13:22:51.010+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "332571",
                    "issueId": "13258991"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@53672e56[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e46c866[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b3bb4df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@73365626[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@314ca192[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1d15f51[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@276a9ef8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@66ac6b55[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32b80623[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3998ecf2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4af63867[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4f8504af[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 24 13:19:01 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-24T13:19:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6704/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-26T08:08:47.000+0000",
        "updated": "2019-10-24T13:19:01.000+0000",
        "timeoriginalestimate": null,
        "description": "When casting eg {{timestamp('s')}} to {{timestamp('ns')}}, we do not check for out of bounds timestamps, giving \"garbage\" timestamps in the result:\r\n\r\n{code}\r\nIn [74]: a_np = np.array([\"2012-01-01\", \"2412-01-01\"], dtype=\"datetime64[s]\")                                                                                                                                      \r\n\r\nIn [75]: arr = pa.array(a_np)                                                                                                                                                                                      \r\n\r\nIn [76]: arr                                                                                                                                                                                                       \r\nOut[76]: \r\n<pyarrow.lib.TimestampArray object at 0x7f3d1f07cb88>\r\n[\r\n  2012-01-01 00:00:00,\r\n  2412-01-01 00:00:00\r\n]\r\n\r\nIn [77]: arr.cast(pa.timestamp('ns'))                                                                                                                                                                              \r\nOut[77]: \r\n<pyarrow.lib.TimestampArray object at 0x7f3d1f07cfa8>\r\n[\r\n  2012-01-01 00:00:00.000000000,\r\n  1827-06-13 00:25:26.290448384\r\n]\r\n{code}\r\n\r\nNow, this is the same behaviour as numpy, so not sure we should do this. However, since we have a {{safe=True/False}}, I would expect that for {{safe=True}} we check this and for {{safe=False}} we do not check this.  \r\n(numpy has a similiar {{casting='safe'}} but also does not raise an error in that case).\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Cast from timestamp to higher resolution does not check out of bounds timestamps",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/comment/16953251",
                    "id": "16953251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "[~czxrrr] there is already an open PR ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2019-10-16T22:54:41.245+0000",
                    "updated": "2019-10-16T22:54:41.245+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258991/comment/16958885",
                    "id": "16958885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5623\n[https://github.com/apache/arrow/pull/5623]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-10-24T13:19:01.437+0000",
                    "updated": "2019-10-24T13:19:01.437+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z071e0:",
        "customfield_12314139": null
    }
}