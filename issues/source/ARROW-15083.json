{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13417130",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130",
    "key": "ARROW-15083",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=viniciusroque",
            "name": "viniciusroque",
            "key": "viniciusroque",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Vinicius Souza Roque",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15083/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/718181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#issuecomment-1026165850\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T20:12:27.905+0000",
                    "updated": "2022-01-31T20:12:27.905+0000",
                    "started": "2022-01-31T20:12:27.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718181",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/719156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r797235221\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n\nReview comment:\n       ```suggestion\r\n   // From Decimal to Any Base\r\n   GDV_FORCE_INLINE\r\n   char character_for_digit(gdv_int32 value, gdv_int32 radix) {  \r\n   ```\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {  // From any base to Decimal\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix));\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(gdv_int64 context, gdv_int64 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(gdv_int64 context, gdv_int32 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(gdv_int64 context, const char* in, int32_t in_len,\n+                                  gdv_int32 from_base, gdv_int32 to_base,\n+                                  int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  gdv_int32 valueLen = 64;\n+  char* value = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, valueLen));\n+  char* num = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len));\n+\n+  if (value == nullptr || num == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int fromBs = from_base;\n+  int toBs = to_base;\n+\n+  if (fromBs < std::numeric_limits<char>::min() ||\n+      fromBs > std::numeric_limits<char>::max() ||\n+      abs(toBs) < std::numeric_limits<char>::min() ||\n+      abs(toBs) > std::numeric_limits<char>::max()) {\n+    // Checking if the variable is in range limit\n+    gdv_fn_context_set_error_msg(context,\n+                                 \"The numerical limit of this variable is out range\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n\nReview comment:\n       Also, I think that does not exist these numerical bases: `1` and `0`\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -949,4 +949,65 @@ TEST(TestGdvFnStubs, TestMaskLastN) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestConv) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+  gdv_int32 out_len = 0;\n+\n+  const char* value = conv_utf8_int32_int32(ctx_ptr, \"1000101101\", 10, 2, 10, &out_len);\n+  std::string out_value = std::string(value, out_len);\n+  EXPECT_EQ(out_value, \"557\");\n+\n+  value = conv_utf8_int32_int32(ctx_ptr, \"ffa\", 3, 16, 10, &out_len);\n\nReview comment:\n       Another test is that if the user defines an invalid strings:\r\n   ```\r\n   123-4565\r\n   aaaa@#aa\r\n   ffe sdkl\r\n   ```\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {  // From any base to Decimal\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix));\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(gdv_int64 context, gdv_int64 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(gdv_int64 context, gdv_int32 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(gdv_int64 context, const char* in, int32_t in_len,\n+                                  gdv_int32 from_base, gdv_int32 to_base,\n+                                  int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  gdv_int32 valueLen = 64;\n+  char* value = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, valueLen));\n+  char* num = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len));\n+\n+  if (value == nullptr || num == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int fromBs = from_base;\n+  int toBs = to_base;\n+\n+  if (fromBs < std::numeric_limits<char>::min() ||\n+      fromBs > std::numeric_limits<char>::max() ||\n+      abs(toBs) < std::numeric_limits<char>::min() ||\n+      abs(toBs) > std::numeric_limits<char>::max()) {\n+    // Checking if the variable is in range limit\n+    gdv_fn_context_set_error_msg(context,\n+                                 \"The numerical limit of this variable is out range\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n\nReview comment:\n       As the possible digits that we can use to define a number are `0-9`, `a-z` and `A-Z`, I think that the limit of the base is much lower than the integer limit\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {  // From any base to Decimal\n\nReview comment:\n       ditto\r\n   \n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n\nReview comment:\n       Place the comments above the function that you are describing, it is better to read than in the side\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -949,4 +949,65 @@ TEST(TestGdvFnStubs, TestMaskLastN) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestConv) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+  gdv_int32 out_len = 0;\n+\n+  const char* value = conv_utf8_int32_int32(ctx_ptr, \"1000101101\", 10, 2, 10, &out_len);\n\nReview comment:\n       If the user defines a number with many zeros at the left of the string, the function will work fine?\r\n   \r\n   Example: \"000000000001\" in binary to decimal -> \"1\"\r\n   Other example: \"-000000001\" in binary to decimal -> \"-1\"\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T03:21:37.151+0000",
                    "updated": "2022-02-02T03:21:37.151+0000",
                    "started": "2022-02-02T03:21:37.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719156",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/719396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r797650455\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n\nReview comment:\n       Done\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,202 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {  // From Decimal to Any Base\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {  // From any base to Decimal\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T14:17:42.870+0000",
                    "updated": "2022-02-02T14:17:42.870+0000",
                    "started": "2022-02-02T14:17:42.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719396",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/719398",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r797652849\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -949,4 +949,65 @@ TEST(TestGdvFnStubs, TestMaskLastN) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestConv) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+  gdv_int32 out_len = 0;\n+\n+  const char* value = conv_utf8_int32_int32(ctx_ptr, \"1000101101\", 10, 2, 10, &out_len);\n\nReview comment:\n       Tested, it is ok, I added new tests for this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T14:20:07.723+0000",
                    "updated": "2022-02-02T14:20:07.723+0000",
                    "started": "2022-02-02T14:20:07.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719398",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/719399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r797653598\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs_test.cc\n##########\n@@ -949,4 +949,65 @@ TEST(TestGdvFnStubs, TestMaskLastN) {\n   EXPECT_EQ(expected, std::string(result, out_len));\n }\n \n+TEST(TestGdvFnStubs, TestConv) {\n+  gandiva::ExecutionContext ctx;\n+\n+  int64_t ctx_ptr = reinterpret_cast<int64_t>(&ctx);\n+  gdv_int32 out_len = 0;\n+\n+  const char* value = conv_utf8_int32_int32(ctx_ptr, \"1000101101\", 10, 2, 10, &out_len);\n+  std::string out_value = std::string(value, out_len);\n+  EXPECT_EQ(out_value, \"557\");\n+\n+  value = conv_utf8_int32_int32(ctx_ptr, \"ffa\", 3, 16, 10, &out_len);\n\nReview comment:\n       Haved some problems with this entryes, but I did modifies and add new tests for this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T14:20:51.896+0000",
                    "updated": "2022-02-02T14:20:51.896+0000",
                    "started": "2022-02-02T14:20:51.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719399",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/719490",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "anthonylouisbsb commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r797804468\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,215 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n\nReview comment:\n       Use `int64_t` instead `gdv_int64`to keep the code easier to read \n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,215 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+int32_t char2byte(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix));\n+    if (value[i] == -1) {\n+      return -1;\n+    }\n+  }\n+  return 1;\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(gdv_int64 context, gdv_int64 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(gdv_int64 context, gdv_int32 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n\nReview comment:\n       Add an explicit cast to `int32_t` to avoid the errors in AppVeyor build\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,215 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+int32_t char2byte(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix));\n+    if (value[i] == -1) {\n+      return -1;\n+    }\n+  }\n+  return 1;\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(gdv_int64 context, gdv_int64 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n\nReview comment:\n       Add an explicit cast to `int32_t` to avoid the errors in AppVeyor build\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T16:41:00.876+0000",
                    "updated": "2022-02-02T16:41:00.876+0000",
                    "started": "2022-02-02T16:41:00.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719490",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/720004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r798431072\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,215 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T10:40:10.996+0000",
                    "updated": "2022-02-03T10:40:10.996+0000",
                    "started": "2022-02-03T10:40:10.996+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720004",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/720006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r798431693\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,215 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+int32_t char2byte(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix));\n+    if (value[i] == -1) {\n+      return -1;\n+    }\n+  }\n+  return 1;\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(gdv_int64 context, gdv_int64 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n\nReview comment:\n       Right, I added. Done.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T10:40:54.331+0000",
                    "updated": "2022-02-03T10:40:54.331+0000",
                    "started": "2022-02-03T10:40:54.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720006",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/720007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on a change in pull request #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r798431975\n\n\n\n##########\nFile path: cpp/src/gandiva/gdv_function_stubs.cc\n##########\n@@ -683,6 +683,215 @@ const char* gdv_fn_upper_utf8(int64_t context, const char* data, int32_t data_le\n   return out;\n }\n \n+GDV_FORCE_INLINE\n+uint64_t unsigned_long_div(gdv_int64 x, gdv_int32 m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+gdv_int64 encode(gdv_int32 radix, gdv_int32 fromPos, const char* value,\n+                 gdv_int32 valueLen) {\n+  uint64_t val = 0;\n+  uint64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(gdv_int64 val, gdv_int32 radix, char* value, gdv_int32 valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    gdv_int64 q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(gdv_int32 value, gdv_int32 radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+gdv_int64 character_digit(char value, gdv_int32 radix) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+int32_t char2byte(gdv_int32 radix, gdv_int32 fromPos, char* value, gdv_int32 valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix));\n+    if (value[i] == -1) {\n+      return -1;\n+    }\n+  }\n+  return 1;\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(gdv_int64 context, gdv_int64 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(gdv_int64 context, gdv_int32 in, gdv_int32 from_base,\n+                                   gdv_int32 to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  gdv_int32 in_utf8_len = to_utf8.length();\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T10:41:16.821+0000",
                    "updated": "2022-02-03T10:41:16.821+0000",
                    "started": "2022-02-03T10:41:16.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720007",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/760737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque closed pull request #12306: ARROW-15083: [C++][Gandiva] Implement Conv Function\nURL: https://github.com/apache/arrow/pull/12306\n\n\n",
                    "created": "2022-04-22T11:05:03.926+0000",
                    "updated": "2022-04-22T11:05:03.926+0000",
                    "started": "2022-04-22T11:05:03.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "760737",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/768534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ayushpranjal-dremio commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r869330364\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n\nReview Comment:\n   Add a comment on what this function is supposed to do. Also add unit tests for helper functions.\n\n\n\n",
                    "created": "2022-05-10T14:45:09.077+0000",
                    "updated": "2022-05-10T14:45:09.077+0000",
                    "started": "2022-05-10T14:45:09.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768534",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/768535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ayushpranjal-dremio commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r869330723\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n\nReview Comment:\n   Add a comment on what this function is supposed to do. Also add unit tests for helper functions.\r\n   \r\n   \n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n\nReview Comment:\n   Add a comment on what this function is supposed to do. Also add unit tests for helper functions.\r\n   \r\n   \n\n\n\n",
                    "created": "2022-05-10T14:45:24.099+0000",
                    "updated": "2022-05-10T14:45:24.099+0000",
                    "started": "2022-05-10T14:45:24.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768535",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/768536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ayushpranjal-dremio commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r869332563\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n\nReview Comment:\n   Add a comment on what this function is supposed to do. Also add unit tests for helper functions.\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n\nReview Comment:\n   Add a comment on what this function is supposed to do. Also add unit tests for helper functions.\n\n\n\n",
                    "created": "2022-05-10T14:46:59.299+0000",
                    "updated": "2022-05-10T14:46:59.299+0000",
                    "started": "2022-05-10T14:46:59.299+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768536",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/768537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ayushpranjal-dremio commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r869333203\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix, *valid_entry));\n+    if (*valid_entry != 1) {\n+      break;\n+    }\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(int64_t context, int64_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(int64_t context, int32_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(int64_t context, const char* in, int32_t in_len,\n+                                  int32_t from_base, int32_t to_base, int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n\nReview Comment:\n   shouldn't this be `*out_len = 0`?\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix, *valid_entry));\n+    if (*valid_entry != 1) {\n+      break;\n+    }\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(int64_t context, int64_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(int64_t context, int32_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(int64_t context, const char* in, int32_t in_len,\n+                                  int32_t from_base, int32_t to_base, int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int32_t valueLen = 64;\n+  char* value = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, valueLen));\n+  char* num = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len));\n+\n+  if (value == nullptr || num == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    out_len = 0;\n+    return \"\";\n\nReview Comment:\n   shouldn't this be `*out_len = 0`?\n\n\n\n",
                    "created": "2022-05-10T14:47:29.369+0000",
                    "updated": "2022-05-10T14:47:29.369+0000",
                    "started": "2022-05-10T14:47:29.369+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768537",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/768539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ayushpranjal-dremio commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r869334836\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix, *valid_entry));\n+    if (*valid_entry != 1) {\n+      break;\n+    }\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(int64_t context, int64_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(int64_t context, int32_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(int64_t context, const char* in, int32_t in_len,\n+                                  int32_t from_base, int32_t to_base, int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int32_t valueLen = 64;\n+  char* value = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, valueLen));\n+  char* num = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len));\n+\n+  if (value == nullptr || num == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int fromBs = from_base;\n+  int toBs = to_base;\n+\n+  if (fromBs < -36 || fromBs > 36 || fromBs == 0 || fromBs == 1 || abs(toBs) < -36 ||\n+      abs(toBs) > 36 || abs(toBs) == 0 || abs(toBs) == 1) {\n+    // Checking if the variable is in range limit\n+    gdv_fn_context_set_error_msg(context,\n+                                 \"The numerical limit of this variable is out range\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n\nReview Comment:\n   Why is this check required? Also, remove redundant conditionals like abs(toBs) < -36.\n\n\n\n",
                    "created": "2022-05-10T14:48:54.447+0000",
                    "updated": "2022-05-10T14:48:54.447+0000",
                    "started": "2022-05-10T14:48:54.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768539",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/770870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r873832960\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix, *valid_entry));\n+    if (*valid_entry != 1) {\n+      break;\n+    }\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(int64_t context, int64_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(int64_t context, int32_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(int64_t context, const char* in, int32_t in_len,\n+                                  int32_t from_base, int32_t to_base, int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int32_t valueLen = 64;\n+  char* value = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, valueLen));\n+  char* num = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len));\n+\n+  if (value == nullptr || num == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int fromBs = from_base;\n+  int toBs = to_base;\n+\n+  if (fromBs < -36 || fromBs > 36 || fromBs == 0 || fromBs == 1 || abs(toBs) < -36 ||\n+      abs(toBs) > 36 || abs(toBs) == 0 || abs(toBs) == 1) {\n+    // Checking if the variable is in range limit\n+    gdv_fn_context_set_error_msg(context,\n+                                 \"The numerical limit of this variable is out range\");\n+    *out_len = 0;\n+    return \"\";\n+  }\n\nReview Comment:\n   This is not redundant, using the value numeric_limits<int>::min() like toBs, this condition (**abs(toBs) < -36**) is true\r\n   I believe we will need to keep this validation\r\n   \r\n   this check is necessary as we will only handle base inputs and outputs between -36 and +36 with the exception of 1 and 0, as specified in Hive function\n\n\n\n",
                    "created": "2022-05-16T14:58:13.359+0000",
                    "updated": "2022-05-16T14:58:13.359+0000",
                    "started": "2022-05-16T14:58:13.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "770870",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/770871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r873833733\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix, *valid_entry));\n+    if (*valid_entry != 1) {\n+      break;\n+    }\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(int64_t context, int64_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(int64_t context, int32_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(int64_t context, const char* in, int32_t in_len,\n+                                  int32_t from_base, int32_t to_base, int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n+  }\n+\n+  int32_t valueLen = 64;\n+  char* value = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, valueLen));\n+  char* num = reinterpret_cast<char*>(gdv_fn_context_arena_malloc(context, in_len));\n+\n+  if (value == nullptr || num == nullptr) {\n+    gdv_fn_context_set_error_msg(context, \"Could not allocate memory for output string\");\n+    out_len = 0;\n+    return \"\";\n\nReview Comment:\n   Yes, I changed here\n\n\n\n",
                    "created": "2022-05-16T14:58:49.700+0000",
                    "updated": "2022-05-16T14:58:49.700+0000",
                    "started": "2022-05-16T14:58:49.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "770871",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/770872",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r873833930\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_digit(value[i], radix, *valid_entry));\n+    if (*valid_entry != 1) {\n+      break;\n+    }\n+  }\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int64_int32_int32(int64_t context, int64_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_int32_int32_int32(int64_t context, int32_t in, int32_t from_base,\n+                                   int32_t to_base, int32_t* out_len) {\n+  std::string to_utf8 = std::to_string(in);\n+  char* in_utf8 = &to_utf8[0];\n+  auto in_utf8_len = static_cast<int32_t>(to_utf8.length());\n+\n+  return conv_utf8_int32_int32(context, in_utf8, in_utf8_len, from_base, to_base,\n+                               out_len);\n+}\n+\n+GANDIVA_EXPORT\n+const char* conv_utf8_int32_int32(int64_t context, const char* in, int32_t in_len,\n+                                  int32_t from_base, int32_t to_base, int32_t* out_len) {\n+  if (in_len <= 0) {\n+    out_len = 0;\n+    return \"\";\n\nReview Comment:\n   Yes, changed.\n\n\n\n",
                    "created": "2022-05-16T14:59:03.390+0000",
                    "updated": "2022-05-16T14:59:03.390+0000",
                    "started": "2022-05-16T14:59:03.389+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "770872",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/770978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r874048206\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n\nReview Comment:\n   For create tests I will need create the registry on header for all functions, is it a good idea if that's functions is only support for Conv?\n\n\n\n",
                    "created": "2022-05-16T18:42:10.189+0000",
                    "updated": "2022-05-16T18:42:10.189+0000",
                    "started": "2022-05-16T18:42:10.189+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "770978",
                    "issueId": "13417130"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417130/worklog/770980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ViniciusSouzaRoque commented on code in PR #12306:\nURL: https://github.com/apache/arrow/pull/12306#discussion_r874048857\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n\nReview Comment:\n   Same question as above\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n\nReview Comment:\n   Same question as above\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n\nReview Comment:\n   Same question as above\n\n\n\n##########\ncpp/src/gandiva/gdv_function_stubs.cc:\n##########\n@@ -296,6 +296,215 @@ CAST_NUMERIC_FROM_VARBINARY(double, arrow::DoubleType, FLOAT8)\n #undef GDV_FN_CAST_VARCHAR_INTEGER\n #undef GDV_FN_CAST_VARCHAR_REAL\n \n+GDV_FORCE_INLINE\n+int64_t unsigned_long_div(int64_t x, int32_t m) {\n+  if (x >= 0) {\n+    return x / m;\n+  }\n+  return x / m + 2 * (LONG_MAX / m) + 2 / m + (x % m + 2 * (LONG_MAX % m) + 2 % m) / m;\n+}\n+\n+GDV_FORCE_INLINE\n+int64_t encode(int32_t radix, int32_t fromPos, const char* value, int32_t valueLen) {\n+  int64_t val = 0;\n+  int64_t bound = unsigned_long_div(-1 - radix, radix);\n+\n+  for (int i = fromPos; i < valueLen && value[i] >= 0; i++) {\n+    if (val >= bound) {\n+      if (unsigned_long_div(-1 - value[i], radix) < val) {\n+        return -1;\n+      }\n+    }\n+    val = val * radix + value[i];\n+  }\n+  return val;\n+}\n+\n+GDV_FORCE_INLINE\n+void decode(uint64_t val, int32_t radix, char* value, int32_t valueLen) {\n+  for (int i = 0; i < valueLen; i++) {\n+    value[i] = static_cast<char>(0);\n+  }\n+\n+  for (int i = valueLen - 1; val != 0; i--) {\n+    uint64_t q = unsigned_long_div(val, radix);\n+    value[i] = static_cast<char>((val - q * radix));\n+    val = q;\n+  }\n+}\n+\n+// From Decimal to Any Base\n+GDV_FORCE_INLINE\n+char character_for_digit(int32_t value, int32_t radix) {\n+  // This function is similar to Character.forDigit in Java\n+  int digit = 0;\n+  digit = value % radix;\n+  if (digit < 10) {\n+    return static_cast<char>(digit + '0');\n+  } else {\n+    return static_cast<char>(digit + 'A' - 10);\n+  }\n+}\n+\n+// From any base to Decimal\n+GDV_FORCE_INLINE\n+int64_t character_digit(char value, int32_t radix, int32_t& valid_entry) {\n+  // This function is similar to Character.digit in Java\n+  if ((radix <= 0) || (radix > 36)) {\n+    valid_entry = -1;\n+    return -1;\n+  }\n+\n+  if (radix <= 10) {\n+    if (value >= '0' && value < '0' + radix) {\n+      return value - '0';\n+    } else {\n+      valid_entry = -1;\n+      return -1;\n+    }\n+  } else if (value >= '0' && value <= '9') {\n+    return value - '0';\n+  } else if (value >= 'a' && value < 'a' + radix - 10) {\n+    return value - 'a' + 10;\n+  } else if (value >= 'A' && value < 'A' + radix - 10) {\n+    return value - 'A' + 10;\n+  }\n+  valid_entry = -1;\n+  return -1;\n+}\n+\n+GDV_FORCE_INLINE\n+void byte2char(int32_t radix, int32_t fromPos, char* value, int32_t valueLen) {\n+  for (int i = fromPos; i < valueLen; i++) {\n+    value[i] = static_cast<char>(character_for_digit(value[i], radix));\n+  }\n+}\n+\n+GDV_FORCE_INLINE\n+void char2byte(int32_t radix, int32_t fromPos, char* value, int32_t valueLen,\n+               int32_t* valid_entry) {\n\nReview Comment:\n   Same question as above\n\n\n\n",
                    "created": "2022-05-16T18:43:03.352+0000",
                    "updated": "2022-05-16T18:43:03.352+0000",
                    "started": "2022-05-16T18:43:03.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "770980",
                    "issueId": "13417130"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2ee55b53[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bd87b04[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19a0b9e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@61d8e18e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@166aea38[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5180b3c5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4df35781[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6b810b20[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a7b1742[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7eb18753[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29a9985b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a124e45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "2021-12-13 20:11:56.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15083/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-12-13T20:11:56.000+0000",
        "updated": "2022-09-09T14:24:55.000+0000",
        "timeoriginalestimate": null,
        "description": "{color:#172b4d}Converts a number from a given base to another{color}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement Conv Function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xmzs:",
        "customfield_12314139": null
    }
}