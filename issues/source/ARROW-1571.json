{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103433",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433",
    "key": "ARROW-1571",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "1.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12578117",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12578117",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13278398",
                    "key": "ARROW-7526",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13278398",
                    "fields": {
                        "summary": "[C++][Compute]: Optimize small integer sorting",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12570064",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12570064",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13123510",
                    "key": "ARROW-1900",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13123510",
                    "fields": {
                        "summary": "[C++] Add kernel functions for determining value range (maximum and minimum) of integer arrays",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1571/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/393911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495\n \n \n   For integer array with limited value range, counting sort can be much\r\n   more efficient than comparison based algorithms. Detailed analysis in\r\n   Jira link https://issues.apache.org/jira/browse/ARROW-1571\r\n   \r\n   Tested on x86 and Arm64 platforms, Arrow sorting kernel benchnmark\r\n   (values within -100 ~ +100) shows 6x to 15x performance boost.\r\n   \r\n   NOTE: This approach scans for min/max values before choose appropriate\r\n   sorting algorithm. It's a waste of time if we finally find the value\r\n   range is too large to use counting sort. This time is trivial comparing\r\n   with sorting. But I see performance drop when there are many null values\r\n   in the array. Possibly due to unpredictable null value checking impacts\r\n   finding min/max values. In case of 50% null values, up to 6% performance\r\n   drop is observed in sorting big int64 arrays. Will follow up this issue.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T02:11:42.905+0000",
                    "updated": "2020-02-27T02:11:42.905+0000",
                    "started": "2020-02-27T02:11:42.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393911",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/393912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#issuecomment-591743114\n \n \n   https://issues.apache.org/jira/browse/ARROW-1571\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T02:16:46.378+0000",
                    "updated": "2020-02-27T02:16:46.378+0000",
                    "started": "2020-02-27T02:16:46.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393912",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/393913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r384879552\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   Haven't reviewed in detail yet, but this could possibly be improved by using a `BitmapReader` and a single null check\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T02:21:08.940+0000",
                    "updated": "2020-02-27T02:21:08.940+0000",
                    "started": "2020-02-27T02:21:08.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393913",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/393915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r384879871\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n+\n+      // Must be unsigned compare as (max - min) may be negative for signed data.\n+      if (static_cast<uint64_t>(max - min) <= countsort_max_range_) {\n \n Review comment:\n   Will an overflow here trigger UBSAN?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T02:22:25.550+0000",
                    "updated": "2020-02-27T02:22:25.550+0000",
                    "started": "2020-02-27T02:22:25.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393915",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/393921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r384884353\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   I see `BitmapReader` for null checking in minmax kernel. Will study and update the code.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T02:40:17.712+0000",
                    "updated": "2020-02-27T02:40:17.712+0000",
                    "started": "2020-02-27T02:40:17.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393921",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/393949",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r384899882\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n+\n+      // Must be unsigned compare as (max - min) may be negative for signed data.\n+      if (static_cast<uint64_t>(max - min) <= countsort_max_range_) {\n \n Review comment:\n   I did a simple test. It will trigger ubsan if int64 overflows.\r\n   \r\n   ```\r\n   #include <inttypes.h>\r\n   int main(int argc, const char *argv[]) {\r\n     int64_t min = 1LL << 63;\r\n     int64_t max = 0;\r\n   \r\n     uint64_t v = (max - min);  // causes ubsan !\r\n     return v;\r\n   }\r\n   ```\r\n   \r\n   `$ g++ -fsanitize=undefined ubsan.cc -o ubsan`\r\n   `$ ./ubsan`\r\n   `_ubsan.cc:6:21: runtime error: signed integer overflow: 0 - -9223372036854775808 cannot be represented in type 'long int'_`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T03:49:46.273+0000",
                    "updated": "2020-02-27T03:49:46.273+0000",
                    "started": "2020-02-27T03:49:46.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "393949",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385039488\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   For best performance, you actually want to use `ArrayDataVisitor`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T10:30:05.449+0000",
                    "updated": "2020-02-27T10:30:05.449+0000",
                    "started": "2020-02-27T10:30:05.448+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394079",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385040240\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +150,54 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n \n Review comment:\n   \"CountOrCompareSorter\"? Also, please add a comment or docstring explaining what this does.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T10:31:23.538+0000",
                    "updated": "2020-02-27T10:31:23.538+0000",
                    "started": "2020-02-27T10:31:23.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394080",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385040398\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +150,54 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_ && values.length() > values.null_count()) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n+\n+      // For signed int32/64, (max - min) may overflow and trigger UBSAN.\n+      // Cast to largest unsigned type(uint64_t) before substraction.\n+      const uint64_t range = static_cast<uint64_t>(max) - static_cast<uint64_t>(min);\n+      if (range <= countsort_max_range_) {\n+        count_sorter_.SetMinMax(min, max);\n+        count_sorter_.Sort(indices_begin, indices_end, values);\n+        return;\n+      }\n+    }\n+\n+    compare_sorter_.Sort(indices_begin, indices_end, values);\n+  }\n+\n+ private:\n+  CompareSorter<ArrowType, Comparator> compare_sorter_;\n+  CountSorter<ArrowType> count_sorter_;\n+\n+  // Cross point to prefer counting sort than stl::stable_sort(merge sort)\n+  // - array to be sorted is longer than \"count_min_len_\"\n+  // - value range (max-min) is within \"count_max_range_\"\n+  //\n+  // The optimal setting depends heavily on running CPU. Below setting is\n+  // conservative to adapt to various hardware and keep code simple.\n+  // It's possibel to decrease array-len and/or increase value-range to cover\n \n Review comment:\n   Typo: \"possible\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T10:31:39.347+0000",
                    "updated": "2020-02-27T10:31:39.347+0000",
                    "started": "2020-02-27T10:31:39.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394082",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385052163\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n+\n+      // Must be unsigned compare as (max - min) may be negative for signed data.\n+      if (static_cast<uint64_t>(max - min) <= countsort_max_range_) {\n \n Review comment:\n   Done.\r\n   Change \"(uint64)(int1 - int2)\" to \"(uint64)int1 - (uint64)int2\". unsigned int overflow is allowed and not checked by ubsan by default.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-27T10:53:10.465+0000",
                    "updated": "2020-02-27T10:53:10.465+0000",
                    "started": "2020-02-27T10:53:10.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394092",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385531978\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   @pitrou, @wesm,\r\n   I benchmarked BitmapReader and ArrayDataVisitor.\r\n   Comparing with this patch, I see big performance drop with ArrayDataVisitor. No obvious difference observed with BitmapReader. Some bechmark results are pasted below.\r\n   \r\n   - ArrayDataVisitor overhead is big for counting sort\r\n   ```\r\n   case: int64 within -100 ~ 100, 32K size, null = 1%\r\n   this patch: 525.675M/s\r\n   BitmapReader: 525.009M/s\r\n   ArrayDataVisitor: 401.866M/s\r\n   \r\n   case: int64 within -100 ~ 100, 8M size, null = 1%\r\n   this patch: 540.892M/s\r\n   BitmapReader: 545.825M/s\r\n   ArrayDataVisitor: 412.722M/\r\n   ```\r\n   \r\n   - ArrayDataVisitor overhead is trivial for std::stable_sort:\r\n   ```\r\n   case: int64 big range, 32K size, null = 1%\r\n   this patch: 77.6597M/s\r\n   BitmapReader: 77.9934M/s\r\n   ArrayDataVisitor: 77.5122M/s\r\n   \r\n   case: int64 big range, 8M size, null = 1%\r\n   this patch: 39.9015M/s\r\n   BitmapReader: 39.7658M/\r\n   ArrayDataVisitor: 39.3367M/s\r\n   ```\r\n   \r\n   I guess compiler is not smart enough to inline everything in [this tight loop](https://github.com/apache/arrow/blob/dbf63796ec27c2b00aeda13d42ad423f873b3013/cpp/src/arrow/visitor_inline.h#L179-L187), which introduces too much overhead. Please review my ArrayDataVisitor test code in case I missed anything: https://pastebin.com/kjkxcZHw\r\n   \r\n   My updated code is basically inlining what ArrayDataVisitor does.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-28T06:47:48.450+0000",
                    "updated": "2020-02-28T06:47:48.450+0000",
                    "started": "2020-02-28T06:47:48.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394675",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385532309\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +150,54 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n \n Review comment:\n   Done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-28T06:48:48.616+0000",
                    "updated": "2020-02-28T06:48:48.616+0000",
                    "started": "2020-02-28T06:48:48.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394677",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394678",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385532340\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +150,54 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_ && values.length() > values.null_count()) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n+\n+      // For signed int32/64, (max - min) may overflow and trigger UBSAN.\n+      // Cast to largest unsigned type(uint64_t) before substraction.\n+      const uint64_t range = static_cast<uint64_t>(max) - static_cast<uint64_t>(min);\n+      if (range <= countsort_max_range_) {\n+        count_sorter_.SetMinMax(min, max);\n+        count_sorter_.Sort(indices_begin, indices_end, values);\n+        return;\n+      }\n+    }\n+\n+    compare_sorter_.Sort(indices_begin, indices_end, values);\n+  }\n+\n+ private:\n+  CompareSorter<ArrowType, Comparator> compare_sorter_;\n+  CountSorter<ArrowType> count_sorter_;\n+\n+  // Cross point to prefer counting sort than stl::stable_sort(merge sort)\n+  // - array to be sorted is longer than \"count_min_len_\"\n+  // - value range (max-min) is within \"count_max_range_\"\n+  //\n+  // The optimal setting depends heavily on running CPU. Below setting is\n+  // conservative to adapt to various hardware and keep code simple.\n+  // It's possibel to decrease array-len and/or increase value-range to cover\n \n Review comment:\n   Done\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-28T06:48:56.904+0000",
                    "updated": "2020-02-28T06:48:56.904+0000",
                    "started": "2020-02-28T06:48:56.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394678",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385590244\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   > Please review my ArrayDataVisitor test code in case I missed anything: https://pastebin.com/kjkxcZHw\r\n   \r\n   Yes, it looks right. Which compiler are you using? Silly question, but you're testing in release mode, right?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-28T09:29:43.497+0000",
                    "updated": "2020-02-28T09:29:43.497+0000",
                    "started": "2020-02-28T09:29:43.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394763",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/394794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385614106\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   I'm using gcc7.4 on ubuntu 18.04. I tested in release mode.\r\n   \r\n   P.S., I did do silly things like benchmark with ubsan enabled, and wasted a lot time finding why the huge regression :-D\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-28T10:18:48.004+0000",
                    "updated": "2020-02-28T10:18:48.004+0000",
                    "started": "2020-02-28T10:18:48.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "394794",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/395035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r385793157\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   Well, ideally, the compiler should notice that the Status is always ok and optimize it out...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-28T16:28:08.289+0000",
                    "updated": "2020-02-28T16:28:08.289+0000",
                    "started": "2020-02-28T16:28:08.289+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "395035",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/395457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r386031407\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   Looking at the code, I think [ARROW_RETURN_NOT_OK](https://github.com/apache/arrow/blob/bf00cf1e6091f48365e0cc7e982afab2ea790df1/cpp/src/arrow/status.h#L55-L59) macro should be optimized out when its input is Status::OK(). Don't know why the compiler doesn't figure out the fact.\r\n   \r\n   I tried a small change, it enables compiler to optimize correctly and push ArrayDataVisitor to good performance.\r\n   \r\n   - Before change:\r\n   ```\r\n   #define ARROW_RETURN_NOT_OK(status)                                   \\\r\n     do {                                                                \\\r\n       ::arrow::Status __s = ::arrow::internal::GenericToStatus(status); \\\r\n       ARROW_RETURN_IF_(!__s.ok(), __s, ARROW_STRINGIFY(status));        \\\r\n     } while (false)\r\n   ```\r\n   \r\n   - After change (check status.ok() at the beginning):\r\n   ```\r\n   #define ARROW_RETURN_NOT_OK(status)                                     \\\r\n     do {                                                                  \\\r\n       if (!(status).ok()) {                                               \\\r\n         ::arrow::Status __s = ::arrow::internal::GenericToStatus(status); \\\r\n         ARROW_RETURN_IF_(!__s.ok(), __s, ARROW_STRINGIFY(status));        \\\r\n       }                                                                   \\\r\n     } while (false)\r\n   ```\r\n   \r\n   Any side effect of the original two lines of code which blocks compiler optimizer?\r\n   \r\n   `GenericToStatus` function is defined [here](https://github.com/apache/arrow/blob/bf00cf1e6091f48365e0cc7e982afab2ea790df1/cpp/src/arrow/status.h#L438). It gets a a copy of our Status::OK() object.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-29T14:23:27.529+0000",
                    "updated": "2020-02-29T14:23:27.529+0000",
                    "started": "2020-02-29T14:23:27.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "395457",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/395467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r386034630\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   The problem is that the `status` parameter to the macro can be an expression with side effects, and your version will execute it twice.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-02-29T15:18:55.972+0000",
                    "updated": "2020-02-29T15:18:55.972+0000",
                    "started": "2020-02-29T15:18:55.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "395467",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/395702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#discussion_r386166549\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/sort_to_indices.cc\n ##########\n @@ -139,6 +151,52 @@ class CountSorter {\n   }\n };\n \n+template <typename ArrowType, typename Comparator>\n+class CountCompareSorter {\n+  using ArrayType = typename TypeTraits<ArrowType>::ArrayType;\n+  using c_type = typename ArrowType::c_type;\n+\n+ public:\n+  explicit CountCompareSorter(Comparator compare) : compare_sorter_(compare) {}\n+\n+  void Sort(int64_t* indices_begin, int64_t* indices_end, const ArrayType& values) {\n+    if (values.length() >= countsort_min_len_) {\n+      auto min = std::numeric_limits<c_type>::max();\n+      auto max = std::numeric_limits<c_type>::min();\n+\n+      for (int64_t i = 0; i < values.length(); ++i) {\n+        min = values.IsNull(i) ? min : std::min(min, values.Value(i));\n+        max = values.IsNull(i) ? max : std::max(max, values.Value(i));\n+      }\n \n Review comment:\n   Direct assigment is of good performance\r\n   ```\r\n   #define ARROW_RETURN_NOT_OK2(status)                                  \\\r\n     do {                                                                \\\r\n       ::arrow::Status __s = (status);                                   \\\r\n       ARROW_RETURN_IF_(!__s.ok(), __s, ARROW_STRINGIFY(status));        \\\r\n     } while (false)\r\n   ```\r\n   \r\n   Calling GenericToStatus() leads to bad performance.\r\n   ```\r\n   #define ARROW_RETURN_NOT_OK(status)                                   \\\r\n     do {                                                                \\\r\n       ::arrow::Status __s = ::arrow::internal::GenericToStatus(status); \\\r\n       ARROW_RETURN_IF_(!__s.ok(), __s, ARROW_STRINGIFY(status));        \\\r\n     } while (false)\r\n   \r\n   inline Status GenericToStatus(const Status& st) { return st; }\r\n   ```\r\n   \r\n   Looks insane to me. Anyway, I think ARROW_RETURN_NOT_OK macro code is okay.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-02T01:44:26.148+0000",
                    "updated": "2020-03-02T01:44:26.148+0000",
                    "started": "2020-03-02T01:44:26.147+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "395702",
                    "issueId": "13103433"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/worklog/396122",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on issue #6495: ARROW-1571: [C++][Compute] Optimize sorting integers in small value range\nURL: https://github.com/apache/arrow/pull/6495#issuecomment-593426369\n \n \n   > @cyb70289 Can you try this patch? It seems to fix the performance issue with `ArrayDataVisitor` for me (on gcc 7.4.0, Ubuntu 18.04, AMD Ryzen):\r\n   \r\n   It works for me too. Cool!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-02T14:23:03.143+0000",
                    "updated": "2020-03-02T14:23:03.143+0000",
                    "started": "2020-03-02T14:23:03.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "396122",
                    "issueId": "13103433"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@58e9ffe2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7491ae8d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cffc454[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5563e280[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48d077fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2354bcc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@503af2ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1a077ddf[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5123a6c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@79e0fc01[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e487ea5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5f001d36[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Mar 02 21:59:04 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-02T21:59:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1571/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-09-19T23:01:11.000+0000",
        "updated": "2021-08-02T18:33:54.000+0000",
        "timeoriginalestimate": null,
        "description": "This function requires knowledge of the minimum and maximum of an array. If it is small enough, then an array of size {{maximum - minimum}} can be constructed and used to tabulate value frequencies and then compute the sort indices (this is called \"grade up\" or \"grade down\" in APL languages). There is generally a cross-over point where this function performs worse than mergesort or quicksort due to data locality issues",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/12991610",
                "id": "12991610",
                "filename": "e5-2650.png",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                    "name": "yibocai",
                    "key": "yibo",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                    },
                    "displayName": "Yibo Cai",
                    "active": true,
                    "timeZone": "Etc/UTC"
                },
                "created": "2020-01-23T07:25:52.165+0000",
                "size": 113673,
                "mimeType": "image/png",
                "content": "https://issues.apache.org/jira/secure/attachment/12991610/e5-2650.png"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement argsort kernels (sort indices) for integers using O(n) counting sort",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/comment/17016474",
                    "id": "17016474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Finding cross-over point suitable for various hardware may be not easy. I will do some tests to see if we can reach a reasonable approach.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-01-16T02:43:15.338+0000",
                    "updated": "2020-01-16T02:43:15.338+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/comment/17021827",
                    "id": "17021827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Two variables need be figured out:\r\n- Array Size: Array size to begin benefiting from such an optimization. The smaller, the better.\r\n- Value Range: Gaps between max and min value for an array to benefit from such an optimization. The larger, the better.\r\n\r\nIt's non trivial to find the optimial parameters, as there two variables are correlated, and they depend on actual hardware.\r\n\r\nI did some benchmark, and plotted how \"array size\" and \"value range\" affect performance (speed ratio of counting sort vs std::stable_sort).\r\nTest code at: https://github.com/cyb70289/mytests/blob/master/cpp/sort-range.cc\r\nBench and plot code at: https://github.com/cyb70289/bench-graph/tree/master/sort-range\r\n\r\nPer my investigation, leveraging counting sort in large integers with limited value range can improve performance significantly, if did right.\r\n\r\nBelow plot is tested on Tntel E5-2650 cpu.\r\n- Y axis is \"speed-of-counting-sort / speed-of-stl-stable-sort\", its value above 1 means counting sort is better than stl stablesort.\r\n- X axis is array size, plotted in log scale\r\n- Different lines map to different value range\r\n\r\nFrom the plot, we can see if we leverage counting sort for arrays with at least 1000 elements and value range less than 4096, we can always get above 7x performance uplift.\r\n\r\n !e5-2650.png! ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-01-23T07:26:39.257+0000",
                    "updated": "2020-01-23T07:26:39.257+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/comment/17043145",
                    "id": "17043145",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Another metric is what's the penalty of finding min/max. If (max - min) is too large and we have to fallback to original stl sort code.\r\nPer my investigation, the penalty is trivial, almost not observable for all array size. I see less than 0.3% for long arrays with 10,000,000 elements.\r\nBenchmark code at https://github.com/cyb70289/mytests/blob/master/cpp/minmax-penalty.cc.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-02-24T03:30:41.542+0000",
                    "updated": "2020-02-24T03:30:41.542+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/comment/17043666",
                    "id": "17043666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Exactly the kind of analysis that I wanted to see, thanks [~yibocai]! So it seems like for int32/int64 arrays that for small sizes (< 1000 certainly) that we should stick with the O(n log n) sort but for larger arrays the benefit of checking can be large",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dfoulks",
                        "name": "dfoulks",
                        "key": "dfoulks",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34057",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34057",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34057",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34057"
                        },
                        "displayName": "Drew Foulks",
                        "active": true,
                        "timeZone": "America/Kentucky/Louisville"
                    },
                    "created": "2020-02-24T16:43:54.089+0000",
                    "updated": "2021-08-02T18:33:54.360+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103433/comment/17049689",
                    "id": "17049689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6495\n[https://github.com/apache/arrow/pull/6495]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-02T21:59:04.468+0000",
                    "updated": "2020-03-02T21:59:04.468+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3k9on:",
        "customfield_12314139": null
    }
}