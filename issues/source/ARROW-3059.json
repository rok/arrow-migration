{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13179091",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091",
    "key": "ARROW-3059",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12541117",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12541117",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "outwardIssue": {
                    "id": "13179281",
                    "key": "PARQUET-1382",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179281",
                    "fields": {
                        "summary": "[C++] Prepare for arrow::test namespace removal",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3059/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/worklog/135293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2436: ARROW-3059: [C++] Remove namespace arrow::test\nURL: https://github.com/apache/arrow/pull/2436\n \n \n   Depends on PR https://github.com/apache/parquet-cpp/pull/487\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-16T07:56:37.423+0000",
                    "updated": "2018-08-16T07:56:37.423+0000",
                    "started": "2018-08-16T07:56:37.422+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135293",
                    "issueId": "13179091"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/worklog/135316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2436: ARROW-3059: [C++] Remove namespace arrow::test\nURL: https://github.com/apache/arrow/pull/2436#issuecomment-413470455\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=h1) Report\n   > Merging [#2436](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/f62e07a84ec01c89def87ec4ae8e5bb590cdcd28?src=pr&el=desc) will **increase** coverage by `17.71%`.\n   > The diff coverage is `97.64%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2436/graphs/tree.svg?token=LpTCFbqVT1&width=650&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=tree)\n   \n   ```diff\n   @@             Coverage Diff             @@\n   ##           master    #2436       +/-   ##\n   ===========================================\n   + Coverage   69.01%   86.73%   +17.71%     \n   ===========================================\n     Files          61      239      +178     \n     Lines        3234    42607    +39373     \n   ===========================================\n   + Hits         2232    36954    +34722     \n   - Misses        928     5653     +4725     \n   + Partials       74        0       -74\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/memory\\_pool-test.h](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC10ZXN0Lmg=) | `100% <\u00f8> (\u00f8)` | |\n   | [cpp/src/arrow/io/io-hdfs-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9pby1oZGZzLXRlc3QuY2M=) | `17.44% <0%> (\u00f8)` | |\n   | [cpp/src/arrow/test-common.h](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LWNvbW1vbi5o) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/compression-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2NvbXByZXNzaW9uLXRlc3QuY2M=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/ipc/ipc-read-write-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pcGMvaXBjLXJlYWQtd3JpdGUtdGVzdC5jYw==) | `99.04% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/test-util.h](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0LXV0aWwuaA==) | `74.8% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/util/lazy-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2xhenktdGVzdC5jYw==) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/memory\\_pool-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC10ZXN0LmNj) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/compute/compute-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2NvbXB1dGUtdGVzdC5jYw==) | `99.54% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/array-test.cc](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hcnJheS10ZXN0LmNj) | `100% <100%> (\u00f8)` | |\n   | ... and [307 more](https://codecov.io/gh/apache/arrow/pull/2436/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=footer). Last update [f62e07a...47bf2e3](https://codecov.io/gh/apache/arrow/pull/2436?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-16T08:40:32.400+0000",
                    "updated": "2018-08-16T08:40:32.400+0000",
                    "started": "2018-08-16T08:40:32.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135316",
                    "issueId": "13179091"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/worklog/135366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2436: ARROW-3059: [C++] Remove namespace arrow::test\nURL: https://github.com/apache/arrow/pull/2436#issuecomment-413527015\n \n \n   Hmm... I'm a bit surprised that CI succeeded without the required parquet-cpp changes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-16T12:22:02.989+0000",
                    "updated": "2018-08-16T12:22:02.989+0000",
                    "started": "2018-08-16T12:22:02.988+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135366",
                    "issueId": "13179091"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/worklog/135377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2436: ARROW-3059: [C++] Remove namespace arrow::test\nURL: https://github.com/apache/arrow/pull/2436#issuecomment-413551179\n \n \n   Arrow's CI does not build the Parquet unit tests, which I presume are the only things affected by this\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-16T13:46:45.524+0000",
                    "updated": "2018-08-16T13:46:45.524+0000",
                    "started": "2018-08-16T13:46:45.523+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135377",
                    "issueId": "13179091"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/worklog/135378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2436: ARROW-3059: [C++] Remove namespace arrow::test\nURL: https://github.com/apache/arrow/pull/2436#issuecomment-413551407\n \n \n   Ah, I see, thanks.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-16T13:47:25.247+0000",
                    "updated": "2018-08-16T13:47:25.247+0000",
                    "started": "2018-08-16T13:47:25.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135378",
                    "issueId": "13179091"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/worklog/135390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2436: ARROW-3059: [C++] Remove namespace arrow::test\nURL: https://github.com/apache/arrow/pull/2436\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex 702b819c53..5f002a58df 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -308,7 +308,7 @@ class TestPrimitiveBuilder : public TestBuilder {\n     Attrs::draw(N, &draws_);\n \n     valid_bytes_.resize(static_cast<size_t>(N));\n-    test::random_null_bytes(N, pct_null, valid_bytes_.data());\n+    random_null_bytes(N, pct_null, valid_bytes_.data());\n   }\n \n   void Check(const std::unique_ptr<BuilderType>& builder, bool nullable) {\n@@ -323,7 +323,7 @@ class TestPrimitiveBuilder : public TestBuilder {\n     if (nullable) {\n       ASSERT_OK(\n           BitUtil::BytesToBits(valid_bytes_, default_memory_pool(), &ex_null_bitmap));\n-      ex_null_count = test::null_count(valid_bytes_);\n+      ex_null_count = CountNulls(valid_bytes_);\n     } else {\n       ex_null_bitmap = nullptr;\n     }\n@@ -381,23 +381,23 @@ struct UniformIntSampleType<int8_t> {\n                                         \\\n   static std::shared_ptr<DataType> type() { return std::make_shared<Type>(); }\n \n-#define PINT_DECL(CapType, c_type)                                                       \\\n-  struct P##CapType {                                                                    \\\n-    PTYPE_DECL(CapType, c_type)                                                          \\\n-    static void draw(int64_t N, vector<T>* draws) {                                      \\\n-      using sample_type = typename UniformIntSampleType<c_type>::type;                   \\\n-      const T lower = std::numeric_limits<T>::min();                                     \\\n-      const T upper = std::numeric_limits<T>::max();                                     \\\n-      test::randint(N, static_cast<sample_type>(lower), static_cast<sample_type>(upper), \\\n-                    draws);                                                              \\\n-    }                                                                                    \\\n+#define PINT_DECL(CapType, c_type)                                                 \\\n+  struct P##CapType {                                                              \\\n+    PTYPE_DECL(CapType, c_type)                                                    \\\n+    static void draw(int64_t N, vector<T>* draws) {                                \\\n+      using sample_type = typename UniformIntSampleType<c_type>::type;             \\\n+      const T lower = std::numeric_limits<T>::min();                               \\\n+      const T upper = std::numeric_limits<T>::max();                               \\\n+      randint(N, static_cast<sample_type>(lower), static_cast<sample_type>(upper), \\\n+              draws);                                                              \\\n+    }                                                                              \\\n   }\n \n #define PFLOAT_DECL(CapType, c_type, LOWER, UPPER)  \\\n   struct P##CapType {                               \\\n     PTYPE_DECL(CapType, c_type)                     \\\n     static void draw(int64_t N, vector<T>* draws) { \\\n-      test::random_real(N, 0, LOWER, UPPER, draws); \\\n+      random_real(N, 0, LOWER, UPPER, draws);       \\\n     }                                               \\\n   }\n \n@@ -423,8 +423,8 @@ void TestPrimitiveBuilder<PBoolean>::RandomData(int64_t N, double pct_null) {\n   draws_.resize(static_cast<size_t>(N));\n   valid_bytes_.resize(static_cast<size_t>(N));\n \n-  test::random_null_bytes(N, 0.5, draws_.data());\n-  test::random_null_bytes(N, pct_null, valid_bytes_.data());\n+  random_null_bytes(N, 0.5, draws_.data());\n+  random_null_bytes(N, pct_null, valid_bytes_.data());\n }\n \n template <>\n@@ -445,7 +445,7 @@ void TestPrimitiveBuilder<PBoolean>::Check(const std::unique_ptr<BooleanBuilder>\n   ASSERT_OK(BitUtil::BytesToBits(draws_, default_memory_pool(), &ex_data));\n   if (nullable) {\n     ASSERT_OK(BitUtil::BytesToBits(valid_bytes_, default_memory_pool(), &ex_null_bitmap));\n-    ex_null_count = test::null_count(valid_bytes_);\n+    ex_null_count = CountNulls(valid_bytes_);\n   } else {\n     ex_null_bitmap = nullptr;\n   }\n@@ -923,8 +923,8 @@ TEST(TestBooleanBuilder, TestStdBoolVectorAppend) {\n   std::vector<bool> values, is_valid;\n \n   const int length = 10000;\n-  test::random_is_valid(length, 0.5, &values);\n-  test::random_is_valid(length, 0.1, &is_valid);\n+  random_is_valid(length, 0.5, &values);\n+  random_is_valid(length, 0.1, &is_valid);\n \n   const int chunksize = 1000;\n   for (int chunk = 0; chunk < length / chunksize; ++chunk) {\n@@ -963,8 +963,8 @@ void CheckSliceApproxEquals() {\n   vector<T> draws2;\n \n   const uint32_t kSeed = 0;\n-  test::random_real(kSize, kSeed, 0.0, 100.0, &draws1);\n-  test::random_real(kSize, kSeed + 1, 0.0, 100.0, &draws2);\n+  random_real(kSize, kSeed, 0.0, 100.0, &draws1);\n+  random_real(kSize, kSeed + 1, 0.0, 100.0, &draws2);\n \n   // Make the draws equal in the sliced segment, but unequal elsewhere (to\n   // catch not using the slice offset)\n@@ -973,7 +973,7 @@ void CheckSliceApproxEquals() {\n   }\n \n   vector<bool> is_valid;\n-  test::random_is_valid(kSize, 0.1, &is_valid);\n+  random_is_valid(kSize, 0.1, &is_valid);\n \n   std::shared_ptr<Array> array1, array2;\n   ArrayFromVector<TYPE, T>(is_valid, draws1, &array1);\n@@ -1006,10 +1006,10 @@ class TestStringArray : public ::testing::Test {\n \n   void MakeArray() {\n     length_ = static_cast<int64_t>(offsets_.size()) - 1;\n-    value_buf_ = test::GetBufferFromVector(chars_);\n-    offsets_buf_ = test::GetBufferFromVector(offsets_);\n+    value_buf_ = GetBufferFromVector(chars_);\n+    offsets_buf_ = GetBufferFromVector(offsets_);\n     ASSERT_OK(BitUtil::BytesToBits(valid_bytes_, default_memory_pool(), &null_bitmap_));\n-    null_count_ = test::null_count(valid_bytes_);\n+    null_count_ = CountNulls(valid_bytes_);\n \n     strings_ = std::make_shared<StringArray>(length_, offsets_buf_, value_buf_,\n                                              null_bitmap_, null_count_);\n@@ -1071,7 +1071,7 @@ TEST_F(TestStringArray, TestGetString) {\n \n TEST_F(TestStringArray, TestEmptyStringComparison) {\n   offsets_ = {0, 0, 0, 0, 0, 0};\n-  offsets_buf_ = test::GetBufferFromVector(offsets_);\n+  offsets_buf_ = GetBufferFromVector(offsets_);\n   length_ = static_cast<int64_t>(offsets_.size() - 1);\n \n   auto strings_a = std::make_shared<StringArray>(length_, offsets_buf_, nullptr,\n@@ -1318,11 +1318,11 @@ class TestBinaryArray : public ::testing::Test {\n \n   void MakeArray() {\n     length_ = static_cast<int64_t>(offsets_.size() - 1);\n-    value_buf_ = test::GetBufferFromVector(chars_);\n-    offsets_buf_ = test::GetBufferFromVector(offsets_);\n+    value_buf_ = GetBufferFromVector(chars_);\n+    offsets_buf_ = GetBufferFromVector(offsets_);\n \n     ASSERT_OK(BitUtil::BytesToBits(valid_bytes_, default_memory_pool(), &null_bitmap_));\n-    null_count_ = test::null_count(valid_bytes_);\n+    null_count_ = CountNulls(valid_bytes_);\n \n     strings_ = std::make_shared<BinaryArray>(length_, offsets_buf_, value_buf_,\n                                              null_bitmap_, null_count_);\n@@ -1610,10 +1610,10 @@ TEST_F(TestFWBinaryArray, Builder) {\n   int64_t nbytes = length * byte_width;\n \n   vector<uint8_t> data(nbytes);\n-  test::random_bytes(nbytes, 0, data.data());\n+  random_bytes(nbytes, 0, data.data());\n \n   vector<uint8_t> is_valid(length);\n-  test::random_null_bytes(length, 0.1, is_valid.data());\n+  random_null_bytes(length, 0.1, is_valid.data());\n \n   const uint8_t* raw_data = data.data();\n \n@@ -2885,19 +2885,19 @@ TEST_F(TestListArray, TestFromArrays) {\n \n   ListArray expected1(list_type, length, offsets1->data()->buffers[1], values,\n                       offsets1->data()->buffers[0], 0);\n-  test::AssertArraysEqual(expected1, *list1);\n+  AssertArraysEqual(expected1, *list1);\n \n   // Use null bitmap from offsets3, but clean offsets from non-null version\n   ListArray expected3(list_type, length, offsets1->data()->buffers[1], values,\n                       offsets3->data()->buffers[0], 1);\n-  test::AssertArraysEqual(expected3, *list3);\n+  AssertArraysEqual(expected3, *list3);\n \n   // Check that the last offset bit is zero\n   ASSERT_FALSE(BitUtil::GetBit(list3->null_bitmap()->data(), length + 1));\n \n   ListArray expected4(list_type, length, offsets2->data()->buffers[1], values,\n                       offsets4->data()->buffers[0], 1);\n-  test::AssertArraysEqual(expected4, *list4);\n+  AssertArraysEqual(expected4, *list4);\n \n   // Test failure modes\n \n@@ -3682,7 +3682,7 @@ class DecimalTest : public ::testing::TestWithParam<int> {\n     ASSERT_OK(\n         BitUtil::BytesToBits(valid_bytes, default_memory_pool(), &expected_null_bitmap));\n \n-    int64_t expected_null_count = test::null_count(valid_bytes);\n+    int64_t expected_null_count = CountNulls(valid_bytes);\n     auto expected = std::make_shared<Decimal128Array>(\n         type, size, expected_data, expected_null_bitmap, expected_null_count);\n \ndiff --git a/cpp/src/arrow/compute/compute-benchmark.cc b/cpp/src/arrow/compute/compute-benchmark.cc\nindex 646010550f..405aa40142 100644\n--- a/cpp/src/arrow/compute/compute-benchmark.cc\n+++ b/cpp/src/arrow/compute/compute-benchmark.cc\n@@ -92,13 +92,13 @@ struct HashParams {\n     std::vector<int64_t> draws;\n     std::vector<T> values;\n     std::vector<bool> is_valid;\n-    test::randint<int64_t>(length, 0, num_unique, &draws);\n+    randint<int64_t>(length, 0, num_unique, &draws);\n     for (int64_t draw : draws) {\n       values.push_back(static_cast<T>(draw));\n     }\n \n     if (this->null_percent > 0) {\n-      test::random_is_valid(length, this->null_percent, &is_valid);\n+      random_is_valid(length, this->null_percent, &is_valid);\n       ArrayFromVector<Type, T>(is_valid, values, arr);\n     } else {\n       ArrayFromVector<Type, T>(values, arr);\n@@ -115,16 +115,16 @@ struct HashParams<StringType> {\n   void GenerateTestData(const int64_t length, const int64_t num_unique,\n                         std::shared_ptr<Array>* arr) const {\n     std::vector<int64_t> draws;\n-    test::randint<int64_t>(length, 0, num_unique, &draws);\n+    randint<int64_t>(length, 0, num_unique, &draws);\n \n     const int64_t total_bytes = this->byte_width * num_unique;\n     std::vector<uint8_t> uniques(total_bytes);\n     const uint32_t seed = 0;\n-    test::random_bytes(total_bytes, seed, uniques.data());\n+    random_bytes(total_bytes, seed, uniques.data());\n \n     std::vector<bool> is_valid;\n     if (this->null_percent > 0) {\n-      test::random_is_valid(length, this->null_percent, &is_valid);\n+      random_is_valid(length, this->null_percent, &is_valid);\n     }\n \n     StringBuilder builder;\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex cd4b2bb30e..269b9ddb2a 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -917,9 +917,9 @@ TEST_F(TestCast, DictToNonDictNoNulls) {\n   std::vector<int32_t> i1 = {1, 0, 1};\n   std::vector<int32_t> i2 = {2, 1, 0, 1};\n   auto c1 = std::make_shared<NumericArray<Int32Type>>(\n-      3, arrow::test::GetBufferFromVector<int32_t>(i1));\n+      3, arrow::GetBufferFromVector<int32_t>(i1));\n   auto c2 = std::make_shared<NumericArray<Int32Type>>(\n-      4, arrow::test::GetBufferFromVector<int32_t>(i2));\n+      4, arrow::GetBufferFromVector<int32_t>(i2));\n \n   ArrayVector dict_arrays = {std::make_shared<DictionaryArray>(dict_type, c1),\n                              std::make_shared<DictionaryArray>(dict_type, c2)};\ndiff --git a/cpp/src/arrow/gpu/cuda-benchmark.cc b/cpp/src/arrow/gpu/cuda-benchmark.cc\nindex f791d127f9..8b3723d838 100644\n--- a/cpp/src/arrow/gpu/cuda-benchmark.cc\n+++ b/cpp/src/arrow/gpu/cuda-benchmark.cc\n@@ -49,7 +49,7 @@ static void CudaBufferWriterBenchmark(benchmark::State& state, const int64_t tot\n   }\n \n   std::shared_ptr<ResizableBuffer> buffer;\n-  ASSERT_OK(test::MakeRandomByteBuffer(total_bytes, default_memory_pool(), &buffer));\n+  ASSERT_OK(MakeRandomByteBuffer(total_bytes, default_memory_pool(), &buffer));\n \n   const uint8_t* host_data = buffer->data();\n   while (state.KeepRunning()) {\ndiff --git a/cpp/src/arrow/gpu/cuda-test.cc b/cpp/src/arrow/gpu/cuda-test.cc\nindex ba37be99cd..5eb5cd734f 100644\n--- a/cpp/src/arrow/gpu/cuda-test.cc\n+++ b/cpp/src/arrow/gpu/cuda-test.cc\n@@ -72,7 +72,7 @@ TEST_F(TestCudaBuffer, CopyFromHost) {\n   ASSERT_OK(context_->Allocate(kSize, &device_buffer));\n \n   std::shared_ptr<ResizableBuffer> host_buffer;\n-  ASSERT_OK(test::MakeRandomByteBuffer(kSize, default_memory_pool(), &host_buffer));\n+  ASSERT_OK(MakeRandomByteBuffer(kSize, default_memory_pool(), &host_buffer));\n \n   ASSERT_OK(device_buffer->CopyFromHost(0, host_buffer->data(), 500));\n   ASSERT_OK(device_buffer->CopyFromHost(500, host_buffer->data() + 500, kSize - 500));\n@@ -86,7 +86,7 @@ TEST_F(TestCudaBuffer, FromBuffer) {\n   std::shared_ptr<ResizableBuffer> host_buffer;\n   std::shared_ptr<CudaBuffer> device_buffer;\n   ASSERT_OK(context_->Allocate(kSize, &device_buffer));\n-  ASSERT_OK(test::MakeRandomByteBuffer(kSize, default_memory_pool(), &host_buffer));\n+  ASSERT_OK(MakeRandomByteBuffer(kSize, default_memory_pool(), &host_buffer));\n   ASSERT_OK(device_buffer->CopyFromHost(0, host_buffer->data(), 1000));\n   // Sanity check\n   AssertCudaBufferEquals(*device_buffer, host_buffer->data(), kSize);\n@@ -133,7 +133,7 @@ TEST_F(TestCudaBuffer, DISABLED_ExportForIpc) {\n   ASSERT_OK(context_->Allocate(kSize, &device_buffer));\n \n   std::shared_ptr<ResizableBuffer> host_buffer;\n-  ASSERT_OK(test::MakeRandomByteBuffer(kSize, default_memory_pool(), &host_buffer));\n+  ASSERT_OK(MakeRandomByteBuffer(kSize, default_memory_pool(), &host_buffer));\n   ASSERT_OK(device_buffer->CopyFromHost(0, host_buffer->data(), kSize));\n \n   // Export for IPC and serialize\n@@ -172,7 +172,7 @@ class TestCudaBufferWriter : public TestCudaBufferBase {\n   void TestWrites(const int64_t total_bytes, const int64_t chunksize,\n                   const int64_t buffer_size = 0) {\n     std::shared_ptr<ResizableBuffer> buffer;\n-    ASSERT_OK(test::MakeRandomByteBuffer(total_bytes, default_memory_pool(), &buffer));\n+    ASSERT_OK(MakeRandomByteBuffer(total_bytes, default_memory_pool(), &buffer));\n \n     if (buffer_size > 0) {\n       ASSERT_OK(writer_->SetBufferSize(buffer_size));\n@@ -223,7 +223,7 @@ TEST_F(TestCudaBufferWriter, EdgeCases) {\n   Allocate(1000);\n \n   std::shared_ptr<ResizableBuffer> buffer;\n-  ASSERT_OK(test::MakeRandomByteBuffer(1000, default_memory_pool(), &buffer));\n+  ASSERT_OK(MakeRandomByteBuffer(1000, default_memory_pool(), &buffer));\n   const uint8_t* host_data = buffer->data();\n \n   ASSERT_EQ(0, writer_->buffer_size());\n@@ -274,7 +274,7 @@ TEST_F(TestCudaBufferReader, Basics) {\n   ASSERT_OK(context_->Allocate(size, &device_buffer));\n \n   std::shared_ptr<ResizableBuffer> buffer;\n-  ASSERT_OK(test::MakeRandomByteBuffer(1000, default_memory_pool(), &buffer));\n+  ASSERT_OK(MakeRandomByteBuffer(1000, default_memory_pool(), &buffer));\n   const uint8_t* host_data = buffer->data();\n \n   ASSERT_OK(device_buffer->CopyFromHost(0, host_data, 1000));\ndiff --git a/cpp/src/arrow/io/io-file-test.cc b/cpp/src/arrow/io/io-file-test.cc\nindex 29f3b094f6..75504f7ed0 100644\n--- a/cpp/src/arrow/io/io-file-test.cc\n+++ b/cpp/src/arrow/io/io-file-test.cc\n@@ -594,7 +594,7 @@ TEST_F(TestMemoryMappedFile, WriteRead) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n \n-  test::random_bytes(1024, 0, buffer.data());\n+  random_bytes(1024, 0, buffer.data());\n \n   const int reps = 5;\n \n@@ -620,7 +620,7 @@ TEST_F(TestMemoryMappedFile, WriteResizeRead) {\n   std::vector<std::vector<uint8_t>> buffers(reps);\n   for (auto& b : buffers) {\n     b.resize(buffer_size);\n-    test::random_bytes(buffer_size, 0, b.data());\n+    random_bytes(buffer_size, 0, b.data());\n   }\n \n   std::string path = \"io-memory-map-write-read-test\";\n@@ -647,7 +647,7 @@ TEST_F(TestMemoryMappedFile, WriteResizeRead) {\n TEST_F(TestMemoryMappedFile, ResizeRaisesOnExported) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -683,7 +683,7 @@ TEST_F(TestMemoryMappedFile, ResizeRaisesOnExported) {\n TEST_F(TestMemoryMappedFile, WriteReadZeroInitSize) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -703,7 +703,7 @@ TEST_F(TestMemoryMappedFile, WriteReadZeroInitSize) {\n TEST_F(TestMemoryMappedFile, WriteThenShrink) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -729,7 +729,7 @@ TEST_F(TestMemoryMappedFile, WriteThenShrink) {\n TEST_F(TestMemoryMappedFile, WriteThenShrinkToHalfThenWrite) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -766,7 +766,7 @@ TEST_F(TestMemoryMappedFile, WriteThenShrinkToHalfThenWrite) {\n TEST_F(TestMemoryMappedFile, ResizeToZeroThanWrite) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -810,7 +810,7 @@ TEST_F(TestMemoryMappedFile, ResizeToZeroThanWrite) {\n TEST_F(TestMemoryMappedFile, WriteAt) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -830,7 +830,7 @@ TEST_F(TestMemoryMappedFile, WriteAt) {\n TEST_F(TestMemoryMappedFile, WriteBeyondEnd) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -848,7 +848,7 @@ TEST_F(TestMemoryMappedFile, WriteBeyondEnd) {\n TEST_F(TestMemoryMappedFile, WriteAtBeyondEnd) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   std::string path = \"io-memory-map-write-read-test\";\n   std::shared_ptr<MemoryMappedFile> result;\n@@ -880,7 +880,7 @@ TEST_F(TestMemoryMappedFile, ReadOnly) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n \n-  test::random_bytes(1024, 0, buffer.data());\n+  random_bytes(1024, 0, buffer.data());\n \n   const int reps = 5;\n \n@@ -914,7 +914,7 @@ TEST_F(TestMemoryMappedFile, DISABLED_ReadWriteOver4GbFile) {\n   const int64_t buffer_size = 1000 * 1000;\n   std::vector<uint8_t> buffer(buffer_size);\n \n-  test::random_bytes(buffer_size, 0, buffer.data());\n+  random_bytes(buffer_size, 0, buffer.data());\n \n   const int64_t reps = 5000;\n \n@@ -950,7 +950,7 @@ TEST_F(TestMemoryMappedFile, RetainMemoryMapReference) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n \n-  test::random_bytes(1024, 0, buffer.data());\n+  random_bytes(1024, 0, buffer.data());\n \n   std::string path = \"ipc-read-only-test\";\n   CreateFile(path, buffer_size);\n@@ -979,7 +979,7 @@ TEST_F(TestMemoryMappedFile, InvalidMode) {\n   const int64_t buffer_size = 1024;\n   std::vector<uint8_t> buffer(buffer_size);\n \n-  test::random_bytes(1024, 0, buffer.data());\n+  random_bytes(1024, 0, buffer.data());\n \n   std::string path = \"ipc-invalid-mode-test\";\n   CreateFile(path, buffer_size);\ndiff --git a/cpp/src/arrow/io/io-hdfs-test.cc b/cpp/src/arrow/io/io-hdfs-test.cc\nindex e02215b5ef..e8f451cb64 100644\n--- a/cpp/src/arrow/io/io-hdfs-test.cc\n+++ b/cpp/src/arrow/io/io-hdfs-test.cc\n@@ -42,7 +42,7 @@ namespace io {\n \n std::vector<uint8_t> RandomData(int64_t size) {\n   std::vector<uint8_t> buffer(size);\n-  test::random_bytes(size, 0, buffer.data());\n+  random_bytes(size, 0, buffer.data());\n   return buffer;\n }\n \ndiff --git a/cpp/src/arrow/io/io-memory-benchmark.cc b/cpp/src/arrow/io/io-memory-benchmark.cc\nindex b6ffa0e039..72a5dc8ac2 100644\n--- a/cpp/src/arrow/io/io-memory-benchmark.cc\n+++ b/cpp/src/arrow/io/io-memory-benchmark.cc\n@@ -31,7 +31,7 @@ static void BM_SerialMemcopy(benchmark::State& state) {  // NOLINT non-const ref\n   std::shared_ptr<Buffer> buffer1, buffer2;\n   ABORT_NOT_OK(AllocateBuffer(kTotalSize, &buffer1));\n   ABORT_NOT_OK(AllocateBuffer(kTotalSize, &buffer2));\n-  test::random_bytes(kTotalSize, 0, buffer2->mutable_data());\n+  random_bytes(kTotalSize, 0, buffer2->mutable_data());\n \n   while (state.KeepRunning()) {\n     io::FixedSizeBufferWriter writer(buffer1);\n@@ -47,7 +47,7 @@ static void BM_ParallelMemcopy(benchmark::State& state) {  // NOLINT non-const r\n   ABORT_NOT_OK(AllocateBuffer(kTotalSize, &buffer1));\n   ABORT_NOT_OK(AllocateBuffer(kTotalSize, &buffer2));\n \n-  test::random_bytes(kTotalSize, 0, buffer2->mutable_data());\n+  random_bytes(kTotalSize, 0, buffer2->mutable_data());\n \n   while (state.KeepRunning()) {\n     io::FixedSizeBufferWriter writer(buffer1);\ndiff --git a/cpp/src/arrow/io/io-memory-test.cc b/cpp/src/arrow/io/io-memory-test.cc\nindex 62305a6517..b2f3f18d35 100644\n--- a/cpp/src/arrow/io/io-memory-test.cc\n+++ b/cpp/src/arrow/io/io-memory-test.cc\n@@ -147,7 +147,7 @@ TEST(TestMemcopy, ParallelMemcopy) {\n     ASSERT_OK(AllocateBuffer(total_size, &buffer1));\n     ASSERT_OK(AllocateBuffer(total_size, &buffer2));\n \n-    test::random_bytes(total_size, 0, buffer2->mutable_data());\n+    random_bytes(total_size, 0, buffer2->mutable_data());\n \n     io::FixedSizeBufferWriter writer(buffer1);\n     writer.set_memcopy_threads(4);\ndiff --git a/cpp/src/arrow/ipc/ipc-json-test.cc b/cpp/src/arrow/ipc/ipc-json-test.cc\nindex adf83c33ec..549a93c8c1 100644\n--- a/cpp/src/arrow/ipc/ipc-json-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-json-test.cc\n@@ -183,8 +183,8 @@ TEST(TestJsonArrayWriter, NestedTypes) {\n   std::vector<int32_t> offsets = {0, 0, 0, 1, 4, 7};\n \n   std::shared_ptr<Buffer> list_bitmap;\n-  ASSERT_OK(test::GetBitmapFromVector(list_is_valid, &list_bitmap));\n-  std::shared_ptr<Buffer> offsets_buffer = test::GetBufferFromVector(offsets);\n+  ASSERT_OK(GetBitmapFromVector(list_is_valid, &list_bitmap));\n+  std::shared_ptr<Buffer> offsets_buffer = GetBufferFromVector(offsets);\n \n   ListArray list_array(list(value_type), 5, offsets_buffer, values_array, list_bitmap, 1);\n \n@@ -193,7 +193,7 @@ TEST(TestJsonArrayWriter, NestedTypes) {\n   // Struct\n   std::vector<bool> struct_is_valid = {true, false, true, true, true, false, true};\n   std::shared_ptr<Buffer> struct_bitmap;\n-  ASSERT_OK(test::GetBitmapFromVector(struct_is_valid, &struct_bitmap));\n+  ASSERT_OK(GetBitmapFromVector(struct_is_valid, &struct_bitmap));\n \n   auto struct_type =\n       struct_({field(\"f1\", int32()), field(\"f2\", int32()), field(\"f3\", int32())});\n@@ -218,13 +218,13 @@ TEST(TestJsonArrayWriter, Unions) {\n void MakeBatchArrays(const std::shared_ptr<Schema>& schema, const int num_rows,\n                      std::vector<std::shared_ptr<Array>>* arrays) {\n   std::vector<bool> is_valid;\n-  test::random_is_valid(num_rows, 0.25, &is_valid);\n+  random_is_valid(num_rows, 0.25, &is_valid);\n \n   std::vector<int8_t> v1_values;\n   std::vector<int32_t> v2_values;\n \n-  test::randint(num_rows, 0, 100, &v1_values);\n-  test::randint(num_rows, 0, 100, &v2_values);\n+  randint(num_rows, 0, 100, &v1_values);\n+  randint(num_rows, 0, 100, &v2_values);\n \n   std::shared_ptr<Array> v1;\n   ArrayFromVector<Int8Type, int8_t>(is_valid, v1_values, &v1);\n@@ -240,7 +240,7 @@ void MakeBatchArrays(const std::shared_ptr<Schema>& schema, const int num_rows,\n     if (!is_valid[i]) {\n       ASSERT_OK(string_builder.AppendNull());\n     } else {\n-      test::random_ascii(kBufferSize, seed++, buffer);\n+      random_ascii(kBufferSize, seed++, buffer);\n       ASSERT_OK(string_builder.Append(buffer, kBufferSize));\n     }\n   }\ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc b/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc\nindex 25233946df..ace2965b90 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-benchmark.cc\n@@ -37,10 +37,10 @@ std::shared_ptr<RecordBatch> MakeRecordBatch(int64_t total_size, int64_t num_fie\n   auto type = TypeTraits<TYPE>::type_singleton();\n \n   std::vector<bool> is_valid;\n-  test::random_is_valid(length, 0.1, &is_valid);\n+  random_is_valid(length, 0.1, &is_valid);\n \n   std::vector<T> values;\n-  test::randint<T>(length, 0, 100, &values);\n+  randint<T>(length, 0, 100, &values);\n \n   typename TypeTraits<TYPE>::BuilderType builder(type, default_memory_pool());\n   for (size_t i = 0; i < values.size(); ++i) {\ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-test.cc b/cpp/src/arrow/ipc/ipc-read-write-test.cc\nindex f6e49ea805..37127cb8e6 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-test.cc\n@@ -351,7 +351,7 @@ TEST_F(TestWriteRecordBatch, SliceTruncatesBuffers) {\n   auto union_type = union_({field(\"f0\", a0->type())}, {0});\n   std::vector<int32_t> type_ids(a0->length());\n   std::shared_ptr<Buffer> ids_buffer;\n-  ASSERT_OK(test::CopyBufferFromVector(type_ids, default_memory_pool(), &ids_buffer));\n+  ASSERT_OK(CopyBufferFromVector(type_ids, default_memory_pool(), &ids_buffer));\n   a1 =\n       std::make_shared<UnionArray>(union_type, a0->length(), struct_children, ids_buffer);\n   CheckArray(a1);\n@@ -363,8 +363,7 @@ TEST_F(TestWriteRecordBatch, SliceTruncatesBuffers) {\n     type_offsets.push_back(i);\n   }\n   std::shared_ptr<Buffer> offsets_buffer;\n-  ASSERT_OK(\n-      test::CopyBufferFromVector(type_offsets, default_memory_pool(), &offsets_buffer));\n+  ASSERT_OK(CopyBufferFromVector(type_offsets, default_memory_pool(), &offsets_buffer));\n   a1 = std::make_shared<UnionArray>(dense_union_type, a0->length(), struct_children,\n                                     ids_buffer, offsets_buffer);\n   CheckArray(a1);\n@@ -748,9 +747,9 @@ TEST_F(TestTensorRoundTrip, BasicRoundtrip) {\n   int64_t size = 24;\n \n   std::vector<int64_t> values;\n-  test::randint(size, 0, 100, &values);\n+  randint(size, 0, 100, &values);\n \n-  auto data = test::GetBufferFromVector(values);\n+  auto data = GetBufferFromVector(values);\n \n   Tensor t0(int64(), data, shape, strides, dim_names);\n   Tensor tzero(int64(), data, {}, {}, {});\n@@ -769,9 +768,9 @@ TEST_F(TestTensorRoundTrip, NonContiguous) {\n   ASSERT_OK(io::MemoryMapFixture::InitMemoryMap(kBufferSize, path, &mmap_));\n \n   std::vector<int64_t> values;\n-  test::randint(24, 0, 100, &values);\n+  randint(24, 0, 100, &values);\n \n-  auto data = test::GetBufferFromVector(values);\n+  auto data = GetBufferFromVector(values);\n   Tensor tensor(int64(), data, {4, 3}, {48, 16});\n \n   CheckTensorRoundTrip(tensor);\ndiff --git a/cpp/src/arrow/ipc/test-common.h b/cpp/src/arrow/ipc/test-common.h\nindex 45796153ee..299f050228 100644\n--- a/cpp/src/arrow/ipc/test-common.h\n+++ b/cpp/src/arrow/ipc/test-common.h\n@@ -98,12 +98,12 @@ const auto kListListInt32 = list(kListInt32);\n Status MakeRandomInt32Array(int64_t length, bool include_nulls, MemoryPool* pool,\n                             std::shared_ptr<Array>* out) {\n   std::shared_ptr<ResizableBuffer> data;\n-  RETURN_NOT_OK(test::MakeRandomInt32Buffer(length, pool, &data));\n+  RETURN_NOT_OK(MakeRandomInt32Buffer(length, pool, &data));\n   Int32Builder builder(int32(), pool);\n   RETURN_NOT_OK(builder.Resize(length));\n   if (include_nulls) {\n     std::shared_ptr<ResizableBuffer> valid_bytes;\n-    RETURN_NOT_OK(test::MakeRandomByteBuffer(length, pool, &valid_bytes));\n+    RETURN_NOT_OK(MakeRandomByteBuffer(length, pool, &valid_bytes));\n     RETURN_NOT_OK(builder.AppendValues(reinterpret_cast<const int32_t*>(data->data()),\n                                        length, valid_bytes->data()));\n     return builder.Finish(out);\n@@ -119,7 +119,7 @@ Status MakeRandomListArray(const std::shared_ptr<Array>& child_array, int num_li\n   // Create the null list values\n   std::vector<uint8_t> valid_lists(num_lists);\n   const double null_percent = include_nulls ? 0.1 : 0;\n-  test::random_null_bytes(num_lists, null_percent, valid_lists.data());\n+  random_null_bytes(num_lists, null_percent, valid_lists.data());\n \n   // Create list offsets\n   const int max_list_size = 10;\n@@ -130,7 +130,7 @@ Status MakeRandomListArray(const std::shared_ptr<Array>& child_array, int num_li\n   const uint32_t seed = static_cast<uint32_t>(child_array->length());\n \n   if (num_lists > 0) {\n-    test::rand_uniform_int(num_lists, seed, 0, max_list_size, list_sizes.data());\n+    rand_uniform_int(num_lists, seed, 0, max_list_size, list_sizes.data());\n     // make sure sizes are consistent with null\n     std::transform(list_sizes.begin(), list_sizes.end(), valid_lists.begin(),\n                    list_sizes.begin(),\n@@ -149,8 +149,8 @@ Status MakeRandomListArray(const std::shared_ptr<Array>& child_array, int num_li\n \n   /// TODO(wesm): Implement support for nulls in ListArray::FromArrays\n   std::shared_ptr<Buffer> null_bitmap, offsets_buffer;\n-  RETURN_NOT_OK(test::GetBitmapFromVector(valid_lists, &null_bitmap));\n-  RETURN_NOT_OK(test::CopyBufferFromVector(offsets, pool, &offsets_buffer));\n+  RETURN_NOT_OK(GetBitmapFromVector(valid_lists, &null_bitmap));\n+  RETURN_NOT_OK(CopyBufferFromVector(offsets, pool, &offsets_buffer));\n \n   *out = std::make_shared<ListArray>(list(child_array->type()), num_lists, offsets_buffer,\n                                      child_array, null_bitmap, kUnknownNullCount);\n@@ -162,7 +162,7 @@ typedef Status MakeRecordBatch(std::shared_ptr<RecordBatch>* out);\n Status MakeRandomBooleanArray(const int length, bool include_nulls,\n                               std::shared_ptr<Array>* out) {\n   std::vector<uint8_t> values(length);\n-  test::random_null_bytes(length, 0.5, values.data());\n+  random_null_bytes(length, 0.5, values.data());\n   std::shared_ptr<Buffer> data;\n   RETURN_NOT_OK(BitUtil::BytesToBits(values, default_memory_pool(), &data));\n \n@@ -170,7 +170,7 @@ Status MakeRandomBooleanArray(const int length, bool include_nulls,\n     std::vector<uint8_t> valid_bytes(length);\n     std::shared_ptr<Buffer> null_bitmap;\n     RETURN_NOT_OK(BitUtil::BytesToBits(valid_bytes, default_memory_pool(), &null_bitmap));\n-    test::random_null_bytes(length, 0.1, valid_bytes.data());\n+    random_null_bytes(length, 0.1, valid_bytes.data());\n     *out = std::make_shared<BooleanArray>(length, data, null_bitmap, -1);\n   } else {\n     *out = std::make_shared<BooleanArray>(length, data, NULLPTR, 0);\n@@ -433,8 +433,7 @@ Status MakeUnion(std::shared_ptr<RecordBatch>* out) {\n \n   std::shared_ptr<Buffer> type_ids_buffer;\n   std::vector<uint8_t> type_ids = {5, 10, 5, 5, 10, 10, 5};\n-  RETURN_NOT_OK(\n-      test::CopyBufferFromVector(type_ids, default_memory_pool(), &type_ids_buffer));\n+  RETURN_NOT_OK(CopyBufferFromVector(type_ids, default_memory_pool(), &type_ids_buffer));\n \n   std::vector<int32_t> u0_values = {0, 1, 2, 3, 4, 5, 6};\n   ArrayFromVector<Int32Type, int32_t>(u0_values, &sparse_children[0]);\n@@ -451,8 +450,7 @@ Status MakeUnion(std::shared_ptr<RecordBatch>* out) {\n \n   std::shared_ptr<Buffer> offsets_buffer;\n   std::vector<int32_t> offsets = {0, 0, 1, 2, 1, 2, 3};\n-  RETURN_NOT_OK(\n-      test::CopyBufferFromVector(offsets, default_memory_pool(), &offsets_buffer));\n+  RETURN_NOT_OK(CopyBufferFromVector(offsets, default_memory_pool(), &offsets_buffer));\n \n   std::vector<uint8_t> null_bytes(length, 1);\n   null_bytes[2] = 0;\n@@ -517,7 +515,7 @@ Status MakeDictionary(std::shared_ptr<RecordBatch>* out) {\n   ArrayFromVector<Int8Type, int8_t>(is_valid3, indices3_values, &indices3);\n \n   std::shared_ptr<Buffer> null_bitmap;\n-  RETURN_NOT_OK(test::GetBitmapFromVector(is_valid, &null_bitmap));\n+  RETURN_NOT_OK(GetBitmapFromVector(is_valid, &null_bitmap));\n \n   std::shared_ptr<Array> a3 = std::make_shared<ListArray>(\n       f3_type, length, std::static_pointer_cast<PrimitiveArray>(offsets)->values(),\n@@ -707,8 +705,8 @@ Status MakeDecimal(std::shared_ptr<RecordBatch>* out) {\n \n   RETURN_NOT_OK(AllocateBuffer(kDecimalSize * length, &data));\n \n-  test::random_decimals(length, 1, kDecimalPrecision, data->mutable_data());\n-  test::random_null_bytes(length, 0.1, is_valid_bytes.data());\n+  random_decimals(length, 1, kDecimalPrecision, data->mutable_data());\n+  random_null_bytes(length, 0.1, is_valid_bytes.data());\n \n   RETURN_NOT_OK(BitUtil::BytesToBits(is_valid_bytes, default_memory_pool(), &is_valid));\n \ndiff --git a/cpp/src/arrow/memory_pool-test.cc b/cpp/src/arrow/memory_pool-test.cc\nindex 4cd01d3243..c2c814644d 100644\n--- a/cpp/src/arrow/memory_pool-test.cc\n+++ b/cpp/src/arrow/memory_pool-test.cc\n@@ -25,7 +25,7 @@\n \n namespace arrow {\n \n-class TestDefaultMemoryPool : public ::arrow::test::TestMemoryPoolBase {\n+class TestDefaultMemoryPool : public ::arrow::TestMemoryPoolBase {\n  public:\n   ::arrow::MemoryPool* memory_pool() override { return ::arrow::default_memory_pool(); }\n };\ndiff --git a/cpp/src/arrow/memory_pool-test.h b/cpp/src/arrow/memory_pool-test.h\nindex f583da5730..27ec718e6e 100644\n--- a/cpp/src/arrow/memory_pool-test.h\n+++ b/cpp/src/arrow/memory_pool-test.h\n@@ -26,8 +26,6 @@\n \n namespace arrow {\n \n-namespace test {\n-\n class TestMemoryPoolBase : public ::testing::Test {\n  public:\n   virtual ::arrow::MemoryPool* memory_pool() = 0;\n@@ -84,5 +82,4 @@ class TestMemoryPoolBase : public ::testing::Test {\n   }\n };\n \n-}  // namespace test\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/table-test.cc b/cpp/src/arrow/table-test.cc\nindex f178e61200..dfd8b63c08 100644\n--- a/cpp/src/arrow/table-test.cc\n+++ b/cpp/src/arrow/table-test.cc\n@@ -118,11 +118,11 @@ TEST_F(TestChunkedArray, SliceEquals) {\n \n   std::shared_ptr<ChunkedArray> slice = one_->Slice(125, 50);\n   ASSERT_EQ(slice->length(), 50);\n-  test::AssertChunkedEqual(*one_->Slice(125, 50), *slice);\n+  AssertChunkedEqual(*one_->Slice(125, 50), *slice);\n \n   std::shared_ptr<ChunkedArray> slice2 = one_->Slice(75)->Slice(25)->Slice(25, 50);\n   ASSERT_EQ(slice2->length(), 50);\n-  test::AssertChunkedEqual(*slice, *slice2);\n+  AssertChunkedEqual(*slice, *slice2);\n \n   // Making empty slices of a ChunkedArray\n   std::shared_ptr<ChunkedArray> slice3 = one_->Slice(one_->length(), 99);\n@@ -420,7 +420,7 @@ TEST_F(TestTable, ConcatenateTables) {\n \n   ASSERT_OK(ConcatenateTables({t1, t2}, &result));\n   ASSERT_OK(Table::FromRecordBatches({batch1, batch2}, &expected));\n-  test::AssertTablesEqual(*expected, *result);\n+  AssertTablesEqual(*expected, *result);\n \n   // Error states\n   std::vector<std::shared_ptr<Table>> empty_tables;\ndiff --git a/cpp/src/arrow/test-common.h b/cpp/src/arrow/test-common.h\nindex fd43d53b02..9cd8ffd364 100644\n--- a/cpp/src/arrow/test-common.h\n+++ b/cpp/src/arrow/test-common.h\n@@ -68,7 +68,7 @@ std::shared_ptr<Array> TestBase::MakeRandomArray(int64_t length, int64_t null_co\n   EXPECT_OK(AllocateBuffer(pool_, data_nbytes, &data));\n \n   // Fill with random data\n-  test::random_bytes(data_nbytes, random_seed_++, data->mutable_data());\n+  random_bytes(data_nbytes, random_seed_++, data->mutable_data());\n   std::shared_ptr<Buffer> null_bitmap = MakeRandomNullBitmap(length, null_count);\n \n   return std::make_shared<ArrayType>(length, data, null_bitmap, null_count);\n@@ -88,7 +88,7 @@ std::shared_ptr<Array> TestBase::MakeRandomArray<FixedSizeBinaryArray>(\n   std::shared_ptr<Buffer> data;\n   EXPECT_OK(AllocateBuffer(pool_, byte_width * length, &data));\n \n-  ::arrow::test::random_bytes(data->size(), 0, data->mutable_data());\n+  ::arrow::random_bytes(data->size(), 0, data->mutable_data());\n   return std::make_shared<FixedSizeBinaryArray>(fixed_size_binary(byte_width), length,\n                                                 data, null_bitmap, null_count);\n }\n@@ -108,7 +108,7 @@ std::shared_ptr<Array> TestBase::MakeRandomArray<BinaryArray>(int64_t length,\n     if (!valid_bytes[i]) {\n       EXPECT_OK(builder.AppendNull());\n     } else {\n-      ::arrow::test::random_bytes(kBufferSize, static_cast<uint32_t>(i), buffer);\n+      ::arrow::random_bytes(kBufferSize, static_cast<uint32_t>(i), buffer);\n       EXPECT_OK(builder.Append(buffer, kBufferSize));\n     }\n   }\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex fff0ee10b6..69f413e6dc 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -93,8 +93,6 @@ using ArrayVector = std::vector<std::shared_ptr<Array>>;\n     }                                                                                  \\\n   } while (false)\n \n-namespace test {\n-\n template <typename T, typename U>\n void randint(int64_t N, T lower, T upper, std::vector<U>* out) {\n   const int random_seed = 0;\n@@ -280,7 +278,7 @@ static inline void random_ascii(int64_t n, uint32_t seed, uint8_t* out) {\n   rand_uniform_int(n, seed, static_cast<int32_t>('A'), static_cast<int32_t>('z'), out);\n }\n \n-static inline int64_t null_count(const std::vector<uint8_t>& valid_bytes) {\n+static inline int64_t CountNulls(const std::vector<uint8_t>& valid_bytes) {\n   return static_cast<int64_t>(std::count(valid_bytes.cbegin(), valid_bytes.cend(), '\\0'));\n }\n \n@@ -289,8 +287,8 @@ Status MakeRandomInt32Buffer(int64_t length, MemoryPool* pool,\n   DCHECK(pool);\n   std::shared_ptr<ResizableBuffer> result;\n   RETURN_NOT_OK(AllocateResizableBuffer(pool, sizeof(int32_t) * length, &result));\n-  test::rand_uniform_int(length, seed, 0, std::numeric_limits<int32_t>::max(),\n-                         reinterpret_cast<int32_t*>(result->mutable_data()));\n+  rand_uniform_int(length, seed, 0, std::numeric_limits<int32_t>::max(),\n+                   reinterpret_cast<int32_t*>(result->mutable_data()));\n   *out = result;\n   return Status::OK();\n }\n@@ -299,7 +297,7 @@ Status MakeRandomByteBuffer(int64_t length, MemoryPool* pool,\n                             std::shared_ptr<ResizableBuffer>* out, uint32_t seed = 0) {\n   std::shared_ptr<ResizableBuffer> result;\n   RETURN_NOT_OK(AllocateResizableBuffer(pool, length, &result));\n-  test::random_bytes(length, seed, result->mutable_data());\n+  random_bytes(length, seed, result->mutable_data());\n   *out = result;\n   return Status::OK();\n }\n@@ -368,8 +366,6 @@ void AssertTablesEqual(const Table& expected, const Table& actual,\n   }\n }\n \n-}  // namespace test\n-\n template <typename TYPE, typename C_TYPE>\n void ArrayFromVector(const std::shared_ptr<DataType>& type,\n                      const std::vector<bool>& is_valid, const std::vector<C_TYPE>& values,\ndiff --git a/cpp/src/arrow/util/bit-util-benchmark.cc b/cpp/src/arrow/util/bit-util-benchmark.cc\nindex 305a9d2abd..541f863695 100644\n--- a/cpp/src/arrow/util/bit-util-benchmark.cc\n+++ b/cpp/src/arrow/util/bit-util-benchmark.cc\n@@ -86,7 +86,7 @@ static std::shared_ptr<Buffer> CreateRandomBuffer(int64_t nbytes) {\n   std::shared_ptr<Buffer> buffer;\n   ABORT_NOT_OK(AllocateBuffer(nbytes, &buffer));\n   memset(buffer->mutable_data(), 0, nbytes);\n-  test::random_bytes(nbytes, 0, buffer->mutable_data());\n+  random_bytes(nbytes, 0, buffer->mutable_data());\n   return buffer;\n }\n \ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 87202fcc20..adb09e1bf6 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -302,7 +302,7 @@ TYPED_TEST_CASE(TestGenerateBits, GenerateBitsTypes);\n TYPED_TEST(TestGenerateBits, NormalOperation) {\n   const int kSourceSize = 256;\n   uint8_t source[kSourceSize];\n-  test::random_bytes(kSourceSize, 0, source);\n+  random_bytes(kSourceSize, 0, source);\n \n   const int64_t start_offsets[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 21, 31, 32};\n   const int64_t lengths[] = {0,  1,  2,  3,  4,   5,   6,   7,   8,   9,   12,  16,\n@@ -410,7 +410,7 @@ TEST(BitUtilTests, TestCountSetBits) {\n   const int kBufferSize = 1000;\n   uint8_t buffer[kBufferSize] = {0};\n \n-  test::random_bytes(kBufferSize, 0, buffer);\n+  random_bytes(kBufferSize, 0, buffer);\n \n   const int num_bits = kBufferSize * 8;\n \n@@ -430,7 +430,7 @@ TEST(BitUtilTests, TestCopyBitmap) {\n   std::shared_ptr<Buffer> buffer;\n   ASSERT_OK(AllocateBuffer(kBufferSize, &buffer));\n   memset(buffer->mutable_data(), 0, kBufferSize);\n-  test::random_bytes(kBufferSize, 0, buffer->mutable_data());\n+  random_bytes(kBufferSize, 0, buffer->mutable_data());\n \n   const uint8_t* src = buffer->data();\n \ndiff --git a/cpp/src/arrow/util/compression-test.cc b/cpp/src/arrow/util/compression-test.cc\nindex 84a8d7c1d5..6d8192bad2 100644\n--- a/cpp/src/arrow/util/compression-test.cc\n+++ b/cpp/src/arrow/util/compression-test.cc\n@@ -73,7 +73,7 @@ void CheckCodec() {\n   int sizes[] = {0, 10000, 100000};\n   for (int data_size : sizes) {\n     vector<uint8_t> data(data_size);\n-    test::random_bytes(data_size, 1234, data.data());\n+    random_bytes(data_size, 1234, data.data());\n     CheckCodecRoundtrip<CODEC>(data);\n   }\n }\ndiff --git a/cpp/src/arrow/util/lazy-benchmark.cc b/cpp/src/arrow/util/lazy-benchmark.cc\nindex 4ec1b07f5a..0b10ce197e 100644\n--- a/cpp/src/arrow/util/lazy-benchmark.cc\n+++ b/cpp/src/arrow/util/lazy-benchmark.cc\n@@ -31,7 +31,7 @@ static constexpr int64_t kSize = 100000000;\n template <typename T = int32_t>\n std::vector<T> generate_junk(int64_t size) {\n   std::vector<T> v(size);\n-  test::randint(size, 0, 100000, &v);\n+  randint(size, 0, 100000, &v);\n   return v;\n }\n \ndiff --git a/cpp/src/arrow/util/lazy-test.cc b/cpp/src/arrow/util/lazy-test.cc\nindex 83cc6a0d43..af8a9ec26b 100644\n--- a/cpp/src/arrow/util/lazy-test.cc\n+++ b/cpp/src/arrow/util/lazy-test.cc\n@@ -28,7 +28,7 @@ class TestLazyIter : public ::testing::Test {\n  public:\n   int64_t kSize = 1000;\n   void SetUp() {\n-    test::randint(kSize, 0, 1000000, &source_);\n+    randint(kSize, 0, 1000000, &source_);\n     target_.resize(kSize);\n   }\n \ndiff --git a/cpp/src/plasma/test/client_tests.cc b/cpp/src/plasma/test/client_tests.cc\nindex a945ce616a..a2418ac2cd 100644\n--- a/cpp/src/plasma/test/client_tests.cc\n+++ b/cpp/src/plasma/test/client_tests.cc\n@@ -42,8 +42,8 @@ std::string test_executable;  // NOLINT\n void AssertObjectBufferEqual(const ObjectBuffer& object_buffer,\n                              const std::vector<uint8_t>& metadata,\n                              const std::vector<uint8_t>& data) {\n-  arrow::test::AssertBufferEqual(*object_buffer.metadata, metadata);\n-  arrow::test::AssertBufferEqual(*object_buffer.data, data);\n+  arrow::AssertBufferEqual(*object_buffer.metadata, metadata);\n+  arrow::AssertBufferEqual(*object_buffer.data, data);\n }\n \n class TestPlasmaStore : public ::testing::Test {\n@@ -288,7 +288,7 @@ TEST_F(TestPlasmaStore, GetTest) {\n   {\n     auto metadata = object_buffers[0].metadata;\n     object_buffers.clear();\n-    ::arrow::test::AssertBufferEqual(*metadata, {42});\n+    ::arrow::AssertBufferEqual(*metadata, {42});\n     ARROW_CHECK_OK(client_.FlushReleaseHistory());\n     EXPECT_TRUE(client_.IsInUse(object_id));\n   }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-08-16T14:13:28.433+0000",
                    "updated": "2018-08-16T14:13:28.433+0000",
                    "started": "2018-08-16T14:13:28.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "135390",
                    "issueId": "13179091"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4012934b[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@83ec210[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f989cc1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@51c8f560[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@746b0a14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2973c9a8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42e636d3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5493a81a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78843336[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4f8d8b07[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cae7c8b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@75b4d07c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 16 14:13:33 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-08-16T14:13:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3059/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-08-15T13:55:51.000+0000",
        "updated": "2018-08-16T14:13:33.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently we have some test helpers that live in the {{arrow::test}} namespace, some in {{arrow}} (or topic subnamespaces such as {{arrow::io}}). I see no reason for the discrepancy.\r\n\r\nI propose the simple solution of removing the {{arrow::test}} namespace altogether. If not desirable, then we should make sure we put all helpers in that namespace.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Streamline namespace array::test",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/comment/16581396",
                    "id": "16581396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think it's fine to eliminate. It has occasionally been a nuisance when writing unit tests",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-15T17:36:08.412+0000",
                    "updated": "2018-08-15T17:36:08.412+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13179091/comment/16582591",
                    "id": "16582591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2436\n[https://github.com/apache/arrow/pull/2436]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-08-16T14:13:33.912+0000",
                    "updated": "2018-08-16T14:13:33.912+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|i3x2l3:",
        "customfield_12314139": null
    }
}