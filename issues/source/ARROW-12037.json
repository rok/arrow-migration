{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13366536",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536",
    "key": "ARROW-12037",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ruan",
            "name": "ruan",
            "key": "ruan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ruan&avatarId=46203",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ruan&avatarId=46203",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ruan&avatarId=46203",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ruan&avatarId=46203"
            },
            "displayName": "Ruan Pearce-Authers",
            "active": true,
            "timeZone": "Europe/London"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ruan",
            "name": "ruan",
            "key": "ruan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ruan&avatarId=46203",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ruan&avatarId=46203",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ruan&avatarId=46203",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ruan&avatarId=46203"
            },
            "displayName": "Ruan Pearce-Authers",
            "active": true,
            "timeZone": "Europe/London"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ruan",
            "name": "ruan",
            "key": "ruan",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=ruan&avatarId=46203",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ruan&avatarId=46203",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ruan&avatarId=46203",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ruan&avatarId=46203"
            },
            "displayName": "Ruan Pearce-Authers",
            "active": true,
            "timeZone": "Europe/London"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12037/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 20,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString opened a new pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762\n\n\n   This is an implementation of catalog and schema providers to support table namespacing (see the [design doc](https://docs.google.com/document/d/1_bCP_tjVRLJyOrMBOezSFNpF0hwPa1ZS_qMWv1uvtS4/edit?usp=sharing)).\r\n   \r\n   I'm creating this draft PR as a supporting implementation for the proposal, to prove out that the work can be done whilst minimising API churn and still allowing for use cases that don't care at all about the notion of catalogs or schemas; in this new setup, the default namespace is `dafafusion.public`, which will be created automatically with the default execution context config and allow for table registration.\r\n   \r\n   ## Highlights\r\n   - Datasource map removed in execution context state, replaced with catalog map\r\n   - Execution context allows for registering new catalog providers\r\n   - Catalog providers can be queried for their constituent schema providers\r\n   - Schema providers can be queried for table providers, similarly to the old datasource map\r\n   - Includes basic implementations of `CatalogProvider` and `SchemaProvider` backed by hashmaps\r\n   - New `TableReference` enum maps to various ways of referring to a table in sql\r\n     - Bare: `my_table`\r\n     - Partial: `schema.my_table`\r\n     - Full: `catalog.schema.my_table`\r\n   - Given a default catalog and schema, `TableReference` instances of any variant can be converted to a `ResolvedTableReference`, which always include all three components\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T12:30:16.757+0000",
                    "updated": "2021-03-21T12:30:16.757+0000",
                    "started": "2021-03-21T12:30:16.757+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569370",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803569847\n\n\n   https://issues.apache.org/jira/browse/ARROW-12037\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T12:30:40.112+0000",
                    "updated": "2021-03-21T12:30:40.112+0000",
                    "started": "2021-03-21T12:30:40.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569371",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569421",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803620661\n\n\n   This is truly awesome @returnString !\r\n   Apart from some tests & remaining cleanup (e.g. of the \"quick hack\") I really like the direction this is going!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T16:50:58.532+0000",
                    "updated": "2021-03-21T16:50:58.532+0000",
                    "started": "2021-03-21T16:50:58.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569421",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569422",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803620665\n\n\n   Thanks @returnString and I appreciate the well-written design doc to explain the PR. I didn't go through the code in great detail but I like the design. I noted a couple of unwraps in the code. It would be good to document why they are safe or consider having those methods return `Result` if they are not safe.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T16:51:01.451+0000",
                    "updated": "2021-03-21T16:51:01.451+0000",
                    "started": "2021-03-21T16:51:01.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569422",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803626826\n\n\n   Thanks both :)\r\n   \r\n   > I noted a couple of unwraps in the code. It would be good to document why they are safe or consider having those methods return Result if they are not safe.\r\n   \r\n   I've just audited all the unwraps that are introduced in these commits, and they fall into two categories:\r\n   - test cases that aren't already set up to return `Result<()>`\r\n   - unwrapping guard objects for `Mutex`/`RwLock` - afaik these only error if the lock is poisoned and this usage is consistent with existing lock usage e.g. state access in the `ExecutionContext`\r\n   \r\n   >  Apart from some tests & remaining cleanup (e.g. of the \"quick hack\") I really like the direction this is going!\r\n   \r\n   I think the quick hack (context: retrieving a list of table names from the execution ctx, assuming a flat namespace) can probably be removed outright, as `ctx.catalog(\"my_db\")?.schema(\"my_schema\")?.table_names()` would be a much more explicit way of doing this going forward. As far as I can tell, it's not referenced at all in the codebase internally, but this would introduce a bit more API breakage.\r\n   \r\n   As for tests, yes, the coverage so far is basically \"didn't break anything\" and \"all three types of reference to a given table in the default catalog/schema resolve correctly\", so I'll try and plan out some more in-depth testing covering e.g. tables of the same name in multiple schemas/catalogs.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T17:20:24.696+0000",
                    "updated": "2021-03-21T17:20:24.696+0000",
                    "started": "2021-03-21T17:20:24.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569438",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString edited a comment on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803626826\n\n\n   Thanks both :)\r\n   \r\n   > I noted a couple of unwraps in the code. It would be good to document why they are safe or consider having those methods return Result if they are not safe.\r\n   \r\n   I've just audited all the unwraps that are introduced in these commits, and they fall into two categories:\r\n   - test cases that aren't already set up to return `Result<()>`\r\n   - unwrapping guard objects for `Mutex`/`RwLock` - afaik these only error if the lock is poisoned and this usage is consistent with existing lock usage e.g. state access in the `ExecutionContext`\r\n   \r\n   >  Apart from some tests & remaining cleanup (e.g. of the \"quick hack\") I really like the direction this is going!\r\n   \r\n   I think the quick hack (context: retrieving a list of table names from the execution ctx, assuming a flat namespace) can probably be removed outright, as `ctx.catalog(\"my_db\")?.schema(\"my_schema\")?.table_names()` would be a much more explicit way of doing this going forward. As far as I can tell, `ExecutionContext::tables` isn't referenced at all in the codebase internally, but this would introduce a bit more API breakage.\r\n   \r\n   As for tests, yes, the coverage so far is basically \"didn't break anything\" and \"all three types of reference to a given table in the default catalog/schema resolve correctly\", so I'll try and plan out some more in-depth testing covering e.g. tables of the same name in multiple schemas/catalogs.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T17:21:27.753+0000",
                    "updated": "2021-03-21T17:21:27.753+0000",
                    "started": "2021-03-21T17:21:27.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569439",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803661931\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=h1) Report\n   > Merging [#9762](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=desc) (66de8d3) into [master](https://codecov.io/gh/apache/arrow/commit/29feea07fea118ad6ffc4d2615a5798412fe2f19?el=desc) (29feea0) will **decrease** coverage by `0.00%`.\n   > The diff coverage is `80.10%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9762/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9762      +/-   ##\n   ==========================================\n   - Coverage   82.59%   82.59%   -0.01%     \n   ==========================================\n     Files         248      252       +4     \n     Lines       58294    58983     +689     \n   ==========================================\n   + Hits        48149    48716     +567     \n   - Misses      10145    10267     +122     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/examples/flight\\_server.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL2V4YW1wbGVzL2ZsaWdodF9zZXJ2ZXIucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/examples/simple\\_udaf.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL2V4YW1wbGVzL3NpbXBsZV91ZGFmLnJz) | `0.00% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/datasource.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL2RhdGFzb3VyY2UucnM=) | `100.00% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/memory.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL21lbW9yeS5ycw==) | `85.15% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/execution/dataframe\\_impl.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZGF0YWZyYW1lX2ltcGwucnM=) | `89.10% <0.00%> (-1.03%)` | :arrow_down: |\n   | [rust/datafusion/src/optimizer/constant\\_folding.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvY29uc3RhbnRfZm9sZGluZy5ycw==) | `92.30% <0.00%> (-0.36%)` | :arrow_down: |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `53.60% <0.00%> (-1.72%)` | :arrow_down: |\n   | [...t/datafusion/src/optimizer/projection\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvcHJvamVjdGlvbl9wdXNoX2Rvd24ucnM=) | `98.66% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `88.00% <\u00f8> (\u00f8)` | |\n   | [rust/parquet/src/basic.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9iYXNpYy5ycw==) | `88.59% <\u00f8> (+1.36%)` | :arrow_up: |\n   | ... and [35 more](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=footer). Last update [81d6724...66de8d3](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T21:21:00.366+0000",
                    "updated": "2021-03-21T21:21:00.366+0000",
                    "started": "2021-03-21T21:21:00.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569471",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803669166\n\n\n   Whilst I still want to try and conjure up a few more test cases, I think this PR is now in a state where I'm happy to receive actual code reviews, so I've removed the draft status :)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T22:15:16.823+0000",
                    "updated": "2021-03-21T22:15:16.823+0000",
                    "started": "2021-03-21T22:15:16.823+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569477",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-803661931\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=h1) Report\n   > Merging [#9762](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=desc) (03048c6) into [master](https://codecov.io/gh/apache/arrow/commit/29feea07fea118ad6ffc4d2615a5798412fe2f19?el=desc) (29feea0) will **increase** coverage by `0.00%`.\n   > The diff coverage is `80.36%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9762/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=tree)\n   \n   ```diff\n   @@           Coverage Diff            @@\n   ##           master    #9762    +/-   ##\n   ========================================\n     Coverage   82.59%   82.59%            \n   ========================================\n     Files         248      252     +4     \n     Lines       58294    59004   +710     \n   ========================================\n   + Hits        48149    48737   +588     \n   - Misses      10145    10267   +122     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/examples/flight\\_server.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL2V4YW1wbGVzL2ZsaWdodF9zZXJ2ZXIucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/examples/simple\\_udaf.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL2V4YW1wbGVzL3NpbXBsZV91ZGFmLnJz) | `0.00% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/datasource.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL2RhdGFzb3VyY2UucnM=) | `100.00% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/datasource/memory.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL21lbW9yeS5ycw==) | `85.15% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/execution/dataframe\\_impl.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZGF0YWZyYW1lX2ltcGwucnM=) | `89.10% <0.00%> (-1.03%)` | :arrow_down: |\n   | [rust/datafusion/src/optimizer/constant\\_folding.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvY29uc3RhbnRfZm9sZGluZy5ycw==) | `92.30% <0.00%> (-0.36%)` | :arrow_down: |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `53.60% <0.00%> (-1.72%)` | :arrow_down: |\n   | [...t/datafusion/src/optimizer/projection\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvcHJvamVjdGlvbl9wdXNoX2Rvd24ucnM=) | `98.66% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `88.00% <\u00f8> (\u00f8)` | |\n   | [rust/parquet/src/basic.rs](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9iYXNpYy5ycw==) | `88.59% <\u00f8> (+1.36%)` | :arrow_up: |\n   | ... and [35 more](https://codecov.io/gh/apache/arrow/pull/9762/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=footer). Last update [81d6724...03048c6](https://codecov.io/gh/apache/arrow/pull/9762?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-21T22:17:39.837+0000",
                    "updated": "2021-03-21T22:17:39.837+0000",
                    "started": "2021-03-21T22:17:39.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569478",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-804027020\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:35:48.093+0000",
                    "updated": "2021-03-22T12:35:48.093+0000",
                    "started": "2021-03-22T12:35:48.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569674",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/569675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb removed a comment on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-804027173\n\n\n    I plan to review this PR later today\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T12:36:00.995+0000",
                    "updated": "2021-03-22T12:36:00.995+0000",
                    "started": "2021-03-22T12:36:00.995+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "569675",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#discussion_r599027565\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -0,0 +1,78 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of catalogs,\n+//! representing collections of named schemas.\n+\n+use crate::catalog::schema::SchemaProvider;\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a catalog, comprising a number of named schemas.\n+pub trait CatalogProvider: Sync + Send {\n+    /// Returns the catalog provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available schema names in this catalog.\n+    fn schema_names(&self) -> Vec<String>;\n\nReview comment:\n       What do you think about returning something more like `Vec<&str>` to prevent requiring a copy?\r\n   \r\n   Ideally it would be nice if we could do something like \r\n   ```\r\n   fn schema_names(&self) -> impl Iterator<Item=&str>\r\n   ``` \r\n   \r\n   As all uses of the results here will need to iterate over the names I suspect\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -0,0 +1,78 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of catalogs,\n+//! representing collections of named schemas.\n+\n+use crate::catalog::schema::SchemaProvider;\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a catalog, comprising a number of named schemas.\n+pub trait CatalogProvider: Sync + Send {\n+    /// Returns the catalog provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available schema names in this catalog.\n+    fn schema_names(&self) -> Vec<String>;\n+\n+    /// Retrieves a specific schema from the catalog by name, provided it exists.\n+    fn schema(&self, name: &str) -> Option<Arc<dyn SchemaProvider>>;\n+}\n+\n+/// Simple in-memory implementation of a catalog.\n+pub struct MemoryCatalogProvider {\n\nReview comment:\n       In some other PR perhaps we can put the concrete implementations into their own modules. I don't think this one is big enough to warrant that yet, however; I just wanted to point it out\n\n##########\nFile path: rust/datafusion/src/catalog/schema.rs\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of schemas,\n+//! representing collections of named tables.\n+\n+use crate::datasource::TableProvider;\n+use crate::error::{DataFusionError, Result};\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a schema, comprising a number of named tables.\n+pub trait SchemaProvider: Sync + Send {\n+    /// Returns the schema provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available table names in this schema.\n+    fn table_names(&self) -> Vec<String>;\n+\n+    /// Retrieves a specific table from the schema by name, provided it exists.\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>>;\n+\n+    /// If supported by the implementation, adds a new table to this schema.\n+    /// If a table of the same name existed before, it is replaced in the schema and returned.\n+    #[allow(unused_variables)]\n+    fn register_table(\n+        &self,\n+        name: String,\n+        table: Arc<dyn TableProvider>,\n+    ) -> Result<Option<Arc<dyn TableProvider>>> {\n+        Err(DataFusionError::Execution(\n+            \"schema provider does not support registering tables\".to_owned(),\n+        ))\n+    }\n+\n+    /// If supported by the implementation, removes an existing table from this schema and returns it.\n+    /// If no table of that name exists, returns Ok(None).\n+    #[allow(unused_variables)]\n+    fn deregister_table(&self, name: &str) -> Result<Option<Arc<dyn TableProvider>>> {\n\nReview comment:\n       ```suggestion\r\n       fn deregister_table(&self, _name: &str) -> Result<Option<Arc<dyn TableProvider>>> {\r\n   ```\n\n##########\nFile path: rust/datafusion/src/catalog/schema.rs\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of schemas,\n+//! representing collections of named tables.\n+\n+use crate::datasource::TableProvider;\n+use crate::error::{DataFusionError, Result};\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a schema, comprising a number of named tables.\n+pub trait SchemaProvider: Sync + Send {\n+    /// Returns the schema provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available table names in this schema.\n+    fn table_names(&self) -> Vec<String>;\n\nReview comment:\n       same suggestion here to try and avoid copying strings if we can avoid it\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -2504,3 +2507,36 @@ async fn inner_join_qualified_names() -> Result<()> {\n     }\n     Ok(())\n }\n+\n+#[tokio::test]\n+async fn qualified_table_references() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n+\n+    for table_ref in &[\n+        \"aggregate_test_100\",\n+        \"public.aggregate_test_100\",\n+        \"datafusion.public.aggregate_test_100\",\n+    ] {\n+        let sql = format!(\"SELECT COUNT(*) FROM {}\", table_ref);\n+        let results = execute(&mut ctx, &sql).await;\n+        assert_eq!(results, vec![vec![\"100\"]]);\n+    }\n+    Ok(())\n+}\n+\n+#[tokio::test]\n+async fn invalid_qualified_table_references() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n+\n+    for table_ref in &[\n+        \"nonexistentschema.aggregate_test_100\",\n+        \"nonexistentcatalog.public.aggregate_test_100\",\n+        \"way.too.many.namespaces.as.ident.prefixes.aggregate_test_100\",\n\nReview comment:\n       \ud83d\ude06 \n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -564,13 +634,30 @@ impl ExecutionConfig {\n         self.optimizers.push(optimizer_rule);\n         self\n     }\n+\n+    /// Selects a name for the default catalog and schema\n+    pub fn with_default_catalog_and_schema(\n+        mut self,\n+        catalog: impl Into<String>,\n+        schema: impl Into<String>,\n+    ) -> Self {\n+        self.default_catalog = catalog.into();\n+        self.default_schema = schema.into();\n+        self\n+    }\n+\n+    /// Controls whether the default catalog and schema will be automatically created\n+    pub fn create_default_catalog_and_schema(mut self, create: bool) -> Self {\n+        self.create_default_catalog_and_schema = create;\n+        self\n+    }\n }\n \n /// Execution context for registering data sources and executing queries\n #[derive(Clone)]\n pub struct ExecutionContextState {\n-    /// Data sources that are registered with the context\n-    pub datasources: HashMap<String, Arc<dyn TableProvider + Send + Sync>>,\n+    /// Collection of catalogs containing schemas and ultimately tables\n\nReview comment:\n       ```suggestion\r\n       /// Collection of catalogs containing schemas and ultimately TableProviders\r\n   ```\n\n##########\nFile path: rust/datafusion/src/catalog/mod.rs\n##########\n@@ -0,0 +1,145 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! This module contains interfaces and default implementations\n+//! of table namespacing concepts, including catalogs and schemas.\n+\n+pub mod catalog;\n+pub mod schema;\n+\n+use crate::error::DataFusionError;\n+use std::convert::TryFrom;\n+\n+/// Represents a resolved path to a table of the form \"catalog.schema.table\"\n+#[derive(Clone, Copy)]\n+pub struct ResolvedTableReference<'a> {\n+    /// The catalog (aka database) containing the table\n+    pub catalog: &'a str,\n+    /// The schema containing the table\n+    pub schema: &'a str,\n+    /// The table name\n+    pub table: &'a str,\n+}\n+\n+/// Represents a path to a table that may require further resolution\n+#[derive(Clone, Copy)]\n+pub enum TableReference<'a> {\n+    /// An unqualified table reference, e.g. \"table\"\n+    Bare {\n+        /// The table name\n+        table: &'a str,\n+    },\n+    /// A partially resolved table reference, e.g. \"schema.table\"\n+    Partial {\n+        /// The schema containing the table\n+        schema: &'a str,\n+        /// The table name\n+        table: &'a str,\n+    },\n+    /// A fully resolved table reference, e.g. \"catalog.schema.table\"\n+    Full {\n+        /// The catalog (aka database) containing the table\n+        catalog: &'a str,\n+        /// The schema containing the table\n+        schema: &'a str,\n+        /// The table name\n+        table: &'a str,\n+    },\n+}\n+\n+impl<'a> TableReference<'a> {\n+    /// Retrieve the actual table name, regardless of qualification\n+    pub fn table(&self) -> &str {\n+        match self {\n+            Self::Full { table, .. }\n+            | Self::Partial { table, .. }\n+            | Self::Bare { table } => table,\n+        }\n+    }\n+\n+    /// Given a default catalog and schema, ensure this table reference is fully resolved\n+    pub fn resolve(\n+        self,\n+        default_catalog: &'a str,\n+        default_schema: &'a str,\n+    ) -> ResolvedTableReference<'a> {\n+        match self {\n+            Self::Full {\n+                catalog,\n+                schema,\n+                table,\n+            } => ResolvedTableReference {\n+                catalog,\n+                schema,\n+                table,\n+            },\n+            Self::Partial { schema, table } => ResolvedTableReference {\n+                catalog: default_catalog,\n+                schema,\n+                table,\n+            },\n+            Self::Bare { table } => ResolvedTableReference {\n+                catalog: default_catalog,\n+                schema: default_schema,\n+                table,\n+            },\n+        }\n+    }\n+}\n+\n+impl<'a> From<&'a str> for TableReference<'a> {\n+    fn from(s: &'a str) -> Self {\n+        Self::Bare { table: s }\n+    }\n+}\n+\n+impl<'a> From<ResolvedTableReference<'a>> for TableReference<'a> {\n+    fn from(resolved: ResolvedTableReference<'a>) -> Self {\n+        Self::Full {\n+            catalog: resolved.catalog,\n+            schema: resolved.schema,\n+            table: resolved.table,\n+        }\n+    }\n+}\n+\n+impl<'a> TryFrom<&'a sqlparser::ast::ObjectName> for TableReference<'a> {\n+    type Error = DataFusionError;\n+\n+    fn try_from(value: &'a sqlparser::ast::ObjectName) -> Result<Self, Self::Error> {\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -512,6 +573,12 @@ pub struct ExecutionConfig {\n     optimizers: Vec<Arc<dyn OptimizerRule + Send + Sync>>,\n     /// Responsible for planning `LogicalPlan`s, and `ExecutionPlan`\n     query_planner: Arc<dyn QueryPlanner + Send + Sync>,\n+    /// Default catalog name for table resolution\n+    default_catalog: String,\n\nReview comment:\n       Would we ever need to distinguish between `\"\"` and `None`? If so, perhaps we can make this field  `default_catalog: Option<String>` instead\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -0,0 +1,78 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of catalogs,\n\nReview comment:\n       \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -1922,6 +2035,114 @@ mod tests {\n         Ok(())\n     }\n \n\nReview comment:\n       these are excellent tests . \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -1922,6 +2035,114 @@ mod tests {\n         Ok(())\n     }\n \n+    fn table_with_sequence(\n+        seq_start: i32,\n+        seq_end: i32,\n+    ) -> Result<Arc<dyn TableProvider>> {\n+        let schema = Arc::new(Schema::new(vec![Field::new(\"i\", DataType::Int32, true)]));\n+        let arr = Arc::new(Int32Array::from((seq_start..=seq_end).collect::<Vec<_>>()));\n+        let partitions = vec![vec![RecordBatch::try_new(\n+            schema.clone(),\n+            vec![arr as ArrayRef],\n+        )?]];\n+        Ok(Arc::new(MemTable::try_new(schema, partitions)?))\n+    }\n+\n+    #[tokio::test]\n+    async fn disabled_default_catalog_and_schema() -> Result<()> {\n+        let mut ctx = ExecutionContext::with_config(\n+            ExecutionConfig::new().create_default_catalog_and_schema(false),\n+        );\n+\n+        assert!(matches!(\n+            ctx.register_table(\"test\", table_with_sequence(1, 1)?),\n+            Err(DataFusionError::Plan(_))\n+        ));\n+\n+        assert!(matches!(\n+            ctx.sql(\"select * from datafusion.public.test\"),\n+            Err(DataFusionError::Plan(_))\n+        ));\n+\n+        Ok(())\n+    }\n+\n+    #[tokio::test]\n+    async fn custom_catalog_and_schema() -> Result<()> {\n+        let mut ctx = ExecutionContext::with_config(\n+            ExecutionConfig::new()\n+                .create_default_catalog_and_schema(false)\n+                .with_default_catalog_and_schema(\"my_catalog\", \"my_schema\"),\n+        );\n+\n+        let catalog = MemoryCatalogProvider::new();\n+        let schema = MemorySchemaProvider::new();\n+        schema.register_table(\"test\".to_owned(), table_with_sequence(1, 1)?)?;\n+        catalog.register_schema(\"my_schema\", Arc::new(schema));\n+        ctx.register_catalog(\"my_catalog\", Arc::new(catalog));\n+\n+        for table_ref in &[\"my_catalog.my_schema.test\", \"my_schema.test\", \"test\"] {\n+            let result = plan_and_collect(\n+                &mut ctx,\n+                &format!(\"SELECT COUNT(*) AS count FROM {}\", table_ref),\n+            )\n+            .await?;\n+\n+            let expected = vec![\n+                \"+-------+\",\n+                \"| count |\",\n+                \"+-------+\",\n+                \"| 1     |\",\n+                \"+-------+\",\n+            ];\n+            assert_batches_eq!(expected, &result);\n+        }\n+\n+        Ok(())\n+    }\n+\n+    #[tokio::test]\n+    async fn cross_catalog_access() -> Result<()> {\n+        let mut ctx = ExecutionContext::new();\n+\n+        let catalog_a = MemoryCatalogProvider::new();\n+        let schema_a = MemorySchemaProvider::new();\n+        schema_a.register_table(\"table_a\".to_owned(), table_with_sequence(1, 1)?)?;\n+        catalog_a.register_schema(\"schema_a\", Arc::new(schema_a));\n+        ctx.register_catalog(\"catalog_a\", Arc::new(catalog_a));\n+\n+        let catalog_b = MemoryCatalogProvider::new();\n+        let schema_b = MemorySchemaProvider::new();\n+        schema_b.register_table(\"table_b\".to_owned(), table_with_sequence(1, 2)?)?;\n+        catalog_b.register_schema(\"schema_b\", Arc::new(schema_b));\n+        ctx.register_catalog(\"catalog_b\", Arc::new(catalog_b));\n+\n+        let result = plan_and_collect(\n+            &mut ctx,\n+            \"SELECT cat, SUM(i) AS total FROM (\n+                    SELECT i, 'a' AS cat FROM catalog_a.schema_a.table_a\n+                    UNION ALL\n\nReview comment:\n       @Dandandan  `UNION` is already being used!\n\n##########\nFile path: rust/benchmarks/src/bin/tpch.rs\n##########\n@@ -157,9 +157,9 @@ async fn benchmark(opt: BenchmarkOpt) -> Result<Vec<arrow::record_batch::RecordB\n                 table,\n                 start.elapsed().as_millis()\n             );\n-            ctx.register_table(table, Arc::new(memtable));\n+            ctx.register_table(*table, Arc::new(memtable))?;\n\nReview comment:\n       The change to make `register_table` fallible is a breaking change, but a very reasonable one I think. \n\n##########\nFile path: rust/datafusion/src/catalog/schema.rs\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of schemas,\n+//! representing collections of named tables.\n+\n+use crate::datasource::TableProvider;\n+use crate::error::{DataFusionError, Result};\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a schema, comprising a number of named tables.\n+pub trait SchemaProvider: Sync + Send {\n+    /// Returns the schema provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available table names in this schema.\n+    fn table_names(&self) -> Vec<String>;\n+\n+    /// Retrieves a specific table from the schema by name, provided it exists.\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>>;\n+\n+    /// If supported by the implementation, adds a new table to this schema.\n+    /// If a table of the same name existed before, it is replaced in the schema and returned.\n+    #[allow(unused_variables)]\n+    fn register_table(\n+        &self,\n+        name: String,\n+        table: Arc<dyn TableProvider>,\n\nReview comment:\n       ```suggestion\r\n       fn register_table(\r\n           &self,\r\n           _name: String,\r\n           _table: Arc<dyn TableProvider>,\r\n   ```\n\n##########\nFile path: rust/benchmarks/src/bin/tpch.rs\n##########\n@@ -1105,7 +1105,7 @@ fn get_table(\n     table: &str,\n     table_format: &str,\n     max_concurrency: usize,\n-) -> Result<Arc<dyn TableProvider + Send + Sync>> {\n\nReview comment:\n       FWIW I was confused about this change initially until I saw that you added `Send + Sync` to the `TableProvider` trait itself. I think that is a good change (so we don't have to remember to add `Send + Sync` everywhere)\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -564,13 +634,30 @@ impl ExecutionConfig {\n         self.optimizers.push(optimizer_rule);\n         self\n     }\n+\n+    /// Selects a name for the default catalog and schema\n+    pub fn with_default_catalog_and_schema(\n\nReview comment:\n       I like this API. \ud83d\udc4d \r\n   \r\n   I wonder if we need an API for getting `default_catalog` and `default_schema`?\n\n##########\nFile path: rust/datafusion/src/catalog/schema.rs\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of schemas,\n+//! representing collections of named tables.\n+\n+use crate::datasource::TableProvider;\n+use crate::error::{DataFusionError, Result};\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a schema, comprising a number of named tables.\n+pub trait SchemaProvider: Sync + Send {\n+    /// Returns the schema provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available table names in this schema.\n+    fn table_names(&self) -> Vec<String>;\n+\n+    /// Retrieves a specific table from the schema by name, provided it exists.\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>>;\n+\n+    /// If supported by the implementation, adds a new table to this schema.\n+    /// If a table of the same name existed before, it is replaced in the schema and returned.\n+    #[allow(unused_variables)]\n+    fn register_table(\n+        &self,\n+        name: String,\n+        table: Arc<dyn TableProvider>,\n\nReview comment:\n       I think that pattern is more \"idiomatic rust\" but the unused variables thing works too\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T20:05:11.146+0000",
                    "updated": "2021-03-22T20:05:11.146+0000",
                    "started": "2021-03-22T20:05:11.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570006",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on a change in pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#discussion_r599044375\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -0,0 +1,78 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of catalogs,\n+//! representing collections of named schemas.\n+\n+use crate::catalog::schema::SchemaProvider;\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a catalog, comprising a number of named schemas.\n+pub trait CatalogProvider: Sync + Send {\n+    /// Returns the catalog provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available schema names in this catalog.\n+    fn schema_names(&self) -> Vec<String>;\n\nReview comment:\n       I iniitally tried to implement these returning `&[&str]` but with the threading requirements I struggled to get anything working that way. I _think_ this would require a larger refactoring to enable, but I'm not 100% sure on that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T20:17:11.118+0000",
                    "updated": "2021-03-22T20:17:11.118+0000",
                    "started": "2021-03-22T20:17:11.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570015",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on a change in pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#discussion_r599049329\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/schema.rs\n##########\n@@ -0,0 +1,104 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of schemas,\n+//! representing collections of named tables.\n+\n+use crate::datasource::TableProvider;\n+use crate::error::{DataFusionError, Result};\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a schema, comprising a number of named tables.\n+pub trait SchemaProvider: Sync + Send {\n+    /// Returns the schema provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available table names in this schema.\n+    fn table_names(&self) -> Vec<String>;\n+\n+    /// Retrieves a specific table from the schema by name, provided it exists.\n+    fn table(&self, name: &str) -> Option<Arc<dyn TableProvider>>;\n+\n+    /// If supported by the implementation, adds a new table to this schema.\n+    /// If a table of the same name existed before, it is replaced in the schema and returned.\n+    #[allow(unused_variables)]\n+    fn register_table(\n+        &self,\n+        name: String,\n+        table: Arc<dyn TableProvider>,\n\nReview comment:\n       The underscore method was my first approach here but I then discovered that it carried those symbols through to the docs as well (e.g. inline parameter names in vscode using rust analyser - presumably also the generated ones in docs.rs too? didn't test that bit)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T20:25:24.366+0000",
                    "updated": "2021-03-22T20:25:24.366+0000",
                    "started": "2021-03-22T20:25:24.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570026",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on a change in pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#discussion_r599063974\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -512,6 +573,12 @@ pub struct ExecutionConfig {\n     optimizers: Vec<Arc<dyn OptimizerRule + Send + Sync>>,\n     /// Responsible for planning `LogicalPlan`s, and `ExecutionPlan`\n     query_planner: Arc<dyn QueryPlanner + Send + Sync>,\n+    /// Default catalog name for table resolution\n+    default_catalog: String,\n\nReview comment:\n       This is a very good question!\r\n   \r\n   I think we could allow for that distinction, but it gets a little bit messy as we'd probably want to enforce that you can't have a default schema without a default catalog, so it'd look something like `Option<(String, Option<String>)>` (in fact, I had something like that for a bit before I settled on just using `datafusion.public` as the default setting for back-compat).\r\n   \r\n   I'm struggling to think of a use case though \ud83e\udd14 Maybe if someone were developing a system where they wanted to _force_ users to fully qualify their table names?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T20:48:37.516+0000",
                    "updated": "2021-03-22T20:48:37.516+0000",
                    "started": "2021-03-22T20:48:37.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570037",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570054",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#discussion_r599086894\n\n\n\n##########\nFile path: rust/datafusion/src/catalog/catalog.rs\n##########\n@@ -0,0 +1,78 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Describes the interface and built-in implementations of catalogs,\n+//! representing collections of named schemas.\n+\n+use crate::catalog::schema::SchemaProvider;\n+use std::any::Any;\n+use std::collections::HashMap;\n+use std::sync::{Arc, RwLock};\n+\n+/// Represents a catalog, comprising a number of named schemas.\n+pub trait CatalogProvider: Sync + Send {\n+    /// Returns the catalog provider as [`Any`](std::any::Any)\n+    /// so that it can be downcast to a specific implementation.\n+    fn as_any(&self) -> &dyn Any;\n+\n+    /// Retrieves the list of available schema names in this catalog.\n+    fn schema_names(&self) -> Vec<String>;\n\nReview comment:\n       Vec<&str> might be possible\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-22T21:27:43.712+0000",
                    "updated": "2021-03-22T21:27:43.712+0000",
                    "started": "2021-03-22T21:27:43.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570054",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-804925070\n\n\n   @returnString  do you plan anything else for this PR? I think it is ready to merge but I wanted to check to see if you think there is anything else left to do?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T13:58:47.927+0000",
                    "updated": "2021-03-23T13:58:47.927+0000",
                    "started": "2021-03-23T13:58:47.927+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570467",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "returnString commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-804935745\n\n\n   > @returnString do you plan anything else for this PR? I think it is ready to merge but I wanted to check to see if you think there is anything else left to do?\r\n   \r\n   I was looking to see if I could improve the test setup any further, but on reflection I'm actually pretty happy with the state of things; I don't think we're missing any use cases in the coverage (at least, ones I can conceive of right now). So from my side, happy with things as they are :)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T14:12:45.131+0000",
                    "updated": "2021-03-23T14:12:45.131+0000",
                    "started": "2021-03-23T14:12:45.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570482",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb closed pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T22:19:45.396+0000",
                    "updated": "2021-03-23T22:19:45.396+0000",
                    "started": "2021-03-23T22:19:45.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570825",
                    "issueId": "13366536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/worklog/570827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9762:\nURL: https://github.com/apache/arrow/pull/9762#issuecomment-805304397\n\n\n   Thanks again @returnString ! This is a great feature\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-23T22:20:01.207+0000",
                    "updated": "2021-03-23T22:20:01.207+0000",
                    "started": "2021-03-23T22:20:01.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "570827",
                    "issueId": "13366536"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 12000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2c9dac4e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@206f397b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a6c8a30[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1391c6e7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@378880d8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@29826a99[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7915893[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1aaa0078[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@69d7ddb5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@533ba4b4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ee33b80[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@148049e4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 23 22:19:39 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-23T22:19:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12037/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-03-20T22:13:17.000+0000",
        "updated": "2021-03-23T22:20:02.000+0000",
        "timeoriginalestimate": null,
        "description": "Proposal doc: [https://docs.google.com/document/d/1_bCP_tjVRLJyOrMBOezSFNpF0hwPa1ZS_qMWv1uvtS4/edit?usp=sharing]\r\n\r\n\u00a0\r\n\r\nSummary from the doc:\r\n\r\n\r\n\r\nThis is a particularly messy aspect of most SQL implementations, so let\u2019s settle on some terms first:\r\n * Schema: a collection of named tables\r\n * Catalog: a collection of named schemas (also known as a database)\r\n\r\nThis doc will attempt to describe a standards-compliant implementation for DataFusion, using Postgres\u2019 design decisions as a guide where the standard is not prescriptive (due to our adoption of its query dialect).\r\n\r\nAs an example of how this works in practice, given a default catalog of \u201cdb\u201d and a default schema of \u201cpublic\u201d, all these table references would be equivalent:\r\n * db.public.my_table\r\n * public.my_table\r\n * my_table",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Support catalogs and schemas for table namespacing",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13366536/comment/17307445",
                    "id": "17307445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9762\n[https://github.com/apache/arrow/pull/9762]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-03-23T22:19:39.153+0000",
                    "updated": "2021-03-23T22:19:39.153+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0p0gg:",
        "customfield_12314139": null
    }
}