{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13203485",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485",
    "key": "ARROW-3989",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3989/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me opened a new pull request #3214: [ARROW-3989]: [Rust] Cast boolean string to lower case to handle True, TRUE\nURL: https://github.com/apache/arrow/pull/3214\n \n \n   The csv reader currently only handles boolean types if the string is explicitly `true|false`. Excel saves bools as `TRUE|FALSE`, and Python/Pandas as `True|False`.\r\n   \r\n   This PR adds a condition that lowercases booleans when casting them to Arrow types.\r\n   \r\n   @andygrove @sunchao I believe it's ready for review.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T11:49:48.520+0000",
                    "updated": "2018-12-18T11:49:48.520+0000",
                    "started": "2018-12-18T11:49:48.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176491",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3214: [ARROW-3989]: [Rust] Cast boolean string to lower case to handle True, TRUE\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242508768\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   There might be a more efficient way of getting this to work without creating a mutable String, but I couldn't win against the borrow-checker.\r\n   \r\n   Regarding doing this outside of this function, I thought of mutating `csv::StringRecord` and changing the case of the inner strings; but I couldn't find a way of doing it (I searched [docs.rs](https://docs.rs/csv/1.0.5/csv/struct.StringRecord.html))\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T11:57:03.328+0000",
                    "updated": "2018-12-18T11:57:03.328+0000",
                    "started": "2018-12-18T11:57:03.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176497",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176753",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242701837\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   Seems unfortunately that we need to create a new string. Can we only do the `to_string` for `BooleanType`? maybe something like:\r\n   ```rust\r\n       for row_index in 0..rows.len() {\r\n           let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\r\n           match rows[row_index].get(*col_idx) {\r\n               Some(s) if s.len() > 0 => {\r\n                   let t = if is_boolean_type {\r\n                       s.to_lowercase().parse::<T::Native>()\r\n                   } else {\r\n                       s.parse::<T::Native>()\r\n                   };\r\n                   match t {\r\n                       Ok(v) => builder.push(v)?,\r\n                       Err(_) => {\r\n                           // TODO: we should surface the underlying error here.\r\n                           return Err(ArrowError::ParseError(format!(\r\n                               \"Error while parsing value {}\",\r\n                               s\r\n                           )));\r\n                       }\r\n                   }\r\n               }\r\n               _ => builder.push_null().unwrap(),\r\n           }\r\n       }\r\n   ```\r\n   \r\n   Also, we are checking `is_boolean_type` inside the loop. Please move it outside. Could we also make the `build_primitive_array` a member function of `Reader`? and use the schema to check the type?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T20:55:22.658+0000",
                    "updated": "2018-12-18T20:55:22.658+0000",
                    "started": "2018-12-18T20:55:22.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176753",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242732422\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   Thanks @sunchao, I moved the `is_boolean_type` check outside the loop, I missed that.\r\n   \r\n   I think that even if I make the `build_primitive_array` a (private?) member function, I can't improve on what it's currently doing (the part about using the schema to check the type).\r\n   \r\n   ```rust\r\n   fn build_primitive_array<T: ArrowPrimitiveType>(\r\n       rows: &[StringRecord],\r\n       col_idx: &usize,\r\n   ) -> Result<ArrayRef>;\r\n   ```\r\n   \r\n   If I change it to take the schema, I won't know which columns the schema maps to, as I could be supplying a projection of 3 columns out of a 5 column csv.\r\n   \r\n   ```rust\r\n   impl Reader {\r\n       // thinking of it, this won't work, so it's probably not what you mean\r\n       // there's Utf8 arrays which follow a different path, \r\n       // and date/time will probably not use the same build_primitive_arrays\r\n       fn build_primitive_arrays(\r\n           rows: &[StringRecord],\r\n           schema: Arc<Schema>,\r\n       ) -> Result<Vec<ArrayRef>>;\r\n   }\r\n   ```\r\n   \r\n   Or am I not reasoning about it well? I still have a lot to learn on Rust\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-18T22:38:23.105+0000",
                    "updated": "2018-12-18T22:38:23.105+0000",
                    "started": "2018-12-18T22:38:23.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176779",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242761516\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   Thanks for the update.\r\n   \r\n   > If I change it to take the schema, I won't know which columns the schema maps to, as I could be supplying a projection of 3 columns out of a 5 column csv.\r\n   \r\n   With the `col_idx`, you should get the corresponding type by looking up `self.schema`:\r\n   \r\n   ```rust\r\n       fn build_primitive_array<T: ArrowPrimitiveType>(\r\n           &self,\r\n           rows: &[StringRecord],\r\n           col_idx: usize,\r\n       ) -> Result<ArrayRef> {\r\n           let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\r\n           for row_index in 0..rows.len() {\r\n               let is_boolean_type = *self.schema.field(col_idx).data_type() == DataType::Boolean;\r\n       ....\r\n   ```\r\n   \r\n   You'll need to update the `projection` to use `into_iter` rather than `iter` - so you can use `usize` instead of `&usize` for `col_idx`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T01:03:30.760+0000",
                    "updated": "2018-12-19T01:03:30.760+0000",
                    "started": "2018-12-19T01:03:30.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176823",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242796251\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   I don't think it'll always work, it only works if the user doesn't supply a projection that excludes some columns.\r\n   \r\n   If I have a csv with 5 cols, and I supply `vec![0,2,4]` as my column projection, and `Schema(bool, int32, utf8)` as my schema for those 3 columns:\r\n   \r\n   ```rust\r\n   *self.schema.field(col_idx).data_type() == DataType::Boolean;\r\n   ```\r\n   \r\n   The `col_idx` will refer to 0, 2, and 4 because `csv::StringRecord` will contain all 5 columns of the csv. Indexing the schema's fields could be out of bounds.\r\n   \r\n   What do you think?\r\n   \r\n   Now that I look at it, #3128 is inefficient as I infer the whole schema, ignoring projection. With projection supplied, it might have buggy behaviour (I'll test that now)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T05:40:57.157+0000",
                    "updated": "2018-12-19T05:40:57.157+0000",
                    "started": "2018-12-19T05:40:57.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176859",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242800619\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   Hmm. I think `self.schema` is the schema for the whole CSV file, not the projection's. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T06:12:23.748+0000",
                    "updated": "2018-12-19T06:12:23.748+0000",
                    "started": "2018-12-19T06:12:23.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176862",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242804468\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   I just came to that realisation now on a different matter \ud83e\udd14, I was trying to optimise schema inference to ignore columns that aren't projected, but got bounds errors.\r\n   \r\n   I'll follow your approach. Thanks again\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T06:40:24.001+0000",
                    "updated": "2018-12-19T06:40:24.001+0000",
                    "started": "2018-12-19T06:40:24.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176865",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214#discussion_r242805972\n \n \n\n ##########\n File path: rust/src/csv/reader.rs\n ##########\n @@ -95,17 +96,24 @@ fn build_primitive_array<T: ArrowPrimitiveType>(\n ) -> Result<ArrayRef> {\n     let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n     for row_index in 0..rows.len() {\n+        let is_boolean_type = TypeId::of::<T>() == TypeId::of::<BooleanType>();\n         match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n+            Some(s) if s.len() > 0 => {\n+                let mut ss = s.to_string();\n \n Review comment:\n   Done. PTAL\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T06:51:03.754+0000",
                    "updated": "2018-12-19T06:51:03.754+0000",
                    "started": "2018-12-19T06:51:03.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176866",
                    "issueId": "13203485"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/worklog/176962",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs closed pull request #3214: ARROW-3989: [Rust] [CSV] Cast bool string to lower case in reader\nURL: https://github.com/apache/arrow/pull/3214\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/src/csv/reader.rs b/rust/src/csv/reader.rs\nindex 632aa7ae79..b9c46fc321 100644\n--- a/rust/src/csv/reader.rs\n+++ b/rust/src/csv/reader.rs\n@@ -87,32 +87,7 @@ impl Reader {\n             batch_size,\n         }\n     }\n-}\n \n-fn build_primitive_array<T: ArrowPrimitiveType>(\n-    rows: &[StringRecord],\n-    col_idx: &usize,\n-) -> Result<ArrayRef> {\n-    let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n-    for row_index in 0..rows.len() {\n-        match rows[row_index].get(*col_idx) {\n-            Some(s) if s.len() > 0 => match s.parse::<T::Native>() {\n-                Ok(v) => builder.push(v)?,\n-                Err(_) => {\n-                    // TODO: we should surface the underlying error here.\n-                    return Err(ArrowError::ParseError(format!(\n-                        \"Error while parsing value {}\",\n-                        s\n-                    )));\n-                }\n-            },\n-            _ => builder.push_null().unwrap(),\n-        }\n-    }\n-    Ok(Arc::new(builder.finish()) as ArrayRef)\n-}\n-\n-impl Reader {\n     /// Read the next batch of rows\n     pub fn next(&mut self) -> Result<Option<RecordBatch>> {\n         // read a batch of rows into memory\n@@ -151,17 +126,17 @@ impl Reader {\n             .map(|i| {\n                 let field = self.schema.field(*i);\n                 match field.data_type() {\n-                    &DataType::Boolean => build_primitive_array::<BooleanType>(rows, i),\n-                    &DataType::Int8 => build_primitive_array::<Int8Type>(rows, i),\n-                    &DataType::Int16 => build_primitive_array::<Int16Type>(rows, i),\n-                    &DataType::Int32 => build_primitive_array::<Int32Type>(rows, i),\n-                    &DataType::Int64 => build_primitive_array::<Int64Type>(rows, i),\n-                    &DataType::UInt8 => build_primitive_array::<UInt8Type>(rows, i),\n-                    &DataType::UInt16 => build_primitive_array::<UInt16Type>(rows, i),\n-                    &DataType::UInt32 => build_primitive_array::<UInt32Type>(rows, i),\n-                    &DataType::UInt64 => build_primitive_array::<UInt64Type>(rows, i),\n-                    &DataType::Float32 => build_primitive_array::<Float32Type>(rows, i),\n-                    &DataType::Float64 => build_primitive_array::<Float64Type>(rows, i),\n+                    &DataType::Boolean => self.build_primitive_array::<BooleanType>(rows, i),\n+                    &DataType::Int8 => self.build_primitive_array::<Int8Type>(rows, i),\n+                    &DataType::Int16 => self.build_primitive_array::<Int16Type>(rows, i),\n+                    &DataType::Int32 => self.build_primitive_array::<Int32Type>(rows, i),\n+                    &DataType::Int64 => self.build_primitive_array::<Int64Type>(rows, i),\n+                    &DataType::UInt8 => self.build_primitive_array::<UInt8Type>(rows, i),\n+                    &DataType::UInt16 => self.build_primitive_array::<UInt16Type>(rows, i),\n+                    &DataType::UInt32 => self.build_primitive_array::<UInt32Type>(rows, i),\n+                    &DataType::UInt64 => self.build_primitive_array::<UInt64Type>(rows, i),\n+                    &DataType::Float32 => self.build_primitive_array::<Float32Type>(rows, i),\n+                    &DataType::Float64 => self.build_primitive_array::<Float64Type>(rows, i),\n                     &DataType::Utf8 => {\n                         let values_builder: UInt8Builder = UInt8Builder::new(rows.len());\n                         let mut list_builder = ListArrayBuilder::new(values_builder);\n@@ -191,6 +166,38 @@ impl Reader {\n             Err(e) => Err(e),\n         }\n     }\n+\n+    fn build_primitive_array<T: ArrowPrimitiveType>(\n+        &self,\n+        rows: &[StringRecord],\n+        col_idx: &usize,\n+    ) -> Result<ArrayRef> {\n+        let mut builder = PrimitiveArrayBuilder::<T>::new(rows.len());\n+        let is_boolean_type = *self.schema.field(*col_idx).data_type() == DataType::Boolean;\n+        for row_index in 0..rows.len() {\n+            match rows[row_index].get(*col_idx) {\n+                Some(s) if s.len() > 0 => {\n+                    let t = if is_boolean_type {\n+                        s.to_lowercase().parse::<T::Native>()\n+                    } else {\n+                        s.parse::<T::Native>()\n+                    };\n+                    match t {\n+                        Ok(v) => builder.push(v)?,\n+                        Err(_) => {\n+                            // TODO: we should surface the underlying error here.\n+                            return Err(ArrowError::ParseError(format!(\n+                                \"Error while parsing value {}\",\n+                                s\n+                            )));\n+                        }\n+                    }\n+                }\n+                _ => builder.push_null()?,\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }\n }\n \n #[cfg(test)]\ndiff --git a/rust/test/data/null_test.csv b/rust/test/data/null_test.csv\nindex 8083060656..7e0dde5371 100644\n--- a/rust/test/data/null_test.csv\n+++ b/rust/test/data/null_test.csv\n@@ -1,6 +1,6 @@\n c_int,c_float,c_string,c_bool\n-1,1.1,\"1.11\",true\n-2,2.2,\"2.22\",true\n+1,1.1,\"1.11\",True\n+2,2.2,\"2.22\",TRUE\n 3,,\"3.33\",true\n-4,4.4,,false\n-5,6.6,\"\",false\n\\ No newline at end of file\n+4,4.4,,False\n+5,6.6,\"\",FALSE\n\\ No newline at end of file\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-19T12:57:57.786+0000",
                    "updated": "2018-12-19T12:57:57.786+0000",
                    "started": "2018-12-19T12:57:57.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176962",
                    "issueId": "13203485"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4499a068[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a40c187[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2490dbd1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@68107a3d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c592fd5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@ccd605b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ea17c40[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@458b2a3b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@305992d8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@57f1e330[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7297d6f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6ed1f069[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 19 13:24:22 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-19T12:57:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3989/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-12-10T17:31:47.000+0000",
        "updated": "2018-12-19T13:24:22.000+0000",
        "timeoriginalestimate": null,
        "description": "Excel saves booleans in CSV in upper case, Pandas uses Proper case.\r\n\r\nOur CSV reader doesn't recognise (True,\u00a0False, TRUE, FALSE). I noticed this when making boolean schema inference case insensitive.\r\n\r\n\u00a0\r\n\r\nI would propose that we convert Boolean strings to lower-case before casting them to Rust's bool type. [~andygrove], what do you think?",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] CSV reader should handle case sensitivity for boolean values",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/comment/16724973",
                    "id": "16724973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Issue resolved by pull request 3214\n[https://github.com/apache/arrow/pull/3214]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-12-19T12:57:48.731+0000",
                    "updated": "2018-12-19T12:57:48.731+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/comment/16724983",
                    "id": "16724983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "[~wesmckinn] I can't assign the issue to [~nevi_me], it says no matches. Any ideas?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-12-19T13:06:52.744+0000",
                    "updated": "2018-12-19T13:06:52.744+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/comment/16724990",
                    "id": "16724990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "New contributors need to first be added to the contributiors role in JIRA, then you can assign things to them.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-12-19T13:15:30.662+0000",
                    "updated": "2018-12-19T13:15:30.662+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/comment/16724994",
                    "id": "16724994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Done.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-12-19T13:18:06.819+0000",
                    "updated": "2018-12-19T13:18:06.819+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13203485/comment/16724996",
                    "id": "16724996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Thanks, didn't know that.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2018-12-19T13:24:22.488+0000",
                    "updated": "2018-12-19T13:24:22.488+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|s01cwg:",
        "customfield_12314139": null
    }
}