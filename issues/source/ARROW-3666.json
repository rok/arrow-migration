{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13195496",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496",
    "key": "ARROW-3666",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3666/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/161323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886\n \n \n   Make CSV parsing around 30% faster.\r\n   \r\n   Benchmark of reading a CSV file with integer columns. Before:\r\n   * multi-threaded: 1.2 GB/s\r\n   * single-threaded: 190 MB/s\r\n   \r\n   After:\r\n   * multi-threaded: 1.6 GB/s\r\n   * single-threaded: 210 MB/s\r\n   \r\n   (on a 8-core 16-thread AMD Ryzen CPU)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:33:20.542+0000",
                    "updated": "2018-10-31T21:33:20.542+0000",
                    "started": "2018-10-31T21:33:20.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161323",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/161324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-434855756\n \n \n   I'm open to suggestions so as to make this more readable and maintainable. Should probably add some comments.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:33:56.583+0000",
                    "updated": "2018-10-31T21:33:56.583+0000",
                    "started": "2018-10-31T21:33:56.582+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161324",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/161344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-434860670\n \n \n   For the record, we're about 30% faster than [Paratext](https://github.com/wiseio/paratext) when reading a CSV file of floating-point numbers. Even if we call `to_pandas()` on the result, we're still slightly faster.\r\n   \r\n   As for other types (binary, ints), Paratext seems either broken or insanely slow on those.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T21:52:03.110+0000",
                    "updated": "2018-10-31T21:52:03.110+0000",
                    "started": "2018-10-31T21:52:03.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161344",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/161390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-434883997\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@2cdc4d4`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `96.64%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2886/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #2886   +/-   ##\n   =========================================\n     Coverage          ?   87.27%           \n   =========================================\n     Files             ?      404           \n     Lines             ?    63056           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    55031           \n     Misses            ?     7931           \n     Partials          ?       94\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/csv/reader.cc](https://codecov.io/gh/apache/arrow/pull/2886/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcmVhZGVyLmNj) | `88.82% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/csv/parser.h](https://codecov.io/gh/apache/arrow/pull/2886/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLmg=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/csv/parser.cc](https://codecov.io/gh/apache/arrow/pull/2886/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLmNj) | `95.45% <96.36%> (\u00f8)` | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=footer). Last update [2cdc4d4...73b38ed](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T23:40:08.812+0000",
                    "updated": "2018-10-31T23:40:08.812+0000",
                    "started": "2018-10-31T23:40:08.812+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161390",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/161394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-434883997\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=h1) Report\n   > :exclamation: No coverage uploaded for pull request base (`master@2cdc4d4`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n   > The diff coverage is `96.64%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2886/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff            @@\n   ##             master    #2886   +/-   ##\n   =========================================\n     Coverage          ?   87.27%           \n   =========================================\n     Files             ?      404           \n     Lines             ?    63056           \n     Branches          ?        0           \n   =========================================\n     Hits              ?    55031           \n     Misses            ?     7931           \n     Partials          ?       94\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/csv/reader.cc](https://codecov.io/gh/apache/arrow/pull/2886/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcmVhZGVyLmNj) | `88.82% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/csv/parser.h](https://codecov.io/gh/apache/arrow/pull/2886/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLmg=) | `100% <100%> (\u00f8)` | |\n   | [cpp/src/arrow/csv/parser.cc](https://codecov.io/gh/apache/arrow/pull/2886/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvcGFyc2VyLmNj) | `95.45% <96.36%> (\u00f8)` | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=footer). Last update [2cdc4d4...73b38ed](https://codecov.io/gh/apache/arrow/pull/2886?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-31T23:47:43.795+0000",
                    "updated": "2018-10-31T23:47:43.795+0000",
                    "started": "2018-10-31T23:47:43.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "161394",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#discussion_r230604970\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -38,133 +41,242 @@ static Status MismatchingColumns(int32_t expected, int32_t actual) {\n   return ParseError(s);\n }\n \n-BlockParser::BlockParser(ParseOptions options, int32_t num_cols, int32_t max_num_rows)\n-    : options_(options), num_cols_(num_cols), max_num_rows_(max_num_rows) {}\n+template <bool Quoting, bool Escaping>\n+class SpecializedOptions {\n+ public:\n+  static constexpr bool quoting = Quoting;\n+  static constexpr bool escaping = Escaping;\n+};\n+\n+class BlockParser::PresizedParsedWriter {\n+ public:\n+  PresizedParsedWriter(MemoryPool* pool, uint32_t size)\n+      : parsed_size_(0), parsed_capacity_(size) {\n+    ARROW_CHECK_OK(AllocateResizableBuffer(pool, parsed_capacity_, &parsed_buffer_));\n+    parsed_ = parsed_buffer_->mutable_data();\n+  }\n+\n+  void Finish(std::shared_ptr<Buffer>* out_parsed) {\n+    ARROW_CHECK_OK(parsed_buffer_->Resize(parsed_size_));\n \n Review comment:\n   You might pass `shrink_to_fit=false` to avoid realloc here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-04T21:05:29.883+0000",
                    "updated": "2018-11-04T21:05:29.883+0000",
                    "started": "2018-11-04T21:05:29.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162356",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#discussion_r230605059\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -183,52 +296,133 @@ Status BlockParser::ParseLine(const char* data, const char* data_end, bool is_fi\n     return Status::OK();\n   }\n   // Truncated line at end of block, rewind parsed state\n-  RewindState();\n+  values_writer.RollbackLine();\n+  parsed_writer.RollbackLine();\n   return Status::OK();\n }\n \n-Status BlockParser::DoParse(const char* start, uint32_t size, bool is_final,\n-                            uint32_t* out_size) {\n-  num_rows_ = 0;\n-  // These don't shrink the allocated capacity, so reuses of BlockParser\n-  // avoid most allocations when appending data\n-  parsed_.clear();\n-#ifdef CSV_PARSER_USE_BITFIELD\n-  values_.clear();\n-  values_.push_back({0, false});\n-#else\n-  offsets_.clear();\n-  offsets_.push_back(0);\n-  quoted_.clear();\n-#endif\n-\n-  const char* data = start;\n-  const char* data_end = start + size;\n-\n-  while (data < data_end && num_rows_ < max_num_rows_) {\n+template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n+Status BlockParser::ParseChunk(ValuesWriter& values_writer, ParsedWriter& parsed_writer,\n \n Review comment:\n   Consider using `T*` instead of `T&` for these first two arguments\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-04T21:05:29.899+0000",
                    "updated": "2018-11-04T21:05:29.899+0000",
                    "started": "2018-11-04T21:05:29.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162357",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-435706049\n \n \n   Is the improved performance here mostly from the memory optimization in the presized case?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-04T21:05:55.101+0000",
                    "updated": "2018-11-04T21:05:55.101+0000",
                    "started": "2018-11-04T21:05:55.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162358",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#discussion_r230729005\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -38,133 +41,242 @@ static Status MismatchingColumns(int32_t expected, int32_t actual) {\n   return ParseError(s);\n }\n \n-BlockParser::BlockParser(ParseOptions options, int32_t num_cols, int32_t max_num_rows)\n-    : options_(options), num_cols_(num_cols), max_num_rows_(max_num_rows) {}\n+template <bool Quoting, bool Escaping>\n+class SpecializedOptions {\n+ public:\n+  static constexpr bool quoting = Quoting;\n+  static constexpr bool escaping = Escaping;\n+};\n+\n+class BlockParser::PresizedParsedWriter {\n+ public:\n+  PresizedParsedWriter(MemoryPool* pool, uint32_t size)\n+      : parsed_size_(0), parsed_capacity_(size) {\n+    ARROW_CHECK_OK(AllocateResizableBuffer(pool, parsed_capacity_, &parsed_buffer_));\n+    parsed_ = parsed_buffer_->mutable_data();\n+  }\n+\n+  void Finish(std::shared_ptr<Buffer>* out_parsed) {\n+    ARROW_CHECK_OK(parsed_buffer_->Resize(parsed_size_));\n \n Review comment:\n   It doesn't seem to make much of a difference though. Shrinking may help reduce the memory footprint a bit.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T12:15:33.886+0000",
                    "updated": "2018-11-05T12:15:33.886+0000",
                    "started": "2018-11-05T12:15:33.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162492",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#discussion_r230729023\n \n \n\n ##########\n File path: cpp/src/arrow/csv/parser.cc\n ##########\n @@ -183,52 +296,133 @@ Status BlockParser::ParseLine(const char* data, const char* data_end, bool is_fi\n     return Status::OK();\n   }\n   // Truncated line at end of block, rewind parsed state\n-  RewindState();\n+  values_writer.RollbackLine();\n+  parsed_writer.RollbackLine();\n   return Status::OK();\n }\n \n-Status BlockParser::DoParse(const char* start, uint32_t size, bool is_final,\n-                            uint32_t* out_size) {\n-  num_rows_ = 0;\n-  // These don't shrink the allocated capacity, so reuses of BlockParser\n-  // avoid most allocations when appending data\n-  parsed_.clear();\n-#ifdef CSV_PARSER_USE_BITFIELD\n-  values_.clear();\n-  values_.push_back({0, false});\n-#else\n-  offsets_.clear();\n-  offsets_.push_back(0);\n-  quoted_.clear();\n-#endif\n-\n-  const char* data = start;\n-  const char* data_end = start + size;\n-\n-  while (data < data_end && num_rows_ < max_num_rows_) {\n+template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n+Status BlockParser::ParseChunk(ValuesWriter& values_writer, ParsedWriter& parsed_writer,\n \n Review comment:\n   Will do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T12:15:39.310+0000",
                    "updated": "2018-11-05T12:15:39.310+0000",
                    "started": "2018-11-05T12:15:39.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162494",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-435854765\n \n \n   > Is the improved performance here mostly from the memory optimization in the presized case?\r\n   \r\n   Not only, I think it's also simpler code being generated. CSV parsing has a lot of data-dependent branching in its critical path. I don't know how reliable the numbers are, but `perf stat` reports more than one billion branches per second in single-threaded mode.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T12:18:42.612+0000",
                    "updated": "2018-11-05T12:18:42.612+0000",
                    "started": "2018-11-05T12:18:42.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162496",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886#issuecomment-435937604\n \n \n   +1, will merge.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T16:24:00.684+0000",
                    "updated": "2018-11-05T16:24:00.684+0000",
                    "started": "2018-11-05T16:24:00.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162568",
                    "issueId": "13195496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/worklog/162569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #2886: ARROW-3666: [C++] Improve C++ parser performance\nURL: https://github.com/apache/arrow/pull/2886\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/csv/parser.cc b/cpp/src/arrow/csv/parser.cc\nindex 240b1f81f6..ea602dfc86 100644\n--- a/cpp/src/arrow/csv/parser.cc\n+++ b/cpp/src/arrow/csv/parser.cc\n@@ -17,9 +17,12 @@\n \n #include \"arrow/csv/parser.h\"\n \n+#include <algorithm>\n #include <cstdio>\n #include <sstream>\n+#include <utility>\n \n+#include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n #include \"arrow/util/logging.h\"\n \n@@ -38,109 +41,228 @@ static Status MismatchingColumns(int32_t expected, int32_t actual) {\n   return ParseError(s);\n }\n \n-BlockParser::BlockParser(ParseOptions options, int32_t num_cols, int32_t max_num_rows)\n-    : options_(options), num_cols_(num_cols), max_num_rows_(max_num_rows) {}\n+template <bool Quoting, bool Escaping>\n+class SpecializedOptions {\n+ public:\n+  static constexpr bool quoting = Quoting;\n+  static constexpr bool escaping = Escaping;\n+};\n+\n+// A helper class allocating the buffer for parsed values and writing into it\n+// without any further resizes, except at the end.\n+class BlockParser::PresizedParsedWriter {\n+ public:\n+  PresizedParsedWriter(MemoryPool* pool, uint32_t size)\n+      : parsed_size_(0), parsed_capacity_(size) {\n+    ARROW_CHECK_OK(AllocateResizableBuffer(pool, parsed_capacity_, &parsed_buffer_));\n+    parsed_ = parsed_buffer_->mutable_data();\n+  }\n+\n+  void Finish(std::shared_ptr<Buffer>* out_parsed) {\n+    ARROW_CHECK_OK(parsed_buffer_->Resize(parsed_size_));\n+    *out_parsed = parsed_buffer_;\n+  }\n+\n+  void BeginLine() { saved_parsed_size_ = parsed_size_; }\n+\n+  void PushFieldChar(char c) {\n+    DCHECK_LT(parsed_size_, parsed_capacity_);\n+    parsed_[parsed_size_++] = static_cast<uint8_t>(c);\n+  }\n+\n+  // Rollback the state that was saved in BeginLine()\n+  void RollbackLine() { parsed_size_ = saved_parsed_size_; }\n+\n+  int64_t size() { return parsed_size_; }\n+\n+  std::shared_ptr<ResizableBuffer> parsed_buffer_;\n+  uint8_t* parsed_;\n+  int64_t parsed_size_;\n+  int64_t parsed_capacity_;\n+  // Checkpointing, for when an incomplete line is encountered at end of block\n+  int64_t saved_parsed_size_;\n+};\n+\n+// A helper class handling a growable buffer for values offsets.  This class is\n+// used when the number of columns is not yet known and we therefore cannot\n+// efficiently presize the target area for a given number of rows.\n+class BlockParser::ResizableValuesWriter {\n+ public:\n+  explicit ResizableValuesWriter(MemoryPool* pool)\n+      : values_size_(0), values_capacity_(256) {\n+    ARROW_CHECK_OK(AllocateResizableBuffer(pool, values_capacity_ * sizeof(*values_),\n+                                           &values_buffer_));\n+    values_ = reinterpret_cast<ValueDesc*>(values_buffer_->mutable_data());\n+  }\n+\n+  template <typename ParsedWriter>\n+  void Start(ParsedWriter& parsed_writer) {\n+    PushValue({static_cast<uint32_t>(parsed_writer.size()) & 0x7fffffffU, false});\n+  }\n+\n+  void Finish(std::shared_ptr<Buffer>* out_values) {\n+    ARROW_CHECK_OK(values_buffer_->Resize(values_size_ * sizeof(*values_)));\n+    *out_values = values_buffer_;\n+  }\n+\n+  void BeginLine() { saved_values_size_ = values_size_; }\n+\n+  void StartField(bool quoted) { quoted_ = quoted; }\n+\n+  template <typename ParsedWriter>\n+  void FinishField(ParsedWriter* parsed_writer) {\n+    PushValue({static_cast<uint32_t>(parsed_writer->size()) & 0x7fffffffU, quoted_});\n+  }\n+\n+  // Rollback the state that was saved in BeginLine()\n+  void RollbackLine() { values_size_ = saved_values_size_; }\n+\n+ protected:\n+  void PushValue(ValueDesc v) {\n+    if (ARROW_PREDICT_FALSE(values_size_ == values_capacity_)) {\n+      values_capacity_ = values_capacity_ * 2;\n+      ARROW_CHECK_OK(values_buffer_->Resize(values_capacity_ * sizeof(*values_)));\n+      values_ = reinterpret_cast<ValueDesc*>(values_buffer_->mutable_data());\n+    }\n+    values_[values_size_++] = v;\n+  }\n+\n+  std::shared_ptr<ResizableBuffer> values_buffer_;\n+  ValueDesc* values_;\n+  int64_t values_size_;\n+  int64_t values_capacity_;\n+  bool quoted_;\n+  // Checkpointing, for when an incomplete line is encountered at end of block\n+  int64_t saved_values_size_;\n+};\n \n-Status BlockParser::ParseLine(const char* data, const char* data_end, bool is_final,\n+// A helper class allocating the buffer for values offsets and writing into it\n+// without any further resizes, except at the end.  This class is used once the\n+// number of columns is known, as it eliminates resizes and generates simpler,\n+// faster CSV parsing code.\n+class BlockParser::PresizedValuesWriter {\n+ public:\n+  PresizedValuesWriter(MemoryPool* pool, int32_t num_rows, int32_t num_cols)\n+      : values_size_(0), values_capacity_(1 + num_rows * num_cols) {\n+    ARROW_CHECK_OK(AllocateResizableBuffer(pool, values_capacity_ * sizeof(*values_),\n+                                           &values_buffer_));\n+    values_ = reinterpret_cast<ValueDesc*>(values_buffer_->mutable_data());\n+  }\n+\n+  template <typename ParsedWriter>\n+  void Start(ParsedWriter& parsed_writer) {\n+    PushValue({static_cast<uint32_t>(parsed_writer.size()) & 0x7fffffffU, false});\n+  }\n+\n+  void Finish(std::shared_ptr<Buffer>* out_values) {\n+    ARROW_CHECK_OK(values_buffer_->Resize(values_size_ * sizeof(*values_)));\n+    *out_values = values_buffer_;\n+  }\n+\n+  void BeginLine() { saved_values_size_ = values_size_; }\n+\n+  void StartField(bool quoted) { quoted_ = quoted; }\n+\n+  template <typename ParsedWriter>\n+  void FinishField(ParsedWriter* parsed_writer) {\n+    PushValue({static_cast<uint32_t>(parsed_writer->size()) & 0x7fffffffU, quoted_});\n+  }\n+\n+  // Rollback the state that was saved in BeginLine()\n+  void RollbackLine() { values_size_ = saved_values_size_; }\n+\n+ protected:\n+  void PushValue(ValueDesc v) {\n+    DCHECK_LT(values_size_, values_capacity_);\n+    values_[values_size_++] = v;\n+  }\n+\n+  std::shared_ptr<ResizableBuffer> values_buffer_;\n+  ValueDesc* values_;\n+  int64_t values_size_;\n+  const int64_t values_capacity_;\n+  bool quoted_;\n+  // Checkpointing, for when an incomplete line is encountered at end of block\n+  int64_t saved_values_size_;\n+};\n+\n+template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n+Status BlockParser::ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_writer,\n+                              const char* data, const char* data_end, bool is_final,\n                               const char** out_data) {\n   int32_t num_cols = 0;\n   char c;\n-#ifdef CSV_PARSER_USE_BITFIELD\n-  bool quoted;\n-#endif\n \n-  auto saved_parsed_size = parsed_.size();\n-#ifdef CSV_PARSER_USE_BITFIELD\n-  auto saved_values_size = values_.size();\n-#else\n-  auto saved_offsets_size = offsets_.size();\n-  auto saved_quoted_size = quoted_.size();\n-#endif\n+  values_writer->BeginLine();\n+  parsed_writer->BeginLine();\n \n-  // Subroutines to manage parser state\n-  auto InitField = [&]() {};\n-  auto PushFieldChar = [&](char c) { parsed_.push_back(static_cast<uint8_t>(c)); };\n-  auto FinishField = [&]() {\n-#ifdef CSV_PARSER_USE_BITFIELD\n-    ValueDesc v = {static_cast<uint32_t>(parsed_.size()) & 0x7fffffffU, quoted};\n-    values_.push_back(v);\n-#else\n-    offsets_.push_back(parsed_.size());\n-#endif\n-    ++num_cols;\n-  };\n-  auto RewindState = [&]() {\n-    parsed_.resize(saved_parsed_size);\n-#ifdef CSV_PARSER_USE_BITFIELD\n-    values_.resize(saved_values_size);\n-#else\n-    offsets_.resize(saved_offsets_size);\n-    quoted_.resize(saved_quoted_size);\n-#endif\n-  };\n+  auto FinishField = [&]() { values_writer->FinishField(parsed_writer); };\n+\n+  DCHECK_GT(data_end, data);\n \n   // The parsing state machine\n \n FieldStart:\n   // At the start of a field\n-  InitField();\n   // Quoting is only recognized at start of field\n-  if (options_.quoting && data != data_end && *data == options_.quote_char) {\n+  if (SpecializedOptions::quoting && ARROW_PREDICT_FALSE(*data == options_.quote_char)) {\n     ++data;\n-#ifdef CSV_PARSER_USE_BITFIELD\n-    quoted = true;\n-#else\n-    quoted_.push_back(true);\n-#endif\n+    values_writer->StartField(true /* quoted */);\n     goto InQuotedField;\n   } else {\n-#ifdef CSV_PARSER_USE_BITFIELD\n-    quoted = false;\n-#else\n-    quoted_.push_back(false);\n-#endif\n+    values_writer->StartField(false /* quoted */);\n     goto InField;\n   }\n \n InField:\n   // Inside a non-quoted part of a field\n-  if (data == data_end) {\n+  if (ARROW_PREDICT_FALSE(data == data_end)) {\n     goto AbortLine;\n   }\n   c = *data++;\n-  if (options_.escaping && c == options_.escape_char) {\n-    if (data == data_end) {\n+  if (SpecializedOptions::escaping && ARROW_PREDICT_FALSE(c == options_.escape_char)) {\n+    if (ARROW_PREDICT_FALSE(data == data_end)) {\n       goto AbortLine;\n     }\n     c = *data++;\n-    PushFieldChar(c);\n+    parsed_writer->PushFieldChar(c);\n     goto InField;\n   }\n-  if (c == '\\n' || c == '\\r') {\n-    goto LineEnd;\n-  }\n-  if (c == options_.delimiter) {\n+  if (ARROW_PREDICT_FALSE(c == options_.delimiter)) {\n     goto FieldEnd;\n   }\n-  PushFieldChar(c);\n+  if (ARROW_PREDICT_FALSE(c < ' ')) {\n+    if (c == '\\r') {\n+      // In the middle of a newline separator?\n+      if (ARROW_PREDICT_TRUE(data < data_end) && *data == '\\n') {\n+        data++;\n+      }\n+      goto LineEnd;\n+    }\n+    if (c == '\\n') {\n+      goto LineEnd;\n+    }\n+  }\n+  parsed_writer->PushFieldChar(c);\n   goto InField;\n \n InQuotedField:\n   // Inside a quoted part of a field\n-  if (data == data_end) {\n+  if (ARROW_PREDICT_FALSE(data == data_end)) {\n     goto AbortLine;\n   }\n   c = *data++;\n-  if (options_.escaping && c == options_.escape_char) {\n-    if (data == data_end) {\n+  if (SpecializedOptions::escaping && ARROW_PREDICT_FALSE(c == options_.escape_char)) {\n+    if (ARROW_PREDICT_FALSE(data == data_end)) {\n       goto AbortLine;\n     }\n     c = *data++;\n-    PushFieldChar(c);\n+    parsed_writer->PushFieldChar(c);\n     goto InQuotedField;\n   }\n-  if (c == options_.quote_char) {\n-    if (options_.double_quote && data < data_end && *data == options_.quote_char) {\n+  if (ARROW_PREDICT_FALSE(c == options_.quote_char)) {\n+    if (options_.double_quote && ARROW_PREDICT_TRUE(data < data_end) &&\n+        ARROW_PREDICT_FALSE(*data == options_.quote_char)) {\n       // Double-quoting\n       ++data;\n     } else {\n@@ -148,23 +270,25 @@ Status BlockParser::ParseLine(const char* data, const char* data_end, bool is_fi\n       goto InField;\n     }\n   }\n-  PushFieldChar(c);\n+  parsed_writer->PushFieldChar(c);\n   goto InQuotedField;\n \n FieldEnd:\n   // At the end of a field\n   FinishField();\n+  ++num_cols;\n+  if (ARROW_PREDICT_FALSE(data == data_end)) {\n+    goto AbortLine;\n+  }\n   goto FieldStart;\n \n LineEnd:\n-  // At the end of line, possibly in the middle of the newline separator\n+  // At the end of line\n   FinishField();\n-  if (data < data_end && data[-1] == '\\r' && *data == '\\n') {\n-    data++;\n-  }\n-  if (num_cols_ == -1) {\n+  ++num_cols;\n+  if (ARROW_PREDICT_FALSE(num_cols_ == -1)) {\n     num_cols_ = num_cols;\n-  } else if (num_cols != num_cols_) {\n+  } else if (ARROW_PREDICT_FALSE(num_cols != num_cols_)) {\n     return MismatchingColumns(num_cols_, num_cols);\n   }\n   *out_data = data;\n@@ -174,6 +298,7 @@ Status BlockParser::ParseLine(const char* data, const char* data_end, bool is_fi\n   // Not a full line except perhaps if in final block\n   if (is_final) {\n     FinishField();\n+    ++num_cols;\n     if (num_cols_ == -1) {\n       num_cols_ = num_cols;\n     } else if (num_cols != num_cols_) {\n@@ -183,52 +308,133 @@ Status BlockParser::ParseLine(const char* data, const char* data_end, bool is_fi\n     return Status::OK();\n   }\n   // Truncated line at end of block, rewind parsed state\n-  RewindState();\n+  values_writer->RollbackLine();\n+  parsed_writer->RollbackLine();\n   return Status::OK();\n }\n \n-Status BlockParser::DoParse(const char* start, uint32_t size, bool is_final,\n-                            uint32_t* out_size) {\n-  num_rows_ = 0;\n-  // These don't shrink the allocated capacity, so reuses of BlockParser\n-  // avoid most allocations when appending data\n-  parsed_.clear();\n-#ifdef CSV_PARSER_USE_BITFIELD\n-  values_.clear();\n-  values_.push_back({0, false});\n-#else\n-  offsets_.clear();\n-  offsets_.push_back(0);\n-  quoted_.clear();\n-#endif\n-\n-  const char* data = start;\n-  const char* data_end = start + size;\n-\n-  while (data < data_end && num_rows_ < max_num_rows_) {\n+template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n+Status BlockParser::ParseChunk(ValuesWriter* values_writer, ParsedWriter* parsed_writer,\n+                               const char* data, const char* data_end, bool is_final,\n+                               int32_t rows_in_chunk, const char** out_data,\n+                               bool* finished_parsing) {\n+  while (data < data_end && rows_in_chunk > 0) {\n     const char* line_end = data;\n-    RETURN_NOT_OK(ParseLine(data, data_end, is_final, &line_end));\n+    RETURN_NOT_OK(ParseLine<SpecializedOptions>(values_writer, parsed_writer, data,\n+                                                data_end, is_final, &line_end));\n     if (line_end == data) {\n       // Cannot parse any further\n+      *finished_parsing = true;\n       break;\n     }\n     data = line_end;\n     ++num_rows_;\n+    --rows_in_chunk;\n+  }\n+  // Append new buffers and update size\n+  std::shared_ptr<Buffer> values_buffer;\n+  values_writer->Finish(&values_buffer);\n+  if (values_buffer->size() > 0) {\n+    values_size_ += static_cast<int32_t>(values_buffer->size() / sizeof(ValueDesc) - 1);\n+    values_buffers_.push_back(std::move(values_buffer));\n   }\n+  *out_data = data;\n+  return Status::OK();\n+}\n+\n+template <typename SpecializedOptions>\n+Status BlockParser::DoParseSpecialized(const char* start, uint32_t size, bool is_final,\n+                                       uint32_t* out_size) {\n+  num_rows_ = 0;\n+  values_size_ = 0;\n+  parsed_size_ = 0;\n+  values_buffers_.clear();\n+  parsed_buffer_.reset();\n+  parsed_ = nullptr;\n+\n+  const char* data = start;\n+  const char* data_end = start + size;\n+  bool finished_parsing = false;\n+\n+  PresizedParsedWriter parsed_writer(pool_, size);\n+\n+  if (num_cols_ == -1) {\n+    // Can't presize values when the number of columns is not known, first parse\n+    // a single line\n+    const int32_t rows_in_chunk = 1;\n+    ResizableValuesWriter values_writer(pool_);\n+    values_writer.Start(parsed_writer);\n+\n+    RETURN_NOT_OK(ParseChunk<SpecializedOptions>(&values_writer, &parsed_writer, data,\n+                                                 data_end, is_final, rows_in_chunk, &data,\n+                                                 &finished_parsing));\n+  }\n+  while (!finished_parsing && data < data_end && num_rows_ < max_num_rows_) {\n+    // We know the number of columns, so can presize a values array for\n+    // a given number of rows\n+    DCHECK_GE(num_cols_, 0);\n+\n+    int32_t rows_in_chunk;\n+    if (num_cols_ > 0) {\n+      rows_in_chunk = std::min(32768 / num_cols_, max_num_rows_ - num_rows_);\n+    } else {\n+      rows_in_chunk = std::min(32768, max_num_rows_ - num_rows_);\n+    }\n+\n+    PresizedValuesWriter values_writer(pool_, rows_in_chunk, num_cols_);\n+    values_writer.Start(parsed_writer);\n+\n+    RETURN_NOT_OK(ParseChunk<SpecializedOptions>(&values_writer, &parsed_writer, data,\n+                                                 data_end, is_final, rows_in_chunk, &data,\n+                                                 &finished_parsing));\n+  }\n+\n+  parsed_writer.Finish(&parsed_buffer_);\n+  parsed_size_ = static_cast<int32_t>(parsed_buffer_->size());\n+  parsed_ = parsed_buffer_->data();\n+\n+  DCHECK_EQ(values_size_, num_rows_ * num_cols_);\n   if (num_cols_ == -1) {\n     DCHECK_EQ(num_rows_, 0);\n   }\n-#ifdef CSV_PARSER_USE_BITFIELD\n-  DCHECK_EQ(values_.size(), 1 + static_cast<size_t>(num_rows_ * num_cols_));\n-  DCHECK_EQ(parsed_.size(), values_[values_.size() - 1].offset);\n-#else\n-  DCHECK_EQ(offsets_.size(), 1 + static_cast<size_t>(num_rows_ * num_cols_));\n-  DCHECK_EQ(parsed_.size(), offsets_[offsets_.size() - 1]);\n+#ifndef NDEBUG\n+  if (num_rows_ > 0) {\n+    DCHECK_GT(values_buffers_.size(), 0);\n+    auto& last_values_buffer = values_buffers_.back();\n+    auto last_values = reinterpret_cast<const ValueDesc*>(last_values_buffer->data());\n+    auto last_values_size = last_values_buffer->size() / sizeof(ValueDesc);\n+    auto check_parsed_size =\n+        static_cast<int32_t>(last_values[last_values_size - 1].offset);\n+    DCHECK_EQ(parsed_size_, check_parsed_size);\n+  } else {\n+    DCHECK_EQ(parsed_size_, 0);\n+  }\n #endif\n   *out_size = static_cast<uint32_t>(data - start);\n   return Status::OK();\n }\n \n+Status BlockParser::DoParse(const char* start, uint32_t size, bool is_final,\n+                            uint32_t* out_size) {\n+  if (options_.quoting) {\n+    if (options_.escaping) {\n+      return DoParseSpecialized<SpecializedOptions<true, true>>(start, size, is_final,\n+                                                                out_size);\n+    } else {\n+      return DoParseSpecialized<SpecializedOptions<true, false>>(start, size, is_final,\n+                                                                 out_size);\n+    }\n+  } else {\n+    if (options_.escaping) {\n+      return DoParseSpecialized<SpecializedOptions<false, true>>(start, size, is_final,\n+                                                                 out_size);\n+    } else {\n+      return DoParseSpecialized<SpecializedOptions<false, false>>(start, size, is_final,\n+                                                                  out_size);\n+    }\n+  }\n+}\n+\n Status BlockParser::Parse(const char* data, uint32_t size, uint32_t* out_size) {\n   return DoParse(data, size, false /* is_final */, out_size);\n }\n@@ -237,5 +443,12 @@ Status BlockParser::ParseFinal(const char* data, uint32_t size, uint32_t* out_si\n   return DoParse(data, size, true /* is_final */, out_size);\n }\n \n+BlockParser::BlockParser(MemoryPool* pool, ParseOptions options, int32_t num_cols,\n+                         int32_t max_num_rows)\n+    : pool_(pool), options_(options), num_cols_(num_cols), max_num_rows_(max_num_rows) {}\n+\n+BlockParser::BlockParser(ParseOptions options, int32_t num_cols, int32_t max_num_rows)\n+    : BlockParser(default_memory_pool(), options, num_cols, max_num_rows) {}\n+\n }  // namespace csv\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/csv/parser.h b/cpp/src/arrow/csv/parser.h\nindex 4529fce1c7..0e1a4155d2 100644\n--- a/cpp/src/arrow/csv/parser.h\n+++ b/cpp/src/arrow/csv/parser.h\n@@ -22,21 +22,20 @@\n #include <memory>\n #include <vector>\n \n+#include \"arrow/buffer.h\"\n #include \"arrow/csv/options.h\"\n #include \"arrow/status.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+class MemoryPool;\n+\n namespace csv {\n \n constexpr int32_t kMaxParserNumRows = 100000;\n \n-// Whether BlockParser will use bitfields for better memory consumption\n-// and cache locality.\n-#undef CSV_PARSER_USE_BITFIELD\n-#define CSV_PARSER_USE_BITFIELD\n-\n /// \\class BlockParser\n /// \\brief A reusable block-based parser for CSV data\n ///\n@@ -53,6 +52,8 @@ class ARROW_EXPORT BlockParser {\n  public:\n   explicit BlockParser(ParseOptions options, int32_t num_cols = -1,\n                        int32_t max_num_rows = kMaxParserNumRows);\n+  explicit BlockParser(MemoryPool* pool, ParseOptions options, int32_t num_cols = -1,\n+                       int32_t max_num_rows = kMaxParserNumRows);\n \n   /// \\brief Parse a block of data\n   ///\n@@ -69,7 +70,7 @@ class ARROW_EXPORT BlockParser {\n   int32_t num_rows() const { return num_rows_; }\n   int32_t num_cols() const { return num_cols_; }\n   /// \\brief Return the total size in bytes of parsed data\n-  int32_t num_bytes() const { return static_cast<int32_t>(parsed_.size()); }\n+  uint32_t num_bytes() const { return parsed_size_; }\n \n   /// \\brief Visit parsed values in a column\n   ///\n@@ -77,36 +78,42 @@ class ARROW_EXPORT BlockParser {\n   /// Status(const uint8_t* data, uint32_t size, bool quoted)\n   template <typename Visitor>\n   Status VisitColumn(int32_t col_index, Visitor&& visit) const {\n-#ifdef CSV_PARSER_USE_BITFIELD\n-    for (int32_t pos = col_index; pos < num_cols_ * num_rows_; pos += num_cols_) {\n-      auto start = values_[pos].offset;\n-      auto stop = values_[pos + 1].offset;\n-      auto quoted = values_[pos + 1].quoted;\n-      ARROW_RETURN_NOT_OK(visit(parsed_.data() + start, stop - start, quoted));\n+    for (size_t buf_index = 0; buf_index < values_buffers_.size(); ++buf_index) {\n+      const auto& values_buffer = values_buffers_[buf_index];\n+      const auto values = reinterpret_cast<const ValueDesc*>(values_buffer->data());\n+      const auto max_pos =\n+          static_cast<int32_t>(values_buffer->size() / sizeof(ValueDesc)) - 1;\n+      for (int32_t pos = col_index; pos < max_pos; pos += num_cols_) {\n+        auto start = values[pos].offset;\n+        auto stop = values[pos + 1].offset;\n+        auto quoted = values[pos + 1].quoted;\n+        ARROW_RETURN_NOT_OK(visit(parsed_ + start, stop - start, quoted));\n+      }\n     }\n-#else\n-    for (int32_t pos = col_index; pos < num_cols_ * num_rows_; pos += num_cols_) {\n-      auto start = offsets_[pos];\n-      auto stop = offsets_[pos + 1];\n-      auto quoted = quoted_[pos];\n-      ARROW_RETURN_NOT_OK(visit(parsed_.data() + start, stop - start, quoted));\n-    }\n-#endif\n     return Status::OK();\n   }\n \n-  // XXX add a ClearColumn method to signal that a column won't be visited anymore?\n-\n  protected:\n   ARROW_DISALLOW_COPY_AND_ASSIGN(BlockParser);\n \n   Status DoParse(const char* data, uint32_t size, bool is_final, uint32_t* out_size);\n+  template <typename SpecializedOptions>\n+  Status DoParseSpecialized(const char* data, uint32_t size, bool is_final,\n+                            uint32_t* out_size);\n+\n+  template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n+  Status ParseChunk(ValuesWriter* values_writer, ParsedWriter* parsed_writer,\n+                    const char* data, const char* data_end, bool is_final,\n+                    int32_t rows_in_chunk, const char** out_data, bool* finished_parsing);\n \n   // Parse a single line from the data pointer\n-  Status ParseLine(const char* data, const char* data_end, bool is_final,\n+  template <typename SpecializedOptions, typename ValuesWriter, typename ParsedWriter>\n+  Status ParseLine(ValuesWriter* values_writer, ParsedWriter* parsed_writer,\n+                   const char* data, const char* data_end, bool is_final,\n                    const char** out_data);\n \n-  ParseOptions options_;\n+  MemoryPool* pool_;\n+  const ParseOptions options_;\n   // The number of rows parsed from the block\n   int32_t num_rows_;\n   // The number of columns (can be -1 at start)\n@@ -115,22 +122,22 @@ class ARROW_EXPORT BlockParser {\n   int32_t max_num_rows_;\n \n   // Linear scratchpad for parsed values\n-  // XXX should we ensure it's padded with 8 or 16 excess zero bytes? it could help\n-  // with null parsing...\n-  // TODO should be able to presize scratch space\n-  std::vector<uint8_t> parsed_;\n-#ifdef CSV_PARSER_USE_BITFIELD\n   struct ValueDesc {\n     uint32_t offset : 31;\n     bool quoted : 1;\n   };\n-  std::vector<ValueDesc> values_;\n-#else\n-  // Value offsets inside the scratchpad\n-  std::vector<uint32_t> offsets_;\n-  // Whether each value was quoted or not\n-  std::vector<bool> quoted_;\n-#endif\n+\n+  // XXX should we ensure the parsed buffer is padded with 8 or 16 excess zero bytes?\n+  // It may help with null parsing...\n+  std::vector<std::shared_ptr<Buffer>> values_buffers_;\n+  std::shared_ptr<Buffer> parsed_buffer_;\n+  const uint8_t* parsed_;\n+  int32_t values_size_;\n+  int32_t parsed_size_;\n+\n+  class ResizableValuesWriter;\n+  class PresizedValuesWriter;\n+  class PresizedParsedWriter;\n };\n \n }  // namespace csv\ndiff --git a/cpp/src/arrow/csv/reader.cc b/cpp/src/arrow/csv/reader.cc\nindex 730abe4915..6fbbd42fd2 100644\n--- a/cpp/src/arrow/csv/reader.cc\n+++ b/cpp/src/arrow/csv/reader.cc\n@@ -138,7 +138,7 @@ class BaseTableReader : public csv::TableReader {\n       return Status::Invalid(\"header_rows == 0 needs explicit column names\");\n     }\n \n-    BlockParser parser(parse_options_, num_cols_, parse_options_.header_rows);\n+    BlockParser parser(pool_, parse_options_, num_cols_, parse_options_.header_rows);\n \n     uint32_t parsed_size = 0;\n     RETURN_NOT_OK(parser.Parse(reinterpret_cast<const char*>(cur_data_),\n@@ -251,7 +251,8 @@ class SerialTableReader : public BaseTableReader {\n     RETURN_NOT_OK(ProcessHeader());\n \n     static constexpr int32_t max_num_rows = std::numeric_limits<int32_t>::max();\n-    auto parser = std::make_shared<BlockParser>(parse_options_, num_cols_, max_num_rows);\n+    auto parser =\n+        std::make_shared<BlockParser>(pool_, parse_options_, num_cols_, max_num_rows);\n     while (!eof_) {\n       // Consume current block\n       uint32_t parsed_size = 0;\n@@ -338,8 +339,8 @@ class ThreadedTableReader : public BaseTableReader {\n \n         // \"mutable\" allows to modify captured by-copy chunk_buffer\n         task_group_->Append([=]() mutable -> Status {\n-          auto parser =\n-              std::make_shared<BlockParser>(parse_options_, num_cols_, max_num_rows);\n+          auto parser = std::make_shared<BlockParser>(pool_, parse_options_, num_cols_,\n+                                                      max_num_rows);\n           uint32_t parsed_size = 0;\n           RETURN_NOT_OK(parser->Parse(reinterpret_cast<const char*>(chunk_data),\n                                       chunk_size, &parsed_size));\n@@ -374,7 +375,7 @@ class ThreadedTableReader : public BaseTableReader {\n         builder->SetTaskGroup(task_group_);\n       }\n       auto parser =\n-          std::make_shared<BlockParser>(parse_options_, num_cols_, max_num_rows);\n+          std::make_shared<BlockParser>(pool_, parse_options_, num_cols_, max_num_rows);\n       uint32_t parsed_size = 0;\n       RETURN_NOT_OK(parser->ParseFinal(reinterpret_cast<const char*>(cur_data_),\n                                        static_cast<uint32_t>(cur_size_), &parsed_size));\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-05T16:24:59.851+0000",
                    "updated": "2018-11-05T16:24:59.851+0000",
                    "started": "2018-11-05T16:24:59.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "162569",
                    "issueId": "13195496"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@61728df2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56cbdd3e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24475988[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2c6d5213[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@268deb5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2976b879[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37e33fc6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@71581ee3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3581eb0b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@292838b2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79b3f5e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@36059648[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Nov 05 16:24:43 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-05T16:24:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3666/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-31T21:27:31.000+0000",
        "updated": "2018-11-05T16:24:59.000+0000",
        "timeoriginalestimate": null,
        "description": "The CSV parser is currently the bottleneck when reading CSV files. There are a couple ways to make it a bit faster.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Improve CSV parser performance",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13195496/comment/16675396",
                    "id": "16675396",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 2886\n[https://github.com/apache/arrow/pull/2886]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-05T16:24:43.226+0000",
                    "updated": "2018-11-05T16:24:43.226+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3zv67:",
        "customfield_12314139": null
    }
}