{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13482912",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912",
    "key": "ARROW-17825",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=louisc",
            "name": "louisc",
            "key": "JIRAUSER293793",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Louis Calot",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=louisc",
            "name": "louisc",
            "key": "JIRAUSER293793",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Louis Calot",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=louisc",
            "name": "louisc",
            "key": "JIRAUSER293793",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Louis Calot",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17825/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/811577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1256164159\n\n   https://issues.apache.org/jira/browse/ARROW-17825\n\n\n",
                    "created": "2022-09-23T12:44:17.646+0000",
                    "updated": "2022-09-23T12:44:17.646+0000",
                    "started": "2022-09-23T12:44:17.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811577",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/811578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1256164199\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-23T12:44:19.804+0000",
                    "updated": "2022-09-23T12:44:19.804+0000",
                    "started": "2022-09-23T12:44:19.803+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811578",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/811629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1256350448\n\n   Yes I will do this once I made sure that the existing tests still pass.\n\n\n",
                    "created": "2022-09-23T15:17:56.362+0000",
                    "updated": "2022-09-23T15:17:56.362+0000",
                    "started": "2022-09-23T15:17:56.361+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811629",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/812195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r980368038\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +733,30 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n\nReview Comment:\n   Nice test!\r\n   \r\n   Could you also add one to verify that we get a sensible error if you write a table but then try to write a second table with a different schema?\n\n\n\n",
                    "created": "2022-09-26T18:23:59.182+0000",
                    "updated": "2022-09-26T18:23:59.182+0000",
                    "started": "2022-09-26T18:23:59.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812195",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/812196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r980368841\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.h:\n##########\n@@ -272,9 +272,9 @@ class ARROW_EXPORT ORCFileWriter {\n       io::OutputStream* output_stream,\n       const WriteOptions& write_options = WriteOptions());\n \n-  /// \\brief Write a table\n+  /// \\brief Write a table. This can be called multiple times.\n   ///\n\nReview Comment:\n   ```suggestion\r\n     ///\r\n     /// Tables passed in subsequent calls must match the schema of the table that was written first.\r\n     ///\r\n   ```\n\n\n\n",
                    "created": "2022-09-26T18:24:59.938+0000",
                    "updated": "2022-09-26T18:24:59.938+0000",
                    "started": "2022-09-26T18:24:59.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812196",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/812371",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r980850256\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +733,30 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n\nReview Comment:\n   Yes, I can try do do this. Though, I will need to modify the code I think.\n\n\n\n",
                    "created": "2022-09-27T07:17:41.143+0000",
                    "updated": "2022-09-27T07:17:41.143+0000",
                    "started": "2022-09-27T07:17:41.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812371",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/812917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1260960578\n\n   I added a test for checking the schema. I added a specific error, and checked that an error was found. (however I didn't test that the error was the specific one ).\r\n   \n\n\n",
                    "created": "2022-09-28T14:00:00.283+0000",
                    "updated": "2022-09-28T14:00:00.283+0000",
                    "started": "2022-09-28T14:00:00.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812917",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/812994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r982551006\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +733,30 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n\nReview Comment:\n   Done\n\n\n\n",
                    "created": "2022-09-28T15:25:12.315+0000",
                    "updated": "2022-09-28T15:25:12.315+0000",
                    "started": "2022-09-28T15:25:12.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812994",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/813100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r982793017\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  ArrayVector vect;\n+  for (int i = 0; i < nb_writes; i++) {\n+    vect.push_back(array_int);\n+  }\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       expected_output_chunked_array = std::make_shared<ChunkedArray>(vect);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         expected_output_table =\n+                             Table::Make(input_schema, {expected_output_chunked_array});\n+  AssertTableWriteReadEqual(input_table, expected_output_table,\n+                            kDefaultSmallMemStreamSize * 100, nb_writes);\n+}\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIncoherentSchema) {\n+  const int64_t num_rows = 1234;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  auto array_int2 = rand.ArrayOf(int64(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema2 = schema({field(\"col0\", array_int2->type())});\n+\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       input_chunked_array2 = std::make_shared<ChunkedArray>(array_int2);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         input_table2 =\n+                             Table::Make(input_schema2, {input_chunked_array2});\n\nReview Comment:\n   There is an overload of `Table::Make()` that takes Arrays, so we can just use that. Also, we generally repeat the type if we are declaring and assigning.\r\n   \r\n   ```suggestion\r\n     std::shared_ptr<Table> input_table = Table::Make(input_schema, {array_int});\r\n     std::shared_ptr<Table> input_table2 = Table::Make(input_schema2, {array_int2});\r\n   ```\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n\nReview Comment:\n   We generally use `num_` instead of `nb_` in Arrow, so consider changing this.\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  ArrayVector vect;\n+  for (int i = 0; i < nb_writes; i++) {\n+    vect.push_back(array_int);\n+  }\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       expected_output_chunked_array = std::make_shared<ChunkedArray>(vect);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         expected_output_table =\n+                             Table::Make(input_schema, {expected_output_chunked_array});\n+  AssertTableWriteReadEqual(input_table, expected_output_table,\n+                            kDefaultSmallMemStreamSize * 100, nb_writes);\n+}\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIncoherentSchema) {\n+  const int64_t num_rows = 1234;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  auto array_int2 = rand.ArrayOf(int64(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema2 = schema({field(\"col0\", array_int2->type())});\n+\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       input_chunked_array2 = std::make_shared<ChunkedArray>(array_int2);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         input_table2 =\n+                             Table::Make(input_schema2, {input_chunked_array2});\n+  EXPECT_OK_AND_ASSIGN(auto buffer_output_stream,\n+                       io::BufferOutputStream::Create(kDefaultSmallMemStreamSize));\n+  auto write_options = adapters::orc::WriteOptions();\n+  EXPECT_OK_AND_ASSIGN(auto writer, adapters::orc::ORCFileWriter::Open(\n+                                        buffer_output_stream.get(), write_options));\n+  ARROW_EXPECT_OK(writer->Write(*input_table));\n+\n+  // This should not pass\n+  ASSERT_NOT_OK(writer->Write(*input_table2));\n\nReview Comment:\n   How about this?\r\n   ```suggestion\r\n     ASSERT_RAISES(Status::Invalid, writer->Write(*input_table2));\r\n   ```\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -239,7 +241,9 @@ void AssertTableWriteReadEqual(const std::shared_ptr<Table>& input_table,\n   write_options.row_index_stride = 5000;\n   EXPECT_OK_AND_ASSIGN(auto writer, adapters::orc::ORCFileWriter::Open(\n                                         buffer_output_stream.get(), write_options));\n-  ARROW_EXPECT_OK(writer->Write(*input_table));\n+  for (int iWrite = 0; iWrite < nb_writes; iWrite++) {\n\nReview Comment:\n   We take the convention from the Google Style Guide that variable names should be lower case.\r\n   \r\n   ```suggestion\r\n     for (int i_write = 0; i_write < nb_writes; i_write++) {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  ArrayVector vect;\n+  for (int i = 0; i < nb_writes; i++) {\n+    vect.push_back(array_int);\n+  }\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       expected_output_chunked_array = std::make_shared<ChunkedArray>(vect);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         expected_output_table =\n+                             Table::Make(input_schema, {expected_output_chunked_array});\n+  AssertTableWriteReadEqual(input_table, expected_output_table,\n+                            kDefaultSmallMemStreamSize * 100, nb_writes);\n+}\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIncoherentSchema) {\n+  const int64_t num_rows = 1234;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  auto array_int2 = rand.ArrayOf(int64(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema2 = schema({field(\"col0\", array_int2->type())});\n+\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       input_chunked_array2 = std::make_shared<ChunkedArray>(array_int2);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         input_table2 =\n+                             Table::Make(input_schema2, {input_chunked_array2});\n+  EXPECT_OK_AND_ASSIGN(auto buffer_output_stream,\n+                       io::BufferOutputStream::Create(kDefaultSmallMemStreamSize));\n+  auto write_options = adapters::orc::WriteOptions();\n+  EXPECT_OK_AND_ASSIGN(auto writer, adapters::orc::ORCFileWriter::Open(\n+                                        buffer_output_stream.get(), write_options));\n+  ARROW_EXPECT_OK(writer->Write(*input_table));\n+\n+  // This should not pass\n+  ASSERT_NOT_OK(writer->Write(*input_table2));\n+\n+  ARROW_EXPECT_OK(writer->Close());\n+  EXPECT_OK_AND_ASSIGN(auto buffer, buffer_output_stream->Finish());\n\nReview Comment:\n   Were you planning on doing something with this buffer?\n\n\n\n",
                    "created": "2022-09-28T19:44:38.633+0000",
                    "updated": "2022-09-28T19:44:38.633+0000",
                    "started": "2022-09-28T19:44:38.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813100",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/813237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r983158783\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  ArrayVector vect;\n+  for (int i = 0; i < nb_writes; i++) {\n+    vect.push_back(array_int);\n+  }\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       expected_output_chunked_array = std::make_shared<ChunkedArray>(vect);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         expected_output_table =\n+                             Table::Make(input_schema, {expected_output_chunked_array});\n+  AssertTableWriteReadEqual(input_table, expected_output_table,\n+                            kDefaultSmallMemStreamSize * 100, nb_writes);\n+}\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIncoherentSchema) {\n+  const int64_t num_rows = 1234;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  auto array_int2 = rand.ArrayOf(int64(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema2 = schema({field(\"col0\", array_int2->type())});\n+\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       input_chunked_array2 = std::make_shared<ChunkedArray>(array_int2);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         input_table2 =\n+                             Table::Make(input_schema2, {input_chunked_array2});\n\nReview Comment:\n   Ok, thanks. I adapted the code from the \"AssertArrayWriteReadEqual\" method, so I kept a good part of the syntax\n\n\n\n",
                    "created": "2022-09-29T07:25:28.763+0000",
                    "updated": "2022-09-29T07:25:28.763+0000",
                    "started": "2022-09-29T07:25:28.762+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813237",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/813238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r983161986\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  ArrayVector vect;\n+  for (int i = 0; i < nb_writes; i++) {\n+    vect.push_back(array_int);\n+  }\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       expected_output_chunked_array = std::make_shared<ChunkedArray>(vect);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         expected_output_table =\n+                             Table::Make(input_schema, {expected_output_chunked_array});\n+  AssertTableWriteReadEqual(input_table, expected_output_table,\n+                            kDefaultSmallMemStreamSize * 100, nb_writes);\n+}\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIncoherentSchema) {\n+  const int64_t num_rows = 1234;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  auto array_int2 = rand.ArrayOf(int64(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema2 = schema({field(\"col0\", array_int2->type())});\n+\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       input_chunked_array2 = std::make_shared<ChunkedArray>(array_int2);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         input_table2 =\n+                             Table::Make(input_schema2, {input_chunked_array2});\n+  EXPECT_OK_AND_ASSIGN(auto buffer_output_stream,\n+                       io::BufferOutputStream::Create(kDefaultSmallMemStreamSize));\n+  auto write_options = adapters::orc::WriteOptions();\n+  EXPECT_OK_AND_ASSIGN(auto writer, adapters::orc::ORCFileWriter::Open(\n+                                        buffer_output_stream.get(), write_options));\n+  ARROW_EXPECT_OK(writer->Write(*input_table));\n+\n+  // This should not pass\n+  ASSERT_NOT_OK(writer->Write(*input_table2));\n+\n+  ARROW_EXPECT_OK(writer->Close());\n+  EXPECT_OK_AND_ASSIGN(auto buffer, buffer_output_stream->Finish());\n\nReview Comment:\n   Indeed, there is no need of this here\n\n\n\n",
                    "created": "2022-09-29T07:28:49.042+0000",
                    "updated": "2022-09-29T07:28:49.042+0000",
                    "started": "2022-09-29T07:28:49.042+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813238",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/813239",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r983162255\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  ArrayVector vect;\n+  for (int i = 0; i < nb_writes; i++) {\n+    vect.push_back(array_int);\n+  }\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       expected_output_chunked_array = std::make_shared<ChunkedArray>(vect);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         expected_output_table =\n+                             Table::Make(input_schema, {expected_output_chunked_array});\n+  AssertTableWriteReadEqual(input_table, expected_output_table,\n+                            kDefaultSmallMemStreamSize * 100, nb_writes);\n+}\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIncoherentSchema) {\n+  const int64_t num_rows = 1234;\n+  auto array_int = rand.ArrayOf(int32(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema = schema({field(\"col0\", array_int->type())});\n+  auto array_int2 = rand.ArrayOf(int64(), num_rows, 0);\n+  std::shared_ptr<Schema> input_schema2 = schema({field(\"col0\", array_int2->type())});\n+\n+  auto input_chunked_array = std::make_shared<ChunkedArray>(array_int),\n+       input_chunked_array2 = std::make_shared<ChunkedArray>(array_int2);\n+  std::shared_ptr<Table> input_table = Table::Make(input_schema, {input_chunked_array}),\n+                         input_table2 =\n+                             Table::Make(input_schema2, {input_chunked_array2});\n+  EXPECT_OK_AND_ASSIGN(auto buffer_output_stream,\n+                       io::BufferOutputStream::Create(kDefaultSmallMemStreamSize));\n+  auto write_options = adapters::orc::WriteOptions();\n+  EXPECT_OK_AND_ASSIGN(auto writer, adapters::orc::ORCFileWriter::Open(\n+                                        buffer_output_stream.get(), write_options));\n+  ARROW_EXPECT_OK(writer->Write(*input_table));\n+\n+  // This should not pass\n+  ASSERT_NOT_OK(writer->Write(*input_table2));\n\nReview Comment:\n   It will be better indeed.\n\n\n\n",
                    "created": "2022-09-29T07:29:04.214+0000",
                    "updated": "2022-09-29T07:29:04.214+0000",
                    "started": "2022-09-29T07:29:04.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813239",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/813241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r983164102\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -730,4 +735,55 @@ TEST_F(TestORCWriterSingleArray, WriteListOfMap) {\n   AssertArrayWriteReadEqual(array, array, kDefaultSmallMemStreamSize * 10);\n }\n \n+class TestORCWriterMultipleWrite : public ::testing::Test {\n+ public:\n+  TestORCWriterMultipleWrite() : rand(kRandomSeed) {}\n+\n+ protected:\n+  random::RandomArrayGenerator rand;\n+};\n+\n+TEST_F(TestORCWriterMultipleWrite, MultipleWritesIntField) {\n+  const int64_t num_rows = 1234;\n+  const int nb_writes = 5;\n\nReview Comment:\n   Ok, no problem. I will change this to num_writes.\n\n\n\n",
                    "created": "2022-09-29T07:30:59.646+0000",
                    "updated": "2022-09-29T07:30:59.646+0000",
                    "started": "2022-09-29T07:30:59.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813241",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/814456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r989228396\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.cc:\n##########\n@@ -781,7 +794,29 @@ Result<std::unique_ptr<ORCFileWriter>> ORCFileWriter::Open(\n   return std::move(result);\n }\n \n-Status ORCFileWriter::Write(const Table& table) { return impl_->Write(table); }\n+Status ORCFileWriter::Write(const Table& table)\n+{\n+  if (table.num_rows() == 0) {\n+    ARROW_ASSIGN_OR_RAISE(auto empty_batch, RecordBatch::MakeEmpty(table.schema()));\n+    RETURN_NOT_OK(Write(*empty_batch));\n+  } else {\n+    TableBatchReader reader(table);\n\nReview Comment:\n   We should make sure the reader is set with a max batch size at least the same size as the `batch_size` provided by the user.\r\n   \r\n   ```suggestion\r\n       TableBatchReader reader(table);\r\n       reader.set_chunksize(write_options_.batch_size);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.cc:\n##########\n@@ -743,9 +753,10 @@ class ORCFileWriter::Impl {\n         internal::checked_cast<liborc::StructVectorBatch*>(batch.get());\n     while (num_rows > 0) {\n       for (int i = 0; i < num_cols; i++) {\n+        ARROW_ASSIGN_OR_RAISE(auto chunked_array, ChunkedArray::Make({ (record_batch.column(i)) }));\n\nReview Comment:\n   I think you can just use the constructor and skip the validation:\r\n   \r\n   ```suggestion\r\n           auto chunked_array = std::make_shared<ChunkedArray>(record_batch.column(i));\r\n   ```\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.cc:\n##########\n@@ -781,7 +794,29 @@ Result<std::unique_ptr<ORCFileWriter>> ORCFileWriter::Open(\n   return std::move(result);\n }\n \n-Status ORCFileWriter::Write(const Table& table) { return impl_->Write(table); }\n+Status ORCFileWriter::Write(const Table& table)\n+{\n+  if (table.num_rows() == 0) {\n+    ARROW_ASSIGN_OR_RAISE(auto empty_batch, RecordBatch::MakeEmpty(table.schema()));\n+    RETURN_NOT_OK(Write(*empty_batch));\n+  } else {\n+    TableBatchReader reader(table);\n\nReview Comment:\n   (Though see my other comment on whether this approach is the right one)\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.h:\n##########\n@@ -272,9 +272,12 @@ class ARROW_EXPORT ORCFileWriter {\n       io::OutputStream* output_stream,\n       const WriteOptions& write_options = WriteOptions());\n \n-  /// \\brief Write a table\n+  /// \\brief Write a table. This can be called multiple times.\n   ///\n-  /// \\param[in] table the Arrow table from which data is extracted\n+  /// Tables passed in subsequent calls must match the schema of the table that was\n+  /// written first.\n+  ///\n+  /// \\param[in] table the Arrow table from which data is extracted.\n   /// \\return Status\n   Status Write(const Table& table);\n\nReview Comment:\n   I actually think implementing `Status Write(const RecordBatch& batch)` would be more sensible here. The function `ORCFileWriter::Impl::Write()` handles the enforcement of the `batch_size` and (assuming I'm reading correctly) will handle writing batches that straddle chunked array boundaries. If you make `Status Write(const Table& table)` instead implemented by using a `TableBatchReader` and passing each individual batch to the `Write` implementation, then the writer has to break up batches based on the input chunk boundaries. IMO, ideally we should aim to decouple the chunk boundaries in-memory and the serialized chunk boundaries whenever possible.\r\n   \r\n   So unless you want to do a very deep refactoring, I think we should implement `Status Write(const RecordBatch& record_batch)` by just wrapping the batch in a Table.\n\n\n\n",
                    "created": "2022-10-06T17:24:46.958+0000",
                    "updated": "2022-10-06T17:24:46.958+0000",
                    "started": "2022-10-06T17:24:46.957+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814456",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/814689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r990128176\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.h:\n##########\n@@ -272,9 +272,12 @@ class ARROW_EXPORT ORCFileWriter {\n       io::OutputStream* output_stream,\n       const WriteOptions& write_options = WriteOptions());\n \n-  /// \\brief Write a table\n+  /// \\brief Write a table. This can be called multiple times.\n   ///\n-  /// \\param[in] table the Arrow table from which data is extracted\n+  /// Tables passed in subsequent calls must match the schema of the table that was\n+  /// written first.\n+  ///\n+  /// \\param[in] table the Arrow table from which data is extracted.\n   /// \\return Status\n   Status Write(const Table& table);\n\nReview Comment:\n   Thanks for your review. I think that it would be better indeed, to implement `Status Write(const RecordBatch& record_batch)` by wrapping the batch in a table following your reasoning. I will do this, but I will first wait a bit if others want to comment.\n\n\n\n",
                    "created": "2022-10-07T14:04:12.426+0000",
                    "updated": "2022-10-07T14:04:12.426+0000",
                    "started": "2022-10-07T14:04:12.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "814689",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/817896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1281941265\n\n   Good. I was wondering if we need a test for writing a RecordBatch, for the moment this is not tested. Is this ok without test ?\n\n\n",
                    "created": "2022-10-18T07:37:13.072+0000",
                    "updated": "2022-10-18T07:37:13.072+0000",
                    "started": "2022-10-18T07:37:13.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817896",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/818079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1282669992\n\n   > Good. I was wondering if we need a test for writing a RecordBatch, for the moment this is not tested. Is this ok without test ?\r\n   \r\n   Oh we would prefer to have a test for that.\n\n\n",
                    "created": "2022-10-18T16:29:54.740+0000",
                    "updated": "2022-10-18T16:29:54.740+0000",
                    "started": "2022-10-18T16:29:54.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818079",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/818476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "LouisClt commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1284002489\n\n   I added a test for testing the write of RecordBatches with ORC. As the RecodBatch method just makes a call to the \"Table\" one, I think this is sufficient. The test failures that remains seem to be unrelated.\n\n\n",
                    "created": "2022-10-19T13:19:37.257+0000",
                    "updated": "2022-10-19T13:19:37.257+0000",
                    "started": "2022-10-19T13:19:37.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818476",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/825900",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wjones127 commented on PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#issuecomment-1314453975\n\n   Sorry I let this sit @LouisClt.\r\n   \r\n   This looks good to me. @pitrou do you have any comments? Or can I merge this?\n\n\n",
                    "created": "2022-11-14T21:50:05.843+0000",
                    "updated": "2022-11-14T21:50:05.843+0000",
                    "started": "2022-11-14T21:50:05.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "825900",
                    "issueId": "13482912"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/worklog/826197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14219:\nURL: https://github.com/apache/arrow/pull/14219#discussion_r1022994287\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter.cc:\n##########\n@@ -727,12 +727,22 @@ class ORCFileWriter::Impl {\n   }\n \n   Status Write(const Table& table) {\n-    ARROW_ASSIGN_OR_RAISE(auto orc_schema, GetOrcType(*(table.schema())));\n-    ARROW_ASSIGN_OR_RAISE(auto orc_options, MakeOrcWriterOptions(write_options_));\n+    if (!writer_.get()) {\n+      ARROW_ASSIGN_OR_RAISE(orc_schema_, GetOrcType(*(table.schema())));\n+      ARROW_ASSIGN_OR_RAISE(auto orc_options, MakeOrcWriterOptions(write_options_));\n+      arrow_schema_ = table.schema();\n+      ORC_CATCH_NOT_OK(\n+          writer_ = liborc::createWriter(*orc_schema_, out_stream_.get(), orc_options))\n+    } else {\n+      bool schemas_matching = table.schema()->Equals(arrow_schema_, false);\n+      if (!schemas_matching) {\n+        return Status::Invalid(\n\nReview Comment:\n   Can we return `TypeError` here?\n\n\n\n##########\ncpp/src/arrow/adapters/orc/adapter_test.cc:\n##########\n@@ -241,7 +241,9 @@ void AssertTableWriteReadEqual(const std::shared_ptr<Table>& input_table,\n   write_options.row_index_stride = 5000;\n   EXPECT_OK_AND_ASSIGN(auto writer, adapters::orc::ORCFileWriter::Open(\n                                         buffer_output_stream.get(), write_options));\n-  ARROW_EXPECT_OK(writer->Write(*input_table));\n+  for (auto& input_table : input_tables) {\n\nReview Comment:\n   Nit\r\n   ```suggestion\r\n     for (const auto& input_table : input_tables) {\r\n   ```\n\n\n\n",
                    "created": "2022-11-15T16:17:23.951+0000",
                    "updated": "2022-11-15T16:17:23.951+0000",
                    "started": "2022-11-15T16:17:23.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826197",
                    "issueId": "13482912"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6c9d39a3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d634fa0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29731963[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4e8a4da2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d1bb51a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@32c93819[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c08722[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1fbb2da5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f78f82d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@140a0c2b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1374601f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5564a1d1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 15 18:21:27 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-11-15T18:21:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17825/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-09-23T09:02:30.000+0000",
        "updated": "2022-11-16T07:22:07.000+0000",
        "timeoriginalestimate": null,
        "description": "I had the need to write an ORC file little by little, so as to not consume too much memory.\r\nFollowing [this|https://github.com/apache/arrow/issues/14211] discussion, it appeared that the API did not seemed to prevent doing that, but that the internal implementation was not reusing the writer accordingly.\r\n\r\nThis PR makes the needed changes to reuse the \"writer_\" correctly.\r\n\r\nI do not think that the preceding behaviour was correct, as calling several time the \"Write\" method would lead to incorrect ORC files.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Allow to write several tables successively with ORCFileWriter::Write method",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/pull/14219",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482912/comment/17634473",
                    "id": "17634473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 14219\n[https://github.com/apache/arrow/pull/14219]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-11-15T18:21:27.017+0000",
                    "updated": "2022-11-15T18:21:27.017+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z18sjs:",
        "customfield_12314139": null
    }
}