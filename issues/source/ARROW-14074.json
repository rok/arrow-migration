{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13402732",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732",
    "key": "ARROW-14074",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12337958",
                "id": "12337958",
                "name": "Compute IR",
                "description": "Experimental exchange format for compute queries"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [
            {
                "id": "13402747",
                "key": "ARROW-14077",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13402747",
                "fields": {
                    "summary": "Compute IR source consumer",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13402748",
                "key": "ARROW-14078",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13402748",
                "fields": {
                    "summary": "Compute IR project consumer",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13402749",
                "key": "ARROW-14079",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13402749",
                "fields": {
                    "summary": "Compute IR filter consumer",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13402750",
                "key": "ARROW-14080",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13402750",
                "fields": {
                    "summary": "Compute IR Aggregate consumer",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13402754",
                "key": "ARROW-14081",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13402754",
                "fields": {
                    "summary": "Expose API for Arrow C++ IR Consumer",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13402758",
                "key": "ARROW-14082",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13402758",
                "fields": {
                    "summary": "[Python] Expose Arrow C++ Consumer API to pyarrow",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                        "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                        "name": "Closed",
                        "id": "6",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                        "name": "Major",
                        "id": "3"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21600,
            "total": 21600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14074/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/663694",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#issuecomment-940315430\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T18:26:49.001+0000",
                    "updated": "2021-10-11T18:26:49.001+0000",
                    "started": "2021-10-11T18:26:49.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663694",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/664259",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] removed a comment on pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#issuecomment-940315483\n\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-12T19:20:23.774+0000",
                    "updated": "2021-10-12T19:20:23.774+0000",
                    "started": "2021-10-12T19:20:23.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "664259",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/665088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] removed a comment on pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#issuecomment-940315483\n\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-13T18:43:00.136+0000",
                    "updated": "2021-10-13T18:43:00.136+0000",
                    "started": "2021-10-13T18:43:00.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "665088",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r740127428\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/CMakeLists.txt\n##########\n@@ -31,3 +31,11 @@ add_arrow_compute_test(union_node_test PREFIX \"arrow-compute\")\n add_arrow_compute_test(util_test PREFIX \"arrow-compute\")\n \n add_arrow_benchmark(expression_benchmark PREFIX \"arrow-compute\")\n+\n+add_arrow_compute_test(ir_test\n+                       PREFIX\n+                       \"arrow-compute\"\n+                       EXTRA_LINK_LIBS\n+                       ${GFLAGS_LIBRARIES}\n+                       TEST_ARGUMENTS\n+                       \"-computeir_dir=${CMAKE_SOURCE_DIR}/../experimental/computeir\")\n\nReview comment:\n       Should `-computeir_dir` have an additional `-` on the front?\n\n##########\nFile path: cpp/src/arrow/scalar.h\n##########\n@@ -302,7 +302,7 @@ struct TemporalScalar : internal::PrimitiveScalar<T> {\n   using internal::PrimitiveScalar<T>::PrimitiveScalar;\n   using ValueType = typename TemporalScalar<T>::ValueType;\n \n-  explicit TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n+  TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n\nReview comment:\n       Probably just my seriously rusty C++, but is this to allow copy-list initialization somewhere else?\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n+  return ptr;\n+}\n+\n+template <typename T>\n+static const T& OptionsAs(const Declaration& decl) {\n\nReview comment:\n       Fine to leave as is if that's the convention in this file.\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n+  return ptr;\n+}\n+\n+template <typename T>\n+static const T& OptionsAs(const Declaration& decl) {\n+  return OptionsAs<T>(*decl.options);\n+}\n+\n+bool operator==(const Declaration& l, const Declaration& r) {\n\nReview comment:\n       How about `lhs` and `rhs` to avoid the `l` variable name? Unfortunately not everyone uses a font that makes `l` unambiguous with the large number of characters it resembles.\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.h\n##########\n@@ -351,13 +351,28 @@ struct ARROW_EXPORT Declaration {\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, std::vector<Input> inputs, Options options,\n+              std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{std::move(inputs)},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n+\n   template <typename Options>\n   Declaration(std::string factory_name, Options options)\n       : factory_name{std::move(factory_name)},\n         inputs{},\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, Options options, std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n\nReview comment:\n       I'm guessing we can't use delegating constructors because of `$SOME_COMPILER`?\n\n##########\nFile path: cpp/src/arrow/compute/exec/ir_consumer.h\n##########\n@@ -0,0 +1,70 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <flatbuffers/flatbuffers.h>\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"generated/Plan_generated.h\"\n+\n+namespace arrow {\n+\n+namespace flatbuf = org::apache::arrow::flatbuf;\n+\n+namespace compute {\n+\n+namespace ir = org::apache::arrow::computeir::flatbuf;\n+\n+class ARROW_EXPORT CatalogSourceNodeOptions : public ExecNodeOptions {\n\nReview comment:\n       Why make this a class if everything is going to be public? What's the downside of exposing as little as possible?\n\n##########\nFile path: cpp/cmake_modules/BuildUtils.cmake\n##########\n@@ -723,22 +724,27 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n   endif()\n \n+  if(ARG_ENVIRONMENT)\n+    message(STATUS \"WTF ${ARG_ENVIRONMENT}\")\n\nReview comment:\n       Not sure `WTF` is informative here :sweat_smile:.\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n\nReview comment:\n       Not sure if this is around in the codebase still, but is `checked_cast` appropriate here?\n\n##########\nFile path: cpp/src/arrow/ipc/metadata_internal.h\n##########\n@@ -125,38 +125,49 @@ inline std::string StringFromFlatbuffers(const flatbuffers::String* s) {\n // dictionary-encoded fields to a DictionaryMemo instance. May be\n // expensive for very large schemas if you are only interested in a\n // few fields\n+ARROW_EXPORT\n\nReview comment:\n       These are public now because they are needed in a dependent library (I'm assuming that's whatever Arrow library contains the compute IR consumer functionality?)\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n+  return ptr;\n+}\n+\n+template <typename T>\n+static const T& OptionsAs(const Declaration& decl) {\n\nReview comment:\n       Should these `static` functions be in an anonymous namespace?\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       This is technically a breaking change since `SortKey` is exported and the fields are public. Perhaps it's time to make these fields private and give them accessor methods, or just call this a `struct`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -91,6 +104,18 @@ Result<std::vector<ResolvedSortKey>> ResolveSortKeys(\n       });\n }\n \n+std::shared_ptr<ChunkedArray> GetTableColumn(const Table& table, const FieldRef& ref) {\n\nReview comment:\n       Would you mind documenting the meaning of returning a `nullptr` here and I assume the requirement that the caller is required to handle `nullptr`?\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -188,6 +188,9 @@ class ARROW_EXPORT DataType : public detail::Fingerprintable {\n ARROW_EXPORT\n std::ostream& operator<<(std::ostream& os, const DataType& type);\n \n+inline bool operator==(const DataType& l, const DataType& r) { return l.Equals(r); }\n\nReview comment:\n       `lhs` and `rhs` here too would be nice :)\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -578,6 +607,19 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n \n #endif\n \n+Status SetWorkingDir(const PlatformFilename& dir_path) {\n\nReview comment:\n       Setting the working directory is a fraught in the presence of multiple threads.\r\n   \r\n   You can almost always accomplish what you need to do after running `chdir` in a thread-safe way without `chdir`.\r\n   \r\n   So, with that in mind: why is this function necessary?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -51,6 +51,19 @@ struct SortField {\n   SortOrder order;\n };\n \n+Status CheckNonNested(const FieldRef& ref) {\n+  if (ref.IsNested()) {\n+    return Status::KeyError(\"Nested keys not supported for SortKeys\");\n\nReview comment:\n       To be clear this means anything that is a struct, array, map, or union type is unsupported, correct?\n\n##########\nFile path: cpp/src/arrow/util/io_util.h\n##########\n@@ -113,6 +114,10 @@ Result<bool> DeleteDirTree(const PlatformFilename& dir_path, bool allow_not_foun\n ARROW_EXPORT\n Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path);\n \n+/// Set the process' current working directory.\n+ARROW_EXPORT\n+Status SetWorkingDir(const PlatformFilename& dir_path);\n\nReview comment:\n       I really think we should avoid introducing this as a public API, even if the publicity is limited to `arrow::internal`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T14:59:13.392+0000",
                    "updated": "2021-11-02T14:59:13.392+0000",
                    "started": "2021-11-02T14:59:13.391+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673209",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673211",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741160879\n\n\n\n##########\nFile path: cpp/cmake_modules/BuildUtils.cmake\n##########\n@@ -723,22 +724,27 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n   endif()\n \n+  if(ARG_ENVIRONMENT)\n+    message(STATUS \"WTF ${ARG_ENVIRONMENT}\")\n\nReview comment:\n       good catch, will remove\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:01:41.833+0000",
                    "updated": "2021-11-02T15:01:41.833+0000",
                    "started": "2021-11-02T15:01:41.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673211",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741177732\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/CMakeLists.txt\n##########\n@@ -31,3 +31,11 @@ add_arrow_compute_test(union_node_test PREFIX \"arrow-compute\")\n add_arrow_compute_test(util_test PREFIX \"arrow-compute\")\n \n add_arrow_benchmark(expression_benchmark PREFIX \"arrow-compute\")\n+\n+add_arrow_compute_test(ir_test\n+                       PREFIX\n+                       \"arrow-compute\"\n+                       EXTRA_LINK_LIBS\n+                       ${GFLAGS_LIBRARIES}\n+                       TEST_ARGUMENTS\n+                       \"-computeir_dir=${CMAKE_SOURCE_DIR}/../experimental/computeir\")\n\nReview comment:\n       Gflags accepts this but I'll change the invocation to look like [gnu style](https://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:14:06.502+0000",
                    "updated": "2021-11-02T15:14:06.502+0000",
                    "started": "2021-11-02T15:14:06.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673214",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741178393\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.h\n##########\n@@ -351,13 +351,28 @@ struct ARROW_EXPORT Declaration {\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, std::vector<Input> inputs, Options options,\n+              std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{std::move(inputs)},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n+\n   template <typename Options>\n   Declaration(std::string factory_name, Options options)\n       : factory_name{std::move(factory_name)},\n         inputs{},\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, Options options, std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n\nReview comment:\n       we can use them if you prefer\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:14:42.240+0000",
                    "updated": "2021-11-02T15:14:42.240+0000",
                    "started": "2021-11-02T15:14:42.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673215",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741179211\n\n\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -188,6 +188,9 @@ class ARROW_EXPORT DataType : public detail::Fingerprintable {\n ARROW_EXPORT\n std::ostream& operator<<(std::ostream& os, const DataType& type);\n \n+inline bool operator==(const DataType& l, const DataType& r) { return l.Equals(r); }\n\nReview comment:\n       :+1: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:15:21.248+0000",
                    "updated": "2021-11-02T15:15:21.248+0000",
                    "started": "2021-11-02T15:15:21.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673217",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741197300\n\n\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -578,6 +607,19 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n \n #endif\n \n+Status SetWorkingDir(const PlatformFilename& dir_path) {\n\nReview comment:\n       It can be removed, will do\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:28:01.703+0000",
                    "updated": "2021-11-02T15:28:01.703+0000",
                    "started": "2021-11-02T15:28:01.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673228",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741204453\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.h\n##########\n@@ -302,7 +302,7 @@ struct TemporalScalar : internal::PrimitiveScalar<T> {\n   using internal::PrimitiveScalar<T>::PrimitiveScalar;\n   using ValueType = typename TemporalScalar<T>::ValueType;\n \n-  explicit TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n+  TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n\nReview comment:\n       If the constructor could accept a single argument, `explicit` would allow implicit conversion to `TemporalScalar`. Since the constructor requires two arguments the keyword is fully redundant (which clang-tidy nagged me about when I opened the file, prompting the edit)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:33:33.216+0000",
                    "updated": "2021-11-02T15:33:33.216+0000",
                    "started": "2021-11-02T15:33:33.215+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673233",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741213074\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -51,6 +51,19 @@ struct SortField {\n   SortOrder order;\n };\n \n+Status CheckNonNested(const FieldRef& ref) {\n+  if (ref.IsNested()) {\n+    return Status::KeyError(\"Nested keys not supported for SortKeys\");\n\nReview comment:\n       `FieldRef` supports referencing fields of fields, for example `FieldRef::FromDotPath('.alpha.beta')` could be applied to the schema\r\n   ```\r\n   schema({\r\n     field(\"alpha\", struct_({\r\n       field(\"beta\", int32()),\r\n     })),\r\n   })\r\n   ```\r\n   to acquire the inner field. Supporting that here would require refactoring `vector_sort.cc` to not assume that field references can be expressed as a single `int field_index` and instead support a path of field indices. I think that's out of scope for this PR\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -51,6 +51,19 @@ struct SortField {\n   SortOrder order;\n };\n \n+Status CheckNonNested(const FieldRef& ref) {\n+  if (ref.IsNested()) {\n+    return Status::KeyError(\"Nested keys not supported for SortKeys\");\n\nReview comment:\n       `FieldRef` supports referencing fields of fields, for example `FieldRef::FromDotPath('.alpha.beta')` could be applied to the schema\r\n   ```c++\r\n   schema({\r\n     field(\"alpha\", struct_({\r\n       field(\"beta\", int32()),\r\n     })),\r\n   })\r\n   ```\r\n   to acquire the inner field. Supporting that here would require refactoring `vector_sort.cc` to not assume that field references can be expressed as a single `int field_index` and instead support a path of field indices. I think that's out of scope for this PR\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:41:45.704+0000",
                    "updated": "2021-11-02T15:41:45.704+0000",
                    "started": "2021-11-02T15:41:45.703+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673236",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673237",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741214219\n\n\n\n##########\nFile path: cpp/src/arrow/ipc/metadata_internal.h\n##########\n@@ -125,38 +125,49 @@ inline std::string StringFromFlatbuffers(const flatbuffers::String* s) {\n // dictionary-encoded fields to a DictionaryMemo instance. May be\n // expensive for very large schemas if you are only interested in a\n // few fields\n+ARROW_EXPORT\n\nReview comment:\n       Correct, they are used in `ir_consumer.cc` now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:42:21.322+0000",
                    "updated": "2021-11-02T15:42:21.322+0000",
                    "started": "2021-11-02T15:42:21.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673237",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741215271\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -91,6 +104,18 @@ Result<std::vector<ResolvedSortKey>> ResolveSortKeys(\n       });\n }\n \n+std::shared_ptr<ChunkedArray> GetTableColumn(const Table& table, const FieldRef& ref) {\n\nReview comment:\n       will do\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:43:07.166+0000",
                    "updated": "2021-11-02T15:43:07.166+0000",
                    "started": "2021-11-02T15:43:07.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673238",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673245",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741225936\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       This API is explicitly experimental, so I don't think we need be so conservative about changing it. It *would* be a `struct` (semantically it functions as one) except that it needs a virtual destructor. This compromise between `struct` and `class` is used for a number of `class /.*Options` and *is* a deviation from the style guide. I don't think replacing the public fields with full classy access boilerplate is in scope for this PR, but I can write a follow up JIRA if you like\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:51:12.356+0000",
                    "updated": "2021-11-02T15:51:12.356+0000",
                    "started": "2021-11-02T15:51:12.356+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673245",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741225936\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       This API is explicitly experimental, so I don't think we need be so conservative about changing it. It *would* be a `struct` (semantically it functions as one) except that it needs a virtual destructor. This compromise between `struct` and `class` is used for a number of `class /.*Options` and *is* a deviation from the style guide, but facilitates a more terse specification of options structs. I don't think replacing the public fields with full classy access boilerplate is in scope for this PR, but I can write a follow up JIRA if you like\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:52:09.431+0000",
                    "updated": "2021-11-02T15:52:09.431+0000",
                    "started": "2021-11-02T15:52:09.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673246",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673249",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741230019\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       Thanks for the explanation, it isn't necessary.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T15:54:13.828+0000",
                    "updated": "2021-11-02T15:54:13.828+0000",
                    "started": "2021-11-02T15:54:13.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673249",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741256260\n\n\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -578,6 +607,19 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n \n #endif\n \n+Status SetWorkingDir(const PlatformFilename& dir_path) {\n\nReview comment:\n       FTR, I used this because flatc always outputs the binary representation to the current working directory (it will not accept the `-o` option) and it seemed neater to ensure we were always writing that to the temporary directory we allocated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T16:16:24.255+0000",
                    "updated": "2021-11-02T16:16:24.255+0000",
                    "started": "2021-11-02T16:16:24.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673258",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741257734\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n\nReview comment:\n       checked_cast should be fine here\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T16:18:08.641+0000",
                    "updated": "2021-11-02T16:18:08.641+0000",
                    "started": "2021-11-02T16:18:08.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673260",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673372",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cpcloud commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r740127428\n\n\n\n##########\nFile path: cpp/src/arrow/compute/exec/CMakeLists.txt\n##########\n@@ -31,3 +31,11 @@ add_arrow_compute_test(union_node_test PREFIX \"arrow-compute\")\n add_arrow_compute_test(util_test PREFIX \"arrow-compute\")\n \n add_arrow_benchmark(expression_benchmark PREFIX \"arrow-compute\")\n+\n+add_arrow_compute_test(ir_test\n+                       PREFIX\n+                       \"arrow-compute\"\n+                       EXTRA_LINK_LIBS\n+                       ${GFLAGS_LIBRARIES}\n+                       TEST_ARGUMENTS\n+                       \"-computeir_dir=${CMAKE_SOURCE_DIR}/../experimental/computeir\")\n\nReview comment:\n       Should `-computeir_dir` have an additional `-` on the front?\n\n##########\nFile path: cpp/src/arrow/scalar.h\n##########\n@@ -302,7 +302,7 @@ struct TemporalScalar : internal::PrimitiveScalar<T> {\n   using internal::PrimitiveScalar<T>::PrimitiveScalar;\n   using ValueType = typename TemporalScalar<T>::ValueType;\n \n-  explicit TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n+  TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n\nReview comment:\n       Probably just my seriously rusty C++, but is this to allow copy-list initialization somewhere else?\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n+  return ptr;\n+}\n+\n+template <typename T>\n+static const T& OptionsAs(const Declaration& decl) {\n\nReview comment:\n       Fine to leave as is if that's the convention in this file.\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n+  return ptr;\n+}\n+\n+template <typename T>\n+static const T& OptionsAs(const Declaration& decl) {\n+  return OptionsAs<T>(*decl.options);\n+}\n+\n+bool operator==(const Declaration& l, const Declaration& r) {\n\nReview comment:\n       How about `lhs` and `rhs` to avoid the `l` variable name? Unfortunately not everyone uses a font that makes `l` unambiguous with the large number of characters it resembles.\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.h\n##########\n@@ -351,13 +351,28 @@ struct ARROW_EXPORT Declaration {\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, std::vector<Input> inputs, Options options,\n+              std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{std::move(inputs)},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n+\n   template <typename Options>\n   Declaration(std::string factory_name, Options options)\n       : factory_name{std::move(factory_name)},\n         inputs{},\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, Options options, std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n\nReview comment:\n       I'm guessing we can't use delegating constructors because of `$SOME_COMPILER`?\n\n##########\nFile path: cpp/src/arrow/compute/exec/ir_consumer.h\n##########\n@@ -0,0 +1,70 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <flatbuffers/flatbuffers.h>\n+\n+#include \"arrow/compute/exec/exec_plan.h\"\n+#include \"arrow/compute/exec/expression.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/datum.h\"\n+#include \"arrow/result.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+#include \"generated/Plan_generated.h\"\n+\n+namespace arrow {\n+\n+namespace flatbuf = org::apache::arrow::flatbuf;\n+\n+namespace compute {\n+\n+namespace ir = org::apache::arrow::computeir::flatbuf;\n+\n+class ARROW_EXPORT CatalogSourceNodeOptions : public ExecNodeOptions {\n\nReview comment:\n       Why make this a class if everything is going to be public? What's the downside of exposing as little as possible?\n\n##########\nFile path: cpp/cmake_modules/BuildUtils.cmake\n##########\n@@ -723,22 +724,27 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n   endif()\n \n+  if(ARG_ENVIRONMENT)\n+    message(STATUS \"WTF ${ARG_ENVIRONMENT}\")\n\nReview comment:\n       Not sure `WTF` is informative here :sweat_smile:.\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n\nReview comment:\n       Not sure if this is around in the codebase still, but is `checked_cast` appropriate here?\n\n##########\nFile path: cpp/src/arrow/ipc/metadata_internal.h\n##########\n@@ -125,38 +125,49 @@ inline std::string StringFromFlatbuffers(const flatbuffers::String* s) {\n // dictionary-encoded fields to a DictionaryMemo instance. May be\n // expensive for very large schemas if you are only interested in a\n // few fields\n+ARROW_EXPORT\n\nReview comment:\n       These are public now because they are needed in a dependent library (I'm assuming that's whatever Arrow library contains the compute IR consumer functionality?)\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n+  return ptr;\n+}\n+\n+template <typename T>\n+static const T& OptionsAs(const Declaration& decl) {\n\nReview comment:\n       Should these `static` functions be in an anonymous namespace?\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       This is technically a breaking change since `SortKey` is exported and the fields are public. Perhaps it's time to make these fields private and give them accessor methods, or just call this a `struct`?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -91,6 +104,18 @@ Result<std::vector<ResolvedSortKey>> ResolveSortKeys(\n       });\n }\n \n+std::shared_ptr<ChunkedArray> GetTableColumn(const Table& table, const FieldRef& ref) {\n\nReview comment:\n       Would you mind documenting the meaning of returning a `nullptr` here and I assume the requirement that the caller is required to handle `nullptr`?\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -188,6 +188,9 @@ class ARROW_EXPORT DataType : public detail::Fingerprintable {\n ARROW_EXPORT\n std::ostream& operator<<(std::ostream& os, const DataType& type);\n \n+inline bool operator==(const DataType& l, const DataType& r) { return l.Equals(r); }\n\nReview comment:\n       `lhs` and `rhs` here too would be nice :)\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -578,6 +607,19 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n \n #endif\n \n+Status SetWorkingDir(const PlatformFilename& dir_path) {\n\nReview comment:\n       Setting the working directory is a fraught in the presence of multiple threads.\r\n   \r\n   You can almost always accomplish what you need to do after running `chdir` in a thread-safe way without `chdir`.\r\n   \r\n   So, with that in mind: why is this function necessary?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -51,6 +51,19 @@ struct SortField {\n   SortOrder order;\n };\n \n+Status CheckNonNested(const FieldRef& ref) {\n+  if (ref.IsNested()) {\n+    return Status::KeyError(\"Nested keys not supported for SortKeys\");\n\nReview comment:\n       To be clear this means anything that is a struct, array, map, or union type is unsupported, correct?\n\n##########\nFile path: cpp/src/arrow/util/io_util.h\n##########\n@@ -113,6 +114,10 @@ Result<bool> DeleteDirTree(const PlatformFilename& dir_path, bool allow_not_foun\n ARROW_EXPORT\n Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path);\n \n+/// Set the process' current working directory.\n+ARROW_EXPORT\n+Status SetWorkingDir(const PlatformFilename& dir_path);\n\nReview comment:\n       I really think we should avoid introducing this as a public API, even if the publicity is limited to `arrow::internal`.\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       Thanks for the explanation, it isn't necessary.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T17:51:02.482+0000",
                    "updated": "2021-11-02T17:51:02.482+0000",
                    "started": "2021-11-02T17:51:02.481+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673372",
                    "issueId": "13402732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/worklog/673673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #11384:\nURL: https://github.com/apache/arrow/pull/11384#discussion_r741160879\n\n\n\n##########\nFile path: cpp/cmake_modules/BuildUtils.cmake\n##########\n@@ -723,22 +724,27 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n   endif()\n \n+  if(ARG_ENVIRONMENT)\n+    message(STATUS \"WTF ${ARG_ENVIRONMENT}\")\n\nReview comment:\n       good catch, will remove\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/exec/CMakeLists.txt\n##########\n@@ -31,3 +31,11 @@ add_arrow_compute_test(union_node_test PREFIX \"arrow-compute\")\n add_arrow_compute_test(util_test PREFIX \"arrow-compute\")\n \n add_arrow_benchmark(expression_benchmark PREFIX \"arrow-compute\")\n+\n+add_arrow_compute_test(ir_test\n+                       PREFIX\n+                       \"arrow-compute\"\n+                       EXTRA_LINK_LIBS\n+                       ${GFLAGS_LIBRARIES}\n+                       TEST_ARGUMENTS\n+                       \"-computeir_dir=${CMAKE_SOURCE_DIR}/../experimental/computeir\")\n\nReview comment:\n       Gflags accepts this but I'll change the invocation to look like [gnu style](https://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html)\n\n##########\nFile path: cpp/src/arrow/compute/exec/exec_plan.h\n##########\n@@ -351,13 +351,28 @@ struct ARROW_EXPORT Declaration {\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, std::vector<Input> inputs, Options options,\n+              std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{std::move(inputs)},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n+\n   template <typename Options>\n   Declaration(std::string factory_name, Options options)\n       : factory_name{std::move(factory_name)},\n         inputs{},\n         options{std::make_shared<Options>(std::move(options))},\n         label{this->factory_name} {}\n \n+  template <typename Options>\n+  Declaration(std::string factory_name, Options options, std::string label)\n+      : factory_name{std::move(factory_name)},\n+        inputs{},\n+        options{std::make_shared<Options>(std::move(options))},\n+        label{std::move(label)} {}\n\nReview comment:\n       we can use them if you prefer\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -188,6 +188,9 @@ class ARROW_EXPORT DataType : public detail::Fingerprintable {\n ARROW_EXPORT\n std::ostream& operator<<(std::ostream& os, const DataType& type);\n \n+inline bool operator==(const DataType& l, const DataType& r) { return l.Equals(r); }\n\nReview comment:\n       :+1: \n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -578,6 +607,19 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n \n #endif\n \n+Status SetWorkingDir(const PlatformFilename& dir_path) {\n\nReview comment:\n       It can be removed, will do\n\n##########\nFile path: cpp/src/arrow/scalar.h\n##########\n@@ -302,7 +302,7 @@ struct TemporalScalar : internal::PrimitiveScalar<T> {\n   using internal::PrimitiveScalar<T>::PrimitiveScalar;\n   using ValueType = typename TemporalScalar<T>::ValueType;\n \n-  explicit TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n+  TemporalScalar(ValueType value, std::shared_ptr<DataType> type)\n\nReview comment:\n       If the constructor could accept a single argument, `explicit` would allow implicit conversion to `TemporalScalar`. Since the constructor requires two arguments the keyword is fully redundant (which clang-tidy nagged me about when I opened the file, prompting the edit)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -51,6 +51,19 @@ struct SortField {\n   SortOrder order;\n };\n \n+Status CheckNonNested(const FieldRef& ref) {\n+  if (ref.IsNested()) {\n+    return Status::KeyError(\"Nested keys not supported for SortKeys\");\n\nReview comment:\n       `FieldRef` supports referencing fields of fields, for example `FieldRef::FromDotPath('.alpha.beta')` could be applied to the schema\r\n   ```\r\n   schema({\r\n     field(\"alpha\", struct_({\r\n       field(\"beta\", int32()),\r\n     })),\r\n   })\r\n   ```\r\n   to acquire the inner field. Supporting that here would require refactoring `vector_sort.cc` to not assume that field references can be expressed as a single `int field_index` and instead support a path of field indices. I think that's out of scope for this PR\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -51,6 +51,19 @@ struct SortField {\n   SortOrder order;\n };\n \n+Status CheckNonNested(const FieldRef& ref) {\n+  if (ref.IsNested()) {\n+    return Status::KeyError(\"Nested keys not supported for SortKeys\");\n\nReview comment:\n       `FieldRef` supports referencing fields of fields, for example `FieldRef::FromDotPath('.alpha.beta')` could be applied to the schema\r\n   ```c++\r\n   schema({\r\n     field(\"alpha\", struct_({\r\n       field(\"beta\", int32()),\r\n     })),\r\n   })\r\n   ```\r\n   to acquire the inner field. Supporting that here would require refactoring `vector_sort.cc` to not assume that field references can be expressed as a single `int field_index` and instead support a path of field indices. I think that's out of scope for this PR\n\n##########\nFile path: cpp/src/arrow/ipc/metadata_internal.h\n##########\n@@ -125,38 +125,49 @@ inline std::string StringFromFlatbuffers(const flatbuffers::String* s) {\n // dictionary-encoded fields to a DictionaryMemo instance. May be\n // expensive for very large schemas if you are only interested in a\n // few fields\n+ARROW_EXPORT\n\nReview comment:\n       Correct, they are used in `ir_consumer.cc` now\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -91,6 +104,18 @@ Result<std::vector<ResolvedSortKey>> ResolveSortKeys(\n       });\n }\n \n+std::shared_ptr<ChunkedArray> GetTableColumn(const Table& table, const FieldRef& ref) {\n\nReview comment:\n       will do\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       This API is explicitly experimental, so I don't think we need be so conservative about changing it. It *would* be a `struct` (semantically it functions as one) except that it needs a virtual destructor. This compromise between `struct` and `class` is used for a number of `class /.*Options` and *is* a deviation from the style guide. I don't think replacing the public fields with full classy access boilerplate is in scope for this PR, but I can write a follow up JIRA if you like\n\n##########\nFile path: cpp/src/arrow/compute/api_vector.h\n##########\n@@ -98,17 +98,17 @@ enum class NullPlacement {\n /// \\brief One sort key for PartitionNthIndices (TODO) and SortIndices\n class ARROW_EXPORT SortKey : public util::EqualityComparable<SortKey> {\n  public:\n-  explicit SortKey(std::string name, SortOrder order = SortOrder::Ascending)\n-      : name(std::move(name)), order(order) {}\n+  explicit SortKey(FieldRef target, SortOrder order = SortOrder::Ascending)\n+      : target(std::move(target)), order(order) {}\n \n   using util::EqualityComparable<SortKey>::Equals;\n   using util::EqualityComparable<SortKey>::operator==;\n   using util::EqualityComparable<SortKey>::operator!=;\n   bool Equals(const SortKey& other) const;\n   std::string ToString() const;\n \n-  /// The name of the sort column.\n-  std::string name;\n+  /// A FieldRef targetting the sort column.\n+  FieldRef target;\n\nReview comment:\n       This API is explicitly experimental, so I don't think we need be so conservative about changing it. It *would* be a `struct` (semantically it functions as one) except that it needs a virtual destructor. This compromise between `struct` and `class` is used for a number of `class /.*Options` and *is* a deviation from the style guide, but facilitates a more terse specification of options structs. I don't think replacing the public fields with full classy access boilerplate is in scope for this PR, but I can write a follow up JIRA if you like\n\n##########\nFile path: cpp/src/arrow/util/io_util.cc\n##########\n@@ -578,6 +607,19 @@ Result<std::vector<PlatformFilename>> ListDir(const PlatformFilename& dir_path)\n \n #endif\n \n+Status SetWorkingDir(const PlatformFilename& dir_path) {\n\nReview comment:\n       FTR, I used this because flatc always outputs the binary representation to the current working directory (it will not accept the `-o` option) and it seemed neater to ensure we were always writing that to the temporary directory we allocated\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -235,5 +239,181 @@ void AssertExecBatchesEqual(const std::shared_ptr<Schema>& schema,\n   AssertTablesEqual(exp_tab, act_tab);\n }\n \n+template <typename T>\n+static const T& OptionsAs(const ExecNodeOptions& opts) {\n+  const auto& ptr = dynamic_cast<const T&>(opts);\n\nReview comment:\n       checked_cast should be fine here\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T18:24:25.137+0000",
                    "updated": "2021-11-02T18:24:25.137+0000",
                    "started": "2021-11-02T18:24:25.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673673",
                    "issueId": "13402732"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 21600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@45465bfb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15a5c715[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33ddeb21[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@8fb0f20[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36718e19[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6dd77499[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@310f0ee1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@615d95ef[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5be6de9b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@dc30ac2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4472659d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@490d7211[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jul 11 15:55:36 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-05T18:25:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14074/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-09-22T16:07:10.000+0000",
        "updated": "2022-07-11T15:55:36.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-14062 adds a basic compute Intermediate Representation. Allowing c++ compute to consume this and produce ExecPlans will allow more straightforward and less tightly coupled usage of ExecPlans from bindings.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Sketch a C++ consumer of compute IR",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/comment/17439412",
                    "id": "17439412",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11384\n[https://github.com/apache/arrow/pull/11384]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-11-05T18:25:53.472+0000",
                    "updated": "2021-11-05T18:25:53.472+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13402732/comment/17565067",
                    "id": "17565067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Given that we are planning to remove the Compute IR consumer (ARROW-16740, since we now use Substrait instead), I think all those sub-tasks can be closed. \r\nOr is there anything that is still useful / can be repurposed for the Substrait-based consumer APIs? (I suppose those already have its own JIRAs)\r\n\r\ncc [~westonpace]\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-07-11T15:55:36.639+0000",
                    "updated": "2022-07-11T15:55:36.639+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0v6ug:",
        "customfield_12314139": null
    }
}