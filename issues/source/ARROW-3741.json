{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197536",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536",
    "key": "ARROW-3741",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3741/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/165846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959\n \n \n   ``` r\r\n   library(arrow)\r\n   #> \r\n   #> Attaching package: 'arrow'\r\n   #> The following object is masked from 'package:utils':\r\n   #> \r\n   #>     timestamp\r\n   #> The following objects are masked from 'package:base':\r\n   #> \r\n   #>     array, table\r\n   a <- array(1:10, NA)\r\n   a$type()\r\n   #> arrow::Int32 \r\n   #> int32\r\n   \r\n   b <- a$cast(int16())\r\n   b$type()\r\n   #> arrow::Int16 \r\n   #> int16\r\n   ```\r\n   \r\n   <sup>Created on 2018-11-14 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1.9000)</sup>\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T10:01:09.837+0000",
                    "updated": "2018-11-14T10:01:09.837+0000",
                    "started": "2018-11-14T10:01:09.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165846",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/165847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-438606974\n \n \n   This needs more work (more tests) and support to cast Table as well, but opening early because I'm seeing some weird stuff: \r\n   \r\n   ``` r\r\n   library(arrow)\r\n   #> \r\n   #> Attaching package: 'arrow'\r\n   #> The following object is masked from 'package:utils':\r\n   #> \r\n   #>     timestamp\r\n   #> The following objects are masked from 'package:base':\r\n   #> \r\n   #>     array, table\r\n   \r\n   a <- array(-(1:3))\r\n   a$cast(uint16())\r\n   #> Error in Array__cast(self, target_type, options): Invalid: Integer value out of bounds\r\n   a$cast(uint16())\r\n   #> Error in Array__cast(self, target_type, options): Invalid: Integer value out of bounds\r\n   a$cast(uint32())\r\n   #> arrow::Array \r\n   #> [\r\n   #>   4294967295,\r\n   #>   4294967294,\r\n   #>   4294967293\r\n   #> ]\r\n   a$cast(uint64())\r\n   #> arrow::Array \r\n   #> [\r\n   #>   -1,\r\n   #>   -2,\r\n   #>   -3\r\n   #> ]\r\n   ```\r\n   \r\n   The first two error are what I expect, because `safe` is true by default in the cast options, but I'd expect the other one to also fail, and not give these results. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T10:04:37.923+0000",
                    "updated": "2018-11-14T10:04:37.923+0000",
                    "started": "2018-11-14T10:04:37.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165847",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/165848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois edited a comment on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-438606974\n \n \n   This needs more work (more tests) and support to cast Table as well, but opening early because I'm seeing some weird stuff: \r\n   \r\n   ``` r\r\n   library(arrow)\r\n   \r\n   a <- array(-(1:3))\r\n   a$cast(uint16())\r\n   #> Error in Array__cast(self, target_type, options): Invalid: Integer value out of bounds\r\n   a$cast(uint16())\r\n   #> Error in Array__cast(self, target_type, options): Invalid: Integer value out of bounds\r\n   a$cast(uint32())\r\n   #> arrow::Array \r\n   #> [\r\n   #>   4294967295,\r\n   #>   4294967294,\r\n   #>   4294967293\r\n   #> ]\r\n   a$cast(uint32())$type()\r\n   #> arrow::UInt32 \r\n   #> uint32\r\n   \r\n   a$cast(uint64())\r\n   #> arrow::Array \r\n   #> [\r\n   #>   -1,\r\n   #>   -2,\r\n   #>   -3\r\n   #> ]\r\n   a$cast(uint64())$type()\r\n   #> arrow::UInt64 \r\n   #> uint64\r\n   ```\r\n   \r\n   <sup>Created on 2018-11-14 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1.9000)</sup>\r\n   \r\n   The first two error are what I expect, because `safe` is true by default in the cast options, but I'd expect the other one to also fail, and not give these results. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T10:07:19.924+0000",
                    "updated": "2018-11-14T10:07:19.924+0000",
                    "started": "2018-11-14T10:07:19.923+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165848",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/165849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-438608810\n \n \n   closes #2953\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T10:10:30.417+0000",
                    "updated": "2018-11-14T10:10:30.417+0000",
                    "started": "2018-11-14T10:10:30.416+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165849",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/165888",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-438673301\n \n \n   In the future when you see something that looks buggy, there's no need to wait to open a JIRA (or go through the mailing list to confirm a bug) =) \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-14T14:06:54.321+0000",
                    "updated": "2018-11-14T14:06:54.321+0000",
                    "started": "2018-11-14T14:06:54.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "165888",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/168605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-440877092\n \n \n   Is this ready for review? There's a lot of R PR's open; I would appreciate some tips about which ones need to be reviewed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T01:12:48.053+0000",
                    "updated": "2018-11-22T01:12:48.053+0000",
                    "started": "2018-11-22T01:12:48.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168605",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/168710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-440947740\n \n \n   There's often a rebasing needed between two squashes, probably because some files always change e.g. the generated files or the DESCRIPTION file. \r\n   \r\n   I've added the labels `lang-R` and `ready-for-review` I hope it's alright. Perhaps what I can do is mark the one I'd like to be merged next as `ready-for-review` and the one that really still needs work as `WIP`\r\n   \r\n   <img width=\"1131\" alt=\"image\" src=\"https://user-images.githubusercontent.com/2625526/48889768-35525400-ee37-11e8-855b-aae91bedf095.png\">\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T08:16:36.797+0000",
                    "updated": "2018-11-22T08:16:36.797+0000",
                    "started": "2018-11-22T08:16:36.796+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168710",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/168844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959#issuecomment-441076053\n \n \n   Thanks, \"ready-for-review\" works for me. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T16:18:42.608+0000",
                    "updated": "2018-11-22T16:18:42.608+0000",
                    "started": "2018-11-22T16:18:42.607+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168844",
                    "issueId": "13197536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/worklog/169159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2959: ARROW-3741: [R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to anothe\nURL: https://github.com/apache/arrow/pull/2959\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/r/DESCRIPTION b/r/DESCRIPTION\nindex 9b72979370..0250023e8f 100644\n--- a/r/DESCRIPTION\n+++ b/r/DESCRIPTION\n@@ -54,6 +54,7 @@ Collate:\n     'Table.R'\n     'array.R'\n     'buffer.R'\n+    'compute.R'\n     'dictionary.R'\n     'feather.R'\n     'io.R'\ndiff --git a/r/NAMESPACE b/r/NAMESPACE\nindex 93df8ff941..e538878251 100644\n--- a/r/NAMESPACE\n+++ b/r/NAMESPACE\n@@ -86,6 +86,7 @@ export(boolean)\n export(buffer)\n export(buffer_output_stream)\n export(buffer_reader)\n+export(cast_options)\n export(chunked_array)\n export(date32)\n export(date64)\ndiff --git a/r/R/ChunkedArray.R b/r/R/ChunkedArray.R\nindex c681fc3407..338438f578 100644\n--- a/r/R/ChunkedArray.R\n+++ b/r/R/ChunkedArray.R\n@@ -32,6 +32,11 @@\n       } else {\n         shared_ptr(`arrow::ChunkedArray`, ChunkArray__Slice2(self, offset, length))\n       }\n+    },\n+    cast = function(target_type, safe = TRUE, options = cast_options(safe)) {\n+      assert_that(inherits(target_type, \"arrow::DataType\"))\n+      assert_that(inherits(options, \"arrow::compute::CastOptions\"))\n+      shared_ptr(`arrow::ChunkedArray`, ChunkedArray__cast(self, target_type, options))\n     }\n   )\n )\ndiff --git a/r/R/RcppExports.R b/r/R/RcppExports.R\nindex ec8756bf94..c8df2fa742 100644\n--- a/r/R/RcppExports.R\n+++ b/r/R/RcppExports.R\n@@ -173,6 +173,26 @@ Column__data <- function(column) {\n     .Call(`_arrow_Column__data`, column)\n }\n \n+compute___CastOptions__initialize <- function(allow_int_overflow, allow_time_truncate, allow_float_truncate) {\n+    .Call(`_arrow_compute___CastOptions__initialize`, allow_int_overflow, allow_time_truncate, allow_float_truncate)\n+}\n+\n+Array__cast <- function(array, target_type, options) {\n+    .Call(`_arrow_Array__cast`, array, target_type, options)\n+}\n+\n+ChunkedArray__cast <- function(chunked_array, target_type, options) {\n+    .Call(`_arrow_ChunkedArray__cast`, chunked_array, target_type, options)\n+}\n+\n+RecordBatch__cast <- function(batch, schema, options) {\n+    .Call(`_arrow_RecordBatch__cast`, batch, schema, options)\n+}\n+\n+Table__cast <- function(table, schema, options) {\n+    .Call(`_arrow_Table__cast`, table, schema, options)\n+}\n+\n shared_ptr_is_null <- function(xp) {\n     .Call(`_arrow_shared_ptr_is_null`, xp)\n }\n@@ -317,6 +337,10 @@ Schema__field <- function(s, i) {\n     .Call(`_arrow_Schema__field`, s, i)\n }\n \n+Schema__names <- function(schema) {\n+    .Call(`_arrow_Schema__names`, schema)\n+}\n+\n ListType__ToString <- function(type) {\n     .Call(`_arrow_ListType__ToString`, type)\n }\ndiff --git a/r/R/RecordBatch.R b/r/R/RecordBatch.R\nindex 8358e37beb..c606d12143 100644\n--- a/r/R/RecordBatch.R\n+++ b/r/R/RecordBatch.R\n@@ -40,7 +40,14 @@\n       }\n     },\n \n-    serialize = function(output_stream, ...) write_record_batch(self, output_stream, ...)\n+    serialize = function(output_stream, ...) write_record_batch(self, output_stream, ...),\n+\n+    cast = function(target_schema, safe = TRUE, options = cast_options(safe)) {\n+      assert_that(inherits(target_schema, \"arrow::Schema\"))\n+      assert_that(inherits(options, \"arrow::compute::CastOptions\"))\n+      assert_that(identical(self$schema()$names, target_schema$names), msg = \"incompatible schemas\")\n+      shared_ptr(`arrow::RecordBatch`, RecordBatch__cast(self, target_schema, options))\n+    }\n   )\n )\n \ndiff --git a/r/R/Schema.R b/r/R/Schema.R\nindex 505279a5c4..b158fee169 100644\n--- a/r/R/Schema.R\n+++ b/r/R/Schema.R\n@@ -23,6 +23,9 @@\n     ToString = function() Schema__ToString(self),\n     num_fields = function() Schema__num_fields(self),\n     field = function(i) shared_ptr(`arrow::Field`, Schema__field(self, i))\n+  ),\n+  active = list(\n+    names = function() Schema__names(self)\n   )\n )\n \ndiff --git a/r/R/Table.R b/r/R/Table.R\nindex 2574448770..e7d4545c1f 100644\n--- a/r/R/Table.R\n+++ b/r/R/Table.R\n@@ -24,7 +24,14 @@\n     schema = function() shared_ptr(`arrow::Schema`, Table__schema(self)),\n     column = function(i) shared_ptr(`arrow::Column`, Table__column(self, i)),\n \n-    serialize = function(output_stream, ...) write_table(self, output_stream, ...)\n+    serialize = function(output_stream, ...) write_table(self, output_stream, ...),\n+\n+    cast = function(target_schema, safe = TRUE, options = cast_options(safe)) {\n+      assert_that(inherits(target_schema, \"arrow::Schema\"))\n+      assert_that(inherits(options, \"arrow::compute::CastOptions\"))\n+      assert_that(identical(self$schema()$names, target_schema$names), msg = \"incompatible schemas\")\n+      shared_ptr(`arrow::Table`, Table__cast(self, target_schema, options))\n+    }\n   )\n )\n \ndiff --git a/r/R/array.R b/r/R/array.R\nindex bd949dc1e2..2d434f9a22 100644\n--- a/r/R/array.R\n+++ b/r/R/array.R\n@@ -42,6 +42,11 @@\n     RangeEquals = function(other, start_idx, end_idx, other_start_idx) {\n       assert_that(inherits(other, \"arrow::Array\"))\n       Array__RangeEquals(self, other, start_idx, end_idx, other_start_idx)\n+    },\n+    cast = function(target_type, safe = TRUE, options = cast_options(safe)) {\n+      assert_that(inherits(target_type, \"arrow::DataType\"))\n+      assert_that(inherits(options, \"arrow::compute::CastOptions\"))\n+      `arrow::Array`$dispatch(Array__cast(self, target_type, options))\n     }\n   )\n )\ndiff --git a/r/R/compute.R b/r/R/compute.R\nnew file mode 100644\nindex 0000000000..6cf73139d8\n--- /dev/null\n+++ b/r/R/compute.R\n@@ -0,0 +1,39 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+#' @include array.R\n+\n+`arrow::compute::CastOptions` <- R6Class(\"arrow::compute::CastOptions\", inherit = `arrow::Object`)\n+\n+#' Cast options\n+#'\n+#' @param safe enforce safe conversion\n+#' @param allow_int_overflow allow int conversion, `!safe` by default\n+#' @param allow_time_truncate allow time truncate, `!safe` by default\n+#' @param allow_float_truncate allow float truncate, `!safe` by default\n+#'\n+#' @export\n+cast_options <- function(\n+  safe = TRUE,\n+  allow_int_overflow = !safe,\n+  allow_time_truncate = !safe,\n+  allow_float_truncate = !safe\n+){\n+  shared_ptr(`arrow::compute::CastOptions`,\n+    compute___CastOptions__initialize(allow_int_overflow, allow_time_truncate, allow_float_truncate)\n+  )\n+}\ndiff --git a/r/man/cast_options.Rd b/r/man/cast_options.Rd\nnew file mode 100644\nindex 0000000000..7d4ad533fa\n--- /dev/null\n+++ b/r/man/cast_options.Rd\n@@ -0,0 +1,21 @@\n+% Generated by roxygen2: do not edit by hand\n+% Please edit documentation in R/compute.R\n+\\name{cast_options}\n+\\alias{cast_options}\n+\\title{Cast options}\n+\\usage{\n+cast_options(safe = TRUE, allow_int_overflow = !safe,\n+  allow_time_truncate = !safe, allow_float_truncate = !safe)\n+}\n+\\arguments{\n+\\item{safe}{enforce safe conversion}\n+\n+\\item{allow_int_overflow}{allow int conversion, \\code{!safe} by default}\n+\n+\\item{allow_time_truncate}{allow time truncate, \\code{!safe} by default}\n+\n+\\item{allow_float_truncate}{allow float truncate, \\code{!safe} by default}\n+}\n+\\description{\n+Cast options\n+}\ndiff --git a/r/src/RcppExports.cpp b/r/src/RcppExports.cpp\nindex 21f00339af..f1573a6df6 100644\n--- a/r/src/RcppExports.cpp\n+++ b/r/src/RcppExports.cpp\n@@ -493,6 +493,71 @@ BEGIN_RCPP\n     return rcpp_result_gen;\n END_RCPP\n }\n+// compute___CastOptions__initialize\n+std::shared_ptr<arrow::compute::CastOptions> compute___CastOptions__initialize(bool allow_int_overflow, bool allow_time_truncate, bool allow_float_truncate);\n+RcppExport SEXP _arrow_compute___CastOptions__initialize(SEXP allow_int_overflowSEXP, SEXP allow_time_truncateSEXP, SEXP allow_float_truncateSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< bool >::type allow_int_overflow(allow_int_overflowSEXP);\n+    Rcpp::traits::input_parameter< bool >::type allow_time_truncate(allow_time_truncateSEXP);\n+    Rcpp::traits::input_parameter< bool >::type allow_float_truncate(allow_float_truncateSEXP);\n+    rcpp_result_gen = Rcpp::wrap(compute___CastOptions__initialize(allow_int_overflow, allow_time_truncate, allow_float_truncate));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// Array__cast\n+std::shared_ptr<arrow::Array> Array__cast(const std::shared_ptr<arrow::Array>& array, const std::shared_ptr<arrow::DataType>& target_type, const std::shared_ptr<arrow::compute::CastOptions>& options);\n+RcppExport SEXP _arrow_Array__cast(SEXP arraySEXP, SEXP target_typeSEXP, SEXP optionsSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Array>& >::type array(arraySEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type target_type(target_typeSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);\n+    rcpp_result_gen = Rcpp::wrap(Array__cast(array, target_type, options));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// ChunkedArray__cast\n+std::shared_ptr<arrow::ChunkedArray> ChunkedArray__cast(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, const std::shared_ptr<arrow::DataType>& target_type, const std::shared_ptr<arrow::compute::CastOptions>& options);\n+RcppExport SEXP _arrow_ChunkedArray__cast(SEXP chunked_arraySEXP, SEXP target_typeSEXP, SEXP optionsSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::ChunkedArray>& >::type chunked_array(chunked_arraySEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::DataType>& >::type target_type(target_typeSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);\n+    rcpp_result_gen = Rcpp::wrap(ChunkedArray__cast(chunked_array, target_type, options));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// RecordBatch__cast\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__cast(const std::shared_ptr<arrow::RecordBatch>& batch, const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::compute::CastOptions>& options);\n+RcppExport SEXP _arrow_RecordBatch__cast(SEXP batchSEXP, SEXP schemaSEXP, SEXP optionsSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::RecordBatch>& >::type batch(batchSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);\n+    rcpp_result_gen = Rcpp::wrap(RecordBatch__cast(batch, schema, options));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n+// Table__cast\n+std::shared_ptr<arrow::Table> Table__cast(const std::shared_ptr<arrow::Table>& table, const std::shared_ptr<arrow::Schema>& schema, const std::shared_ptr<arrow::compute::CastOptions>& options);\n+RcppExport SEXP _arrow_Table__cast(SEXP tableSEXP, SEXP schemaSEXP, SEXP optionsSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Table>& >::type table(tableSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::compute::CastOptions>& >::type options(optionsSEXP);\n+    rcpp_result_gen = Rcpp::wrap(Table__cast(table, schema, options));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n // shared_ptr_is_null\n bool shared_ptr_is_null(SEXP xp);\n RcppExport SEXP _arrow_shared_ptr_is_null(SEXP xpSEXP) {\n@@ -877,6 +942,17 @@ BEGIN_RCPP\n     return rcpp_result_gen;\n END_RCPP\n }\n+// Schema__names\n+CharacterVector Schema__names(const std::shared_ptr<arrow::Schema>& schema);\n+RcppExport SEXP _arrow_Schema__names(SEXP schemaSEXP) {\n+BEGIN_RCPP\n+    Rcpp::RObject rcpp_result_gen;\n+    Rcpp::RNGScope rcpp_rngScope_gen;\n+    Rcpp::traits::input_parameter< const std::shared_ptr<arrow::Schema>& >::type schema(schemaSEXP);\n+    rcpp_result_gen = Rcpp::wrap(Schema__names(schema));\n+    return rcpp_result_gen;\n+END_RCPP\n+}\n // ListType__ToString\n std::string ListType__ToString(const std::shared_ptr<arrow::ListType>& type);\n RcppExport SEXP _arrow_ListType__ToString(SEXP typeSEXP) {\n@@ -2029,6 +2105,11 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_Column__null_count\", (DL_FUNC) &_arrow_Column__null_count, 1},\n     {\"_arrow_Column__type\", (DL_FUNC) &_arrow_Column__type, 1},\n     {\"_arrow_Column__data\", (DL_FUNC) &_arrow_Column__data, 1},\n+    {\"_arrow_compute___CastOptions__initialize\", (DL_FUNC) &_arrow_compute___CastOptions__initialize, 3},\n+    {\"_arrow_Array__cast\", (DL_FUNC) &_arrow_Array__cast, 3},\n+    {\"_arrow_ChunkedArray__cast\", (DL_FUNC) &_arrow_ChunkedArray__cast, 3},\n+    {\"_arrow_RecordBatch__cast\", (DL_FUNC) &_arrow_RecordBatch__cast, 3},\n+    {\"_arrow_Table__cast\", (DL_FUNC) &_arrow_Table__cast, 3},\n     {\"_arrow_shared_ptr_is_null\", (DL_FUNC) &_arrow_shared_ptr_is_null, 1},\n     {\"_arrow_unique_ptr_is_null\", (DL_FUNC) &_arrow_unique_ptr_is_null, 1},\n     {\"_arrow_Int8__initialize\", (DL_FUNC) &_arrow_Int8__initialize, 0},\n@@ -2065,6 +2146,7 @@ static const R_CallMethodDef CallEntries[] = {\n     {\"_arrow_Schema__ToString\", (DL_FUNC) &_arrow_Schema__ToString, 1},\n     {\"_arrow_Schema__num_fields\", (DL_FUNC) &_arrow_Schema__num_fields, 1},\n     {\"_arrow_Schema__field\", (DL_FUNC) &_arrow_Schema__field, 2},\n+    {\"_arrow_Schema__names\", (DL_FUNC) &_arrow_Schema__names, 1},\n     {\"_arrow_ListType__ToString\", (DL_FUNC) &_arrow_ListType__ToString, 1},\n     {\"_arrow_FixedWidthType__bit_width\", (DL_FUNC) &_arrow_FixedWidthType__bit_width, 1},\n     {\"_arrow_DateType__unit\", (DL_FUNC) &_arrow_DateType__unit, 1},\ndiff --git a/r/src/array.cpp b/r/src/array.cpp\nindex beaa1e279d..038d7862f4 100644\n--- a/r/src/array.cpp\n+++ b/r/src/array.cpp\n@@ -727,7 +727,7 @@ struct Converter_Promotion {\n       std::fill_n(data.begin() + start, n, default_value<RTYPE>());\n     } else {\n       auto p_values = GetValuesSafely<value_type>(array->data(), 1, array->offset());\n-      STOP_IF_NULL(start);\n+      STOP_IF_NULL(p_values);\n \n       auto value_convert = [](value_type value) {\n         return static_cast<r_stored_type>(value);\n@@ -945,10 +945,10 @@ SEXP ArrayVector__as_vector(int64_t n, const ArrayVector& arrays) {\n       return ArrayVector_To_Vector<Converter_Promotion<REALSXP, arrow::UInt32Type>>(\n           n, arrays);\n     case Type::HALF_FLOAT:\n-      return ArrayVector_To_Vector<Converter_Promotion<REALSXP, arrow::UInt32Type>>(\n+      return ArrayVector_To_Vector<Converter_Promotion<REALSXP, arrow::HalfFloatType>>(\n           n, arrays);\n     case Type::FLOAT:\n-      return ArrayVector_To_Vector<Converter_Promotion<REALSXP, arrow::UInt32Type>>(\n+      return ArrayVector_To_Vector<Converter_Promotion<REALSXP, arrow::FloatType>>(\n           n, arrays);\n \n       // time32 ane time64\ndiff --git a/r/src/arrow_types.h b/r/src/arrow_types.h\nindex dbb48b3da8..419705f9fc 100644\n--- a/r/src/arrow_types.h\n+++ b/r/src/arrow_types.h\n@@ -21,6 +21,7 @@\n \n #undef Free\n #include <arrow/api.h>\n+#include <arrow/compute/api.h>\n #include <arrow/io/file.h>\n #include <arrow/io/memory.h>\n #include <arrow/ipc/feather.h>\n@@ -34,7 +35,11 @@\n   } while (0)\n \n #define STOP_IF_NOT_OK(s) STOP_IF_NOT(s.ok(), s.ToString())\n-#define STOP_IF_NULL(buf) STOP_IF_NOT(buf, \"invalid data\")\n+\n+template <typename T>\n+inline void STOP_IF_NULL(T* ptr) {\n+  STOP_IF_NOT(ptr, \"invalid data\");\n+}\n \n template <typename T>\n struct NoDelete {\ndiff --git a/r/src/compute.cpp b/r/src/compute.cpp\nnew file mode 100644\nindex 0000000000..0f55f56def\n--- /dev/null\n+++ b/r/src/compute.cpp\n@@ -0,0 +1,87 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow_types.h\"\n+\n+using namespace Rcpp;\n+using namespace arrow;\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::compute::CastOptions> compute___CastOptions__initialize(\n+    bool allow_int_overflow, bool allow_time_truncate, bool allow_float_truncate) {\n+  auto options = std::make_shared<arrow::compute::CastOptions>();\n+  options->allow_int_overflow = allow_int_overflow;\n+  options->allow_time_truncate = allow_time_truncate;\n+  options->allow_float_truncate = allow_float_truncate;\n+  return options;\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::Array> Array__cast(\n+    const std::shared_ptr<arrow::Array>& array,\n+    const std::shared_ptr<arrow::DataType>& target_type,\n+    const std::shared_ptr<arrow::compute::CastOptions>& options) {\n+  std::shared_ptr<arrow::Array> out;\n+  arrow::compute::FunctionContext context;\n+  STOP_IF_NOT_OK(arrow::compute::Cast(&context, *array, target_type, *options, &out));\n+  return out;\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::ChunkedArray> ChunkedArray__cast(\n+    const std::shared_ptr<arrow::ChunkedArray>& chunked_array,\n+    const std::shared_ptr<arrow::DataType>& target_type,\n+    const std::shared_ptr<arrow::compute::CastOptions>& options) {\n+  arrow::compute::Datum value(chunked_array);\n+  arrow::compute::Datum out;\n+  arrow::compute::FunctionContext context;\n+  STOP_IF_NOT_OK(arrow::compute::Cast(&context, value, target_type, *options, &out));\n+  return out.chunked_array();\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__cast(\n+    const std::shared_ptr<arrow::RecordBatch>& batch,\n+    const std::shared_ptr<arrow::Schema>& schema,\n+    const std::shared_ptr<arrow::compute::CastOptions>& options) {\n+  auto nc = batch->num_columns();\n+\n+  arrow::ArrayVector columns(nc);\n+  for (int i = 0; i < nc; i++) {\n+    columns[i] = Array__cast(batch->column(i), schema->field(i)->type(), options);\n+  }\n+\n+  return arrow::RecordBatch::Make(schema, batch->num_rows(), std::move(columns));\n+}\n+\n+// [[Rcpp::export]]\n+std::shared_ptr<arrow::Table> Table__cast(\n+    const std::shared_ptr<arrow::Table>& table,\n+    const std::shared_ptr<arrow::Schema>& schema,\n+    const std::shared_ptr<arrow::compute::CastOptions>& options) {\n+  auto nc = table->num_columns();\n+\n+  using ColumnVector = std::vector<std::shared_ptr<arrow::Column>>;\n+  ColumnVector columns(nc);\n+  for (int i = 0; i < nc; i++) {\n+    columns[i] = std::make_shared<arrow::Column>(\n+        table->column(i)->name(),\n+        ChunkedArray__cast(table->column(i)->data(), schema->field(i)->type(), options));\n+  }\n+\n+  return arrow::Table::Make(schema, std::move(columns), table->num_rows());\n+}\ndiff --git a/r/src/datatype.cpp b/r/src/datatype.cpp\nindex fa543857b6..47d0eed980 100644\n--- a/r/src/datatype.cpp\n+++ b/r/src/datatype.cpp\n@@ -196,6 +196,14 @@ std::shared_ptr<arrow::Field> Schema__field(const std::shared_ptr<arrow::Schema>\n   return s->field(i);\n }\n \n+// [[Rcpp::export]]\n+CharacterVector Schema__names(const std::shared_ptr<arrow::Schema>& schema) {\n+  auto fields = schema->fields();\n+  return CharacterVector(\n+      fields.begin(), fields.end(),\n+      [](const std::shared_ptr<arrow::Field>& field) { return field->name(); });\n+}\n+\n // [[Rcpp::export]]\n std::string ListType__ToString(const std::shared_ptr<arrow::ListType>& type) {\n   return type->ToString();\ndiff --git a/r/tests/testthat/test-Array.R b/r/tests/testthat/test-Array.R\nindex ca97c98f02..cbf67e711d 100644\n--- a/r/tests/testthat/test-Array.R\n+++ b/r/tests/testthat/test-Array.R\n@@ -292,3 +292,72 @@ test_that(\"array ignores the type argument (ARROW-3784)\", {\n   b <- array(1:10)\n   expect_equal(a, b)\n })\n+\n+test_that(\"integer types casts (ARROW-3741)\", {\n+  a <- array(1:10, NA)\n+  a_int8 <- a$cast(int8())\n+  a_int16 <- a$cast(int16())\n+  a_int32 <- a$cast(int32())\n+  a_int64 <- a$cast(int64())\n+\n+  expect_equal(a_int8$type(), int8())\n+  expect_equal(a_int16$type(), int16())\n+  expect_equal(a_int32$type(), int32())\n+  expect_equal(a_int64$type(), int64())\n+  expect_true(a_int8$IsNull(10L))\n+  expect_true(a_int16$IsNull(10L))\n+  expect_true(a_int32$IsNull(10L))\n+  expect_true(a_int64$IsNull(10L))\n+\n+  a_uint8 <- a$cast(uint8())\n+  a_uint16 <- a$cast(uint16())\n+  a_uint32 <- a$cast(uint32())\n+  a_uint64 <- a$cast(uint64())\n+\n+  expect_equal(a_uint8$type(), uint8())\n+  expect_equal(a_uint16$type(), uint16())\n+  expect_equal(a_uint32$type(), uint32())\n+  expect_equal(a_uint64$type(), uint64())\n+  expect_true(a_uint8$IsNull(10L))\n+  expect_true(a_uint16$IsNull(10L))\n+  expect_true(a_uint32$IsNull(10L))\n+  expect_true(a_uint64$IsNull(10L))\n+})\n+\n+test_that(\"integer types cast safety (ARROW-3741)\", {\n+  a <- array(-(1:10))\n+  expect_error(a$cast(uint8()))\n+  expect_error(a$cast(uint16()))\n+\n+  # this looks like a bug in the C++\n+  # expect_error(a$cast(uint32()))\n+  # expect_error(a$cast(uint64()))\n+\n+  expect_error(a$cast(uint8(), safe = FALSE), NA)\n+  expect_error(a$cast(uint16(), safe = FALSE), NA)\n+  expect_error(a$cast(uint32(), safe = FALSE), NA)\n+  expect_error(a$cast(uint64(), safe = FALSE), NA)\n+})\n+\n+test_that(\"float types casts (ARROW-3741)\", {\n+  x <- c(1, 2, 3, NA)\n+  a <- array(x)\n+  a_f32 <- a$cast(float32())\n+  a_f64 <- a$cast(float64())\n+\n+  expect_equal(a_f32$type(), float32())\n+  expect_equal(a_f64$type(), float64())\n+\n+  expect_true(a_f32$IsNull(3L))\n+  expect_true(a_f64$IsNull(3L))\n+\n+  expect_equal(a_f32$as_vector(), x)\n+  expect_equal(a_f64$as_vector(), x)\n+})\n+\n+test_that(\"cast to half float works\", {\n+  skip(\"until https://issues.apache.org/jira/browse/ARROW-3802\")\n+  a <- array(1:4)\n+  a_f16 <- a$cast(float16())\n+  expect_equal(a_16$type(), float16())\n+})\ndiff --git a/r/tests/testthat/test-RecordBatch.R b/r/tests/testthat/test-RecordBatch.R\nindex 29a9ee8f8e..348327783f 100644\n--- a/r/tests/testthat/test-RecordBatch.R\n+++ b/r/tests/testthat/test-RecordBatch.R\n@@ -169,3 +169,16 @@ test_that(\"read_record_batch can handle Message, Schema parameters (ARROW-3499)\"\n   batch2 <- read_record_batch(message, schema)\n   expect_equal(batch, batch2)\n })\n+\n+test_that(\"RecordBatch cast (ARROW-3741)\", {\n+  batch <- table(tibble::tibble(x = 1:10, y  = 1:10))\n+\n+  expect_error(batch$cast(schema(x = int32())))\n+  expect_error(batch$cast(schema(x = int32(), z = int32())))\n+\n+  s2 <- schema(x = int16(), y = int64())\n+  batch2 <- batch$cast(s2)\n+  expect_equal(batch2$schema(), s2)\n+  expect_equal(batch2$column(0L)$type(), int16())\n+  expect_equal(batch2$column(1L)$type(), int64())\n+})\ndiff --git a/r/tests/testthat/test-Table.R b/r/tests/testthat/test-Table.R\nindex 681b7a94d2..d5db9de240 100644\n--- a/r/tests/testthat/test-Table.R\n+++ b/r/tests/testthat/test-Table.R\n@@ -57,3 +57,16 @@ test_that(\"read_table handles various input streams (ARROW-3450, ARROW-3505)\", {\n   expect_equal(tab, tab7)\n   expect_equal(tab, tab8)\n })\n+\n+test_that(\"Table cast (ARROW-3741)\", {\n+  tab <- table(tibble::tibble(x = 1:10, y  = 1:10))\n+\n+  expect_error(tab$cast(schema(x = int32())))\n+  expect_error(tab$cast(schema(x = int32(), z = int32())))\n+\n+  s2 <- schema(x = int16(), y = int64())\n+  tab2 <- tab$cast(s2)\n+  expect_equal(tab2$schema(), s2)\n+  expect_equal(tab2$column(0L)$type(), int16())\n+  expect_equal(tab2$column(1L)$type(), int64())\n+})\ndiff --git a/r/tests/testthat/test-chunkedarray.R b/r/tests/testthat/test-chunkedarray.R\nindex fb45c99737..8bca620147 100644\n--- a/r/tests/testthat/test-chunkedarray.R\n+++ b/r/tests/testthat/test-chunkedarray.R\n@@ -165,3 +165,35 @@ test_that(\"chunked_array ignores the type argument (ARROW-3784)\", {\n   b <- chunked_array(1:10)\n   expect_equal(a, b)\n })\n+\n+test_that(\"integer types casts for ChunkedArray (ARROW-3741)\", {\n+  a <- chunked_array(1:10, 1:10)\n+  a_int8 <- a$cast(int8())\n+  a_int16 <- a$cast(int16())\n+  a_int32 <- a$cast(int32())\n+  a_int64 <- a$cast(int64())\n+\n+  expect_is(a_int8, \"arrow::ChunkedArray\")\n+  expect_is(a_int16, \"arrow::ChunkedArray\")\n+  expect_is(a_int32, \"arrow::ChunkedArray\")\n+  expect_is(a_int64, \"arrow::ChunkedArray\")\n+  expect_equal(a_int8$type(), int8())\n+  expect_equal(a_int16$type(), int16())\n+  expect_equal(a_int32$type(), int32())\n+  expect_equal(a_int64$type(), int64())\n+\n+  a_uint8 <- a$cast(uint8())\n+  a_uint16 <- a$cast(uint16())\n+  a_uint32 <- a$cast(uint32())\n+  a_uint64 <- a$cast(uint64())\n+\n+  expect_is(a_uint8, \"arrow::ChunkedArray\")\n+  expect_is(a_uint16, \"arrow::ChunkedArray\")\n+  expect_is(a_uint32, \"arrow::ChunkedArray\")\n+  expect_is(a_uint64, \"arrow::ChunkedArray\")\n+\n+  expect_equal(a_uint8$type(), uint8())\n+  expect_equal(a_uint16$type(), uint16())\n+  expect_equal(a_uint32$type(), uint32())\n+  expect_equal(a_uint64$type(), uint64())\n+})\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-24T19:48:32.163+0000",
                    "updated": "2018-11-24T19:48:32.163+0000",
                    "started": "2018-11-24T19:48:32.162+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "169159",
                    "issueId": "13197536"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2d3e7b40[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b6fa89e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4636dccf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@508ba7cf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a946e93[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@30e514cc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40c576bb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4dfd14b3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24f41b69[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3c2f284f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5734e1df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@72492f06[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 24 19:48:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-24T19:48:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3741/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-09T23:28:47.000+0000",
        "updated": "2018-11-24T19:48:32.000+0000",
        "timeoriginalestimate": null,
        "description": "See {{pyarrow.Array.cast}} and {{pyarrow.Table.cast}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Add support for arrow::compute::Cast to convert Arrow arrays from one type to another",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197536/comment/16697943",
                    "id": "16697943",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2959\n[https://github.com/apache/arrow/pull/2959]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-24T19:48:21.944+0000",
                    "updated": "2018-11-24T19:48:21.944+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00chc:",
        "customfield_12314139": null
    }
}