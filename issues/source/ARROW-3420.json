{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13189108",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108",
    "key": "ARROW-3420",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3420/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/worklog/151984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2713: ARROW-3420: [C++] include-what-you-use cleanups for most of src/arrow, add \"iwyu\" target to top level docker-compose\nURL: https://github.com/apache/arrow/pull/2713\n \n \n   You can run IWYU now with `docker-compose run iwyu`. \r\n   \r\n   I fixed most of the obvious issues in src/arrow. There are some I couldn't quite figure out. I will leave cleaning src/parquet for a follow up patch. \r\n   \r\n   IWYU makes some spurious reports thinking that certain headers can be removed when they cannot. Not sure what's going on there.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-06T15:53:10.999+0000",
                    "updated": "2018-10-06T15:53:10.999+0000",
                    "started": "2018-10-06T15:53:10.998+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151984",
                    "issueId": "13189108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/worklog/151985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2713: ARROW-3420: [C++] include-what-you-use cleanups for most of src/arrow, add \"iwyu\" target to top level docker-compose\nURL: https://github.com/apache/arrow/pull/2713#discussion_r223186373\n \n \n\n ##########\n File path: dev/docker_common/install_clang_tools_xenial.sh\n ##########\n @@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|apt-key add -\n+apt-add-repository -y \\\n+     \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-6.0 main\"\n+apt-get update -qq\n+apt-get install -y -q libclang-6.0-dev clang-6.0 clang-format-6.0 clang-tidy-6.0\n \n Review comment:\n   I intend to reuse either the cpp dockerfile or the python dockerfile to run the iwyu and lint instead of duplicating the images. What do You think about using clang instead of gcc by [default](https://github.com/apache/arrow/blob/master/cpp/Dockerfile#L22)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-06T16:01:37.068+0000",
                    "updated": "2018-10-06T16:01:37.068+0000",
                    "started": "2018-10-06T16:01:37.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151985",
                    "issueId": "13189108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/worklog/151986",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2713: ARROW-3420: [C++] include-what-you-use cleanups for most of src/arrow, add \"iwyu\" target to top level docker-compose\nURL: https://github.com/apache/arrow/pull/2713#discussion_r223186427\n \n \n\n ##########\n File path: dev/docker_common/install_clang_tools_xenial.sh\n ##########\n @@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|apt-key add -\n+apt-add-repository -y \\\n+     \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-6.0 main\"\n+apt-get update -qq\n+apt-get install -y -q libclang-6.0-dev clang-6.0 clang-format-6.0 clang-tidy-6.0\n \n Review comment:\n   Sure, feel free to go ahead and make changes directly in my branch here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-06T16:03:35.949+0000",
                    "updated": "2018-10-06T16:03:35.949+0000",
                    "started": "2018-10-06T16:03:35.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151986",
                    "issueId": "13189108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/worklog/151987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2713: ARROW-3420: [C++] include-what-you-use cleanups for most of src/arrow, add \"iwyu\" target to top level docker-compose\nURL: https://github.com/apache/arrow/pull/2713#discussion_r223186428\n \n \n\n ##########\n File path: dev/docker_common/install_clang_tools_xenial.sh\n ##########\n @@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|apt-key add -\n+apt-add-repository -y \\\n+     \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-6.0 main\"\n+apt-get update -qq\n+apt-get install -y -q libclang-6.0-dev clang-6.0 clang-format-6.0 clang-tidy-6.0\n \n Review comment:\n   Eventually arrow:cpp will replace the docker_common image.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-06T16:03:36.276+0000",
                    "updated": "2018-10-06T16:03:36.276+0000",
                    "started": "2018-10-06T16:03:36.275+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "151987",
                    "issueId": "13189108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/worklog/152024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2713: ARROW-3420: [C++] include-what-you-use cleanups for most of src/arrow, add \"iwyu\" target to top level docker-compose\nURL: https://github.com/apache/arrow/pull/2713#discussion_r223204061\n \n \n\n ##########\n File path: dev/docker_common/install_clang_tools_xenial.sh\n ##########\n @@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|apt-key add -\n+apt-add-repository -y \\\n+     \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-6.0 main\"\n+apt-get update -qq\n+apt-get install -y -q libclang-6.0-dev clang-6.0 clang-format-6.0 clang-tidy-6.0\n \n Review comment:\n   I'll do it in a follow-up.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-07T07:42:28.631+0000",
                    "updated": "2018-10-07T07:42:28.631+0000",
                    "started": "2018-10-07T07:42:28.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152024",
                    "issueId": "13189108"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/worklog/152033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2713: ARROW-3420: [C++] include-what-you-use cleanups for most of src/arrow, add \"iwyu\" target to top level docker-compose\nURL: https://github.com/apache/arrow/pull/2713\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/build-support/iwyu/mappings/arrow-misc.imp b/cpp/build-support/iwyu/mappings/arrow-misc.imp\nindex cbe5bd1925..8bb65e62d9 100644\n--- a/cpp/build-support/iwyu/mappings/arrow-misc.imp\n+++ b/cpp/build-support/iwyu/mappings/arrow-misc.imp\n@@ -15,6 +15,7 @@\n # specific language governing permissions and limitations\n # under the License.\n [\n+  { include: [\"<ext/new_allocator.h>\", private, \"<cstddef>\", public ] },\n   { include: [\"<ext/alloc_traits.h>\", private, \"<memory>\", public ] },\n   { include: [\"<ext/alloc_traits.h>\", private, \"<condition_variable>\", public ] },\n   { include: [\"<ext/alloc_traits.h>\", private, \"<deque>\", public ] },\n@@ -29,6 +30,7 @@\n   { include: [\"<bits/stdint-intn.h>\", private, \"<cstdint>\", public ] },\n   { include: [\"<bits/stdint-uintn.h>\", private, \"<cstdint>\", public ] },\n   { include: [\"<bits/shared_ptr.h>\", private, \"<memory>\", public ] },\n+  { include: [\"<initializer_list>\", public, \"<vector>\", public ] },\n   { symbol: [\"bool\", private, \"<cstdint>\", public ] },\n   { symbol: [\"false\", private, \"<cstdint>\", public ] },\n   { symbol: [\"true\", private, \"<cstdint>\", public ] },\n@@ -40,6 +42,9 @@\n   { symbol: [\"uint16_t\", private, \"<cstdint>\", public ] },\n   { symbol: [\"uint32_t\", private, \"<cstdint>\", public ] },\n   { symbol: [\"uint64_t\", private, \"<cstdint>\", public ] },\n+  { symbol: [\"size_t\", private, \"<cstddef>\", public ] },\n+  { symbol: [\"variant\", private, \"\\\"arrow/compute/kernel.h\\\"\", public ] },\n+  { symbol: [\"Array\", private, \"\\\"arrow/type_fwd.h\\\"\", public ] },\n   { symbol: [\"make_shared\", private, \"<memory>\", public ] },\n   { symbol: [\"shared_ptr\", private, \"<memory>\", public ] },\n   { symbol: [\"_Node_const_iterator\", private, \"<flatbuffers/flatbuffers.h>\", public ] },\ndiff --git a/cpp/cmake_modules/SetupCxxFlags.cmake b/cpp/cmake_modules/SetupCxxFlags.cmake\nindex 7ebb0337fa..0d2fd33a17 100644\n--- a/cpp/cmake_modules/SetupCxxFlags.cmake\n+++ b/cpp/cmake_modules/SetupCxxFlags.cmake\n@@ -173,9 +173,12 @@ else()\n   endif()\n endif()\n \n-# Disable annoying \"performance warning\" about int-to-bool conversion\n if (\"${COMPILER_FAMILY}\" STREQUAL \"msvc\")\n+  # Disable annoying \"performance warning\" about int-to-bool conversion\n   set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} /wd4800\")\n+\n+  # Disable unchecked iterator warnings, equivalent to /D_SCL_SECURE_NO_WARNINGS\n+  set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} /wd4996\")\n endif()\n \n if (\"${COMPILER_FAMILY}\" STREQUAL \"gcc\" AND\ndiff --git a/cpp/src/arrow/api.h b/cpp/src/arrow/api.h\nindex 7cae8414a7..103a2b25b6 100644\n--- a/cpp/src/arrow/api.h\n+++ b/cpp/src/arrow/api.h\n@@ -20,19 +20,19 @@\n #ifndef ARROW_API_H\n #define ARROW_API_H\n \n-#include \"arrow/array.h\"\n-#include \"arrow/buffer.h\"\n-#include \"arrow/builder.h\"\n-#include \"arrow/compare.h\"\n-#include \"arrow/memory_pool.h\"\n-#include \"arrow/pretty_print.h\"\n-#include \"arrow/record_batch.h\"\n-#include \"arrow/status.h\"\n-#include \"arrow/table.h\"\n-#include \"arrow/table_builder.h\"\n-#include \"arrow/tensor.h\"\n-#include \"arrow/type.h\"\n-#include \"arrow/visitor.h\"\n+#include \"arrow/array.h\"          // IYWU pragma: export\n+#include \"arrow/buffer.h\"         // IYWU pragma: export\n+#include \"arrow/builder.h\"        // IYWU pragma: export\n+#include \"arrow/compare.h\"        // IYWU pragma: export\n+#include \"arrow/memory_pool.h\"    // IYWU pragma: export\n+#include \"arrow/pretty_print.h\"   // IYWU pragma: export\n+#include \"arrow/record_batch.h\"   // IYWU pragma: export\n+#include \"arrow/status.h\"         // IYWU pragma: export\n+#include \"arrow/table.h\"          // IYWU pragma: export\n+#include \"arrow/table_builder.h\"  // IYWU pragma: export\n+#include \"arrow/tensor.h\"         // IYWU pragma: export\n+#include \"arrow/type.h\"           // IYWU pragma: export\n+#include \"arrow/visitor.h\"        // IYWU pragma: export\n \n /// \\brief Top-level namespace for Apache Arrow C++ API\n namespace arrow {}\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex f5153aa0ce..a0be049159 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -15,24 +15,33 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <algorithm>\n+#include <array>\n #include <cstdint>\n-#include <cstdlib>\n+#include <cstring>\n+#include <iterator>\n+#include <limits>\n #include <memory>\n #include <numeric>\n+#include <ostream>\n+#include <string>\n+#include <type_traits>\n #include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n #include \"arrow/array.h\"\n #include \"arrow/buffer.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/ipc/test-common.h\"\n #include \"arrow/memory_pool.h\"\n+#include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n #include \"arrow/test-common.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/lazy.h\"\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex 26abc336fb..3d88618b48 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -19,9 +19,7 @@\n \n #include <algorithm>\n #include <cstdint>\n-#include <cstring>\n #include <limits>\n-#include <set>\n #include <sstream>\n #include <utility>\n \n@@ -29,6 +27,7 @@\n #include \"arrow/compare.h\"\n #include \"arrow/pretty_print.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex 70ceb8a9a6..8c5e0a58d4 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -18,25 +18,28 @@\n #ifndef ARROW_ARRAY_H\n #define ARROW_ARRAY_H\n \n-#include <cmath>\n+#include <cstddef>\n #include <cstdint>\n+#include <iosfwd>\n #include <memory>\n #include <string>\n+#include <type_traits>\n #include <utility>\n #include <vector>\n \n #include \"arrow/buffer.h\"\n #include \"arrow/type.h\"\n-#include \"arrow/type_fwd.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n-#include \"arrow/visitor.h\"\n \n namespace arrow {\n \n+class Array;\n+class ArrayVisitor;\n+\n using BufferVector = std::vector<std::shared_ptr<Buffer>>;\n \n // When slicing, we do not know the null count of the sliced range without\n@@ -48,9 +51,6 @@ constexpr int64_t kUnknownNullCount = -1;\n class MemoryPool;\n class Status;\n \n-template <typename T>\n-struct Decimal;\n-\n // ----------------------------------------------------------------------\n // Generic array data container\n \ndiff --git a/cpp/src/arrow/buffer-test.cc b/cpp/src/arrow/buffer-test.cc\nindex 6ee60765d2..13ea8a3034 100644\n--- a/cpp/src/arrow/buffer-test.cc\n+++ b/cpp/src/arrow/buffer-test.cc\n@@ -20,6 +20,8 @@\n #include <limits>\n #include <memory>\n #include <string>\n+#include <utility>\n+#include <vector>\n \n #include <gtest/gtest.h>\n \ndiff --git a/cpp/src/arrow/buffer.h b/cpp/src/arrow/buffer.h\nindex d37a3365b1..66c131413c 100644\n--- a/cpp/src/arrow/buffer.h\n+++ b/cpp/src/arrow/buffer.h\n@@ -19,6 +19,7 @@\n #define ARROW_BUFFER_H\n \n #include <algorithm>\n+#include <array>\n #include <cstdint>\n #include <cstring>\n #include <memory>\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 2210dd30cd..8b1b8b90a5 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -17,9 +17,9 @@\n \n #include \"arrow/builder.h\"\n #include <algorithm>\n+#include <cstddef>\n #include <cstdint>\n #include <cstring>\n-#include <limits>\n #include <numeric>\n #include <sstream>\n #include <utility>\n@@ -27,7 +27,6 @@\n \n #include \"arrow/array.h\"\n #include \"arrow/buffer.h\"\n-#include \"arrow/compare.h\"\n #include \"arrow/status.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 1347cae3eb..cb4b9ebe52 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -18,13 +18,15 @@\n #ifndef ARROW_BUILDER_H\n #define ARROW_BUILDER_H\n \n-#include <algorithm>\n+#include <algorithm>  // IWYU pragma: keep\n #include <array>\n #include <cstdint>\n-#include <functional>\n+#include <cstring>\n+#include <iterator>\n #include <limits>\n #include <memory>\n #include <string>\n+#include <type_traits>\n #include <vector>\n \n #include \"arrow/buffer.h\"\n@@ -35,22 +37,18 @@\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/hash.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/type_traits.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n class Array;\n+struct ArrayData;\n class Decimal128;\n \n constexpr int64_t kBinaryMemoryLimit = std::numeric_limits<int32_t>::max() - 1;\n constexpr int64_t kListMaximumElements = std::numeric_limits<int32_t>::max() - 1;\n \n-namespace internal {\n-\n-struct ArrayData;\n-\n-}  // namespace internal\n-\n constexpr int64_t kMinBuilderCapacity = 1 << 5;\n \n /// Base class for all data array builders.\ndiff --git a/cpp/src/arrow/compare.cc b/cpp/src/arrow/compare.cc\nindex 9ed202deb7..2f4f5d1636 100644\n--- a/cpp/src/arrow/compare.cc\n+++ b/cpp/src/arrow/compare.cc\n@@ -19,18 +19,24 @@\n \n #include \"arrow/compare.h\"\n \n+#include <climits>\n+#include <cmath>\n #include <cstdint>\n+#include <cstring>\n #include <memory>\n+#include <string>\n+#include <type_traits>\n #include <vector>\n \n #include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n #include \"arrow/status.h\"\n #include \"arrow/tensor.h\"\n #include \"arrow/type.h\"\n-#include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/visitor_inline.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/compare.h b/cpp/src/arrow/compare.h\nindex 956ae897ef..21e2fdc24f 100644\n--- a/cpp/src/arrow/compare.h\n+++ b/cpp/src/arrow/compare.h\n@@ -28,7 +28,6 @@ namespace arrow {\n \n class Array;\n class DataType;\n-class Status;\n class Tensor;\n \n /// Returns true if the arrays are exactly equal\ndiff --git a/cpp/src/arrow/compute/api.h b/cpp/src/arrow/compute/api.h\nindex b3700b4c58..8ef3ea47c0 100644\n--- a/cpp/src/arrow/compute/api.h\n+++ b/cpp/src/arrow/compute/api.h\n@@ -18,10 +18,10 @@\n #ifndef ARROW_COMPUTE_API_H\n #define ARROW_COMPUTE_API_H\n \n-#include \"arrow/compute/context.h\"\n-#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/context.h\"  // IWYU pragma: export\n+#include \"arrow/compute/kernel.h\"   // IWYU pragma: export\n \n-#include \"arrow/compute/kernels/cast.h\"\n-#include \"arrow/compute/kernels/hash.h\"\n+#include \"arrow/compute/kernels/cast.h\"  // IWYU pragma: export\n+#include \"arrow/compute/kernels/hash.h\"  // IWYU pragma: export\n \n #endif  // ARROW_COMPUTE_API_H\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex 056fb031b7..8da3408ce4 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -16,27 +16,26 @@\n // under the License.\n \n #include <cstdint>\n-#include <cstdlib>\n+#include <cstdio>\n+#include <functional>\n #include <locale>\n #include <memory>\n-#include <numeric>\n-#include <sstream>\n+#include <stdexcept>\n+#include <string>\n #include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n #include \"arrow/array.h\"\n #include \"arrow/buffer.h\"\n-#include \"arrow/builder.h\"\n-#include \"arrow/compare.h\"\n-#include \"arrow/ipc/test-common.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/pretty_print.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n #include \"arrow/test-common.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n \n #include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernel.h\"\ndiff --git a/cpp/src/arrow/compute/context.h b/cpp/src/arrow/compute/context.h\nindex 48dd57f064..8ac4700b91 100644\n--- a/cpp/src/arrow/compute/context.h\n+++ b/cpp/src/arrow/compute/context.h\n@@ -18,15 +18,18 @@\n #ifndef ARROW_COMPUTE_CONTEXT_H\n #define ARROW_COMPUTE_CONTEXT_H\n \n+#include <cstdint>\n #include <memory>\n \n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n+class Buffer;\n+\n namespace internal {\n class CpuInfo;\n }  // namespace internal\ndiff --git a/cpp/src/arrow/compute/kernel.h b/cpp/src/arrow/compute/kernel.h\nindex fd596f18e2..8048fff75b 100644\n--- a/cpp/src/arrow/compute/kernel.h\n+++ b/cpp/src/arrow/compute/kernel.h\n@@ -25,7 +25,7 @@\n #include \"arrow/record_batch.h\"\n #include \"arrow/table.h\"\n #include \"arrow/util/macros.h\"\n-#include \"arrow/util/variant.h\"\n+#include \"arrow/util/variant.h\"  // IWYU pragma: export\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/compute/kernels/boolean.cc b/cpp/src/arrow/compute/kernels/boolean.cc\nindex d51b5d47e0..e1aa166957 100644\n--- a/cpp/src/arrow/compute/kernels/boolean.cc\n+++ b/cpp/src/arrow/compute/kernels/boolean.cc\n@@ -17,12 +17,18 @@\n \n #include \"arrow/compute/kernels/boolean.h\"\n \n+#include <memory>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n #include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n #include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type_fwd.h\"\n+#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/logging.h\"\n \n-#include <vector>\n-\n namespace arrow {\n \n using internal::BitmapAnd;\ndiff --git a/cpp/src/arrow/compute/kernels/boolean.h b/cpp/src/arrow/compute/kernels/boolean.h\nindex 4c4072caed..88f5ad18a1 100644\n--- a/cpp/src/arrow/compute/kernels/boolean.h\n+++ b/cpp/src/arrow/compute/kernels/boolean.h\n@@ -18,22 +18,15 @@\n #ifndef ARROW_COMPUTE_KERNELS_BOOLEAN_H\n #define ARROW_COMPUTE_KERNELS_BOOLEAN_H\n \n-#include <memory>\n-\n #include \"arrow/status.h\"\n #include \"arrow/util/visibility.h\"\n \n-#include \"arrow/compute/kernel.h\"\n-\n namespace arrow {\n-\n-class Array;\n-class ChunkedArray;\n-class Column;\n-class DataType;\n-\n namespace compute {\n \n+struct Datum;\n+class FunctionContext;\n+\n /// \\brief Invert the values of a boolean datum\n /// \\param[in] context the FunctionContext\n /// \\param[in] value datum to invert\ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex c9e2bdb1ed..4f124e8a3b 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -23,7 +23,6 @@\n #include <limits>\n #include <memory>\n #include <sstream>\n-#include <string>\n #include <type_traits>\n #include <utility>\n #include <vector>\n@@ -31,14 +30,13 @@\n #include \"arrow/array.h\"\n #include \"arrow/buffer.h\"\n #include \"arrow/builder.h\"\n-#include \"arrow/compare.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n #include \"arrow/util/macros.h\"\n-#include \"arrow/util/parsing.h\"\n+#include \"arrow/util/parsing.h\"  // IWYU pragma: keep\n \n #include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernel.h\"\ndiff --git a/cpp/src/arrow/compute/kernels/cast.h b/cpp/src/arrow/compute/kernels/cast.h\nindex 49b12b9d56..65c70bf14a 100644\n--- a/cpp/src/arrow/compute/kernels/cast.h\n+++ b/cpp/src/arrow/compute/kernels/cast.h\n@@ -23,17 +23,17 @@\n #include \"arrow/status.h\"\n #include \"arrow/util/visibility.h\"\n \n-#include \"arrow/compute/kernel.h\"\n-\n namespace arrow {\n \n class Array;\n-class ChunkedArray;\n-class Column;\n class DataType;\n \n namespace compute {\n \n+struct Datum;\n+class FunctionContext;\n+class UnaryKernel;\n+\n struct ARROW_EXPORT CastOptions {\n   CastOptions()\n       : allow_int_overflow(false),\ndiff --git a/cpp/src/arrow/compute/kernels/hash.cc b/cpp/src/arrow/compute/kernels/hash.cc\nindex 51e0a08bfe..fc95a3729b 100644\n--- a/cpp/src/arrow/compute/kernels/hash.cc\n+++ b/cpp/src/arrow/compute/kernels/hash.cc\n@@ -17,25 +17,37 @@\n \n #include \"arrow/compute/kernels/hash.h\"\n \n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n #include <exception>\n-#include <limits>\n #include <memory>\n #include <mutex>\n #include <sstream>\n #include <string>\n+#include <type_traits>\n #include <utility>\n #include <vector>\n \n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernel.h\"\n #include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/hash-util.h\"\n #include \"arrow/util/hash.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n \n namespace arrow {\n \n+class MemoryPool;\n+\n using internal::checked_cast;\n \n namespace compute {\ndiff --git a/cpp/src/arrow/compute/kernels/hash.h b/cpp/src/arrow/compute/kernels/hash.h\nindex 05f2429498..9e556c666b 100644\n--- a/cpp/src/arrow/compute/kernels/hash.h\n+++ b/cpp/src/arrow/compute/kernels/hash.h\n@@ -19,14 +19,17 @@\n #define ARROW_COMPUTE_KERNELS_HASH_H\n \n #include <memory>\n-#include <vector>\n \n #include \"arrow/compute/kernel.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/type_fwd.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n namespace compute {\n \n class FunctionContext;\ndiff --git a/cpp/src/arrow/compute/kernels/util-internal.cc b/cpp/src/arrow/compute/kernels/util-internal.cc\nindex c16e7aa052..81fafcba61 100644\n--- a/cpp/src/arrow/compute/kernels/util-internal.cc\n+++ b/cpp/src/arrow/compute/kernels/util-internal.cc\n@@ -18,14 +18,15 @@\n #include \"arrow/compute/kernels/util-internal.h\"\n \n #include <algorithm>\n+#include <cstdint>\n #include <memory>\n #include <vector>\n \n #include \"arrow/array.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n #include \"arrow/util/logging.h\"\n \n-#include \"arrow/compute/context.h\"\n #include \"arrow/compute/kernel.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/compute/kernels/util-internal.h b/cpp/src/arrow/compute/kernels/util-internal.h\nindex 78ef66266f..95dfed9eea 100644\n--- a/cpp/src/arrow/compute/kernels/util-internal.h\n+++ b/cpp/src/arrow/compute/kernels/util-internal.h\n@@ -21,8 +21,10 @@\n #include <memory>\n #include <vector>\n \n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n #include \"arrow/compute/kernel.h\"\n-#include \"arrow/type_fwd.h\"\n+#include \"arrow/status.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/csv/chunker.cc b/cpp/src/arrow/csv/chunker.cc\nindex 2394ce26eb..92ccbbccc6 100644\n--- a/cpp/src/arrow/csv/chunker.cc\n+++ b/cpp/src/arrow/csv/chunker.cc\n@@ -16,12 +16,12 @@\n // under the License.\n \n #include \"arrow/csv/chunker.h\"\n+\n+#include <cstdint>\n+\n #include \"arrow/status.h\"\n #include \"arrow/util/logging.h\"\n \n-#include <sstream>\n-#include <string>\n-\n namespace arrow {\n namespace csv {\n \ndiff --git a/cpp/src/arrow/csv/chunker.h b/cpp/src/arrow/csv/chunker.h\nindex 7d5ba3a538..6c61632614 100644\n--- a/cpp/src/arrow/csv/chunker.h\n+++ b/cpp/src/arrow/csv/chunker.h\n@@ -19,10 +19,10 @@\n #define ARROW_CSV_CHUNKER_H\n \n #include <cstdint>\n-#include <vector>\n \n #include \"arrow/csv/options.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/csv/column-builder.cc b/cpp/src/arrow/csv/column-builder.cc\nindex 4f04f6e0a4..b7610a532e 100644\n--- a/cpp/src/arrow/csv/column-builder.cc\n+++ b/cpp/src/arrow/csv/column-builder.cc\n@@ -15,16 +15,29 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <cstddef>\n+#include <cstdint>\n+#include <memory>\n #include <mutex>\n #include <utility>\n+#include <vector>\n \n+#include \"arrow/array.h\"\n #include \"arrow/csv/column-builder.h\"\n+#include \"arrow/csv/converter.h\"\n+#include \"arrow/csv/options.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n #include \"arrow/util/logging.h\"\n-#include \"arrow/util/macros.h\"\n+#include \"arrow/util/task-group.h\"\n \n namespace arrow {\n namespace csv {\n \n+class BlockParser;\n+\n using internal::TaskGroup;\n \n void ColumnBuilder::SetTaskGroup(const std::shared_ptr<internal::TaskGroup>& task_group) {\ndiff --git a/cpp/src/arrow/csv/converter.cc b/cpp/src/arrow/csv/converter.cc\nindex d8ea0c6fce..19cf1eba67 100644\n--- a/cpp/src/arrow/csv/converter.cc\n+++ b/cpp/src/arrow/csv/converter.cc\n@@ -16,16 +16,19 @@\n // under the License.\n \n #include \"arrow/csv/converter.h\"\n-#include \"arrow/builder.h\"\n-#include \"arrow/status.h\"\n-#include \"arrow/type.h\"\n-#include \"arrow/type_traits.h\"\n-#include \"arrow/util/parsing.h\"\n \n #include <cstring>\n #include <sstream>\n #include <string>\n \n+#include \"arrow/builder.h\"\n+#include \"arrow/csv/parser.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/parsing.h\"  // IWYU pragma: keep\n+\n namespace arrow {\n namespace csv {\n \ndiff --git a/cpp/src/arrow/csv/converter.h b/cpp/src/arrow/csv/converter.h\nindex 959ec71ef5..52f893445b 100644\n--- a/cpp/src/arrow/csv/converter.h\n+++ b/cpp/src/arrow/csv/converter.h\n@@ -18,21 +18,24 @@\n #ifndef ARROW_CSV_CONVERTER_H\n #define ARROW_CSV_CONVERTER_H\n \n+#include <cstdint>\n #include <memory>\n \n #include \"arrow/csv/options.h\"\n-#include \"arrow/csv/parser.h\"\n-#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n class Array;\n class DataType;\n+class MemoryPool;\n class Status;\n \n namespace csv {\n \n+class BlockParser;\n+\n class ARROW_EXPORT Converter {\n  public:\n   Converter(const std::shared_ptr<DataType>& type, ConvertOptions options,\ndiff --git a/cpp/src/arrow/csv/csv-chunker-test.cc b/cpp/src/arrow/csv/csv-chunker-test.cc\nindex 1fb419957b..7eff3e42e4 100644\n--- a/cpp/src/arrow/csv/csv-chunker-test.cc\n+++ b/cpp/src/arrow/csv/csv-chunker-test.cc\n@@ -15,16 +15,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include <gtest/gtest.h>\n-\n-#include <algorithm>\n+#include <cstdint>\n #include <numeric>\n #include <string>\n-#include <vector>\n+\n+#include <gtest/gtest.h>\n \n #include \"arrow/csv/chunker.h\"\n+#include \"arrow/csv/options.h\"\n #include \"arrow/csv/test-common.h\"\n-#include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/csv/csv-column-builder-test.cc b/cpp/src/arrow/csv/csv-column-builder-test.cc\nindex 9de6d7daea..a4dc236287 100644\n--- a/cpp/src/arrow/csv/csv-column-builder-test.cc\n+++ b/cpp/src/arrow/csv/csv-column-builder-test.cc\n@@ -15,21 +15,26 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include <gtest/gtest.h>\n-\n+#include <memory>\n #include <string>\n #include <vector>\n \n-#include \"arrow/array.h\"\n+#include <gtest/gtest.h>\n+\n #include \"arrow/csv/column-builder.h\"\n+#include \"arrow/csv/options.h\"\n #include \"arrow/csv/test-common.h\"\n-#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n #include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/task-group.h\"\n #include \"arrow/util/thread-pool.h\"\n \n namespace arrow {\n namespace csv {\n \n+class BlockParser;\n+\n using internal::GetCpuThreadPool;\n using internal::TaskGroup;\n \ndiff --git a/cpp/src/arrow/csv/csv-converter-test.cc b/cpp/src/arrow/csv/csv-converter-test.cc\nindex 1cf668d65d..2958615fb5 100644\n--- a/cpp/src/arrow/csv/csv-converter-test.cc\n+++ b/cpp/src/arrow/csv/csv-converter-test.cc\n@@ -15,20 +15,26 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include <gtest/gtest.h>\n-\n+#include <cstdint>\n+#include <memory>\n #include <string>\n #include <vector>\n \n+#include <gtest/gtest.h>\n+\n #include \"arrow/array.h\"\n #include \"arrow/csv/converter.h\"\n+#include \"arrow/csv/options.h\"\n #include \"arrow/csv/test-common.h\"\n #include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n \n namespace arrow {\n namespace csv {\n \n+class BlockParser;\n+\n // All recognized (non-empty) null values\n std::vector<std::string> AllNulls() {\n   return {\"#N/A\\n\", \"#N/A N/A\\n\", \"#NA\\n\",     \"-1.#IND\\n\", \"-1.#QNAN\\n\", \"-NaN\\n\",\ndiff --git a/cpp/src/arrow/csv/csv-parser-test.cc b/cpp/src/arrow/csv/csv-parser-test.cc\nindex 1e8162f432..55c69fb525 100644\n--- a/cpp/src/arrow/csv/csv-parser-test.cc\n+++ b/cpp/src/arrow/csv/csv-parser-test.cc\n@@ -15,11 +15,14 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include <gtest/gtest.h>\n-\n+#include <cstdint>\n #include <string>\n+#include <utility>\n #include <vector>\n \n+#include <gtest/gtest.h>\n+\n+#include \"arrow/csv/options.h\"\n #include \"arrow/csv/parser.h\"\n #include \"arrow/csv/test-common.h\"\n #include \"arrow/status.h\"\ndiff --git a/cpp/src/arrow/csv/parser.cc b/cpp/src/arrow/csv/parser.cc\nindex 83ff758fae..240b1f81f6 100644\n--- a/cpp/src/arrow/csv/parser.cc\n+++ b/cpp/src/arrow/csv/parser.cc\n@@ -16,11 +16,12 @@\n // under the License.\n \n #include \"arrow/csv/parser.h\"\n-#include \"arrow/status.h\"\n-#include \"arrow/util/logging.h\"\n \n+#include <cstdio>\n #include <sstream>\n-#include <string>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n \n namespace arrow {\n namespace csv {\ndiff --git a/cpp/src/arrow/csv/parser.h b/cpp/src/arrow/csv/parser.h\nindex fc708914be..46991b44fc 100644\n--- a/cpp/src/arrow/csv/parser.h\n+++ b/cpp/src/arrow/csv/parser.h\n@@ -19,10 +19,12 @@\n #define ARROW_CSV_PARSER_H\n \n #include <cstdint>\n+#include <memory>\n #include <vector>\n \n #include \"arrow/csv/options.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/csv/reader.cc b/cpp/src/arrow/csv/reader.cc\nindex 6cbda753f9..730abe4915 100644\n--- a/cpp/src/arrow/csv/reader.cc\n+++ b/cpp/src/arrow/csv/reader.cc\n@@ -15,27 +15,40 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include \"arrow/csv/reader.h\"\n+\n+#include <cstdint>\n #include <cstring>\n #include <limits>\n+#include <memory>\n #include <sstream>\n #include <string>\n #include <vector>\n \n+#include \"arrow/buffer.h\"\n #include \"arrow/csv/chunker.h\"\n #include \"arrow/csv/column-builder.h\"\n+#include \"arrow/csv/options.h\"\n #include \"arrow/csv/parser.h\"\n-#include \"arrow/csv/reader.h\"\n-#include \"arrow/io/interfaces.h\"\n #include \"arrow/io/readahead.h\"\n-#include \"arrow/memory_pool.h\"\n-#include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/task-group.h\"\n #include \"arrow/util/thread-pool.h\"\n-#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+class MemoryPool;\n+\n+namespace io {\n+\n+class InputStream;\n+\n+}  // namespace io\n+\n namespace csv {\n \n using internal::GetCpuThreadPool;\ndiff --git a/cpp/src/arrow/csv/reader.h b/cpp/src/arrow/csv/reader.h\nindex f64aa770fc..edf6f11098 100644\n--- a/cpp/src/arrow/csv/reader.h\n+++ b/cpp/src/arrow/csv/reader.h\n@@ -20,7 +20,7 @@\n \n #include <memory>\n \n-#include \"arrow/csv/options.h\"\n+#include \"arrow/csv/options.h\"  // IWYU pragma: keep\n #include \"arrow/status.h\"\n #include \"arrow/util/visibility.h\"\n \ndiff --git a/cpp/src/arrow/io/buffered.h b/cpp/src/arrow/io/buffered.h\nindex 4d4dd25e75..10070c0818 100644\n--- a/cpp/src/arrow/io/buffered.h\n+++ b/cpp/src/arrow/io/buffered.h\n@@ -20,8 +20,8 @@\n #ifndef ARROW_IO_BUFFERED_H\n #define ARROW_IO_BUFFERED_H\n \n+#include <cstdint>\n #include <memory>\n-#include <string>\n \n #include \"arrow/io/interfaces.h\"\n #include \"arrow/util/visibility.h\"\ndiff --git a/cpp/src/arrow/io/file.cc b/cpp/src/arrow/io/file.cc\nindex a5f51b2007..240fac9e5c 100644\n--- a/cpp/src/arrow/io/file.cc\n+++ b/cpp/src/arrow/io/file.cc\n@@ -15,7 +15,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"arrow/util/windows_compatibility.h\"\n+#include \"arrow/util/windows_compatibility.h\"  // IWYU pragma: keep\n \n // sys/mman.h not present in Visual Studio or Cygwin\n #ifdef _WIN32\n@@ -27,17 +27,17 @@\n #undef Free\n #else\n #include <sys/mman.h>\n-#include <unistd.h>\n+#include <unistd.h>  // IWYU pragma: keep\n #endif\n \n-#include <string.h>\n-\n #include <algorithm>\n #include <cerrno>\n #include <cstdint>\n #include <cstring>\n+#include <memory>\n #include <mutex>\n #include <sstream>\n+#include <string>\n \n // ----------------------------------------------------------------------\n // Other Arrow includes\n@@ -549,7 +549,7 @@ Status MemoryMappedFile::ReadAt(int64_t position, int64_t nbytes, int64_t* bytes\n   std::lock_guard<std::mutex> resize_guard(memory_map_->resize_lock());\n   nbytes = std::max<int64_t>(0, std::min(nbytes, memory_map_->size() - position));\n   if (nbytes > 0) {\n-    std::memcpy(out, memory_map_->data() + position, static_cast<size_t>(nbytes));\n+    memcpy(out, memory_map_->data() + position, static_cast<size_t>(nbytes));\n   }\n   *bytes_read = nbytes;\n   return Status::OK();\ndiff --git a/cpp/src/arrow/io/hdfs.cc b/cpp/src/arrow/io/hdfs.cc\nindex 09f3b8d137..3bf577bfad 100644\n--- a/cpp/src/arrow/io/hdfs.cc\n+++ b/cpp/src/arrow/io/hdfs.cc\n@@ -17,17 +17,23 @@\n \n #include <hdfs.h>\n \n+#include <errno.h>\n #include <algorithm>\n #include <cerrno>\n-#include <cstddef>\n #include <cstdint>\n+#include <cstring>\n+#include <memory>\n #include <mutex>\n #include <sstream>\n #include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n \n #include \"arrow/buffer.h\"\n #include \"arrow/io/hdfs-internal.h\"\n #include \"arrow/io/hdfs.h\"\n+#include \"arrow/io/interfaces.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n #include \"arrow/util/logging.h\"\ndiff --git a/cpp/src/arrow/io/io-buffered-test.cc b/cpp/src/arrow/io/io-buffered-test.cc\nindex efa2301f28..03856dcb58 100644\n--- a/cpp/src/arrow/io/io-buffered-test.cc\n+++ b/cpp/src/arrow/io/io-buffered-test.cc\n@@ -15,10 +15,22 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#ifndef _WIN32\n+#include <fcntl.h>  // IWYU pragma: keep\n+#include <unistd.h>\n+#endif\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <iterator>\n #include <memory>\n #include <random>\n #include <string>\n+#include <utility>\n #include <valarray>\n+#include <vector>\n \n #include <gtest/gtest.h>\n \ndiff --git a/cpp/src/arrow/io/io-file-test.cc b/cpp/src/arrow/io/io-file-test.cc\nindex 22d5947c69..a5d19974df 100644\n--- a/cpp/src/arrow/io/io-file-test.cc\n+++ b/cpp/src/arrow/io/io-file-test.cc\n@@ -15,8 +15,12 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#ifndef _WIN32\n+#include <fcntl.h>  // IWYU pragma: keep\n+#include <unistd.h>\n+#endif\n+\n #include <atomic>\n-#include <cerrno>\n #include <cstdint>\n #include <cstdio>\n #include <cstdlib>\ndiff --git a/cpp/src/arrow/io/io-memory-test.cc b/cpp/src/arrow/io/io-memory-test.cc\nindex db536adf75..fa90c1f141 100644\n--- a/cpp/src/arrow/io/io-memory-test.cc\n+++ b/cpp/src/arrow/io/io-memory-test.cc\n@@ -26,7 +26,6 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/io/interfaces.h\"\n #include \"arrow/io/memory.h\"\n-#include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/util/checked_cast.h\"\ndiff --git a/cpp/src/arrow/io/io-readahead-test.cc b/cpp/src/arrow/io/io-readahead-test.cc\nindex b1b7b43955..1e5d02abd2 100644\n--- a/cpp/src/arrow/io/io-readahead-test.cc\n+++ b/cpp/src/arrow/io/io-readahead-test.cc\n@@ -15,10 +15,16 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <algorithm>\n #include <chrono>\n+#include <cstdint>\n+#include <cstring>\n+#include <functional>\n #include <memory>\n+#include <set>\n #include <string>\n #include <thread>\n+#include <utility>\n #include <vector>\n \n #include <gtest/gtest.h>\ndiff --git a/cpp/src/arrow/io/memory.h b/cpp/src/arrow/io/memory.h\nindex 0bff985fc0..e2db05ccf1 100644\n--- a/cpp/src/arrow/io/memory.h\n+++ b/cpp/src/arrow/io/memory.h\n@@ -30,7 +30,6 @@\n namespace arrow {\n \n class Buffer;\n-class MemoryPool;\n class ResizableBuffer;\n class Status;\n \ndiff --git a/cpp/src/arrow/io/readahead.cc b/cpp/src/arrow/io/readahead.cc\nindex c21e45d9e4..89db6a66e8 100644\n--- a/cpp/src/arrow/io/readahead.cc\n+++ b/cpp/src/arrow/io/readahead.cc\n@@ -16,19 +16,22 @@\n // under the License.\n \n #include \"arrow/io/readahead.h\"\n-#include \"arrow/buffer.h\"\n-#include \"arrow/status.h\"\n-#include \"arrow/util/logging.h\"\n \n #include <condition_variable>\n #include <cstring>\n #include <deque>\n #include <memory>\n #include <mutex>\n-#include <string>\n #include <thread>\n #include <utility>\n \n+#include \"arrow/buffer.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+\n namespace arrow {\n namespace io {\n namespace internal {\ndiff --git a/cpp/src/arrow/io/readahead.h b/cpp/src/arrow/io/readahead.h\nindex d7ac509313..950520ba59 100644\n--- a/cpp/src/arrow/io/readahead.h\n+++ b/cpp/src/arrow/io/readahead.h\n@@ -18,10 +18,9 @@\n #ifndef ARROW_IO_READAHEAD_H\n #define ARROW_IO_READAHEAD_H\n \n+#include <cstdint>\n #include <memory>\n-#include <string>\n \n-#include \"arrow/io/interfaces.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n@@ -31,6 +30,9 @@ class ResizableBuffer;\n class Status;\n \n namespace io {\n+\n+class InputStream;\n+\n namespace internal {\n \n struct ARROW_EXPORT ReadaheadBuffer {\ndiff --git a/cpp/src/arrow/ipc/feather-test.cc b/cpp/src/arrow/ipc/feather-test.cc\nindex 1ee36d7c87..ded0a8bbe1 100644\n--- a/cpp/src/arrow/ipc/feather-test.cc\n+++ b/cpp/src/arrow/ipc/feather-test.cc\n@@ -15,26 +15,29 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include <cstdint>\n #include <memory>\n-#include <random>\n #include <sstream>\n #include <string>\n-#include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n+#include \"arrow/array.h\"\n #include \"arrow/io/memory.h\"\n #include \"arrow/ipc/feather-internal.h\"\n-#include \"arrow/ipc/feather.h\"\n+#include \"arrow/ipc/feather_generated.h\"\n #include \"arrow/ipc/test-common.h\"\n+#include \"arrow/memory_pool.h\"\n #include \"arrow/pretty_print.h\"\n-#include \"arrow/table.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n #include \"arrow/util/checked_cast.h\"\n \n namespace arrow {\n \n+class Buffer;\n+\n using internal::checked_cast;\n \n namespace ipc {\ndiff --git a/cpp/src/arrow/ipc/feather.cc b/cpp/src/arrow/ipc/feather.cc\nindex eb7e19e32a..71ca14f40d 100644\n--- a/cpp/src/arrow/ipc/feather.cc\n+++ b/cpp/src/arrow/ipc/feather.cc\n@@ -33,10 +33,10 @@\n #include \"arrow/ipc/feather-internal.h\"\n #include \"arrow/ipc/feather_generated.h\"\n #include \"arrow/ipc/util.h\"  // IWYU pragma: keep\n-#include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/table.h\"\n+#include \"arrow/table.h\"  // IWYU pragma: keep\n #include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\ndiff --git a/cpp/src/arrow/ipc/ipc-json-test.cc b/cpp/src/arrow/ipc/ipc-json-test.cc\nindex 26d396dc06..47a0a29a14 100644\n--- a/cpp/src/arrow/ipc/ipc-json-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-json-test.cc\n@@ -18,21 +18,20 @@\n #include <cstdint>\n #include <cstdio>\n #include <cstring>\n-#include <iostream>\n #include <memory>\n #include <string>\n #include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n #include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/ipc/json-internal.h\"\n #include \"arrow/ipc/json.h\"\n #include \"arrow/ipc/test-common.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/record_batch.h\"\n-#include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\ndiff --git a/cpp/src/arrow/ipc/ipc-read-write-test.cc b/cpp/src/arrow/ipc/ipc-read-write-test.cc\nindex 55c5f409ea..31a9d474fe 100644\n--- a/cpp/src/arrow/ipc/ipc-read-write-test.cc\n+++ b/cpp/src/arrow/ipc/ipc-read-write-test.cc\n@@ -16,28 +16,32 @@\n // under the License.\n \n #include <cstdint>\n-#include <cstdio>\n-#include <cstring>\n+#include <limits>\n #include <memory>\n+#include <ostream>\n #include <string>\n-#include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <flatbuffers/flatbuffers.h>\n+#include <gtest/gtest.h>\n \n #include \"arrow/array.h\"\n #include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/io/file.h\"\n #include \"arrow/io/memory.h\"\n #include \"arrow/io/test-common.h\"\n-#include \"arrow/ipc/Message_generated.h\"\n-#include \"arrow/ipc/api.h\"\n+#include \"arrow/ipc/Message_generated.h\"  // IWYU pragma: keep\n+#include \"arrow/ipc/message.h\"\n #include \"arrow/ipc/metadata-internal.h\"\n+#include \"arrow/ipc/reader.h\"\n #include \"arrow/ipc/test-common.h\"\n-#include \"arrow/ipc/util.h\"\n+#include \"arrow/ipc/writer.h\"\n #include \"arrow/memory_pool.h\"\n-#include \"arrow/pretty_print.h\"\n+#include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n #include \"arrow/tensor.h\"\n #include \"arrow/test-util.h\"\n+#include \"arrow/type.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n \ndiff --git a/cpp/src/arrow/ipc/json-integration-test.cc b/cpp/src/arrow/ipc/json-integration-test.cc\nindex 37778fa251..09cfa2e34b 100644\n--- a/cpp/src/arrow/ipc/json-integration-test.cc\n+++ b/cpp/src/arrow/ipc/json-integration-test.cc\n@@ -50,6 +50,9 @@ DEFINE_bool(verbose, true, \"Verbose output\");\n namespace fs = boost::filesystem;\n \n namespace arrow {\n+\n+class Buffer;\n+\n namespace ipc {\n \n bool file_exists(const char* path) {\ndiff --git a/cpp/src/arrow/ipc/json-internal.cc b/cpp/src/arrow/ipc/json-internal.cc\nindex c235fd2261..d5a5dd9f39 100644\n--- a/cpp/src/arrow/ipc/json-internal.cc\n+++ b/cpp/src/arrow/ipc/json-internal.cc\n@@ -23,10 +23,13 @@\n #include <sstream>\n #include <string>\n #include <type_traits>\n+#include <unordered_map>\n+#include <utility>\n #include <vector>\n \n #include \"arrow/array.h\"\n-#include \"arrow/builder.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"  // IWYU pragma: keep\n #include \"arrow/ipc/dictionary.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n@@ -41,6 +44,8 @@\n \n namespace arrow {\n \n+class MemoryPool;\n+\n using internal::checked_cast;\n \n namespace ipc {\ndiff --git a/cpp/src/arrow/ipc/json-internal.h b/cpp/src/arrow/ipc/json-internal.h\nindex 8becee6cd7..8807a56551 100644\n--- a/cpp/src/arrow/ipc/json-internal.h\n+++ b/cpp/src/arrow/ipc/json-internal.h\n@@ -22,18 +22,28 @@\n #define RAPIDJSON_HAS_CXX11_RVALUE_REFS 1\n #define RAPIDJSON_HAS_CXX11_RANGE_FOR 1\n \n+#define RAPIDJSON_NAMESPACE arrow::rapidjson\n+#define RAPIDJSON_NAMESPACE_BEGIN \\\n+  namespace arrow {               \\\n+  namespace rapidjson {\n+#define RAPIDJSON_NAMESPACE_END \\\n+  }                             \\\n+  }\n+\n #include <memory>\n #include <sstream>\n #include <string>\n \n-#include \"rapidjson/document.h\"\n-#include \"rapidjson/stringbuffer.h\"\n-#include \"rapidjson/writer.h\"\n+#include \"rapidjson/document.h\"      // IWYU pragma: export\n+#include \"rapidjson/encodings.h\"     // IWYU pragma: export\n+#include \"rapidjson/stringbuffer.h\"  // IWYU pragma: export\n+#include \"rapidjson/writer.h\"        // IWYU pragma: export\n \n-#include \"arrow/type_fwd.h\"  // IWYU pragma: export\n+#include \"arrow/status.h\"    // IWYU pragma: export\n+#include \"arrow/type_fwd.h\"  // IWYU pragma: keep\n #include \"arrow/util/visibility.h\"\n \n-namespace rj = rapidjson;\n+namespace rj = arrow::rapidjson;\n using RjWriter = rj::Writer<rj::StringBuffer>;\n using RjArray = rj::Value::ConstArray;\n using RjObject = rj::Value::ConstObject;\ndiff --git a/cpp/src/arrow/ipc/message.cc b/cpp/src/arrow/ipc/message.cc\nindex 797a490d06..724e6255cb 100644\n--- a/cpp/src/arrow/ipc/message.cc\n+++ b/cpp/src/arrow/ipc/message.cc\n@@ -23,10 +23,11 @@\n #include <sstream>\n #include <string>\n \n+#include <flatbuffers/flatbuffers.h>\n+\n #include \"arrow/buffer.h\"\n #include \"arrow/io/interfaces.h\"\n #include \"arrow/ipc/Message_generated.h\"\n-#include \"arrow/ipc/Schema_generated.h\"\n #include \"arrow/ipc/metadata-internal.h\"\n #include \"arrow/ipc/util.h\"\n #include \"arrow/status.h\"\ndiff --git a/cpp/src/arrow/ipc/metadata-internal.cc b/cpp/src/arrow/ipc/metadata-internal.cc\nindex 5ac0735c2b..ef189c8ae6 100644\n--- a/cpp/src/arrow/ipc/metadata-internal.cc\n+++ b/cpp/src/arrow/ipc/metadata-internal.cc\n@@ -18,29 +18,23 @@\n #include \"arrow/ipc/metadata-internal.h\"\n \n #include <cstdint>\n-#include <cstring>\n #include <memory>\n #include <sstream>\n-#include <string>\n #include <utility>\n \n #include <flatbuffers/flatbuffers.h>\n \n #include \"arrow/array.h\"\n-#include \"arrow/buffer.h\"\n #include \"arrow/io/interfaces.h\"\n-#include \"arrow/ipc/File_generated.h\"\n+#include \"arrow/ipc/File_generated.h\"  // IWYU pragma: keep\n #include \"arrow/ipc/Message_generated.h\"\n-#include \"arrow/ipc/Tensor_generated.h\"\n-#include \"arrow/ipc/dictionary.h\"\n+#include \"arrow/ipc/Tensor_generated.h\"  // IWYU pragma: keep\n #include \"arrow/ipc/message.h\"\n #include \"arrow/ipc/util.h\"\n #include \"arrow/status.h\"\n #include \"arrow/tensor.h\"\n #include \"arrow/type.h\"\n-#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/key_value_metadata.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/ipc/metadata-internal.h b/cpp/src/arrow/ipc/metadata-internal.h\nindex 0683b8f131..152ca1367e 100644\n--- a/cpp/src/arrow/ipc/metadata-internal.h\n+++ b/cpp/src/arrow/ipc/metadata-internal.h\n@@ -21,21 +21,24 @@\n #define ARROW_IPC_METADATA_INTERNAL_H\n \n #include <cstdint>\n+#include <cstring>\n #include <memory>\n #include <string>\n #include <vector>\n \n+#include <flatbuffers/flatbuffers.h>\n+\n #include \"arrow/buffer.h\"\n #include \"arrow/ipc/Schema_generated.h\"\n-#include \"arrow/ipc/dictionary.h\"\n+#include \"arrow/ipc/dictionary.h\"  // IYWU pragma: keep\n #include \"arrow/ipc/message.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n \n namespace arrow {\n \n-class Buffer;\n class DataType;\n class Schema;\n-class Status;\n class Tensor;\n \n namespace flatbuf = org::apache::arrow::flatbuf;\n@@ -47,6 +50,9 @@ class OutputStream;\n }  // namespace io\n \n namespace ipc {\n+\n+class DictionaryMemo;\n+\n namespace internal {\n \n static constexpr flatbuf::MetadataVersion kCurrentMetadataVersion =\ndiff --git a/cpp/src/arrow/ipc/reader.cc b/cpp/src/arrow/ipc/reader.cc\nindex ba83229122..65f5d963e8 100644\n--- a/cpp/src/arrow/ipc/reader.cc\n+++ b/cpp/src/arrow/ipc/reader.cc\n@@ -31,18 +31,16 @@\n #include \"arrow/buffer.h\"\n #include \"arrow/io/interfaces.h\"\n #include \"arrow/io/memory.h\"\n-#include \"arrow/ipc/File_generated.h\"\n+#include \"arrow/ipc/File_generated.h\"  // IWYU pragma: export\n #include \"arrow/ipc/Message_generated.h\"\n #include \"arrow/ipc/Schema_generated.h\"\n #include \"arrow/ipc/dictionary.h\"\n #include \"arrow/ipc/message.h\"\n #include \"arrow/ipc/metadata-internal.h\"\n-#include \"arrow/ipc/util.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n #include \"arrow/tensor.h\"\n #include \"arrow/type.h\"\n-#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/logging.h\"\n #include \"arrow/visitor_inline.h\"\n \ndiff --git a/cpp/src/arrow/ipc/stream-to-file.cc b/cpp/src/arrow/ipc/stream-to-file.cc\nindex 859969b3ae..9ebe5825c8 100644\n--- a/cpp/src/arrow/ipc/stream-to-file.cc\n+++ b/cpp/src/arrow/ipc/stream-to-file.cc\n@@ -21,14 +21,12 @@\n \n #include \"arrow/ipc/reader.h\"\n #include \"arrow/ipc/writer.h\"\n+#include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n \n #include \"arrow/util/io-util.h\"\n \n namespace arrow {\n-\n-class RecordBatch;\n-\n namespace ipc {\n \n // Converts a stream from stdin to a file written to standard out.\ndiff --git a/cpp/src/arrow/ipc/writer.cc b/cpp/src/arrow/ipc/writer.cc\nindex 5fcc2b0a21..8225cce7b8 100644\n--- a/cpp/src/arrow/ipc/writer.cc\n+++ b/cpp/src/arrow/ipc/writer.cc\n@@ -21,13 +21,13 @@\n #include <cstdint>\n #include <cstring>\n #include <limits>\n-#include <sstream>\n #include <vector>\n \n #include \"arrow/array.h\"\n #include \"arrow/buffer.h\"\n #include \"arrow/io/interfaces.h\"\n #include \"arrow/io/memory.h\"\n+#include \"arrow/ipc/dictionary.h\"\n #include \"arrow/ipc/message.h\"\n #include \"arrow/ipc/metadata-internal.h\"\n #include \"arrow/ipc/util.h\"\n@@ -40,6 +40,7 @@\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/visitor.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/ipc/writer.h b/cpp/src/arrow/ipc/writer.h\nindex 98431269b9..a1c711146e 100644\n--- a/cpp/src/arrow/ipc/writer.h\n+++ b/cpp/src/arrow/ipc/writer.h\n@@ -21,7 +21,6 @@\n #define ARROW_IPC_WRITER_H\n \n #include <cstdint>\n-#include <functional>\n #include <memory>\n #include <vector>\n \n@@ -30,9 +29,7 @@\n \n namespace arrow {\n \n-class Array;\n class Buffer;\n-class Field;\n class MemoryPool;\n class RecordBatch;\n class Schema;\ndiff --git a/cpp/src/arrow/memory_pool-test.cc b/cpp/src/arrow/memory_pool-test.cc\nindex c2c814644d..ad60a93c81 100644\n--- a/cpp/src/arrow/memory_pool-test.cc\n+++ b/cpp/src/arrow/memory_pool-test.cc\n@@ -22,6 +22,7 @@\n #include \"arrow/memory_pool-test.h\"\n #include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/pretty_print-test.cc b/cpp/src/arrow/pretty_print-test.cc\nindex 9724b8e090..eebb9a9d7e 100644\n--- a/cpp/src/arrow/pretty_print-test.cc\n+++ b/cpp/src/arrow/pretty_print-test.cc\n@@ -16,21 +16,21 @@\n // under the License.\n \n #include <cstdint>\n-#include <cstdio>\n-#include <cstdlib>\n #include <cstring>\n #include <memory>\n #include <sstream>\n+#include <string>\n #include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n #include \"arrow/array.h\"\n #include \"arrow/builder.h\"\n+#include \"arrow/memory_pool.h\"\n #include \"arrow/pretty_print.h\"\n+#include \"arrow/table.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n-#include \"arrow/type_traits.h\"\n #include \"arrow/util/decimal.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/pretty_print.cc b/cpp/src/arrow/pretty_print.cc\nindex 09d8edf77a..73908bf0a4 100644\n--- a/cpp/src/arrow/pretty_print.cc\n+++ b/cpp/src/arrow/pretty_print.cc\n@@ -15,10 +15,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <cstddef>\n+#include <cstdint>\n+#include <iostream>\n #include <memory>\n-#include <ostream>\n #include <sstream>\n #include <string>\n+#include <type_traits>\n #include <vector>\n \n #include \"arrow/array.h\"\n@@ -29,7 +32,6 @@\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/logging.h\"\n #include \"arrow/util/string.h\"\n #include \"arrow/visitor_inline.h\"\n \ndiff --git a/cpp/src/arrow/public-api-test.cc b/cpp/src/arrow/public-api-test.cc\nindex 088da3f593..2009c2e314 100644\n--- a/cpp/src/arrow/public-api-test.cc\n+++ b/cpp/src/arrow/public-api-test.cc\n@@ -15,9 +15,9 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"arrow/api.h\"\n-#include \"arrow/io/api.h\"\n-#include \"arrow/ipc/api.h\"\n+#include \"arrow/api.h\"      // IWYU pragma: keep\n+#include \"arrow/io/api.h\"   // IWYU pragma: keep\n+#include \"arrow/ipc/api.h\"  // IWYU pragma: keep\n \n #ifdef DCHECK\n #error \"DCHECK should not be visible from Arrow public headers.\"\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex be6e9b18b1..67510c411d 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -17,11 +17,10 @@\n \n // Functions for pandas conversion via NumPy\n \n-#include \"arrow/python/numpy_interop.h\"\n+#include \"arrow/python/numpy_interop.h\"  // IWYU pragma: expand\n \n #include \"arrow/python/arrow_to_pandas.h\"\n \n-#include <algorithm>\n #include <cmath>\n #include <cstdint>\n #include <memory>\n@@ -31,13 +30,12 @@\n #include <vector>\n \n #include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n #include \"arrow/status.h\"\n #include \"arrow/table.h\"\n-#include \"arrow/type_fwd.h\"\n+#include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n-#include \"arrow/util/bit-util.h\"\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/parallel.h\"\n@@ -57,6 +55,8 @@\n \n namespace arrow {\n \n+class MemoryPool;\n+\n using internal::checked_cast;\n using internal::ParallelFor;\n \ndiff --git a/cpp/src/arrow/python/numpy_interop.h b/cpp/src/arrow/python/numpy_interop.h\nindex b62c4e67da..094c321375 100644\n--- a/cpp/src/arrow/python/numpy_interop.h\n+++ b/cpp/src/arrow/python/numpy_interop.h\n@@ -18,9 +18,9 @@\n #ifndef PYARROW_NUMPY_INTEROP_H\n #define PYARROW_NUMPY_INTEROP_H\n \n-#include \"arrow/python/platform.h\"\n+#include \"arrow/python/platform.h\"  // IWYU pragma: export\n \n-#include <numpy/numpyconfig.h>\n+#include <numpy/numpyconfig.h>  // IWYU pragma: export\n \n // Don't use the deprecated Numpy functions\n #ifdef NPY_1_7_API_VERSION\n@@ -39,9 +39,9 @@\n #define NO_IMPORT_ARRAY\n #endif\n \n-#include <numpy/arrayobject.h>\n-#include <numpy/arrayscalars.h>\n-#include <numpy/ufuncobject.h>\n+#include <numpy/arrayobject.h>   // IWYU pragma: export\n+#include <numpy/arrayscalars.h>  // IWYU pragma: export\n+#include <numpy/ufuncobject.h>   // IWYU pragma: export\n \n // A bit subtle. Numpy has 5 canonical integer types:\n // (or, rather, type pairs: signed and unsigned)\ndiff --git a/cpp/src/arrow/python/platform.h b/cpp/src/arrow/python/platform.h\nindex ae394695fa..4dc944e409 100644\n--- a/cpp/src/arrow/python/platform.h\n+++ b/cpp/src/arrow/python/platform.h\n@@ -22,7 +22,7 @@\n #define ARROW_PYTHON_PLATFORM_H\n \n #include <iostream>\n-#include <Python.h>\n+#include <Python.h> // IWYU pragma: export\n #include <datetime.h>\n \n // Work around C2528 error\ndiff --git a/cpp/src/arrow/record_batch.h b/cpp/src/arrow/record_batch.h\nindex 6fb747c409..f6538f9c40 100644\n--- a/cpp/src/arrow/record_batch.h\n+++ b/cpp/src/arrow/record_batch.h\n@@ -23,14 +23,14 @@\n #include <string>\n #include <vector>\n \n-#include \"arrow/array.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n-class KeyValueMetadata;\n+class Array;\n+struct ArrayData;\n class Status;\n \n /// \\class RecordBatch\ndiff --git a/cpp/src/arrow/stl-test.cc b/cpp/src/arrow/stl-test.cc\nindex c85baa3a11..6c33098174 100644\n--- a/cpp/src/arrow/stl-test.cc\n+++ b/cpp/src/arrow/stl-test.cc\n@@ -15,9 +15,15 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"gtest/gtest.h\"\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n \n #include \"arrow/stl.h\"\n+#include \"arrow/type.h\"\n \n namespace arrow {\n namespace stl {\ndiff --git a/cpp/src/arrow/table-test.cc b/cpp/src/arrow/table-test.cc\nindex dfd8b63c08..178619b26d 100644\n--- a/cpp/src/arrow/table-test.cc\n+++ b/cpp/src/arrow/table-test.cc\n@@ -15,11 +15,11 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <cstdint>\n #include <memory>\n-#include <string>\n #include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n #include \"arrow/array.h\"\n #include \"arrow/record_batch.h\"\ndiff --git a/cpp/src/arrow/table.h b/cpp/src/arrow/table.h\nindex f80cf29bb0..119e4e4491 100644\n--- a/cpp/src/arrow/table.h\n+++ b/cpp/src/arrow/table.h\n@@ -31,7 +31,7 @@\n \n namespace arrow {\n \n-class KeyValueMetadata;\n+class MemoryPool;\n class Status;\n \n /// \\class ChunkedArray\ndiff --git a/cpp/src/arrow/table_builder-test.cc b/cpp/src/arrow/table_builder-test.cc\nindex 74f5ce0969..3341acdb30 100644\n--- a/cpp/src/arrow/table_builder-test.cc\n+++ b/cpp/src/arrow/table_builder-test.cc\n@@ -15,16 +15,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <cstddef>\n+#include <cstdint>\n #include <memory>\n #include <string>\n #include <vector>\n \n-#include \"gtest/gtest.h\"\n+#include <gtest/gtest.h>\n \n-#include \"arrow/array.h\"\n+#include \"arrow/builder.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/table.h\"\n #include \"arrow/table_builder.h\"\n #include \"arrow/test-common.h\"\n #include \"arrow/test-util.h\"\n@@ -33,6 +34,8 @@\n \n namespace arrow {\n \n+class Array;\n+\n using internal::checked_cast;\n \n class TestRecordBatchBuilder : public TestBase {\ndiff --git a/cpp/src/arrow/table_builder.cc b/cpp/src/arrow/table_builder.cc\nindex ef39d570a5..21d158fb25 100644\n--- a/cpp/src/arrow/table_builder.cc\n+++ b/cpp/src/arrow/table_builder.cc\n@@ -17,17 +17,13 @@\n \n #include \"arrow/table_builder.h\"\n \n-#include <algorithm>\n-#include <cstdlib>\n #include <memory>\n-#include <sstream>\n #include <utility>\n \n #include \"arrow/array.h\"\n #include \"arrow/builder.h\"\n #include \"arrow/record_batch.h\"\n #include \"arrow/status.h\"\n-#include \"arrow/table.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/logging.h\"\n \ndiff --git a/cpp/src/arrow/table_builder.h b/cpp/src/arrow/table_builder.h\nindex bd6b32bdcf..8e7dfc1e5b 100644\n--- a/cpp/src/arrow/table_builder.h\n+++ b/cpp/src/arrow/table_builder.h\n@@ -20,20 +20,19 @@\n \n #include <cstdint>\n #include <memory>\n-#include <string>\n #include <vector>\n \n+#include \"arrow/builder.h\"\n #include \"arrow/status.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \n-class ArrayBuilder;\n class MemoryPool;\n class RecordBatch;\n-class Schema;\n \n /// \\class RecordBatchBuilder\n /// \\brief Helper class for creating record batches iteratively given a known\ndiff --git a/cpp/src/arrow/tensor-test.cc b/cpp/src/arrow/tensor-test.cc\nindex 196841cfd2..ee8205136f 100644\n--- a/cpp/src/arrow/tensor-test.cc\n+++ b/cpp/src/arrow/tensor-test.cc\n@@ -25,7 +25,6 @@\n #include <gtest/gtest.h>\n \n #include \"arrow/buffer.h\"\n-#include \"arrow/memory_pool.h\"\n #include \"arrow/tensor.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\ndiff --git a/cpp/src/arrow/tensor.cc b/cpp/src/arrow/tensor.cc\nindex 7de7558342..5b44a031be 100644\n--- a/cpp/src/arrow/tensor.cc\n+++ b/cpp/src/arrow/tensor.cc\n@@ -25,7 +25,6 @@\n #include <vector>\n \n #include \"arrow/compare.h\"\n-#include \"arrow/status.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\ndiff --git a/cpp/src/arrow/type-test.cc b/cpp/src/arrow/type-test.cc\nindex 6291cf611c..e0a10690c2 100644\n--- a/cpp/src/arrow/type-test.cc\n+++ b/cpp/src/arrow/type-test.cc\n@@ -24,10 +24,8 @@\n \n #include <gtest/gtest.h>\n \n-#include \"arrow/test-util.h\"\n #include \"arrow/type.h\"\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/key_value_metadata.h\"\n \n using std::shared_ptr;\n using std::vector;\ndiff --git a/cpp/src/arrow/type.cc b/cpp/src/arrow/type.cc\nindex 21df342686..5f1ca8d7b0 100644\n--- a/cpp/src/arrow/type.cc\n+++ b/cpp/src/arrow/type.cc\n@@ -18,7 +18,8 @@\n #include \"arrow/type.h\"\n \n #include <climits>\n-#include <sstream>\n+#include <cstddef>\n+#include <sstream>  // IWYU pragma: keep\n #include <string>\n #include <utility>\n #include <vector>\ndiff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h\nindex 8688c2a070..63f0e2d237 100644\n--- a/cpp/src/arrow/type.h\n+++ b/cpp/src/arrow/type.h\n@@ -23,19 +23,23 @@\n #include <memory>\n #include <ostream>\n #include <string>\n+#include <type_traits>\n #include <unordered_map>\n #include <vector>\n \n #include \"arrow/status.h\"\n #include \"arrow/type_fwd.h\"  // IWYU pragma: export\n #include \"arrow/util/checked_cast.h\"\n-#include \"arrow/util/key_value_metadata.h\"\n+#include \"arrow/util/key_value_metadata.h\"  // IWYU pragma: export\n #include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n-#include \"arrow/visitor.h\"\n+#include \"arrow/visitor.h\"  // IWYU pragma: keep\n \n namespace arrow {\n \n+class Array;\n+class Field;\n+\n /// \\brief Main data type enumeration\n ///\n /// This enumeration provides a quick way to interrogate the category\ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 86c493382d..b3ee19fad5 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -19,7 +19,6 @@\n #include <cstdint>\n #include <cstring>\n #include <functional>\n-#include <initializer_list>\n #include <limits>\n #include <memory>\n #include <valarray>\ndiff --git a/cpp/src/arrow/util/bit-util.cc b/cpp/src/arrow/util/bit-util.cc\nindex a28d27f069..7b7a7261fa 100644\n--- a/cpp/src/arrow/util/bit-util.cc\n+++ b/cpp/src/arrow/util/bit-util.cc\n@@ -24,17 +24,21 @@\n #endif\n \n #include <algorithm>\n+#include <cstdint>\n #include <cstring>\n #include <functional>\n+#include <memory>\n #include <vector>\n \n #include \"arrow/buffer.h\"\n-#include \"arrow/memory_pool.h\"\n #include \"arrow/status.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n+\n+class MemoryPool;\n+\n namespace BitUtil {\n namespace {\n \ndiff --git a/cpp/src/arrow/util/checked-cast-test.cc b/cpp/src/arrow/util/checked-cast-test.cc\nindex 1045038db6..b50a859cb0 100644\n--- a/cpp/src/arrow/util/checked-cast-test.cc\n+++ b/cpp/src/arrow/util/checked-cast-test.cc\n@@ -16,6 +16,7 @@\n // under the License.\n \n #include <type_traits>\n+#include <typeinfo>\n \n #include <gtest/gtest.h>\n \ndiff --git a/cpp/src/arrow/util/compression_zlib.cc b/cpp/src/arrow/util/compression_zlib.cc\nindex f1e9fb1d20..883b8feac9 100644\n--- a/cpp/src/arrow/util/compression_zlib.cc\n+++ b/cpp/src/arrow/util/compression_zlib.cc\n@@ -28,6 +28,7 @@\n \n #include \"arrow/status.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n \n namespace arrow {\n namespace util {\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex 61884a18b1..94c270280e 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -15,6 +15,9 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <algorithm>\n+#include <array>\n+#include <cmath>\n #include <cstdint>\n #include <string>\n #include <tuple>\n@@ -24,6 +27,7 @@\n #include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/util/decimal.h\"\n+#include \"arrow/util/macros.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex 5d8365352e..9d22e005e7 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -16,17 +16,21 @@\n // under the License.\n \n #include <algorithm>\n-#include <cctype>\n+#include <array>\n #include <climits>\n-#include <cmath>\n+#include <cstdint>\n+#include <cstdlib>\n #include <cstring>\n #include <iomanip>\n #include <limits>\n #include <sstream>\n+#include <string>\n \n+#include \"arrow/status.h\"\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/arrow/util/hash.cc b/cpp/src/arrow/util/hash.cc\nindex bd28b2fd19..ce79710f70 100644\n--- a/cpp/src/arrow/util/hash.cc\n+++ b/cpp/src/arrow/util/hash.cc\n@@ -17,6 +17,8 @@\n \n #include \"arrow/util/hash.h\"\n \n+#include <algorithm>\n+\n #include \"arrow/buffer.h\"\n #include \"arrow/status.h\"\n \ndiff --git a/cpp/src/arrow/util/io-util.cc b/cpp/src/arrow/util/io-util.cc\nindex ddffce3c55..8db5db4428 100644\n--- a/cpp/src/arrow/util/io-util.cc\n+++ b/cpp/src/arrow/util/io-util.cc\n@@ -22,15 +22,17 @@\n \n #define _FILE_OFFSET_BITS 64\n \n-#include \"arrow/util/windows_compatibility.h\"\n+#include \"arrow/util/windows_compatibility.h\"  // IWYU pragma: keep\n \n #include <algorithm>\n #include <cerrno>\n+#include <cstdint>\n+#include <cstring>\n #include <sstream>\n+#include <string>\n \n #include <fcntl.h>\n #include <stdlib.h>\n-#include <string.h>\n #include <sys/stat.h>\n #include <sys/types.h>  // IWYU pragma: keep\n \n@@ -90,6 +92,7 @@\n \n #endif\n \n+#include \"arrow/status.h\"\n #include \"arrow/util/io-util.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/util/key_value_metadata.cc b/cpp/src/arrow/util/key_value_metadata.cc\nindex 04a4d62e03..0ab467f6e7 100644\n--- a/cpp/src/arrow/util/key_value_metadata.cc\n+++ b/cpp/src/arrow/util/key_value_metadata.cc\n@@ -17,8 +17,13 @@\n \n #include <algorithm>\n #include <cstddef>\n+#include <cstdint>\n+#include <memory>\n #include <sstream>\n+#include <string>\n+#include <unordered_map>\n #include <utility>\n+#include <vector>\n \n #include \"arrow/util/key_value_metadata.h\"\n #include \"arrow/util/logging.h\"\ndiff --git a/cpp/src/arrow/util/lazy-test.cc b/cpp/src/arrow/util/lazy-test.cc\nindex af8a9ec26b..2f38e8e6dc 100644\n--- a/cpp/src/arrow/util/lazy-test.cc\n+++ b/cpp/src/arrow/util/lazy-test.cc\n@@ -16,6 +16,9 @@\n // under the License.\n \n #include <algorithm>\n+#include <cstddef>\n+#include <cstdint>\n+#include <vector>\n \n #include <gtest/gtest.h>\n \ndiff --git a/cpp/src/arrow/util/logging-test.cc b/cpp/src/arrow/util/logging-test.cc\nindex 98efc4ae61..e604de7567 100644\n--- a/cpp/src/arrow/util/logging-test.cc\n+++ b/cpp/src/arrow/util/logging-test.cc\n@@ -16,11 +16,12 @@\n // under the License.\n \n #include <chrono>\n-#include <cstdlib>\n+#include <cstdint>\n #include <iostream>\n \n+#include <gtest/gtest.h>\n+\n #include \"arrow/util/logging.h\"\n-#include \"gtest/gtest.h\"\n \n // This code is adapted from\n // https://github.com/ray-project/ray/blob/master/src/ray/util/logging_test.cc.\ndiff --git a/cpp/src/arrow/util/parsing-util-test.cc b/cpp/src/arrow/util/parsing-util-test.cc\nindex 9fa5ffb7a9..7637a71796 100644\n--- a/cpp/src/arrow/util/parsing-util-test.cc\n+++ b/cpp/src/arrow/util/parsing-util-test.cc\n@@ -15,13 +15,13 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include <gtest/gtest.h>\n-\n #include <locale>\n+#include <stdexcept>\n #include <string>\n \n-#include \"arrow/status.h\"\n-#include \"arrow/test-util.h\"\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/type.h\"\n #include \"arrow/util/parsing.h\"\n \n namespace arrow {\ndiff --git a/cpp/src/arrow/util/task-group-test.cc b/cpp/src/arrow/util/task-group-test.cc\nindex 3bca0047eb..0ede4ff038 100644\n--- a/cpp/src/arrow/util/task-group-test.cc\n+++ b/cpp/src/arrow/util/task-group-test.cc\n@@ -15,20 +15,19 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#ifndef _WIN32\n-#include <sys/wait.h>\n-#include <unistd.h>\n-#endif\n-\n #include <atomic>\n #include <chrono>\n+#include <cstdint>\n+#include <functional>\n #include <memory>\n #include <random>\n+#include <thread>\n #include <vector>\n \n+#include <gtest/gtest.h>\n+\n #include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n-#include \"arrow/util/macros.h\"\n #include \"arrow/util/task-group.h\"\n #include \"arrow/util/thread-pool.h\"\n \ndiff --git a/cpp/src/arrow/util/task-group.cc b/cpp/src/arrow/util/task-group.cc\nindex dd551fa2f1..3ea63fc5ad 100644\n--- a/cpp/src/arrow/util/task-group.cc\n+++ b/cpp/src/arrow/util/task-group.cc\n@@ -16,11 +16,14 @@\n // under the License.\n \n #include \"arrow/util/task-group.h\"\n-#include \"arrow/util/logging.h\"\n-#include \"arrow/util/thread-pool.h\"\n \n+#include <condition_variable>\n+#include <cstdint>\n #include <mutex>\n \n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/thread-pool.h\"\n+\n namespace arrow {\n namespace internal {\n \ndiff --git a/cpp/src/arrow/util/task-group.h b/cpp/src/arrow/util/task-group.h\nindex 693432f320..450b6da588 100644\n--- a/cpp/src/arrow/util/task-group.h\n+++ b/cpp/src/arrow/util/task-group.h\n@@ -24,6 +24,7 @@\n \n #include \"arrow/status.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n namespace internal {\ndiff --git a/cpp/src/arrow/util/thread-pool-test.cc b/cpp/src/arrow/util/thread-pool-test.cc\nindex 99d4de2f7d..6d7b9e230f 100644\n--- a/cpp/src/arrow/util/thread-pool-test.cc\n+++ b/cpp/src/arrow/util/thread-pool-test.cc\n@@ -22,11 +22,19 @@\n \n #include <algorithm>\n #include <chrono>\n+#include <cstdint>\n+#include <cstdio>\n #include <cstdlib>\n #include <functional>\n+#include <future>\n+#include <memory>\n+#include <string>\n #include <thread>\n #include <vector>\n \n+#include <gtest/gtest.h>\n+\n+#include \"arrow/status.h\"\n #include \"arrow/test-util.h\"\n #include \"arrow/util/io-util.h\"\n #include \"arrow/util/macros.h\"\ndiff --git a/cpp/src/arrow/util/thread-pool.cc b/cpp/src/arrow/util/thread-pool.cc\nindex f3b05fdaaf..751b264b42 100644\n--- a/cpp/src/arrow/util/thread-pool.cc\n+++ b/cpp/src/arrow/util/thread-pool.cc\n@@ -16,8 +16,6 @@\n // under the License.\n \n #include \"arrow/util/thread-pool.h\"\n-#include \"arrow/util/io-util.h\"\n-#include \"arrow/util/logging.h\"\n \n #include <algorithm>\n #include <condition_variable>\n@@ -25,6 +23,10 @@\n #include <mutex>\n #include <string>\n #include <thread>\n+#include <vector>\n+\n+#include \"arrow/util/io-util.h\"\n+#include \"arrow/util/logging.h\"\n \n namespace arrow {\n namespace internal {\ndiff --git a/cpp/src/arrow/util/thread-pool.h b/cpp/src/arrow/util/thread-pool.h\nindex 4cc746d307..f18cfeb0de 100644\n--- a/cpp/src/arrow/util/thread-pool.h\n+++ b/cpp/src/arrow/util/thread-pool.h\n@@ -22,18 +22,20 @@\n #include <unistd.h>\n #endif\n \n-#include <exception>\n+#include <cstdlib>\n #include <functional>\n #include <future>\n #include <iostream>\n #include <list>\n #include <memory>\n+#include <string>\n+#include <thread>\n #include <type_traits>\n #include <utility>\n-#include <vector>\n \n #include \"arrow/status.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/visibility.h\"\n \n namespace arrow {\n \ndiff --git a/cpp/src/gandiva/arrow.h b/cpp/src/gandiva/arrow.h\nindex cebcfb3c2f..34cf517572 100644\n--- a/cpp/src/gandiva/arrow.h\n+++ b/cpp/src/gandiva/arrow.h\n@@ -21,6 +21,7 @@\n #include <memory>\n #include <vector>\n \n+#include <arrow/array.h>\n #include <arrow/builder.h>\n #include <arrow/record_batch.h>\n #include <arrow/type.h>\ndiff --git a/cpp/src/parquet/arrow/reader.cc b/cpp/src/parquet/arrow/reader.cc\nindex da6061d9f0..2006025ac2 100644\n--- a/cpp/src/parquet/arrow/reader.cc\n+++ b/cpp/src/parquet/arrow/reader.cc\n@@ -18,26 +18,30 @@\n #include \"parquet/arrow/reader.h\"\n \n #include <algorithm>\n-#include <atomic>\n-#include <chrono>\n-#include <mutex>\n-#include <queue>\n+#include <climits>\n+#include <cstring>\n+#include <future>\n+#include <ostream>\n #include <string>\n-#include <thread>\n #include <type_traits>\n #include <utility>\n #include <vector>\n \n #include \"arrow/api.h\"\n #include \"arrow/util/bit-util.h\"\n-#include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n #include \"arrow/util/thread-pool.h\"\n \n #include \"parquet/arrow/record_reader.h\"\n #include \"parquet/arrow/schema.h\"\n #include \"parquet/column_reader.h\"\n+#include \"parquet/exception.h\"\n+#include \"parquet/file_reader.h\"\n+#include \"parquet/metadata.h\"\n+#include \"parquet/properties.h\"\n #include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+#include \"parquet/util/memory.h\"\n #include \"parquet/util/schema-util.h\"\n \n using arrow::Array;\ndiff --git a/cpp/src/parquet/arrow/reader.h b/cpp/src/parquet/arrow/reader.h\nindex 6eee0f6e25..2cd94ca28f 100644\n--- a/cpp/src/parquet/arrow/reader.h\n+++ b/cpp/src/parquet/arrow/reader.h\n@@ -18,25 +18,32 @@\n #ifndef PARQUET_ARROW_READER_H\n #define PARQUET_ARROW_READER_H\n \n+#include <cstdint>\n #include <memory>\n #include <vector>\n \n-#include \"parquet/api/reader.h\"\n-#include \"parquet/api/schema.h\"\n+#include \"parquet/util/visibility.h\"\n \n #include \"arrow/io/interfaces.h\"\n+#include \"arrow/util/macros.h\"\n \n namespace arrow {\n \n class Array;\n class MemoryPool;\n class RecordBatchReader;\n+class Schema;\n class Status;\n class Table;\n+\n }  // namespace arrow\n \n namespace parquet {\n \n+class FileMetaData;\n+class ParquetFileReader;\n+class ReaderProperties;\n+\n namespace arrow {\n \n class ColumnChunkReader;\ndiff --git a/cpp/src/parquet/arrow/record_reader.cc b/cpp/src/parquet/arrow/record_reader.cc\nindex 3fbdfd5861..ce6fa2a5b9 100644\n--- a/cpp/src/parquet/arrow/record_reader.cc\n+++ b/cpp/src/parquet/arrow/record_reader.cc\n@@ -19,21 +19,29 @@\n \n #include <algorithm>\n #include <cstdint>\n+#include <cstring>\n #include <memory>\n #include <sstream>\n+#include <unordered_map>\n #include <utility>\n \n-#include <arrow/buffer.h>\n-#include <arrow/memory_pool.h>\n-#include <arrow/status.h>\n-#include <arrow/util/bit-util.h>\n-#include <arrow/util/rle-encoding.h>\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/rle-encoding.h\"\n \n #include \"parquet/column_page.h\"\n #include \"parquet/column_reader.h\"\n #include \"parquet/encoding-internal.h\"\n+#include \"parquet/encoding.h\"\n #include \"parquet/exception.h\"\n #include \"parquet/properties.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n \n using arrow::MemoryPool;\n \ndiff --git a/cpp/src/parquet/arrow/record_reader.h b/cpp/src/parquet/arrow/record_reader.h\nindex 4935713a24..8da0709997 100644\n--- a/cpp/src/parquet/arrow/record_reader.h\n+++ b/cpp/src/parquet/arrow/record_reader.h\n@@ -19,22 +19,24 @@\n #define PARQUET_RECORD_READER_H\n \n #include <cstdint>\n-#include <cstring>\n-#include <iostream>\n #include <memory>\n-#include <unordered_map>\n-#include <vector>\n \n-#include <arrow/buffer.h>\n-#include <arrow/builder.h>\n-#include <arrow/memory_pool.h>\n-#include <arrow/util/bit-util.h>\n+#include \"arrow/memory_pool.h\"\n \n-#include \"parquet/column_reader.h\"\n-#include \"parquet/schema.h\"\n #include \"parquet/util/macros.h\"\n+#include \"parquet/util/memory.h\"\n+\n+namespace arrow {\n+\n+class ArrayBuilder;\n+\n+}  // namespace arrow\n \n namespace parquet {\n+\n+class ColumnDescriptor;\n+class PageReader;\n+\n namespace internal {\n \n /// \\brief Stateful column reader that delimits semantic records for both flat\ndiff --git a/cpp/src/parquet/arrow/schema.h b/cpp/src/parquet/arrow/schema.h\nindex 3b212da7ee..8e920850c1 100644\n--- a/cpp/src/parquet/arrow/schema.h\n+++ b/cpp/src/parquet/arrow/schema.h\n@@ -18,14 +18,16 @@\n #ifndef PARQUET_ARROW_SCHEMA_H\n #define PARQUET_ARROW_SCHEMA_H\n \n+#include <cstdint>\n #include <memory>\n #include <vector>\n \n #include \"arrow/api.h\"\n \n-#include \"parquet/api/schema.h\"\n-#include \"parquet/api/writer.h\"\n #include \"parquet/arrow/writer.h\"\n+#include \"parquet/metadata.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/util/visibility.h\"\n \n namespace arrow {\n \n@@ -35,8 +37,12 @@ class Status;\n \n namespace parquet {\n \n+class WriterProperties;\n+\n namespace arrow {\n \n+class ArrowWriterProperties;\n+\n PARQUET_EXPORT\n ::arrow::Status NodeToField(const schema::Node& node,\n                             std::shared_ptr<::arrow::Field>* out);\ndiff --git a/cpp/src/parquet/bloom_filter-test.cc b/cpp/src/parquet/bloom_filter-test.cc\nindex 96d2e065f2..945f80b7b9 100644\n--- a/cpp/src/parquet/bloom_filter-test.cc\n+++ b/cpp/src/parquet/bloom_filter-test.cc\n@@ -17,13 +17,21 @@\n \n #include <gtest/gtest.h>\n \n-#include <algorithm>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n #include <random>\n #include <string>\n+#include <vector>\n \n+#include \"arrow/buffer.h\"\n #include \"arrow/io/file.h\"\n+#include \"arrow/status.h\"\n+\n #include \"parquet/bloom_filter.h\"\n+#include \"parquet/exception.h\"\n #include \"parquet/murmur3.h\"\n+#include \"parquet/types.h\"\n #include \"parquet/util/memory.h\"\n #include \"parquet/util/test-common.h\"\n \ndiff --git a/cpp/src/parquet/file-deserialize-test.cc b/cpp/src/parquet/file-deserialize-test.cc\nindex 31acbf1656..17dfe387fd 100644\n--- a/cpp/src/parquet/file-deserialize-test.cc\n+++ b/cpp/src/parquet/file-deserialize-test.cc\n@@ -17,16 +17,11 @@\n \n #include <gtest/gtest.h>\n \n-#include <algorithm>\n #include <cstdint>\n-#include <cstdlib>\n #include <cstring>\n-#include <exception>\n #include <memory>\n-#include <string>\n-#include <vector>\n \n-#include \"parquet/column_reader.h\"\n+#include \"parquet/column_page.h\"\n #include \"parquet/exception.h\"\n #include \"parquet/file_reader.h\"\n #include \"parquet/thrift.h\"\n@@ -34,6 +29,8 @@\n #include \"parquet/util/memory.h\"\n #include \"parquet/util/test-common.h\"\n \n+#include \"arrow/io/memory.h\"\n+#include \"arrow/status.h\"\n #include \"arrow/util/compression.h\"\n \n namespace parquet {\ndiff --git a/cpp/src/parquet/public-api-test.cc b/cpp/src/parquet/public-api-test.cc\nindex 958e970167..c0ef97a70a 100644\n--- a/cpp/src/parquet/public-api-test.cc\n+++ b/cpp/src/parquet/public-api-test.cc\n@@ -17,10 +17,10 @@\n \n #include <gtest/gtest.h>\n \n-#include \"parquet/api/io.h\"\n-#include \"parquet/api/reader.h\"\n-#include \"parquet/api/schema.h\"\n-#include \"parquet/api/writer.h\"\n+#include \"parquet/api/io.h\"      // IWYU pragma: keep\n+#include \"parquet/api/reader.h\"  // IWYU pragma: keep\n+#include \"parquet/api/schema.h\"  // IWYU pragma: keep\n+#include \"parquet/api/writer.h\"  // IWYU pragma: keep\n \n TEST(TestPublicAPI, DoesNotIncludeThrift) {\n #ifdef _THRIFT_THRIFT_H_\ndiff --git a/cpp/src/parquet/thrift.h b/cpp/src/parquet/thrift.h\nindex 217cc76c04..9c665acfac 100644\n--- a/cpp/src/parquet/thrift.h\n+++ b/cpp/src/parquet/thrift.h\n@@ -44,7 +44,7 @@\n #include \"parquet/exception.h\"\n #include \"parquet/util/memory.h\"\n \n-#include \"parquet/parquet_types.h\"\n+#include \"parquet/parquet_types.h\"  // IYWU pragma: export\n \n namespace parquet {\n \ndiff --git a/dev/docker_common/Dockerfile.xenial.base b/dev/docker_common/Dockerfile.xenial.base\nindex b2589de6d9..49d9fd72d9 100644\n--- a/dev/docker_common/Dockerfile.xenial.base\n+++ b/dev/docker_common/Dockerfile.xenial.base\n@@ -45,6 +45,7 @@ RUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -\n       pandas \\\n       pytest \\\n       cmake \\\n+      double-conversion \\\n       flatbuffers \\\n       rapidjson \\\n       boost-cpp \\\n@@ -52,10 +53,16 @@ RUN wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -\n       snappy \\\n       zlib \\\n       gflags \\\n+      glog \\\n+      gtest \\\n+      re2 \\\n       brotli \\\n       jemalloc \\\n       lz4-c \\\n       zstd \\\n       setuptools \\\n       setuptools_scm \\\n- && conda clean --all\n\\ No newline at end of file\n+ && conda clean --all\n+\n+ADD docker_common/install_clang_tools_xenial.sh /\n+RUN /install_clang_tools_xenial.sh\ndiff --git a/dev/docker_common/install_clang_tools_xenial.sh b/dev/docker_common/install_clang_tools_xenial.sh\nnew file mode 100755\nindex 0000000000..e35e3dca3c\n--- /dev/null\n+++ b/dev/docker_common/install_clang_tools_xenial.sh\n@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key|apt-key add -\n+apt-add-repository -y \\\n+     \"deb http://llvm.org/apt/xenial/ llvm-toolchain-xenial-6.0 main\"\n+apt-get update -qq\n+apt-get install -y -q libclang-6.0-dev clang-6.0 clang-format-6.0 clang-tidy-6.0\ndiff --git a/dev/iwyu/Dockerfile b/dev/iwyu/Dockerfile\nindex 3d93f90eb1..817472056b 100644\n--- a/dev/iwyu/Dockerfile\n+++ b/dev/iwyu/Dockerfile\n@@ -17,7 +17,7 @@\n \n FROM arrow_integration_xenial_base\n \n-ADD . /apache-arrow\n-WORKDIR /apache-arrow\n+ADD dev/iwyu/run_iwyu.sh /run_iwyu.sh\n \n-CMD arrow/dev/iwyu/run_iwyu.sh\n+WORKDIR /tmp\n+CMD /run_iwyu.sh\n\\ No newline at end of file\ndiff --git a/dev/iwyu/run_iwyu.sh b/dev/iwyu/run_iwyu.sh\nindex ae0f761888..9e2bd7e80a 100755\n--- a/dev/iwyu/run_iwyu.sh\n+++ b/dev/iwyu/run_iwyu.sh\n@@ -18,8 +18,8 @@\n \n # Set up environment and working directory\n CLANG_VERSION=6.0\n-IWYU_BUILD_DIR=`pwd`/arrow/cpp/docker-iwyu\n-IWYU_SH=`pwd`/arrow/cpp/build-support/iwyu/iwyu.sh\n+IWYU_BUILD_DIR=/arrow/cpp/docker-iwyu\n+IWYU_SH=/arrow/cpp/build-support/iwyu/iwyu.sh\n IWYU_URL=https://github.com/include-what-you-use/include-what-you-use/archive/clang_$CLANG_VERSION.tar.gz\n \n rm -rf $IWYU_BUILD_DIR\n@@ -49,6 +49,8 @@ pushd iwyu-build\n # iwyu needs this\n apt-get install -y zlib1g-dev\n \n+source activate pyarrow-dev\n+\n cmake -G \"Unix Makefiles\" -DIWYU_LLVM_ROOT_PATH=/usr/lib/llvm-$CLANG_VERSION $IWYU_SRC\n make -j4\n popd\n@@ -56,11 +58,15 @@ popd\n # Add iwyu and iwyu_tool.py to path\n export PATH=$IWYU_BUILD_DIR/iwyu-build:$PATH\n \n-conda activate pyarrow-dev\n+export ARROW_BUILD_TOOLCHAIN=$CONDA_PREFIX\n \n-cmake -GNinja -DARROW_PYTHON=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..\n+cmake -GNinja \\\n+      -DARROW_PARQUET=ON \\\n+      -DARROW_PYTHON=ON \\\n+      -DCMAKE_CXX_FLAGS='-D_GLIBCXX_USE_CXX11_ABI=0' \\\n+      -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..\n \n # Make so that vendored bits are built\n-ninja\n+ninja arrow_shared\n \n $IWYU_SH all\ndiff --git a/docker-compose.yml b/docker-compose.yml\nindex e407e6ef72..62c300328c 100644\n--- a/docker-compose.yml\n+++ b/docker-compose.yml\n@@ -120,6 +120,15 @@ services:\n     volumes:\n       - .:/arrow:delegated\n \n+  # Depends on xenial base image, see dev/README.md\n+  iwyu:\n+    image: arrow:iwyu\n+    build:\n+      context: .\n+      dockerfile: dev/iwyu/Dockerfile\n+    volumes:\n+      - .:/arrow:delegated\n+\n   clang-format:\n     image: arrow:lint\n     shm_size: 2G\ndiff --git a/python/manylinux1/README.md b/python/manylinux1/README.md\nindex 580aea3e01..de99f1c4d3 100644\n--- a/python/manylinux1/README.md\n+++ b/python/manylinux1/README.md\n@@ -39,7 +39,6 @@ ls -l dist/\n ```\n \n ### Updating the build environment\n-\n The base docker image is less often updated. In the case we want to update\n a dependency to a new version, we also need to adjust it. You can rebuild\n this image using\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-07T08:36:38.711+0000",
                    "updated": "2018-10-07T08:36:38.711+0000",
                    "started": "2018-10-07T08:36:38.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152033",
                    "issueId": "13189108"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@68ee1040[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3688dae0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3bc99d29[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4be61f6a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21b2376f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6deb33c2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1abcdb83[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@61da9af1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5163c0ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@65a29c27[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19be23d3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2c862f07[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Oct 07 08:36:25 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-07T08:36:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3420/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-03T09:34:38.000+0000",
        "updated": "2018-10-07T08:36:38.000+0000",
        "timeoriginalestimate": null,
        "description": "We can address plasma, gandiva in other PRs",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Fix outstanding include-what-you-use issues in src/arrow, src/parquet codebases",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189108/comment/16640997",
                    "id": "16640997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2713\n[https://github.com/apache/arrow/pull/2713]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-07T08:36:25.762+0000",
                    "updated": "2018-10-07T08:36:25.762+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yryf:",
        "customfield_12314139": null
    }
}