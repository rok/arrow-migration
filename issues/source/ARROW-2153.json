{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13138418",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418",
    "key": "ARROW-2153",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12527072",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12527072",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13138085",
                    "key": "ARROW-2145",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085",
                    "fields": {
                        "summary": "[Python] Decimal conversion not working for NaN values",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
            "name": "antonymayi",
            "key": "antonymayi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Antony Mayi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
            "name": "antonymayi",
            "key": "antonymayi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Antony Mayi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2153/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@f9690a8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24d07e7d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7998a267[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5e9c18bf[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77f22df3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@364978e5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a7e7fd1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3499c7c1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5262f914[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2f113ded[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56684f29[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2cb53dea[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 01 22:27:52 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-01T22:27:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2153/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2018-02-14T07:30:54.000+0000",
        "updated": "2018-03-07T16:21:22.000+0000",
        "timeoriginalestimate": null,
        "description": "{code:java}\r\nimport pyarrow as pa\r\nimport pandas as pd\r\nimport decimal\r\n\r\npa.Table.from_pandas(pd.DataFrame({'a': [decimal.Decimal('1.1'), decimal.Decimal('2E+1')]}))\r\n{code}\r\n\u00a0\r\n{code:java}\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow/table.pxi\", line 875, in pyarrow.lib.Table.from_pandas (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:44927)\r\n  File \"/home/skadlec/.local/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 350, in dataframe_to_arrays\r\n    convert_types)]\r\n  File \"/home/skadlec/.local/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 349, in <listcomp>\r\n    for c, t in zip(columns_to_convert,\r\n  File \"/home/skadlec/.local/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 345, in convert_column\r\n    return pa.array(col, from_pandas=True, type=ty)\r\n  File \"pyarrow/array.pxi\", line 170, in pyarrow.lib.array (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:29224)\r\n  File \"pyarrow/array.pxi\", line 70, in pyarrow.lib._ndarray_to_array (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:28465)\r\n  File \"pyarrow/error.pxi\", line 77, in pyarrow.lib.check_status (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:8270)\r\npyarrow.lib.ArrowInvalid: Expected base ten digit or decimal point but found 'E' instead.\r\n{code}\r\nIn manual cases clearly we can write {{decimal.Decimal('20')}} instead of {{decimal.Decimal('2E+1')}} but during arithmetical operations inside an application the exponential notation can be produced out of control (it is actually the _normalized_ form of the decimal number) plus for some values the exponential notation is the only\u00a0form\u00a0expressing the significance so this should be accepted.\r\n\r\nThe [documentation|https://docs.python.org/3/library/decimal.html] suggests using following transformation but that's only possible when the significance information doesn't need to be kept:\r\n{code:java}\r\ndef remove_exponent(d):\r\n    return d.quantize(Decimal(1)) if d == d.to_integral() else d.normalize()\r\n{code}",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Python] Decimal conversion not working for exponential notation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16363625",
                    "id": "16363625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "btw. the workaround even doesn't work for cases like {{decimal.Decimal('-3E-8')}}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T08:10:00.697+0000",
                    "updated": "2018-02-14T08:10:00.697+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16364319",
                    "id": "16364319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "If this is blocking you, you can use a decimal point as a workaround:\r\n\r\n{code}\r\npa.array(pd.Series([Decimal('-3.0e+1')]))\r\n{code}\r\n\r\nI'll put up a fix today for this.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-14T15:54:15.823+0000",
                    "updated": "2018-02-14T15:55:29.407+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16364769",
                    "id": "16364769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "nice, thanks!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T20:57:32.900+0000",
                    "updated": "2018-02-14T20:57:32.900+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16369540",
                    "id": "16369540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1618: ARROW-2153/ARROW-2160: [C++/Python]  Fix decimal precision inference\nURL: https://github.com/apache/arrow/pull/1618#issuecomment-366808204\n \n \n   `std::regex` is totally broken in gcc 4.8.x (what we're using for conda/pip releases) AFAIK so using `<regex>` isn't even an option right now. When we get past gcc 4.8 it might be nice to use the STL regexen\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T21:35:48.390+0000",
                    "updated": "2018-02-19T21:35:48.390+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16369542",
                    "id": "16369542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1618: ARROW-2153/ARROW-2160: [C++/Python]  Fix decimal precision inference\nURL: https://github.com/apache/arrow/pull/1618#issuecomment-366808528\n \n \n   Yep, I believe `std::regex_match` is implemented as `return false;` :(\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T21:37:35.551+0000",
                    "updated": "2018-02-19T21:37:35.551+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16369546",
                    "id": "16369546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1618: ARROW-2153/ARROW-2160: [C++/Python]  Fix decimal precision inference\nURL: https://github.com/apache/arrow/pull/1618#issuecomment-366808695\n \n \n   In gcc 4.8 that is. 4.9 may be implemented, but I don't think it supports named capture groups.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-19T21:38:19.889+0000",
                    "updated": "2018-02-19T21:38:19.889+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16372198",
                    "id": "16372198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1618: ARROW-2153/ARROW-2160: [C++/Python]  Fix decimal precision inference\nURL: https://github.com/apache/arrow/pull/1618#issuecomment-367511884\n \n \n   needs rebase\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T23:19:09.419+0000",
                    "updated": "2018-02-21T23:19:09.419+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16374730",
                    "id": "16374730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1618: ARROW-2153/ARROW-2160: [C++/Python]  Fix decimal precision inference\nURL: https://github.com/apache/arrow/pull/1618#issuecomment-368086534\n \n \n   Closed in favor of #1651 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-23T17:50:47.919+0000",
                    "updated": "2018-02-23T17:50:47.919+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16374731",
                    "id": "16374731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud closed pull request #1618: ARROW-2153/ARROW-2160: [C++/Python]  Fix decimal precision inference\nURL: https://github.com/apache/arrow/pull/1618\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 42c1ec8f0..f5cdec59a 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -577,11 +577,13 @@ set(ARROW_LINK_LIBS\n \n set(ARROW_SHARED_PRIVATE_LINK_LIBS\n   ${BOOST_SYSTEM_LIBRARY}\n-  ${BOOST_FILESYSTEM_LIBRARY})\n+  ${BOOST_FILESYSTEM_LIBRARY}\n+  ${BOOST_REGEX_LIBRARY})\n \n set(ARROW_STATIC_PRIVATE_LINK_LIBS\n   ${BOOST_SYSTEM_LIBRARY}\n-  ${BOOST_FILESYSTEM_LIBRARY})\n+  ${BOOST_FILESYSTEM_LIBRARY}\n+  ${BOOST_REGEX_LIBRARY})\n \n if (NOT MSVC)\n   set(ARROW_LINK_LIBS\ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex 3511d40d4..22eabde08 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -157,8 +157,11 @@ if (ARROW_BOOST_VENDORED)\n     \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_system${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n   set(BOOST_STATIC_FILESYSTEM_LIBRARY\n     \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_filesystem${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n+  set(BOOST_STATIC_REGEX_LIBRARY\n+          \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_regex${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n   set(BOOST_SYSTEM_LIBRARY \"${BOOST_STATIC_SYSTEM_LIBRARY}\")\n   set(BOOST_FILESYSTEM_LIBRARY \"${BOOST_STATIC_FILESYSTEM_LIBRARY}\")\n+  set(BOOST_REGEX_LIBRARY \"${BOOST_STATIC_REGEX_LIBRARY}\")\n   if (ARROW_BOOST_HEADER_ONLY)\n     set(BOOST_BUILD_PRODUCTS)\n     set(BOOST_CONFIGURE_COMMAND \"\")\n@@ -166,7 +169,8 @@ if (ARROW_BOOST_VENDORED)\n   else()\n     set(BOOST_BUILD_PRODUCTS\n       ${BOOST_SYSTEM_LIBRARY}\n-      ${BOOST_FILESYSTEM_LIBRARY})\n+      ${BOOST_FILESYSTEM_LIBRARY}\n+      ${BOOST_REGEX_LIBRARY})\n     set(BOOST_CONFIGURE_COMMAND\n       \"./bootstrap.sh\"\n       \"--prefix=${BOOST_PREFIX}\"\n@@ -210,16 +214,19 @@ else()\n     if (ARROW_BOOST_HEADER_ONLY)\n       find_package(Boost REQUIRED)\n     else()\n-      find_package(Boost COMPONENTS system filesystem REQUIRED)\n+      find_package(Boost COMPONENTS system filesystem regex REQUIRED)\n       if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n         set(BOOST_SHARED_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_DEBUG})\n         set(BOOST_SHARED_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_DEBUG})\n+        set(BOOST_SHARED_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_DEBUG})\n       else()\n         set(BOOST_SHARED_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_RELEASE})\n         set(BOOST_SHARED_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_RELEASE})\n+        set(BOOST_SHARED_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_RELEASE})\n       endif()\n       set(BOOST_SYSTEM_LIBRARY boost_system_shared)\n       set(BOOST_FILESYSTEM_LIBRARY boost_filesystem_shared)\n+      set(BOOST_REGEX_LIBRARY boost_regex_shared)\n     endif()\n   else()\n     # Find static boost headers and libs\n@@ -228,16 +235,19 @@ else()\n     if (ARROW_BOOST_HEADER_ONLY)\n       find_package(Boost REQUIRED)\n     else()\n-      find_package(Boost COMPONENTS system filesystem REQUIRED)\n+      find_package(Boost COMPONENTS system filesystem regex REQUIRED)\n       if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n         set(BOOST_STATIC_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_DEBUG})\n         set(BOOST_STATIC_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_DEBUG})\n+        set(BOOST_STATIC_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_DEBUG})\n       else()\n         set(BOOST_STATIC_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_RELEASE})\n         set(BOOST_STATIC_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_RELEASE})\n+        set(BOOST_STATIC_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_RELEASE})\n       endif()\n       set(BOOST_SYSTEM_LIBRARY boost_system_static)\n       set(BOOST_FILESYSTEM_LIBRARY boost_filesystem_static)\n+      set(BOOST_REGEX_LIBRARY boost_regex_static)\n     endif()\n   endif()\n endif()\n@@ -254,7 +264,11 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n       STATIC_LIB \"${BOOST_STATIC_FILESYSTEM_LIBRARY}\"\n       SHARED_LIB \"${BOOST_SHARED_FILESYSTEM_LIBRARY}\")\n \n-  SET(ARROW_BOOST_LIBS boost_system boost_filesystem)\n+  ADD_THIRDPARTY_LIB(boost_regex\n+      STATIC_LIB \"${BOOST_STATIC_REGEX_LIBRARY}\"\n+      SHARED_LIB \"${BOOST_SHARED_REGEX_LIBRARY}\")\n+\n+  SET(ARROW_BOOST_LIBS boost_system boost_filesystem boost_regex)\n endif()\n \n include_directories(SYSTEM ${Boost_INCLUDE_DIR})\ndiff --git a/cpp/src/arrow/python/helpers.cc b/cpp/src/arrow/python/helpers.cc\nindex df1db9991..75fb7d8c7 100644\n--- a/cpp/src/arrow/python/helpers.cc\n+++ b/cpp/src/arrow/python/helpers.cc\n@@ -99,7 +99,8 @@ Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precisio\n   DCHECK_NE(precision, NULLPTR);\n   DCHECK_NE(scale, NULLPTR);\n \n-  OwnedRef as_tuple(PyObject_CallMethod(python_decimal, \"as_tuple\", \"()\"));\n+  // TODO(phillipc): Make sure we perform PyDecimal_Check(python_decimal) as a DCHECK\n+  OwnedRef as_tuple(PyObject_CallMethod(python_decimal, \"as_tuple\", \"\"));\n   RETURN_IF_PYERROR();\n   DCHECK(PyTuple_Check(as_tuple.obj()));\n \n@@ -117,7 +118,21 @@ Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precisio\n   const auto exponent = static_cast<int32_t>(PyLong_AsLong(py_exponent.obj()));\n   RETURN_IF_PYERROR();\n \n-  *precision = num_digits;\n+  const int32_t abs_exponent = std::abs(exponent);\n+\n+  int32_t num_additional_zeros;\n+\n+  if (num_digits < abs_exponent) {\n+    DCHECK_NE(exponent, 0) << \"exponent should never be zero here\";\n+\n+    // we have leading/trailing zeros, leading if exponent is negative\n+    num_additional_zeros = exponent < 0 ? abs_exponent - num_digits : exponent;\n+  } else {\n+    // we can use the number of digits as the precision\n+    num_additional_zeros = 0;\n+  }\n+\n+  *precision = num_digits + num_additional_zeros;\n   *scale = -exponent;\n   return Status::OK();\n }\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 23418ad92..a7104832e 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -766,10 +766,7 @@ Status NumPyConverter::ConvertDecimals() {\n       RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(objects[i], &tmp_precision,\n                                                             &tmp_scale));\n       precision = std::max(precision, tmp_precision);\n-\n-      if (std::abs(desired_scale) < std::abs(tmp_scale)) {\n-        desired_scale = tmp_scale;\n-      }\n+      desired_scale = std::max(desired_scale, tmp_scale);\n     }\n \n     type_ = ::arrow::decimal(precision, desired_scale);\ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex b76caaece..6ffcbb131 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -145,6 +145,57 @@ TEST_F(DecimalTest, TestInferPrecisionAndNegativeScale) {\n   ASSERT_EQ(expected_scale, scale);\n }\n \n+TEST_F(DecimalTest, TestInferAllLeadingZeros) {\n+  std::string decimal_string(\"0.001\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+\n+  int32_t precision;\n+  int32_t scale;\n+\n+  ASSERT_OK(\n+      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+\n+  const int32_t expected_precision = 3;\n+  const int32_t expected_scale = 3;\n+\n+  ASSERT_EQ(expected_precision, precision);\n+  ASSERT_EQ(expected_scale, scale);\n+}\n+\n+TEST_F(DecimalTest, TestInferAllLeadingZerosExponentialNotationPositive) {\n+  std::string decimal_string(\"0.01E5\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+\n+  int32_t precision;\n+  int32_t scale;\n+\n+  ASSERT_OK(\n+      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+\n+  const int32_t expected_precision = 4;\n+  const int32_t expected_scale = -3;\n+\n+  ASSERT_EQ(expected_precision, precision);\n+  ASSERT_EQ(expected_scale, scale);\n+}\n+\n+TEST_F(DecimalTest, TestInferAllLeadingZerosExponentialNotationNegative) {\n+  std::string decimal_string(\"0.01E3\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+\n+  int32_t precision;\n+  int32_t scale;\n+\n+  ASSERT_OK(\n+      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+\n+  const int32_t expected_precision = 1;\n+  const int32_t expected_scale = -1;\n+\n+  ASSERT_EQ(expected_precision, precision);\n+  ASSERT_EQ(expected_scale, scale);\n+}\n+\n TEST(PandasConversionTest, TestObjectBlockWriteFails) {\n   StringBuilder builder;\n   const char value[] = {'\\xf1', '\\0'};\n@@ -241,5 +292,43 @@ TEST_F(DecimalTest, TestOverflowFails) {\n                                                             decimal_type, &value));\n }\n \n+\n+TEST_F(DecimalTest, SimpleInference) {\n+  OwnedRef value(this->CreatePythonDecimal(\"0.01\"));\n+  ASSERT_NE(value.obj(), nullptr);\n+  int32_t precision;\n+  int32_t scale;\n+  ASSERT_OK(internal::InferDecimalPrecisionAndScale(value.obj(), &precision, &scale));\n+  ASSERT_EQ(2, precision);\n+  ASSERT_EQ(2, scale);\n+}\n+\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScaleSequenceConvert) {\n+\n+  PyAcquireGIL lock;\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+\n+  OwnedRef list_ref(PyList_New(2));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* value1 = this->CreatePythonDecimal(\"0.01\").detach();\n+  ASSERT_NE(value1, nullptr);\n+\n+  PyObject* value2 = this->CreatePythonDecimal(\"0.001\").detach();\n+  ASSERT_NE(value2, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later\n+  // just the list\n+\n+  ASSERT_EQ(PyList_SetItem(list, 0, value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, value2), 0);\n+\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+}\n+\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex e4406747d..42812bd55 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -37,7 +37,7 @@ class DecimalTestFixture : public ::testing::Test {\n \n TEST_F(DecimalTestFixture, TestToString) {\n   Decimal128 decimal(this->integer_value_);\n-  int scale = 5;\n+  int32_t scale = 5;\n   std::string result = decimal.ToString(scale);\n   ASSERT_EQ(result, this->string_value_);\n }\n@@ -45,7 +45,7 @@ TEST_F(DecimalTestFixture, TestToString) {\n TEST_F(DecimalTestFixture, TestFromString) {\n   Decimal128 expected(this->integer_value_);\n   Decimal128 result;\n-  int precision, scale;\n+  int32_t precision, scale;\n   ASSERT_OK(Decimal128::FromString(this->string_value_, &result, &precision, &scale));\n   ASSERT_EQ(result, expected);\n   ASSERT_EQ(precision, 8);\n@@ -55,8 +55,8 @@ TEST_F(DecimalTestFixture, TestFromString) {\n TEST_F(DecimalTestFixture, TestStringStartingWithPlus) {\n   std::string plus_value(\"+234.234\");\n   Decimal128 out;\n-  int scale;\n-  int precision;\n+  int32_t scale;\n+  int32_t precision;\n   ASSERT_OK(Decimal128::FromString(plus_value, &out, &precision, &scale));\n   ASSERT_EQ(234234, out);\n   ASSERT_EQ(6, precision);\n@@ -67,8 +67,8 @@ TEST_F(DecimalTestFixture, TestStringStartingWithPlus128) {\n   std::string plus_value(\"+2342394230592.232349023094\");\n   Decimal128 expected_value(\"2342394230592232349023094\");\n   Decimal128 out;\n-  int scale;\n-  int precision;\n+  int32_t scale;\n+  int32_t precision;\n   ASSERT_OK(Decimal128::FromString(plus_value, &out, &precision, &scale));\n   ASSERT_EQ(expected_value, out);\n   ASSERT_EQ(25, precision);\n@@ -90,9 +90,7 @@ TEST(DecimalTest, TestFromDecimalString128) {\n   Decimal128 result;\n   ASSERT_OK(Decimal128::FromString(string_value, &result));\n   Decimal128 expected(static_cast<int64_t>(-230492239423435324));\n-  expected *= 100;\n-  expected -= 12;\n-  ASSERT_EQ(result, expected);\n+  ASSERT_EQ(result, expected * 100 - 12);\n \n   // Sanity check that our number is actually using more than 64 bits\n   ASSERT_NE(result.high_bits(), 0);\n@@ -194,36 +192,36 @@ TEST(DecimalTest, TestInvalidInputWithLeadingZeros) {\n TEST(DecimalZerosTest, LeadingZerosNoDecimalPoint) {\n   std::string string_value(\"0000000\");\n   Decimal128 d;\n-  int precision;\n-  int scale;\n+  int32_t precision;\n+  int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n-  ASSERT_EQ(precision, 7);\n-  ASSERT_EQ(scale, 0);\n-  ASSERT_EQ(d, 0);\n+  ASSERT_EQ(0, precision);\n+  ASSERT_EQ(0, scale);\n+  ASSERT_EQ(0, d);\n }\n \n TEST(DecimalZerosTest, LeadingZerosDecimalPoint) {\n   std::string string_value(\"000.0000\");\n   Decimal128 d;\n-  int precision;\n-  int scale;\n+  int32_t precision;\n+  int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n   // We explicitly do not support this for now, otherwise this would be ASSERT_EQ\n-  ASSERT_NE(precision, 7);\n+  ASSERT_EQ(4, precision);\n \n-  ASSERT_EQ(scale, 4);\n-  ASSERT_EQ(d, 0);\n+  ASSERT_EQ(4, scale);\n+  ASSERT_EQ(0, d);\n }\n \n TEST(DecimalZerosTest, NoLeadingZerosDecimalPoint) {\n   std::string string_value(\".00000\");\n   Decimal128 d;\n-  int precision;\n-  int scale;\n+  int32_t precision;\n+  int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n-  ASSERT_EQ(precision, 5);\n-  ASSERT_EQ(scale, 5);\n-  ASSERT_EQ(d, 0);\n+  ASSERT_EQ(5, precision);\n+  ASSERT_EQ(5, scale);\n+  ASSERT_EQ(0, d);\n }\n \n template <typename T>\n@@ -375,4 +373,14 @@ TEST(Decimal128Test, TestSmallNumberFormat) {\n   ASSERT_EQ(expected, result);\n }\n \n+TEST(Decimal128Test, TestNoDecimalPointExponential) {\n+  Decimal128 value;\n+  int32_t precision;\n+  int32_t scale;\n+  ASSERT_OK(Decimal128::FromString(\"1E1\", &value, &precision, &scale));\n+  ASSERT_EQ(1, value.low_bits());\n+  ASSERT_EQ(1, precision);\n+  ASSERT_EQ(-1, scale);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex a3c8cda76..c4d8dfb08 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -23,6 +23,8 @@\n #include <limits>\n #include <sstream>\n \n+#include <boost/regex.hpp>\n+\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n@@ -187,8 +189,6 @@ static constexpr int64_t kPowersOfTen[kInt64DecimalDigits + 1] = {1LL,\n                                                                   100000000000000000LL,\n                                                                   1000000000000000000LL};\n \n-static inline bool isdigit(char value) { return std::isdigit(value) != 0; }\n-\n static void StringToInteger(const std::string& str, Decimal128* out) {\n   using std::size_t;\n \n@@ -212,158 +212,112 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n+  }\n \n-  charp = std::find_if_not(charp, end, isdigit);\n+  const std::string sign = results[\"SIGN\"];\n+  const std::string integer = results[\"INTEGER\"];\n \n-  std::string::const_iterator whole_part_end = charp;\n-  std::string whole_part(whole_part_start, whole_part_end);\n+  const std::string left_digits = results[\"LEFT_DIGITS\"];\n+  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n \n-  if (charp != end && *charp == '.') {\n-    ++charp;\n+  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n \n-    if (charp == end) {\n-      return Status::Invalid(\n-          \"Decimal point must be followed by at least one base ten digit. Reached the \"\n-          \"end of the string.\");\n-    }\n+  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n+  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n \n-    if (std::isdigit(*charp) == 0) {\n-      std::stringstream ss;\n-      ss << \"Decimal point must be followed by a base ten digit. Found '\" << *charp\n-         << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n+  std::string whole_part;\n+  std::string fractional_part;\n+  std::string exponent_value;\n+\n+  if (!integer.empty()) {\n+    whole_part = integer;\n+  } else if (!left_digits.empty()) {\n+    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n+    whole_part = left_digits;\n+    fractional_part = first_right_digits;\n   } else {\n-    if (charp != end) {\n-      std::stringstream ss;\n-      ss << \"Expected base ten digit or decimal point but found '\" << *charp\n-         << \"' instead.\";\n-      return Status::Invalid(ss.str());\n-    }\n+    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n+    fractional_part = second_right_digits;\n   }\n \n-  std::string::const_iterator fractional_part_start = charp;\n-\n-  // The rest must be digits or an exponent\n-  if (charp != end) {\n-    charp = std::find_if_not(charp, end, isdigit);\n+  // skip leading zeros before the decimal point\n+  std::string::const_iterator without_leading_zeros =\n+      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n+  whole_part = std::string(without_leading_zeros, whole_part.cend());\n \n-    // The while loop has ended before the end of the string which means we've hit a\n-    // character that isn't a base ten digit or \"E\" for exponent\n-    if (charp != end && *charp != 'E' && *charp != 'e') {\n-      std::stringstream ss;\n-      ss << \"Found non base ten digit character '\" << *charp\n-         << \"' before the end of the string\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!first_exp_value.empty()) {\n+    exponent_value = first_exp_value;\n+  } else {\n+    exponent_value = second_exp_value;\n   }\n \n-  std::string::const_iterator fractional_part_end = charp;\n-  std::string fractional_part(fractional_part_start, fractional_part_end);\n-\n   if (precision != NULLPTR) {\n-    *precision = static_cast<int>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n   }\n \n-  if (charp != end) {\n-    // we must have an exponent, if this aborts then we have somehow not caught this and\n-    // raised a proper error\n-    DCHECK(*charp == 'E' || *charp == 'e');\n-\n-    ++charp;\n-\n-    const char value = *charp;\n-    const bool starts_with_plus_or_minus = value == '+' || value == '-';\n-\n-    // we use this to construct the adjusted exponent integer later\n-    std::string::const_iterator digit_start = charp;\n-\n-    // skip plus or minus\n-    charp += starts_with_plus_or_minus;\n-\n-    // confirm that the rest of the characters are digits\n-    charp = std::find_if_not(charp, end, isdigit);\n-\n-    if (charp != end) {\n-      // we have something other than digits here\n-      std::stringstream ss;\n-      ss << \"Found non decimal digit exponent value '\" << *charp << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n-\n-    if (scale != NULLPTR) {\n-      // compute the scale from the adjusted exponent\n-      std::string adjusted_exponent_string(digit_start, end);\n-      DCHECK(std::all_of(adjusted_exponent_string.cbegin() + starts_with_plus_or_minus,\n-                         adjusted_exponent_string.cend(), isdigit))\n-          << \"Non decimal digit character found in \" << adjusted_exponent_string;\n-      const auto adjusted_exponent =\n-          static_cast<int32_t>(std::stol(adjusted_exponent_string));\n-      const auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n-\n+  if (scale != NULLPTR) {\n+    if (!exponent_value.empty()) {\n+      auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n+      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n       *scale = -adjusted_exponent + len - 1;\n-    }\n-  } else {\n-    if (scale != NULLPTR) {\n-      *scale = static_cast<int>(fractional_part.size());\n+    } else {\n+      *scale = static_cast<int32_t>(fractional_part.size());\n     }\n   }\n \n   if (out != NULLPTR) {\n-    // zero out in case we've passed in a previously used value\n     *out = 0;\n     StringToInteger(whole_part + fractional_part, out);\n-    if (is_negative) {\n+    if (sign == \"-\") {\n       out->Negate();\n     }\n   }\ndiff --git a/cpp/src/arrow/util/decimal.h b/cpp/src/arrow/util/decimal.h\nindex 1594090a0..79a99ba6a 100644\n--- a/cpp/src/arrow/util/decimal.h\n+++ b/cpp/src/arrow/util/decimal.h\n@@ -124,7 +124,7 @@ class ARROW_EXPORT Decimal128 {\n   /// \\brief Convert a decimal string to an Decimal128 value, optionally including\n   /// precision and scale if they're passed in and not null.\n   static Status FromString(const std::string& s, Decimal128* out,\n-                           int* precision = NULLPTR, int* scale = NULLPTR);\n+                           int32_t* precision = NULLPTR, int32_t* scale = NULLPTR);\n \n   /// \\brief Convert Decimal128 from one scale to another\n   Status Rescale(int32_t original_scale, int32_t new_scale, Decimal128* out) const;\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 6e68dd961..04c57ef9f 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -1143,6 +1143,16 @@ def test_decimal_fails_with_truncation(self):\n         with pytest.raises(pa.ArrowException):\n             pa.array(data2, type=type2)\n \n+    def test_decimal_with_different_precisions(self):\n+        data = [\n+            decimal.Decimal('0.01'),\n+            decimal.Decimal('0.001'),\n+        ]\n+        series = pd.Series(data)\n+        array = pa.array(series)\n+        assert array.to_pylist() == data\n+        assert array.type == pa.decimal128(3, 3)\n+\n \n class TestListTypes(object):\n     \"\"\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-23T17:50:47.961+0000",
                    "updated": "2018-02-23T17:50:47.961+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418/comment/16382771",
                    "id": "16382771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Resolved as part of ARROW-2145 https://github.com/apache/arrow/commit/bfac60dd73bffa5f7bcefc890486268036182278",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-01T22:27:52.461+0000",
                    "updated": "2018-03-01T22:27:52.461+0000"
                }
            ],
            "maxResults": 10,
            "total": 10,
            "startAt": 0
        },
        "customfield_12311820": "0|i3q60f:",
        "customfield_12314139": null
    }
}