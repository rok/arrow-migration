{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13300699",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699",
    "key": "ARROW-8579",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/2",
            "id": "2",
            "description": "The problem described is an issue which will never be fixed.",
            "name": "Won't Fix"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
            "name": "frank.du",
            "key": "frank.du",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Frank Du",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 30000,
            "total": 30000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8579/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 50,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind opened a new pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029\n\n\n   1. Create the spaced encoding/decoding benchmark items.\r\n   2. Create unittest for spaced API SIMD implementation.\r\n   3. Move spaced scalar/SIMD to a new head file.\r\n   4. Add the path of AVX512 epi32 and epi64 using mask_compress_/mask_expand_ API.\r\n   \r\n   Signed-off-by: Frank Du <frank.du@intel.com>\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T07:28:09.622+0000",
                    "updated": "2020-04-24T07:28:09.622+0000",
                    "started": "2020-04-24T07:28:09.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426878",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426879",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#issuecomment-618853399\n\n\n   https://issues.apache.org/jira/browse/ARROW-8579\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T07:31:48.328+0000",
                    "updated": "2020-04-24T07:31:48.328+0000",
                    "started": "2020-04-24T07:31:48.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426879",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#issuecomment-618855696\n\n\n   cc @emkornfield \r\n   \r\n   The AVX512 path is straightforward as the helper of mask_compress/mask_expand API provide by AVX512. For potential path-finding of SSE/AVX2, as you pointed in the Jira, a solution with fixed lookup table may help, I will work the chance then but it definitely need take more time thus I commit this done part firstly.\r\n   \r\n   Below is the benchmark data on Avx512 device before after the intrinsics:\r\n   \r\n   Before:\r\n   BM_PlainEncodingSpacedFloat/1024          1471 ns         1469 ns       476373 bytes_per_second=2.59603G/s\r\n   BM_PlainEncodingSpacedDouble/1024         1498 ns         1496 ns       468131 bytes_per_second=5.09834G/s\r\n   BM_PlainDecodingSpacedFloat/1024          1266 ns         1265 ns       554320 bytes_per_second=3.01623G/s\r\n   BM_PlainDecodingSpacedDouble/1024          920 ns          919 ns       759151 bytes_per_second=8.30509G/s\r\n   \r\n   After:\r\n   BM_PlainEncodingSpacedFloat/1024           717 ns          716 ns       973249 bytes_per_second=5.32424G/s\r\n   BM_PlainEncodingSpacedDouble/1024          989 ns          988 ns       710096 bytes_per_second=7.7235G/s\r\n   BM_PlainDecodingSpacedFloat/1024           217 ns          217 ns      3233406 bytes_per_second=17.613G/s\r\n   BM_PlainDecodingSpacedDouble/1024          309 ns          309 ns      2267740 bytes_per_second=24.7257G/s\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T07:37:18.425+0000",
                    "updated": "2020-04-24T07:37:18.425+0000",
                    "started": "2020-04-24T07:37:18.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426881",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kiszk commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r414434434\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  // The parts can fill into batches\n+  uint8_t valid_count;\n+  int64_t idx_valid_bytes = BitUtil::BytesForBits(idx_valid_bits + 1) - 1;\n+  static const __m512i zero = _mm512_set_epi64(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);\n+  while (num_values - idx_values >= kBatchSize) {\n+    // count the valid numbers of one batch.\n+    valid_count = BitUtil::kBytePopcount[valid_bits[idx_valid_bytes]];\n+    if (kBatchValidBytes > 1) {\n+      valid_count += BitUtil::kBytePopcount[valid_bits[idx_valid_bytes + 1]];\n+    }\n+\n+    // pack the data\n+    if (valid_count > 0) {\n+      __m512i src = _mm512_loadu_si512(values + idx_values);\n+      __m512i result;\n+      if (sizeof(T) == 4) {\n+        // 16 float for one m512i block, two bytes in valid_bits\n+        __mmask16 k = *(reinterpret_cast<const __mmask16*>(valid_bits + idx_valid_bytes));\n+        result = _mm512_mask_compress_epi32(zero, k, src);\n+      } else {\n+        // 8 double for one m512i block, one byte in valid_bits\n+        __mmask8 k = *(valid_bits + idx_valid_bytes);\n+        result = _mm512_mask_compress_epi64(zero, k, src);\n+      }\n+\n+      memcpy(output + num_valid_values, &result, valid_count * sizeof(T));\n+      num_valid_values += valid_count;\n+    }\n+\n+    // Step the index\n+    idx_values += kBatchSize;\n+    idx_valid_bits += kBatchSize;\n+    idx_valid_bytes += kBatchValidBytes;\n+  }\n+\n+  // The remainging back suffix\n+  while (idx_values < num_values) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedAvx512Expand(T* buffer, int num_values, int null_count,\n+                             const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n\nReview comment:\n       How about using `staic_assert()`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T09:32:05.573+0000",
                    "updated": "2020-04-24T09:32:05.573+0000",
                    "started": "2020-04-24T09:32:05.573+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426910",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kiszk commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r414434809\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n\nReview comment:\n       How about using `staic_assert()`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T09:32:50.789+0000",
                    "updated": "2020-04-24T09:32:50.789+0000",
                    "started": "2020-04-24T09:32:50.789+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426911",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#issuecomment-618917554\n\n\n   I'd gladly see a AVX2 or SSE version indeed, as many CPUs don't have AVX512.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T09:54:16.148+0000",
                    "updated": "2020-04-24T09:54:16.148+0000",
                    "started": "2020-04-24T09:54:16.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426919",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/426948",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r414505645\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n\nReview comment:\n       Can't. The instantiation PutSpaced of other types still get to this place though it will never be reached.\r\n   \r\n   /mnt/github/arrow/cpp/src/arrow/util/spaced.h: In instantiation of 'int arrow::util::internal::PutSpacedAvx512Compress(const T*, int, const uint8_t*, int64_t, T*) [with T = parquet::Int96; uint8_t = unsigned char; int64_t = long int]':\r\n   /mnt/github/arrow/cpp/src/arrow/util/spaced.h:224:38:   required from 'int arrow::util::internal::PutSpacedAvx512(const T*, int, const uint8_t*, int64_t, T*) [with T = parquet::Int96; uint8_t = unsigned char; int64_t = long int]'\r\n   /mnt/github/arrow/cpp/src/arrow/util/spaced.h:246:28:   required from 'int arrow::util::internal::PutSpaced(const T*, int, const uint8_t*, int64_t, T*) [with T = parquet::Int96; uint8_t = unsigned char; int64_t = long int]'\r\n   /mnt/github/arrow/cpp/src/parquet/encoding.cc:107:63:   required from 'void parquet::PlainEncoder<DType>::PutSpaced(const T*, int, const uint8_t*, int64_t) [with DType = parquet::PhysicalType<(parquet::Type::type)3>; parquet::PlainEncoder<DType>::T = parquet::Int96; uint8_t = unsigned char; int64_t = long int]'\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T11:34:10.875+0000",
                    "updated": "2020-04-24T11:34:10.875+0000",
                    "started": "2020-04-24T11:34:10.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426948",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kiszk commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r414739332\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n\nReview comment:\n       i see\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T17:23:28.219+0000",
                    "updated": "2020-04-24T17:23:28.219+0000",
                    "started": "2020-04-24T17:23:28.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427033",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415229227\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n\nReview comment:\n       FWIW, Daniel Lemire has a SIMD library for this https://lemire.me/blog/2017/04/25/quickly-pruning-elements-in-simd-vectors-using-the-simdprune-library/\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:21:23.358+0000",
                    "updated": "2020-04-26T06:21:23.358+0000",
                    "started": "2020-04-26T06:21:23.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427296",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415229405\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n\nReview comment:\n       please add docs to each method\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:22:20.281+0000",
                    "updated": "2020-04-26T06:22:20.281+0000",
                    "started": "2020-04-26T06:22:20.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427298",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415229405\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n\nReview comment:\n       please add docs to describing what each method does.  PutSpaced and DecodSpaced aren't the most intuitive names and someone just looking at the header would have to read the code to understand each one.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:23:13.790+0000",
                    "updated": "2020-04-26T06:23:13.790+0000",
                    "started": "2020-04-26T06:23:13.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427299",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415230291\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n\nReview comment:\n       nit: can't these be moved out of the loop?\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:27:51.053+0000",
                    "updated": "2020-04-26T06:27:51.053+0000",
                    "started": "2020-04-26T06:27:51.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427301",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415230291\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n\nReview comment:\n       nit: can't these be moved out of the loop?\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:28:44.631+0000",
                    "updated": "2020-04-26T06:28:44.631+0000",
                    "started": "2020-04-26T06:28:44.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427302",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415230959\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n\nReview comment:\n       i < min(offset_suffix_front, num_values)?  if you take the min outside of the loop, you also  don't need to increment idx_values_* each time inside the loop (they can be calculated with a single addition).  Also by doing the calculation outside the loop I think you can call the scalar function instead of duplicating code?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:31:21.558+0000",
                    "updated": "2020-04-26T06:31:21.558+0000",
                    "started": "2020-04-26T06:31:21.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427303",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415231122\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  // The parts can fill into batches\n+  uint8_t valid_count;\n+  int64_t idx_valid_bytes = BitUtil::BytesForBits(idx_valid_bits + 1) - 1;\n+  static const __m512i zero = _mm512_set_epi64(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);\n+  while (num_values - idx_values >= kBatchSize) {\n+    // count the valid numbers of one batch.\n+    valid_count = BitUtil::kBytePopcount[valid_bits[idx_valid_bytes]];\n+    if (kBatchValidBytes > 1) {\n+      valid_count += BitUtil::kBytePopcount[valid_bits[idx_valid_bytes + 1]];\n+    }\n+\n+    // pack the data\n+    if (valid_count > 0) {\n+      __m512i src = _mm512_loadu_si512(values + idx_values);\n+      __m512i result;\n+      if (sizeof(T) == 4) {\n+        // 16 float for one m512i block, two bytes in valid_bits\n+        __mmask16 k = *(reinterpret_cast<const __mmask16*>(valid_bits + idx_valid_bytes));\n+        result = _mm512_mask_compress_epi32(zero, k, src);\n+      } else {\n+        // 8 double for one m512i block, one byte in valid_bits\n+        __mmask8 k = *(valid_bits + idx_valid_bytes);\n+        result = _mm512_mask_compress_epi64(zero, k, src);\n+      }\n+\n+      memcpy(output + num_valid_values, &result, valid_count * sizeof(T));\n+      num_valid_values += valid_count;\n+    }\n+\n+    // Step the index\n+    idx_values += kBatchSize;\n+    idx_valid_bits += kBatchSize;\n+    idx_valid_bytes += kBatchValidBytes;\n+  }\n+\n+  // The remainging back suffix\n+  while (idx_values < num_values) {\n\nReview comment:\n       same comment above about potentially using Scalar function here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:31:59.712+0000",
                    "updated": "2020-04-26T06:31:59.712+0000",
                    "started": "2020-04-26T06:31:59.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427304",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415231200\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  // The parts can fill into batches\n+  uint8_t valid_count;\n+  int64_t idx_valid_bytes = BitUtil::BytesForBits(idx_valid_bits + 1) - 1;\n+  static const __m512i zero = _mm512_set_epi64(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);\n+  while (num_values - idx_values >= kBatchSize) {\n+    // count the valid numbers of one batch.\n+    valid_count = BitUtil::kBytePopcount[valid_bits[idx_valid_bytes]];\n+    if (kBatchValidBytes > 1) {\n+      valid_count += BitUtil::kBytePopcount[valid_bits[idx_valid_bytes + 1]];\n+    }\n+\n+    // pack the data\n+    if (valid_count > 0) {\n+      __m512i src = _mm512_loadu_si512(values + idx_values);\n+      __m512i result;\n+      if (sizeof(T) == 4) {\n+        // 16 float for one m512i block, two bytes in valid_bits\n+        __mmask16 k = *(reinterpret_cast<const __mmask16*>(valid_bits + idx_valid_bytes));\n+        result = _mm512_mask_compress_epi32(zero, k, src);\n+      } else {\n+        // 8 double for one m512i block, one byte in valid_bits\n+        __mmask8 k = *(valid_bits + idx_valid_bytes);\n+        result = _mm512_mask_compress_epi64(zero, k, src);\n+      }\n+\n+      memcpy(output + num_valid_values, &result, valid_count * sizeof(T));\n+      num_valid_values += valid_count;\n+    }\n+\n+    // Step the index\n+    idx_values += kBatchSize;\n+    idx_valid_bits += kBatchSize;\n+    idx_valid_bytes += kBatchValidBytes;\n+  }\n+\n+  // The remainging back suffix\n+  while (idx_values < num_values) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedAvx512Expand(T* buffer, int num_values, int null_count,\n+                             const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  if (num_values <= null_count) {\n+    // all null slot\n+    memset(static_cast<void*>(buffer), 0, num_values * sizeof(T));\n+    return num_values;\n+  }\n+\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  // All indexs start from zero\n\nReview comment:\n       ```suggestion\r\n     // All indexes start from zero\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:32:34.934+0000",
                    "updated": "2020-04-26T06:32:34.934+0000",
                    "started": "2020-04-26T06:32:34.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427305",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415231929\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n+                    int64_t valid_bits_offset, T* output) {\n+  int num_valid_values = 0;\n+  arrow::internal::BitmapReader valid_bits_reader(valid_bits, valid_bits_offset,\n+                                                  num_values);\n+  for (int32_t i = 0; i < num_values; i++) {\n+    if (valid_bits_reader.IsSet()) {\n+      output[num_valid_values++] = values[i];\n+    }\n+    valid_bits_reader.Next();\n+  }\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedScalar(T* buffer, int num_values, int null_count,\n+                       const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  const int values_read = num_values - null_count;\n+\n+  // Depending on the number of nulls, some of the value slots in buffer may\n+  // be uninitialized, and this will cause valgrind warnings / potentially UB\n+  memset(static_cast<void*>(buffer + values_read), 0,\n+         (num_values - values_read) * sizeof(T));\n+\n+  // Add spacing for null entries. As we have filled the buffer from the front,\n+  // we need to add the spacing from the back.\n+  int values_to_move = values_read - 1;\n+  // We stop early on one of two conditions:\n+  // 1. There are no more null values that need spacing.  Note we infer this\n+  //     backwards, when 'i' is equal to 'values_to_move' it indicates\n+  //    all nulls have been consumed.\n+  // 2. There are no more non-null values that need to move which indicates\n+  //    all remaining slots are null, so their exact value doesn't matter.\n+  for (int i = num_values - 1; (i > values_to_move) && (values_to_move >= 0); i--) {\n+    if (BitUtil::GetBit(valid_bits, valid_bits_offset + i)) {\n+      buffer[i] = buffer[values_to_move];\n+      values_to_move--;\n+    }\n+  }\n+  return num_values;\n+}\n+\n+#if defined(ARROW_HAVE_AVX512)\n+template <typename T>\n+int PutSpacedAvx512Compress(const T* values, int num_values, const uint8_t* valid_bits,\n+                            int64_t valid_bits_offset, T* output) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  int num_valid_values = 0;\n+  int idx_values = 0;\n+  int64_t idx_valid_bits = valid_bits_offset;\n+\n+  // First handle the front suffix\n+  const int64_t offset_suffix_front = 8 - (valid_bits_offset % 8);\n+  for (int64_t i = 0; (i < offset_suffix_front) && (idx_values < num_values); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  // The parts can fill into batches\n+  uint8_t valid_count;\n+  int64_t idx_valid_bytes = BitUtil::BytesForBits(idx_valid_bits + 1) - 1;\n+  static const __m512i zero = _mm512_set_epi64(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);\n+  while (num_values - idx_values >= kBatchSize) {\n+    // count the valid numbers of one batch.\n+    valid_count = BitUtil::kBytePopcount[valid_bits[idx_valid_bytes]];\n+    if (kBatchValidBytes > 1) {\n+      valid_count += BitUtil::kBytePopcount[valid_bits[idx_valid_bytes + 1]];\n+    }\n+\n+    // pack the data\n+    if (valid_count > 0) {\n+      __m512i src = _mm512_loadu_si512(values + idx_values);\n+      __m512i result;\n+      if (sizeof(T) == 4) {\n+        // 16 float for one m512i block, two bytes in valid_bits\n+        __mmask16 k = *(reinterpret_cast<const __mmask16*>(valid_bits + idx_valid_bytes));\n+        result = _mm512_mask_compress_epi32(zero, k, src);\n+      } else {\n+        // 8 double for one m512i block, one byte in valid_bits\n+        __mmask8 k = *(valid_bits + idx_valid_bytes);\n+        result = _mm512_mask_compress_epi64(zero, k, src);\n+      }\n+\n+      memcpy(output + num_valid_values, &result, valid_count * sizeof(T));\n+      num_valid_values += valid_count;\n+    }\n+\n+    // Step the index\n+    idx_values += kBatchSize;\n+    idx_valid_bits += kBatchSize;\n+    idx_valid_bytes += kBatchValidBytes;\n+  }\n+\n+  // The remainging back suffix\n+  while (idx_values < num_values) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      output[num_valid_values] = values[idx_values];\n+      num_valid_values++;\n+    }\n+    idx_values++;\n+    idx_valid_bits++;\n+  }\n+\n+  return num_valid_values;\n+}\n+\n+template <typename T>\n+int DecodeSpacedAvx512Expand(T* buffer, int num_values, int null_count,\n+                             const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  assert(sizeof(T) == 4 || sizeof(T) == 8);  // Only support epi32 and epi64\n+  if (num_values <= null_count) {\n+    // all null slot\n+    memset(static_cast<void*>(buffer), 0, num_values * sizeof(T));\n+    return num_values;\n+  }\n+\n+  constexpr int kBatchSize = sizeof(__m512i) / sizeof(T);\n+  constexpr int kBatchValidBytes = kBatchSize / 8;\n+  // All indexs start from zero\n+  int idx_decode = num_values - null_count - 1;\n+  int idx_spaced = num_values - 1;\n+  int64_t idx_valid_bits = valid_bits_offset + idx_spaced;\n+\n+  const int64_t offset_suffix_back = (idx_valid_bits + 1) % kBatchSize;\n+  // First handle back suffix\n+  for (int64_t i = 0; (i < offset_suffix_back) && (idx_decode < idx_spaced); i++) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      buffer[idx_spaced] = buffer[idx_decode];\n+      idx_decode--;\n+    }\n+    idx_spaced--;\n+    idx_valid_bits--;\n+  }\n+\n+  // The parts can fill into batches, index from back.\n+  int64_t idx_valid_bytes = BitUtil::BytesForBits(idx_valid_bits + 1) - 1;\n+  uint8_t decode_count;\n+  static const __m512i zero = _mm512_set_epi64(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0);\n+  while (idx_decode < idx_spaced && (idx_spaced + 1) >= kBatchSize) {\n+    // count decode numbers of one batch and step the index\n+    decode_count = BitUtil::kBytePopcount[valid_bits[idx_valid_bytes]];\n+    idx_valid_bytes--;\n+    if (kBatchValidBytes > 1) {\n+      decode_count += BitUtil::kBytePopcount[valid_bits[idx_valid_bytes]];\n+      idx_valid_bytes--;\n+    }\n+    idx_decode -= decode_count;\n+    idx_spaced -= kBatchSize;\n+    idx_valid_bits -= kBatchSize;\n+\n+    // pack the data\n+    if (decode_count > 0) {\n+      __m512i src = _mm512_loadu_si512(buffer + idx_decode + 1);\n+      __m512i result;\n+      if (sizeof(T) == 4) {\n+        // 16 float for one m512i block, two bytes in valid_bits\n+        __mmask16 k =\n+            *(reinterpret_cast<const __mmask16*>(valid_bits + idx_valid_bytes + 1));\n+        result = _mm512_mask_expand_epi32(zero, k, src);\n+      } else {\n+        // 8 double for one m512i block, one byte in valid_bits\n+        __mmask8 k = *(valid_bits + idx_valid_bytes + 1);\n+        result = _mm512_mask_expand_epi64(zero, k, src);\n+      }\n+      _mm512_storeu_si512(buffer + idx_spaced + 1, result);\n+    } else {  // All null in this batch\n+      _mm512_storeu_si512(buffer + idx_spaced + 1, zero);\n+    }\n+  }\n+\n+  // The remaining front suffix\n+  while (idx_decode < idx_spaced && idx_decode >= 0) {\n+    if (BitUtil::GetBit(valid_bits, idx_valid_bits)) {\n+      buffer[idx_spaced] = buffer[idx_decode];\n+      idx_decode--;\n+    }\n+    idx_spaced--;\n+    idx_valid_bits--;\n+  }\n+\n+  return num_values;\n+}\n+\n+template <typename T>\n+inline int PutSpacedAvx512(const T* src, int num_values, const uint8_t* valid_bits,\n+                           int64_t valid_bits_offset, T* output) {\n+  if (sizeof(T) == 4 || sizeof(T) == 8)  // Based on _mask_compress_epi32/64\n+    return PutSpacedAvx512Compress<T>(src, num_values, valid_bits, valid_bits_offset,\n+                                      output);\n+  else\n+    return PutSpacedScalar<T>(src, num_values, valid_bits, valid_bits_offset, output);\n+}\n+\n+template <typename T>\n+inline int DecodeSpacedAvx512(T* buffer, int num_values, int null_count,\n+                              const uint8_t* valid_bits, int64_t valid_bits_offset) {\n+  if (sizeof(T) == 4 || sizeof(T) == 8)  // Based on _mask_expand_epi32/64\n\nReview comment:\n       nit: I'm not sure if we've decided on this on the project but I much prefer wrapping single lines in braces even though not required.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:36:24.426+0000",
                    "updated": "2020-04-26T06:36:24.426+0000",
                    "started": "2020-04-26T06:36:24.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427307",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#issuecomment-619493366\n\n\n   Just curious if you see and impact on parquet-arrow-reader-writer benchmarks?  That is the ultimate goal of the speedup.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:37:37.968+0000",
                    "updated": "2020-04-26T06:37:37.968+0000",
                    "started": "2020-04-26T06:37:37.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427308",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#discussion_r415233940\n\n\n\n##########\nFile path: cpp/src/arrow/util/spaced.h\n##########\n@@ -0,0 +1,266 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/bit_util.h\"\n+\n+#ifdef ARROW_HAVE_AVX512\n+#include <immintrin.h>\n+#endif  // ARROW_HAVE_AVX512\n+\n+namespace arrow {\n+namespace util {\n+namespace internal {\n+\n+template <typename T>\n+int PutSpacedScalar(const T* values, int num_values, const uint8_t* valid_bits,\n\nReview comment:\n       might be worth a quick discussion on whether we should vendor this (or maybe just vendor the lookup tables).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T06:48:17.899+0000",
                    "updated": "2020-04-26T06:48:17.899+0000",
                    "started": "2020-04-26T06:48:17.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427309",
                    "issueId": "13300699"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/worklog/427315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jianxind commented on pull request #7029:\nURL: https://github.com/apache/arrow/pull/7029#issuecomment-619501029\n\n\n   > Just curious if you see and impact on parquet-arrow-reader-writer benchmarks? That is the ultimate goal of the speedup.\r\n   \r\n   No impact, I checked all items for parquet-arrow-reader-writer-benchmark... \r\n   \r\n   Below is the perf top on the bench-marking of BM_ReadColumn<true,Int32Type> and BM_WriteColumn<true,Int32Type>, seems these function is not on the path for them.\r\n   \r\n   BM_ReadColumn<true,Int32Type>:\r\n     31.60%  libparquet.so.18.0.0                   [.] _ZN5arrow4util10RleDecoder22GetBatchWithDictSpacedIiEEiPKT_iPS3_iiPKhl\r\n     21.74%  libparquet.so.18.0.0                   [.] _ZN7parquet8internalL24DefinitionLevelsToBitmapEPKslssPlS3_Phl\r\n   \r\n   BM_WriteColumn<true,Int32Type>:\r\n     20.64%  libparquet.so.18.0.0                   [.] _ZN5mpark6detail10visitation4base17make_fmatrix_implIONS1_7variant13value_visitorIRZN7parquet5arrow12_GLOBAL__N_19WritePathENS7_12Ele\r\n     16.19%  libparquet.so.18.0.0                   [.] _ZN7parquet15DictEncoderImplINS_12PhysicalTypeILNS_4Type4typeE1EEEE3PutERKi.constprop.455\r\n     11.50%  libparquet.so.18.0.0                   [.] _ZN7parquet12LevelEncoder6EncodeEiPKs\r\n      7.93%  libparquet.so.18.0.0                   [.] _ZN5arrow4util10RleEncoder15FlushLiteralRunEb\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-26T07:27:24.768+0000",
                    "updated": "2020-04-26T07:27:24.768+0000",
                    "started": "2020-04-26T07:27:24.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427315",
                    "issueId": "13300699"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 30000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4277e62[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@562362cd[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11359aab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5c4da74a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76f6889d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@29dca6fa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@148181a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@25c71385[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6737d5c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2b1054aa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33041ca1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2ec26a7f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 30000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 12 06:56:50 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-12T06:57:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8579/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-04-24T03:21:14.000+0000",
        "updated": "2020-08-12T06:57:14.000+0000",
        "timeoriginalestimate": null,
        "description": "As part of https://issues.apache.org/jira/browse/PARQUET-1841, AVX512 path identified with the helper of\u00a0mask_compress_/mask_expand_\u00a0 API.\r\n\r\nThis Jira created for spaced benchmark, unittest and AVX512 path and other basic support of further potential SIMD chance of SSE/AVX2.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 30000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] AVX512 part for SIMD operations of DecodeSpaced/EncodeSpaced",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13300699/comment/17176077",
                    "id": "17176077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
                        "name": "frank.du",
                        "key": "frank.du",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Frank Du",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "No need now. The typical 0.01% is optimized\u00a0 by\u00a0[https://github.com/apache/arrow/pull/7531]\u00a0already.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=frank.du",
                        "name": "frank.du",
                        "key": "frank.du",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Frank Du",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-08-12T06:56:50.959+0000",
                    "updated": "2020-08-12T06:56:50.959+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0e0rk:",
        "customfield_12314139": null
    }
}