{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13251263",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263",
    "key": "ARROW-6274",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12340948",
                "id": "12340948",
                "description": "",
                "name": "0.16.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-02-07"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "beginner",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=hengruo",
            "name": "hengruo",
            "key": "hengruo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Hengruo Zhang",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6274/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/323215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "hengruo commented on pull request #5577: ARROW-6274\nURL: https://github.com/apache/arrow/pull/5577\n \n \n   I think if we implement a function converting Relation to CSV string, it is a duplicate of some functions in arrow/csv/writer.rs, so I just added a function to export all RecordBatches in Relation.\r\n   Also, I encapsulated StringWriter in arrow/utils/string_writer.rs, as a Write trait's implementation, which can be set as arrow::csv::Writer 's parameter.\r\n   \r\n   In fact, it is not an elegant implementation. I have planned to implement a function converting Vec<& RecordBatch> to string, however, the same issue, it is duplicate. \r\n   \r\n   And another way is that we can convert Vec<& RecordBatch> to Vec<Vec<String>> first and convert it into a string or write it into a file, but it may have performance issue when there are many rows.\r\n   \r\n   Any suggestions are welcome. Thanks!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T06:15:30.049+0000",
                    "updated": "2019-10-04T06:15:30.049+0000",
                    "started": "2019-10-04T06:15:30.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323215",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/323226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5577: ARROW-6274\nURL: https://github.com/apache/arrow/pull/5577#issuecomment-538255440\n \n \n   https://issues.apache.org/jira/browse/ARROW-6274\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T06:16:13.880+0000",
                    "updated": "2019-10-04T06:16:13.880+0000",
                    "started": "2019-10-04T06:16:13.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323226",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/323356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r331465382\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -85,9 +85,9 @@ where\n }\n \n /// A CSV writer\n-pub struct Writer {\n-    /// The file to write to\n-    file: File,\n+pub struct Writer<W: Write> {\n+    /// The object to write to\n+    object: W,\n \n Review comment:\n   I suggest renaming `object` to `writer`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T11:58:23.228+0000",
                    "updated": "2019-10-04T11:58:23.228+0000",
                    "started": "2019-10-04T11:58:23.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323356",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/323357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r331465906\n \n \n\n ##########\n File path: rust/datafusion/src/execution/relation.rs\n ##########\n @@ -33,8 +33,26 @@ pub trait Relation {\n     /// Get the next `RecordBatch`, or `None` if the iterator is exhausted\n     fn next(&mut self) -> Result<Option<RecordBatch>>;\n \n-    /// get the schema for this relation\n+    /// Get the schema for this relation\n     fn schema(&self) -> &Arc<Schema>;\n+\n+    /// Get all batches\n+    fn all(&mut self) -> Result<Vec<RecordBatch>> {\n+        let mut res = Vec::new();\n+        loop {\n+            match self.next() {\n \n Review comment:\n   you can probably simplify this by with `match self.next()?` ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T12:00:01.964+0000",
                    "updated": "2019-10-04T12:00:01.964+0000",
                    "started": "2019-10-04T12:00:01.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323357",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/323358",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r331466186\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -113,15 +115,141 @@ impl Writer {\n         }\n     }\n \n-    /// Write a vector of record batches to a file\n-    pub fn write(&self, batches: Vec<&RecordBatch>) -> Result<()> {\n+    /// Convert a record to a string vector\n+    fn convert(&self, batch: &RecordBatch, row_index: usize) -> Result<Vec<String>> {\n+        // TODO: it'd be more efficient if we could create `record: Vec<&[u8]>\n+        let mut record: Vec<String> = Vec::with_capacity(batch.num_columns());\n+        for col_index in 0..batch.num_columns() {\n+            let col = batch.column(col_index);\n+            if col.is_null(row_index) {\n+                // write an empty value\n+                record.push(String::from(\"\"));\n+                continue;\n+            }\n+            let string = match col.data_type() {\n+                DataType::Float64 => write_primitive_value::<Float64Type>(col, row_index),\n+                DataType::Float32 => write_primitive_value::<Float32Type>(col, row_index),\n+                DataType::Int8 => write_primitive_value::<Int8Type>(col, row_index),\n+                DataType::Int16 => write_primitive_value::<Int16Type>(col, row_index),\n+                DataType::Int32 => write_primitive_value::<Int32Type>(col, row_index),\n+                DataType::Int64 => write_primitive_value::<Int64Type>(col, row_index),\n+                DataType::UInt8 => write_primitive_value::<UInt8Type>(col, row_index),\n+                DataType::UInt16 => write_primitive_value::<UInt16Type>(col, row_index),\n+                DataType::UInt32 => write_primitive_value::<UInt32Type>(col, row_index),\n+                DataType::UInt64 => write_primitive_value::<UInt64Type>(col, row_index),\n+                DataType::Boolean => {\n+                    let c = col.as_any().downcast_ref::<BooleanArray>().unwrap();\n+                    c.value(row_index).to_string()\n+                }\n+                DataType::Utf8 => {\n+                    let c = col.as_any().downcast_ref::<BinaryArray>().unwrap();\n+                    String::from_utf8(c.value(row_index).to_vec())?\n+                }\n+                DataType::Date32(DateUnit::Day) => {\n+                    let c = col.as_any().downcast_ref::<Date32Array>().unwrap();\n+                    c.value_as_date(row_index)\n+                        .unwrap()\n+                        .format(&self.date_format)\n+                        .to_string()\n+                }\n+                DataType::Date64(DateUnit::Millisecond) => {\n+                    let c = col.as_any().downcast_ref::<Date64Array>().unwrap();\n+                    c.value_as_date(row_index)\n+                        .unwrap()\n+                        .format(&self.date_format)\n+                        .to_string()\n+                }\n+                DataType::Time32(TimeUnit::Second) => {\n+                    let c = col.as_any().downcast_ref::<Time32SecondArray>().unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Time32(TimeUnit::Millisecond) => {\n+                    let c = col\n+                        .as_any()\n+                        .downcast_ref::<Time32MillisecondArray>()\n+                        .unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Time64(TimeUnit::Microsecond) => {\n+                    let c = col\n+                        .as_any()\n+                        .downcast_ref::<Time64MicrosecondArray>()\n+                        .unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Time64(TimeUnit::Nanosecond) => {\n+                    let c = col\n+                        .as_any()\n+                        .downcast_ref::<Time64NanosecondArray>()\n+                        .unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Timestamp(time_unit) => {\n+                    use TimeUnit::*;\n+                    let datetime = match time_unit {\n+                        Second => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampSecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                        Millisecond => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampMillisecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                        Microsecond => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampMicrosecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                        Nanosecond => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampNanosecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                    };\n+                    format!(\"{}\", datetime.format(&self.timestamp_format))\n+                }\n+                t => {\n+                    // List and Struct arrays not supported by the writer, any\n+                    // other type needs to be implemented\n+                    return Err(ArrowError::CsvError(format!(\n+                        \"CSV Writer does not support {:?} data type\",\n+                        t\n+                    )));\n+                }\n+            };\n+\n+            record.push(string);\n+        }\n+        Ok(record)\n+    }\n+\n+    /// Write a vector of record batches to a writable object\n+    pub fn write(&'a self, batches: Vec<&RecordBatch>) -> Result<()> {\n \n Review comment:\n   We typically wouldn't want to load all the batches into a `Vec` before writing them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T12:00:57.935+0000",
                    "updated": "2019-10-04T12:00:57.935+0000",
                    "started": "2019-10-04T12:00:57.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323358",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/323378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#issuecomment-538373436\n \n \n   @hengruo This is a great start! I think what we need is a struct for the CSV writer that users can create and then repeatedly call a method to write batches. This would allow me to easily integrate this with DataFusion for example. The DataFusion integration can be a separate PR.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-04T12:19:39.660+0000",
                    "updated": "2019-10-04T12:19:39.660+0000",
                    "started": "2019-10-04T12:19:39.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "323378",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/324186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "hengruo commented on issue #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#issuecomment-538865560\n \n \n   > @hengruo This is a great start! I think what we need is a struct for the CSV writer that users can create and then repeatedly call a method to write batches. This would allow me to easily integrate this with DataFusion for example. The DataFusion integration can be a separate PR.\r\n   \r\n   I have a question. If `write()` writes one batch once, how to deal with the header? Should we add a new argument to decide whether it is the first calling so that it needs to write the header?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-07T07:02:12.704+0000",
                    "updated": "2019-10-07T07:02:12.704+0000",
                    "started": "2019-10-07T07:02:12.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324186",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/324287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#issuecomment-538967957\n \n \n   I think that the writer should keep track of whether it has written the header yet and just write it on the first call to `write()`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-07T11:41:03.204+0000",
                    "updated": "2019-10-07T11:41:03.204+0000",
                    "started": "2019-10-07T11:41:03.204+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "324287",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r332479065\n \n \n\n ##########\n File path: rust/datafusion/src/converter/csv.rs\n ##########\n @@ -0,0 +1,28 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV converters\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::error::Result;\n+use crate::execution::physical_plan::BatchIterator;\n+\n+fn to_csv(batches: Vec<RecordBatch>) -> String {\n \n Review comment:\n   Is this `fn` meant to be empty?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T13:04:20.929+0000",
                    "updated": "2019-10-08T13:04:20.929+0000",
                    "started": "2019-10-08T13:04:20.929+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325047",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r332480226\n \n \n\n ##########\n File path: rust/arrow/src/util/string_writer.rs\n ##########\n @@ -0,0 +1,54 @@\n+use std::cell::RefCell;\n+use std::io::{Error, ErrorKind, Result, Write};\n+\n \n Review comment:\n   May you please add some documentation/comments on what string writer does.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T13:04:21.011+0000",
                    "updated": "2019-10-08T13:04:21.011+0000",
                    "started": "2019-10-08T13:04:21.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325048",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "hengruo commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r332664470\n \n \n\n ##########\n File path: rust/datafusion/src/converter/csv.rs\n ##########\n @@ -0,0 +1,28 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV converters\n+\n+use arrow::datatypes::Schema;\n+use arrow::record_batch::RecordBatch;\n+\n+use crate::error::Result;\n+use crate::execution::physical_plan::BatchIterator;\n+\n+fn to_csv(batches: Vec<RecordBatch>) -> String {\n \n Review comment:\n   This module should not exist. It is the original design. I will remove them. \r\n   \r\n   And current `write()` has become `write(batch: &RecordBatch)` from `write(batches: Vec<&RecordBatch>)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-08T18:26:22.446+0000",
                    "updated": "2019-10-08T18:26:22.446+0000",
                    "started": "2019-10-08T18:26:22.445+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325267",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#discussion_r332821844\n \n \n\n ##########\n File path: rust/arrow/src/csv/writer.rs\n ##########\n @@ -98,189 +101,176 @@ pub struct Writer {\n     timestamp_format: String,\n     /// The time format for time arrays\n     time_format: String,\n+    /// Is the beginning-of-writer\n+    bow: bool,\n }\n \n-impl Writer {\n-    /// Create a new CsvWriter from a file, with default options\n-    pub fn new(file: File) -> Self {\n+impl<'a, 'b: 'a, W: Write + 'b> Writer<W>\n+where\n+    &'a W: Write,\n+{\n+    /// Create a new CsvWriter from a writable object, with default options\n+    pub fn new(writer: W) -> Self {\n         Writer {\n-            file,\n+            writer,\n             delimiter: b',',\n             has_headers: true,\n             date_format: DEFAULT_DATE_FORMAT.to_string(),\n             time_format: DEFAULT_TIME_FORMAT.to_string(),\n             timestamp_format: DEFAULT_TIMESTAMP_FORMAT.to_string(),\n+            bow: true,\n         }\n     }\n \n-    /// Write a vector of record batches to a file\n-    pub fn write(&self, batches: Vec<&RecordBatch>) -> Result<()> {\n-        if batches.is_empty() {\n-            return Err(ArrowError::CsvError(\n-                \"No record batches supplied to the CSV writer\".to_string(),\n-            ));\n+    /// Convert a record to a string vector\n+    fn convert(&self, batch: &RecordBatch, row_index: usize) -> Result<Vec<String>> {\n+        // TODO: it'd be more efficient if we could create `record: Vec<&[u8]>\n+        let mut record: Vec<String> = Vec::with_capacity(batch.num_columns());\n+        for col_index in 0..batch.num_columns() {\n+            let col = batch.column(col_index);\n+            if col.is_null(row_index) {\n+                // write an empty value\n+                record.push(String::from(\"\"));\n+                continue;\n+            }\n+            let string = match col.data_type() {\n+                DataType::Float64 => write_primitive_value::<Float64Type>(col, row_index),\n+                DataType::Float32 => write_primitive_value::<Float32Type>(col, row_index),\n+                DataType::Int8 => write_primitive_value::<Int8Type>(col, row_index),\n+                DataType::Int16 => write_primitive_value::<Int16Type>(col, row_index),\n+                DataType::Int32 => write_primitive_value::<Int32Type>(col, row_index),\n+                DataType::Int64 => write_primitive_value::<Int64Type>(col, row_index),\n+                DataType::UInt8 => write_primitive_value::<UInt8Type>(col, row_index),\n+                DataType::UInt16 => write_primitive_value::<UInt16Type>(col, row_index),\n+                DataType::UInt32 => write_primitive_value::<UInt32Type>(col, row_index),\n+                DataType::UInt64 => write_primitive_value::<UInt64Type>(col, row_index),\n+                DataType::Boolean => {\n+                    let c = col.as_any().downcast_ref::<BooleanArray>().unwrap();\n+                    c.value(row_index).to_string()\n+                }\n+                DataType::Utf8 => {\n+                    let c = col.as_any().downcast_ref::<BinaryArray>().unwrap();\n+                    String::from_utf8(c.value(row_index).to_vec())?\n+                }\n+                DataType::Date32(DateUnit::Day) => {\n+                    let c = col.as_any().downcast_ref::<Date32Array>().unwrap();\n+                    c.value_as_date(row_index)\n+                        .unwrap()\n+                        .format(&self.date_format)\n+                        .to_string()\n+                }\n+                DataType::Date64(DateUnit::Millisecond) => {\n+                    let c = col.as_any().downcast_ref::<Date64Array>().unwrap();\n+                    c.value_as_date(row_index)\n+                        .unwrap()\n+                        .format(&self.date_format)\n+                        .to_string()\n+                }\n+                DataType::Time32(TimeUnit::Second) => {\n+                    let c = col.as_any().downcast_ref::<Time32SecondArray>().unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Time32(TimeUnit::Millisecond) => {\n+                    let c = col\n+                        .as_any()\n+                        .downcast_ref::<Time32MillisecondArray>()\n+                        .unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Time64(TimeUnit::Microsecond) => {\n+                    let c = col\n+                        .as_any()\n+                        .downcast_ref::<Time64MicrosecondArray>()\n+                        .unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Time64(TimeUnit::Nanosecond) => {\n+                    let c = col\n+                        .as_any()\n+                        .downcast_ref::<Time64NanosecondArray>()\n+                        .unwrap();\n+                    c.value_as_time(row_index)\n+                        .unwrap()\n+                        .format(&self.time_format)\n+                        .to_string()\n+                }\n+                DataType::Timestamp(time_unit) => {\n+                    use TimeUnit::*;\n+                    let datetime = match time_unit {\n+                        Second => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampSecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                        Millisecond => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampMillisecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                        Microsecond => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampMicrosecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                        Nanosecond => col\n+                            .as_any()\n+                            .downcast_ref::<TimestampNanosecondArray>()\n+                            .unwrap()\n+                            .value_as_datetime(row_index)\n+                            .unwrap(),\n+                    };\n+                    format!(\"{}\", datetime.format(&self.timestamp_format))\n+                }\n+                t => {\n+                    // List and Struct arrays not supported by the writer, any\n+                    // other type needs to be implemented\n+                    return Err(ArrowError::CsvError(format!(\n+                        \"CSV Writer does not support {:?} data type\",\n+                        t\n+                    )));\n+                }\n+            };\n+\n+            record.push(string);\n         }\n+        Ok(record)\n+    }\n+\n+    /// Write a vector of record batches to a writable object\n+    pub fn write(&'a mut self, batch: &RecordBatch) -> Result<()> {\n         let mut builder = csv_crate::WriterBuilder::new();\n-        let mut wtr = builder.delimiter(self.delimiter).from_writer(&self.file);\n-        let num_columns = batches[0].num_columns();\n-        if self.has_headers {\n-            let mut headers: Vec<String> = Vec::with_capacity(num_columns);\n-            &batches[0]\n-                .schema()\n-                .fields()\n-                .iter()\n-                .for_each(|field| headers.push(field.name().to_string()));\n-            wtr.write_record(&headers[..])?;\n+        let mut wtr = builder.delimiter(self.delimiter).from_writer(&self.writer);\n+        let num_columns = batch.num_columns();\n+        if self.bow {\n \n Review comment:\n   I'm not crazy about the variable name `bow` but we can change this later\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T04:10:11.855+0000",
                    "updated": "2019-10-09T04:10:11.855+0000",
                    "started": "2019-10-09T04:10:11.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325467",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#issuecomment-539818424\n \n \n   We also might need to rebase before merging?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T04:11:40.378+0000",
                    "updated": "2019-10-09T04:11:40.378+0000",
                    "started": "2019-10-09T04:11:40.377+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325468",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577#issuecomment-539888215\n \n \n   Thanks for rebasing! This can be merged once CI is green.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T08:06:21.405+0000",
                    "updated": "2019-10-09T08:06:21.405+0000",
                    "started": "2019-10-09T08:06:21.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325567",
                    "issueId": "13251263"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/worklog/325730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5577: ARROW-6274: [Rust] [DataFusion] Add support for writing results to CSV\nURL: https://github.com/apache/arrow/pull/5577\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-09T14:35:29.489+0000",
                    "updated": "2019-10-09T14:35:29.489+0000",
                    "started": "2019-10-09T14:35:29.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "325730",
                    "issueId": "13251263"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1ccc44d5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71060381[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c131cf4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5dc80efc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2679112a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7c905806[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78e01fdc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@65c251d2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b5cec01[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@75f2d504[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d142a99[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7a2fa628[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 09 14:35:28 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-10-09T14:35:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6274/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2019-08-16T14:26:09.000+0000",
        "updated": "2019-10-09T14:35:29.000+0000",
        "timeoriginalestimate": null,
        "description": "There is currently no simple way to result query results to CSV. It would be good to have convenience methods either in ExecutionContext or separate utility methods to enable results to be written in CSV format to stdout or to a file.\r\n\r\nThere is sample code in unit tests for this and the approach is to iterate over each\u00a0row in a batch and then iterate over each column and downcast it to an appropriate type (based on the schema associated with the batch) and then pull out the value for the row.\r\n\r\nSee\u00a0[https://github.com/apache/arrow/blob/master/rust/datafusion/tests/sql.rs#L425-L497]\u00a0for example code in a test\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Add support for writing results to CSV",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/comment/16930219",
                    "id": "16930219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=hengruo",
                        "name": "hengruo",
                        "key": "hengruo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hengruo Zhang",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "How about implementing a method for DataSourceRelation to convert a relation to CSV string?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=hengruo",
                        "name": "hengruo",
                        "key": "hengruo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Hengruo Zhang",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-09-16T03:59:39.534+0000",
                    "updated": "2019-09-16T03:59:39.534+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251263/comment/16947743",
                    "id": "16947743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 5577\n[https://github.com/apache/arrow/pull/5577]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-10-09T14:35:28.143+0000",
                    "updated": "2019-10-09T14:35:28.143+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z05qq0:",
        "customfield_12314139": null
    }
}