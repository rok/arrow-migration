{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13324548",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548",
    "key": "ARROW-9858",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9858/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475327",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche opened a new pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T14:43:58.540+0000",
                    "updated": "2020-08-27T14:43:58.540+0000",
                    "started": "2020-08-27T14:43:58.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475327",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475331",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#issuecomment-681995199\n\n\n   There is probably still plenty to improve in wording and actual examples, but started putting some content on the page.\r\n   \r\n   @nealrichardson if you have specific aspects / use cases that you encountered while experimenting with it that you would add, all ears.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T14:45:40.590+0000",
                    "updated": "2020-08-27T14:45:40.590+0000",
                    "started": "2020-08-27T14:45:40.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475331",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#issuecomment-681996219\n\n\n   https://issues.apache.org/jira/browse/ARROW-9858\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T14:47:21.643+0000",
                    "updated": "2020-08-27T14:47:21.643+0000",
                    "started": "2020-08-27T14:47:21.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475334",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r478548600\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       \"by reading\" or \"by inspecting\", no?\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -69,3 +135,66 @@ here is how you can read contents from a S3 bucket::\n    >>> f = s3.open_input_stream('my-test-bucket/Dir1/File2')\n    >>> f.readall()\n    b'some data'\n+\n+\n+Hadoop File System (HDFS)\n+-------------------------\n+\n+PyArrow comes with bindings to the Hadoop File System (based on C++ bindings\n+using ``libhdfs``, a JNI-based interface to the Java Hadoop client). You connect\n+using the `class`:HadoopFileSystem: constructor::\n\nReview comment:\n       Looks like a markup typo in `class`.\n\n##########\nFile path: docs/source/python/api/filesystems.rst\n##########\n@@ -41,3 +41,13 @@ Concrete Subclasses\n    LocalFileSystem\n    S3FileSystem\n    HadoopFileSystem\n+   SubTreeFileSystem\n+\n+To define filesystems with behavior implemented in Python.\n\nReview comment:\n       Either put a \":\" at the end or make a full sentence?\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -69,3 +135,66 @@ here is how you can read contents from a S3 bucket::\n    >>> f = s3.open_input_stream('my-test-bucket/Dir1/File2')\n    >>> f.readall()\n    b'some data'\n+\n+\n+Hadoop File System (HDFS)\n+-------------------------\n+\n+PyArrow comes with bindings to the Hadoop File System (based on C++ bindings\n+using ``libhdfs``, a JNI-based interface to the Java Hadoop client). You connect\n+using the `class`:HadoopFileSystem: constructor::\n+\n+.. code-block:: python\n+\n+   from pyarrow import fs\n+   hdfs = fs.HadoopFileSystem(host, port, user=user, kerb_ticket=ticket_cache_path)\n+\n+The ``libhdfs`` library is loaded **at runtime**\n+(rather than at link / library load time, since the library may not be in your\n+LD_LIBRARY_PATH), and relies on some environment variables.\n+\n+* ``HADOOP_HOME``: the root of your installed Hadoop distribution. Often has\n+  `lib/native/libhdfs.so`.\n+\n+* ``JAVA_HOME``: the location of your Java SDK installation.\n+\n+* ``ARROW_LIBHDFS_DIR`` (optional): explicit location of ``libhdfs.so`` if it is\n+  installed somewhere other than ``$HADOOP_HOME/lib/native``.\n+\n+* ``CLASSPATH``: must contain the Hadoop jars. You can set these using:\n+\n+  .. code-block:: shell\n+\n+      export CLASSPATH=`$HADOOP_HOME/bin/hdfs classpath --glob`\n+\n+  If ``CLASSPATH`` is not set, then it will be set automatically if the\n+  ``hadoop`` executable is in your system path, or if ``HADOOP_HOME`` is set.\n+\n+\n+Using fsspec-compatible filesystems\n+-----------------------------------\n+\n+The filesystems mentioned above are natively supported by Arrow C++ / PyArrow.\n+The Python ecosystem, however, also has several filesystem packages. Those\n+packages following the\n+`fsspec <https://filesystem-spec.readthedocs.io/en/latest/>`__ interface can be\n\nReview comment:\n       Need only a single \"_\" at the end of the hyperlink markup, I believe?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T16:34:40.869+0000",
                    "updated": "2020-08-27T16:34:40.869+0000",
                    "started": "2020-08-27T16:34:40.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475401",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r478656124\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       How does this work? I don't see these env vars in our code; is this an aws-sdk-cpp feature?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T19:47:54.019+0000",
                    "updated": "2020-08-27T19:47:54.019+0000",
                    "started": "2020-08-27T19:47:54.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475510",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475519",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r478665527\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       > is this an aws-sdk-cpp feature?\r\n   \r\n   I suppose so? (note that I didn't add this, this was already in the docs ;))\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T20:06:13.368+0000",
                    "updated": "2020-08-27T20:06:13.368+0000",
                    "started": "2020-08-27T20:06:13.367+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475519",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475527",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r478671300\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       Yeah I know, this was a more general question. It seems that the only place \"AWS_ACCESS_KEY_ID\" appears in our code is on this line, meaning we didn't implement it and we don't test it, so \ud83e\udd37 how (or even if) it works.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T20:17:24.192+0000",
                    "updated": "2020-08-27T20:17:24.192+0000",
                    "started": "2020-08-27T20:17:24.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475527",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475532",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r478678088\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       AWS provides several ways to configure credentials (and those are picked up by the SDK or CLI): https://docs.aws.amazon.com/sdk-for-cpp/v1/developer-guide/credentials.html, https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T20:30:57.983+0000",
                    "updated": "2020-08-27T20:30:57.983+0000",
                    "started": "2020-08-27T20:30:57.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475532",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/475533",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r478678307\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       It might make sense to link to one of those pages, but I don't know how stable those links are ..\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-27T20:31:31.002+0000",
                    "updated": "2020-08-27T20:31:31.002+0000",
                    "started": "2020-08-27T20:31:31.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "475533",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r480948273\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -69,3 +135,66 @@ here is how you can read contents from a S3 bucket::\n    >>> f = s3.open_input_stream('my-test-bucket/Dir1/File2')\n    >>> f.readall()\n    b'some data'\n+\n+\n+Hadoop File System (HDFS)\n+-------------------------\n+\n+PyArrow comes with bindings to the Hadoop File System (based on C++ bindings\n+using ``libhdfs``, a JNI-based interface to the Java Hadoop client). You connect\n+using the `class`:HadoopFileSystem: constructor::\n\nReview comment:\n       Ah, yes, I switched the `` ` `` and `` : `` order .. :)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T08:03:33.430+0000",
                    "updated": "2020-09-01T08:03:33.430+0000",
                    "started": "2020-09-01T08:03:33.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477050",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r480953625\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -69,3 +135,66 @@ here is how you can read contents from a S3 bucket::\n    >>> f = s3.open_input_stream('my-test-bucket/Dir1/File2')\n    >>> f.readall()\n    b'some data'\n+\n+\n+Hadoop File System (HDFS)\n+-------------------------\n+\n+PyArrow comes with bindings to the Hadoop File System (based on C++ bindings\n+using ``libhdfs``, a JNI-based interface to the Java Hadoop client). You connect\n+using the `class`:HadoopFileSystem: constructor::\n+\n+.. code-block:: python\n+\n+   from pyarrow import fs\n+   hdfs = fs.HadoopFileSystem(host, port, user=user, kerb_ticket=ticket_cache_path)\n+\n+The ``libhdfs`` library is loaded **at runtime**\n+(rather than at link / library load time, since the library may not be in your\n+LD_LIBRARY_PATH), and relies on some environment variables.\n+\n+* ``HADOOP_HOME``: the root of your installed Hadoop distribution. Often has\n+  `lib/native/libhdfs.so`.\n+\n+* ``JAVA_HOME``: the location of your Java SDK installation.\n+\n+* ``ARROW_LIBHDFS_DIR`` (optional): explicit location of ``libhdfs.so`` if it is\n+  installed somewhere other than ``$HADOOP_HOME/lib/native``.\n+\n+* ``CLASSPATH``: must contain the Hadoop jars. You can set these using:\n+\n+  .. code-block:: shell\n+\n+      export CLASSPATH=`$HADOOP_HOME/bin/hdfs classpath --glob`\n+\n+  If ``CLASSPATH`` is not set, then it will be set automatically if the\n+  ``hadoop`` executable is in your system path, or if ``HADOOP_HOME`` is set.\n+\n+\n+Using fsspec-compatible filesystems\n+-----------------------------------\n+\n+The filesystems mentioned above are natively supported by Arrow C++ / PyArrow.\n+The Python ecosystem, however, also has several filesystem packages. Those\n+packages following the\n+`fsspec <https://filesystem-spec.readthedocs.io/en/latest/>`__ interface can be\n\nReview comment:\n       The double underscore also works, and is called \"anonymous hyperlink\". IIRC, the above syntax is fine for one-off inline links (if you would use the same \"fsspec\" text somewhere else in a hyperlink in the docs, then sphinx would warn about a duplicate target name if using a single underscore)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T08:11:43.561+0000",
                    "updated": "2020-09-01T08:11:43.561+0000",
                    "started": "2020-09-01T08:11:43.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477052",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r481251515\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -69,3 +135,66 @@ here is how you can read contents from a S3 bucket::\n    >>> f = s3.open_input_stream('my-test-bucket/Dir1/File2')\n    >>> f.readall()\n    b'some data'\n+\n+\n+Hadoop File System (HDFS)\n+-------------------------\n+\n+PyArrow comes with bindings to the Hadoop File System (based on C++ bindings\n+using ``libhdfs``, a JNI-based interface to the Java Hadoop client). You connect\n+using the `class`:HadoopFileSystem: constructor::\n+\n+.. code-block:: python\n+\n+   from pyarrow import fs\n+   hdfs = fs.HadoopFileSystem(host, port, user=user, kerb_ticket=ticket_cache_path)\n+\n+The ``libhdfs`` library is loaded **at runtime**\n+(rather than at link / library load time, since the library may not be in your\n+LD_LIBRARY_PATH), and relies on some environment variables.\n+\n+* ``HADOOP_HOME``: the root of your installed Hadoop distribution. Often has\n+  `lib/native/libhdfs.so`.\n+\n+* ``JAVA_HOME``: the location of your Java SDK installation.\n+\n+* ``ARROW_LIBHDFS_DIR`` (optional): explicit location of ``libhdfs.so`` if it is\n+  installed somewhere other than ``$HADOOP_HOME/lib/native``.\n+\n+* ``CLASSPATH``: must contain the Hadoop jars. You can set these using:\n+\n+  .. code-block:: shell\n+\n+      export CLASSPATH=`$HADOOP_HOME/bin/hdfs classpath --glob`\n+\n+  If ``CLASSPATH`` is not set, then it will be set automatically if the\n+  ``hadoop`` executable is in your system path, or if ``HADOOP_HOME`` is set.\n+\n+\n+Using fsspec-compatible filesystems\n+-----------------------------------\n+\n+The filesystems mentioned above are natively supported by Arrow C++ / PyArrow.\n+The Python ecosystem, however, also has several filesystem packages. Those\n+packages following the\n+`fsspec <https://filesystem-spec.readthedocs.io/en/latest/>`__ interface can be\n\nReview comment:\n       Ah, thank you, I've just learned something.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T15:58:02.044+0000",
                    "updated": "2020-09-01T15:58:02.044+0000",
                    "started": "2020-09-01T15:58:02.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477295",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r481253760\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,90 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example, the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI -> filesystem is inferred\n+   pq.read_table(\"s3://my-bucket\")\n\nReview comment:\n       I think the example may look strange, since I don't think a bucket can be a file... Perhaps \"s3://my-bucket/my-file\" or something?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T16:00:19.766+0000",
                    "updated": "2020-09-01T16:00:19.766+0000",
                    "started": "2020-09-01T16:00:19.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477297",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r481254797\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,90 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example, the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI -> filesystem is inferred\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   local = fs.LocalFileSystem()\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the contents of a directory,\n+use the :class:`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info('test.arrow')\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info('non_existent')\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n\nReview comment:\n       Probably doesn't return a list here?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T16:01:12.962+0000",
                    "updated": "2020-09-01T16:01:12.962+0000",
                    "started": "2020-09-01T16:01:12.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477298",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477300",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r481256449\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,87 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI\n+   pq.read_table(\"s3://my-bucket\")\n+   # using a path and filesystem\n+   s3 = fs.S3FileSystem(..)\n+   pq.read_table(\"my-bucket\", filesystem=s3)\n+\n+The filesystem interface further allows to open files for reading (input) or\n+writing (output) directly, which can be combined with functions that work with\n+file-like objects. For example::\n+\n+   with local.open_output_stream(\"test.arrow\") as file:\n+      with pa.RecordBatchFileWriter(file, table.schema) as writer:\n+         writer.write_table(table)\n+\n+\n+Listing files\n+~~~~~~~~~~~~~\n+\n+Inspecting the directories and files on a filesystem can be done with the\n+:meth:`FileSystem.get_file_info` method. To list the the contents of a\n+directory, use the :class`FileSelector` object to specify the selection::\n+\n+   >>> local.get_file_info(fs.FileSelector(\"dataset/\", recursive=True))\n+   [<FileInfo for 'dataset/part=B': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=B/data0.parquet': type=FileType.File, size=1564>,\n+    <FileInfo for 'dataset/part=A': type=FileType.Directory>,\n+    <FileInfo for 'dataset/part=A/data0.parquet': type=FileType.File, size=1564>]\n+\n+This returns a list of :class:`FileInfo` objects, containing information about\n+the type (file or directory), the size, the date last modified, etc.\n+\n+You can also get this information for a single explicit path (or list of\n+paths)::\n+\n+   >>> local.get_file_info(['test.arrow'])[0]\n+   <FileInfo for 'test.arrow': type=FileType.File, size=3250>\n+\n+   >>> local.get_file_info(['non_existent'])\n+   [<FileInfo for 'non_existent': type=FileType.NotFound>]\n \n-Example\n--------\n+S3\n+--\n \n-Assuming your S3 credentials are correctly configured (for example by setting\n-the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` environment variables),\n-here is how you can read contents from a S3 bucket::\n+The :class:`S3FileSystem` constructor has several options to configure the S3\n+connection. In addition, it will also read configured S3 credentials (for\n+example by setting the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``\n\nReview comment:\n       Perhaps add a `.. seealso::` with those links?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T16:02:58.891+0000",
                    "updated": "2020-09-01T16:02:58.891+0000",
                    "started": "2020-09-01T16:02:58.891+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477300",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r481256952\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -69,3 +138,66 @@ here is how you can read contents from a S3 bucket::\n    >>> f = s3.open_input_stream('my-test-bucket/Dir1/File2')\n    >>> f.readall()\n    b'some data'\n+\n+\n+Hadoop File System (HDFS)\n+-------------------------\n+\n+PyArrow comes with bindings to the Hadoop File System (based on C++ bindings\n+using ``libhdfs``, a JNI-based interface to the Java Hadoop client). You connect\n+using the :class:`HadoopFileSystem` constructor::\n+\n+.. code-block:: python\n+\n+   from pyarrow import fs\n+   hdfs = fs.HadoopFileSystem(host, port, user=user, kerb_ticket=ticket_cache_path)\n+\n+The ``libhdfs`` library is loaded **at runtime** (rather than at link / library\n+load time, since the library may not be in your LD_LIBRARY_PATH), and relies on\n+some environment variables.\n+\n+* ``HADOOP_HOME``: the root of your installed Hadoop distribution. Often has\n+  `lib/native/libhdfs.so`.\n+\n+* ``JAVA_HOME``: the location of your Java SDK installation.\n+\n+* ``ARROW_LIBHDFS_DIR`` (optional): explicit location of ``libhdfs.so`` if it is\n+  installed somewhere other than ``$HADOOP_HOME/lib/native``.\n+\n+* ``CLASSPATH``: must contain the Hadoop jars. You can set these using:\n+\n+  .. code-block:: shell\n+\n+      export CLASSPATH=`$HADOOP_HOME/bin/hdfs classpath --glob`\n+\n+  If ``CLASSPATH`` is not set, then it will be set automatically if the\n+  ``hadoop`` executable is in your system path, or if ``HADOOP_HOME`` is set.\n+\n+\n+Using fsspec-compatible filesystems\n+-----------------------------------\n+\n+The filesystems mentioned above are natively supported by Arrow C++ / PyArrow.\n+The Python ecosystem, however, also has several filesystem packages. Those\n+packages following the\n+`fsspec <https://filesystem-spec.readthedocs.io/en/latest/>`__ interface can be\n+used in PyArrow as well.\n+\n+Functions accepting a filesystem object will also accept an fsspec subclass.\n+For example::\n+\n+   # creating an ffspec-based filesystem object for Google Cloud Storage\n\nReview comment:\n       \"fsspec\" :-)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T16:03:32.145+0000",
                    "updated": "2020-09-01T16:03:32.145+0000",
                    "started": "2020-09-01T16:03:32.144+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477301",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#discussion_r481394184\n\n\n\n##########\nFile path: docs/source/python/filesystems.rst\n##########\n@@ -34,21 +34,90 @@ underlying storage, are automatically dereferenced.  Only basic\n :class:`metadata <FileInfo>` about file entries, such as the file size\n and modification time, is made available.\n \n-Types\n+The core interface is represented by the base class :class:`FileSystem`.\n+Concrete subclasses are available for various kinds of storage, such as local\n+filesystem access (:class:`LocalFileSystem`), HDFS (:class:`HadoopFileSystem`)\n+and Amazon S3-compatible storage (:class:`S3FileSystem`).\n+\n+\n+Usage\n -----\n \n-The core interface is represented by the base class :class:`FileSystem`.\n-Concrete subclasses are available for various kinds of storage:\n-:class:`local filesystem access <LocalFileSystem>`,\n-:class:`HDFS <HadoopFileSystem>` and\n-:class:`Amazon S3-compatible storage <S3FileSystem>`.\n+A FileSystem object can be created with one of the constuctors (and check the\n+respective constructor for its options)::\n+\n+   >>> from pyarrow import fs\n+   >>> local = fs.LocalFileSystem()\n+\n+or alternatively inferred from a URI::\n+\n+   >>> s3, path = fs.FileSystem.from_uri(\"s3://my-bucket\")\n+   >>> s3\n+   <pyarrow._s3fs.S3FileSystem at 0x7f6760cbf4f0>\n+   >>> path\n+   'my-bucket'\n+\n+\n+Reading and writing files\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+Several of the IO-related functions in PyArrow accept either a URI (and infer\n+the filesystem) or an explicit ``filesystem`` argument to specify the filesystem\n+to read or write from. For example, the :meth:`pyarrow.parquet.read_table`\n+function can be used in the following ways::\n+\n+   # using a URI -> filesystem is inferred\n+   pq.read_table(\"s3://my-bucket\")\n\nReview comment:\n       `read_table` also works for \"directories\" (and reads the full directory into a table), but indeed for the example reading a file is fine\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-01T19:54:25.900+0000",
                    "updated": "2020-09-01T19:54:25.900+0000",
                    "started": "2020-09-01T19:54:25.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477429",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-02T09:36:19.191+0000",
                    "updated": "2020-09-02T09:36:19.191+0000",
                    "started": "2020-09-02T09:36:19.191+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477730",
                    "issueId": "13324548"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/worklog/477731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8065:\nURL: https://github.com/apache/arrow/pull/8065#issuecomment-685503840\n\n\n   Thank you! This is a great improvement!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-02T09:36:52.403+0000",
                    "updated": "2020-09-02T09:36:52.403+0000",
                    "started": "2020-09-02T09:36:52.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "477731",
                    "issueId": "13324548"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@77f02e54[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a5ba984[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74ff4f90[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@73efdf02[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cba830a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@34f1868d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3afccc4c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@37e603de[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ffc64fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@37814e67[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b436a77[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6c3c7c32[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 02 09:36:08 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-02T09:36:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9858/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-08-25T20:28:12.000+0000",
        "updated": "2020-09-02T11:42:37.000+0000",
        "timeoriginalestimate": null,
        "description": "https://arrow.apache.org/docs/python/filesystems.html is pretty thin\r\n\r\nhttps://arrow.apache.org/docs/python/api/filesystems.html doesn't mention S3\r\n\r\nand in general there are some tricks to getting FileSystemFromUri to work",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Python][Docs] Expand user guide for FileSystem",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/comment/17185701",
                    "id": "17185701",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "bq. https://arrow.apache.org/docs/python/api/filesystems.html doesn't mention S3\r\n\r\nThat's bizarre, because it _is_ included in the source of that page: https://github.com/apache/arrow/blame/master/docs/source/python/api/filesystems.rst\r\n\r\ncc [~kszucs] do you know if the docs get built with an installation with S3 enabled?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-08-27T08:15:55.434+0000",
                    "updated": "2020-08-27T08:17:14.924+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13324548/comment/17189111",
                    "id": "17189111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8065\n[https://github.com/apache/arrow/pull/8065]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-09-02T09:36:08.513+0000",
                    "updated": "2020-09-02T09:36:08.513+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0i348:",
        "customfield_12314139": null
    }
}