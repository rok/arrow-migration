{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13377255",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255",
    "key": "ARROW-12685",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616140",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616140",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13380326",
                    "key": "ARROW-12867",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13380326",
                    "fields": {
                        "summary": "[R] Bindings for abs()",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12685/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 29,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/594583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-838700289\n\n\n   https://issues.apache.org/jira/browse/ARROW-12685\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T15:38:13.345+0000",
                    "updated": "2021-05-11T15:38:13.345+0000",
                    "started": "2021-05-11T15:38:13.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594583",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/594618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-838763550\n\n\n   I named the compute function as `AbsoluteValue` and kernels as \"absolute value\" but this feels like too long a name. Convention across other libraries is \"abs\" but Arrow's compute kernels tend to follow the longer format and \"absolute\" seems ambiguous. @bkietz please advise\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-11T16:12:33.775+0000",
                    "updated": "2021-05-11T16:12:33.775+0000",
                    "started": "2021-05-11T16:12:33.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "594618",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595013",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630683291\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -66,6 +66,50 @@ constexpr Unsigned to_unsigned(T signed_) {\n   return static_cast<Unsigned>(signed_);\n }\n \n+struct AbsoluteValue {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return (arg < static_cast<T>(0)) ? -arg : arg;\n\nReview comment:\n       Any reason don't use `std::fabs` directly?\r\n   std::fabs provides more optimized code: https://godbolt.org/z/nd38arvTe\r\n   std::fabs(-0.0) = 0.0, but `(x < 0) ? -x : x` outputs -0.0 if x = -0.0.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T02:33:32.489+0000",
                    "updated": "2021-05-12T02:33:32.489+0000",
                    "started": "2021-05-12T02:33:32.488+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595013",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630683291\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -66,6 +66,50 @@ constexpr Unsigned to_unsigned(T signed_) {\n   return static_cast<Unsigned>(signed_);\n }\n \n+struct AbsoluteValue {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return (arg < static_cast<T>(0)) ? -arg : arg;\n\nReview comment:\n       Any reason don't use `std::fabs` directly?\r\n   std::fabs provides more optimized code: https://godbolt.org/z/P84WbxvGP\r\n   std::fabs(-0.0) = 0.0, but `(x < 0) ? -x : x` outputs -0.0 if x = -0.0.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T02:35:28.938+0000",
                    "updated": "2021-05-12T02:35:28.938+0000",
                    "started": "2021-05-12T02:35:28.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595014",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630686322\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -66,6 +66,50 @@ constexpr Unsigned to_unsigned(T signed_) {\n   return static_cast<Unsigned>(signed_);\n }\n \n+struct AbsoluteValue {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return (arg < static_cast<T>(0)) ? -arg : arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_unsigned_integer<T> Call(KernelContext*, Arg arg, Status*) {\n+    return arg;\n+  }\n+\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_signed_integer<T> Call(KernelContext*, Arg arg, Status* st) {\n+    return (arg < static_cast<T>(0)) ? arrow::internal::SafeSignedNegate(arg) : arg;\n\nReview comment:\n       This produces exactly same code as `std::abs`: https://godbolt.org/z/exvd8nxWc\r\n   I suggest use `std::abs` directly and combine this function with floating point.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T02:44:00.728+0000",
                    "updated": "2021-05-12T02:44:00.728+0000",
                    "started": "2021-05-12T02:44:00.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595017",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630690033\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1057,5 +1058,109 @@ TYPED_TEST(TestUnaryArithmeticFloating, Negate) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticSigned, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::min();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty array\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Scalar/arrays with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, \"[1, null, -10]\", \"[1, null, 10]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Scalar/arrays with zeros\n+    this->AssertUnaryOp(AbsoluteValue, \"[0, -0]\", \"[0, 0]\");\n+    this->AssertUnaryOp(AbsoluteValue, -0, 0);\n+    this->AssertUnaryOp(AbsoluteValue, 0, 0);\n+    // Ordinary scalar/arrays (positive inputs)\n+    this->AssertUnaryOp(AbsoluteValue, \"[1, 10, 127]\", \"[1, 10, 127]\");\n+    this->AssertUnaryOp(AbsoluteValue, 1, 1);\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeScalar(1), this->MakeScalar(1));\n+    // Ordinary scalar/arrays (negative inputs)\n+    this->AssertUnaryOp(AbsoluteValue, \"[-1, -10, -127]\", \"[1, 10, 127]\");\n+    this->AssertUnaryOp(AbsoluteValue, -1, 1);\n+    this->AssertUnaryOp(AbsoluteValue, MakeArray(-1), \"[1]\");\n+    // Min/max\n+    this->AssertUnaryOp(AbsoluteValue, max, max);\n+    if (check_overflow) {\n+      this->AssertUnaryOpRaises(AbsoluteValue, MakeArray(min), \"overflow\");\n+    } else {\n+      this->AssertUnaryOp(AbsoluteValue, min, min);\n+    }\n+  }\n+\n+  // Overflow should not be checked on underlying value slots when output would be null\n+  this->SetOverflowCheck(true);\n+  auto arg = ArrayFromJSON(this->type_singleton(), MakeArray(-1, max, min));\n+  arg = TweakValidityBit(arg, 1, false);\n+  arg = TweakValidityBit(arg, 2, false);\n+  this->AssertUnaryOp(AbsoluteValue, arg, \"[1, null, null]\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::min();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty arrays\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Array with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Ordinary arrays\n+    this->AssertUnaryOp(AbsoluteValue, \"[0, 1, 10, 127]\", \"[0, 1, 10, 127]\");\n+    // Min/max\n+    this->AssertUnaryOp(AbsoluteValue, min, min);\n+    this->AssertUnaryOp(AbsoluteValue, max, max);\n+  }\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty array\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Scalar/arrays with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, \"[1.3, null, -10.80]\", \"[1.3, null, 10.80]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Scalars/arrays with zeros\n+    this->AssertUnaryOp(AbsoluteValue, \"[0.0, -0.0]\", \"[0.0, 0.0]\");\n+    this->AssertUnaryOp(AbsoluteValue, -0.0F, 0.0F);\n\nReview comment:\n       As `+0.0 == -0.0`, looks this test doesn't cover the purpose.\r\n   `std::signbit` does returns 1 for -0.0, and 0 or 0.0.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T02:56:35.160+0000",
                    "updated": "2021-05-12T02:56:35.160+0000",
                    "started": "2021-05-12T02:56:35.160+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595021",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630698902\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -66,6 +66,50 @@ constexpr Unsigned to_unsigned(T signed_) {\n   return static_cast<Unsigned>(signed_);\n }\n \n+struct AbsoluteValue {\n+  template <typename T, typename Arg>\n+  static constexpr enable_if_floating_point<T> Call(KernelContext*, Arg arg, Status*) {\n+    return (arg < static_cast<T>(0)) ? -arg : arg;\n\nReview comment:\n       I agree, thanks for the suggestion.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T03:27:32.754+0000",
                    "updated": "2021-05-12T03:27:32.754+0000",
                    "started": "2021-05-12T03:27:32.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595032",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630707124\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1057,5 +1058,109 @@ TYPED_TEST(TestUnaryArithmeticFloating, Negate) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticSigned, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::min();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty array\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Scalar/arrays with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, \"[1, null, -10]\", \"[1, null, 10]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Scalar/arrays with zeros\n+    this->AssertUnaryOp(AbsoluteValue, \"[0, -0]\", \"[0, 0]\");\n+    this->AssertUnaryOp(AbsoluteValue, -0, 0);\n+    this->AssertUnaryOp(AbsoluteValue, 0, 0);\n+    // Ordinary scalar/arrays (positive inputs)\n+    this->AssertUnaryOp(AbsoluteValue, \"[1, 10, 127]\", \"[1, 10, 127]\");\n+    this->AssertUnaryOp(AbsoluteValue, 1, 1);\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeScalar(1), this->MakeScalar(1));\n+    // Ordinary scalar/arrays (negative inputs)\n+    this->AssertUnaryOp(AbsoluteValue, \"[-1, -10, -127]\", \"[1, 10, 127]\");\n+    this->AssertUnaryOp(AbsoluteValue, -1, 1);\n+    this->AssertUnaryOp(AbsoluteValue, MakeArray(-1), \"[1]\");\n+    // Min/max\n+    this->AssertUnaryOp(AbsoluteValue, max, max);\n+    if (check_overflow) {\n+      this->AssertUnaryOpRaises(AbsoluteValue, MakeArray(min), \"overflow\");\n+    } else {\n+      this->AssertUnaryOp(AbsoluteValue, min, min);\n+    }\n+  }\n+\n+  // Overflow should not be checked on underlying value slots when output would be null\n+  this->SetOverflowCheck(true);\n+  auto arg = ArrayFromJSON(this->type_singleton(), MakeArray(-1, max, min));\n+  arg = TweakValidityBit(arg, 1, false);\n+  arg = TweakValidityBit(arg, 2, false);\n+  this->AssertUnaryOp(AbsoluteValue, arg, \"[1, null, null]\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::min();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty arrays\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Array with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Ordinary arrays\n+    this->AssertUnaryOp(AbsoluteValue, \"[0, 1, 10, 127]\", \"[0, 1, 10, 127]\");\n+    // Min/max\n+    this->AssertUnaryOp(AbsoluteValue, min, min);\n+    this->AssertUnaryOp(AbsoluteValue, max, max);\n+  }\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty array\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Scalar/arrays with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, \"[1.3, null, -10.80]\", \"[1.3, null, 10.80]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Scalars/arrays with zeros\n+    this->AssertUnaryOp(AbsoluteValue, \"[0.0, -0.0]\", \"[0.0, 0.0]\");\n+    this->AssertUnaryOp(AbsoluteValue, -0.0F, 0.0F);\n\nReview comment:\n       I will update the tests to check for the sign bit instead. I think the sign bit test for zero applies to all the basic arithmetic kernels (add, sub, mult, div, neg) because all of these operations can result in 0 and -0.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T03:57:34.604+0000",
                    "updated": "2021-05-12T03:57:34.604+0000",
                    "started": "2021-05-12T03:57:34.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595050",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r630827515\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -160,6 +160,18 @@ struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n \n /// @}\n \n+/// \\brief Get the absolute value of a value. Array values can be of arbitrary\n+/// length. If argument is null the result will be null.\n+///\n+/// \\param[in] arg the value transformed\n+/// \\param[in] options arithmetic options (overflow handling), optional\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the elementwise absolute value\n\nReview comment:\n       values?\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.cc\n##########\n@@ -47,6 +47,7 @@ namespace compute {\n     return CallFunction(func_name, {arg}, ctx);                                        \\\n   }\n \n+SCALAR_ARITHMETIC_UNARY(AbsoluteValue, \"absolute_value\", \"absolute_value_checked\")\n\nReview comment:\n       \"abs\" and \"abs_checked\" perhaps?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T08:30:29.051+0000",
                    "updated": "2021-05-12T08:30:29.051+0000",
                    "started": "2021-05-12T08:30:29.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595130",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r631425707\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -160,6 +160,18 @@ struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n \n /// @}\n \n+/// \\brief Get the absolute value of a value. Array values can be of arbitrary\n+/// length. If argument is null the result will be null.\n+///\n+/// \\param[in] arg the value transformed\n+/// \\param[in] options arithmetic options (overflow handling), optional\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the elementwise absolute value\n\nReview comment:\n       Not sure what you refer to as \"values\"? The documentation is written for a single input \"value\", except for the comment that refers to array inputs.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T21:52:25.866+0000",
                    "updated": "2021-05-12T21:52:25.866+0000",
                    "started": "2021-05-12T21:52:25.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595671",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r631428116\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_scalar.h\n##########\n@@ -160,6 +160,18 @@ struct ARROW_EXPORT ProjectOptions : public FunctionOptions {\n \n /// @}\n \n+/// \\brief Get the absolute value of a value. Array values can be of arbitrary\n+/// length. If argument is null the result will be null.\n+///\n+/// \\param[in] arg the value transformed\n+/// \\param[in] options arithmetic options (overflow handling), optional\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return the elementwise absolute value\n\nReview comment:\n       Hmm, you're right, the other docstrings are written this way.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T21:57:26.546+0000",
                    "updated": "2021-05-12T21:57:26.546+0000",
                    "started": "2021-05-12T21:57:26.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595672",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r631452874\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc\n##########\n@@ -1057,5 +1058,109 @@ TYPED_TEST(TestUnaryArithmeticFloating, Negate) {\n   }\n }\n \n+TYPED_TEST(TestUnaryArithmeticSigned, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::min();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty array\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Scalar/arrays with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, \"[1, null, -10]\", \"[1, null, 10]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Scalar/arrays with zeros\n+    this->AssertUnaryOp(AbsoluteValue, \"[0, -0]\", \"[0, 0]\");\n+    this->AssertUnaryOp(AbsoluteValue, -0, 0);\n+    this->AssertUnaryOp(AbsoluteValue, 0, 0);\n+    // Ordinary scalar/arrays (positive inputs)\n+    this->AssertUnaryOp(AbsoluteValue, \"[1, 10, 127]\", \"[1, 10, 127]\");\n+    this->AssertUnaryOp(AbsoluteValue, 1, 1);\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeScalar(1), this->MakeScalar(1));\n+    // Ordinary scalar/arrays (negative inputs)\n+    this->AssertUnaryOp(AbsoluteValue, \"[-1, -10, -127]\", \"[1, 10, 127]\");\n+    this->AssertUnaryOp(AbsoluteValue, -1, 1);\n+    this->AssertUnaryOp(AbsoluteValue, MakeArray(-1), \"[1]\");\n+    // Min/max\n+    this->AssertUnaryOp(AbsoluteValue, max, max);\n+    if (check_overflow) {\n+      this->AssertUnaryOpRaises(AbsoluteValue, MakeArray(min), \"overflow\");\n+    } else {\n+      this->AssertUnaryOp(AbsoluteValue, min, min);\n+    }\n+  }\n+\n+  // Overflow should not be checked on underlying value slots when output would be null\n+  this->SetOverflowCheck(true);\n+  auto arg = ArrayFromJSON(this->type_singleton(), MakeArray(-1, max, min));\n+  arg = TweakValidityBit(arg, 1, false);\n+  arg = TweakValidityBit(arg, 2, false);\n+  this->AssertUnaryOp(AbsoluteValue, arg, \"[1, null, null]\");\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticUnsigned, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::min();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty arrays\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Array with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Ordinary arrays\n+    this->AssertUnaryOp(AbsoluteValue, \"[0, 1, 10, 127]\", \"[0, 1, 10, 127]\");\n+    // Min/max\n+    this->AssertUnaryOp(AbsoluteValue, min, min);\n+    this->AssertUnaryOp(AbsoluteValue, max, max);\n+  }\n+}\n+\n+TYPED_TEST(TestUnaryArithmeticFloating, AbsoluteValue) {\n+  using CType = typename TestFixture::CType;\n+\n+  auto min = std::numeric_limits<CType>::lowest();\n+  auto max = std::numeric_limits<CType>::max();\n+\n+  for (auto check_overflow : {false, true}) {\n+    this->SetOverflowCheck(check_overflow);\n+    // Empty array\n+    this->AssertUnaryOp(AbsoluteValue, \"[]\", \"[]\");\n+    // Scalar/arrays with nulls\n+    this->AssertUnaryOp(AbsoluteValue, \"[null]\", \"[null]\");\n+    this->AssertUnaryOp(AbsoluteValue, \"[1.3, null, -10.80]\", \"[1.3, null, 10.80]\");\n+    this->AssertUnaryOp(AbsoluteValue, this->MakeNullScalar(), this->MakeNullScalar());\n+    // Scalars/arrays with zeros\n+    this->AssertUnaryOp(AbsoluteValue, \"[0.0, -0.0]\", \"[0.0, 0.0]\");\n+    this->AssertUnaryOp(AbsoluteValue, -0.0F, 0.0F);\n\nReview comment:\n       Created [ARROW-12768](https://issues.apache.org/jira/browse/ARROW-12768) to add the sign bit test cases.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-12T22:58:05.722+0000",
                    "updated": "2021-05-12T22:58:05.722+0000",
                    "started": "2021-05-12T22:58:05.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595688",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r631509260\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -79,22 +79,20 @@ struct AbsoluteValue {\n \n   template <typename T, typename Arg>\n   static constexpr enable_if_signed_integer<T> Call(KernelContext*, Arg arg, Status* st) {\n-    return (arg < static_cast<T>(0)) ? arrow::internal::SafeSignedNegate(arg) : arg;\n+    return std::abs(arg);\n   }\n };\n \n struct AbsoluteValueChecked {\n   template <typename T, typename Arg>\n   static enable_if_signed_integer<T> Call(KernelContext*, Arg arg, Status* st) {\n     static_assert(std::is_same<T, Arg>::value, \"\");\n-    if (arg < static_cast<T>(0)) {\n-      T result = 0;\n-      if (ARROW_PREDICT_FALSE(NegateWithOverflow(arg, &result))) {\n-        *st = Status::Invalid(\"overflow\");\n-      }\n-      return result;\n+    T result = std::abs(arg);\n+    if (result < 0) {\n+      *st = Status::Invalid(\"overflow\");\n+      return 0;\n\nReview comment:\n       Returning 0 looks strange. What about just returning the negative result?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T01:45:45.319+0000",
                    "updated": "2021-05-13T01:45:45.319+0000",
                    "started": "2021-05-13T01:45:45.319+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595773",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#discussion_r631529736\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_arithmetic.cc\n##########\n@@ -79,22 +79,20 @@ struct AbsoluteValue {\n \n   template <typename T, typename Arg>\n   static constexpr enable_if_signed_integer<T> Call(KernelContext*, Arg arg, Status* st) {\n-    return (arg < static_cast<T>(0)) ? arrow::internal::SafeSignedNegate(arg) : arg;\n+    return std::abs(arg);\n   }\n };\n \n struct AbsoluteValueChecked {\n   template <typename T, typename Arg>\n   static enable_if_signed_integer<T> Call(KernelContext*, Arg arg, Status* st) {\n     static_assert(std::is_same<T, Arg>::value, \"\");\n-    if (arg < static_cast<T>(0)) {\n-      T result = 0;\n-      if (ARROW_PREDICT_FALSE(NegateWithOverflow(arg, &result))) {\n-        *st = Status::Invalid(\"overflow\");\n-      }\n-      return result;\n+    T result = std::abs(arg);\n+    if (result < 0) {\n+      *st = Status::Invalid(\"overflow\");\n+      return 0;\n\nReview comment:\n       Ok, I had noticed that other kernels returned 0 on error (e.g. divide, power) and thought it might be a convention. But I agree that the invalid value should be returned.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T02:58:31.508+0000",
                    "updated": "2021-05-13T02:58:31.508+0000",
                    "started": "2021-05-13T02:58:31.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595805",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-840258476\n\n\n   @cyb70289  I noticed that *clang* removes the check of `if (result < 0)` because it seems that during the analysis it has a rule that the result of `abs` is never negative, but this is not true if the input is `std::numeric_limits<T>::min()`. In other words, it does not considers the overflow case. See https://godbolt.org/z/7bsM4oTMG to observe this effect. I also tested the godbolt example using unknown values at compile-time and observe the same behavior. This behavior is observed across compilers. My conclusion is to follow the form of `abs_2()`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T03:10:02.533+0000",
                    "updated": "2021-05-13T03:10:02.533+0000",
                    "started": "2021-05-13T03:10:02.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595811",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-840258476\n\n\n   @cyb70289  I noticed that *clang* removes the check of `if (result < 0)` because it seems that during the analysis it has a rule that the result of `std::abs()` is never negative, but this is not true if the input is `std::numeric_limits<T>::min()`. In other words, it does not considers the overflow case, although the value returned by `std::abs()` is negative. See https://godbolt.org/z/7bsM4oTMG to observe this effect. I also tested the godbolt example using unknown values at compile-time and observe the same behavior. This behavior is observed across compilers. My conclusion is to follow the form of `abs_2()`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T03:11:16.241+0000",
                    "updated": "2021-05-13T03:11:16.241+0000",
                    "started": "2021-05-13T03:11:16.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595812",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-840258476\n\n\n   @cyb70289  I noticed that *clang* removes the check of `if (result < 0)` because it seems that during the analysis it has a rule that the result of `std::abs()` is never negative, but this is not true if the input is `std::numeric_limits<T>::min()`. In other words, it does not considers the overflow case, although the value returned by `std::abs()` is negative. See https://godbolt.org/z/7bsM4oTMG to observe this effect. I also tested the godbolt example using unknown values at compile-time and observe the same behavior. This behavior is observed across compilers. My conclusion is to follow the form of `abs_2()`, that is, `if (arg == std::numeric_limits<T>::min())`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T03:11:59.571+0000",
                    "updated": "2021-05-13T03:11:59.571+0000",
                    "started": "2021-05-13T03:11:59.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595813",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce edited a comment on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-840258476\n\n\n   @cyb70289  I noticed that *clang* removes the check of `if (result < 0)` because it seems that during the analysis it has a rule that the result of `std::abs()` is never negative, but this is not true if the input is `std::numeric_limits<T>::min()`. In other words, it does not considers the overflow case, although the value returned by `std::abs()` is negative and correct. See https://godbolt.org/z/7bsM4oTMG to observe this effect. I also tested the godbolt example using unknown values at compile-time and observe the same behavior. This behavior is observed across compilers. My conclusion is to follow the form of `abs_2()`, that is, `if (arg == std::numeric_limits<T>::min())`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T03:13:24.065+0000",
                    "updated": "2021-05-13T03:13:24.065+0000",
                    "started": "2021-05-13T03:13:24.065+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595814",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-840269487\n\n\n   Thanks @edponce for deep investigation.\r\n   \r\n   From std::abs() [document](https://en.cppreference.com/w/cpp/numeric/math/abs), it is *UB* if input is `numeic_limit::min()`. So compiler can do whatever optimization that doesn't violate the standard.\r\n   \r\n   `Computes the absolute value of an integer number. The behavior is undefined if the result cannot be represented by the return type. `\r\n   \r\n   For checked abs, you can check `arg == min()` before calling `std::abs()`.\r\n   For non-checked abs, thought compiler generated code is safe, I think it's better to go back to `return v < 0 ? (~(unsigned)v + 1) : v;` approach.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T03:39:02.241+0000",
                    "updated": "2021-05-13T03:39:02.241+0000",
                    "started": "2021-05-13T03:39:02.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595825",
                    "issueId": "13377255"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/worklog/595826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 edited a comment on pull request #10274:\nURL: https://github.com/apache/arrow/pull/10274#issuecomment-840269487\n\n\n   Thanks @edponce for deep investigation.\r\n   \r\n   From std::abs() [document](https://en.cppreference.com/w/cpp/numeric/math/abs), it is *UB* if input is `numeic_limit::min()`. So compiler can do whatever optimization that doesn't violate the standard.\r\n   \r\n   `Computes the absolute value of an integer number. The behavior is undefined if the result cannot be represented by the return type. `\r\n   \r\n   For checked abs, you can check `arg == min()` before calling `std::abs()`.\r\n   For non-checked abs, thought compiler generated code is safe (no UB), I think it's better to go back to `return v < 0 ? (~(unsigned)v + 1) : v;` approach. Though the assembly code is exactly the same, compiler may decide to change behaviour in the future.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-13T03:41:07.935+0000",
                    "updated": "2021-05-13T03:41:07.935+0000",
                    "started": "2021-05-13T03:41:07.935+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "595826",
                    "issueId": "13377255"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2172bfe9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46bf6c99[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e11833d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@6377e7c2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@490db630[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@64abf0b3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36f19f70[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6a64279b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4efcb0d1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@75e9efd5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f59e407[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4ca4a88[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 20 01:46:34 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-05-20T01:46:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12685/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-05-07T14:49:36.000+0000",
        "updated": "2021-05-25T12:07:57.000+0000",
        "timeoriginalestimate": null,
        "description": "Add support to calculate the absolute value of numerical inputs.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add unary absolute value kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13377255/comment/17348006",
                    "id": "17348006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 10274\n[https://github.com/apache/arrow/pull/10274]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai%231",
                        "name": "yibocai#1",
                        "key": "yibocai",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10453",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10453",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10453",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10453"
                        },
                        "displayName": "yibocai#1",
                        "active": false,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-05-20T01:46:34.128+0000",
                    "updated": "2021-05-20T01:46:34.128+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0qtts:",
        "customfield_12314139": null
    }
}