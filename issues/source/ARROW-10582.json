{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13340643",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643",
    "key": "ARROW-10582",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10582/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/526910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982\n\n\n   DRAFT\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T18:36:17.503+0000",
                    "updated": "2020-12-21T18:36:17.503+0000",
                    "started": "2020-12-21T18:36:17.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526910",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/526921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749136400\n\n\n   https://issues.apache.org/jira/browse/ARROW-10582\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T18:54:21.413+0000",
                    "updated": "2020-12-21T18:54:21.413+0000",
                    "started": "2020-12-21T18:54:21.413+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526921",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/526925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749155213\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=h1) Report\n   > Merging [#8982](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=desc) (a89bace) into [master](https://codecov.io/gh/apache/arrow/commit/4c48539c936e74aed266221d9fc76f377700216d?el=desc) (4c48539) will **decrease** coverage by `0.50%`.\n   > The diff coverage is `35.76%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8982/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8982      +/-   ##\n   ==========================================\n   - Coverage   83.09%   82.59%   -0.51%     \n   ==========================================\n     Files         200      201       +1     \n     Lines       49076    49711     +635     \n   ==========================================\n   + Hits        40782    41061     +279     \n   - Misses       8294     8650     +356     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow-flight/src/utils.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy1mbGlnaHQvc3JjL3V0aWxzLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/gen/SparseTensor.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9TcGFyc2VUZW5zb3IucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/gen/Tensor.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9UZW5zb3IucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/repartition.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3JlcGFydGl0aW9uLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/convert.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2NvbnZlcnQucnM=) | `91.90% <27.27%> (-1.11%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `85.71% <33.33%> (-1.47%)` | :arrow_down: |\n   | [rust/arrow/src/ipc/gen/File.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9GaWxlLnJz) | `40.94% <39.28%> (-2.20%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `90.62% <40.00%> (-0.44%)` | :arrow_down: |\n   | [rust/arrow/src/ipc/gen/Message.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9NZXNzYWdlLnJz) | `32.03% <42.10%> (+2.21%)` | :arrow_up: |\n   | [rust/arrow/src/ipc/reader.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL3JlYWRlci5ycw==) | `82.86% <50.00%> (-0.84%)` | :arrow_down: |\n   | ... and [4 more](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=footer). Last update [c751295...b03c055](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T19:28:07.988+0000",
                    "updated": "2020-12-21T19:28:07.988+0000",
                    "started": "2020-12-21T19:28:07.987+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526925",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/526939",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749155213\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=h1) Report\n   > Merging [#8982](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=desc) (c611c5a) into [master](https://codecov.io/gh/apache/arrow/commit/4c48539c936e74aed266221d9fc76f377700216d?el=desc) (4c48539) will **decrease** coverage by `0.51%`.\n   > The diff coverage is `35.13%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8982/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8982      +/-   ##\n   ==========================================\n   - Coverage   83.09%   82.58%   -0.52%     \n   ==========================================\n     Files         200      201       +1     \n     Lines       49076    49721     +645     \n   ==========================================\n   + Hits        40782    41061     +279     \n   - Misses       8294     8660     +366     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow-flight/src/utils.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy1mbGlnaHQvc3JjL3V0aWxzLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/gen/SparseTensor.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9TcGFyc2VUZW5zb3IucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/gen/Tensor.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9UZW5zb3IucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/repartition.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3JlcGFydGl0aW9uLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/convert.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2NvbnZlcnQucnM=) | `91.90% <27.27%> (-1.11%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `85.71% <33.33%> (-1.47%)` | :arrow_down: |\n   | [rust/arrow/src/ipc/gen/File.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9GaWxlLnJz) | `40.94% <39.28%> (-2.20%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `90.62% <40.00%> (-0.44%)` | :arrow_down: |\n   | [rust/arrow/src/ipc/gen/Message.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9NZXNzYWdlLnJz) | `32.03% <42.10%> (+2.21%)` | :arrow_up: |\n   | [rust/arrow/src/ipc/reader.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL3JlYWRlci5ycw==) | `82.86% <50.00%> (-0.84%)` | :arrow_down: |\n   | ... and [4 more](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=footer). Last update [c751295...0c3ce2c](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T20:09:31.029+0000",
                    "updated": "2020-12-21T20:09:31.029+0000",
                    "started": "2020-12-21T20:09:31.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526939",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/526944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749155213\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=h1) Report\n   > Merging [#8982](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=desc) (0c3ce2c) into [master](https://codecov.io/gh/apache/arrow/commit/4c48539c936e74aed266221d9fc76f377700216d?el=desc) (4c48539) will **decrease** coverage by `0.54%`.\n   > The diff coverage is `34.30%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8982/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8982      +/-   ##\n   ==========================================\n   - Coverage   83.09%   82.55%   -0.55%     \n   ==========================================\n     Files         200      201       +1     \n     Lines       49076    49735     +659     \n   ==========================================\n   + Hits        40782    41060     +278     \n   - Misses       8294     8675     +381     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/arrow-flight/src/utils.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy1mbGlnaHQvc3JjL3V0aWxzLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/gen/SparseTensor.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9TcGFyc2VUZW5zb3IucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/gen/Tensor.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9UZW5zb3IucnM=) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/repartition.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3JlcGFydGl0aW9uLnJz) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/arrow/src/ipc/convert.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2NvbnZlcnQucnM=) | `91.90% <27.27%> (-1.11%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `85.71% <33.33%> (-1.47%)` | :arrow_down: |\n   | [rust/arrow/src/ipc/gen/File.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9GaWxlLnJz) | `40.94% <39.28%> (-2.20%)` | :arrow_down: |\n   | [rust/parquet/src/arrow/schema.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9hcnJvdy9zY2hlbWEucnM=) | `90.62% <40.00%> (-0.44%)` | :arrow_down: |\n   | [rust/arrow/src/ipc/gen/Message.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL2dlbi9NZXNzYWdlLnJz) | `32.03% <42.10%> (+2.21%)` | :arrow_up: |\n   | [rust/arrow/src/ipc/reader.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvaXBjL3JlYWRlci5ycw==) | `82.86% <50.00%> (-0.84%)` | :arrow_down: |\n   | ... and [5 more](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=footer). Last update [c751295...0c3ce2c](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T20:24:31.407+0000",
                    "updated": "2020-12-21T20:24:31.407+0000",
                    "started": "2020-12-21T20:24:31.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526944",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547242606\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -107,6 +107,13 @@ pub async fn collect(plan: Arc<dyn ExecutionPlan>) -> Result<Vec<RecordBatch>> {\n /// Partitioning schemes supported by operators.\n #[derive(Debug, Clone)]\n pub enum Partitioning {\n+    /// Allocate batches using a round-robin algorithm\n+    RoundRobinBatch(usize),\n+    /// Allocate rows using a round-robin algorithm. This provides finer-grained partitioning\n+    /// than `RoundRobinBatch` but also has much more overhead.\n+    RoundRobinRow(usize),\n\nReview comment:\n       Not that you asked, but if I had to pick 2 of these three schemes to implement, I would pick `RoundRobinBatch` and `Hash` and leave `RoundRobinRow` until later \r\n   \r\n   The rationale being that I theorize `RoundRobinRow` usecase is much less common (e.g. maybe re-evening output of joins or filters, but I would expect most operators to respect the requested batch size if possible when creating their output)\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,196 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+///! The repartition operator maps N input partitions to M output partitions based on a\n+///! partitioning scheme.\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use futures::channel::mpsc::{self, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<ArrowResult<RecordBatch>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<ArrowResult<RecordBatch>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            let buffer_size = 64; // TODO: configurable?\n\nReview comment:\n       it seems to me that the biggest buffer we would want would be the total number of cores available for processing. Any larger and we are just wasting memory and cache size if the producer can make them faster than the consumer can consume them\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T12:15:23.917+0000",
                    "updated": "2020-12-22T12:15:23.917+0000",
                    "started": "2020-12-22T12:15:23.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527171",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527280",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547393470\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -107,6 +107,13 @@ pub async fn collect(plan: Arc<dyn ExecutionPlan>) -> Result<Vec<RecordBatch>> {\n /// Partitioning schemes supported by operators.\n #[derive(Debug, Clone)]\n pub enum Partitioning {\n+    /// Allocate batches using a round-robin algorithm\n+    RoundRobinBatch(usize),\n+    /// Allocate rows using a round-robin algorithm. This provides finer-grained partitioning\n+    /// than `RoundRobinBatch` but also has much more overhead.\n+    RoundRobinRow(usize),\n\nReview comment:\n       Thanks. That makes sense and I have removed `RoundRobinRow` now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T17:05:36.406+0000",
                    "updated": "2020-12-22T17:05:36.406+0000",
                    "started": "2020-12-22T17:05:36.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527280",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749663045\n\n\n   @alamb @jorgecarleitao I have not implemented a `poll_next` method before and am struggling a bit with this. I have not given up yet, but if you happen to have time today, maybe you give me some advice.\r\n   \r\n   I have a `Receiver` already (from async-channel) which is also supposed to implement `Stream` so I thought it would be trivial to connect these together but it is not. I am very likely missing something obvious here though.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T17:07:25.119+0000",
                    "updated": "2020-12-22T17:07:25.119+0000",
                    "started": "2020-12-22T17:07:25.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527281",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749665545\n\n\n   @alamb @jorgecarleitao never mind ... switching to crossbeam did the trick\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T17:11:40.312+0000",
                    "updated": "2020-12-22T17:11:40.312+0000",
                    "started": "2020-12-22T17:11:40.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527286",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547447512\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,196 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+///! The repartition operator maps N input partitions to M output partitions based on a\n+///! partitioning scheme.\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use futures::channel::mpsc::{self, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<ArrowResult<RecordBatch>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<ArrowResult<RecordBatch>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            let buffer_size = 64; // TODO: configurable?\n\nReview comment:\n       So this turned out to be the really challenging part. Input partitions are sending to multiple output partitions, but those output partitions could be read in order and this results in deadlocks if the buffer is too small. I switched to using unbounded channels for now to make this functional but I know this isn't a great solution. I think I need to sleep on this and have another look tomorrow now.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T18:52:37.728+0000",
                    "updated": "2020-12-22T18:52:37.728+0000",
                    "started": "2020-12-22T18:52:37.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527313",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527315",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547451094\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,196 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+///! The repartition operator maps N input partitions to M output partitions based on a\n+///! partitioning scheme.\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use futures::channel::mpsc::{self, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<ArrowResult<RecordBatch>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<ArrowResult<RecordBatch>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            let buffer_size = 64; // TODO: configurable?\n\nReview comment:\n       I am adding unit tests now that will be easily modifiable to demonstrate this issue.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T19:00:33.667+0000",
                    "updated": "2020-12-22T19:00:33.667+0000",
                    "started": "2020-12-22T19:00:33.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527315",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749155213\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=h1) Report\n   > Merging [#8982](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=desc) (d845f92) into [master](https://codecov.io/gh/apache/arrow/commit/0519c4c0ecccd7d84ce44bd3a3e7bcb4fef8f4d6?el=desc) (0519c4c) will **decrease** coverage by `0.22%`.\n   > The diff coverage is `2.79%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8982/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8982      +/-   ##\n   ==========================================\n   - Coverage   82.64%   82.42%   -0.23%     \n   ==========================================\n     Files         200      201       +1     \n     Lines       49730    49870     +140     \n   ==========================================\n   + Hits        41098    41103       +5     \n   - Misses       8632     8767     +135     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/benchmarks/src/bin/tpch.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9iZW5jaG1hcmtzL3NyYy9iaW4vdHBjaC5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/dataframe\\_impl.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZGF0YWZyYW1lX2ltcGwucnM=) | `93.47% <0.00%> (-2.80%)` | :arrow_down: |\n   | [rust/datafusion/src/logical\\_plan/builder.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vYnVpbGRlci5ycw==) | `88.26% <0.00%> (-1.84%)` | :arrow_down: |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `58.42% <0.00%> (-0.67%)` | :arrow_down: |\n   | [...t/datafusion/src/optimizer/projection\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvcHJvamVjdGlvbl9wdXNoX2Rvd24ucnM=) | `97.70% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `58.71% <0.00%> (-3.05%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/planner.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BsYW5uZXIucnM=) | `77.46% <0.00%> (-3.00%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/repartition.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3JlcGFydGl0aW9uLnJz) | `2.59% <2.59%> (\u00f8)` | |\n   | [rust/datafusion/src/logical\\_plan/plan.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vcGxhbi5ycw==) | `82.73% <5.55%> (-5.39%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `87.80% <50.00%> (+0.62%)` | :arrow_up: |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=footer). Last update [0519c4c...d845f92](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T19:13:37.542+0000",
                    "updated": "2020-12-22T19:13:37.542+0000",
                    "started": "2020-12-22T19:13:37.542+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527320",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527329",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749738819\n\n\n   @alamb @jorgecarleitao @seddonm1 @Dandandan This is ready for review now\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T19:39:30.381+0000",
                    "updated": "2020-12-22T19:39:30.381+0000",
                    "started": "2020-12-22T19:39:30.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527329",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547476612\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/mod.rs\n##########\n@@ -107,6 +107,13 @@ pub async fn collect(plan: Arc<dyn ExecutionPlan>) -> Result<Vec<RecordBatch>> {\n /// Partitioning schemes supported by operators.\n #[derive(Debug, Clone)]\n pub enum Partitioning {\n+    /// Allocate batches using a round-robin algorithm\n+    RoundRobinBatch(usize),\n+    /// Allocate rows using a round-robin algorithm. This provides finer-grained partitioning\n+    /// than `RoundRobinBatch` but also has much more overhead.\n+    RoundRobinRow(usize),\n\nReview comment:\n       Agree. I was trying to implement the `RoundRobinRow` functionality independently and was going down a route similar to the `StructBuilder` vector of builders route: https://github.com/apache/arrow/blob/master/rust/arrow/src/array/builder.rs#L1600. Staying at the `RecordBatch` level is much more sensible.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T19:50:08.092+0000",
                    "updated": "2020-12-22T19:50:08.092+0000",
                    "started": "2020-12-22T19:50:08.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527334",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547483460\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,332 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The repartition operator maps N input partitions to M output partitions based on a\n+//! partitioning scheme.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<Option<ArrowResult<RecordBatch>>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<Option<ArrowResult<RecordBatch>>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        // lock mutexes\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+\n+        let num_input_partitions = self.input.output_partitioning().partition_count();\n+        let num_output_partition = self.partitioning.partition_count();\n\nReview comment:\n       Bikeshedding but `num_output_partition` -> `num_output_partitions` would help readability\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T20:05:35.334+0000",
                    "updated": "2020-12-22T20:05:35.334+0000",
                    "started": "2020-12-22T20:05:35.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527341",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#issuecomment-749155213\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=h1) Report\n   > Merging [#8982](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=desc) (23c0b6c) into [master](https://codecov.io/gh/apache/arrow/commit/0519c4c0ecccd7d84ce44bd3a3e7bcb4fef8f4d6?el=desc) (0519c4c) will **decrease** coverage by `0.11%`.\n   > The diff coverage is `51.54%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8982/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8982      +/-   ##\n   ==========================================\n   - Coverage   82.64%   82.52%   -0.12%     \n   ==========================================\n     Files         200      201       +1     \n     Lines       49730    49921     +191     \n   ==========================================\n   + Hits        41098    41199     +101     \n   - Misses       8632     8722      +90     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/benchmarks/src/bin/tpch.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9iZW5jaG1hcmtzL3NyYy9iaW4vdHBjaC5ycw==) | `0.00% <0.00%> (\u00f8)` | |\n   | [rust/datafusion/src/execution/dataframe\\_impl.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9leGVjdXRpb24vZGF0YWZyYW1lX2ltcGwucnM=) | `93.47% <0.00%> (-2.80%)` | :arrow_down: |\n   | [rust/datafusion/src/logical\\_plan/builder.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vYnVpbGRlci5ycw==) | `88.26% <0.00%> (-1.84%)` | :arrow_down: |\n   | [...datafusion/src/optimizer/hash\\_build\\_probe\\_order.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvaGFzaF9idWlsZF9wcm9iZV9vcmRlci5ycw==) | `58.42% <0.00%> (-0.67%)` | :arrow_down: |\n   | [...t/datafusion/src/optimizer/projection\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvcHJvamVjdGlvbl9wdXNoX2Rvd24ucnM=) | `97.70% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/optimizer/utils.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvdXRpbHMucnM=) | `58.71% <0.00%> (-3.05%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/planner.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BsYW5uZXIucnM=) | `77.46% <0.00%> (-3.00%)` | :arrow_down: |\n   | [rust/datafusion/src/logical\\_plan/plan.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vcGxhbi5ycw==) | `82.73% <5.55%> (-5.39%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `87.80% <50.00%> (+0.62%)` | :arrow_up: |\n   | [rust/datafusion/src/physical\\_plan/repartition.rs](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3JlcGFydGl0aW9uLnJz) | `76.56% <76.56%> (\u00f8)` | |\n   | ... and [2 more](https://codecov.io/gh/apache/arrow/pull/8982/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=footer). Last update [0519c4c...23c0b6c](https://codecov.io/gh/apache/arrow/pull/8982?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T20:10:48.171+0000",
                    "updated": "2020-12-22T20:10:48.171+0000",
                    "started": "2020-12-22T20:10:48.171+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527344",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547524983\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The repartition operator maps N input partitions to M output partitions based on a\n+//! partitioning scheme.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<Option<ArrowResult<RecordBatch>>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<Option<ArrowResult<RecordBatch>>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        // lock mutexes\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+\n+        let num_input_partitions = self.input.output_partitioning().partition_count();\n+        let num_output_partitions = self.partitioning.partition_count();\n+\n+        // if this is the first partition to be invoked then we need to set up initial state\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            for _ in 0..num_output_partitions {\n+                // Note that this operator uses unbounded channels to avoid deadlocks because\n+                // the output partitions can be read in any order and this could cause input\n+                // partitions to be blocked when sending data to output receivers that are not\n+                // being read yet. This may cause high memory usage if the next operator is\n+                // reading output partitions in order rather than concurrently. One workaround\n+                // for this would be to add spill-to-disk capabilities.\n+                let (sender, receiver) = unbounded::<Option<ArrowResult<RecordBatch>>>();\n+                tx.push(sender);\n+                rx.push(receiver);\n+            }\n+            // launch one async task per *input* partition\n+            for i in 0..num_input_partitions {\n+                let input = self.input.clone();\n+                let mut tx = tx.clone();\n+                let partitioning = self.partitioning.clone();\n+                let _: JoinHandle<Result<()>> = tokio::spawn(async move {\n+                    let mut stream = input.execute(i).await?;\n+                    let mut counter = 0;\n+                    while let Some(result) = stream.next().await {\n+                        match partitioning {\n+                            Partitioning::RoundRobinBatch(_) => {\n\nReview comment:\n       The hash partition is not yet implemented here?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T21:54:54.590+0000",
                    "updated": "2020-12-22T21:54:54.590+0000",
                    "started": "2020-12-22T21:54:54.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527384",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547527322\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The repartition operator maps N input partitions to M output partitions based on a\n+//! partitioning scheme.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<Option<ArrowResult<RecordBatch>>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<Option<ArrowResult<RecordBatch>>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        // lock mutexes\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+\n+        let num_input_partitions = self.input.output_partitioning().partition_count();\n+        let num_output_partitions = self.partitioning.partition_count();\n+\n+        // if this is the first partition to be invoked then we need to set up initial state\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            for _ in 0..num_output_partitions {\n+                // Note that this operator uses unbounded channels to avoid deadlocks because\n+                // the output partitions can be read in any order and this could cause input\n+                // partitions to be blocked when sending data to output receivers that are not\n+                // being read yet. This may cause high memory usage if the next operator is\n+                // reading output partitions in order rather than concurrently. One workaround\n+                // for this would be to add spill-to-disk capabilities.\n+                let (sender, receiver) = unbounded::<Option<ArrowResult<RecordBatch>>>();\n+                tx.push(sender);\n+                rx.push(receiver);\n+            }\n+            // launch one async task per *input* partition\n+            for i in 0..num_input_partitions {\n+                let input = self.input.clone();\n+                let mut tx = tx.clone();\n+                let partitioning = self.partitioning.clone();\n+                let _: JoinHandle<Result<()>> = tokio::spawn(async move {\n+                    let mut stream = input.execute(i).await?;\n+                    let mut counter = 0;\n+                    while let Some(result) = stream.next().await {\n+                        match partitioning {\n+                            Partitioning::RoundRobinBatch(_) => {\n\nReview comment:\n       No. I filed https://issues.apache.org/jira/browse/ARROW-11011 to implementing hash partitioning as a separate PR since it will be quite a lot of work.\r\n   \r\n   `RepartitionExec::try_new` returns a `DataFusionError::NotImplemented` error if you try and create it with the hash partitioning scheme.\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The repartition operator maps N input partitions to M output partitions based on a\n+//! partitioning scheme.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<Option<ArrowResult<RecordBatch>>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<Option<ArrowResult<RecordBatch>>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        // lock mutexes\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+\n+        let num_input_partitions = self.input.output_partitioning().partition_count();\n+        let num_output_partitions = self.partitioning.partition_count();\n+\n+        // if this is the first partition to be invoked then we need to set up initial state\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            for _ in 0..num_output_partitions {\n+                // Note that this operator uses unbounded channels to avoid deadlocks because\n+                // the output partitions can be read in any order and this could cause input\n+                // partitions to be blocked when sending data to output receivers that are not\n+                // being read yet. This may cause high memory usage if the next operator is\n+                // reading output partitions in order rather than concurrently. One workaround\n+                // for this would be to add spill-to-disk capabilities.\n+                let (sender, receiver) = unbounded::<Option<ArrowResult<RecordBatch>>>();\n+                tx.push(sender);\n+                rx.push(receiver);\n+            }\n+            // launch one async task per *input* partition\n+            for i in 0..num_input_partitions {\n+                let input = self.input.clone();\n+                let mut tx = tx.clone();\n+                let partitioning = self.partitioning.clone();\n+                let _: JoinHandle<Result<()>> = tokio::spawn(async move {\n+                    let mut stream = input.execute(i).await?;\n+                    let mut counter = 0;\n+                    while let Some(result) = stream.next().await {\n+                        match partitioning {\n+                            Partitioning::RoundRobinBatch(_) => {\n\nReview comment:\n       No. I filed https://issues.apache.org/jira/browse/ARROW-11011 to implement hash partitioning as a separate PR since it will be quite a lot of work.\r\n   \r\n   `RepartitionExec::try_new` returns a `DataFusionError::NotImplemented` error if you try and create it with the hash partitioning scheme.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T22:00:03.031+0000",
                    "updated": "2020-12-22T22:00:03.031+0000",
                    "started": "2020-12-22T22:00:03.030+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527388",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r547528995\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The repartition operator maps N input partitions to M output partitions based on a\n+//! partitioning scheme.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<Option<ArrowResult<RecordBatch>>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<Option<ArrowResult<RecordBatch>>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        // lock mutexes\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+\n+        let num_input_partitions = self.input.output_partitioning().partition_count();\n+        let num_output_partitions = self.partitioning.partition_count();\n+\n+        // if this is the first partition to be invoked then we need to set up initial state\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            for _ in 0..num_output_partitions {\n+                // Note that this operator uses unbounded channels to avoid deadlocks because\n+                // the output partitions can be read in any order and this could cause input\n+                // partitions to be blocked when sending data to output receivers that are not\n+                // being read yet. This may cause high memory usage if the next operator is\n+                // reading output partitions in order rather than concurrently. One workaround\n+                // for this would be to add spill-to-disk capabilities.\n+                let (sender, receiver) = unbounded::<Option<ArrowResult<RecordBatch>>>();\n+                tx.push(sender);\n+                rx.push(receiver);\n+            }\n+            // launch one async task per *input* partition\n+            for i in 0..num_input_partitions {\n+                let input = self.input.clone();\n+                let mut tx = tx.clone();\n+                let partitioning = self.partitioning.clone();\n+                let _: JoinHandle<Result<()>> = tokio::spawn(async move {\n+                    let mut stream = input.execute(i).await?;\n+                    let mut counter = 0;\n+                    while let Some(result) = stream.next().await {\n+                        match partitioning {\n+                            Partitioning::RoundRobinBatch(_) => {\n\nReview comment:\n       Ok \ud83d\udc4d makes sense!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T22:04:38.203+0000",
                    "updated": "2020-12-22T22:04:38.203+0000",
                    "started": "2020-12-22T22:04:38.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527392",
                    "issueId": "13340643"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/worklog/527976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8982:\nURL: https://github.com/apache/arrow/pull/8982#discussion_r548381582\n\n\n\n##########\nFile path: rust/datafusion/src/dataframe.rs\n##########\n@@ -172,6 +174,24 @@ pub trait DataFrame {\n         right_cols: &[&str],\n     ) -> Result<Arc<dyn DataFrame>>;\n \n+    /// Repartition a DataFrame based on a logical partitioning scheme.\n+    ///\n+    /// ```\n+    /// # use datafusion::prelude::*;\n+    /// # use datafusion::error::Result;\n+    /// # fn main() -> Result<()> {\n+    /// let mut ctx = ExecutionContext::new();\n+    /// let df = ctx.read_csv(\"tests/example.csv\", CsvReadOptions::new())?;\n+    /// let df1 = df.repartition(Partitioning::RoundRobinBatch(4))?;\n+    /// let df2 = df.repartition(Partitioning::Hash(vec![col(\"a\")], 4))?;\n\nReview comment:\n       I would not place it in an example since we do not support it yet.\n\n##########\nFile path: rust/datafusion/src/execution/dataframe_impl.rs\n##########\n@@ -111,6 +112,16 @@ impl DataFrame for DataFrameImpl {\n         Ok(Arc::new(DataFrameImpl::new(self.ctx_state.clone(), &plan)))\n     }\n \n+    fn repartition(\n+        &self,\n+        partitioning_scheme: Partitioning,\n\nReview comment:\n       nit: this introduces a new naming, `partitioning_scheme`.\r\n   \r\n   We have:\r\n   \r\n   * `partition`\r\n   * `partitioning`\r\n   * `partitioning_scheme`\r\n   * `repartition`\r\n   * `part`\r\n   \r\n   I do not know the common notation, but we could try to reduce the number of different names we use.\r\n   \r\n   In my (little) understanding:\r\n   * data is partitioned according to a `partition`\r\n   * partitioned data is divided in `part`s \r\n   * we can `repartition` it according to a new `partition`.\r\n   \r\n   In this understanding, I would replace `partitioning` and `partitioning_scheme` by `partition`.\r\n   \r\n   Even if this understanding is not correct, maybe we could reduce the number of different names?\n\n##########\nFile path: rust/datafusion/src/logical_plan/plan.rs\n##########\n@@ -198,6 +206,15 @@ impl LogicalPlan {\n     }\n }\n \n+/// Logical partitioning schemes supported by the repartition operator.\n+#[derive(Debug, Clone)]\n+pub enum Partitioning {\n+    /// Allocate batches using a round-robin algorithm\n+    RoundRobinBatch(usize),\n+    /// Allocate rows based on a hash of one of more expressions\n\nReview comment:\n       Document `usize`? (Number of parts?)\n\n##########\nFile path: rust/datafusion/src/physical_plan/repartition.rs\n##########\n@@ -0,0 +1,336 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! The repartition operator maps N input partitions to M output partitions based on a\n+//! partitioning scheme.\n+\n+use std::any::Any;\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll};\n+\n+use crate::error::{DataFusionError, Result};\n+use crate::physical_plan::{ExecutionPlan, Partitioning};\n+use arrow::datatypes::SchemaRef;\n+use arrow::error::Result as ArrowResult;\n+use arrow::record_batch::RecordBatch;\n+\n+use super::{RecordBatchStream, SendableRecordBatchStream};\n+use async_trait::async_trait;\n+\n+use crossbeam::channel::{unbounded, Receiver, Sender};\n+use futures::stream::Stream;\n+use futures::StreamExt;\n+use tokio::sync::Mutex;\n+use tokio::task::JoinHandle;\n+\n+/// partition. No guarantees are made about the order of the resulting partition.\n+#[derive(Debug)]\n+pub struct RepartitionExec {\n+    /// Input execution plan\n+    input: Arc<dyn ExecutionPlan>,\n+    /// Partitioning scheme to use\n+    partitioning: Partitioning,\n+    /// Receivers for output batches\n+    rx: Arc<Mutex<Vec<Receiver<Option<ArrowResult<RecordBatch>>>>>>,\n+    /// Senders for output batches\n+    tx: Arc<Mutex<Vec<Sender<Option<ArrowResult<RecordBatch>>>>>>,\n+}\n+\n+#[async_trait]\n+impl ExecutionPlan for RepartitionExec {\n+    /// Return a reference to Any that can be used for downcasting\n+    fn as_any(&self) -> &dyn Any {\n+        self\n+    }\n+\n+    /// Get the schema for this execution plan\n+    fn schema(&self) -> SchemaRef {\n+        self.input.schema()\n+    }\n+\n+    fn children(&self) -> Vec<Arc<dyn ExecutionPlan>> {\n+        vec![self.input.clone()]\n+    }\n+\n+    fn with_new_children(\n+        &self,\n+        children: Vec<Arc<dyn ExecutionPlan>>,\n+    ) -> Result<Arc<dyn ExecutionPlan>> {\n+        match children.len() {\n+            1 => Ok(Arc::new(RepartitionExec::try_new(\n+                children[0].clone(),\n+                self.partitioning.clone(),\n+            )?)),\n+            _ => Err(DataFusionError::Internal(\n+                \"RepartitionExec wrong number of children\".to_string(),\n+            )),\n+        }\n+    }\n+\n+    fn output_partitioning(&self) -> Partitioning {\n+        self.partitioning.clone()\n+    }\n+\n+    async fn execute(&self, partition: usize) -> Result<SendableRecordBatchStream> {\n+        // lock mutexes\n+        let mut tx = self.tx.lock().await;\n+        let mut rx = self.rx.lock().await;\n+\n+        let num_input_partitions = self.input.output_partitioning().partition_count();\n+        let num_output_partitions = self.partitioning.partition_count();\n+\n+        // if this is the first partition to be invoked then we need to set up initial state\n+        if tx.is_empty() {\n+            // create one channel per *output* partition\n+            for _ in 0..num_output_partitions {\n+                // Note that this operator uses unbounded channels to avoid deadlocks because\n+                // the output partitions can be read in any order and this could cause input\n+                // partitions to be blocked when sending data to output receivers that are not\n+                // being read yet. This may cause high memory usage if the next operator is\n+                // reading output partitions in order rather than concurrently. One workaround\n+                // for this would be to add spill-to-disk capabilities.\n+                let (sender, receiver) = unbounded::<Option<ArrowResult<RecordBatch>>>();\n+                tx.push(sender);\n+                rx.push(receiver);\n+            }\n+            // launch one async task per *input* partition\n+            for i in 0..num_input_partitions {\n+                let input = self.input.clone();\n+                let mut tx = tx.clone();\n+                let partitioning = self.partitioning.clone();\n+                let _: JoinHandle<Result<()>> = tokio::spawn(async move {\n+                    let mut stream = input.execute(i).await?;\n+                    let mut counter = 0;\n+                    while let Some(result) = stream.next().await {\n+                        match partitioning {\n+                            Partitioning::RoundRobinBatch(_) => {\n\nReview comment:\n       I have an old hash repartitioning code in a branch around from a previous try. Quite old by now, but I can definitely put it together for this (like I did for the join). I think we now actually have the framework in place to use it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-24T05:02:30.735+0000",
                    "updated": "2020-12-24T05:02:30.735+0000",
                    "started": "2020-12-24T05:02:30.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527976",
                    "issueId": "13340643"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4dd81bf3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cacd052[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d740421[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@37506d9d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47549fc8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@35c3d8a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e9464cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2a1cce06[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4955be52[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2b077a9f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1688c937[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5a28591e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 24 16:37:27 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-24T16:37:27.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10582/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-11-14T15:33:01.000+0000",
        "updated": "2020-12-24T16:37:34.000+0000",
        "timeoriginalestimate": null,
        "description": "The repartition operator should read batches from its input partitions and then map that data to its output partitions using a specific partitioning scheme.\r\n\r\nThe simplest and most efficient partition schema would be a \"round robin batch partitioner\". For each input batch, it would pick the next output partition to write to. This is a convenient way to change the number of partitions up or down with minimal overhead.\r\n\r\nAnother example of a partitioning scheme would be a hash partitioner, which computes the hash of the partition keys on each incoming row and then applies a modulus to determine which output partition to write to.\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement \"repartition\" operator",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340643/comment/17254593",
                    "id": "17254593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8982\n[https://github.com/apache/arrow/pull/8982]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-24T16:37:27.203+0000",
                    "updated": "2020-12-24T16:37:27.203+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0klds:",
        "customfield_12314139": null
    }
}