{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13474938",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938",
    "key": "ARROW-17297",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17297/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#issuecomment-1204386640\n\n   https://issues.apache.org/jira/browse/ARROW-17297\n\n\n",
                    "created": "2022-08-03T19:30:00.242+0000",
                    "updated": "2022-08-03T19:30:00.242+0000",
                    "started": "2022-08-03T19:30:00.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797745",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#issuecomment-1204386668\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-03T19:30:01.733+0000",
                    "updated": "2022-08-03T19:30:01.733+0000",
                    "started": "2022-08-03T19:30:01.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797746",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937130417\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -33,7 +33,10 @@ Python communication using the C Data Interface.\n Java to C++\n -----------\n \n-Example: Share an Int64 array from C++ to Java:\n+Share an Int64 array from C++ to Java\n+=====================================\n\nReview Comment:\n   Updated\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n\nReview Comment:\n   Deleted\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-03T20:55:26.612+0000",
                    "updated": "2022-08-03T20:55:26.612+0000",
                    "started": "2022-08-03T20:55:26.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797772",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937130664\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n\nReview Comment:\n   Added\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-03T20:55:41.384+0000",
                    "updated": "2022-08-03T20:55:41.384+0000",
                    "started": "2022-08-03T20:55:41.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797773",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937132048\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv* env;\n+        JavaVM* jvm;\n+        env = create_vm(&jvm);\n+        if (env == NULL) return 1;\n+        jclass  javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env ->FindClass(\"ToBeCalledByCpp\");\n\nReview Comment:\n   Reformat code added\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv* env;\n+        JavaVM* jvm;\n+        env = create_vm(&jvm);\n+        if (env == NULL) return 1;\n+        jclass  javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env ->FindClass(\"ToBeCalledByCpp\");\n+        if ( javaClassToBeCalledByCpp != NULL ) {\n+            jmethodID fillfieldvectorfromjavatocpp = NULL;\n+            fillfieldvectorfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillfieldvectorfromjavatocpp\", \"(JJ)V\");\n+            if ( fillfieldvectorfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for Arrays >>>>>\\n\");\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-03T20:57:31.509+0000",
                    "updated": "2022-08-03T20:57:31.509+0000",
                    "started": "2022-08-03T20:57:31.509+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797775",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937132260\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv* env;\n+        JavaVM* jvm;\n+        env = create_vm(&jvm);\n+        if (env == NULL) return 1;\n+        jclass  javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env ->FindClass(\"ToBeCalledByCpp\");\n+        if ( javaClassToBeCalledByCpp != NULL ) {\n+            jmethodID fillfieldvectorfromjavatocpp = NULL;\n+            fillfieldvectorfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillfieldvectorfromjavatocpp\", \"(JJ)V\");\n+            if ( fillfieldvectorfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for Arrays >>>>>\\n\");\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillfieldvectorfromjavatocpp, reinterpret_cast<uintptr_t>(&arrowSchema), reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                auto int32_array = std::static_pointer_cast<arrow::Int32Array>(array);\n+                const int32_t* data = int32_array->raw_values();\n+                for (int j = 0; j < int32_array->length(); j++){\n+                    printf(\"[C++ - side]: Data ImportArray - array[%d] = %d\\n\", j, data[j]);\n+                }\n+            } else {\n+                printf(\"Problem to read method fillfieldvectorfromjavatocpp\\n\");\n+            }\n+            jmethodID fillvectorschemarootfromjavatocpp = NULL;\n+            fillvectorschemarootfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillvectorschemarootfromjavatocpp\", \"(JJ)V\");\n+            if ( fillvectorschemarootfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\");\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillvectorschemarootfromjavatocpp, static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)), static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+                for (std::shared_ptr<arrow::Array> array : recordBatch->columns()) {\n+                    auto int32_array = std::static_pointer_cast<arrow::Int32Array>(array);\n+                    const int32_t* data = int32_array->raw_values();\n+                    for (int j = 0; j < int32_array->length(); j++){\n+                        printf(\"[C++ - side]: Data ImportArray - array[%d] = %d\\n\", j, data[j]);\n+                    }\n+                }\n+            } else {\n+                printf(\"Problem to read method fillvectorschemarootfromjavatocpp\\n\");\n+            }\n+        } else {\n+            printf(\"Problem to read class ToBeCalledByCpp\\n\");\n+        }\n+        jvm ->DestroyJavaVM();\n+        return 0;\n+    }\n+\n+CMakeLists.txt definition file:\n+\n+.. code-block:: xml\n+\n+    cmake_minimum_required(VERSION 3.19)\n+    project(firstarrowcpp)\n\nReview Comment:\n   Updated\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv* env;\n+        JavaVM* jvm;\n+        env = create_vm(&jvm);\n+        if (env == NULL) return 1;\n+        jclass  javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env ->FindClass(\"ToBeCalledByCpp\");\n+        if ( javaClassToBeCalledByCpp != NULL ) {\n+            jmethodID fillfieldvectorfromjavatocpp = NULL;\n+            fillfieldvectorfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillfieldvectorfromjavatocpp\", \"(JJ)V\");\n+            if ( fillfieldvectorfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for Arrays >>>>>\\n\");\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillfieldvectorfromjavatocpp, reinterpret_cast<uintptr_t>(&arrowSchema), reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                auto int32_array = std::static_pointer_cast<arrow::Int32Array>(array);\n+                const int32_t* data = int32_array->raw_values();\n+                for (int j = 0; j < int32_array->length(); j++){\n+                    printf(\"[C++ - side]: Data ImportArray - array[%d] = %d\\n\", j, data[j]);\n+                }\n+            } else {\n+                printf(\"Problem to read method fillfieldvectorfromjavatocpp\\n\");\n\nReview Comment:\n   Added\n\n\n\n",
                    "created": "2022-08-03T20:57:46.580+0000",
                    "updated": "2022-08-03T20:57:46.580+0000",
                    "started": "2022-08-03T20:57:46.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797776",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937132510\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv* env;\n+        JavaVM* jvm;\n+        env = create_vm(&jvm);\n+        if (env == NULL) return 1;\n+        jclass  javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env ->FindClass(\"ToBeCalledByCpp\");\n+        if ( javaClassToBeCalledByCpp != NULL ) {\n+            jmethodID fillfieldvectorfromjavatocpp = NULL;\n+            fillfieldvectorfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillfieldvectorfromjavatocpp\", \"(JJ)V\");\n+            if ( fillfieldvectorfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for Arrays >>>>>\\n\");\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillfieldvectorfromjavatocpp, reinterpret_cast<uintptr_t>(&arrowSchema), reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                auto int32_array = std::static_pointer_cast<arrow::Int32Array>(array);\n+                const int32_t* data = int32_array->raw_values();\n+                for (int j = 0; j < int32_array->length(); j++){\n+                    printf(\"[C++ - side]: Data ImportArray - array[%d] = %d\\n\", j, data[j]);\n+                }\n+            } else {\n+                printf(\"Problem to read method fillfieldvectorfromjavatocpp\\n\");\n+            }\n+            jmethodID fillvectorschemarootfromjavatocpp = NULL;\n+            fillvectorschemarootfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillvectorschemarootfromjavatocpp\", \"(JJ)V\");\n+            if ( fillvectorschemarootfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\");\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillvectorschemarootfromjavatocpp, static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)), static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n\nReview Comment:\n   Changed\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +223,259 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+=====================================\n+\n+Example: ``Share an Int32 array from Java to C++``:\n+\n+**Java Side**\n+\n+For this example, we will export a Java jar with all dependencies needed to\n+be readable by C++.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillfieldvectorfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java - side]: FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillvectorschemarootfromjavatocpp(long schema_id, long array_id){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(array_id);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schema_id) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java - side] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+\n+        public static void main(String[] args) {\n+            populateFieldVectorToExport();\n+            populateVectorSchemaRootToExport();\n+        }\n+    }\n+\n+Compile our Java code to generate our jar with all dependencies needed for.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar cpptojava.jar\n+    $ cp cpptojava.jar <c++_project_path>\n+\n+**C++ Side**\n+\n+This process fetch Java JVM references to call methods needed for, via the C Data Interface:\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv* create_vm(JavaVM ** jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void**) &env, &vm_args);\n+        if (status < 0) printf(\"\\n<<<<< Unable to Launch JVM >>>>>\\n\");\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv* env;\n+        JavaVM* jvm;\n+        env = create_vm(&jvm);\n+        if (env == NULL) return 1;\n+        jclass  javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env ->FindClass(\"ToBeCalledByCpp\");\n+        if ( javaClassToBeCalledByCpp != NULL ) {\n+            jmethodID fillfieldvectorfromjavatocpp = NULL;\n+            fillfieldvectorfromjavatocpp = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillfieldvectorfromjavatocpp\", \"(JJ)V\");\n+            if ( fillfieldvectorfromjavatocpp != NULL ){\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                printf(\"\\n<<<<< C++ to Java for Arrays >>>>>\\n\");\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillfieldvectorfromjavatocpp, reinterpret_cast<uintptr_t>(&arrowSchema), reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-03T20:58:11.594+0000",
                    "updated": "2022-08-03T20:58:11.594+0000",
                    "started": "2022-08-03T20:58:11.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797777",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/797786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937149586\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n\nReview Comment:\n   nit, but everything is indented one space too many here\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n\nReview Comment:\n   Requires `#include <cstdlib>`\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n\nReview Comment:\n   I would wrap lines to be a little shorter here if possible to make sure it's readable in Sphinx\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n\nReview Comment:\n   Please update the other uses of NULL to be nullptr\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                          reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVector\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+            jmethodID fillVectorSchemaRoot = NULL;\n+            fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVectorSchemaRoot\", \"(JJ)V\");\n+            if (fillVectorSchemaRoot != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+                std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVectorSchemaRoot\\n\" << std::endl;\n\nReview Comment:\n   ```suggestion\r\n                   std::cout << \"Could not find fillVectorSchemaRoot method\\n\" << std::endl;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                          reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVector\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+            jmethodID fillVectorSchemaRoot = NULL;\n+            fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVectorSchemaRoot\", \"(JJ)V\");\n+            if (fillVectorSchemaRoot != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+                std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVectorSchemaRoot\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+        } else {\n+            std::cout << \"Problem to read class ToBeCalledByCpp\\n\" << std::endl;\n\nReview Comment:\n   ```suggestion\r\n               std::cout << \"Could not find ToBeCalledByCpp class\\n\" << std::endl;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n\nReview Comment:\n   use EXIT_FAILURE here too as well\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                          reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVector\\n\" << std::endl;\n\nReview Comment:\n   ```suggestion\r\n                   std::cout << \"Could not find fillVector method\\n\" << std::endl;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n\nReview Comment:\n   Though, why separate the declaration and assignment? Just do it in one line\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                          reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVector\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+            jmethodID fillVectorSchemaRoot = NULL;\n+            fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVectorSchemaRoot\", \"(JJ)V\");\n+            if (fillVectorSchemaRoot != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+                std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVectorSchemaRoot\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+        } else {\n+            std::cout << \"Problem to read class ToBeCalledByCpp\\n\" << std::endl;\n+            return EXIT_FAILURE;\n+        }\n+        jvm->DestroyJavaVM();\n+        return 0;\n+    }\n+\n+CMakeLists.txt definition file:\n+\n+.. code-block:: xml\n+\n+    cmake_minimum_required(VERSION 3.19)\n+    project(cdatacpptojava)\n+    find_package(JNI REQUIRED)\n+    find_package(Arrow REQUIRED)\n+    message(STATUS \"Arrow version: ${ARROW_VERSION}\")\n+    message(${ARROW_FULL_SO_VERSION})\n\nReview Comment:\n   This needs to be updated like the line above\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n\nReview Comment:\n   that's actually true of all the code blocks\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                          reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVector\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+            jmethodID fillVectorSchemaRoot = NULL;\n+            fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVectorSchemaRoot\", \"(JJ)V\");\n+            if (fillVectorSchemaRoot != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+                std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVectorSchemaRoot\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+        } else {\n+            std::cout << \"Problem to read class ToBeCalledByCpp\\n\" << std::endl;\n+            return EXIT_FAILURE;\n+        }\n+        jvm->DestroyJavaVM();\n+        return 0;\n\nReview Comment:\n   ```suggestion\r\n           return EXIT_SUCCESS;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n\nReview Comment:\n   Actually I suppose the `abort` isn't necessary, maybe just explicitly return `nullptr` and it'll exit in main()\n\n\n\n",
                    "created": "2022-08-03T21:27:35.888+0000",
                    "updated": "2022-08-03T21:27:35.888+0000",
                    "started": "2022-08-03T21:27:35.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "797786",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798005",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937770470\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n\nReview Comment:\n   Updated\n\n\n\n",
                    "created": "2022-08-04T13:18:32.515+0000",
                    "updated": "2022-08-04T13:18:32.515+0000",
                    "started": "2022-08-04T13:18:32.515+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798005",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937770894\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n\nReview Comment:\n   Added\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-04T13:18:52.545+0000",
                    "updated": "2022-08-04T13:18:52.545+0000",
                    "started": "2022-08-04T13:18:52.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798006",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937771213\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n\nReview Comment:\n   Updated\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n+    import org.apache.arrow.c.ArrowSchema;\n+    import org.apache.arrow.c.Data;\n+    import org.apache.arrow.memory.BufferAllocator;\n+    import org.apache.arrow.memory.RootAllocator;\n+    import org.apache.arrow.vector.FieldVector;\n+    import org.apache.arrow.vector.IntVector;\n+    import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+    import java.util.Arrays;\n+\n+    public class ToBeCalledByCpp {\n+        final static BufferAllocator allocator = new RootAllocator();\n+\n+        public static void fillVector(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static FieldVector populateFieldVectorToExport(){\n+            IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+            intVector.allocateNew(3);\n+            intVector.setSafe(0, 1);\n+            intVector.setSafe(1, 2);\n+            intVector.setSafe(2, 3);\n+            intVector.setValueCount(3);\n+            System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+            return intVector;\n+        }\n+\n+        public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+            try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                 ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+                Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+            }\n+        }\n+\n+        public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+            IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+            intVector.setSafe(0, 10);\n+            intVector.setSafe(1, 20);\n+            intVector.setSafe(2, 30);\n+            VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+            root.setRowCount(3);\n+            System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+            return root;\n+        }\n+    }\n+\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+    $ mvn clean install\n+    $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+    #include <iostream>\n+    #include <arrow/api.h>\n+    #include <arrow/c/bridge.h>\n+    #include <jni.h>\n+\n+    JNIEnv *CreateVM(JavaVM **jvm) {\n+        JNIEnv *env;\n+        JavaVMInitArgs vm_args;\n+        JavaVMOption options[2];\n+        options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+        options[1].optionString = \"-DXcheck:jni:pedantic\";\n+        vm_args.version = JNI_VERSION_1_8;\n+        vm_args.nOptions = 2;\n+        vm_args.options = options;\n+        int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+        if (status < 0) {\n+            std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+            std::abort();\n+        }\n+        return env;\n+    }\n+\n+    int main() {\n+        JNIEnv *env;\n+        JavaVM *jvm;\n+        env = CreateVM(&jvm);\n+        if (env == nullptr) return 1;\n+        jclass javaClassToBeCalledByCpp = NULL;\n+        javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+        if (javaClassToBeCalledByCpp != NULL) {\n+            jmethodID fillVector = NULL;\n+            fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVector\", \"(JJ)V\");\n+            if (fillVector != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector, reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                          reinterpret_cast<uintptr_t>(&arrowArray));\n+                auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+                std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVector\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+            jmethodID fillVectorSchemaRoot = NULL;\n+            fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp, \"fillVectorSchemaRoot\", \"(JJ)V\");\n+            if (fillVectorSchemaRoot != NULL) {\n+                struct ArrowSchema arrowSchema;\n+                struct ArrowArray arrowArray;\n+                std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+                env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                          static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+                auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+                std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+                std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+            } else {\n+                std::cout << \"Problem to read method fillVectorSchemaRoot\\n\" << std::endl;\n+                return EXIT_FAILURE;\n+            }\n+        } else {\n+            std::cout << \"Problem to read class ToBeCalledByCpp\\n\" << std::endl;\n+            return EXIT_FAILURE;\n+        }\n+        jvm->DestroyJavaVM();\n+        return 0;\n+    }\n+\n+CMakeLists.txt definition file:\n+\n+.. code-block:: xml\n+\n+    cmake_minimum_required(VERSION 3.19)\n+    project(cdatacpptojava)\n+    find_package(JNI REQUIRED)\n+    find_package(Arrow REQUIRED)\n+    message(STATUS \"Arrow version: ${ARROW_VERSION}\")\n+    message(${ARROW_FULL_SO_VERSION})\n\nReview Comment:\n   Message not needed, deleted\n\n\n\n",
                    "created": "2022-08-04T13:19:07.798+0000",
                    "updated": "2022-08-04T13:19:07.798+0000",
                    "started": "2022-08-04T13:19:07.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798007",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937771945\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -220,4 +221,252 @@ Let's create a Java class to test our bridge:\n \n     C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n \n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+        <modelVersion>4.0.0</modelVersion>\n+        <groupId>org.example</groupId>\n+        <artifactId>cpptojava</artifactId>\n+        <version>1.0-SNAPSHOT</version>\n+        <properties>\n+            <maven.compiler.source>11</maven.compiler.source>\n+            <maven.compiler.target>11</maven.compiler.target>\n+            <arrow.version>8.0.0</arrow.version>\n+        </properties>\n+        <repositories>\n+            <repository>\n+                <id>arrow-nightly</id>\n+                <url>https://nightlies.apache.org/arrow/java</url>\n+            </repository>\n+        </repositories>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-c-data</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.apache.arrow</groupId>\n+                <artifactId>arrow-memory-netty</artifactId>\n+                <version>${arrow.version}</version>\n+            </dependency>\n+        </dependencies>\n+        <build>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins</groupId>\n+                    <artifactId>maven-assembly-plugin</artifactId>\n+                    <executions>\n+                        <execution>\n+                            <phase>package</phase>\n+                            <goals>\n+                                <goal>single</goal>\n+                            </goals>\n+                            <configuration>\n+                                <archive>\n+                                    <manifest>\n+                                        <mainClass>\n+                                            ToBeCalledByCpp\n+                                        </mainClass>\n+                                    </manifest>\n+                                </archive>\n+                                <descriptorRefs>\n+                                    <descriptorRef>jar-with-dependencies</descriptorRef>\n+                                </descriptorRefs>\n+                            </configuration>\n+                        </execution>\n+                    </executions>\n+                </plugin>\n+            </plugins>\n+        </build>\n+    </project>\n+\n+.. code-block:: java\n+\n+    import org.apache.arrow.c.ArrowArray;\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-04T13:19:47.635+0000",
                    "updated": "2022-08-04T13:19:47.635+0000",
                    "started": "2022-08-04T13:19:47.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798008",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798059",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937896672\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n\nReview Comment:\n   Update to 9.0.0?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n\nReview Comment:\n   Might as well update to 9.0.0 now\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n\nReview Comment:\n   Don't we need the `static_cast<long>` above as well then?\r\n   \r\n   (Also, shouldn't it be `jlong`?)\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n\nReview Comment:\n   No need to use nightlies right?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n\nReview Comment:\n   Any reason to use Java 11 here?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n\nReview Comment:\n   Do we need the mainClass config?\n\n\n\n",
                    "created": "2022-08-04T14:58:54.009+0000",
                    "updated": "2022-08-04T14:58:54.009+0000",
                    "started": "2022-08-04T14:58:54.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798059",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937941224\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n\nReview Comment:\n   All of these kind of declaration work well (I don't know what of this should I use?)\r\n   \r\n   ```cpp\r\n           env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\r\n                                     static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\r\n                                     static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\r\n           env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\r\n                                     reinterpret_cast<uintptr_t>(&arrowSchema),\r\n                                     reinterpret_cast<uintptr_t>(&arrowArray));\r\n           env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\r\n                                     (long)(&arrowSchema),\r\n                                     (long)(&arrowArray));\r\n           env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\r\n                                     (jlong)(&arrowSchema),\r\n                                     (jlong)(&arrowArray));\r\n           env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\r\n                                     (uintptr_t)(&arrowSchema),\r\n                                     (uintptr_t)(&arrowArray));\r\n   ```\n\n\n\n",
                    "created": "2022-08-04T15:34:49.196+0000",
                    "updated": "2022-08-04T15:34:49.196+0000",
                    "started": "2022-08-04T15:34:49.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798084",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r937968063\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n\nReview Comment:\n   For readability, I woud separate Arrow imports, standard library imports and JNI imports:\r\n   ```suggestion\r\n      #include <iostream>\r\n      #include <jni.h>\r\n   \r\n      #include <arrow/api.h>\r\n      #include <arrow/c/bridge.h>\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n\nReview Comment:\n   Shouldn't you make this private?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n\nReview Comment:\n   private as well?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+               auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+               std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVectorSchemaRoot method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+       } else {\n+           std::cout << \"Could not find ToBeCalledByCpp class\\n\" << std::endl;\n+           return EXIT_FAILURE;\n+       }\n+       jvm->DestroyJavaVM();\n+       return EXIT_SUCCESS;\n+   }\n+\n+CMakeLists.txt definition file:\n+\n+.. code-block:: xml\n+\n+   cmake_minimum_required(VERSION 3.19)\n+   project(cdatacpptojava)\n+   find_package(JNI REQUIRED)\n+   find_package(Arrow REQUIRED)\n+   message(STATUS \"Arrow version: ${ARROW_VERSION}\")\n+   include_directories(${JNI_INCLUDE_DIRS})\n+   set(CMAKE_CXX_STANDARD 11)\n+   add_executable(${PROJECT_NAME} main.cpp)\n+   target_link_libraries(cdatacpptojava PRIVATE arrow_shared)\n+   target_link_libraries(cdatacpptojava PRIVATE ${JNI_LIBRARIES})\n+\n+**Result**\n \n .. code-block:: shell\n\nReview Comment:\n   This isn't shell code, and the highlighting would look funny.\r\n   ```suggestion\r\n   .. code-block:: text\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n\nReview Comment:\n   ```suggestion\r\n                  std::cerr << \"Could not find fillVector method\\n\" << std::endl;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n\nReview Comment:\n   Conventionally, errors are printed on cerr, not cout.\r\n   ```suggestion\r\n              std::cerr << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+               auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+               std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVectorSchemaRoot method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+       } else {\n+           std::cout << \"Could not find ToBeCalledByCpp class\\n\" << std::endl;\n+           return EXIT_FAILURE;\n+       }\n+       jvm->DestroyJavaVM();\n+       return EXIT_SUCCESS;\n+   }\n+\n+CMakeLists.txt definition file:\n+\n+.. code-block:: xml\n\nReview Comment:\n   ```suggestion\r\n   .. code-block:: cmake\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n\nReview Comment:\n   Can you add small docstring describing the two public methods?\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowArray)));\n+               auto resultImportVectorSchemaRoot = arrow::ImportRecordBatch(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::RecordBatch> recordBatch = resultImportVectorSchemaRoot.ValueOrDie();\n+               std::cout << \"[C++] RecordBatch: \" << recordBatch->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVectorSchemaRoot method\\n\" << std::endl;\n\nReview Comment:\n   ```suggestion\r\n                  std::cerr << \"Could not find fillVectorSchemaRoot method\\n\" << std::endl;\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n\nReview Comment:\n   To be the most compliant, I think it should be:\r\n   ```c++\r\n           env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\r\n                                     static_cast<jlong>(reinterpret_cast<uintptr_t>(&arrowSchema)),\r\n                                     static_cast<jlong>(reinterpret_cast<uintptr_t>(&arrowArray)));\r\n   ```\r\n   (note **jlong** not long)\n\n\n\n",
                    "created": "2022-08-04T16:09:01.333+0000",
                    "updated": "2022-08-04T16:09:01.333+0000",
                    "started": "2022-08-04T16:09:01.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798096",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798124",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r938080263\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n+           IntVector intVector = new IntVector(\"age-to-export\", allocator);\n+           intVector.setSafe(0, 10);\n+           intVector.setSafe(1, 20);\n+           intVector.setSafe(2, 30);\n+           VectorSchemaRoot root = new VectorSchemaRoot(Arrays.asList(intVector));\n+           root.setRowCount(3);\n+           System.out.println(\"[Java] VectorSchemaRoot: \\n\" + root.contentToTSVString());\n+           return root;\n+       }\n+   }\n+\n+Build the JAR and copy it to the C++ project.\n+\n+.. code-block:: shell\n+\n+   $ mvn clean install\n+   $ cp target/cpptojava-1.0-SNAPSHOT-jar-with-dependencies.jar <c++ project path>/cpptojava.jar\n+\n+**C++ Side**\n+\n+This application uses JNI to call Java code, but transfers data (zero-copy) via the C Data Interface instead.\n+\n+.. code-block:: cpp\n+\n+   #include <iostream>\n+   #include <arrow/api.h>\n+   #include <arrow/c/bridge.h>\n+   #include <jni.h>\n+\n+   JNIEnv *CreateVM(JavaVM **jvm) {\n+       JNIEnv *env;\n+       JavaVMInitArgs vm_args;\n+       JavaVMOption options[2];\n+       options[0].optionString = \"-Djava.class.path=cpptojava.jar\"; // java jar name\n+       options[1].optionString = \"-DXcheck:jni:pedantic\";\n+       vm_args.version = JNI_VERSION_1_8;\n+       vm_args.nOptions = 2;\n+       vm_args.options = options;\n+       int status = JNI_CreateJavaVM(jvm, (void **) &env, &vm_args);\n+       if (status < 0) {\n+           std::cout << \"\\n<<<<< Unable to Launch JVM >>>>>\\n\" << std::endl;\n+           return nullptr;\n+       }\n+       return env;\n+   }\n+\n+   int main() {\n+       JNIEnv *env;\n+       JavaVM *jvm;\n+       env = CreateVM(&jvm);\n+       if (env == nullptr) return EXIT_FAILURE;\n+       jclass javaClassToBeCalledByCpp = env->FindClass(\"ToBeCalledByCpp\");\n+       if (javaClassToBeCalledByCpp != nullptr) {\n+           jmethodID fillVector = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                         \"fillVector\",\n+                                                         \"(JJ)V\");\n+           if (fillVector != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for Arrays >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVector,\n+                                         reinterpret_cast<uintptr_t>(&arrowSchema),\n+                                         reinterpret_cast<uintptr_t>(&arrowArray));\n+               auto resultImportArray = arrow::ImportArray(&arrowArray, &arrowSchema);\n+               std::shared_ptr<arrow::Array> array = resultImportArray.ValueOrDie();\n+               std::cout << \"[C++] Array: \" << array->ToString() << std::endl;\n+           } else {\n+               std::cout << \"Could not find fillVector method\\n\" << std::endl;\n+               return EXIT_FAILURE;\n+           }\n+           jmethodID fillVectorSchemaRoot = env->GetStaticMethodID(javaClassToBeCalledByCpp,\n+                                                                   \"fillVectorSchemaRoot\",\n+                                                                   \"(JJ)V\");\n+           if (fillVectorSchemaRoot != nullptr) {\n+               struct ArrowSchema arrowSchema;\n+               struct ArrowArray arrowArray;\n+               std::cout << \"\\n<<<<< C++ to Java for RecordBatch >>>>>\\n\" << std::endl;\n+               env->CallStaticVoidMethod(javaClassToBeCalledByCpp, fillVectorSchemaRoot,\n+                                         static_cast<long>(reinterpret_cast<uintptr_t>(&arrowSchema)),\n\nReview Comment:\n   Thank you\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n\nReview Comment:\n   Deleted\n\n\n\n",
                    "created": "2022-08-04T17:42:34.098+0000",
                    "updated": "2022-08-04T17:42:34.098+0000",
                    "started": "2022-08-04T17:42:34.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798124",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r938080474\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n\nReview Comment:\n   Deleted\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n\nReview Comment:\n   Added\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-04T17:42:48.650+0000",
                    "updated": "2022-08-04T17:42:48.650+0000",
                    "started": "2022-08-04T17:42:48.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798125",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r938080702\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <repositories>\n+           <repository>\n+               <id>arrow-nightly</id>\n+               <url>https://nightlies.apache.org/arrow/java</url>\n+           </repository>\n+       </repositories>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <archive>\n+                                   <manifest>\n+                                       <mainClass>\n+                                           ToBeCalledByCpp\n+                                       </mainClass>\n+                                   </manifest>\n+                               </archive>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static FieldVector populateFieldVectorToExport(){\n+           IntVector intVector = new IntVector(\"int-to-export\", allocator);\n+           intVector.allocateNew(3);\n+           intVector.setSafe(0, 1);\n+           intVector.setSafe(1, 2);\n+           intVector.setSafe(2, 3);\n+           intVector.setValueCount(3);\n+           System.out.println(\"[Java] FieldVector: \\n\" + intVector);\n+           return intVector;\n+       }\n+\n+       public static void fillVectorSchemaRoot(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVectorSchemaRoot(allocator, populateVectorSchemaRootToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       public static VectorSchemaRoot populateVectorSchemaRootToExport(){\n\nReview Comment:\n   Changed\n\n\n\n",
                    "created": "2022-08-04T17:43:08.870+0000",
                    "updated": "2022-08-04T17:43:08.870+0000",
                    "started": "2022-08-04T17:43:08.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798126",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r938081026\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,381 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>8.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>11</maven.compiler.source>\n+           <maven.compiler.target>11</maven.compiler.target>\n\nReview Comment:\n   Deleted\n\n\n\n",
                    "created": "2022-08-04T17:43:33.645+0000",
                    "updated": "2022-08-04T17:43:33.645+0000",
                    "started": "2022-08-04T17:43:33.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798127",
                    "issueId": "13474938"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/worklog/798500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13788:\nURL: https://github.com/apache/arrow/pull/13788#discussion_r939014332\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,379 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>9.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>9.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       /**\n+        * Create a {@link FieldVector} and export this to an existing memory address\n\nReview Comment:\n   ```suggestion\r\n           * Create a {@link FieldVector} and export it via the C Data Interface\r\n   ```\n\n\n\n##########\ndocs/source/java/cdata.rst:\n##########\n@@ -91,133 +92,379 @@ without writing JNI bindings ourselves.\n \n .. code-block:: xml\n \n-    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-        <modelVersion>4.0.0</modelVersion>\n-\n-        <groupId>org.example</groupId>\n-        <artifactId>java-cdata-example</artifactId>\n-        <version>1.0-SNAPSHOT</version>\n-\n-        <properties>\n-            <maven.compiler.source>8</maven.compiler.source>\n-            <maven.compiler.target>8</maven.compiler.target>\n-            <arrow.version>8.0.0</arrow.version>\n-        </properties>\n-        <dependencies>\n-            <dependency>\n-                <groupId>org.bytedeco</groupId>\n-                <artifactId>javacpp</artifactId>\n-                <version>1.5.7</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-c-data</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-vector</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-core</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-memory-netty</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-            <dependency>\n-                <groupId>org.apache.arrow</groupId>\n-                <artifactId>arrow-format</artifactId>\n-                <version>${arrow.version}</version>\n-            </dependency>\n-        </dependencies>\n-    </project>\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+\n+       <groupId>org.example</groupId>\n+       <artifactId>java-cdata-example</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>9.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.bytedeco</groupId>\n+               <artifactId>javacpp</artifactId>\n+               <version>1.5.7</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-vector</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-core</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-format</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+   </project>\n \n .. code-block:: java\n \n-    import org.bytedeco.javacpp.annotation.Platform;\n-    import org.bytedeco.javacpp.annotation.Properties;\n-    import org.bytedeco.javacpp.tools.InfoMap;\n-    import org.bytedeco.javacpp.tools.InfoMapper;\n-\n-    @Properties(\n-            target = \"CDataJavaToCppExample\",\n-            value = @Platform(\n-                    include = {\n-                            \"CDataCppBridge.h\"\n-                    },\n-                    compiler = {\"cpp11\"},\n-                    linkpath = {\"/arrow/cpp/build/debug/\"},\n-                    link = {\"arrow\"}\n-            )\n-    )\n-    public class CDataJavaConfig implements InfoMapper {\n-\n-        @Override\n-        public void map(InfoMap infoMap) {\n-        }\n-    }\n+   import org.bytedeco.javacpp.annotation.Platform;\n+   import org.bytedeco.javacpp.annotation.Properties;\n+   import org.bytedeco.javacpp.tools.InfoMap;\n+   import org.bytedeco.javacpp.tools.InfoMapper;\n+\n+   @Properties(\n+           target = \"CDataJavaToCppExample\",\n+           value = @Platform(\n+                   include = {\n+                           \"CDataCppBridge.h\"\n+                   },\n+                   compiler = {\"cpp11\"},\n+                   linkpath = {\"/arrow/cpp/build/debug/\"},\n+                   link = {\"arrow\"}\n+           )\n+   )\n+   public class CDataJavaConfig implements InfoMapper {\n+\n+       @Override\n+       public void map(InfoMap infoMap) {\n+       }\n+   }\n \n .. code-block:: shell\n \n-    # Compile our Java code\n-    $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Compile our Java code\n+   $ javac -cp javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate CDataInterfaceLibrary\n-    $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n+   # Generate CDataInterfaceLibrary\n+   $ java -jar javacpp-1.5.7.jar CDataJavaConfig.java\n \n-    # Generate libjniCDataInterfaceLibrary.dylib\n-    $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n+   # Generate libjniCDataInterfaceLibrary.dylib\n+   $ java -jar javacpp-1.5.7.jar CDataJavaToCppExample.java\n \n-    # Validate libjniCDataInterfaceLibrary.dylib created\n-    $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n-    macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n-        libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n-        @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n-        /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n-        /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n+   # Validate libjniCDataInterfaceLibrary.dylib created\n+   $ otool -L macosx-x86_64/libjniCDataJavaToCppExample.dylib\n+   macosx-x86_64/libjniCDataJavaToCppExample.dylib:\n+       libjniCDataJavaToCppExample.dylib (compatibility version 0.0.0, current version 0.0.0)\n+       @rpath/libarrow.800.dylib (compatibility version 800.0.0, current version 800.0.0)\n+       /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1200.3.0)\n+       /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1311.0.0)\n \n **Java Test**\n \n Let's create a Java class to test our bridge:\n \n .. code-block:: java\n \n-    import org.apache.arrow.c.ArrowArray;\n-    import org.apache.arrow.c.ArrowSchema;\n-    import org.apache.arrow.c.Data;\n-    import org.apache.arrow.memory.BufferAllocator;\n-    import org.apache.arrow.memory.RootAllocator;\n-    import org.apache.arrow.vector.BigIntVector;\n-\n-    public class TestCDataInterface {\n-        public static void main(String[] args) {\n-            try(\n-                BufferAllocator allocator = new RootAllocator();\n-                ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n-                ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n-            ){\n-                CDataJavaToCppExample.FillInt64Array(\n-                        arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n-                try(\n-                    BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n-                            allocator, arrowArray, arrowSchema, null)\n-                ){\n-                    System.out.println(\"C++-allocated array: \" + bigIntVector);\n-                }\n-            }\n-        }\n-    }\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.BigIntVector;\n+\n+   public class TestCDataInterface {\n+       public static void main(String[] args) {\n+           try(\n+               BufferAllocator allocator = new RootAllocator();\n+               ArrowSchema arrowSchema = ArrowSchema.allocateNew(allocator);\n+               ArrowArray arrowArray = ArrowArray.allocateNew(allocator)\n+           ){\n+               CDataJavaToCppExample.FillInt64Array(\n+                       arrowSchema.memoryAddress(), arrowArray.memoryAddress());\n+               try(\n+                   BigIntVector bigIntVector = (BigIntVector) Data.importVector(\n+                           allocator, arrowArray, arrowSchema, null)\n+               ){\n+                   System.out.println(\"C++-allocated array: \" + bigIntVector);\n+               }\n+           }\n+       }\n+   }\n+\n+.. code-block:: shell\n+\n+   C++-allocated array: [1, 2, 3, null, 5, 6, 7, 8, 9, 10]\n+\n+Share an Int32 array from Java to C++\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+**Java Side**\n+\n+For this example, we will build a JAR with all dependencies bundled.\n+\n+.. code-block:: xml\n+\n+   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+   <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+            xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+            xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+       <modelVersion>4.0.0</modelVersion>\n+       <groupId>org.example</groupId>\n+       <artifactId>cpptojava</artifactId>\n+       <version>1.0-SNAPSHOT</version>\n+       <properties>\n+           <maven.compiler.source>8</maven.compiler.source>\n+           <maven.compiler.target>8</maven.compiler.target>\n+           <arrow.version>9.0.0</arrow.version>\n+       </properties>\n+       <dependencies>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-c-data</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+           <dependency>\n+               <groupId>org.apache.arrow</groupId>\n+               <artifactId>arrow-memory-netty</artifactId>\n+               <version>${arrow.version}</version>\n+           </dependency>\n+       </dependencies>\n+       <build>\n+           <plugins>\n+               <plugin>\n+                   <groupId>org.apache.maven.plugins</groupId>\n+                   <artifactId>maven-assembly-plugin</artifactId>\n+                   <executions>\n+                       <execution>\n+                           <phase>package</phase>\n+                           <goals>\n+                               <goal>single</goal>\n+                           </goals>\n+                           <configuration>\n+                               <descriptorRefs>\n+                                   <descriptorRef>jar-with-dependencies</descriptorRef>\n+                               </descriptorRefs>\n+                           </configuration>\n+                       </execution>\n+                   </executions>\n+               </plugin>\n+           </plugins>\n+       </build>\n+   </project>\n+\n+.. code-block:: java\n+\n+   import org.apache.arrow.c.ArrowArray;\n+   import org.apache.arrow.c.ArrowSchema;\n+   import org.apache.arrow.c.Data;\n+   import org.apache.arrow.memory.BufferAllocator;\n+   import org.apache.arrow.memory.RootAllocator;\n+   import org.apache.arrow.vector.FieldVector;\n+   import org.apache.arrow.vector.IntVector;\n+   import org.apache.arrow.vector.VectorSchemaRoot;\n+\n+   import java.util.Arrays;\n+\n+   public class ToBeCalledByCpp {\n+       final static BufferAllocator allocator = new RootAllocator();\n+\n+       /**\n+        * Create a {@link FieldVector} and export this to an existing memory address\n+        * @param schemaAddress Schema memory address to wrap\n+        * @param arrayAddress Array memory address to wrap\n+        */\n+       public static void fillVector(long schemaAddress, long arrayAddress){\n+           try (ArrowArray arrow_array = ArrowArray.wrap(arrayAddress);\n+                ArrowSchema arrow_schema = ArrowSchema.wrap(schemaAddress) ) {\n+               Data.exportVector(allocator, populateFieldVectorToExport(), null, arrow_array, arrow_schema);\n+           }\n+       }\n+\n+       /**\n+        * Create a {@link VectorSchemaRoot} and export this to an existing memory address\n\nReview Comment:\n   ```suggestion\r\n           * Create a {@link VectorSchemaRoot} and export it via the C Data Interface\r\n   ```\n\n\n\n",
                    "created": "2022-08-05T17:21:31.246+0000",
                    "updated": "2022-08-05T17:21:31.246+0000",
                    "started": "2022-08-05T17:21:31.245+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "798500",
                    "issueId": "13474938"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@f3a975d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a5a0476[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4884b522[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@72c771f0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b6f5c5c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@29a4d4a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fdac59e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@26db7164[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37c7445f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@67e7bff0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ea870a7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@23056a47[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Aug 05 18:26:35 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-05T18:26:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17297/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-03T19:28:48.000+0000",
        "updated": "2022-08-06T03:22:15.000+0000",
        "timeoriginalestimate": null,
        "description": "Add detail documentation about how-to interact between C++ to Java via C Data Interface for:\r\n * ImportArray\r\n * ImportRecordBatch",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java][Docs] Add example of Java to C++ via C Data Interface",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13474938/comment/17576004",
                    "id": "17576004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13788\n[https://github.com/apache/arrow/pull/13788]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-05T18:26:35.165+0000",
                    "updated": "2022-08-05T18:26:35.165+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z17fr4:",
        "customfield_12314139": null
    }
}