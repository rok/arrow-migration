{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13378359",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359",
    "key": "ARROW-12779",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12779/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/596668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323\n\n\n   While rather unrealistic, an RPC handler that just yielded a stream of empty tables would segfault the server, since the bindings would recursively pull from the stream looking for a non-empty table. This changes the pull into a loop, and limits how much it'll pull before giving up.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-14T13:57:08.953+0000",
                    "updated": "2021-05-14T13:57:08.953+0000",
                    "started": "2021-05-14T13:57:08.953+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596668",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/596744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#issuecomment-841348360\n\n\n   https://issues.apache.org/jira/browse/ARROW-12779\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-05-14T16:22:08.497+0000",
                    "updated": "2021-05-14T16:22:08.497+0000",
                    "started": "2021-05-14T16:22:08.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "596744",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/607976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646756458\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       Why don't we simply send an empty batch here? It would sound more user-friendly then forbidding certain edge cases.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T16:32:23.104+0000",
                    "updated": "2021-06-07T16:32:23.104+0000",
                    "started": "2021-06-07T16:32:23.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "607976",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608033",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646831421\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       I wanted to do that, but:\r\n   - An empty record batch reader would have the same issue, and is harder to detect. (Granted, it would be a rather weird application, but it's possible. We could just ignore this as an especially esoteric edge case.)\r\n   - In my interpretation, an empty table has no rows, while an empty batch has 0 rows - so it's not quite the same semantically.\r\n   \r\n   That said I'm not opposed to just sending an empty batch and perhaps punting on the empty reader issue.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:13:05.742+0000",
                    "updated": "2021-06-07T18:13:05.742+0000",
                    "started": "2021-06-07T18:13:05.742+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608033",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608035",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646835679\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       What do you mean with an empty record batch reader? Would that be an empty generator in Python?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:17:21.360+0000",
                    "updated": "2021-06-07T18:17:21.360+0000",
                    "started": "2021-06-07T18:17:21.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608035",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646836558\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       An empty generator, or a reader for an empty file, or something of that sort, yes.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:19:02.692+0000",
                    "updated": "2021-06-07T18:19:02.692+0000",
                    "started": "2021-06-07T18:19:02.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608036",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646837177\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       Though to be clear just in case, this function is adapting a generator of (batches, tables, readers, etc.) into a generator of just batches so I mean the inner table/reader/etc. here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:19:50.432+0000",
                    "updated": "2021-06-07T18:19:50.432+0000",
                    "started": "2021-06-07T18:19:50.432+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608037",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608038",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646837399\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       Fair enough. Perhaps the test should just use such an empty generator, then? I was surprised to see you needed an explicit empty table to trigger the issue.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:20:14.183+0000",
                    "updated": "2021-06-07T18:20:14.183+0000",
                    "started": "2021-06-07T18:20:14.182+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608038",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#discussion_r646838748\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1655,70 +1655,83 @@ cdef CStatus _data_stream_next(void* self, CFlightPayload* payload) except *:\n         raise RuntimeError(\"self object in callback is not GeneratorStream\")\n     stream = <GeneratorStream> py_stream\n \n-    if stream.current_stream != nullptr:\n-        check_flight_status(stream.current_stream.get().Next(payload))\n-        # If the stream ended, see if there's another stream from the\n-        # generator\n-        if payload.ipc_message.metadata != nullptr:\n+    # The generator is allowed to yield a reader or table which we\n+    # yield from; if that sub-generator is empty, we need to reset and\n+    # try again. However, limit the number of attempts so that we\n+    # don't just spin forever.\n+    max_attempts = 128\n+    for _ in range(max_attempts):\n+        if stream.current_stream != nullptr:\n+            check_flight_status(stream.current_stream.get().Next(payload))\n+            # If the stream ended, see if there's another stream from the\n+            # generator\n+            if payload.ipc_message.metadata != nullptr:\n+                return CStatus_OK()\n+            stream.current_stream.reset(nullptr)\n+\n+        try:\n+            result = next(stream.generator)\n+        except StopIteration:\n+            payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n             return CStatus_OK()\n-        stream.current_stream.reset(nullptr)\n+        except FlightError as flight_error:\n+            return (<FlightError> flight_error).to_status()\n \n-    try:\n-        result = next(stream.generator)\n-    except StopIteration:\n-        payload.ipc_message.metadata.reset(<CBuffer*> nullptr)\n+        if isinstance(result, (list, tuple)):\n+            result, metadata = result\n+        else:\n+            result, metadata = result, None\n+\n+        if isinstance(result, (Table, RecordBatchReader)):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            result = RecordBatchStream(result)\n+\n+        stream_schema = pyarrow_wrap_schema(stream.schema)\n+        if isinstance(result, FlightDataStream):\n+            if metadata:\n+                raise ValueError(\"Can only return metadata alongside a \"\n+                                 \"RecordBatch.\")\n+            data_stream = unique_ptr[CFlightDataStream](\n+                (<FlightDataStream> result).to_stream())\n+            substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n+            if substream_schema != stream_schema:\n+                raise ValueError(\"Got a FlightDataStream whose schema \"\n+                                 \"does not match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(\n+                                     substream_schema, stream_schema))\n+            stream.current_stream.reset(\n+                new CPyFlightDataStream(result, move(data_stream)))\n+            # Loop around and try again\n+            continue\n+        elif isinstance(result, RecordBatch):\n+            batch = <RecordBatch> result\n+            if batch.schema != stream_schema:\n+                raise ValueError(\"Got a RecordBatch whose schema does not \"\n+                                 \"match the declared schema of this \"\n+                                 \"GeneratorStream. \"\n+                                 \"Got: {}\\nExpected: {}\".format(batch.schema,\n+                                                                stream_schema))\n+            check_flight_status(GetRecordBatchPayload(\n+                deref(batch.batch),\n+                stream.c_options,\n+                &payload.ipc_message))\n+            if metadata:\n+                payload.app_metadata = pyarrow_unwrap_buffer(\n+                    as_buffer(metadata))\n+        else:\n+            raise TypeError(\"GeneratorStream must be initialized with \"\n+                            \"an iterator of FlightDataStream, Table, \"\n+                            \"RecordBatch, or RecordBatchStreamReader objects, \"\n+                            \"not {}.\".format(type(result)))\n+        # Don't loop around\n         return CStatus_OK()\n-    except FlightError as flight_error:\n-        return (<FlightError> flight_error).to_status()\n-\n-    if isinstance(result, (list, tuple)):\n-        result, metadata = result\n-    else:\n-        result, metadata = result, None\n-\n-    if isinstance(result, (Table, RecordBatchReader)):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        result = RecordBatchStream(result)\n-\n-    stream_schema = pyarrow_wrap_schema(stream.schema)\n-    if isinstance(result, FlightDataStream):\n-        if metadata:\n-            raise ValueError(\"Can only return metadata alongside a \"\n-                             \"RecordBatch.\")\n-        data_stream = unique_ptr[CFlightDataStream](\n-            (<FlightDataStream> result).to_stream())\n-        substream_schema = pyarrow_wrap_schema(data_stream.get().schema())\n-        if substream_schema != stream_schema:\n-            raise ValueError(\"Got a FlightDataStream whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(substream_schema,\n-                                                            stream_schema))\n-        stream.current_stream.reset(\n-            new CPyFlightDataStream(result, move(data_stream)))\n-        return _data_stream_next(self, payload)\n-    elif isinstance(result, RecordBatch):\n-        batch = <RecordBatch> result\n-        if batch.schema != stream_schema:\n-            raise ValueError(\"Got a RecordBatch whose schema does not \"\n-                             \"match the declared schema of this \"\n-                             \"GeneratorStream. \"\n-                             \"Got: {}\\nExpected: {}\".format(batch.schema,\n-                                                            stream_schema))\n-        check_flight_status(GetRecordBatchPayload(\n-            deref(batch.batch),\n-            stream.c_options,\n-            &payload.ipc_message))\n-        if metadata:\n-            payload.app_metadata = pyarrow_unwrap_buffer(as_buffer(metadata))\n-    else:\n-        raise TypeError(\"GeneratorStream must be initialized with \"\n-                        \"an iterator of FlightDataStream, Table, \"\n-                        \"RecordBatch, or RecordBatchStreamReader objects, \"\n-                        \"not {}.\".format(type(result)))\n-    return CStatus_OK()\n+    # Ran out of attempts (the RPC handler kept yielding empty tables/readers)\n+    raise RuntimeError(\"While getting next payload, ran out of attempts to \"\n+                       \"get something to send \"\n+                       \"(application server implementation error)\")\n\nReview comment:\n       I misspoke: we don't allow a subgenerator, only a sub-table or sub-reader, so a sub-table was the easiest way to trigger this. (And normally, an empty table or reader is completely fine and will just be skipped: this is guarding against the rather esoteric issue of an infinite stream of empty tables\u2026)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-07T18:22:26.718+0000",
                    "updated": "2021-06-07T18:22:26.718+0000",
                    "started": "2021-06-07T18:22:26.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608041",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608457",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#issuecomment-856765659\n\n\n   I restarted the Python conda jobs which were failing due to network issues.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T13:26:13.831+0000",
                    "updated": "2021-06-08T13:26:13.831+0000",
                    "started": "2021-06-08T13:26:13.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608457",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323#issuecomment-856863251\n\n\n   AppVeyor: https://ci.appveyor.com/project/lidavidm/arrow/builds/39512656\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T15:18:57.841+0000",
                    "updated": "2021-06-08T15:18:57.841+0000",
                    "started": "2021-06-08T15:18:57.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608509",
                    "issueId": "13378359"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/worklog/608511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #10323:\nURL: https://github.com/apache/arrow/pull/10323\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T15:19:45.071+0000",
                    "updated": "2021-06-08T15:19:45.071+0000",
                    "started": "2021-06-08T15:19:45.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608511",
                    "issueId": "13378359"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23956a94[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b7a626b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c5405d2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@74955d09[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c639b5e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@50e247b1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c64a2ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7247df7a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28e1307[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@40131328[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49e98a32[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@599307a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 08 15:19:39 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-08T15:19:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12779/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-05-13T19:18:31.000+0000",
        "updated": "2021-06-08T15:19:46.000+0000",
        "timeoriginalestimate": null,
        "description": "This do_get RPC handler segfaults when invoked:\r\n{code:python}\r\ndef do_get(...):\r\n    schema = pa.schema([])\r\n    return flight.GeneratorStream(schema, itertools.repeat(schema.empty_table()))\r\n{code}\r\nA similar one for do_exchange also segfaults.\r\n\r\nConfirmed using the Linux Conda package for 4.0.0.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][FlightRPC] Flight server segfaults with certain data",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13378359/comment/17359420",
                    "id": "17359420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10323\n[https://github.com/apache/arrow/pull/10323]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-06-08T15:19:39.219+0000",
                    "updated": "2021-06-08T15:19:39.219+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0r0mo:",
        "customfield_12314139": null
    }
}