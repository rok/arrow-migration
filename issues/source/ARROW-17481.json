{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13477676",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676",
    "key": "ARROW-17481",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=marsupialtail",
            "name": "marsupialtail",
            "key": "JIRAUSER287162",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Ziheng Wang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 27000,
            "total": 27000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17481/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 45,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/802146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail opened a new pull request, #13931:\nURL: https://github.com/apache/arrow/pull/13931\n\n   Draft.\n\n\n",
                    "created": "2022-08-19T22:24:14.870+0000",
                    "updated": "2022-08-19T22:24:14.870+0000",
                    "started": "2022-08-19T22:24:14.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802146",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/802147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1221134659\n\n   https://issues.apache.org/jira/browse/ARROW-17481\n\n\n",
                    "created": "2022-08-19T22:24:35.087+0000",
                    "updated": "2022-08-19T22:24:35.087+0000",
                    "started": "2022-08-19T22:24:35.087+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802147",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/802148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1221134670\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-19T22:24:36.630+0000",
                    "updated": "2022-08-19T22:24:36.630+0000",
                    "started": "2022-08-19T22:24:36.630+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802148",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/802152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r950606781\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -545,9 +546,10 @@ class BlockDecodingOperator {\n /////////////////////////////////////////////////////////////////////////\n // Base class for common functionality\n \n+template <typename T = std::shared_ptr<io::InputStream>>\n\nReview Comment:\n   I'm not sure this makes sense as a default parameter.  A reader probably wouldn't intuitively guess this.  Let's just force it to be specified.\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -970,6 +972,181 @@ class StreamingReaderImpl : public ReaderMixin,\n   std::shared_ptr<std::atomic<int64_t>> bytes_decoded_;\n };\n \n+\n+\n+// this is just like a MapGenerator but the map fun returns a thing instead of a future\n+template <typename T, typename ApplyFn,\n+          typename Applied = arrow::detail::result_of_t<ApplyFn(const T&)>,\n+          typename V = typename EnsureResult<Applied>::type::ValueType>\n+AsyncGenerator<V> MakeApplyGenerator(AsyncGenerator<T> source_gen, ApplyFn apply_fun, internal::Executor* cpu_exec) {\n\nReview Comment:\n   I think this should actually go in `async_generator.h`.  I think I told you otherwise once before but I was thinking it was going to be more tailored to the CSV reader.  This seems pretty generic.  Also, it should ideally be independently unit tested with a few tests.\n\n\n\n##########\ncpp/src/arrow/dataset/file_csv.cc:\n##########\n@@ -184,16 +186,45 @@ static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n   auto span = tracer->StartSpan(\"arrow::dataset::CsvFileFormat::OpenReaderAsync\");\n #endif\n   ARROW_ASSIGN_OR_RAISE(auto reader_options, GetReadOptions(format, scan_options));\n-\n-  ARROW_ASSIGN_OR_RAISE(auto input, source.OpenCompressed());\n   const auto& path = source.path();\n-  ARROW_ASSIGN_OR_RAISE(\n+\n+  \n+  auto actual_compression = Compression::type::UNCOMPRESSED;\n+    // Guess compression from file extension\n+  auto extension = fs::internal::GetAbstractPathExtension(path);\n+  if (extension == \"gz\") {\n+    actual_compression = Compression::type::GZIP;\n+  } else {\n+    auto maybe_compression = util::Codec::GetCompressionType(extension);\n+    if (maybe_compression.ok()) {\n+      ARROW_ASSIGN_OR_RAISE(actual_compression, maybe_compression);\n+    }\n+  }\n+  \n+  Future<std::shared_ptr<csv::StreamingReader>> reader_fut;\n+\n+  if (actual_compression == Compression::type::UNCOMPRESSED) {\n+    ARROW_ASSIGN_OR_RAISE(auto input, source.Open() )\n+    reader_fut = DeferNotOk(input->io_context().executor()->Submit(\n+      [=]() -> Future<std::shared_ptr<csv::StreamingReader>> {\n+        ARROW_ASSIGN_OR_RAISE(auto temp_first_block, input->ReadAt(0, reader_options.block_size));\n+        RETURN_NOT_OK(input->Seek(0));\n\nReview Comment:\n   Can you create a follow-up JIRA to remove this double-read?  I don't think we need to worry about it now but I'd like to get away from it at some point.\n\n\n\n##########\ncpp/src/arrow/io/interfaces.h:\n##########\n@@ -343,5 +344,8 @@ ARROW_EXPORT\n Result<Iterator<std::shared_ptr<Buffer>>> MakeInputStreamIterator(\n     std::shared_ptr<InputStream> stream, int64_t block_size);\n \n+ARROW_EXPORT\n+Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(std::shared_ptr<RandomAccessFile> file, int64_t block_size);\n\nReview Comment:\n   We will want to document this to point out that it is async reentrant (e.g. can be read with a readahead generator).  Or, maybe this function could apply the readahead generator also?  So it would be:\r\n   \r\n   ```\r\n    Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(std::shared_ptr<RandomAccessFile> file, int64_t block_size, int readahead);\r\n   ```\n\n\n\n",
                    "created": "2022-08-19T23:35:27.881+0000",
                    "updated": "2022-08-19T23:35:27.881+0000",
                    "started": "2022-08-19T23:35:27.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802152",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/802308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r950904667\n\n\n##########\ncpp/src/arrow/io/interfaces.h:\n##########\n@@ -343,5 +344,8 @@ ARROW_EXPORT\n Result<Iterator<std::shared_ptr<Buffer>>> MakeInputStreamIterator(\n     std::shared_ptr<InputStream> stream, int64_t block_size);\n \n+ARROW_EXPORT\n+Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(std::shared_ptr<RandomAccessFile> file, int64_t block_size);\n\nReview Comment:\n   I think it makes more sense to separate out the readahead generator if you are going to do this. I personally think a lot of interfaces in Arrow already have too many flags and it's not very easy for a new person to figure out what are the good flags to use. I don't think having this generator itself do the readahead will lead to too many performance benefits either?\n\n\n\n",
                    "created": "2022-08-21T21:51:12.170+0000",
                    "updated": "2022-08-21T21:51:12.170+0000",
                    "started": "2022-08-21T21:51:12.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802308",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/802309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r950904697\n\n\n##########\ncpp/src/arrow/dataset/file_csv.cc:\n##########\n@@ -184,16 +186,45 @@ static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n   auto span = tracer->StartSpan(\"arrow::dataset::CsvFileFormat::OpenReaderAsync\");\n #endif\n   ARROW_ASSIGN_OR_RAISE(auto reader_options, GetReadOptions(format, scan_options));\n-\n-  ARROW_ASSIGN_OR_RAISE(auto input, source.OpenCompressed());\n   const auto& path = source.path();\n-  ARROW_ASSIGN_OR_RAISE(\n+\n+  \n+  auto actual_compression = Compression::type::UNCOMPRESSED;\n+    // Guess compression from file extension\n+  auto extension = fs::internal::GetAbstractPathExtension(path);\n+  if (extension == \"gz\") {\n+    actual_compression = Compression::type::GZIP;\n+  } else {\n+    auto maybe_compression = util::Codec::GetCompressionType(extension);\n+    if (maybe_compression.ok()) {\n+      ARROW_ASSIGN_OR_RAISE(actual_compression, maybe_compression);\n+    }\n+  }\n+  \n+  Future<std::shared_ptr<csv::StreamingReader>> reader_fut;\n+\n+  if (actual_compression == Compression::type::UNCOMPRESSED) {\n+    ARROW_ASSIGN_OR_RAISE(auto input, source.Open() )\n+    reader_fut = DeferNotOk(input->io_context().executor()->Submit(\n+      [=]() -> Future<std::shared_ptr<csv::StreamingReader>> {\n+        ARROW_ASSIGN_OR_RAISE(auto temp_first_block, input->ReadAt(0, reader_options.block_size));\n+        RETURN_NOT_OK(input->Seek(0));\n\nReview Comment:\n   Yes i plan to do that. This double read is very annoying. The whole logic around what to do with the first block needs to be streamlined and optimized. \n\n\n\n",
                    "created": "2022-08-21T21:51:41.858+0000",
                    "updated": "2022-08-21T21:51:41.858+0000",
                    "started": "2022-08-21T21:51:41.858+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "802309",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/803813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r955544496\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -545,11 +546,12 @@ class BlockDecodingOperator {\n /////////////////////////////////////////////////////////////////////////\n // Base class for common functionality\n \n+template <typename T>\n\nReview Comment:\n   I wonder if this might be more readable as `InputType` instead of `T`.\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -970,6 +973,150 @@ class StreamingReaderImpl : public ReaderMixin,\n   std::shared_ptr<std::atomic<int64_t>> bytes_decoded_;\n };\n \n+/////////////////////////////////////////////////////////////////////////\n+// Base class for streaming readers\n+\n+class TonyReaderImpl : public ReaderMixin<std::shared_ptr<io::RandomAccessFile>>,\n\nReview Comment:\n   `TonyReader` has a nice ring to it but I think `StreamingFileReader` might be easier to understand for future readers.\n\n\n\n##########\ncpp/src/arrow/io/interfaces.cc:\n##########\n@@ -138,6 +137,42 @@ Result<Iterator<std::shared_ptr<Buffer>>> MakeInputStreamIterator(\n   return Iterator<std::shared_ptr<Buffer>>(InputStreamBlockIterator(stream, block_size));\n }\n \n+Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(\n+    std::shared_ptr<RandomAccessFile> file, int64_t block_size) {\n+  struct State {\n+    explicit State(std::shared_ptr<RandomAccessFile> file_, int64_t block_size_)\n+        : file(std::move(file_)), block_size(block_size_), position(0) {}\n+\n+    Status init() {\n+      RETURN_NOT_OK(file->Seek(0));\n+      // if seek worked this will also work.\n+      total_size = file->GetSize().ValueOrDie();\n+      return Status::OK();\n\nReview Comment:\n   ```suggestion\r\n         return file->GetSize();\r\n   ```\r\n   \r\n   You are probably right but I'm not sure avoiding this if check is worth making this method slightly more confusing given it shouldn't really be called all that often.\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -970,6 +973,150 @@ class StreamingReaderImpl : public ReaderMixin,\n   std::shared_ptr<std::atomic<int64_t>> bytes_decoded_;\n };\n \n+/////////////////////////////////////////////////////////////////////////\n+// Base class for streaming readers\n+\n+class TonyReaderImpl : public ReaderMixin<std::shared_ptr<io::RandomAccessFile>>,\n+                       public csv::StreamingReader,\n+                       public std::enable_shared_from_this<TonyReaderImpl> {\n+ public:\n+  TonyReaderImpl(io::IOContext io_context, std::shared_ptr<io::RandomAccessFile> input,\n+                 const ReadOptions& read_options, const ParseOptions& parse_options,\n+                 const ConvertOptions& convert_options, bool count_rows)\n+      : ReaderMixin(io_context, std::move(input), read_options, parse_options,\n+                    convert_options, count_rows),\n+        bytes_decoded_(std::make_shared<std::atomic<int64_t>>(0)) {}\n+\n+  Future<> Init(Executor* cpu_executor) {\n+    ARROW_ASSIGN_OR_RAISE(\n+        AsyncGenerator<std::shared_ptr<Buffer>> ifile_gen,\n+        io::MakeRandomAccessFileGenerator(input_, read_options_.block_size));\n+\n+    // TODO Consider exposing readahead as a read option (ARROW-12090)\n+    auto prefetch_gen =\n+        MakeReadaheadGenerator(ifile_gen, io_context_.executor()->GetCapacity());\n+\n+    auto transferred_it = MakeTransferredGenerator(prefetch_gen, cpu_executor);\n+\n+    auto buffer_generator = CSVBufferIterator::MakeAsync(std::move(transferred_it));\n+\n+    int max_readahead = cpu_executor->GetCapacity();\n+    auto self = shared_from_this();\n+\n+    return buffer_generator().Then([self, buffer_generator, max_readahead, cpu_executor](\n+                                       const std::shared_ptr<Buffer>& first_buffer) {\n+      return self->InitAfterFirstBuffer(first_buffer, buffer_generator, max_readahead,\n+                                        cpu_executor);\n+    });\n+  }\n\nReview Comment:\n   Is this the only method that differs from `StreamingReaderImpl`?  Is there any way the two streaming readers could extend some kind of `StreamingReaderBase` to avoid duplication?\n\n\n\n##########\ncpp/src/arrow/csv/reader.h:\n##########\n@@ -101,6 +102,10 @@ class ARROW_EXPORT StreamingReader : public RecordBatchReader {\n       io::IOContext io_context, std::shared_ptr<io::InputStream> input,\n       arrow::internal::Executor* cpu_executor, const ReadOptions&, const ParseOptions&,\n       const ConvertOptions&);\n+  static Future<std::shared_ptr<StreamingReader>> MakeAsync(\n\nReview Comment:\n   Let's add at least a brief comment here explaining the difference between the two reader types.\n\n\n\n##########\ncpp/src/arrow/io/interfaces.cc:\n##########\n@@ -19,6 +19,7 @@\n \n #include <algorithm>\n #include <cstdint>\n+#include <iostream>\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/arrow/util/async_generator.h:\n##########\n@@ -147,6 +147,51 @@ Future<std::vector<T>> CollectAsyncGenerator(AsyncGenerator<T> generator) {\n   return Loop(LoopBody{std::move(generator), std::move(vec)});\n }\n \n+/// \\brief this is just like a MapGenerator but the map fun returns a thing instead of a\n+/// future\n+template <typename T, typename ApplyFn,\n+          typename Applied = arrow::detail::result_of_t<ApplyFn(const T&)>,\n+          typename V = typename EnsureResult<Applied>::type::ValueType>\n+AsyncGenerator<V> MakeApplyGenerator(AsyncGenerator<T> source_gen, ApplyFn apply_fun,\n+                                     internal::Executor* cpu_exec) {\n+  struct State {\n+    explicit State(AsyncGenerator<T> source_gen_, ApplyFn apply_fun_,\n+                   internal::Executor* cpu_exec_)\n+        : source_gen(std::move(source_gen_)),\n+          apply_fun(std::move(apply_fun_)),\n+          cpu_exec(cpu_exec_),\n+          finished(false) {}\n+\n+    AsyncGenerator<T> source_gen;\n+    ApplyFn apply_fun;\n+    internal::Executor* cpu_exec;\n+    bool finished;\n+  };\n+\n+  auto state =\n+      std::make_shared<State>(std::move(source_gen), std::move(apply_fun), cpu_exec);\n+  return [state]() {\n+    CallbackOptions options;\n+    options.executor = state->cpu_exec;\n+    options.should_schedule = ShouldSchedule::Always;\n+\n+    return state->source_gen().Then(\n+        [state](const T& next) -> Result<V> {\n+          if (IsIterationEnd(next)) {\n+            return IterationTraits<V>::End();\n+          } else {\n+            auto value = state->apply_fun(next);\n+            if (!value.ok()) {\n+              return Status::NotImplemented(\"not implemented\");\n+            } else {\n+              return value.ValueOrDie();\n+            }\n\nReview Comment:\n   ```suggestion\r\n               return state->apply_fun(next);\r\n   ```\r\n   I'm not entirely sure why you are rewriting the failure to \"not implemented\".\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -20,6 +20,7 @@\n #include <cstdint>\n #include <cstring>\n #include <functional>\n+#include <iostream>\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/arrow/io/interfaces.cc:\n##########\n@@ -138,6 +137,42 @@ Result<Iterator<std::shared_ptr<Buffer>>> MakeInputStreamIterator(\n   return Iterator<std::shared_ptr<Buffer>>(InputStreamBlockIterator(stream, block_size));\n }\n \n+Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(\n+    std::shared_ptr<RandomAccessFile> file, int64_t block_size) {\n+  struct State {\n+    explicit State(std::shared_ptr<RandomAccessFile> file_, int64_t block_size_)\n+        : file(std::move(file_)), block_size(block_size_), position(0) {}\n+\n+    Status init() {\n\nReview Comment:\n   ```suggestion\r\n       Status Init() {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/dataset/file_csv.cc:\n##########\n@@ -18,6 +18,7 @@\n #include \"arrow/dataset/file_csv.h\"\n \n #include <algorithm>\n+#include <iostream>\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -1166,10 +1313,26 @@ Future<std::shared_ptr<StreamingReader>> MakeStreamingReader(\n   });\n }\n \n+Future<std::shared_ptr<StreamingReader>> MakeStreamingReader(\n\nReview Comment:\n   I'll defer to the input of others but I think an overload of `MakeStreamingReader` based solely on the type of `input` is a rather subtle API.  Could we maybe just rename this to `MakeStreamingFileReader`?\n\n\n\n##########\ncpp/src/arrow/util/async_generator.h:\n##########\n@@ -147,6 +147,51 @@ Future<std::vector<T>> CollectAsyncGenerator(AsyncGenerator<T> generator) {\n   return Loop(LoopBody{std::move(generator), std::move(vec)});\n }\n \n+/// \\brief this is just like a MapGenerator but the map fun returns a thing instead of a\n+/// future\n\nReview Comment:\n   Can you expand on this description?  I'm pretty sure the important part is that you are launching a new thread task with each input right?\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -1287,6 +1450,14 @@ Future<std::shared_ptr<StreamingReader>> StreamingReader::MakeAsync(\n                              parse_options, convert_options);\n }\n \n+Future<std::shared_ptr<StreamingReader>> StreamingReader::MakeAsync(\n+    io::IOContext io_context, std::shared_ptr<io::RandomAccessFile> input,\n+    Executor* cpu_executor, const ReadOptions& read_options,\n+    const ParseOptions& parse_options, const ConvertOptions& convert_options) {\n+  return MakeStreamingReader(io_context, std::move(input), cpu_executor, read_options,\n+                             parse_options, convert_options);\n+}\n+\n\nReview Comment:\n   I suppose the same comment I had for `MakeStreamingReader` applies here too but `MakeFileAsync` doesn't really make sense so maybe we can leave this method name alone and just live with an overload but I'm open to suggestions.\n\n\n\n",
                    "created": "2022-08-26T01:25:53.869+0000",
                    "updated": "2022-08-26T01:25:53.869+0000",
                    "started": "2022-08-26T01:25:53.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803813",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/803825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r955602646\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -970,6 +973,150 @@ class StreamingReaderImpl : public ReaderMixin,\n   std::shared_ptr<std::atomic<int64_t>> bytes_decoded_;\n };\n \n+/////////////////////////////////////////////////////////////////////////\n+// Base class for streaming readers\n+\n+class TonyReaderImpl : public ReaderMixin<std::shared_ptr<io::RandomAccessFile>>,\n\nReview Comment:\n   Ah thanks for pointing this out. I forgot to change this!! :-P \n\n\n\n",
                    "created": "2022-08-26T02:56:49.647+0000",
                    "updated": "2022-08-26T02:56:49.647+0000",
                    "started": "2022-08-26T02:56:49.647+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803825",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/803828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r955628813\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -970,6 +973,150 @@ class StreamingReaderImpl : public ReaderMixin,\n   std::shared_ptr<std::atomic<int64_t>> bytes_decoded_;\n };\n \n+/////////////////////////////////////////////////////////////////////////\n+// Base class for streaming readers\n+\n+class TonyReaderImpl : public ReaderMixin<std::shared_ptr<io::RandomAccessFile>>,\n+                       public csv::StreamingReader,\n+                       public std::enable_shared_from_this<TonyReaderImpl> {\n+ public:\n+  TonyReaderImpl(io::IOContext io_context, std::shared_ptr<io::RandomAccessFile> input,\n+                 const ReadOptions& read_options, const ParseOptions& parse_options,\n+                 const ConvertOptions& convert_options, bool count_rows)\n+      : ReaderMixin(io_context, std::move(input), read_options, parse_options,\n+                    convert_options, count_rows),\n+        bytes_decoded_(std::make_shared<std::atomic<int64_t>>(0)) {}\n+\n+  Future<> Init(Executor* cpu_executor) {\n+    ARROW_ASSIGN_OR_RAISE(\n+        AsyncGenerator<std::shared_ptr<Buffer>> ifile_gen,\n+        io::MakeRandomAccessFileGenerator(input_, read_options_.block_size));\n+\n+    // TODO Consider exposing readahead as a read option (ARROW-12090)\n+    auto prefetch_gen =\n+        MakeReadaheadGenerator(ifile_gen, io_context_.executor()->GetCapacity());\n+\n+    auto transferred_it = MakeTransferredGenerator(prefetch_gen, cpu_executor);\n+\n+    auto buffer_generator = CSVBufferIterator::MakeAsync(std::move(transferred_it));\n+\n+    int max_readahead = cpu_executor->GetCapacity();\n+    auto self = shared_from_this();\n+\n+    return buffer_generator().Then([self, buffer_generator, max_readahead, cpu_executor](\n+                                       const std::shared_ptr<Buffer>& first_buffer) {\n+      return self->InitAfterFirstBuffer(first_buffer, buffer_generator, max_readahead,\n+                                        cpu_executor);\n+    });\n+  }\n\nReview Comment:\n   The hope is that I will keep improving this TonyReaderImpl (or whatever I change the name to) to include more and more optimizations in subsequent PRs. E.g. parallel decode. So the amount of duplicated code is hopefully a temporary state. \n\n\n\n",
                    "created": "2022-08-26T04:00:37.625+0000",
                    "updated": "2022-08-26T04:00:37.625+0000",
                    "started": "2022-08-26T04:00:37.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803828",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/803829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r955629720\n\n\n##########\ncpp/src/arrow/util/async_generator.h:\n##########\n@@ -147,6 +147,51 @@ Future<std::vector<T>> CollectAsyncGenerator(AsyncGenerator<T> generator) {\n   return Loop(LoopBody{std::move(generator), std::move(vec)});\n }\n \n+/// \\brief this is just like a MapGenerator but the map fun returns a thing instead of a\n+/// future\n+template <typename T, typename ApplyFn,\n+          typename Applied = arrow::detail::result_of_t<ApplyFn(const T&)>,\n+          typename V = typename EnsureResult<Applied>::type::ValueType>\n+AsyncGenerator<V> MakeApplyGenerator(AsyncGenerator<T> source_gen, ApplyFn apply_fun,\n+                                     internal::Executor* cpu_exec) {\n+  struct State {\n+    explicit State(AsyncGenerator<T> source_gen_, ApplyFn apply_fun_,\n+                   internal::Executor* cpu_exec_)\n+        : source_gen(std::move(source_gen_)),\n+          apply_fun(std::move(apply_fun_)),\n+          cpu_exec(cpu_exec_),\n+          finished(false) {}\n+\n+    AsyncGenerator<T> source_gen;\n+    ApplyFn apply_fun;\n+    internal::Executor* cpu_exec;\n+    bool finished;\n+  };\n+\n+  auto state =\n+      std::make_shared<State>(std::move(source_gen), std::move(apply_fun), cpu_exec);\n+  return [state]() {\n+    CallbackOptions options;\n+    options.executor = state->cpu_exec;\n+    options.should_schedule = ShouldSchedule::Always;\n+\n+    return state->source_gen().Then(\n+        [state](const T& next) -> Result<V> {\n+          if (IsIterationEnd(next)) {\n+            return IterationTraits<V>::End();\n+          } else {\n+            auto value = state->apply_fun(next);\n+            if (!value.ok()) {\n+              return Status::NotImplemented(\"not implemented\");\n+            } else {\n+              return value.ValueOrDie();\n+            }\n\nReview Comment:\n   As opposed to just finishing the generator? It needs to return a not ok status here, the error message should be fleshed out more. If it simply finishes instead of returning a not ok, some of the tests will fail. e.g. if you read invalid csv, the parse task would return a not ok status that needs to be reflected up this generator to result in a status not ok for dataset inspect or the like. \n\n\n\n",
                    "created": "2022-08-26T04:03:07.850+0000",
                    "updated": "2022-08-26T04:03:07.850+0000",
                    "started": "2022-08-26T04:03:07.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803829",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/803841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r955653709\n\n\n##########\ncpp/src/arrow/util/async_generator.h:\n##########\n@@ -147,6 +147,51 @@ Future<std::vector<T>> CollectAsyncGenerator(AsyncGenerator<T> generator) {\n   return Loop(LoopBody{std::move(generator), std::move(vec)});\n }\n \n+/// \\brief this is just like a MapGenerator but the map fun returns a thing instead of a\n+/// future\n\nReview Comment:\n   That is right. \n\n\n\n",
                    "created": "2022-08-26T05:08:04.287+0000",
                    "updated": "2022-08-26T05:08:04.287+0000",
                    "started": "2022-08-26T05:08:04.287+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803841",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/804016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r956240998\n\n\n##########\ncpp/src/arrow/util/async_generator.h:\n##########\n@@ -147,6 +147,51 @@ Future<std::vector<T>> CollectAsyncGenerator(AsyncGenerator<T> generator) {\n   return Loop(LoopBody{std::move(generator), std::move(vec)});\n }\n \n+/// \\brief this is just like a MapGenerator but the map fun returns a thing instead of a\n+/// future\n+template <typename T, typename ApplyFn,\n+          typename Applied = arrow::detail::result_of_t<ApplyFn(const T&)>,\n+          typename V = typename EnsureResult<Applied>::type::ValueType>\n+AsyncGenerator<V> MakeApplyGenerator(AsyncGenerator<T> source_gen, ApplyFn apply_fun,\n+                                     internal::Executor* cpu_exec) {\n+  struct State {\n+    explicit State(AsyncGenerator<T> source_gen_, ApplyFn apply_fun_,\n+                   internal::Executor* cpu_exec_)\n+        : source_gen(std::move(source_gen_)),\n+          apply_fun(std::move(apply_fun_)),\n+          cpu_exec(cpu_exec_),\n+          finished(false) {}\n+\n+    AsyncGenerator<T> source_gen;\n+    ApplyFn apply_fun;\n+    internal::Executor* cpu_exec;\n+    bool finished;\n+  };\n+\n+  auto state =\n+      std::make_shared<State>(std::move(source_gen), std::move(apply_fun), cpu_exec);\n+  return [state]() {\n+    CallbackOptions options;\n+    options.executor = state->cpu_exec;\n+    options.should_schedule = ShouldSchedule::Always;\n+\n+    return state->source_gen().Then(\n+        [state](const T& next) -> Result<V> {\n+          if (IsIterationEnd(next)) {\n+            return IterationTraits<V>::End();\n+          } else {\n+            auto value = state->apply_fun(next);\n+            if (!value.ok()) {\n+              return Status::NotImplemented(\"not implemented\");\n+            } else {\n+              return value.ValueOrDie();\n+            }\n\nReview Comment:\n   If the return value of `state->apply_fun(next)` is a not ok status then `return state->apply_fun(next)` will return a not ok status right?\n\n\n\n",
                    "created": "2022-08-26T17:07:58.621+0000",
                    "updated": "2022-08-26T17:07:58.621+0000",
                    "started": "2022-08-26T17:07:58.621+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804016",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/804082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1228976834\n\n   failed CI has nothing to do with this PR. I am going to wait for this one to merge before proceeding with next PR that streamlines logic around first block and parallel decode. \n\n\n",
                    "created": "2022-08-26T21:45:19.707+0000",
                    "updated": "2022-08-26T21:45:19.707+0000",
                    "started": "2022-08-26T21:45:19.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804082",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/804983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r958854671\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -1166,10 +1313,26 @@ Future<std::shared_ptr<StreamingReader>> MakeStreamingReader(\n   });\n }\n \n+Future<std::shared_ptr<StreamingReader>> MakeStreamingReader(\n\nReview Comment:\n   I think it's ok :-) these are all internal APIs.\n\n\n\n",
                    "created": "2022-08-30T19:30:09.086+0000",
                    "updated": "2022-08-30T19:30:09.086+0000",
                    "started": "2022-08-30T19:30:09.086+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804983",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/805359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r959949490\n\n\n##########\ncpp/src/arrow/io/interfaces.h:\n##########\n@@ -343,5 +344,8 @@ ARROW_EXPORT\n Result<Iterator<std::shared_ptr<Buffer>>> MakeInputStreamIterator(\n     std::shared_ptr<InputStream> stream, int64_t block_size);\n \n+ARROW_EXPORT\n+Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(std::shared_ptr<RandomAccessFile> file, int64_t block_size);\n\nReview Comment:\n   Added a comment \n\n\n\n",
                    "created": "2022-08-31T19:27:11.248+0000",
                    "updated": "2022-08-31T19:27:11.248+0000",
                    "started": "2022-08-31T19:27:11.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "805359",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/807178",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#discussion_r966382942\n\n\n##########\ncpp/src/arrow/util/async_generator.h:\n##########\n@@ -147,6 +147,47 @@ Future<std::vector<T>> CollectAsyncGenerator(AsyncGenerator<T> generator) {\n   return Loop(LoopBody{std::move(generator), std::move(vec)});\n }\n \n+/// \\brief this is just like a MapGenerator but the map fun returns a thing instead of a\n+/// future. Then we will launch each map fun as an independent task, instead of piggy\n+/// backing it to the future from the source.\n\nReview Comment:\n   ```suggestion\r\n   /// \\brief Similar to MapGenerator but applies the map function in a new thread task\r\n   /// This is similar to combining a map generator and transfer generator but the former\r\n   /// would not be able to guarantee the map task runs on a new thread.\r\n   ```\n\n\n\n##########\ncpp/src/arrow/dataset/file_csv.cc:\n##########\n@@ -184,27 +185,60 @@ static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n   auto span = tracer->StartSpan(\"arrow::dataset::CsvFileFormat::OpenReaderAsync\");\n #endif\n   ARROW_ASSIGN_OR_RAISE(auto reader_options, GetReadOptions(format, scan_options));\n-\n-  ARROW_ASSIGN_OR_RAISE(auto input, source.OpenCompressed());\n   const auto& path = source.path();\n-  ARROW_ASSIGN_OR_RAISE(\n-      input, io::BufferedInputStream::Create(reader_options.block_size,\n-                                             default_memory_pool(), std::move(input)));\n+\n+  auto actual_compression = Compression::type::UNCOMPRESSED;\n+  // Guess compression from file extension\n+  auto extension = fs::internal::GetAbstractPathExtension(path);\n+  if (extension == \"gz\") {\n+    actual_compression = Compression::type::GZIP;\n+  } else {\n+    auto maybe_compression = util::Codec::GetCompressionType(extension);\n+    if (maybe_compression.ok()) {\n+      ARROW_ASSIGN_OR_RAISE(actual_compression, maybe_compression);\n+    }\n+  }\n+\n+  Future<std::shared_ptr<csv::StreamingReader>> reader_fut;\n+\n+  if (actual_compression == Compression::type::UNCOMPRESSED) {\n\nReview Comment:\n   ```suggestion\r\n     // If the file is uncompressed we open the reader with a RandomAccessFile which will\r\n     // be capable of reading the file in parallel.  If the file is compressed we must use an\r\n     // input stream and will be read sequentially.\r\n     if (actual_compression == Compression::type::UNCOMPRESSED) {\r\n   ```\n\n\n\n##########\ncpp/src/arrow/io/interfaces.cc:\n##########\n@@ -138,6 +136,44 @@ Result<Iterator<std::shared_ptr<Buffer>>> MakeInputStreamIterator(\n   return Iterator<std::shared_ptr<Buffer>>(InputStreamBlockIterator(stream, block_size));\n }\n \n+// this is async re-entrant and can be used with a Readahead Generator\n+// perhaps you should only use it with a Readahead Generator, otherwise there\n+// is no point in using this, just use MakeInputStreamIterator instead.\n+Result<AsyncGenerator<std::shared_ptr<Buffer>>> MakeRandomAccessFileGenerator(\n+    std::shared_ptr<RandomAccessFile> file, int64_t block_size) {\n+  struct State {\n+    explicit State(std::shared_ptr<RandomAccessFile> file_, int64_t block_size_)\n+        : file(std::move(file_)), block_size(block_size_), position(0) {}\n+\n+    Status Init() {\n+      RETURN_NOT_OK(file->Seek(0));\n+      ARROW_ASSIGN_OR_RAISE(total_size, file->GetSize());\n+      return Status::OK();\n+    }\n+\n+    std::shared_ptr<RandomAccessFile> file;\n+    int64_t block_size;\n+    int64_t total_size;\n+    std::atomic<int64_t> position;\n+  };\n+\n+  auto state = std::make_shared<State>(std::move(file), block_size);\n+  RETURN_NOT_OK(state->Init());\n+  return [state]() {\n+    auto pos = state->position.fetch_add(state->block_size);\n+    if (pos >= state->total_size) {\n+      return AsyncGeneratorEnd<std::shared_ptr<Buffer>>();\n+    }\n+    // idx is guaranteed to be smaller than total size, but you might not be able to read\n+    // a full block\n\nReview Comment:\n   ```suggestion\r\n       // pos is guaranteed to be smaller than total size, but you might not be able to read\r\n       // a full block\r\n   ```\n\n\n\n##########\ncpp/src/arrow/csv/reader.cc:\n##########\n@@ -970,6 +972,148 @@ class StreamingReaderImpl : public ReaderMixin,\n   std::shared_ptr<std::atomic<int64_t>> bytes_decoded_;\n };\n \n+/////////////////////////////////////////////////////////////////////////\n+// Base class for streaming readers\n+\n\nReview Comment:\n   ```suggestion\r\n   ```\n\n\n\n",
                    "created": "2022-09-08T20:33:40.026+0000",
                    "updated": "2022-09-08T20:33:40.026+0000",
                    "started": "2022-09-08T20:33:40.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807178",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/807453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1242077237\n\n   @lidavidm what do you think I should do with StreamWrapFunc?\n\n\n",
                    "created": "2022-09-09T14:52:45.046+0000",
                    "updated": "2022-09-09T14:52:45.046+0000",
                    "started": "2022-09-09T14:52:45.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807453",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/807462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1242089619\n\n   @marsupialtail from a quick scan - yeah, input transcoding would disable parallelism just like compression. I'd probably not worry about it: it already means we have to call back into Python to read data.\n\n\n",
                    "created": "2022-09-09T15:03:49.958+0000",
                    "updated": "2022-09-09T15:03:49.958+0000",
                    "started": "2022-09-09T15:03:49.958+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807462",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/807466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "marsupialtail commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1242105879\n\n   OK this won't be supported in fast CSV reader then\n\n\n",
                    "created": "2022-09-09T15:12:53.095+0000",
                    "updated": "2022-09-09T15:12:53.095+0000",
                    "started": "2022-09-09T15:12:53.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807466",
                    "issueId": "13477676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13477676/worklog/807481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13931:\nURL: https://github.com/apache/arrow/pull/13931#issuecomment-1242146952\n\n   I agree that we should leave it for now.  In the future we should still be able to do parallel I/O, we would just need to have a serial compute path on top of it.  I suppose we could do something like `RandomAccessFile -> Generator<Buffer> -> Readahead -> Iterator<Buffer> -> InputStream` :laughing: but maybe we could find some solution with fewer layers too.\n\n\n",
                    "created": "2022-09-09T15:48:50.594+0000",
                    "updated": "2022-09-09T15:48:50.594+0000",
                    "started": "2022-09-09T15:48:50.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "807481",
                    "issueId": "13477676"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 27000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23194c38[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bbb1bfe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27dc8444[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@54cb1faa[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@319a6066[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@143b43dd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57860bba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5b3c68af[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39c7aafe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@77ac23b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10902d24[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@28515689[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 27000,
        "customfield_12312520": null,
        "customfield_12312521": "2022-08-19 21:55:44.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17481/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-08-19T21:55:44.000+0000",
        "updated": "2022-11-04T10:11:03.000+0000",
        "timeoriginalestimate": null,
        "description": "The current dataset reader for CSV is pretty slow on EC2 reading from S3.\r\n\r\nEC2 instances have more than 3Gbps network bandwidth which make them on par with SSD. However reading batches from disk is more than 3x faster than reading from network. This should not happen.\r\n\r\nThe reason why the dataset reader is not fully leveraging the network bandwidth is because reads are currently serial. We should change the reads to be parallel. Then even if the rest of the pipeline is not parallel we should get same read speed as disk.\r\n\r\nNote one might think that if you have many fragments fragment-level parallelism will take care of this. This is true to some extent however to_batches() is ordered. This means that if your fragments are big the fragment readahead will stop being effective after a while as the reader tries to deplete the fragments in order. The batch readahead for the CSV reader current is a serial readahead, which really should be a parallel readahead.\r\n\r\nAfter changing the network IO to be parallel, we should also change the parse and decode to be parallel. It's easy to change the parse to be parallel, a bit harder for the decode because of how the decoder operator works, so I will just tackle the parse first.\r\n\r\nOn my test system (i3.2xlarge on EC2 reading from S3 one large CSV), these changes (parallel reading and parallel parsing) made reading 60 batches (~10GB) 4x faster. Note these changes will also make disk reading faster due to parallel parse.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 27000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] [Python] Major performance improvements to CSV reading from S3",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z17wk0:",
        "customfield_12314139": null
    }
}