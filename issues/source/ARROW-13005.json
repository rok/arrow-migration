{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13382675",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675",
    "key": "ARROW-13005",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616965",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616965",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ZMZ91",
            "name": "ZMZ91",
            "key": "zmz91",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "ZMZ91",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ZMZ91",
            "name": "ZMZ91",
            "key": "zmz91",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "ZMZ91",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ZMZ91",
            "name": "ZMZ91",
            "key": "zmz91",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "ZMZ91",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13005/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/615566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-869609896\n\n\n   https://issues.apache.org/jira/browse/ARROW-13005\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T11:36:04.767+0000",
                    "updated": "2021-06-28T11:36:04.767+0000",
                    "started": "2021-06-28T11:36:04.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615566",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-870416932\n\n\n   ARROW-13005: [C++] Implementation of take function for dense union data type.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T09:04:49.688+0000",
                    "updated": "2021-06-29T09:04:49.688+0000",
                    "started": "2021-06-29T09:04:49.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616050",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-870416932\n\n\n   ARROW-13005: [C++] Implementation of take function for dense union data type.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T13:58:36.103+0000",
                    "updated": "2021-06-29T13:58:36.103+0000",
                    "started": "2021-06-29T13:58:36.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616434",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r660748979\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       Hmm, if I understand correctly, you're reusing the full child arrays even if only a small fraction of them was taken? If so, this seems wasteful.\r\n   \r\n   I think this can be done otherwise: maintain maps of the original offsets to the taken offsets, per child. This will admittedly use a lot of temporary storage (perhaps this can be done one child at a time?), but at least the final union array will be reasonably compact.\r\n   \r\n   @bkietz What do you think?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T15:48:19.972+0000",
                    "updated": "2021-06-29T15:48:19.972+0000",
                    "started": "2021-06-29T15:48:19.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616564",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r660749699\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n\nReview comment:\n       Well, either a null in the indices should raise `Status::NotImplemented`, or it should append a null in one of the child arrays (any of them, for example the first one by convention).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T15:49:10.676+0000",
                    "updated": "2021-06-29T15:49:10.676+0000",
                    "started": "2021-06-29T15:49:10.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616566",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r660750124\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -1279,6 +1279,58 @@ TEST_F(TestTakeKernelWithStruct, TakeStruct) {\n       struct_type, R\"([{\"a\": 1}, {\"a\": 2, \"b\": \"hello\"}])\", \"[0, 1, 0]\");\n }\n \n+class TestTakeKernelWithDenseUnion : public TestTakeKernelTyped<DenseUnionType> {\n+ public:\n+  void AssertTake(const std::shared_ptr<DataType>& type, const std::string& values,\n+                  const std::string& indices, const std::string& type_codes,\n+                  const std::string& value_offsets) {\n+    auto union_array =\n+        std::static_pointer_cast<DenseUnionArray>(ArrayFromJSON(type, values));\n+    ArrayVector children;\n+    children.reserve(type->num_fields());\n+    std::vector<std::string> field_names;\n+    field_names.reserve(type->num_fields());\n+    for (int i = 0; i < type->num_fields(); i++) {\n+      children.push_back(union_array->field(i));\n+      field_names.push_back(type->field(i)->name());\n+    }\n+    ASSIGN_OR_ABORT(\n+        std::shared_ptr<Array> expected,\n+        DenseUnionArray::Make(*ArrayFromJSON(int8(), type_codes),\n+                              *ArrayFromJSON(int32(), value_offsets), children,\n+                              field_names, union_array->union_type()->type_codes()));\n+\n+    std::shared_ptr<Array> actual;\n+\n+    for (auto index_type : {int8(), uint32()}) {\n+      ASSERT_OK(TakeJSON(type, values, index_type, indices, &actual));\n+      ASSERT_OK(actual->Validate());\n+      AssertArraysEqual(*expected, *actual, /*verbose=*/true);\n+    }\n+  }\n+};\n+\n+TEST_F(TestTakeKernelWithDenseUnion, TakeDenseUnion) {\n+  auto union_type = dense_union({field(\"a\", int32()), field(\"b\", utf8())}, {2, 5});\n\nReview comment:\n       Not sure why you're not reusing the test code from `DISABLED_TakeUnion` below? The example results seem different.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T15:49:47.214+0000",
                    "updated": "2021-06-29T15:49:47.214+0000",
                    "started": "2021-06-29T15:49:47.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616567",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-870715790\n\n\n   @ZMZ91 Thanks for tackling this slightly delicate issue. I've posted two comments about the chosen approach.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T15:50:11.510+0000",
                    "updated": "2021-06-29T15:50:11.510+0000",
                    "started": "2021-06-29T15:50:11.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616568",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/616660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r660855712\n\n\n\n##########\nFile path: cpp/src/arrow/type_traits.h\n##########\n@@ -435,6 +435,8 @@ struct TypeTraits<DenseUnionType> {\n   using ArrayType = DenseUnionArray;\n   using BuilderType = DenseUnionBuilder;\n   using ScalarType = DenseUnionScalar;\n+  using ValueOffsetBuilderType = Int32Builder;\n+  using ChildIdBuilderType = Int8Builder;\n\nReview comment:\n       These are not generally useful traits since they're not shared by other types. Please revert them\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -1279,6 +1279,58 @@ TEST_F(TestTakeKernelWithStruct, TakeStruct) {\n       struct_type, R\"([{\"a\": 1}, {\"a\": 2, \"b\": \"hello\"}])\", \"[0, 1, 0]\");\n }\n \n+class TestTakeKernelWithDenseUnion : public TestTakeKernelTyped<DenseUnionType> {\n+ public:\n+  void AssertTake(const std::shared_ptr<DataType>& type, const std::string& values,\n+                  const std::string& indices, const std::string& type_codes,\n+                  const std::string& value_offsets) {\n+    auto union_array =\n+        std::static_pointer_cast<DenseUnionArray>(ArrayFromJSON(type, values));\n+    ArrayVector children;\n+    children.reserve(type->num_fields());\n+    std::vector<std::string> field_names;\n+    field_names.reserve(type->num_fields());\n+    for (int i = 0; i < type->num_fields(); i++) {\n+      children.push_back(union_array->field(i));\n+      field_names.push_back(type->field(i)->name());\n+    }\n+    ASSIGN_OR_ABORT(\n+        std::shared_ptr<Array> expected,\n+        DenseUnionArray::Make(*ArrayFromJSON(int8(), type_codes),\n+                              *ArrayFromJSON(int32(), value_offsets), children,\n+                              field_names, union_array->union_type()->type_codes()));\n+\n\nReview comment:\n       ```suggestion\r\n       ASSERT_OK(expected->ValidateFull());\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -1279,6 +1279,58 @@ TEST_F(TestTakeKernelWithStruct, TakeStruct) {\n       struct_type, R\"([{\"a\": 1}, {\"a\": 2, \"b\": \"hello\"}])\", \"[0, 1, 0]\");\n }\n \n+class TestTakeKernelWithDenseUnion : public TestTakeKernelTyped<DenseUnionType> {\n+ public:\n+  void AssertTake(const std::shared_ptr<DataType>& type, const std::string& values,\n+                  const std::string& indices, const std::string& type_codes,\n+                  const std::string& value_offsets) {\n+    auto union_array =\n+        std::static_pointer_cast<DenseUnionArray>(ArrayFromJSON(type, values));\n+    ArrayVector children;\n+    children.reserve(type->num_fields());\n+    std::vector<std::string> field_names;\n+    field_names.reserve(type->num_fields());\n+    for (int i = 0; i < type->num_fields(); i++) {\n+      children.push_back(union_array->field(i));\n+      field_names.push_back(type->field(i)->name());\n+    }\n+    ASSIGN_OR_ABORT(\n\nReview comment:\n       ```suggestion\r\n       ASSERT_OK_AND_ASSIGN(\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       I think the larger problem here is that we may produce a dense union array whose offsets are not increasing, which is a violation of [the protocol](https://github.com/bkietz/arrow/blob/3c994458183a4585063a4925bad7bf02f29ab93c/docs/source/format/Columnar.rst#L561)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -1279,6 +1279,58 @@ TEST_F(TestTakeKernelWithStruct, TakeStruct) {\n       struct_type, R\"([{\"a\": 1}, {\"a\": 2, \"b\": \"hello\"}])\", \"[0, 1, 0]\");\n }\n \n+class TestTakeKernelWithDenseUnion : public TestTakeKernelTyped<DenseUnionType> {\n+ public:\n+  void AssertTake(const std::shared_ptr<DataType>& type, const std::string& values,\n+                  const std::string& indices, const std::string& type_codes,\n+                  const std::string& value_offsets) {\n+    auto union_array =\n+        std::static_pointer_cast<DenseUnionArray>(ArrayFromJSON(type, values));\n+    ArrayVector children;\n+    children.reserve(type->num_fields());\n+    std::vector<std::string> field_names;\n+    field_names.reserve(type->num_fields());\n+    for (int i = 0; i < type->num_fields(); i++) {\n+      children.push_back(union_array->field(i));\n+      field_names.push_back(type->field(i)->name());\n+    }\n+    ASSIGN_OR_ABORT(\n+        std::shared_ptr<Array> expected,\n+        DenseUnionArray::Make(*ArrayFromJSON(int8(), type_codes),\n+                              *ArrayFromJSON(int32(), value_offsets), children,\n+                              field_names, union_array->union_type()->type_codes()));\n+\n+    std::shared_ptr<Array> actual;\n+\n+    for (auto index_type : {int8(), uint32()}) {\n+      ASSERT_OK(TakeJSON(type, values, index_type, indices, &actual));\n+      ASSERT_OK(actual->Validate());\n\nReview comment:\n       ```suggestion\r\n         ASSERT_OK(actual->ValidateFull());\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T18:45:14.430+0000",
                    "updated": "2021-06-29T18:45:14.430+0000",
                    "started": "2021-06-29T18:45:14.430+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616660",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/618411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r663461793\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       Really appreciate for both your reviews. This is a quick implementation of take function on dense union data type. But as you see there are some problems.\r\n   \r\n   @pitrou yes, this implementation will copy all child arrays and as you mentioned below, it's hard to handle null case. Because it doesn't maintain child builders and there may be no nulls in the first or any child array.\r\n   \r\n   @bkietz if the indices from the argument not in asc order or the original dense union array not following the protocol, the value offsets for the generated array may not increase.\r\n   \r\n   And I've thought about @pitrou 's solution that maintaining all child builders there. I agree that's a better solution but not very clear how to handle all different kinds of child builders. They could be any type, including complex ones like map, list or event union it self. And the implementation here sounds like a big switch case to me. Maybe some macro helps. Is there some example in existing code that handles various array builders could be referred to here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-04T07:40:02.194+0000",
                    "updated": "2021-07-04T07:40:02.194+0000",
                    "started": "2021-07-04T07:40:02.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618411",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/618414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r663466643\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       I don't think you need to use any child builders. Instead, you should be able to call `Take` on each of the child arrays; you just have to construct the indices carefully for each child array.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-04T08:20:14.938+0000",
                    "updated": "2021-07-04T08:20:14.938+0000",
                    "started": "2021-07-04T08:20:14.938+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618414",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/618464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r663586860\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       But for the null case, it still needs to a null in the first child, right? And there may be no nulls in the first child.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-05T01:19:25.146+0000",
                    "updated": "2021-07-05T01:19:25.146+0000",
                    "started": "2021-07-05T01:19:25.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618464",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/618589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r663785134\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       You can put a null in the indices.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-05T09:32:44.250+0000",
                    "updated": "2021-07-05T09:32:44.250+0000",
                    "started": "2021-07-05T09:32:44.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618589",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/619085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r663785134\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,66 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  typename TypeTraits<DenseUnionType>::ValueOffsetBuilderType value_offset_builder;\n+  typename TypeTraits<DenseUnionType>::ChildIdBuilderType child_id_builder;\n+  std::vector<int8_t> type_codes;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          auto child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          auto value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        // TODO: not able to handle null case\n+        VisitNoop));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    ArrayVector child_arrays;\n+    child_arrays.reserve(num_fields);\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (int i = 0; i < typed_values.num_fields(); i++) {\n+      out->child_data.push_back(typed_values.field(i)->data());\n\nReview comment:\n       You can put a null in the indices.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-06T11:14:24.327+0000",
                    "updated": "2021-07-06T11:14:24.327+0000",
                    "started": "2021-07-06T11:14:24.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "619085",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-875660411\n\n\n   Hi @pitrou and @bkietz, just update the pr due to your comments. Please help check the latest code. Thanks a lot.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-07T14:38:06.177+0000",
                    "updated": "2021-07-07T14:38:06.177+0000",
                    "started": "2021-07-07T14:38:06.177+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620002",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r665454642\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,82 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  Int32Builder value_offset_builder;\n+  Int8Builder child_id_builder;\n+  std::vector<int8_t> type_codes;\n+  std::vector<std::shared_ptr<Int32Builder>> child_indices_builders;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+    child_indices_builders.reserve(type_codes.size());\n+    for (size_t i = 0; i < type_codes.size(); i++) {\n+      child_indices_builders.push_back(\n+          std::make_shared<Int32Builder>(ctx->memory_pool()));\n+    }\n\nReview comment:\n       ```suggestion\r\n           value_offset_builder_(ctx->memory_pool()),\r\n           child_id_builder_(ctx->memory_pool()),\r\n           type_codes_(checked_cast<const UnionType&>(*this->values->type).type_codes()),\r\n           child_indices_builders_(type_codes_.size()) {\r\n       for (auto& child_indices_builder : child_indices_builders_) {\r\n         child_indices_builder = Int32Builder(ctx->memory_pool()));\r\n       }\r\n   ```\r\n   \r\n   class ArrayBuilder doesn't currently allow assignment like this but it should: please also add `ARROW_DEFAULT_MOVE_AND_ASSIGN(ArrayBuilder);` to class ArrayBuilder\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,82 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  Int32Builder value_offset_builder;\n+  Int8Builder child_id_builder;\n+  std::vector<int8_t> type_codes;\n+  std::vector<std::shared_ptr<Int32Builder>> child_indices_builders;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_builder(ctx->memory_pool()),\n+        child_id_builder(ctx->memory_pool()) {\n+    DenseUnionArray typed_values(this->values);\n+    type_codes = typed_values.union_type()->type_codes();\n+    child_indices_builders.reserve(type_codes.size());\n+    for (size_t i = 0; i < type_codes.size(); i++) {\n+      child_indices_builders.push_back(\n+          std::make_shared<Int32Builder>(ctx->memory_pool()));\n+    }\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          int8_t child_id = typed_values.child_id(index);\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          int32_t value_offset = typed_values.value_offset(index);\n+          value_offset_builder.UnsafeAppend(child_indices_builders[child_id]->length());\n+          RETURN_NOT_OK(child_indices_builders[child_id]->Reserve(1));\n+          child_indices_builders[child_id]->UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        [&]() {\n+          int8_t child_id = 0;\n+          child_id_builder.UnsafeAppend(type_codes[child_id]);\n+          value_offset_builder.UnsafeAppend(child_indices_builders[child_id]->length());\n+          RETURN_NOT_OK(child_indices_builders[child_id]->Reserve(1));\n+          child_indices_builders[child_id]->UnsafeAppendNull();\n+          return Status::OK();\n+        }));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_builder.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_builder.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    std::shared_ptr<Array> child_ids;\n+    std::shared_ptr<Array> value_offsets;\n+    RETURN_NOT_OK(child_id_builder.Finish(&child_ids));\n+    RETURN_NOT_OK(value_offset_builder.Finish(&value_offsets));\n+\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    BufferVector buffers = {nullptr, checked_cast<const Int8Array&>(*child_ids).values(),\n+                            checked_cast<const Int32Array&>(*value_offsets).values()};\n+    *out = ArrayData(typed_values.type(), child_ids->length(), std::move(buffers), 0);\n+    for (auto i = 0; i < num_fields; i++) {\n+      std::shared_ptr<Int32Array> child_indices_array;\n+      RETURN_NOT_OK(child_indices_builders[i]->Finish(&child_indices_array));\n\nReview comment:\n       Nit: prefer result returning overloads\r\n   ```suggestion\r\n         ARROW_ASSIGN_OR_RAISE(auto child_indices_array,\r\n                               child_indices_builders[i]->Finish());\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -1281,33 +1280,32 @@ TEST_F(TestTakeKernelWithStruct, TakeStruct) {\n \n class TestTakeKernelWithUnion : public TestTakeKernelTyped<UnionType> {};\n \n-// TODO: Restore Union take functionality\n-TEST_F(TestTakeKernelWithUnion, DISABLED_TakeUnion) {\n-  for (auto union_ : UnionTypeFactories()) {\n-    auto union_type = union_({field(\"a\", int32()), field(\"b\", utf8())}, {2, 5});\n-    auto union_json = R\"([\n+// TODO: Restore Sparse Union take functionality\n\nReview comment:\n       Are you going to address this in this PR? If not, please file a follow up JIRA and remove this comment or include that JIRA's number here\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,82 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  Int32Builder value_offset_builder;\n+  Int8Builder child_id_builder;\n\nReview comment:\n       It's worth noting that ArrayBuilder always produces a null bitmap, which is not necessary for the buffers these are used to produce. See also: TypedBufferBuilder\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,82 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  Int32Builder value_offset_builder;\n+  Int8Builder child_id_builder;\n+  std::vector<int8_t> type_codes;\n+  std::vector<std::shared_ptr<Int32Builder>> child_indices_builders;\n\nReview comment:\n       Nit: this class is large enough to warrant naming members clearly\r\n   ```suggestion\r\n     Int32Builder value_offset_builder_;\r\n     Int8Builder child_id_builder_;\r\n     std::vector<int8_t> type_codes_;\r\n     std::vector<Int32Builder> child_indices_builders_;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -1281,33 +1280,32 @@ TEST_F(TestTakeKernelWithStruct, TakeStruct) {\n \n class TestTakeKernelWithUnion : public TestTakeKernelTyped<UnionType> {};\n \n-// TODO: Restore Union take functionality\n-TEST_F(TestTakeKernelWithUnion, DISABLED_TakeUnion) {\n-  for (auto union_ : UnionTypeFactories()) {\n-    auto union_type = union_({field(\"a\", int32()), field(\"b\", utf8())}, {2, 5});\n-    auto union_json = R\"([\n+// TODO: Restore Sparse Union take functionality\n+TEST_F(TestTakeKernelWithUnion, TakeUnion) {\n+  auto union_type = dense_union({field(\"a\", int32()), field(\"b\", utf8())}, {2, 5});\n+  auto union_json = R\"([\n       null,\n       [2, 222],\n       [5, \"hello\"],\n       [5, \"eh\"],\n       null,\n       [2, 111]\n\nReview comment:\n       Since union doesn't support top level nulls, please be explicit about the type_id associated with a null and test with nulls in each child array\r\n   ```suggestion\r\n         [2, null],\r\n         [2, 222],\r\n         [5, \"hello\"],\r\n         [5, \"eh\"],\r\n         [2, null],\r\n         [2, 111],\r\n         [5, null]\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-07T15:14:57.487+0000",
                    "updated": "2021-07-07T15:14:57.487+0000",
                    "started": "2021-07-07T15:14:57.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620028",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-876060454\n\n\n   Thank you @bkietz. All comments resolved. Please help check.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-08T02:03:23.063+0000",
                    "updated": "2021-07-08T02:03:23.063+0000",
                    "started": "2021-07-08T02:03:23.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620305",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r666344417\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection_test.cc\n##########\n@@ -607,31 +607,29 @@ TEST_F(TestFilterKernelWithStruct, FilterStruct) {\n \n class TestFilterKernelWithUnion : public TestFilterKernel<UnionType> {};\n \n-TEST_F(TestFilterKernelWithUnion, DISABLED_FilterUnion) {\n-  for (auto union_ : UnionTypeFactories()) {\n-    auto union_type = union_({field(\"a\", int32()), field(\"b\", utf8())}, {2, 5});\n-    auto union_json = R\"([\n-      null,\n+TEST_F(TestFilterKernelWithUnion, FilterUnion) {\n+  auto union_type = dense_union({field(\"a\", int32()), field(\"b\", utf8())}, {2, 5});\n+  auto union_json = R\"([\n+      [2, null],\n       [2, 222],\n       [5, \"hello\"],\n       [5, \"eh\"],\n-      null,\n+      [2, null],\n       [2, 111]\n\nReview comment:\n       To test that nulls in other than the first field work, please add:\r\n   ```suggestion\r\n         [2, 111],\r\n         [5, null]\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,80 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  TypedBufferBuilder<int32_t> value_offset_buffer_builder_;\n+  TypedBufferBuilder<int8_t> child_id_buffer_builder_;\n+  std::vector<int8_t> type_codes_;\n+  std::vector<Int32Builder> child_indices_builders_;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_buffer_builder_(ctx->memory_pool()),\n+        child_id_buffer_builder_(ctx->memory_pool()),\n+        type_codes_(checked_cast<const UnionType&>(*this->values->type).type_codes()),\n+        child_indices_builders_(type_codes_.size()) {\n+    for (auto& child_indices_builder : child_indices_builders_) {\n+      child_indices_builder = Int32Builder(ctx->memory_pool());\n+    }\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          int8_t child_id = typed_values.child_id(index);\n+          child_id_buffer_builder_.UnsafeAppend(type_codes_[child_id]);\n+          int32_t value_offset = typed_values.value_offset(index);\n+          value_offset_buffer_builder_.UnsafeAppend(\n+              child_indices_builders_[child_id].length());\n+          RETURN_NOT_OK(child_indices_builders_[child_id].Reserve(1));\n+          child_indices_builders_[child_id].UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        [&]() {\n+          int8_t child_id = 0;\n+          child_id_buffer_builder_.UnsafeAppend(type_codes_[child_id]);\n+          value_offset_buffer_builder_.UnsafeAppend(\n+              child_indices_builders_[child_id].length());\n+          RETURN_NOT_OK(child_indices_builders_[child_id].Reserve(1));\n+          child_indices_builders_[child_id].UnsafeAppendNull();\n+          return Status::OK();\n+        }));\n+    return Status::OK();\n+  }\n+\n+  Status Init() override {\n+    RETURN_NOT_OK(child_id_buffer_builder_.Reserve(output_length));\n+    RETURN_NOT_OK(value_offset_buffer_builder_.Reserve(output_length));\n+    return Status::OK();\n+  }\n+\n+  Status Finish() override {\n+    ARROW_ASSIGN_OR_RAISE(auto child_ids_buffer, child_id_buffer_builder_.Finish());\n+    ARROW_ASSIGN_OR_RAISE(auto value_offsets_buffer,\n+                          value_offset_buffer_builder_.Finish());\n+    DenseUnionArray typed_values(this->values);\n+    auto num_fields = typed_values.num_fields();\n+    BufferVector buffers = {nullptr, child_ids_buffer, value_offsets_buffer};\n\nReview comment:\n       ```suggestion\r\n       BufferVector buffers{nullptr, std::move(child_ids_buffer), std::move(value_offsets_buffer)};\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-08T16:24:42.862+0000",
                    "updated": "2021-07-08T16:24:42.862+0000",
                    "started": "2021-07-08T16:24:42.862+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620585",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ZMZ91 commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-876854392\n\n\n   Hi @bkietz and @pitrou, just a question not quite related to this pr and about dense union array. I've seen the limitation for array data is under 2GB. Does it apply to nested arrays or just the sub arrays inside? For example, dense union array, it has child id array, value offset array and a bunch of child arrays. Each of them should be under 2GB. And is it restricted that the sum under 2GB?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T01:54:24.253+0000",
                    "updated": "2021-07-09T01:54:24.253+0000",
                    "started": "2021-07-09T01:54:24.253+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620833",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#issuecomment-877229283\n\n\n   The 2GB limitation applies to buffers and is type specific. It derives from usage of signed 32 bit integers to encode offsets, so for example a StringArray cannot have more than 2GB total character data because otherwise we could not express the final offset. IIUC it's allowed for a child of the union to be an Int8Array with `2**33` elements but a dense union's offsets could not point to most of those elements.\r\n   \r\n   In short, this is not a constraint you need to enforce in this PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T14:27:23.609+0000",
                    "updated": "2021-07-09T14:27:23.609+0000",
                    "started": "2021-07-09T14:27:23.609+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620997",
                    "issueId": "13382675"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/worklog/620999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10606:\nURL: https://github.com/apache/arrow/pull/10606#discussion_r666993306\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,81 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  TypedBufferBuilder<int32_t> value_offset_buffer_builder_;\n+  TypedBufferBuilder<int8_t> child_id_buffer_builder_;\n+  std::vector<int8_t> type_codes_;\n+  std::vector<Int32Builder> child_indices_builders_;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_buffer_builder_(ctx->memory_pool()),\n+        child_id_buffer_builder_(ctx->memory_pool()),\n+        type_codes_(checked_cast<const UnionType&>(*this->values->type).type_codes()),\n+        child_indices_builders_(type_codes_.size()) {\n+    for (auto& child_indices_builder : child_indices_builders_) {\n+      child_indices_builder = Int32Builder(ctx->memory_pool());\n+    }\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          int8_t child_id = typed_values.child_id(index);\n+          child_id_buffer_builder_.UnsafeAppend(type_codes_[child_id]);\n+          int32_t value_offset = typed_values.value_offset(index);\n+          value_offset_buffer_builder_.UnsafeAppend(\n+              child_indices_builders_[child_id].length());\n\nReview comment:\n       ```suggestion\r\n                 static_cast<int32_t>(child_indices_builders_[child_id].length()));\r\n   ```\r\n   This is implicit conversion from `int64_t -> int32_t`. Unfortunately it needs to be explicit: https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/39924781/job/kkm24qqycxd29y5f#L1096\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_selection.cc\n##########\n@@ -1668,6 +1668,81 @@ struct ListImpl : public Selection<ListImpl<Type>, Type> {\n   }\n };\n \n+struct DenseUnionImpl : public Selection<DenseUnionImpl, DenseUnionType> {\n+  using Base = Selection<DenseUnionImpl, DenseUnionType>;\n+  LIFT_BASE_MEMBERS();\n+\n+  TypedBufferBuilder<int32_t> value_offset_buffer_builder_;\n+  TypedBufferBuilder<int8_t> child_id_buffer_builder_;\n+  std::vector<int8_t> type_codes_;\n+  std::vector<Int32Builder> child_indices_builders_;\n+\n+  DenseUnionImpl(KernelContext* ctx, const ExecBatch& batch, int64_t output_length,\n+                 Datum* out)\n+      : Base(ctx, batch, output_length, out),\n+        value_offset_buffer_builder_(ctx->memory_pool()),\n+        child_id_buffer_builder_(ctx->memory_pool()),\n+        type_codes_(checked_cast<const UnionType&>(*this->values->type).type_codes()),\n+        child_indices_builders_(type_codes_.size()) {\n+    for (auto& child_indices_builder : child_indices_builders_) {\n+      child_indices_builder = Int32Builder(ctx->memory_pool());\n+    }\n+  }\n+\n+  template <typename Adapter>\n+  Status GenerateOutput() {\n+    DenseUnionArray typed_values(this->values);\n+    Adapter adapter(this);\n+    RETURN_NOT_OK(adapter.Generate(\n+        [&](int64_t index) {\n+          int8_t child_id = typed_values.child_id(index);\n+          child_id_buffer_builder_.UnsafeAppend(type_codes_[child_id]);\n+          int32_t value_offset = typed_values.value_offset(index);\n+          value_offset_buffer_builder_.UnsafeAppend(\n+              child_indices_builders_[child_id].length());\n+          RETURN_NOT_OK(child_indices_builders_[child_id].Reserve(1));\n+          child_indices_builders_[child_id].UnsafeAppend(value_offset);\n+          return Status::OK();\n+        },\n+        [&]() {\n+          int8_t child_id = 0;\n+          child_id_buffer_builder_.UnsafeAppend(type_codes_[child_id]);\n+          value_offset_buffer_builder_.UnsafeAppend(\n+              child_indices_builders_[child_id].length());\n\nReview comment:\n       ```suggestion\r\n             value_offset_buffer_builder_.UnsafeAppend(\r\n                 static_cast<int32_t>(child_indices_builders_[child_id].length()));\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-09T14:32:04.381+0000",
                    "updated": "2021-07-09T14:32:04.381+0000",
                    "started": "2021-07-09T14:32:04.380+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "620999",
                    "issueId": "13382675"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@668aac53[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b832709[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4776bce3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@58f706b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2806c2f5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@37c47c12[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45274fad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3bd5634a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@255a0faf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@316ac3fa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e4fb85d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5e904ded[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 14 18:30:05 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-14T18:30:05.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13005/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-08T09:45:40.000+0000",
        "updated": "2021-07-14T18:30:15.000+0000",
        "timeoriginalestimate": null,
        "description": "Found ut `TEST_F(TestTakeKernelWithUnion, DISABLED_TakeUnion)` and `TEST_F(TestFilterKernelWithUnion, DISABLED_FilterUnion)` from `vector_selection_test.cc`.\r\n\r\nEnabled and ran. Both failed with error like `failed with NotImplemented: Function array_filter has no kernel matching input types`.\r\n\r\nIs there any plan to support sparse/dense union for filter and take? Thanks.\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Support filter/take for union data type.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13382675/comment/17380793",
                    "id": "17380793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10606\n[https://github.com/apache/arrow/pull/10606]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-14T18:30:05.291+0000",
                    "updated": "2021-07-14T18:30:05.291+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rr6w:",
        "customfield_12314139": null
    }
}