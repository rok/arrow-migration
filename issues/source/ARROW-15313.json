{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13422286",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286",
    "key": "ARROW-15313",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=almeidajcr90",
            "name": "almeidajcr90",
            "key": "JIRAUSER283480",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Jose Almeida",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=almeidajcr90",
            "name": "almeidajcr90",
            "key": "JIRAUSER283480",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Jose Almeida",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=almeidajcr90",
            "name": "almeidajcr90",
            "key": "JIRAUSER283480",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Jose Almeida",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 88200,
            "total": 88200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/customFieldOption/10430",
                "value": "Patch",
                "id": "10430",
                "disabled": false
            }
        ],
        "progress": {
            "progress": 88200,
            "total": 88200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15313/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 147,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#issuecomment-1011245587\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T16:46:43.721+0000",
                    "updated": "2022-01-12T16:46:43.721+0000",
                    "started": "2022-01-12T16:46:43.721+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707638",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#issuecomment-1011256368\n\n\n   @lidavidm Thanks for the minor adjusting in the Title.\r\n   \r\n   Also the actions is complaing about the ticket has not being started, should I move it to a sprint and start it?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T16:57:57.885+0000",
                    "updated": "2022-01-12T16:57:57.885+0000",
                    "started": "2022-01-12T16:57:57.884+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707645",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#issuecomment-1011257249\n\n\n   You shouldn't need to move it to a sprint. Just click \"Start Progress\" in JIRA.\r\n   \r\n   I also added your account as a \"Contributor\" so you can self-assign issues in the future.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T16:58:53.885+0000",
                    "updated": "2022-01-12T16:58:53.885+0000",
                    "started": "2022-01-12T16:58:53.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707647",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783345962\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -21,6 +21,7 @@\n #include <gmock/gmock.h>\n #include <gtest/gtest.h>\n \n+#include <arrow/flight/sql/example/sqlite_type_info.h>\n\nReview comment:\n       nit: Arrow headers are generally included with \"\" (also, please be consistent with the existing code)\n\n##########\nFile path: cpp/src/arrow/flight/sql/server.h\n##########\n@@ -189,6 +193,25 @@ class ARROW_EXPORT FlightSqlServerBase : public FlightServerBase {\n   virtual arrow::Result<std::unique_ptr<FlightDataStream>> DoGetCatalogs(\n       const ServerCallContext& context);\n \n+  /// \\brief Gets a FlightInfo for retrieving other information (See TypeInfo).\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] command      The GetTypeInfo object which may contain filter for\n+  ///                         the date type to be search for.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\return                 Status.\n+  virtual arrow::Result<std::unique_ptr<FlightInfo>> GetFlightInfoTypeInfo(\n+      const ServerCallContext& context, const GetTypeInfo& command,\n+      const FlightDescriptor& descriptor);\n+\n+  /// \\brief Gets a FlightDataStream containing information about the data types\n+  ///        supported.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[in] command      The GetTypeInfo object which may contain filter for\n\nReview comment:\n       nit: indentation here is kind of odd.\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_server.cc\n##########\n@@ -19,6 +19,7 @@\n \n #include <sqlite3.h>\n \n+#include <arrow/flight/sql/server.h>\n\nReview comment:\n       Same here.\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,55 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema);\n+\n+  const arrow::Result<std::shared_ptr<Table>>& expected_table_result =\n+      Table::FromRecordBatches({batch});\n+\n+  std::shared_ptr<Table> table;\n+  std::shared_ptr<Table> expected_table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  ASSERT_OK_AND_ASSIGN(expected_table, expected_table_result);\n\nReview comment:\n       ```suggestion\r\n     ASSERT_OK_AND_ASSIGN(auto expected_table, Table::FromRecordBatches({batch}));\r\n   \r\n     std::shared_ptr<Table> table;\r\n     ASSERT_OK(stream->ReadAll(&table));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,55 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema);\n+\n+  const arrow::Result<std::shared_ptr<Table>>& expected_table_result =\n+      Table::FromRecordBatches({batch});\n+\n+  std::shared_ptr<Table> table;\n+  std::shared_ptr<Table> expected_table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  ASSERT_OK_AND_ASSIGN(expected_table, expected_table_result);\n+\n+  ASSERT_TRUE(table->schema()->Equals(*expected_schema));\n\nReview comment:\n       `AssertTablesEqual` already checks the schema.\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/testing/gtest_util.h>\n+\n+#include \"arrow/flight/sql/example/sqlite_type_info.h\"\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/record_batch.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema) {\n+  auto type_name_array =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                            \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                            \"integer\", \"smallint\", \"float\", \"double\",\n+                            \"numeric\", \"varchar\", \"date\", \"time\",\n+                            \"timestamp\"])\");\n+  auto data_type = ArrayFromJSON(\n+      int32(), R\"([-7, -6, -5, -4, -3, -1, -1, 1, 4, 5, 6, 8, 8, 12, 91, 92, 93])\");\n+  auto column_size = ArrayFromJSON(\n+      int32(),\n+      R\"([1, 3, 19, 65536, 255, 65536, 65536, 255, 9, 5, 7, 15, 15, 255, 10, 8, 32])\");\n+  auto literal_prefix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto literal_suffix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto create_params = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"length\", \"length\", \"length\", null, null, null, null, null, \"length\", null, null, null])\");\n+  auto nullable =\n+      ArrayFromJSON(int32(), R\"([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\");\n+  auto case_sensitive =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto serachable =\n+      ArrayFromJSON(int32(), R\"([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\");\n+  auto unsigned_attribute =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto fixed_prec_scale =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto auto_unique_value =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto local_type_name =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                          \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                          \"integer\", \"smallint\", \"float\", \"double\",\n+                          \"numeric\", \"varchar\", \"date\", \"time\",\n+                          \"timestamp\"])\");\n+  auto minimal_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto maximum_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto sql_data_type =\n+      ArrayFromJSON(int32(), R\"([-7,-6,-5,-4,-3,-1,-1,1,4,5,6,8,8,12,91,92,93])\");\n+  auto sql_datetime_sub =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto num_prec_radix =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto interval_precision =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+\n+  return RecordBatch::Make(\n\nReview comment:\n       Note that there's a `RecordBatchFromJSON` which you might prefer.\n\n##########\nFile path: cpp/src/arrow/flight/sql/server.h\n##########\n@@ -189,6 +193,25 @@ class ARROW_EXPORT FlightSqlServerBase : public FlightServerBase {\n   virtual arrow::Result<std::unique_ptr<FlightDataStream>> DoGetCatalogs(\n       const ServerCallContext& context);\n \n+  /// \\brief Gets a FlightInfo for retrieving other information (See TypeInfo).\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] command      The GetTypeInfo object which may contain filter for\n+  ///                         the date type to be search for.\n\nReview comment:\n       ```suggestion\r\n     /// \\param[in] command      An optional filter for on the data type.\r\n   ```\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/testing/gtest_util.h>\n+\n+#include \"arrow/flight/sql/example/sqlite_type_info.h\"\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/record_batch.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema) {\n+  auto type_name_array =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                            \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                            \"integer\", \"smallint\", \"float\", \"double\",\n+                            \"numeric\", \"varchar\", \"date\", \"time\",\n+                            \"timestamp\"])\");\n+  auto data_type = ArrayFromJSON(\n+      int32(), R\"([-7, -6, -5, -4, -3, -1, -1, 1, 4, 5, 6, 8, 8, 12, 91, 92, 93])\");\n+  auto column_size = ArrayFromJSON(\n+      int32(),\n+      R\"([1, 3, 19, 65536, 255, 65536, 65536, 255, 9, 5, 7, 15, 15, 255, 10, 8, 32])\");\n+  auto literal_prefix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto literal_suffix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto create_params = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"length\", \"length\", \"length\", null, null, null, null, null, \"length\", null, null, null])\");\n+  auto nullable =\n+      ArrayFromJSON(int32(), R\"([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\");\n+  auto case_sensitive =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto serachable =\n+      ArrayFromJSON(int32(), R\"([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\");\n+  auto unsigned_attribute =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto fixed_prec_scale =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto auto_unique_value =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto local_type_name =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                          \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                          \"integer\", \"smallint\", \"float\", \"double\",\n+                          \"numeric\", \"varchar\", \"date\", \"time\",\n+                          \"timestamp\"])\");\n+  auto minimal_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto maximum_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto sql_data_type =\n+      ArrayFromJSON(int32(), R\"([-7,-6,-5,-4,-3,-1,-1,1,4,5,6,8,8,12,91,92,93])\");\n+  auto sql_datetime_sub =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto num_prec_radix =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto interval_precision =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+\n+  return RecordBatch::Make(\n+      schema, 17,\n+      {type_name_array, data_type, column_size, literal_prefix, literal_suffix,\n+       create_params, nullable, case_sensitive, serachable, unsigned_attribute,\n+       fixed_prec_scale, auto_unique_value, local_type_name, minimal_scale, maximum_scale,\n+       sql_data_type, sql_datetime_sub, num_prec_radix, interval_precision});\n+}\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema,\n+                                                 int data_type_filter) {\n+  auto record_batch = DoGetTypeInfoResult(schema);\n+\n+  std::vector<int16_t> data_type_vector{-7, -6, -5, -4, -3, -1, -1, 1, 4,\n+                                        5,  6,  8,  8,  12, 91, 92, 93};\n+\n+  // Checking if the data_type is in the vector with the sqlite3 data types\n+  auto it = std::find(data_type_vector.begin(), data_type_vector.end(), data_type_filter);\n+\n+  int64_t begin_offset = std::distance(data_type_vector.begin(), it);\n+\n+  // Check if there is more than one of the same data type in the vector, if there\n+  // is more than one we increase the counter.\n+  int16_t counter = 1;\n+  while (data_type_vector[begin_offset + counter] == data_type_filter) {\n\nReview comment:\n       Also check that `begin_offset + counter < data_type_vector.size()`?\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/testing/gtest_util.h>\n\nReview comment:\n       nit: use \"\" not <> for this\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T18:52:01.684+0000",
                    "updated": "2022-01-12T18:52:01.684+0000",
                    "started": "2022-01-12T18:52:01.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707795",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783397059\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server.h\n##########\n@@ -189,6 +193,25 @@ class ARROW_EXPORT FlightSqlServerBase : public FlightServerBase {\n   virtual arrow::Result<std::unique_ptr<FlightDataStream>> DoGetCatalogs(\n       const ServerCallContext& context);\n \n+  /// \\brief Gets a FlightInfo for retrieving other information (See TypeInfo).\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] command      The GetTypeInfo object which may contain filter for\n+  ///                         the date type to be search for.\n+  /// \\param[in] descriptor   The descriptor identifying the data stream.\n+  /// \\return                 Status.\n+  virtual arrow::Result<std::unique_ptr<FlightInfo>> GetFlightInfoTypeInfo(\n+      const ServerCallContext& context, const GetTypeInfo& command,\n+      const FlightDescriptor& descriptor);\n+\n+  /// \\brief Gets a FlightDataStream containing information about the data types\n+  ///        supported.\n+  /// \\param[in] context  Per-call context.\n+  /// \\param[in] command      The GetTypeInfo object which may contain filter for\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T19:51:26.361+0000",
                    "updated": "2022-01-12T19:51:26.361+0000",
                    "started": "2022-01-12T19:51:26.360+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707835",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707836",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783397522\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server.h\n##########\n@@ -189,6 +193,25 @@ class ARROW_EXPORT FlightSqlServerBase : public FlightServerBase {\n   virtual arrow::Result<std::unique_ptr<FlightDataStream>> DoGetCatalogs(\n       const ServerCallContext& context);\n \n+  /// \\brief Gets a FlightInfo for retrieving other information (See TypeInfo).\n+  /// \\param[in] context      Per-call context.\n+  /// \\param[in] command      The GetTypeInfo object which may contain filter for\n+  ///                         the date type to be search for.\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T19:52:09.309+0000",
                    "updated": "2022-01-12T19:52:09.309+0000",
                    "started": "2022-01-12T19:52:09.309+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707836",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783398079\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -21,6 +21,7 @@\n #include <gmock/gmock.h>\n #include <gtest/gtest.h>\n \n+#include <arrow/flight/sql/example/sqlite_type_info.h>\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T19:53:02.415+0000",
                    "updated": "2022-01-12T19:53:02.415+0000",
                    "started": "2022-01-12T19:53:02.415+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707837",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783400574\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_server.cc\n##########\n@@ -19,6 +19,7 @@\n \n #include <sqlite3.h>\n \n+#include <arrow/flight/sql/server.h>\n\nReview comment:\n       Fixed\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/testing/gtest_util.h>\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T19:56:57.714+0000",
                    "updated": "2022-01-12T19:56:57.714+0000",
                    "started": "2022-01-12T19:56:57.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707841",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783401268\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,55 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema);\n+\n+  const arrow::Result<std::shared_ptr<Table>>& expected_table_result =\n+      Table::FromRecordBatches({batch});\n+\n+  std::shared_ptr<Table> table;\n+  std::shared_ptr<Table> expected_table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  ASSERT_OK_AND_ASSIGN(expected_table, expected_table_result);\n+\n+  ASSERT_TRUE(table->schema()->Equals(*expected_schema));\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T19:57:50.576+0000",
                    "updated": "2022-01-12T19:57:50.576+0000",
                    "started": "2022-01-12T19:57:50.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707842",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783410446\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/testing/gtest_util.h>\n+\n+#include \"arrow/flight/sql/example/sqlite_type_info.h\"\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/record_batch.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema) {\n+  auto type_name_array =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                            \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                            \"integer\", \"smallint\", \"float\", \"double\",\n+                            \"numeric\", \"varchar\", \"date\", \"time\",\n+                            \"timestamp\"])\");\n+  auto data_type = ArrayFromJSON(\n+      int32(), R\"([-7, -6, -5, -4, -3, -1, -1, 1, 4, 5, 6, 8, 8, 12, 91, 92, 93])\");\n+  auto column_size = ArrayFromJSON(\n+      int32(),\n+      R\"([1, 3, 19, 65536, 255, 65536, 65536, 255, 9, 5, 7, 15, 15, 255, 10, 8, 32])\");\n+  auto literal_prefix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto literal_suffix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto create_params = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"length\", \"length\", \"length\", null, null, null, null, null, \"length\", null, null, null])\");\n+  auto nullable =\n+      ArrayFromJSON(int32(), R\"([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\");\n+  auto case_sensitive =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto serachable =\n+      ArrayFromJSON(int32(), R\"([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\");\n+  auto unsigned_attribute =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto fixed_prec_scale =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto auto_unique_value =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto local_type_name =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                          \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                          \"integer\", \"smallint\", \"float\", \"double\",\n+                          \"numeric\", \"varchar\", \"date\", \"time\",\n+                          \"timestamp\"])\");\n+  auto minimal_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto maximum_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto sql_data_type =\n+      ArrayFromJSON(int32(), R\"([-7,-6,-5,-4,-3,-1,-1,1,4,5,6,8,8,12,91,92,93])\");\n+  auto sql_datetime_sub =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto num_prec_radix =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto interval_precision =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+\n+  return RecordBatch::Make(\n+      schema, 17,\n+      {type_name_array, data_type, column_size, literal_prefix, literal_suffix,\n+       create_params, nullable, case_sensitive, serachable, unsigned_attribute,\n+       fixed_prec_scale, auto_unique_value, local_type_name, minimal_scale, maximum_scale,\n+       sql_data_type, sql_datetime_sub, num_prec_radix, interval_precision});\n+}\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema,\n+                                                 int data_type_filter) {\n+  auto record_batch = DoGetTypeInfoResult(schema);\n+\n+  std::vector<int16_t> data_type_vector{-7, -6, -5, -4, -3, -1, -1, 1, 4,\n+                                        5,  6,  8,  8,  12, 91, 92, 93};\n+\n+  // Checking if the data_type is in the vector with the sqlite3 data types\n+  auto it = std::find(data_type_vector.begin(), data_type_vector.end(), data_type_filter);\n+\n+  int64_t begin_offset = std::distance(data_type_vector.begin(), it);\n+\n+  // Check if there is more than one of the same data type in the vector, if there\n+  // is more than one we increase the counter.\n+  int16_t counter = 1;\n+  while (data_type_vector[begin_offset + counter] == data_type_filter) {\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T20:12:07.105+0000",
                    "updated": "2022-01-12T20:12:07.105+0000",
                    "started": "2022-01-12T20:12:07.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707849",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783410905\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,55 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema);\n+\n+  const arrow::Result<std::shared_ptr<Table>>& expected_table_result =\n+      Table::FromRecordBatches({batch});\n+\n+  std::shared_ptr<Table> table;\n+  std::shared_ptr<Table> expected_table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  ASSERT_OK_AND_ASSIGN(expected_table, expected_table_result);\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T20:12:51.940+0000",
                    "updated": "2022-01-12T20:12:51.940+0000",
                    "started": "2022-01-12T20:12:51.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707850",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/707883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r783434729\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,49 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema);\n+\n+  ASSERT_OK_AND_ASSIGN(auto expected_table, Table::FromRecordBatches({batch}));\n+  std::shared_ptr<Table> table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  AssertTablesEqual(*expected_table, *table);\n+}\n+\n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfoWithFiltering) {\n+  int data_type = -4;\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}, data_type));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema, data_type);\n+\n+  const arrow::Result<std::shared_ptr<Table>>& expected_table_result =\n\nReview comment:\n       Also note that this test needs to be updated like the above one was.\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,49 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n\nReview comment:\n       nit, but schema/batch in these tests aren't references - they can just be declared `const std::shared_ptr<Schema>` or just `auto`.\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,77 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VarCharVector typeNameVector = new VarCharVector(\"type_name\", allocator);\n\nReview comment:\n       nit, but you might consider `VectorSchemaRoot.create(schema, allocator)` instead of manually building up all the vectors.\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,116 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/sql/example/sqlite_type_info.h\"\n+\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema) {\n+  auto type_name_array =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                            \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                            \"integer\", \"smallint\", \"float\", \"double\",\n+                            \"numeric\", \"varchar\", \"date\", \"time\",\n+                            \"timestamp\"])\");\n+  auto data_type = ArrayFromJSON(\n+      int32(), R\"([-7, -6, -5, -4, -3, -1, -1, 1, 4, 5, 6, 8, 8, 12, 91, 92, 93])\");\n+  auto column_size = ArrayFromJSON(\n+      int32(),\n+      R\"([1, 3, 19, 65536, 255, 65536, 65536, 255, 9, 5, 7, 15, 15, 255, 10, 8, 32])\");\n+  auto literal_prefix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto literal_suffix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto create_params = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"length\", \"length\", \"length\", null, null, null, null, null, \"length\", null, null, null])\");\n+  auto nullable =\n+      ArrayFromJSON(int32(), R\"([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\");\n+  auto case_sensitive =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto serachable =\n+      ArrayFromJSON(int32(), R\"([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\");\n+  auto unsigned_attribute =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto fixed_prec_scale =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto auto_unique_value =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto local_type_name =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                          \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                          \"integer\", \"smallint\", \"float\", \"double\",\n+                          \"numeric\", \"varchar\", \"date\", \"time\",\n+                          \"timestamp\"])\");\n+  auto minimal_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto maximum_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto sql_data_type =\n+      ArrayFromJSON(int32(), R\"([-7,-6,-5,-4,-3,-1,-1,1,4,5,6,8,8,12,91,92,93])\");\n+  auto sql_datetime_sub =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto num_prec_radix =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto interval_precision =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+\n+  return RecordBatch::Make(\n+      schema, 17,\n+      {type_name_array, data_type, column_size, literal_prefix, literal_suffix,\n+       create_params, nullable, case_sensitive, serachable, unsigned_attribute,\n+       fixed_prec_scale, auto_unique_value, local_type_name, minimal_scale, maximum_scale,\n+       sql_data_type, sql_datetime_sub, num_prec_radix, interval_precision});\n+}\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema,\n+                                                 int data_type_filter) {\n+  auto record_batch = DoGetTypeInfoResult(schema);\n+\n+  std::vector<int16_t> data_type_vector{-7, -6, -5, -4, -3, -1, -1, 1, 4,\n+                                        5,  6,  8,  8,  12, 91, 92, 93};\n+\n+  // Checking if the data_type is in the vector with the sqlite3 data types\n+  auto it = std::find(data_type_vector.begin(), data_type_vector.end(), data_type_filter);\n+\n+  int64_t begin_offset = std::distance(data_type_vector.begin(), it);\n+\n+  // Check if there is more than one of the same data type in the vector, if there\n+  // is more than one we increase the counter.\n+  int16_t counter = 1;\n+  while (data_type_vector[begin_offset + counter] == data_type_filter &&\n+         begin_offset + counter < static_cast<int64_t>(data_type_vector.size())) {\n\nReview comment:\n       The check needs to be done before we index into `data_type_vector`, else we may have an out-of-bounds read.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-12T20:55:55.527+0000",
                    "updated": "2022-01-12T20:55:55.527+0000",
                    "started": "2022-01-12T20:55:55.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "707883",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708476",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784131641\n\n\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,77 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VarCharVector typeNameVector = new VarCharVector(\"type_name\", allocator);\n\nReview comment:\n       Add the use of VectorSchemaRoot.create()\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:38:24.636+0000",
                    "updated": "2022-01-13T16:38:24.636+0000",
                    "started": "2022-01-13T16:38:24.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708476",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784131641\n\n\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,77 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VarCharVector typeNameVector = new VarCharVector(\"type_name\", allocator);\n\nReview comment:\n       Added the use of VectorSchemaRoot.create()\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:38:40.495+0000",
                    "updated": "2022-01-13T16:38:40.495+0000",
                    "started": "2022-01-13T16:38:40.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708478",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784132968\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,49 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n\nReview comment:\n       Fixed\n\n##########\nFile path: cpp/src/arrow/flight/sql/server_test.cc\n##########\n@@ -381,6 +382,49 @@ TEST_F(TestFlightSqlServer, TestCommandGetTablesWithIncludedSchemas) {\n   AssertTablesEqual(*expected_table, *table);\n }\n \n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfo) {\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema);\n+\n+  ASSERT_OK_AND_ASSIGN(auto expected_table, Table::FromRecordBatches({batch}));\n+  std::shared_ptr<Table> table;\n+  ASSERT_OK(stream->ReadAll(&table));\n+\n+  AssertTablesEqual(*expected_table, *table);\n+}\n+\n+TEST_F(TestFlightSqlServer, TestCommandGetTypeInfoWithFiltering) {\n+  int data_type = -4;\n+  ASSERT_OK_AND_ASSIGN(auto flight_info, sql_client->GetTypeInfo({}, data_type));\n+\n+  ASSERT_OK_AND_ASSIGN(auto stream,\n+                       sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+\n+  const std::shared_ptr<Schema>& expected_schema = SqlSchema::GetTypeInfoSchema();\n+\n+  const std::shared_ptr<RecordBatch>& batch =\n+      example::DoGetTypeInfoResult(expected_schema, data_type);\n+\n+  const arrow::Result<std::shared_ptr<Table>>& expected_table_result =\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T16:40:04.660+0000",
                    "updated": "2022-01-13T16:40:04.660+0000",
                    "started": "2022-01-13T16:40:04.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708482",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784153717\n\n\n\n##########\nFile path: cpp/src/arrow/flight/sql/example/sqlite_type_info.cc\n##########\n@@ -0,0 +1,116 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/flight/sql/example/sqlite_type_info.h\"\n+\n+#include \"arrow/flight/sql/types.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+namespace flight {\n+namespace sql {\n+namespace example {\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema) {\n+  auto type_name_array =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                            \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                            \"integer\", \"smallint\", \"float\", \"double\",\n+                            \"numeric\", \"varchar\", \"date\", \"time\",\n+                            \"timestamp\"])\");\n+  auto data_type = ArrayFromJSON(\n+      int32(), R\"([-7, -6, -5, -4, -3, -1, -1, 1, 4, 5, 6, 8, 8, 12, 91, 92, 93])\");\n+  auto column_size = ArrayFromJSON(\n+      int32(),\n+      R\"([1, 3, 19, 65536, 255, 65536, 65536, 255, 9, 5, 7, 15, 15, 255, 10, 8, 32])\");\n+  auto literal_prefix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto literal_suffix = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"'\", \"'\", \"'\", null, null, null, null, null, \"'\", \"'\", \"'\", \"'\"])\");\n+  auto create_params = ArrayFromJSON(\n+      utf8(),\n+      R\"([null, null, null, null, null, \"length\", \"length\", \"length\", null, null, null, null, null, \"length\", null, null, null])\");\n+  auto nullable =\n+      ArrayFromJSON(int32(), R\"([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\");\n+  auto case_sensitive =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto serachable =\n+      ArrayFromJSON(int32(), R\"([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\");\n+  auto unsigned_attribute =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto fixed_prec_scale =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto auto_unique_value =\n+      ArrayFromJSON(boolean(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto local_type_name =\n+      ArrayFromJSON(utf8(), R\"([\"bit\", \"tinyint\", \"bigint\", \"longvarbinary\",\n+                          \"varbinary\", \"text\", \"longvarchar\", \"char\",\n+                          \"integer\", \"smallint\", \"float\", \"double\",\n+                          \"numeric\", \"varchar\", \"date\", \"time\",\n+                          \"timestamp\"])\");\n+  auto minimal_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto maximum_scale =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto sql_data_type =\n+      ArrayFromJSON(int32(), R\"([-7,-6,-5,-4,-3,-1,-1,1,4,5,6,8,8,12,91,92,93])\");\n+  auto sql_datetime_sub =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto num_prec_radix =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+  auto interval_precision =\n+      ArrayFromJSON(int32(), R\"([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\");\n+\n+  return RecordBatch::Make(\n+      schema, 17,\n+      {type_name_array, data_type, column_size, literal_prefix, literal_suffix,\n+       create_params, nullable, case_sensitive, serachable, unsigned_attribute,\n+       fixed_prec_scale, auto_unique_value, local_type_name, minimal_scale, maximum_scale,\n+       sql_data_type, sql_datetime_sub, num_prec_radix, interval_precision});\n+}\n+\n+std::shared_ptr<RecordBatch> DoGetTypeInfoResult(const std::shared_ptr<Schema>& schema,\n+                                                 int data_type_filter) {\n+  auto record_batch = DoGetTypeInfoResult(schema);\n+\n+  std::vector<int16_t> data_type_vector{-7, -6, -5, -4, -3, -1, -1, 1, 4,\n+                                        5,  6,  8,  8,  12, 91, 92, 93};\n+\n+  // Checking if the data_type is in the vector with the sqlite3 data types\n+  auto it = std::find(data_type_vector.begin(), data_type_vector.end(), data_type_filter);\n+\n+  int64_t begin_offset = std::distance(data_type_vector.begin(), it);\n+\n+  // Check if there is more than one of the same data type in the vector, if there\n+  // is more than one we increase the counter.\n+  int16_t counter = 1;\n+  while (data_type_vector[begin_offset + counter] == data_type_filter &&\n+         begin_offset + counter < static_cast<int64_t>(data_type_vector.size())) {\n\nReview comment:\n       Sorry for the mistake, you are right. I didn't see it.\r\n   \r\n   Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T17:03:45.057+0000",
                    "updated": "2022-01-13T17:03:45.057+0000",
                    "started": "2022-01-13T17:03:45.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708504",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784200474\n\n\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n+    final int rows =\n+        vectors.stream().map(FieldVector::getValueCount).findAny().orElseThrow(IllegalStateException::new);\n\nReview comment:\n       Instead of creating `vectors` above I think you can just use `root.getFieldVectors` (though if saveToVectors can return the row count, you can skip this too)\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n+    final int rows =\n+        vectors.stream().map(FieldVector::getValueCount).findAny().orElseThrow(IllegalStateException::new);\n+    vectors.forEach(vector -> vector.setValueCount(rows));\n\nReview comment:\n       IIRC, root.setRowCount does this for you.\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n\nReview comment:\n       Would it make sense for this to return the row count so that you don't have to do it manually?\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n\nReview comment:\n       Since the types don't matter, why not inline these into the `mapper.put` calls below?\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n\nReview comment:\n       Oh, it already returns the row count. Why not use that below?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T17:58:45.551+0000",
                    "updated": "2022-01-13T17:58:45.551+0000",
                    "started": "2022-01-13T17:58:45.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708542",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784248312\n\n\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n\nReview comment:\n       I didn't know it returned the row count, It's being used now\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T19:05:48.637+0000",
                    "updated": "2022-01-13T19:05:48.637+0000",
                    "started": "2022-01-13T19:05:48.637+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708590",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784248312\n\n\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n\nReview comment:\n       Oh, I didn't know it returned the row count, It's being used now\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n+    final int rows =\n+        vectors.stream().map(FieldVector::getValueCount).findAny().orElseThrow(IllegalStateException::new);\n+    vectors.forEach(vector -> vector.setValueCount(rows));\n\nReview comment:\n       Fixed\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T19:06:21.558+0000",
                    "updated": "2022-01-13T19:06:21.558+0000",
                    "started": "2022-01-13T19:06:21.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708591",
                    "issueId": "13422286"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/worklog/708594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jcralmeida commented on a change in pull request #11982:\nURL: https://github.com/apache/arrow/pull/11982#discussion_r784248817\n\n\n\n##########\nFile path: java/flight/flight-sql/src/test/java/org/apache/arrow/flight/sql/example/FlightSqlExample.java\n##########\n@@ -429,6 +453,80 @@ private static VectorSchemaRoot getRoot(final ResultSet data, final BufferAlloca\n     return new VectorSchemaRoot(singletonList(dataVector));\n   }\n \n+  private static VectorSchemaRoot getTypeInfoRoot(CommandGetTypeInfo request, ResultSet typeInfo,\n+                                                  final BufferAllocator allocator)\n+      throws SQLException {\n+    Objects.requireNonNull(allocator, \"BufferAllocator cannot be null.\");\n+\n+    VectorSchemaRoot root = VectorSchemaRoot.create(Schemas.GET_TYPE_INFO_SCHEMA, allocator);\n+\n+    VarCharVector typeNameVector = (VarCharVector) root.getVector(\"type_name\");\n+    IntVector dataTypeVector = (IntVector) root.getVector(\"data_type\");\n+    IntVector columnSizeVector = (IntVector) root.getVector(\"column_size\");\n+    VarCharVector literalPrefixVector = (VarCharVector) root.getVector(\"literal_prefix\");\n+    VarCharVector literalSuffixVector = (VarCharVector) root.getVector(\"literal_suffix\");\n+    VarCharVector createParamsVector = (VarCharVector) root.getVector(\"create_params\");\n+    IntVector nullableVector = (IntVector) root.getVector(\"nullable\");\n+    BitVector caseSensitiveVector = (BitVector) root.getVector(\"case_sensitive\");\n+    IntVector searchableVector = (IntVector) root.getVector(\"searchable\");\n+    BitVector unsignedAttributeVector = (BitVector) root.getVector(\"unsigned_attribute\");\n+    BitVector fixedPrecScaleVector = (BitVector) root.getVector(\"fixed_prec_scale\");\n+    BitVector autoIncrementVector = (BitVector) root.getVector(\"auto_increment\");\n+    VarCharVector localTypeNameVector = (VarCharVector) root.getVector(\"local_type_name\");\n+    IntVector minimumScaleVector = (IntVector) root.getVector(\"minimum_scale\");\n+    IntVector maximumScaleVector = (IntVector) root.getVector(\"maximum_scale\");\n+    IntVector sqlDataTypeVector = (IntVector) root.getVector(\"sql_data_type\");\n+    IntVector sqlDatetimeSubVector = (IntVector) root.getVector(\"sql_datetime_sub\");\n+    IntVector numPrecRadixVector = (IntVector) root.getVector(\"num_prec_radix\");\n+\n+    List<FieldVector> vectors =\n+        ImmutableList.of(typeNameVector, dataTypeVector, columnSizeVector, literalPrefixVector, literalSuffixVector,\n+            createParamsVector, nullableVector, caseSensitiveVector, searchableVector, unsignedAttributeVector,\n+            fixedPrecScaleVector, autoIncrementVector, localTypeNameVector, minimumScaleVector, maximumScaleVector,\n+            sqlDataTypeVector, sqlDatetimeSubVector, numPrecRadixVector);\n+\n+    Map<FieldVector, String> mapper = new HashMap<>();\n+    mapper.put(typeNameVector, \"TYPE_NAME\");\n+    mapper.put(dataTypeVector, \"DATA_TYPE\");\n+    mapper.put(columnSizeVector, \"PRECISION\");\n+    mapper.put(literalPrefixVector, \"LITERAL_PREFIX\");\n+    mapper.put(literalSuffixVector, \"LITERAL_SUFFIX\");\n+    mapper.put(createParamsVector, \"CREATE_PARAMS\");\n+    mapper.put(nullableVector, \"NULLABLE\");\n+    mapper.put(caseSensitiveVector, \"CASE_SENSITIVE\");\n+    mapper.put(searchableVector, \"SEARCHABLE\");\n+    mapper.put(unsignedAttributeVector, \"UNSIGNED_ATTRIBUTE\");\n+    mapper.put(fixedPrecScaleVector, \"FIXED_PREC_SCALE\");\n+    mapper.put(autoIncrementVector, \"AUTO_INCREMENT\");\n+    mapper.put(localTypeNameVector, \"LOCAL_TYPE_NAME\");\n+    mapper.put(minimumScaleVector, \"MINIMUM_SCALE\");\n+    mapper.put(maximumScaleVector, \"MAXIMUM_SCALE\");\n+    mapper.put(sqlDataTypeVector, \"SQL_DATA_TYPE\");\n+    mapper.put(sqlDatetimeSubVector, \"SQL_DATETIME_SUB\");\n+    mapper.put(numPrecRadixVector, \"NUM_PREC_RADIX\");\n+\n+    Predicate<ResultSet> predicate;\n+    if (request.hasDataType()) {\n+      predicate = (resultSet) -> {\n+        try {\n+          return resultSet.getInt(\"DATA_TYPE\") == request.getDataType();\n+        } catch (SQLException e) {\n+          throw new RuntimeException(e);\n+        }\n+      };\n+    } else {\n+      predicate = (resultSet -> true);\n+    }\n+\n+    saveToVectors(mapper, typeInfo, true, predicate);\n+    final int rows =\n+        vectors.stream().map(FieldVector::getValueCount).findAny().orElseThrow(IllegalStateException::new);\n\nReview comment:\n       Fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-13T19:06:39.406+0000",
                    "updated": "2022-01-13T19:06:39.406+0000",
                    "started": "2022-01-13T19:06:39.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "708594",
                    "issueId": "13422286"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 88200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6fe963c4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55bed846[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41787c3b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@62a7e0ba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67b21cad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5c82975e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e99a151[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3e62808[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@74c60bad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3cb65a0c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f36e7e2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1da22c64[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 88200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 25 21:21:58 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++",
            "JAVA"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-25T21:21:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15313/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-01-12T16:44:22.000+0000",
        "updated": "2022-03-28T20:32:03.000+0000",
        "timeoriginalestimate": null,
        "description": "This issue is related to add a new functionallity on FlightSql, the typeInfo command which is responsible to retrieve information about the data type support by the source.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "24.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 88200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Java][FlightRPC] Add typeInfo functionality to Flight SQL",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422286/comment/17512590",
                    "id": "17512590",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11982\n[https://github.com/apache/arrow/pull/11982]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-03-25T21:21:58.816+0000",
                    "updated": "2022-03-25T21:21:58.816+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0yiqw:",
        "customfield_12314139": null
    }
}