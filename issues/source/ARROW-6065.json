{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13247718",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718",
    "key": "ARROW-6065",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12566915",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12566915",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13187263",
                    "key": "ARROW-3325",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13187263",
                    "fields": {
                        "summary": "[Python] Support reading Parquet binary/string columns directly as DictionaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6065/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963\n \n \n   This is strictly a refactoring PR. I'm going to start working (for a new PR) on some refactoring of the handling of schemas and nested types (which is also pretty messy in my opinion). The motivation for this is to be able to more cleanly reason about direct dictionary-decoding without having to resort to such hacks as the current `FixSchemas` function\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-29T18:06:02.395+0000",
                    "updated": "2019-07-29T18:06:02.395+0000",
                    "started": "2019-07-29T18:06:02.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284450",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#issuecomment-516103317\n \n \n   @emkornfield I'm also trying to clean up some business logic in such a way that it will help you with implementing nested reads, though there is little enough logic related to nested data that you might want to start fresh anyway\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-29T18:13:40.396+0000",
                    "updated": "2019-07-29T18:13:40.396+0000",
                    "started": "2019-07-29T18:13:40.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284452",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#issuecomment-516180337\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=h1) Report\n   > Merging [#4963](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/171c3f709bbad4de989d5b10c707dcbc40c34405?src=pr&el=desc) will **increase** coverage by `1.64%`.\n   > The diff coverage is `90.65%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/4963/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #4963      +/-   ##\n   ==========================================\n   + Coverage    87.5%   89.14%   +1.64%     \n   ==========================================\n     Files         998      722     -276     \n     Lines      141869   101612   -40257     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       124139    90587   -33552     \n   + Misses      17368    11025    -6343     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/column\\_writer.h](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2NvbHVtbl93cml0ZXIuaA==) | `88.88% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/file\\_reader.cc](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2ZpbGVfcmVhZGVyLmNj) | `94.3% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/statistics.h](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3N0YXRpc3RpY3MuaA==) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/bloom\\_filter.cc](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Jsb29tX2ZpbHRlci5jYw==) | `91.13% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/encoding.cc](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2VuY29kaW5nLmNj) | `93.73% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/types.cc](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3R5cGVzLmNj) | `93.76% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/statistics.cc](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3N0YXRpc3RpY3MuY2M=) | `87.96% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/file\\_writer.h](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2ZpbGVfd3JpdGVyLmg=) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/schema.cc](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3NjaGVtYS5jYw==) | `90.07% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/arrow/writer.h](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L2Fycm93L3dyaXRlci5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | ... and [300 more](https://codecov.io/gh/apache/arrow/pull/4963/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=footer). Last update [171c3f7...cf9f5e3](https://codecov.io/gh/apache/arrow/pull/4963?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-29T22:05:08.097+0000",
                    "updated": "2019-07-29T22:05:08.097+0000",
                    "started": "2019-07-29T22:05:08.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284576",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284845",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308636475\n \n \n\n ##########\n File path: cpp/build-support/iwyu/mappings/arrow-misc.imp\n ##########\n @@ -27,6 +27,7 @@\n   { include: [\"<ext/alloc_traits.h>\", private, \"<unordered_map>\", public ] },\n   { include: [\"<ext/alloc_traits.h>\", private, \"<unordered_set>\", public ] },\n   { include: [\"<ext/alloc_traits.h>\", private, \"<vector>\", public ] },\n+  { include: [\"<bits/exception.h>\", private, \"<exception>\", public ] },\n \n Review comment:\n   Wow. Are we really maintaing all this by ourselves? Sounds like IWYU is not exactly user-friendy.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.755+0000",
                    "updated": "2019-07-30T10:20:11.755+0000",
                    "started": "2019-07-30T10:20:11.754+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284845",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308638536\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.cc\n ##########\n @@ -216,1462 +184,488 @@ class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n };\n \n // ----------------------------------------------------------------------\n-// File reader implementation\n+// FileReaderImpl forward declaration\n \n-using FileColumnIteratorFactory =\n-    std::function<FileColumnIterator*(int, ParquetFileReader*)>;\n-\n-class FileReader::Impl {\n+class FileReaderImpl : public FileReader {\n  public:\n-  Impl(MemoryPool* pool, std::unique_ptr<ParquetFileReader> reader,\n-       const ArrowReaderProperties& properties)\n+  FileReaderImpl(MemoryPool* pool, std::unique_ptr<ParquetFileReader> reader,\n+                 const ArrowReaderProperties& properties)\n       : pool_(pool), reader_(std::move(reader)), reader_properties_(properties) {}\n \n-  virtual ~Impl() {}\n-\n   Status Init() {\n     // TODO(wesm): Smarter schema/column-reader initialization for nested data\n     return Status::OK();\n   }\n \n+  FileColumnIteratorFactory SomeRowGroupsFactory(std::vector<int> row_groups) {\n+    return [row_groups](int i, ParquetFileReader* reader) {\n+      return new FileColumnIterator(i, reader, row_groups);\n+    };\n+  }\n+\n+  std::vector<int> AllRowGroups() {\n+    std::vector<int> row_groups(reader_->metadata()->num_row_groups());\n+    std::iota(row_groups.begin(), row_groups.end(), 0);\n+    return row_groups;\n+  }\n+\n+  std::vector<int> AllColumnIndices() {\n+    std::vector<int> indices(reader_->metadata()->num_columns());\n+    std::iota(indices.begin(), indices.end(), 0);\n+    return indices;\n+  }\n+\n+  FileColumnIteratorFactory AllRowGroupsFactory() {\n+    return SomeRowGroupsFactory(AllRowGroups());\n+  }\n+\n+  int64_t GetTotalRecords(const std::vector<int>& row_groups, int column_chunk = 0) {\n+    // Can throw exception\n+    int64_t records = 0;\n+    for (int j = 0; j < static_cast<int>(row_groups.size()); j++) {\n \n Review comment:\n   Use a range-based loop? `for (const auto& row_group : row_groups) ...`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.756+0000",
                    "updated": "2019-07-30T10:20:11.756+0000",
                    "started": "2019-07-30T10:20:11.756+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284846",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284847",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308636681\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/arrow-reader-writer-test.cc\n ##########\n @@ -1845,8 +1845,8 @@ TEST(TestArrowReadWrite, MultithreadedRead) {\n }\n \n TEST(TestArrowReadWrite, ReadSingleRowGroup) {\n-  const int num_columns = 20;\n-  const int num_rows = 1000;\n+  const int num_columns = 10;\n+  const int num_rows = 100;\n \n Review comment:\n   Is this to make the test faster?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.859+0000",
                    "updated": "2019-07-30T10:20:11.859+0000",
                    "started": "2019-07-30T10:20:11.859+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284847",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308637789\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.cc\n ##########\n @@ -216,1462 +184,488 @@ class RowGroupRecordBatchReader : public ::arrow::RecordBatchReader {\n };\n \n // ----------------------------------------------------------------------\n-// File reader implementation\n+// FileReaderImpl forward declaration\n \n Review comment:\n   It's not really a \"forward declaration\", right? Seems like an implementation to me :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.878+0000",
                    "updated": "2019-07-30T10:20:11.878+0000",
                    "started": "2019-07-30T10:20:11.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284848",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308641836\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.h\n ##########\n @@ -201,117 +192,78 @@ class PARQUET_EXPORT FileReader {\n   // 2 foo3\n   //\n   // i=0 will read the entire foo struct, i=1 the foo2 primitive column etc\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::ChunkedArray>* out);\n-\n-  /// \\note Deprecated since 0.12\n-  ARROW_DEPRECATED(\"Use version with ChunkedArray output\")\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::Array>* out);\n+  virtual ::arrow::Status ReadSchemaField(\n+      int i, std::shared_ptr<::arrow::ChunkedArray>* out) = 0;\n \n   /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices, the\n   ///    ordering in row_group_indices matters.\n   /// \\returns error Status if row_group_indices contains invalid index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n-\n-  /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices,\n-  ///     whose columns are selected by column_indices. The ordering in row_group_indices\n-  ///     and column_indices matter.\n-  /// \\returns error Status if either row_group_indices or column_indices contains invalid\n-  ///    index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       const std::vector<int>& column_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n+\n+  /// \\brief Return a RecordBatchReader of row groups selected from\n+  ///     row_group_indices, whose columns are selected by column_indices. The\n+  ///     ordering in row_group_indices and column_indices matter.\n+  /// \\returns error Status if either row_group_indices or column_indices\n+  ///    contains invalid index\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n   // Read a table of columns into a Table\n-  ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out) = 0;\n \n   // Read a table of columns into a Table. Read only the indicated column\n   // indices (relative to the schema)\n-  ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n-                            std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n+                                    std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n-                               std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n+                                       std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                const std::vector<int>& column_indices,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n   /// \\brief Scan file contents with one thread, return number of rows\n-  ::arrow::Status ScanContents(std::vector<int> columns, const int32_t column_batch_size,\n-                               int64_t* num_rows);\n+  virtual ::arrow::Status ScanContents(std::vector<int> columns,\n+                                       const int32_t column_batch_size,\n+                                       int64_t* num_rows) = 0;\n \n   /// \\brief Return a reader for the RowGroup, this object must not outlive the\n   ///   FileReader.\n-  std::shared_ptr<RowGroupReader> RowGroup(int row_group_index);\n+  virtual std::shared_ptr<RowGroupReader> RowGroup(int row_group_index) = 0;\n \n-  int num_row_groups() const;\n+  virtual int num_row_groups() const = 0;\n \n-  const ParquetFileReader* parquet_reader() const;\n-\n-  /// Set the number of threads to use during reads of multiple columns. By\n-  /// default only 1 thread is used\n-  /// \\deprecated Use set_use_threads instead.\n-  ARROW_DEPRECATED(\"Use set_use_threads instead\")\n-  void set_num_threads(int num_threads);\n+  virtual ParquetFileReader* parquet_reader() const = 0;\n \n   /// Set whether to use multiple threads during reads of multiple columns.\n   /// By default only one thread is used.\n-  void set_use_threads(bool use_threads);\n-\n-  virtual ~FileReader();\n+  virtual void set_use_threads(bool use_threads) = 0;\n \n- private:\n-  FileReader(::arrow::MemoryPool* pool, std::unique_ptr<ParquetFileReader> reader,\n-             const ArrowReaderProperties& properties);\n-\n-  friend ColumnChunkReader;\n-  friend RowGroupReader;\n-\n-  class PARQUET_NO_EXPORT Impl;\n-  std::unique_ptr<Impl> impl_;\n+  virtual ~FileReader() = default;\n };\n \n-class PARQUET_EXPORT RowGroupReader {\n+class RowGroupReader {\n \n Review comment:\n   Do we need to PARQUET_EXPORT this class and also `ColumnChunkReader`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.904+0000",
                    "updated": "2019-07-30T10:20:11.904+0000",
                    "started": "2019-07-30T10:20:11.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284849",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308641625\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.h\n ##########\n @@ -201,117 +192,78 @@ class PARQUET_EXPORT FileReader {\n   // 2 foo3\n   //\n   // i=0 will read the entire foo struct, i=1 the foo2 primitive column etc\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::ChunkedArray>* out);\n-\n-  /// \\note Deprecated since 0.12\n-  ARROW_DEPRECATED(\"Use version with ChunkedArray output\")\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::Array>* out);\n+  virtual ::arrow::Status ReadSchemaField(\n+      int i, std::shared_ptr<::arrow::ChunkedArray>* out) = 0;\n \n   /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices, the\n   ///    ordering in row_group_indices matters.\n   /// \\returns error Status if row_group_indices contains invalid index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n-\n-  /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices,\n-  ///     whose columns are selected by column_indices. The ordering in row_group_indices\n-  ///     and column_indices matter.\n-  /// \\returns error Status if either row_group_indices or column_indices contains invalid\n-  ///    index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       const std::vector<int>& column_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n+\n+  /// \\brief Return a RecordBatchReader of row groups selected from\n+  ///     row_group_indices, whose columns are selected by column_indices. The\n+  ///     ordering in row_group_indices and column_indices matter.\n+  /// \\returns error Status if either row_group_indices or column_indices\n+  ///    contains invalid index\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n   // Read a table of columns into a Table\n-  ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out) = 0;\n \n   // Read a table of columns into a Table. Read only the indicated column\n   // indices (relative to the schema)\n-  ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n-                            std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n+                                    std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n-                               std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n+                                       std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                const std::vector<int>& column_indices,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n   /// \\brief Scan file contents with one thread, return number of rows\n-  ::arrow::Status ScanContents(std::vector<int> columns, const int32_t column_batch_size,\n-                               int64_t* num_rows);\n+  virtual ::arrow::Status ScanContents(std::vector<int> columns,\n+                                       const int32_t column_batch_size,\n+                                       int64_t* num_rows) = 0;\n \n   /// \\brief Return a reader for the RowGroup, this object must not outlive the\n   ///   FileReader.\n-  std::shared_ptr<RowGroupReader> RowGroup(int row_group_index);\n+  virtual std::shared_ptr<RowGroupReader> RowGroup(int row_group_index) = 0;\n \n-  int num_row_groups() const;\n+  virtual int num_row_groups() const = 0;\n \n-  const ParquetFileReader* parquet_reader() const;\n-\n-  /// Set the number of threads to use during reads of multiple columns. By\n-  /// default only 1 thread is used\n-  /// \\deprecated Use set_use_threads instead.\n-  ARROW_DEPRECATED(\"Use set_use_threads instead\")\n-  void set_num_threads(int num_threads);\n+  virtual ParquetFileReader* parquet_reader() const = 0;\n \n   /// Set whether to use multiple threads during reads of multiple columns.\n   /// By default only one thread is used.\n-  void set_use_threads(bool use_threads);\n-\n-  virtual ~FileReader();\n+  virtual void set_use_threads(bool use_threads) = 0;\n \n- private:\n-  FileReader(::arrow::MemoryPool* pool, std::unique_ptr<ParquetFileReader> reader,\n-             const ArrowReaderProperties& properties);\n-\n-  friend ColumnChunkReader;\n-  friend RowGroupReader;\n-\n-  class PARQUET_NO_EXPORT Impl;\n-  std::unique_ptr<Impl> impl_;\n+  virtual ~FileReader() = default;\n \n Review comment:\n   Hmm... I'm not sure it's ok to use `= default` on a virtual destructor of a DLL-exported class. I think it's safer to define an empty destructor explicitly in the `.cc` file, though I may be mistaken.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.952+0000",
                    "updated": "2019-07-30T10:20:11.952+0000",
                    "started": "2019-07-30T10:20:11.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284850",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308640786\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.cc\n ##########\n @@ -1790,40 +784,195 @@ Status StructImpl::NextBatch(int64_t records_to_read,\n   return Status::OK();\n }\n \n-std::shared_ptr<ColumnChunkReader> RowGroupReader::Column(int column_index) {\n-  return std::shared_ptr<ColumnChunkReader>(\n-      new ColumnChunkReader(impl_, row_group_index_, column_index));\n+// ----------------------------------------------------------------------\n+// File reader implementation\n+\n+Status FileReaderImpl::GetReaderForNode(int index, const Node* node,\n+                                        const std::vector<int>& indices,\n+                                        int16_t def_level,\n+                                        FileColumnIteratorFactory iterator_factory,\n+                                        std::unique_ptr<ColumnReaderImpl>* out) {\n+  *out = nullptr;\n+\n+  if (schema::IsSimpleStruct(node)) {\n+    const schema::GroupNode* group = static_cast<const schema::GroupNode*>(node);\n+    std::vector<std::shared_ptr<ColumnReaderImpl>> children;\n+    for (int i = 0; i < group->field_count(); i++) {\n+      std::unique_ptr<ColumnReaderImpl> child_reader;\n+      // TODO(itaiin): Remove the -1 index hack when all types of nested reads\n+      // are supported. This currently just signals the lower level reader resolution\n+      // to abort\n+      RETURN_NOT_OK(GetReaderForNode(index, group->field(i).get(), indices,\n+                                     static_cast<int16_t>(def_level + 1),\n+                                     iterator_factory, &child_reader));\n+      if (child_reader != nullptr) {\n+        children.push_back(std::move(child_reader));\n+      }\n+    }\n+\n+    if (children.size() > 0) {\n+      *out = std::unique_ptr<ColumnReaderImpl>(\n+          new StructImpl(children, def_level, pool_, node));\n+    }\n+  } else {\n+    // This should be a flat field case - translate the field index to\n+    // the correct column index by walking down to the leaf node\n+    const Node* walker = node;\n+    while (!walker->is_primitive()) {\n+      DCHECK(walker->is_group());\n+      auto group = static_cast<const schema::GroupNode*>(walker);\n+      if (group->field_count() != 1) {\n+        return Status::NotImplemented(\"lists with structs are not supported.\");\n+      }\n+      walker = group->field(0).get();\n+    }\n+    auto column_index = reader_->metadata()->schema()->ColumnIndex(*walker);\n+\n+    // If the index of the column is found then a reader for the column is needed.\n+    // Otherwise *out keeps the nullptr value.\n+    if (std::find(indices.begin(), indices.end(), column_index) != indices.end()) {\n+      std::unique_ptr<ColumnReader> reader;\n+      RETURN_NOT_OK(GetColumn(column_index, iterator_factory, &reader));\n+      *out = std::unique_ptr<ColumnReaderImpl>(\n+          static_cast<ColumnReaderImpl*>(reader.release()));\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status FileReaderImpl::ReadRowGroups(const std::vector<int>& row_groups,\n+                                     const std::vector<int>& indices,\n+                                     std::shared_ptr<Table>* out) {\n+  BEGIN_PARQUET_CATCH_EXCEPTIONS\n+\n+  std::shared_ptr<::arrow::Schema> schema;\n+  RETURN_NOT_OK(GetSchema(indices, &schema));\n+\n+  // We only need to read schema fields which have columns indicated\n+  // in the indices vector\n+  std::vector<int> field_indices;\n+  if (!schema::ColumnIndicesToFieldIndices(*reader_->metadata()->schema(), indices,\n+                                           &field_indices)) {\n+    return Status::Invalid(\"Invalid column index\");\n+  }\n+  int num_fields = static_cast<int>(field_indices.size());\n+  std::vector<std::shared_ptr<ChunkedArray>> columns(num_fields);\n+\n+  auto ReadColumnFunc = [&](int i) {\n+    return ReadSchemaField(field_indices[i], indices, row_groups, &columns[i]);\n+  };\n+\n+  if (reader_properties_.use_threads()) {\n+    std::vector<std::future<Status>> futures;\n+    auto pool = ::arrow::internal::GetCpuThreadPool();\n+    for (int i = 0; i < num_fields; i++) {\n+      futures.push_back(pool->Submit(ReadColumnFunc, i));\n+    }\n+    Status final_status = Status::OK();\n+    for (auto& fut : futures) {\n+      Status st = fut.get();\n+      if (!st.ok()) {\n+        final_status = std::move(st);\n \n Review comment:\n   Or simply `final_status &= fut.get()`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:11.977+0000",
                    "updated": "2019-07-30T10:20:11.977+0000",
                    "started": "2019-07-30T10:20:11.977+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284851",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308642573\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -0,0 +1,616 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"parquet/arrow/reader_internal.h\"\n+\n+#include <algorithm>\n+#include <climits>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/int-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/ubsan.h\"\n+\n+#include \"parquet/column_reader.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+\n+using arrow::Array;\n+using arrow::BooleanArray;\n+using arrow::ChunkedArray;\n+using arrow::DataType;\n+using arrow::Field;\n+using arrow::Int32Array;\n+using arrow::ListArray;\n+using arrow::MemoryPool;\n+using arrow::ResizableBuffer;\n+using arrow::Status;\n+using arrow::StructArray;\n+using arrow::Table;\n+using arrow::TimestampArray;\n+using arrow::compute::Datum;\n+\n+using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::SafeLeftShift;\n+using ::arrow::util::SafeLoadAs;\n+\n+using parquet::internal::RecordReader;\n+\n+namespace parquet {\n+namespace arrow {\n+\n+template <typename ArrowType>\n+using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n+\n+// ----------------------------------------------------------------------\n+// Primitive types\n+\n+template <typename ArrowType, typename ParquetType>\n+Status TransferInt(RecordReader* reader, MemoryPool* pool,\n+                   const std::shared_ptr<DataType>& type, Datum* out) {\n+  using ArrowCType = typename ArrowType::c_type;\n+  using ParquetCType = typename ParquetType::c_type;\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(ArrowCType), &data));\n+\n+  auto values = reinterpret_cast<const ParquetCType*>(reader->values());\n+  auto out_ptr = reinterpret_cast<ArrowCType*>(data->mutable_data());\n+  std::copy(values, values + length, out_ptr);\n+  *out = std::make_shared<ArrayType<ArrowType>>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<Array> TransferZeroCopy(RecordReader* reader,\n+                                        const std::shared_ptr<DataType>& type) {\n+  std::vector<std::shared_ptr<Buffer>> buffers = {reader->ReleaseIsValid(),\n+                                                  reader->ReleaseValues()};\n+  auto data = std::make_shared<::arrow::ArrayData>(type, reader->values_written(),\n+                                                   buffers, reader->null_count());\n+  return ::arrow::MakeArray(data);\n+}\n+\n+Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+\n+  const int64_t buffer_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, buffer_size, &data));\n+\n+  // Transfer boolean values to packed bitmap\n+  auto values = reinterpret_cast<const bool*>(reader->values());\n+  uint8_t* data_ptr = data->mutable_data();\n+  memset(data_ptr, 0, buffer_size);\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    if (values[i]) {\n+      ::arrow::BitUtil::SetBit(data_ptr, i);\n \n Review comment:\n   Should this use `GenerateBitsUnrolled` for higher perf?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:12.076+0000",
                    "updated": "2019-07-30T10:20:12.076+0000",
                    "started": "2019-07-30T10:20:12.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284852",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308643589\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -0,0 +1,616 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"parquet/arrow/reader_internal.h\"\n+\n+#include <algorithm>\n+#include <climits>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/int-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/ubsan.h\"\n+\n+#include \"parquet/column_reader.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+\n+using arrow::Array;\n+using arrow::BooleanArray;\n+using arrow::ChunkedArray;\n+using arrow::DataType;\n+using arrow::Field;\n+using arrow::Int32Array;\n+using arrow::ListArray;\n+using arrow::MemoryPool;\n+using arrow::ResizableBuffer;\n+using arrow::Status;\n+using arrow::StructArray;\n+using arrow::Table;\n+using arrow::TimestampArray;\n+using arrow::compute::Datum;\n+\n+using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::SafeLeftShift;\n+using ::arrow::util::SafeLoadAs;\n+\n+using parquet::internal::RecordReader;\n+\n+namespace parquet {\n+namespace arrow {\n+\n+template <typename ArrowType>\n+using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n+\n+// ----------------------------------------------------------------------\n+// Primitive types\n+\n+template <typename ArrowType, typename ParquetType>\n+Status TransferInt(RecordReader* reader, MemoryPool* pool,\n+                   const std::shared_ptr<DataType>& type, Datum* out) {\n+  using ArrowCType = typename ArrowType::c_type;\n+  using ParquetCType = typename ParquetType::c_type;\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(ArrowCType), &data));\n+\n+  auto values = reinterpret_cast<const ParquetCType*>(reader->values());\n+  auto out_ptr = reinterpret_cast<ArrowCType*>(data->mutable_data());\n+  std::copy(values, values + length, out_ptr);\n+  *out = std::make_shared<ArrayType<ArrowType>>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<Array> TransferZeroCopy(RecordReader* reader,\n+                                        const std::shared_ptr<DataType>& type) {\n+  std::vector<std::shared_ptr<Buffer>> buffers = {reader->ReleaseIsValid(),\n+                                                  reader->ReleaseValues()};\n+  auto data = std::make_shared<::arrow::ArrayData>(type, reader->values_written(),\n+                                                   buffers, reader->null_count());\n+  return ::arrow::MakeArray(data);\n+}\n+\n+Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+\n+  const int64_t buffer_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, buffer_size, &data));\n+\n+  // Transfer boolean values to packed bitmap\n+  auto values = reinterpret_cast<const bool*>(reader->values());\n+  uint8_t* data_ptr = data->mutable_data();\n+  memset(data_ptr, 0, buffer_size);\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    if (values[i]) {\n+      ::arrow::BitUtil::SetBit(data_ptr, i);\n+    }\n+  }\n+\n+  *out = std::make_shared<BooleanArray>(length, data, reader->ReleaseIsValid(),\n+                                        reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n+                     const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const Int96*>(reader->values());\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto data_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+  for (int64_t i = 0; i < length; i++) {\n+    *data_ptr++ = Int96GetNanoSeconds(values[i]);\n+  }\n+  *out = std::make_shared<TimestampArray>(type, length, data, reader->ReleaseIsValid(),\n+                                          reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferDate64(RecordReader* reader, MemoryPool* pool,\n+                      const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const int32_t*>(reader->values());\n+\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto out_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    *out_ptr++ = static_cast<int64_t>(values[i]) * kMillisecondsPerDay;\n+  }\n+\n+  *out = std::make_shared<::arrow::Date64Array>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+// ----------------------------------------------------------------------\n+// Binary, direct to dictionary-encoded\n+\n+// Some ugly hacks here for now to handle binary dictionaries casted to their\n+// logical type\n+std::shared_ptr<Array> ShallowCast(const Array& arr,\n+                                   const std::shared_ptr<DataType>& new_type) {\n+  std::shared_ptr<::arrow::ArrayData> new_data = arr.data()->Copy();\n+  new_data->type = new_type;\n+  if (new_type->id() == ::arrow::Type::DICTIONARY) {\n+    // Cast dictionary, too\n+    const auto& dict_type = static_cast<const ::arrow::DictionaryType&>(*new_type);\n+    new_data->dictionary = ShallowCast(*new_data->dictionary, dict_type.value_type());\n+  }\n+  return MakeArray(new_data);\n+}\n+\n+std::shared_ptr<ChunkedArray> CastChunksTo(\n+    const ChunkedArray& data, const std::shared_ptr<DataType>& logical_value_type) {\n+  std::vector<std::shared_ptr<Array>> string_chunks;\n+  for (int i = 0; i < data.num_chunks(); ++i) {\n+    string_chunks.push_back(ShallowCast(*data.chunk(i), logical_value_type));\n+  }\n+  return std::make_shared<ChunkedArray>(string_chunks);\n+}\n+\n+Status TransferDictionary(RecordReader* reader,\n+                          const std::shared_ptr<DataType>& logical_value_type,\n+                          std::shared_ptr<ChunkedArray>* out) {\n+  auto dict_reader = dynamic_cast<internal::DictionaryRecordReader*>(reader);\n \n Review comment:\n   Use `checked_cast`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:12.078+0000",
                    "updated": "2019-07-30T10:20:12.078+0000",
                    "started": "2019-07-30T10:20:12.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284853",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308643534\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -0,0 +1,616 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"parquet/arrow/reader_internal.h\"\n+\n+#include <algorithm>\n+#include <climits>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/int-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/ubsan.h\"\n+\n+#include \"parquet/column_reader.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+\n+using arrow::Array;\n+using arrow::BooleanArray;\n+using arrow::ChunkedArray;\n+using arrow::DataType;\n+using arrow::Field;\n+using arrow::Int32Array;\n+using arrow::ListArray;\n+using arrow::MemoryPool;\n+using arrow::ResizableBuffer;\n+using arrow::Status;\n+using arrow::StructArray;\n+using arrow::Table;\n+using arrow::TimestampArray;\n+using arrow::compute::Datum;\n+\n+using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::SafeLeftShift;\n+using ::arrow::util::SafeLoadAs;\n+\n+using parquet::internal::RecordReader;\n+\n+namespace parquet {\n+namespace arrow {\n+\n+template <typename ArrowType>\n+using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n+\n+// ----------------------------------------------------------------------\n+// Primitive types\n+\n+template <typename ArrowType, typename ParquetType>\n+Status TransferInt(RecordReader* reader, MemoryPool* pool,\n+                   const std::shared_ptr<DataType>& type, Datum* out) {\n+  using ArrowCType = typename ArrowType::c_type;\n+  using ParquetCType = typename ParquetType::c_type;\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(ArrowCType), &data));\n+\n+  auto values = reinterpret_cast<const ParquetCType*>(reader->values());\n+  auto out_ptr = reinterpret_cast<ArrowCType*>(data->mutable_data());\n+  std::copy(values, values + length, out_ptr);\n+  *out = std::make_shared<ArrayType<ArrowType>>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<Array> TransferZeroCopy(RecordReader* reader,\n+                                        const std::shared_ptr<DataType>& type) {\n+  std::vector<std::shared_ptr<Buffer>> buffers = {reader->ReleaseIsValid(),\n+                                                  reader->ReleaseValues()};\n+  auto data = std::make_shared<::arrow::ArrayData>(type, reader->values_written(),\n+                                                   buffers, reader->null_count());\n+  return ::arrow::MakeArray(data);\n+}\n+\n+Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+\n+  const int64_t buffer_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, buffer_size, &data));\n+\n+  // Transfer boolean values to packed bitmap\n+  auto values = reinterpret_cast<const bool*>(reader->values());\n+  uint8_t* data_ptr = data->mutable_data();\n+  memset(data_ptr, 0, buffer_size);\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    if (values[i]) {\n+      ::arrow::BitUtil::SetBit(data_ptr, i);\n+    }\n+  }\n+\n+  *out = std::make_shared<BooleanArray>(length, data, reader->ReleaseIsValid(),\n+                                        reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n+                     const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const Int96*>(reader->values());\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto data_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+  for (int64_t i = 0; i < length; i++) {\n+    *data_ptr++ = Int96GetNanoSeconds(values[i]);\n+  }\n+  *out = std::make_shared<TimestampArray>(type, length, data, reader->ReleaseIsValid(),\n+                                          reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferDate64(RecordReader* reader, MemoryPool* pool,\n+                      const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const int32_t*>(reader->values());\n+\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto out_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    *out_ptr++ = static_cast<int64_t>(values[i]) * kMillisecondsPerDay;\n+  }\n+\n+  *out = std::make_shared<::arrow::Date64Array>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+// ----------------------------------------------------------------------\n+// Binary, direct to dictionary-encoded\n+\n+// Some ugly hacks here for now to handle binary dictionaries casted to their\n+// logical type\n+std::shared_ptr<Array> ShallowCast(const Array& arr,\n+                                   const std::shared_ptr<DataType>& new_type) {\n+  std::shared_ptr<::arrow::ArrayData> new_data = arr.data()->Copy();\n+  new_data->type = new_type;\n+  if (new_type->id() == ::arrow::Type::DICTIONARY) {\n+    // Cast dictionary, too\n+    const auto& dict_type = static_cast<const ::arrow::DictionaryType&>(*new_type);\n+    new_data->dictionary = ShallowCast(*new_data->dictionary, dict_type.value_type());\n+  }\n+  return MakeArray(new_data);\n+}\n+\n+std::shared_ptr<ChunkedArray> CastChunksTo(\n+    const ChunkedArray& data, const std::shared_ptr<DataType>& logical_value_type) {\n+  std::vector<std::shared_ptr<Array>> string_chunks;\n+  for (int i = 0; i < data.num_chunks(); ++i) {\n+    string_chunks.push_back(ShallowCast(*data.chunk(i), logical_value_type));\n+  }\n+  return std::make_shared<ChunkedArray>(string_chunks);\n+}\n+\n+Status TransferDictionary(RecordReader* reader,\n+                          const std::shared_ptr<DataType>& logical_value_type,\n+                          std::shared_ptr<ChunkedArray>* out) {\n+  auto dict_reader = dynamic_cast<internal::DictionaryRecordReader*>(reader);\n+  DCHECK(dict_reader);\n+  *out = dict_reader->GetResult();\n+\n+  const auto& dict_type = static_cast<const ::arrow::DictionaryType&>(*(*out)->type());\n+  if (!logical_value_type->Equals(*dict_type.value_type())) {\n+    *out = CastChunksTo(**out,\n+                        ::arrow::dictionary(dict_type.index_type(), logical_value_type));\n+  }\n+  return Status::OK();\n+}\n+\n+Status TransferBinary(RecordReader* reader,\n+                      const std::shared_ptr<DataType>& logical_value_type,\n+                      std::shared_ptr<ChunkedArray>* out) {\n+  if (reader->read_dictionary()) {\n+    return TransferDictionary(reader, logical_value_type, out);\n+  }\n+  auto binary_reader = dynamic_cast<internal::BinaryRecordReader*>(reader);\n \n Review comment:\n   Use `checked_cast`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T10:20:12.171+0000",
                    "updated": "2019-07-30T10:20:12.171+0000",
                    "started": "2019-07-30T10:20:12.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284854",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308757854\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/arrow-reader-writer-test.cc\n ##########\n @@ -1845,8 +1845,8 @@ TEST(TestArrowReadWrite, MultithreadedRead) {\n }\n \n TEST(TestArrowReadWrite, ReadSingleRowGroup) {\n-  const int num_columns = 20;\n-  const int num_rows = 1000;\n+  const int num_columns = 10;\n+  const int num_rows = 100;\n \n Review comment:\n   Yes, and easier to debug\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:33:28.578+0000",
                    "updated": "2019-07-30T14:33:28.578+0000",
                    "started": "2019-07-30T14:33:28.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284989",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308758000\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.cc\n ##########\n @@ -1790,40 +784,195 @@ Status StructImpl::NextBatch(int64_t records_to_read,\n   return Status::OK();\n }\n \n-std::shared_ptr<ColumnChunkReader> RowGroupReader::Column(int column_index) {\n-  return std::shared_ptr<ColumnChunkReader>(\n-      new ColumnChunkReader(impl_, row_group_index_, column_index));\n+// ----------------------------------------------------------------------\n+// File reader implementation\n+\n+Status FileReaderImpl::GetReaderForNode(int index, const Node* node,\n+                                        const std::vector<int>& indices,\n+                                        int16_t def_level,\n+                                        FileColumnIteratorFactory iterator_factory,\n+                                        std::unique_ptr<ColumnReaderImpl>* out) {\n+  *out = nullptr;\n+\n+  if (schema::IsSimpleStruct(node)) {\n+    const schema::GroupNode* group = static_cast<const schema::GroupNode*>(node);\n+    std::vector<std::shared_ptr<ColumnReaderImpl>> children;\n+    for (int i = 0; i < group->field_count(); i++) {\n+      std::unique_ptr<ColumnReaderImpl> child_reader;\n+      // TODO(itaiin): Remove the -1 index hack when all types of nested reads\n+      // are supported. This currently just signals the lower level reader resolution\n+      // to abort\n+      RETURN_NOT_OK(GetReaderForNode(index, group->field(i).get(), indices,\n+                                     static_cast<int16_t>(def_level + 1),\n+                                     iterator_factory, &child_reader));\n+      if (child_reader != nullptr) {\n+        children.push_back(std::move(child_reader));\n+      }\n+    }\n+\n+    if (children.size() > 0) {\n+      *out = std::unique_ptr<ColumnReaderImpl>(\n+          new StructImpl(children, def_level, pool_, node));\n+    }\n+  } else {\n+    // This should be a flat field case - translate the field index to\n+    // the correct column index by walking down to the leaf node\n+    const Node* walker = node;\n+    while (!walker->is_primitive()) {\n+      DCHECK(walker->is_group());\n+      auto group = static_cast<const schema::GroupNode*>(walker);\n+      if (group->field_count() != 1) {\n+        return Status::NotImplemented(\"lists with structs are not supported.\");\n+      }\n+      walker = group->field(0).get();\n+    }\n+    auto column_index = reader_->metadata()->schema()->ColumnIndex(*walker);\n+\n+    // If the index of the column is found then a reader for the column is needed.\n+    // Otherwise *out keeps the nullptr value.\n+    if (std::find(indices.begin(), indices.end(), column_index) != indices.end()) {\n+      std::unique_ptr<ColumnReader> reader;\n+      RETURN_NOT_OK(GetColumn(column_index, iterator_factory, &reader));\n+      *out = std::unique_ptr<ColumnReaderImpl>(\n+          static_cast<ColumnReaderImpl*>(reader.release()));\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status FileReaderImpl::ReadRowGroups(const std::vector<int>& row_groups,\n+                                     const std::vector<int>& indices,\n+                                     std::shared_ptr<Table>* out) {\n+  BEGIN_PARQUET_CATCH_EXCEPTIONS\n+\n+  std::shared_ptr<::arrow::Schema> schema;\n+  RETURN_NOT_OK(GetSchema(indices, &schema));\n+\n+  // We only need to read schema fields which have columns indicated\n+  // in the indices vector\n+  std::vector<int> field_indices;\n+  if (!schema::ColumnIndicesToFieldIndices(*reader_->metadata()->schema(), indices,\n+                                           &field_indices)) {\n+    return Status::Invalid(\"Invalid column index\");\n+  }\n+  int num_fields = static_cast<int>(field_indices.size());\n+  std::vector<std::shared_ptr<ChunkedArray>> columns(num_fields);\n+\n+  auto ReadColumnFunc = [&](int i) {\n+    return ReadSchemaField(field_indices[i], indices, row_groups, &columns[i]);\n+  };\n+\n+  if (reader_properties_.use_threads()) {\n+    std::vector<std::future<Status>> futures;\n+    auto pool = ::arrow::internal::GetCpuThreadPool();\n+    for (int i = 0; i < num_fields; i++) {\n+      futures.push_back(pool->Submit(ReadColumnFunc, i));\n+    }\n+    Status final_status = Status::OK();\n+    for (auto& fut : futures) {\n+      Status st = fut.get();\n+      if (!st.ok()) {\n+        final_status = std::move(st);\n \n Review comment:\n   This is copy-paste\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:33:44.176+0000",
                    "updated": "2019-07-30T14:33:44.176+0000",
                    "started": "2019-07-30T14:33:44.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284991",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308758074\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.h\n ##########\n @@ -201,117 +192,78 @@ class PARQUET_EXPORT FileReader {\n   // 2 foo3\n   //\n   // i=0 will read the entire foo struct, i=1 the foo2 primitive column etc\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::ChunkedArray>* out);\n-\n-  /// \\note Deprecated since 0.12\n-  ARROW_DEPRECATED(\"Use version with ChunkedArray output\")\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::Array>* out);\n+  virtual ::arrow::Status ReadSchemaField(\n+      int i, std::shared_ptr<::arrow::ChunkedArray>* out) = 0;\n \n   /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices, the\n   ///    ordering in row_group_indices matters.\n   /// \\returns error Status if row_group_indices contains invalid index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n-\n-  /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices,\n-  ///     whose columns are selected by column_indices. The ordering in row_group_indices\n-  ///     and column_indices matter.\n-  /// \\returns error Status if either row_group_indices or column_indices contains invalid\n-  ///    index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       const std::vector<int>& column_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n+\n+  /// \\brief Return a RecordBatchReader of row groups selected from\n+  ///     row_group_indices, whose columns are selected by column_indices. The\n+  ///     ordering in row_group_indices and column_indices matter.\n+  /// \\returns error Status if either row_group_indices or column_indices\n+  ///    contains invalid index\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n   // Read a table of columns into a Table\n-  ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out) = 0;\n \n   // Read a table of columns into a Table. Read only the indicated column\n   // indices (relative to the schema)\n-  ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n-                            std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n+                                    std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n-                               std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n+                                       std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                const std::vector<int>& column_indices,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n   /// \\brief Scan file contents with one thread, return number of rows\n-  ::arrow::Status ScanContents(std::vector<int> columns, const int32_t column_batch_size,\n-                               int64_t* num_rows);\n+  virtual ::arrow::Status ScanContents(std::vector<int> columns,\n+                                       const int32_t column_batch_size,\n+                                       int64_t* num_rows) = 0;\n \n   /// \\brief Return a reader for the RowGroup, this object must not outlive the\n   ///   FileReader.\n-  std::shared_ptr<RowGroupReader> RowGroup(int row_group_index);\n+  virtual std::shared_ptr<RowGroupReader> RowGroup(int row_group_index) = 0;\n \n-  int num_row_groups() const;\n+  virtual int num_row_groups() const = 0;\n \n-  const ParquetFileReader* parquet_reader() const;\n-\n-  /// Set the number of threads to use during reads of multiple columns. By\n-  /// default only 1 thread is used\n-  /// \\deprecated Use set_use_threads instead.\n-  ARROW_DEPRECATED(\"Use set_use_threads instead\")\n-  void set_num_threads(int num_threads);\n+  virtual ParquetFileReader* parquet_reader() const = 0;\n \n   /// Set whether to use multiple threads during reads of multiple columns.\n   /// By default only one thread is used.\n-  void set_use_threads(bool use_threads);\n-\n-  virtual ~FileReader();\n+  virtual void set_use_threads(bool use_threads) = 0;\n \n- private:\n-  FileReader(::arrow::MemoryPool* pool, std::unique_ptr<ParquetFileReader> reader,\n-             const ArrowReaderProperties& properties);\n-\n-  friend ColumnChunkReader;\n-  friend RowGroupReader;\n-\n-  class PARQUET_NO_EXPORT Impl;\n-  std::unique_ptr<Impl> impl_;\n+  virtual ~FileReader() = default;\n };\n \n-class PARQUET_EXPORT RowGroupReader {\n+class RowGroupReader {\n \n Review comment:\n   Nope\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:33:53.592+0000",
                    "updated": "2019-07-30T14:33:53.592+0000",
                    "started": "2019-07-30T14:33:53.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284992",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308758282\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.h\n ##########\n @@ -201,117 +192,78 @@ class PARQUET_EXPORT FileReader {\n   // 2 foo3\n   //\n   // i=0 will read the entire foo struct, i=1 the foo2 primitive column etc\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::ChunkedArray>* out);\n-\n-  /// \\note Deprecated since 0.12\n-  ARROW_DEPRECATED(\"Use version with ChunkedArray output\")\n-  ::arrow::Status ReadSchemaField(int i, std::shared_ptr<::arrow::Array>* out);\n+  virtual ::arrow::Status ReadSchemaField(\n+      int i, std::shared_ptr<::arrow::ChunkedArray>* out) = 0;\n \n   /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices, the\n   ///    ordering in row_group_indices matters.\n   /// \\returns error Status if row_group_indices contains invalid index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n-\n-  /// \\brief Return a RecordBatchReader of row groups selected from row_group_indices,\n-  ///     whose columns are selected by column_indices. The ordering in row_group_indices\n-  ///     and column_indices matter.\n-  /// \\returns error Status if either row_group_indices or column_indices contains invalid\n-  ///    index\n-  ::arrow::Status GetRecordBatchReader(const std::vector<int>& row_group_indices,\n-                                       const std::vector<int>& column_indices,\n-                                       std::shared_ptr<::arrow::RecordBatchReader>* out);\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n+\n+  /// \\brief Return a RecordBatchReader of row groups selected from\n+  ///     row_group_indices, whose columns are selected by column_indices. The\n+  ///     ordering in row_group_indices and column_indices matter.\n+  /// \\returns error Status if either row_group_indices or column_indices\n+  ///    contains invalid index\n+  virtual ::arrow::Status GetRecordBatchReader(\n+      const std::vector<int>& row_group_indices, const std::vector<int>& column_indices,\n+      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n   // Read a table of columns into a Table\n-  ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(std::shared_ptr<::arrow::Table>* out) = 0;\n \n   // Read a table of columns into a Table. Read only the indicated column\n   // indices (relative to the schema)\n-  ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n-                            std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadTable(const std::vector<int>& column_indices,\n+                                    std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n-                               std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, const std::vector<int>& column_indices,\n+                                       std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroup(int i, std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                const std::vector<int>& column_indices,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        const std::vector<int>& column_indices,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n-  ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n-                                std::shared_ptr<::arrow::Table>* out);\n+  virtual ::arrow::Status ReadRowGroups(const std::vector<int>& row_groups,\n+                                        std::shared_ptr<::arrow::Table>* out) = 0;\n \n   /// \\brief Scan file contents with one thread, return number of rows\n-  ::arrow::Status ScanContents(std::vector<int> columns, const int32_t column_batch_size,\n-                               int64_t* num_rows);\n+  virtual ::arrow::Status ScanContents(std::vector<int> columns,\n+                                       const int32_t column_batch_size,\n+                                       int64_t* num_rows) = 0;\n \n   /// \\brief Return a reader for the RowGroup, this object must not outlive the\n   ///   FileReader.\n-  std::shared_ptr<RowGroupReader> RowGroup(int row_group_index);\n+  virtual std::shared_ptr<RowGroupReader> RowGroup(int row_group_index) = 0;\n \n-  int num_row_groups() const;\n+  virtual int num_row_groups() const = 0;\n \n-  const ParquetFileReader* parquet_reader() const;\n-\n-  /// Set the number of threads to use during reads of multiple columns. By\n-  /// default only 1 thread is used\n-  /// \\deprecated Use set_use_threads instead.\n-  ARROW_DEPRECATED(\"Use set_use_threads instead\")\n-  void set_num_threads(int num_threads);\n+  virtual ParquetFileReader* parquet_reader() const = 0;\n \n   /// Set whether to use multiple threads during reads of multiple columns.\n   /// By default only one thread is used.\n-  void set_use_threads(bool use_threads);\n-\n-  virtual ~FileReader();\n+  virtual void set_use_threads(bool use_threads) = 0;\n \n- private:\n-  FileReader(::arrow::MemoryPool* pool, std::unique_ptr<ParquetFileReader> reader,\n-             const ArrowReaderProperties& properties);\n-\n-  friend ColumnChunkReader;\n-  friend RowGroupReader;\n-\n-  class PARQUET_NO_EXPORT Impl;\n-  std::unique_ptr<Impl> impl_;\n+  virtual ~FileReader() = default;\n \n Review comment:\n   Hm. Would be nice to know what the C++ standard says\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:34:16.633+0000",
                    "updated": "2019-07-30T14:34:16.633+0000",
                    "started": "2019-07-30T14:34:16.633+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284994",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308758346\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -0,0 +1,616 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"parquet/arrow/reader_internal.h\"\n+\n+#include <algorithm>\n+#include <climits>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/int-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/ubsan.h\"\n+\n+#include \"parquet/column_reader.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+\n+using arrow::Array;\n+using arrow::BooleanArray;\n+using arrow::ChunkedArray;\n+using arrow::DataType;\n+using arrow::Field;\n+using arrow::Int32Array;\n+using arrow::ListArray;\n+using arrow::MemoryPool;\n+using arrow::ResizableBuffer;\n+using arrow::Status;\n+using arrow::StructArray;\n+using arrow::Table;\n+using arrow::TimestampArray;\n+using arrow::compute::Datum;\n+\n+using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::SafeLeftShift;\n+using ::arrow::util::SafeLoadAs;\n+\n+using parquet::internal::RecordReader;\n+\n+namespace parquet {\n+namespace arrow {\n+\n+template <typename ArrowType>\n+using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n+\n+// ----------------------------------------------------------------------\n+// Primitive types\n+\n+template <typename ArrowType, typename ParquetType>\n+Status TransferInt(RecordReader* reader, MemoryPool* pool,\n+                   const std::shared_ptr<DataType>& type, Datum* out) {\n+  using ArrowCType = typename ArrowType::c_type;\n+  using ParquetCType = typename ParquetType::c_type;\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(ArrowCType), &data));\n+\n+  auto values = reinterpret_cast<const ParquetCType*>(reader->values());\n+  auto out_ptr = reinterpret_cast<ArrowCType*>(data->mutable_data());\n+  std::copy(values, values + length, out_ptr);\n+  *out = std::make_shared<ArrayType<ArrowType>>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<Array> TransferZeroCopy(RecordReader* reader,\n+                                        const std::shared_ptr<DataType>& type) {\n+  std::vector<std::shared_ptr<Buffer>> buffers = {reader->ReleaseIsValid(),\n+                                                  reader->ReleaseValues()};\n+  auto data = std::make_shared<::arrow::ArrayData>(type, reader->values_written(),\n+                                                   buffers, reader->null_count());\n+  return ::arrow::MakeArray(data);\n+}\n+\n+Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+\n+  const int64_t buffer_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, buffer_size, &data));\n+\n+  // Transfer boolean values to packed bitmap\n+  auto values = reinterpret_cast<const bool*>(reader->values());\n+  uint8_t* data_ptr = data->mutable_data();\n+  memset(data_ptr, 0, buffer_size);\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    if (values[i]) {\n+      ::arrow::BitUtil::SetBit(data_ptr, i);\n \n Review comment:\n   Old code\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:34:23.821+0000",
                    "updated": "2019-07-30T14:34:23.821+0000",
                    "started": "2019-07-30T14:34:23.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284995",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308758489\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -0,0 +1,616 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"parquet/arrow/reader_internal.h\"\n+\n+#include <algorithm>\n+#include <climits>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/int-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/ubsan.h\"\n+\n+#include \"parquet/column_reader.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+\n+using arrow::Array;\n+using arrow::BooleanArray;\n+using arrow::ChunkedArray;\n+using arrow::DataType;\n+using arrow::Field;\n+using arrow::Int32Array;\n+using arrow::ListArray;\n+using arrow::MemoryPool;\n+using arrow::ResizableBuffer;\n+using arrow::Status;\n+using arrow::StructArray;\n+using arrow::Table;\n+using arrow::TimestampArray;\n+using arrow::compute::Datum;\n+\n+using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::SafeLeftShift;\n+using ::arrow::util::SafeLoadAs;\n+\n+using parquet::internal::RecordReader;\n+\n+namespace parquet {\n+namespace arrow {\n+\n+template <typename ArrowType>\n+using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n+\n+// ----------------------------------------------------------------------\n+// Primitive types\n+\n+template <typename ArrowType, typename ParquetType>\n+Status TransferInt(RecordReader* reader, MemoryPool* pool,\n+                   const std::shared_ptr<DataType>& type, Datum* out) {\n+  using ArrowCType = typename ArrowType::c_type;\n+  using ParquetCType = typename ParquetType::c_type;\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(ArrowCType), &data));\n+\n+  auto values = reinterpret_cast<const ParquetCType*>(reader->values());\n+  auto out_ptr = reinterpret_cast<ArrowCType*>(data->mutable_data());\n+  std::copy(values, values + length, out_ptr);\n+  *out = std::make_shared<ArrayType<ArrowType>>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<Array> TransferZeroCopy(RecordReader* reader,\n+                                        const std::shared_ptr<DataType>& type) {\n+  std::vector<std::shared_ptr<Buffer>> buffers = {reader->ReleaseIsValid(),\n+                                                  reader->ReleaseValues()};\n+  auto data = std::make_shared<::arrow::ArrayData>(type, reader->values_written(),\n+                                                   buffers, reader->null_count());\n+  return ::arrow::MakeArray(data);\n+}\n+\n+Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+\n+  const int64_t buffer_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, buffer_size, &data));\n+\n+  // Transfer boolean values to packed bitmap\n+  auto values = reinterpret_cast<const bool*>(reader->values());\n+  uint8_t* data_ptr = data->mutable_data();\n+  memset(data_ptr, 0, buffer_size);\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    if (values[i]) {\n+      ::arrow::BitUtil::SetBit(data_ptr, i);\n+    }\n+  }\n+\n+  *out = std::make_shared<BooleanArray>(length, data, reader->ReleaseIsValid(),\n+                                        reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n+                     const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const Int96*>(reader->values());\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto data_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+  for (int64_t i = 0; i < length; i++) {\n+    *data_ptr++ = Int96GetNanoSeconds(values[i]);\n+  }\n+  *out = std::make_shared<TimestampArray>(type, length, data, reader->ReleaseIsValid(),\n+                                          reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferDate64(RecordReader* reader, MemoryPool* pool,\n+                      const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const int32_t*>(reader->values());\n+\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto out_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    *out_ptr++ = static_cast<int64_t>(values[i]) * kMillisecondsPerDay;\n+  }\n+\n+  *out = std::make_shared<::arrow::Date64Array>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+// ----------------------------------------------------------------------\n+// Binary, direct to dictionary-encoded\n+\n+// Some ugly hacks here for now to handle binary dictionaries casted to their\n+// logical type\n+std::shared_ptr<Array> ShallowCast(const Array& arr,\n+                                   const std::shared_ptr<DataType>& new_type) {\n+  std::shared_ptr<::arrow::ArrayData> new_data = arr.data()->Copy();\n+  new_data->type = new_type;\n+  if (new_type->id() == ::arrow::Type::DICTIONARY) {\n+    // Cast dictionary, too\n+    const auto& dict_type = static_cast<const ::arrow::DictionaryType&>(*new_type);\n+    new_data->dictionary = ShallowCast(*new_data->dictionary, dict_type.value_type());\n+  }\n+  return MakeArray(new_data);\n+}\n+\n+std::shared_ptr<ChunkedArray> CastChunksTo(\n+    const ChunkedArray& data, const std::shared_ptr<DataType>& logical_value_type) {\n+  std::vector<std::shared_ptr<Array>> string_chunks;\n+  for (int i = 0; i < data.num_chunks(); ++i) {\n+    string_chunks.push_back(ShallowCast(*data.chunk(i), logical_value_type));\n+  }\n+  return std::make_shared<ChunkedArray>(string_chunks);\n+}\n+\n+Status TransferDictionary(RecordReader* reader,\n+                          const std::shared_ptr<DataType>& logical_value_type,\n+                          std::shared_ptr<ChunkedArray>* out) {\n+  auto dict_reader = dynamic_cast<internal::DictionaryRecordReader*>(reader);\n+  DCHECK(dict_reader);\n+  *out = dict_reader->GetResult();\n+\n+  const auto& dict_type = static_cast<const ::arrow::DictionaryType&>(*(*out)->type());\n+  if (!logical_value_type->Equals(*dict_type.value_type())) {\n+    *out = CastChunksTo(**out,\n+                        ::arrow::dictionary(dict_type.index_type(), logical_value_type));\n+  }\n+  return Status::OK();\n+}\n+\n+Status TransferBinary(RecordReader* reader,\n+                      const std::shared_ptr<DataType>& logical_value_type,\n+                      std::shared_ptr<ChunkedArray>* out) {\n+  if (reader->read_dictionary()) {\n+    return TransferDictionary(reader, logical_value_type, out);\n+  }\n+  auto binary_reader = dynamic_cast<internal::BinaryRecordReader*>(reader);\n \n Review comment:\n   `static_cast` doesn't work with this type\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:34:38.429+0000",
                    "updated": "2019-07-30T14:34:38.429+0000",
                    "started": "2019-07-30T14:34:38.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284996",
                    "issueId": "13247718"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/worklog/284997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #4963: ARROW-6065: [C++][Parquet] Clean up parquet/arrow/reader.cc, reduce code duplication, improve readability\nURL: https://github.com/apache/arrow/pull/4963#discussion_r308758516\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader_internal.cc\n ##########\n @@ -0,0 +1,616 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"parquet/arrow/reader_internal.h\"\n+\n+#include <algorithm>\n+#include <climits>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <type_traits>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/int-util.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/ubsan.h\"\n+\n+#include \"parquet/column_reader.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/schema.h\"\n+#include \"parquet/types.h\"\n+\n+using arrow::Array;\n+using arrow::BooleanArray;\n+using arrow::ChunkedArray;\n+using arrow::DataType;\n+using arrow::Field;\n+using arrow::Int32Array;\n+using arrow::ListArray;\n+using arrow::MemoryPool;\n+using arrow::ResizableBuffer;\n+using arrow::Status;\n+using arrow::StructArray;\n+using arrow::Table;\n+using arrow::TimestampArray;\n+using arrow::compute::Datum;\n+\n+using ::arrow::BitUtil::FromBigEndian;\n+using ::arrow::internal::SafeLeftShift;\n+using ::arrow::util::SafeLoadAs;\n+\n+using parquet::internal::RecordReader;\n+\n+namespace parquet {\n+namespace arrow {\n+\n+template <typename ArrowType>\n+using ArrayType = typename ::arrow::TypeTraits<ArrowType>::ArrayType;\n+\n+// ----------------------------------------------------------------------\n+// Primitive types\n+\n+template <typename ArrowType, typename ParquetType>\n+Status TransferInt(RecordReader* reader, MemoryPool* pool,\n+                   const std::shared_ptr<DataType>& type, Datum* out) {\n+  using ArrowCType = typename ArrowType::c_type;\n+  using ParquetCType = typename ParquetType::c_type;\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(ArrowCType), &data));\n+\n+  auto values = reinterpret_cast<const ParquetCType*>(reader->values());\n+  auto out_ptr = reinterpret_cast<ArrowCType*>(data->mutable_data());\n+  std::copy(values, values + length, out_ptr);\n+  *out = std::make_shared<ArrayType<ArrowType>>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+std::shared_ptr<Array> TransferZeroCopy(RecordReader* reader,\n+                                        const std::shared_ptr<DataType>& type) {\n+  std::vector<std::shared_ptr<Buffer>> buffers = {reader->ReleaseIsValid(),\n+                                                  reader->ReleaseValues()};\n+  auto data = std::make_shared<::arrow::ArrayData>(type, reader->values_written(),\n+                                                   buffers, reader->null_count());\n+  return ::arrow::MakeArray(data);\n+}\n+\n+Status TransferBool(RecordReader* reader, MemoryPool* pool, Datum* out) {\n+  int64_t length = reader->values_written();\n+  std::shared_ptr<Buffer> data;\n+\n+  const int64_t buffer_size = BitUtil::BytesForBits(length);\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, buffer_size, &data));\n+\n+  // Transfer boolean values to packed bitmap\n+  auto values = reinterpret_cast<const bool*>(reader->values());\n+  uint8_t* data_ptr = data->mutable_data();\n+  memset(data_ptr, 0, buffer_size);\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    if (values[i]) {\n+      ::arrow::BitUtil::SetBit(data_ptr, i);\n+    }\n+  }\n+\n+  *out = std::make_shared<BooleanArray>(length, data, reader->ReleaseIsValid(),\n+                                        reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferInt96(RecordReader* reader, MemoryPool* pool,\n+                     const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const Int96*>(reader->values());\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto data_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+  for (int64_t i = 0; i < length; i++) {\n+    *data_ptr++ = Int96GetNanoSeconds(values[i]);\n+  }\n+  *out = std::make_shared<TimestampArray>(type, length, data, reader->ReleaseIsValid(),\n+                                          reader->null_count());\n+  return Status::OK();\n+}\n+\n+Status TransferDate64(RecordReader* reader, MemoryPool* pool,\n+                      const std::shared_ptr<DataType>& type, Datum* out) {\n+  int64_t length = reader->values_written();\n+  auto values = reinterpret_cast<const int32_t*>(reader->values());\n+\n+  std::shared_ptr<Buffer> data;\n+  RETURN_NOT_OK(::arrow::AllocateBuffer(pool, length * sizeof(int64_t), &data));\n+  auto out_ptr = reinterpret_cast<int64_t*>(data->mutable_data());\n+\n+  for (int64_t i = 0; i < length; i++) {\n+    *out_ptr++ = static_cast<int64_t>(values[i]) * kMillisecondsPerDay;\n+  }\n+\n+  *out = std::make_shared<::arrow::Date64Array>(\n+      type, length, data, reader->ReleaseIsValid(), reader->null_count());\n+  return Status::OK();\n+}\n+\n+// ----------------------------------------------------------------------\n+// Binary, direct to dictionary-encoded\n+\n+// Some ugly hacks here for now to handle binary dictionaries casted to their\n+// logical type\n+std::shared_ptr<Array> ShallowCast(const Array& arr,\n+                                   const std::shared_ptr<DataType>& new_type) {\n+  std::shared_ptr<::arrow::ArrayData> new_data = arr.data()->Copy();\n+  new_data->type = new_type;\n+  if (new_type->id() == ::arrow::Type::DICTIONARY) {\n+    // Cast dictionary, too\n+    const auto& dict_type = static_cast<const ::arrow::DictionaryType&>(*new_type);\n+    new_data->dictionary = ShallowCast(*new_data->dictionary, dict_type.value_type());\n+  }\n+  return MakeArray(new_data);\n+}\n+\n+std::shared_ptr<ChunkedArray> CastChunksTo(\n+    const ChunkedArray& data, const std::shared_ptr<DataType>& logical_value_type) {\n+  std::vector<std::shared_ptr<Array>> string_chunks;\n+  for (int i = 0; i < data.num_chunks(); ++i) {\n+    string_chunks.push_back(ShallowCast(*data.chunk(i), logical_value_type));\n+  }\n+  return std::make_shared<ChunkedArray>(string_chunks);\n+}\n+\n+Status TransferDictionary(RecordReader* reader,\n+                          const std::shared_ptr<DataType>& logical_value_type,\n+                          std::shared_ptr<ChunkedArray>* out) {\n+  auto dict_reader = dynamic_cast<internal::DictionaryRecordReader*>(reader);\n \n Review comment:\n   `static_cast` doesn't work with this type\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-30T14:34:41.401+0000",
                    "updated": "2019-07-30T14:34:41.401+0000",
                    "started": "2019-07-30T14:34:41.401+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "284997",
                    "issueId": "13247718"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1adafb42[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f187eeb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23885bde[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@f4b8662[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32375f4c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@71dcb4f0[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@106b47be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@43c0bb47[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b85414c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5f6a17f8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15f6fd1c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@53aa7666[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 30 14:41:22 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-30T14:41:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6065/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-07-29T18:03:35.000+0000",
        "updated": "2019-08-01T23:01:54.000+0000",
        "timeoriginalestimate": null,
        "description": "The code in parquet/arrow/reader.cc has quite a bit of code duplication and is difficult to follow. In the course of making some other improvements to this code I am going to reorganize and clean things up. PR coming shortly",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Reorganize parquet/arrow/reader.cc, remove code duplication, improve readability",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13247718/comment/16896194",
                    "id": "16896194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4963\n[https://github.com/apache/arrow/pull/4963]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-07-30T14:41:22.700+0000",
                    "updated": "2019-07-30T14:41:22.700+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z054vk:",
        "customfield_12314139": null
    }
}