{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13191393",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393",
    "key": "ARROW-3504",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=guoyuhong85",
            "name": "guoyuhong85",
            "key": "guoyuhong85",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=guoyuhong85&avatarId=36251",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=guoyuhong85&avatarId=36251",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=guoyuhong85&avatarId=36251",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=guoyuhong85&avatarId=36251"
            },
            "displayName": "Yuhong Guo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=guoyuhong85",
            "name": "guoyuhong85",
            "key": "guoyuhong85",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=guoyuhong85&avatarId=36251",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=guoyuhong85&avatarId=36251",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=guoyuhong85&avatarId=36251",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=guoyuhong85&avatarId=36251"
            },
            "displayName": "Yuhong Guo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=guoyuhong85",
            "name": "guoyuhong85",
            "key": "guoyuhong85",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=guoyuhong85&avatarId=36251",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=guoyuhong85&avatarId=36251",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=guoyuhong85&avatarId=36251",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=guoyuhong85&avatarId=36251"
            },
            "displayName": "Yuhong Guo",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3504/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "guoyuhong opened a new pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752\n \n \n   This is a feature enables Java Client to read data that python client puts (cross-language read/write). \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-13T13:43:18.604+0000",
                    "updated": "2018-10-13T13:43:18.604+0000",
                    "started": "2018-10-13T13:43:18.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154098",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#issuecomment-429558105\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=h1) Report\n   > Merging [#2752](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/146e7df80cbc316c55a4e63534193dce7271125a?src=pr&el=desc) will **increase** coverage by `0.94%`.\n   > The diff coverage is `91.17%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2752/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2752      +/-   ##\n   ==========================================\n   + Coverage   87.65%   88.59%   +0.94%     \n   ==========================================\n     Files         403      342      -61     \n     Lines       61483    57726    -3757     \n   ==========================================\n   - Hits        53891    51143    -2748     \n   + Misses       7520     6583     -937     \n   + Partials       72        0      -72\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_plasma.py](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWEucHk=) | `95.97% <100%> (+0.08%)` | :arrow_up: |\n   | [python/pyarrow/\\_plasma.pyx](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX3BsYXNtYS5weXg=) | `64.6% <86.95%> (+3.02%)` | :arrow_up: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [rust/src/util/bit\\_util.rs](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-cnVzdC9zcmMvdXRpbC9iaXRfdXRpbC5ycw==) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | | |\n   | ... and [55 more](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=footer). Last update [146e7df...ba64023](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-13T17:03:24.598+0000",
                    "updated": "2018-10-13T17:03:24.598+0000",
                    "started": "2018-10-13T17:03:24.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154103",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#discussion_r224973220\n \n \n\n ##########\n File path: python/pyarrow/_plasma.pyx\n ##########\n @@ -408,6 +408,73 @@ cdef class PlasmaClient:\n                 result.append(None)\n         return result\n \n+    def put_raw_bytes(self, object value, ObjectID object_id=None,\n+                      int memcopy_threads=6):\n+        \"\"\"\n+        Store Python bytes value into the object store.\n+\n+        Parameters\n+        ----------\n+        value : Python bytes\n+            A Python bytes object to store.\n+        object_id : ObjectID, default None\n+            If this is provided, the specified object ID will be used to refer\n+            to the object.\n+        memcopy_threads : int, default 6\n+            The number of threads to use to write the serialized object into\n+            the object store for large objects.\n+\n+        Returns\n+        -------\n+        The object ID associated to the Python bytes object.\n+        \"\"\"\n+        cdef ObjectID target_id = (object_id if object_id\n+                                   else ObjectID.from_random())\n+        if not isinstance(value, bytes):\n+            raise ValueError(\"Input value of put_raw_bytes should be bytes\")\n+        buffer = self.create(target_id, len(value))\n+        stream = pyarrow.FixedSizeBufferWriter(buffer)\n+        stream.set_memcopy_threads(memcopy_threads)\n+        stream.write(value)\n+        self.seal(target_id)\n+        return target_id\n+\n+    def get_raw_bytes(self, object_ids, int timeout_ms=-1):\n+        \"\"\"\n+        Get one or more Python bytes values from the object store.\n+\n+        Parameters\n+        ----------\n+        object_ids : list or ObjectID\n+            Object ID or list of object IDs associated to the values we get\n+            from the store.\n+        timeout_ms : int, default -1\n+            The number of milliseconds that the get call should block before\n+            timing out and returning. Pass -1 if the call should block and 0\n+            if the call should return immediately.\n+\n+        Returns\n+        -------\n+        list of bytes or bytes object\n+            Python bytes value or list of Python bytes values for the data\n+            associated with the object_ids and ObjectNotAvailable if the\n+            object was not available.\n+        \"\"\"\n+        cdef c_vector[CObjectBuffer] object_buffers\n+        if isinstance(object_ids, collections.Sequence):\n+            results = []\n+            self._get_object_buffers(object_ids, timeout_ms, &object_buffers)\n+            for i in range(object_buffers.size()):\n+                if object_buffers[i].data.get() != nullptr:\n+                    size = object_buffers[i].data.get().size()\n+                    results.append(bytes(\n+                        object_buffers[i].data.get().data()[:size]))\n \n Review comment:\n   Do you definitely want to coerce to bytes? Extra memory copying that may not be needed for all applications\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-13T22:00:49.836+0000",
                    "updated": "2018-10-13T22:00:49.836+0000",
                    "started": "2018-10-13T22:00:49.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154127",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#discussion_r224973192\n \n \n\n ##########\n File path: python/pyarrow/_plasma.pyx\n ##########\n @@ -408,6 +408,73 @@ cdef class PlasmaClient:\n                 result.append(None)\n         return result\n \n+    def put_raw_bytes(self, object value, ObjectID object_id=None,\n+                      int memcopy_threads=6):\n+        \"\"\"\n+        Store Python bytes value into the object store.\n+\n+        Parameters\n+        ----------\n+        value : Python bytes\n+            A Python bytes object to store.\n \n Review comment:\n   We should support any object that implements the buffer protocol\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-13T22:00:49.847+0000",
                    "updated": "2018-10-13T22:00:49.847+0000",
                    "started": "2018-10-13T22:00:49.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154128",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#discussion_r224973206\n \n \n\n ##########\n File path: python/pyarrow/_plasma.pyx\n ##########\n @@ -408,6 +408,73 @@ cdef class PlasmaClient:\n                 result.append(None)\n         return result\n \n+    def put_raw_bytes(self, object value, ObjectID object_id=None,\n+                      int memcopy_threads=6):\n+        \"\"\"\n+        Store Python bytes value into the object store.\n+\n+        Parameters\n+        ----------\n+        value : Python bytes\n+            A Python bytes object to store.\n+        object_id : ObjectID, default None\n+            If this is provided, the specified object ID will be used to refer\n+            to the object.\n+        memcopy_threads : int, default 6\n+            The number of threads to use to write the serialized object into\n+            the object store for large objects.\n+\n+        Returns\n+        -------\n+        The object ID associated to the Python bytes object.\n+        \"\"\"\n+        cdef ObjectID target_id = (object_id if object_id\n+                                   else ObjectID.from_random())\n+        if not isinstance(value, bytes):\n+            raise ValueError(\"Input value of put_raw_bytes should be bytes\")\n \n Review comment:\n   You should coerce to a pyarrow.Buffer with pyarrow.py_buffer and then this object can be passed into write\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-13T22:00:49.875+0000",
                    "updated": "2018-10-13T22:00:49.875+0000",
                    "started": "2018-10-13T22:00:49.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154129",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154130",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#discussion_r224973231\n \n \n\n ##########\n File path: python/pyarrow/_plasma.pyx\n ##########\n @@ -408,6 +408,73 @@ cdef class PlasmaClient:\n                 result.append(None)\n         return result\n \n+    def put_raw_bytes(self, object value, ObjectID object_id=None,\n+                      int memcopy_threads=6):\n+        \"\"\"\n+        Store Python bytes value into the object store.\n+\n+        Parameters\n+        ----------\n+        value : Python bytes\n+            A Python bytes object to store.\n+        object_id : ObjectID, default None\n+            If this is provided, the specified object ID will be used to refer\n+            to the object.\n+        memcopy_threads : int, default 6\n+            The number of threads to use to write the serialized object into\n+            the object store for large objects.\n+\n+        Returns\n+        -------\n+        The object ID associated to the Python bytes object.\n+        \"\"\"\n+        cdef ObjectID target_id = (object_id if object_id\n+                                   else ObjectID.from_random())\n+        if not isinstance(value, bytes):\n+            raise ValueError(\"Input value of put_raw_bytes should be bytes\")\n+        buffer = self.create(target_id, len(value))\n+        stream = pyarrow.FixedSizeBufferWriter(buffer)\n+        stream.set_memcopy_threads(memcopy_threads)\n+        stream.write(value)\n+        self.seal(target_id)\n+        return target_id\n+\n+    def get_raw_bytes(self, object_ids, int timeout_ms=-1):\n+        \"\"\"\n+        Get one or more Python bytes values from the object store.\n+\n+        Parameters\n+        ----------\n+        object_ids : list or ObjectID\n+            Object ID or list of object IDs associated to the values we get\n+            from the store.\n+        timeout_ms : int, default -1\n+            The number of milliseconds that the get call should block before\n+            timing out and returning. Pass -1 if the call should block and 0\n+            if the call should return immediately.\n+\n+        Returns\n+        -------\n+        list of bytes or bytes object\n+            Python bytes value or list of Python bytes values for the data\n+            associated with the object_ids and ObjectNotAvailable if the\n+            object was not available.\n+        \"\"\"\n+        cdef c_vector[CObjectBuffer] object_buffers\n+        if isinstance(object_ids, collections.Sequence):\n+            results = []\n+            self._get_object_buffers(object_ids, timeout_ms, &object_buffers)\n+            for i in range(object_buffers.size()):\n+                if object_buffers[i].data.get() != nullptr:\n+                    size = object_buffers[i].data.get().size()\n+                    results.append(bytes(\n+                        object_buffers[i].data.get().data()[:size]))\n+                else:\n+                    results.append(None)\n+            return results\n+        else:\n+            return self.get_raw_bytes([object_ids], timeout_ms)[0]\n \n Review comment:\n   Might be better to avoid polymorphic output type unless it's definitely needed. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-13T22:00:49.879+0000",
                    "updated": "2018-10-13T22:00:49.879+0000",
                    "started": "2018-10-13T22:00:49.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154130",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "guoyuhong commented on a change in pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#discussion_r224988065\n \n \n\n ##########\n File path: python/pyarrow/_plasma.pyx\n ##########\n @@ -408,6 +408,73 @@ cdef class PlasmaClient:\n                 result.append(None)\n         return result\n \n+    def put_raw_bytes(self, object value, ObjectID object_id=None,\n+                      int memcopy_threads=6):\n+        \"\"\"\n+        Store Python bytes value into the object store.\n+\n+        Parameters\n+        ----------\n+        value : Python bytes\n+            A Python bytes object to store.\n+        object_id : ObjectID, default None\n+            If this is provided, the specified object ID will be used to refer\n+            to the object.\n+        memcopy_threads : int, default 6\n+            The number of threads to use to write the serialized object into\n+            the object store for large objects.\n+\n+        Returns\n+        -------\n+        The object ID associated to the Python bytes object.\n+        \"\"\"\n+        cdef ObjectID target_id = (object_id if object_id\n+                                   else ObjectID.from_random())\n+        if not isinstance(value, bytes):\n+            raise ValueError(\"Input value of put_raw_bytes should be bytes\")\n+        buffer = self.create(target_id, len(value))\n+        stream = pyarrow.FixedSizeBufferWriter(buffer)\n+        stream.set_memcopy_threads(memcopy_threads)\n+        stream.write(value)\n+        self.seal(target_id)\n+        return target_id\n+\n+    def get_raw_bytes(self, object_ids, int timeout_ms=-1):\n+        \"\"\"\n+        Get one or more Python bytes values from the object store.\n+\n+        Parameters\n+        ----------\n+        object_ids : list or ObjectID\n+            Object ID or list of object IDs associated to the values we get\n+            from the store.\n+        timeout_ms : int, default -1\n+            The number of milliseconds that the get call should block before\n+            timing out and returning. Pass -1 if the call should block and 0\n+            if the call should return immediately.\n+\n+        Returns\n+        -------\n+        list of bytes or bytes object\n+            Python bytes value or list of Python bytes values for the data\n+            associated with the object_ids and ObjectNotAvailable if the\n+            object was not available.\n+        \"\"\"\n+        cdef c_vector[CObjectBuffer] object_buffers\n+        if isinstance(object_ids, collections.Sequence):\n+            results = []\n+            self._get_object_buffers(object_ids, timeout_ms, &object_buffers)\n+            for i in range(object_buffers.size()):\n+                if object_buffers[i].data.get() != nullptr:\n+                    size = object_buffers[i].data.get().size()\n+                    results.append(bytes(\n+                        object_buffers[i].data.get().data()[:size]))\n+                else:\n+                    results.append(None)\n+            return results\n+        else:\n+            return self.get_raw_bytes([object_ids], timeout_ms)[0]\n \n Review comment:\n   I followed the same style as `get` function. It is better to have the same behavior for `get` and `get_raw_bytes`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-14T10:53:40.101+0000",
                    "updated": "2018-10-14T10:53:40.101+0000",
                    "started": "2018-10-14T10:53:40.100+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154144",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752#issuecomment-429558105\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=h1) Report\n   > Merging [#2752](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/54634dd6745dccad393c1461f11a787047dbc41a?src=pr&el=desc) will **increase** coverage by `<.01%`.\n   > The diff coverage is `93.75%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2752/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2752      +/-   ##\n   ==========================================\n   + Coverage   87.56%   87.57%   +<.01%     \n   ==========================================\n     Files         403      403              \n     Lines       61483    61515      +32     \n   ==========================================\n   + Hits        53838    53870      +32     \n     Misses       7571     7571              \n     Partials       74       74\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/tests/test\\_plasma.py](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wbGFzbWEucHk=) | `95.97% <100%> (+0.08%)` | :arrow_up: |\n   | [python/pyarrow/\\_plasma.pyx](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX3BsYXNtYS5weXg=) | `64.73% <90.47%> (+3.15%)` | :arrow_up: |\n   | [cpp/src/plasma/thirdparty/dlmalloc.c](https://codecov.io/gh/apache/arrow/pull/2752/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9kbG1hbGxvYy5j) | `47.53% <0%> (+0.12%)` | :arrow_up: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=footer). Last update [54634dd...b28748b](https://codecov.io/gh/apache/arrow/pull/2752?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-14T14:05:07.943+0000",
                    "updated": "2018-10-14T14:05:07.943+0000",
                    "started": "2018-10-14T14:05:07.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154155",
                    "issueId": "13191393"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/worklog/154449",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2752: ARROW-3504: [Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.\nURL: https://github.com/apache/arrow/pull/2752\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/python/pyarrow/_plasma.pyx b/python/pyarrow/_plasma.pyx\nindex 783fbcb5c2..2b9f93e698 100644\n--- a/python/pyarrow/_plasma.pyx\n+++ b/python/pyarrow/_plasma.pyx\n@@ -408,6 +408,71 @@ cdef class PlasmaClient:\n                 result.append(None)\n         return result\n \n+    def put_buffer(self, object value, ObjectID object_id=None,\n+                   int memcopy_threads=6):\n+        \"\"\"\n+        Store Python buffer into the object store.\n+\n+        Parameters\n+        ----------\n+        value : Python object that implements the buffer protocol\n+            A Python buffer object to store.\n+        object_id : ObjectID, default None\n+            If this is provided, the specified object ID will be used to refer\n+            to the object.\n+        memcopy_threads : int, default 6\n+            The number of threads to use to write the serialized object into\n+            the object store for large objects.\n+\n+        Returns\n+        -------\n+        The object ID associated to the Python buffer object.\n+        \"\"\"\n+        cdef ObjectID target_id = (object_id if object_id\n+                                   else ObjectID.from_random())\n+        cdef Buffer arrow_buffer = pyarrow.py_buffer(value)\n+        write_buffer = self.create(target_id, len(value))\n+        stream = pyarrow.FixedSizeBufferWriter(write_buffer)\n+        stream.set_memcopy_threads(memcopy_threads)\n+        stream.write(arrow_buffer)\n+        self.seal(target_id)\n+        return target_id\n+\n+    def get_buffer(self, object_ids, int timeout_ms=-1):\n+        \"\"\"\n+        Get one or more Python buffers from the object store.\n+\n+        Parameters\n+        ----------\n+        object_ids : list or ObjectID\n+            Object ID or list of object IDs associated to the values we get\n+            from the store.\n+        timeout_ms : int, default -1\n+            The number of milliseconds that the get call should block before\n+            timing out and returning. Pass -1 if the call should block and 0\n+            if the call should return immediately.\n+\n+        Returns\n+        -------\n+        list of buffer objects or a buffer object\n+            Python buffer or list of Python buffer for the data\n+            associated with the object_ids and ObjectNotAvailable if the\n+            object was not available.\n+        \"\"\"\n+        cdef c_vector[CObjectBuffer] object_buffers\n+        if isinstance(object_ids, collections.Sequence):\n+            results = []\n+            self._get_object_buffers(object_ids, timeout_ms, &object_buffers)\n+            for i in range(object_buffers.size()):\n+                if object_buffers[i].data.get() != nullptr:\n+                    size = object_buffers[i].data.get().size()\n+                    results.append(object_buffers[i].data.get().data()[:size])\n+                else:\n+                    results.append(None)\n+            return results\n+        else:\n+            return self.get_buffer([object_ids], timeout_ms)[0]\n+\n     def put(self, object value, ObjectID object_id=None, int memcopy_threads=6,\n             serialization_context=None):\n         \"\"\"\ndiff --git a/python/pyarrow/tests/test_plasma.py b/python/pyarrow/tests/test_plasma.py\nindex 834b980c3c..efda2af83a 100644\n--- a/python/pyarrow/tests/test_plasma.py\n+++ b/python/pyarrow/tests/test_plasma.py\n@@ -291,6 +291,21 @@ def test_put_and_get(self):\n             [result] = self.plasma_client.get([object_id], timeout_ms=0)\n             assert result == pa.plasma.ObjectNotAvailable\n \n+    def test_put_and_get_buffer_without_serialization(self):\n+        temp_id = random_object_id()\n+        for value in [b\"This is a bytes obj\", temp_id.binary(), 10 * b\"\\x00\"]:\n+            object_id = self.plasma_client.put_buffer(value)\n+            [result] = self.plasma_client.get_buffer([object_id])\n+            assert result == value\n+\n+            result = self.plasma_client.get_buffer(object_id)\n+            assert result == value\n+\n+            object_id = random_object_id()\n+            [result] = self.plasma_client.get_buffer(\n+                [object_id], timeout_ms=0)\n+            assert result is None\n+\n     def test_put_and_get_serialization_context(self):\n \n         class CustomType(object):\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-15T20:50:50.400+0000",
                    "updated": "2018-10-15T20:50:50.400+0000",
                    "started": "2018-10-15T20:50:50.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154449",
                    "issueId": "13191393"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3eec1049[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d9e4cf7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@467e102[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2b31fc8d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10d508f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@74843bbe[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f50abdd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6b21f32e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@530bac73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6072467[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c437939[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@289f5b1c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 15 20:50:36 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-15T20:50:36.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3504/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-10-13T13:40:50.000+0000",
        "updated": "2019-06-03T12:33:51.000+0000",
        "timeoriginalestimate": null,
        "description": "This is a feature enables Java Client to read data that python client puts .",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Plasma] Add support for Plasma Client to put/get raw bytes without pyarrow serialization.",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13191393/comment/16650776",
                    "id": "16650776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2752\n[https://github.com/apache/arrow/pull/2752]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-15T20:50:36.873+0000",
                    "updated": "2018-10-15T20:50:36.873+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3z5xj:",
        "customfield_12314139": null
    }
}