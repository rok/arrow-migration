{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13190282",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282",
    "key": "ARROW-3469",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
            "name": "pravindra",
            "key": "pravindra",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
            },
            "displayName": "Pindikura Ravindra",
            "active": true,
            "timeZone": "Asia/Kolkata"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3469/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra opened a new pull request #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-15T17:27:46.846+0000",
                    "updated": "2018-10-15T17:27:46.846+0000",
                    "started": "2018-10-15T17:27:46.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154382",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-429973402\n \n \n   @pravindra @pitrou @kszucs @xhochy we don't have to do it in this PR, but I would like to propose the following:\r\n   \r\n   * Split the current C++ build into 2 builds: one for C++ and another for Python\r\n   * Test all C++ including Gandiva in a single CI entry\r\n   * Ensure that code coverage data is uploaded consistently\r\n   \r\n   Does this sound good? If so, let's create JIRA issues to capture the work\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-15T18:57:23.479+0000",
                    "updated": "2018-10-15T18:57:23.479+0000",
                    "started": "2018-10-15T18:57:23.478+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154414",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-430136273\n \n \n   \n   \n   > On Oct 16, 2018, at 12:27 AM, Wes McKinney <notifications@github.com> wrote:\n   > \n   > @pravindra <https://github.com/pravindra> @pitrou <https://github.com/pitrou> @kszucs <https://github.com/kszucs> @xhochy <https://github.com/xhochy> we don't have to do it in this PR, but I would like to propose the following:\n   > \n   > Split the current C++ build into 2 builds: one for C++ and another for Python\n   > Test all C++ including Gandiva in a single CI entry\n   > Ensure that code coverage data is uploaded consistently\n   > Does this sound good? If so, let's create JIRA issues to capture the work\n   > \n   > \n   \n   Sounds good. Couple of things :\n   \n   1. Till we fix ARROW-3501, gandiva can build only with gcc 4.9. Is that ok ?\n   2. What should we do for java ? Single CI entry for arrow and gandiva, or different ones ?\n       - The gandiva build for java requires cpp library to be built\n   \n   > \u2014\n   > You are receiving this because you were mentioned.\n   > Reply to this email directly, view it on GitHub <https://github.com/apache/arrow/pull/2765#issuecomment-429973402>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AD9_lkOM7qWoVFxznExpJtLdaujhUqQ2ks5ulNqmgaJpZM4Xcytl>.\n   > \n   \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-16T07:48:23.730+0000",
                    "updated": "2018-10-16T07:48:23.730+0000",
                    "started": "2018-10-16T07:48:23.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154638",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra edited a comment on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-430136273\n \n \n   \r\n   Sounds good. Couple of things :\r\n   \r\n   1. Till we fix ARROW-3501, gandiva can build only with gcc 4.9. Is that ok ?\r\n   2. What should we do for java ? Single CI entry for arrow and gandiva, or different ones ?\r\n       - The gandiva build for java requires cpp library to be built\r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-16T08:03:17.366+0000",
                    "updated": "2018-10-16T08:03:17.366+0000",
                    "started": "2018-10-16T08:03:17.365+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154640",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-430142943\n \n \n   @wesm There are several C++ / Python jobs already. Should they all be split? We might want to cut down on the number of jobs at some point (or perhaps move independent implementations to separate repos).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-16T08:11:04.337+0000",
                    "updated": "2018-10-16T08:11:04.337+0000",
                    "started": "2018-10-16T08:11:04.336+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154641",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-430142943\n \n \n   @wesm There are several C++ / Python jobs already. Should they all be split? We might want to cut down on the number of jobs at some point (or perhaps move independent implementations to separate repos).\r\n   \r\n   PS: codecov handles merging [out of the box](https://docs.codecov.io/docs/merging-reports).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-16T08:11:47.711+0000",
                    "updated": "2018-10-16T08:11:47.711+0000",
                    "started": "2018-10-16T08:11:47.711+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154642",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-430154591\n \n \n   That sounds reasonable to me. It's a more straightforward way to separate builds - at first I was surprised that there is no python entry in the travis matrix.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-16T08:48:43.576+0000",
                    "updated": "2018-10-16T08:48:43.576+0000",
                    "started": "2018-10-16T08:48:43.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154661",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/154816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-430224701\n \n \n   > perhaps move independent implementations to separate repos\r\n   \r\n   We should discuss this on the mailing list. I am against breaking up the monorepo -- I think that we should scale our process using tools that we develop rather than conforming to the objectively crude affordances of Travis CI and Appveyor. Implementations that are independent now may not be so in the future by the nature of the project -- any implementation could integrate with Gandiva, for example, and that would become much more difficult to develop if the code is fragmented in multiple repositories. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-16T12:50:39.363+0000",
                    "updated": "2018-10-16T12:50:39.363+0000",
                    "started": "2018-10-16T12:50:39.362+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "154816",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/156878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-431806113\n \n \n   abandoning this request - building a fresh one on top of the changes for ARROW-3472\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T18:25:53.553+0000",
                    "updated": "2018-10-22T18:25:53.553+0000",
                    "started": "2018-10-22T18:25:53.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156878",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/156880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra closed pull request #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex bfb607fda0..adc732fa57 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -46,253 +46,27 @@ before_install:\n \n matrix:\n   fast_finish: true\n-  allow_failures:\n-  - jdk: oraclejdk9\n   include:\n-  # C++ & Python w/ clang 6.0\n-  - compiler: gcc\n-    language: cpp\n-    os: linux\n-    jdk: openjdk8\n-    env:\n-    - ARROW_TRAVIS_USE_TOOLCHAIN=1\n-    - ARROW_TRAVIS_VALGRIND=1\n-    - ARROW_TRAVIS_PLASMA=1\n-    - ARROW_TRAVIS_ORC=1\n-    - ARROW_TRAVIS_CLANG_FORMAT=1\n-    - ARROW_TRAVIS_COVERAGE=1\n-    - ARROW_TRAVIS_PARQUET=1\n-    - ARROW_TRAVIS_PYTHON_DOCS=1\n-    - ARROW_BUILD_WARNING_LEVEL=CHECKIN\n-    - ARROW_TRAVIS_PYTHON_JVM=1\n-    - ARROW_TRAVIS_JAVA_BUILD_ONLY=1\n-    # ARROW-2999 Benchmarks are disabled in Travis CI for the time being\n-    # - ARROW_TRAVIS_PYTHON_BENCHMARKS=1\n-    - CC=\"clang-6.0\"\n-    - CXX=\"clang++-6.0\"\n-    before_script:\n-    # Always run RAT checks, in case another build in matrix breaks RAT\n-    - $TRAVIS_BUILD_DIR/ci/travis_release_audit.sh\n-    # (ARROW_CI_CPP_AFFECTED implies ARROW_CI_PYTHON_AFFECTED)\n-    - if [ $ARROW_CI_PYTHON_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n-    # If either C++ or Python changed, we must install the C++ libraries\n-    - git submodule update --init\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh\n-    script:\n-    # All test steps are required for accurate C++ coverage info\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_cpp.sh\n-    # Build Arrow Java to test the pyarrow<->JVM in-process bridge\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_java.sh\n-    # Only run Plasma tests with valgrind in one of the Python builds because\n-    # they are slow\n-    - export PLASMA_VALGRIND=0\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_python.sh 2.7\n-    - export PLASMA_VALGRIND=1\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_python.sh 3.6\n-    - $TRAVIS_BUILD_DIR/ci/travis_upload_cpp_coverage.sh\n-  # Gandiva C++ w/ gcc 4.9 and Java\n-  - compiler: gcc\n+  # [OS X] Gandiva C++ w/ XCode 8.3 & Java\n+  - compiler: clang\n     language: cpp\n-    os: linux\n-    jdk: openjdk8\n+    osx_image: xcode8.3\n+    os: osx\n+    cache:\n+    addons:\n     env:\n     - ARROW_TRAVIS_GANDIVA=1\n     - ARROW_TRAVIS_USE_TOOLCHAIN=1\n-    - ARROW_TRAVIS_VALGRIND=1\n-    - ARROW_TRAVIS_CLANG_FORMAT=1\n-    - ARROW_BUILD_WARNING_LEVEL=CHECKIN\n-    - MATRIX_EVAL=\"CC=gcc-4.9 && CXX=g++-4.9\"\n+    #- ARROW_BUILD_WARNING_LEVEL=CHECKIN\n     before_script:\n     # Run if something changed in CPP or Java.\n     - if [ $ARROW_CI_CPP_AFFECTED != \"1\" && $ARROW_CI_JAVA_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n     # If either C++ or Python changed, we must install the C++ libraries\n     - git submodule update --init\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n     script:\n     - $TRAVIS_BUILD_DIR/ci/travis_script_gandiva_cpp.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_script_gandiva_java.sh\n-  # [OS X] C++ & Python w/ XCode 6.4\n-  - compiler: clang\n-    language: cpp\n-    osx_image: xcode6.4\n-    os: osx\n-    cache:\n-    addons:\n-    env:\n-    - ARROW_TRAVIS_USE_TOOLCHAIN=1\n-    - ARROW_TRAVIS_PLASMA=1\n-    - ARROW_TRAVIS_ORC=1\n-    - ARROW_TRAVIS_PARQUET=1\n-    - ARROW_BUILD_WARNING_LEVEL=CHECKIN\n-    before_script:\n-    - if [ $ARROW_CI_PYTHON_AFFECTED != \"1\" ]; then exit; fi\n-    # If either C++ or Python changed, we must install the C++ libraries\n-    - git submodule update --init\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh\n-    script:\n-    - if [ $ARROW_CI_CPP_AFFECTED == \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_cpp.sh; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_python.sh 2.7\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_python.sh 3.6\n-  # [manylinux1] Python\n-  - language: cpp\n-    before_script:\n-    - if [ $ARROW_CI_PYTHON_AFFECTED == \"1\" ]; then docker pull quay.io/xhochy/arrow_manylinux1_x86_64_base:latest; fi\n-    script:\n-    - if [ $ARROW_CI_PYTHON_AFFECTED == \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_manylinux.sh; fi\n-  # Java w/ OpenJDK 8\n-  - language: java\n-    os: linux\n-    jdk: openjdk8\n-    before_script:\n-    - if [ $ARROW_CI_JAVA_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_java.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_javadoc.sh\n-  # Java w/ Oracle JDK 9\n-  - language: java\n-    os: linux\n-    jdk: oraclejdk9\n-    before_script:\n-    - if [ $ARROW_CI_JAVA_AFFECTED != \"1\" ]; then exit; fi\n-    script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_java.sh\n-    addons:\n-      apt:\n-        packages:\n-          - oracle-java9-installer\n-  # Integration w/ OpenJDK 8\n-  - language: java\n-    os: linux\n-    env: ARROW_TEST_GROUP=integration\n-    jdk: openjdk8\n-    env:\n-    - ARROW_TRAVIS_PLASMA=1\n-    - ARROW_TRAVIS_PLASMA_JAVA_CLIENT=1\n-    - CC=\"clang-6.0\"\n-    - CXX=\"clang++-6.0\"\n-    before_script:\n-    - if [ $ARROW_CI_INTEGRATION_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n-    - nvm install 10.1\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_js.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh\n-    script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_integration.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_plasma_java_client.sh\n-  # NodeJS\n-  - language: node_js\n-    os: linux\n-    node_js:\n-    - '10.1'\n-    before_script:\n-    - if [ $ARROW_CI_JS_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_js.sh\n-    script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_js.sh\n-  # C++ & GLib & Ruby w/ gcc 4.9\n-  - compiler: gcc\n-    language: cpp\n-    os: linux\n-    env:\n-    - ARROW_TRAVIS_ORC=1\n-    - ARROW_TRAVIS_PARQUET=1\n-    - BUILD_TORCH_EXAMPLE=no\n-    - CC=\"gcc-4.9\"\n-    - CXX=\"g++-4.9\"\n-    before_script:\n-    - if [ $ARROW_CI_RUBY_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_c_glib.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_ruby.sh\n-    script:\n-    - if [ $ARROW_CI_C_GLIB_AFFECTED = \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_ruby.sh\n-  # [OS X] C++ & GLib & Ruby w/ XCode 8.3 & homebrew\n-  - compiler: clang\n-    osx_image: xcode8.3\n-    os: osx\n-    env:\n-    - ARROW_TRAVIS_ORC=1\n-    cache:\n-    addons:\n-    rvm: 2.2\n-    before_script:\n-    - if [ $ARROW_CI_RUBY_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_osx.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library --homebrew\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_c_glib.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_ruby.sh\n-    script:\n-    - if [ $ARROW_CI_C_GLIB_AFFECTED = \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_ruby.sh\n-  # Rust\n-  - language: rust\n-    cache: cargo\n-    addons:\n-      apt:\n-        packages:\n-          - libcurl4-openssl-dev\n-          - libelf-dev\n-          - libdw-dev\n-          - binutils-dev\n-          - cmake\n-    before_script:\n-    - if [ $ARROW_CI_RUST_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_cargo.sh\n-    script:\n-    - RUSTUP_TOOLCHAIN=stable $TRAVIS_BUILD_DIR/ci/travis_script_rust.sh\n-    - RUSTUP_TOOLCHAIN=nightly $TRAVIS_BUILD_DIR/ci/travis_script_rust.sh || true\n-    after_success:\n-    - pushd ${TRAVIS_BUILD_DIR}/rust\n-    # Run coverage for codecov.io\n-    - mkdir -p target/kcov\n-    - RUST_BACKTRACE=1 RUSTUP_TOOLCHAIN=stable cargo coverage --verbose\n-    - bash <(curl -s https://codecov.io/bash) || echo \"Codecov did not collect coverage reports\"\n-  # Go\n-  - language: go\n-    go_import_path: github.com/apache/arrow\n-    os: linux\n-    go:\n-    - 1.11.x\n-    before_script:\n-    - if [ $ARROW_CI_GO_AFFECTED != \"1\" ]; then exit; fi\n-    script:\n-    - $TRAVIS_BUILD_DIR/ci/travis_script_go.sh\n-    after_success:\n-    - pushd ${TRAVIS_BUILD_DIR}/go/arrow\n-    - bash <(curl -s https://codecov.io/bash) || echo \"Codecov did not collect coverage reports\"\n-  # R\n-  - language: r\n-    cache: packages\n-    latex: false\n-    before_install:\n-    # Have to copy-paste this here because of how R's build steps work\n-    - eval `python $TRAVIS_BUILD_DIR/ci/detect-changes.py`\n-    - if [ $ARROW_CI_R_AFFECTED != \"1\" ]; then exit; fi\n-    - |\n-        if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n-          sudo bash -c \"echo -e 'Acquire::Retries 10; Acquire::http::Timeout \\\"20\\\";' > /etc/apt/apt.conf.d/99-travis-retry\"\n-          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n-          sudo apt-get update -qq\n-        fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n-    - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n-    - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n-    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib\n-    - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib/pkgconfig\n-    - pushd ${TRAVIS_BUILD_DIR}/r\n-\n \n after_failure:\n - |\ndiff --git a/ci/travis_install_toolchain.sh b/ci/travis_install_toolchain.sh\nindex eb4bdf21d6..bdb126bd47 100755\n--- a/ci/travis_install_toolchain.sh\n+++ b/ci/travis_install_toolchain.sh\n@@ -22,6 +22,10 @@ source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n source $TRAVIS_BUILD_DIR/ci/travis_install_conda.sh\n \n if [ ! -e $CPP_TOOLCHAIN ]; then\n+    if [ $ARROW_TRAVIS_GANDIVA == \"1\" ] && [ $TRAVIS_OS_NAME == \"osx\" ]; then\n+        CONDA_LLVM=\"llvmdev=6.0.1\"\n+    fi\n+\n     # Set up C++ toolchain from conda-forge packages for faster builds\n     conda create -y -q -p $CPP_TOOLCHAIN python=3.6 nomkl \\\n         boost-cpp \\\n@@ -41,5 +45,6 @@ if [ ! -e $CPP_TOOLCHAIN ]; then\n         zlib \\\n         glog \\\n         zstd \\\n+        ${CONDA_LLVM} \\\n         re2\n fi\ndiff --git a/cpp/cmake_modules/FindLLVM.cmake b/cpp/cmake_modules/FindLLVM.cmake\nindex feceee77cd..eb6afd6f90 100644\n--- a/cpp/cmake_modules/FindLLVM.cmake\n+++ b/cpp/cmake_modules/FindLLVM.cmake\n@@ -30,9 +30,21 @@ message(STATUS \"Using LLVMConfig.cmake in: ${LLVM_DIR}\")\n # Find the libraries that correspond to the LLVM components\n llvm_map_components_to_libnames(LLVM_LIBS core mcjit native ipo bitreader target linker analysis debuginfodwarf)\n \n-set(CLANG_EXECUTABLE ${LLVM_TOOLS_BINARY_DIR}/clang CACHE STRING \"clang\")\n-set(LINK_EXECUTABLE ${LLVM_TOOLS_BINARY_DIR}/llvm-link CACHE STRING \"link\")\n-set(CLANG_FORMAT_EXECUTABLE ${LLVM_TOOLS_BINARY_DIR}/clang-format CACHE STRING \"clang-format\")\n+find_program(CLANG_EXECUTABLE clang\n+  HINTS ${LLVM_TOOLS_BINARY_DIR})\n+if (CLANG_EXECUTABLE)\n+  message(STATUS \"Found clang ${CLANG_EXECUTABLE}\")\n+else ()\n+  message(FATAL_ERROR \"Couldn't find clang\")\n+endif ()\n+\n+find_program(LLVM_LINK_EXECUTABLE llvm-link\n+  HINTS ${LLVM_TOOLS_BINARY_DIR})\n+if (LLVM_LINK_EXECUTABLE)\n+  message(STATUS \"Found llvm-link ${LLVM_LINK_EXECUTABLE}\")\n+else ()\n+  message(FATAL_ERROR \"Couldn't find llvm-link\")\n+endif ()\n \n add_library(LLVM::LLVM_INTERFACE INTERFACE IMPORTED)\n \n@@ -41,3 +53,8 @@ set_target_properties(LLVM::LLVM_INTERFACE PROPERTIES\n   INTERFACE_COMPILE_FLAGS \"${LLVM_DEFINITIONS}\"\n   INTERFACE_LINK_LIBRARIES \"${LLVM_LIBS}\"\n )\n+\n+mark_as_advanced(\n+  CLANG_EXECUTABLE\n+  LLVM_LINK_EXECUTABLE\n+)\ndiff --git a/cpp/cmake_modules/GandivaBuildUtils.cmake b/cpp/cmake_modules/GandivaBuildUtils.cmake\nindex b1d3ad76de..dc8c8dbc52 100644\n--- a/cpp/cmake_modules/GandivaBuildUtils.cmake\n+++ b/cpp/cmake_modules/GandivaBuildUtils.cmake\n@@ -107,7 +107,6 @@ function(add_precompiled_unit_test REL_TEST_NAME)\n   target_include_directories(${TEST_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/src)\n   target_link_libraries(${TEST_NAME} PRIVATE ${GANDIVA_TEST_LINK_LIBS})\n   target_compile_definitions(${TEST_NAME} PRIVATE GANDIVA_UNIT_TEST=1)\n-  target_compile_definitions(${TEST_NAME} PRIVATE -DGDV_HELPERS)\n   add_test(NAME ${TEST_NAME} COMMAND ${TEST_NAME})\n   set_property(TEST ${TEST_NAME} PROPERTY LABELS gandiva,unittest ${TEST_NAME})\n endfunction(add_precompiled_unit_test REL_TEST_NAME)\n@@ -118,7 +117,10 @@ function(add_gandiva_integ_test REL_TEST_NAME GANDIVA_LIB)\n \n   add_executable(${TEST_NAME}_${GANDIVA_LIB} ${REL_TEST_NAME} ${ARGN})\n   target_include_directories(${TEST_NAME}_${GANDIVA_LIB} PRIVATE ${CMAKE_SOURCE_DIR})\n-  target_link_libraries(${TEST_NAME}_${GANDIVA_LIB} PRIVATE ${GANDIVA_LIB} ${GANDIVA_TEST_LINK_LIBS})\n+  target_link_libraries(${TEST_NAME}_${GANDIVA_LIB} PRIVATE\n+    ${GANDIVA_LIB}\n+    ${GANDIVA_TEST_LINK_LIBS}\n+  )\n \n   add_test(NAME ${TEST_NAME}_${GANDIVA_LIB} COMMAND ${TEST_NAME}_${GANDIVA_LIB})\n   set_property(TEST ${TEST_NAME}_${GANDIVA_LIB} PROPERTY LABELS gandiva,integ ${TEST_NAME}_${GANDIVA_LIB})\ndiff --git a/cpp/src/arrow/util/compression_snappy.h b/cpp/src/arrow/util/compression_snappy.h\nindex 8c2511122f..722f3556f4 100644\n--- a/cpp/src/arrow/util/compression_snappy.h\n+++ b/cpp/src/arrow/util/compression_snappy.h\n@@ -38,7 +38,7 @@ class ARROW_EXPORT SnappyCodec : public Codec {\n \n   int64_t MaxCompressedLen(int64_t input_len, const uint8_t* input) override;\n \n-  Status MakeCompressor(std::shared_ptr<Compressor>* out);\n+  Status MakeCompressor(std::shared_ptr<Compressor>* out) override;\n \n   Status MakeDecompressor(std::shared_ptr<Decompressor>* out) override;\n \ndiff --git a/cpp/src/gandiva/CMakeLists.txt b/cpp/src/gandiva/CMakeLists.txt\nindex 2a2900bc7b..ada3b3141d 100644\n--- a/cpp/src/gandiva/CMakeLists.txt\n+++ b/cpp/src/gandiva/CMakeLists.txt\n@@ -32,31 +32,15 @@ set(GANDIVA_BC_FILE_NAME irhelpers.bc)\n set(GANDIVA_BC_INSTALL_PATH ${GANDIVA_BC_INSTALL_DIR}/${GANDIVA_BC_FILE_NAME})\n set(GANDIVA_BC_OUTPUT_PATH ${CMAKE_BINARY_DIR}/${GANDIVA_BC_FILE_NAME})\n \n-# Set the path where the so lib file will be installed.\n-if (APPLE)\n-  set(GANDIVA_HELPER_LIB_FILE_NAME libgandiva_helpers.dylib)\n-else()\n-  set(GANDIVA_HELPER_LIB_FILE_NAME libgandiva_helpers.so)\n-endif(APPLE)\n-\n-set(GANDIVA_HELPER_LIB_INSTALL_PATH ${GANDIVA_BC_INSTALL_DIR}/${GANDIVA_HELPER_LIB_FILE_NAME})\n-set(GANDIVA_HELPER_LIB_OUTPUT_PATH ${CMAKE_BINARY_DIR}/debug/${GANDIVA_HELPER_LIB_FILE_NAME})\n-\n set(BC_FILE_PATH_CC \"${CMAKE_CURRENT_BINARY_DIR}/bc_file_path.cc\")\n configure_file(bc_file_path.cc.in ${BC_FILE_PATH_CC})\n \n-# helper files that are shared between libgandiva and libgandiva_helpers\n-set(SHARED_HELPER_FILES\n-      like_holder.cc\n-      regex_util.cc\n-      execution_context.cc\n-      to_date_holder.cc\n-      date_utils.cc)\n-\n set(SRC_FILES annotator.cc\n       bitmap_accumulator.cc\n       configuration.cc\n+      context_helper.cc\n       engine.cc\n+      date_utils.cc\n       expr_decomposer.cc\n       expr_validator.cc\n       expression.cc\n@@ -64,11 +48,15 @@ set(SRC_FILES annotator.cc\n       filter.cc\n       function_registry.cc\n       function_signature.cc\n+      gdv_function_stubs.cc\n       llvm_generator.cc\n       llvm_types.cc\n+      like_holder.cc\n       projector.cc\n+      regex_util.cc\n       selection_vector.cc\n       tree_expr_builder.cc\n+      to_date_holder.cc\n       ${SHARED_HELPER_FILES}\n       ${BC_FILE_PATH_CC})\n \n@@ -103,39 +91,12 @@ build_gandiva_lib(\"shared\" arrow_shared)\n \n build_gandiva_lib(\"static\" arrow_static)\n \n-# Pre-compiled .so library for function helpers.\n-add_library(gandiva_helpers SHARED\n-  ${SHARED_HELPER_FILES}\n-  function_holder_stubs.cc)\n-\n-add_dependencies(gandiva_helpers arrow_dependencies)\n-\n-target_compile_definitions(gandiva_helpers\n-  PRIVATE -DGDV_HELPERS\n-)\n-\n-target_include_directories(gandiva_helpers\n-  PRIVATE\n-    ${CMAKE_SOURCE_DIR}/include\n-    ${CMAKE_SOURCE_DIR}/src\n-    ${ARROW_INCLUDE_DIR}\n-)\n-\n-target_link_libraries(gandiva_helpers PRIVATE Boost::boost re2)\n-\n-# hide all symbols that are not needed.\n-if (NOT APPLE)\n-  # apple linker does not support version scripts, not needed since we package from travis.\n-  set_target_properties(gandiva_helpers PROPERTIES LINK_FLAGS \"-Wl,--version-script=${CMAKE_SOURCE_DIR}/src/gandiva/symbols-helpers.map\")\n-  target_link_libraries(gandiva_helpers LINK_PRIVATE -static-libstdc++ -static-libgcc)\n-endif()\n-\n # install for gandiva\n include(GNUInstallDirs)\n \n # install libgandiva\n install(\n-  TARGETS gandiva_shared gandiva_static gandiva_helpers\n+  TARGETS gandiva_shared gandiva_static\n   DESTINATION ${CMAKE_INSTALL_LIBDIR}\n )\n \n@@ -166,20 +127,25 @@ install(\n   DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig/\")\n \n #args: label test-file src-files\n-add_gandiva_unit_test(bitmap_accumulator_test.cc bitmap_accumulator.cc execution_context.cc)\n-add_gandiva_unit_test(engine_llvm_test.cc engine.cc llvm_types.cc configuration.cc execution_context.cc ${BC_FILE_PATH_CC})\n+add_gandiva_unit_test(bitmap_accumulator_test.cc bitmap_accumulator.cc)\n+add_gandiva_unit_test(engine_llvm_test.cc engine.cc llvm_types.cc configuration.cc\n+    gdv_function_stubs.cc context_helper.cc to_date_holder.cc date_utils.cc ${BC_FILE_PATH_CC})\n add_gandiva_unit_test(function_signature_test.cc function_signature.cc)\n add_gandiva_unit_test(function_registry_test.cc function_registry.cc function_signature.cc)\n add_gandiva_unit_test(llvm_types_test.cc llvm_types.cc)\n-add_gandiva_unit_test(llvm_generator_test.cc llvm_generator.cc regex_util.cc engine.cc llvm_types.cc expr_decomposer.cc function_registry.cc annotator.cc bitmap_accumulator.cc configuration.cc  function_signature.cc like_holder.cc to_date_holder.cc date_utils.cc regex_util.cc execution_context.cc ${BC_FILE_PATH_CC})\n+add_gandiva_unit_test(llvm_generator_test.cc llvm_generator.cc regex_util.cc engine.cc\n+    llvm_types.cc expr_decomposer.cc function_registry.cc annotator.cc\n+    bitmap_accumulator.cc configuration.cc  function_signature.cc like_holder.cc\n+    to_date_holder.cc date_utils.cc regex_util.cc gdv_function_stubs.cc context_helper.cc\n+    ${BC_FILE_PATH_CC})\n add_gandiva_unit_test(annotator_test.cc annotator.cc function_signature.cc)\n-add_gandiva_unit_test(tree_expr_test.cc tree_expr_builder.cc expr_decomposer.cc annotator.cc function_registry.cc function_signature.cc like_holder.cc regex_util.cc to_date_holder.cc date_utils.cc execution_context.cc)\n-add_gandiva_unit_test(expr_decomposer_test.cc expr_decomposer.cc tree_expr_builder.cc annotator.cc function_registry.cc function_signature.cc like_holder.cc regex_util.cc to_date_holder.cc date_utils.cc execution_context.cc)\n+add_gandiva_unit_test(tree_expr_test.cc tree_expr_builder.cc expr_decomposer.cc annotator.cc function_registry.cc function_signature.cc like_holder.cc regex_util.cc to_date_holder.cc date_utils.cc)\n+add_gandiva_unit_test(expr_decomposer_test.cc expr_decomposer.cc tree_expr_builder.cc annotator.cc function_registry.cc function_signature.cc like_holder.cc regex_util.cc to_date_holder.cc date_utils.cc)\n add_gandiva_unit_test(status_test.cc)\n add_gandiva_unit_test(expression_registry_test.cc llvm_types.cc expression_registry.cc function_signature.cc function_registry.cc)\n add_gandiva_unit_test(selection_vector_test.cc selection_vector.cc)\n add_gandiva_unit_test(lru_cache_test.cc)\n-add_gandiva_unit_test(to_date_holder_test.cc to_date_holder.cc date_utils.cc execution_context.cc)\n+add_gandiva_unit_test(to_date_holder_test.cc to_date_holder.cc date_utils.cc)\n \n add_subdirectory(jni)\n add_subdirectory(precompiled)\ndiff --git a/cpp/src/gandiva/bc_file_path.cc.in b/cpp/src/gandiva/bc_file_path.cc.in\nindex 52e887780f..d6b4e342b6 100644\n--- a/cpp/src/gandiva/bc_file_path.cc.in\n+++ b/cpp/src/gandiva/bc_file_path.cc.in\n@@ -20,7 +20,4 @@ namespace gandiva {\n // Path to the byte-code file.\n extern const char kByteCodeFilePath[] = \"${GANDIVA_BC_OUTPUT_PATH}\";\n \n-// Path to the pre-compiled solib file.\n-extern const char kHelperLibFilePath[] = \"${GANDIVA_HELPER_LIB_OUTPUT_PATH}\";\n-\n } // namespace gandiva\ndiff --git a/cpp/src/gandiva/configuration.h b/cpp/src/gandiva/configuration.h\nindex 99992b8933..9014660530 100644\n--- a/cpp/src/gandiva/configuration.h\n+++ b/cpp/src/gandiva/configuration.h\n@@ -26,7 +26,6 @@\n namespace gandiva {\n \n extern const char kByteCodeFilePath[];\n-extern const char kHelperLibFilePath[];\n \n class ConfigurationBuilder;\n /// \\brief runtime config for gandiva\n@@ -38,20 +37,16 @@ class Configuration {\n   friend class ConfigurationBuilder;\n \n   const std::string& byte_code_file_path() const { return byte_code_file_path_; }\n-  const std::string& helper_lib_file_path() const { return helper_lib_file_path_; }\n \n   std::size_t Hash() const;\n   bool operator==(const Configuration& other) const;\n   bool operator!=(const Configuration& other) const;\n \n  private:\n-  explicit Configuration(const std::string& byte_code_file_path,\n-                         const std::string& helper_lib_file_path)\n-      : byte_code_file_path_(byte_code_file_path),\n-        helper_lib_file_path_(helper_lib_file_path) {}\n+  explicit Configuration(const std::string& byte_code_file_path)\n+      : byte_code_file_path_(byte_code_file_path) {}\n \n   const std::string byte_code_file_path_;\n-  const std::string helper_lib_file_path_;\n };\n \n /// \\brief configuration builder for gandiva\n@@ -60,24 +55,15 @@ class Configuration {\n /// to override specific values and build a custom instance\n class ConfigurationBuilder {\n  public:\n-  ConfigurationBuilder()\n-      : byte_code_file_path_(kByteCodeFilePath),\n-        helper_lib_file_path_(kHelperLibFilePath) {}\n+  ConfigurationBuilder() : byte_code_file_path_(kByteCodeFilePath) {}\n \n   ConfigurationBuilder& set_byte_code_file_path(const std::string& byte_code_file_path) {\n     byte_code_file_path_ = byte_code_file_path;\n     return *this;\n   }\n \n-  ConfigurationBuilder& set_helper_lib_file_path(\n-      const std::string& helper_lib_file_path) {\n-    helper_lib_file_path_ = helper_lib_file_path;\n-    return *this;\n-  }\n-\n   std::shared_ptr<Configuration> build() {\n-    std::shared_ptr<Configuration> configuration(\n-        new Configuration(byte_code_file_path_, helper_lib_file_path_));\n+    std::shared_ptr<Configuration> configuration(new Configuration(byte_code_file_path_));\n     return configuration;\n   }\n \n@@ -87,11 +73,9 @@ class ConfigurationBuilder {\n \n  private:\n   std::string byte_code_file_path_;\n-  std::string helper_lib_file_path_;\n \n   static std::shared_ptr<Configuration> InitDefaultConfig() {\n-    std::shared_ptr<Configuration> configuration(\n-        new Configuration(kByteCodeFilePath, kHelperLibFilePath));\n+    std::shared_ptr<Configuration> configuration(new Configuration(kByteCodeFilePath));\n     return configuration;\n   }\n \ndiff --git a/cpp/src/gandiva/precompiled/context_helper.cc b/cpp/src/gandiva/context_helper.cc\nsimilarity index 73%\nrename from cpp/src/gandiva/precompiled/context_helper.cc\nrename to cpp/src/gandiva/context_helper.cc\nindex 60ab7d1bba..649c4a0a75 100644\n--- a/cpp/src/gandiva/precompiled/context_helper.cc\n+++ b/cpp/src/gandiva/context_helper.cc\n@@ -15,15 +15,14 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#ifndef GANDIVA_CONTEXT_HELPER_H\n-#define GANDIVA_CONTEXT_HELPER_H\n-\n #include \"gandiva/execution_context.h\"\n-#include \"gandiva/precompiled/types.h\"\n+#include \"gandiva/gdv_function_stubs.h\"\n+\n+extern \"C\" {\n \n-void context_set_error_msg(int64_t context_ptr, char const* err_msg) {\n-  gandiva::helpers::ExecutionContext* execution_context_ptr =\n-      reinterpret_cast<gandiva::helpers::ExecutionContext*>(context_ptr);\n+void gdv_fn_context_set_error_msg(int64_t context_ptr, char const* err_msg) {\n+  gandiva::ExecutionContext* execution_context_ptr =\n+      reinterpret_cast<gandiva::ExecutionContext*>(context_ptr);\n   (execution_context_ptr)->set_error_msg(err_msg);\n }\n-#endif\n+}\ndiff --git a/cpp/src/gandiva/date_utils.cc b/cpp/src/gandiva/date_utils.cc\nindex 1b60e10ee4..eacb54108f 100644\n--- a/cpp/src/gandiva/date_utils.cc\n+++ b/cpp/src/gandiva/date_utils.cc\n@@ -23,10 +23,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n std::vector<std::string> DateUtils::GetMatches(std::string pattern, bool exactMatch) {\n   // we are case insensitive\n   std::transform(pattern.begin(), pattern.end(), pattern.begin(), ::tolower);\n@@ -238,8 +234,4 @@ DateUtils::date_format_converter DateUtils::InitMap() {\n   return map;\n }\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n-\n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/date_utils.h b/cpp/src/gandiva/date_utils.h\nindex cac7bffe73..0f17bdf244 100644\n--- a/cpp/src/gandiva/date_utils.h\n+++ b/cpp/src/gandiva/date_utils.h\n@@ -27,10 +27,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n /// \\brief Utility class for converting sql date patterns to internal date patterns.\n class DateUtils {\n  public:\n@@ -51,10 +47,6 @@ class DateUtils {\n   static std::vector<std::string> GetExactMatches(const std::string& pattern);\n };\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n-\n }  // namespace gandiva\n \n #endif  // TO_DATE_HELPER_H\ndiff --git a/cpp/src/gandiva/engine.cc b/cpp/src/gandiva/engine.cc\nindex 49d0b9610e..773da6488e 100644\n--- a/cpp/src/gandiva/engine.cc\n+++ b/cpp/src/gandiva/engine.cc\n@@ -39,6 +39,7 @@\n #include <llvm/Transforms/Scalar.h>\n #include <llvm/Transforms/Scalar/GVN.h>\n #include <llvm/Transforms/Vectorize.h>\n+#include \"gandiva/gdv_function_stubs.h\"\n \n namespace gandiva {\n \n@@ -57,6 +58,8 @@ void Engine::InitOnce() {\n   llvm::InitializeNativeTargetAsmParser();\n   llvm::InitializeNativeTargetDisassembler();\n \n+  llvm::sys::DynamicLibrary::LoadLibraryPermanently(nullptr);\n+\n   init_once_done_ = true;\n }\n \n@@ -68,6 +71,7 @@ Status Engine::Make(std::shared_ptr<Configuration> config,\n   std::call_once(init_once_flag, [&engine_obj] { engine_obj->InitOnce(); });\n   engine_obj->context_.reset(new llvm::LLVMContext());\n   engine_obj->ir_builder_.reset(new llvm::IRBuilder<>(*(engine_obj->context())));\n+  engine_obj->types_.reset(new LLVMTypes(*(engine_obj->context())));\n \n   // Create the execution engine\n   std::unique_ptr<llvm::Module> cg_module(\n@@ -84,35 +88,16 @@ Status Engine::Make(std::shared_ptr<Configuration> config,\n     return Status::CodeGenError(engine_obj->llvm_error_);\n   }\n \n-  auto status = engine_obj->LoadPreCompiledHelperLibs(config->helper_lib_file_path());\n-  GANDIVA_RETURN_NOT_OK(status);\n+  // Add mappings for functions that can be accessed from LLVM/IR module.\n+  engine_obj->AddGlobalMappings();\n \n-  status = engine_obj->LoadPreCompiledIRFiles(config->byte_code_file_path());\n+  auto status = engine_obj->LoadPreCompiledIRFiles(config->byte_code_file_path());\n   GANDIVA_RETURN_NOT_OK(status);\n \n   *engine = std::move(engine_obj);\n   return Status::OK();\n }\n \n-Status Engine::LoadPreCompiledHelperLibs(const std::string& file_path) {\n-  int err = 0;\n-\n-  mtx_.lock();\n-  // Load each so lib only once.\n-  if (loaded_libs_.find(file_path) == loaded_libs_.end()) {\n-    err = llvm::sys::DynamicLibrary::LoadLibraryPermanently(file_path.c_str());\n-    if (!err) {\n-      loaded_libs_.insert(file_path);\n-    }\n-  }\n-  mtx_.unlock();\n-\n-  return (err == 0)\n-             ? Status::OK()\n-             : Status::CodeGenError(\"loading precompiled native file \" + file_path +\n-                                    \" failed with error \" + std::to_string(err));\n-}\n-\n // Handling for pre-compiled IR libraries.\n Status Engine::LoadPreCompiledIRFiles(const std::string& byte_code_file_path) {\n   /// Read from file into memory buffer.\n@@ -157,26 +142,26 @@ Status Engine::FinalizeModule(bool optimise_ir, bool dump_ir) {\n   }\n \n   // Setup an optimiser pipeline\n-  if (optimise_ir) {\n-    std::unique_ptr<llvm::legacy::PassManager> pass_manager(\n-        new llvm::legacy::PassManager());\n-\n-    // First round : get rid of all functions that don't need to be compiled.\n-    // This helps in reducing the overall compilation time.\n-    // (Adapted from Apache Impala)\n-    //\n-    // Done by marking all the unused functions as internal, and then, running\n-    // a pass for dead code elimination.\n-    std::unordered_set<std::string> used_functions;\n-    used_functions.insert(functions_to_compile_.begin(), functions_to_compile_.end());\n-\n-    pass_manager->add(\n-        llvm::createInternalizePass([&used_functions](const llvm::GlobalValue& func) {\n-          return (used_functions.find(func.getName().str()) != used_functions.end());\n-        }));\n-    pass_manager->add(llvm::createGlobalDCEPass());\n-    pass_manager->run(*module_);\n+  std::unique_ptr<llvm::legacy::PassManager> pass_manager(\n+      new llvm::legacy::PassManager());\n+\n+  // First round : get rid of all functions that don't need to be compiled.\n+  // This helps in reducing the overall compilation time.\n+  // (Adapted from Apache Impala)\n+  //\n+  // Done by marking all the unused functions as internal, and then, running\n+  // a pass for dead code elimination.\n+  std::unordered_set<std::string> used_functions;\n+  used_functions.insert(functions_to_compile_.begin(), functions_to_compile_.end());\n+\n+  pass_manager->add(\n+      llvm::createInternalizePass([&used_functions](const llvm::GlobalValue& func) {\n+        return (used_functions.find(func.getName().str()) != used_functions.end());\n+      }));\n+  pass_manager->add(llvm::createGlobalDCEPass());\n+  pass_manager->run(*module_);\n \n+  if (optimise_ir) {\n     // Second round : misc passes to allow for inlining, vectorization, ..\n     pass_manager.reset(new llvm::legacy::PassManager());\n     llvm::TargetIRAnalysis target_analysis =\n@@ -218,6 +203,45 @@ void* Engine::CompiledFunction(llvm::Function* irFunction) {\n   return execution_engine_->getPointerToFunction(irFunction);\n }\n \n+void Engine::AddGlobalMappingForFunc(const std::string& name, llvm::Type* ret_type,\n+                                     const std::vector<llvm::Type*>& args,\n+                                     void* function_ptr) {\n+  auto prototype = llvm::FunctionType::get(ret_type, args, false /*isVarArg*/);\n+  auto fn = llvm::Function::Create(prototype, llvm::GlobalValue::ExternalLinkage, name,\n+                                   module());\n+  execution_engine_->addGlobalMapping(fn, function_ptr);\n+}\n+\n+void Engine::AddGlobalMappings() {\n+  std::vector<llvm::Type*> args;\n+\n+  // gdv_fn_like_utf8_utf8\n+  args = {types().i64_type(), types().i8_ptr_type(), types().i32_type(),\n+          types().i8_ptr_type(), types().i32_type()};\n+  AddGlobalMappingForFunc(\"gdv_fn_like_utf8_utf8\", types().i1_type(), args,\n+                          reinterpret_cast<void*>(gdv_fn_like_utf8_utf8));\n+\n+  // gdv_fn_to_date_utf8_utf8_int32\n+  args = {types().i64_type(),\n+          types().i8_ptr_type(),\n+          types().i32_type(),\n+          types().i1_type(),\n+          types().i8_ptr_type(),\n+          types().i32_type(),\n+          types().i1_type(),\n+          types().i32_type(),\n+          types().i1_type(),\n+          types().i64_type(),\n+          types().ptr_type(types().i8_type())};\n+  AddGlobalMappingForFunc(\"gdv_fn_to_date_utf8_utf8_int32\", types().i64_type(), args,\n+                          reinterpret_cast<void*>(gdv_fn_to_date_utf8_utf8_int32));\n+\n+  // gdv_fn_context_set_error_msg\n+  args = {types().i64_type(), types().i8_ptr_type()};\n+  AddGlobalMappingForFunc(\"gdv_fn_context_set_error_msg\", types().void_type(), args,\n+                          reinterpret_cast<void*>(gdv_fn_context_set_error_msg));\n+}\n+\n void Engine::DumpIR(std::string prefix) {\n   std::string str;\n \ndiff --git a/cpp/src/gandiva/engine.h b/cpp/src/gandiva/engine.h\nindex 7ee6dd50ae..20c69f42d8 100644\n--- a/cpp/src/gandiva/engine.h\n+++ b/cpp/src/gandiva/engine.h\n@@ -31,6 +31,7 @@\n #include \"arrow/util/macros.h\"\n \n #include \"gandiva/configuration.h\"\n+#include \"gandiva/llvm_types.h\"\n #include \"gandiva/logging.h\"\n #include \"gandiva/status.h\"\n \n@@ -63,12 +64,7 @@ class Engine {\n   /// Get the compiled function corresponding to the irfunction.\n   void* CompiledFunction(llvm::Function* irFunction);\n \n-  /// check if function from dlsym exists in address space. Returns true on success.\n-  bool CheckFunctionFromLoadedLib(const std::string& name) {\n-    auto ptr =\n-        execution_engine_->getPointerToNamedFunction(name, false /*AbortOnFailure*/);\n-    return ptr != NULLPTR;\n-  }\n+  LLVMTypes& types() { return *types_; }\n \n  private:\n   /// private constructor to ensure engine is created\n@@ -81,17 +77,22 @@ class Engine {\n \n   llvm::ExecutionEngine& execution_engine() { return *execution_engine_.get(); }\n \n-  /// load pre-compiled so libraries and merge them into the main module.\n-  Status LoadPreCompiledHelperLibs(const std::string& helper_lib_file_path);\n-\n   /// load pre-compiled IR modules and merge them into the main module.\n   Status LoadPreCompiledIRFiles(const std::string& byte_code_file_path);\n \n+  // Create and add a mapping for the cpp function to make it accessible from LLVM.\n+  void AddGlobalMappingForFunc(const std::string& name, llvm::Type* ret_type,\n+                               const std::vector<llvm::Type*>& args, void* func);\n+\n+  // Create and add mappings for cpp functions that can be accessed from LLVM.\n+  void AddGlobalMappings();\n+\n   /// dump the IR code to stdout with the prefix string.\n   void DumpIR(std::string prefix);\n \n   std::unique_ptr<llvm::LLVMContext> context_;\n   std::unique_ptr<llvm::ExecutionEngine> execution_engine_;\n+  std::unique_ptr<LLVMTypes> types_;\n   std::unique_ptr<llvm::IRBuilder<>> ir_builder_;\n   llvm::Module* module_;  // This is owned by the execution_engine_, so doesn't need to be\n                           // explicitly deleted.\ndiff --git a/cpp/src/gandiva/execution_context.h b/cpp/src/gandiva/execution_context.h\nindex 8952abfba3..8a529eeb1f 100644\n--- a/cpp/src/gandiva/execution_context.h\n+++ b/cpp/src/gandiva/execution_context.h\n@@ -22,23 +22,24 @@\n #include <string>\n \n namespace gandiva {\n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-/// Error holder for errors during llvm module execution\n+\n+/// Execution context during llvm evaluation\n class ExecutionContext {\n  public:\n-  std::string get_error() const;\n+  std::string get_error() const { return error_msg_; }\n \n-  void set_error_msg(const char* error_msg);\n+  void set_error_msg(const char* error_msg) {\n+    // Remember the first error only.\n+    if (error_msg_.empty()) {\n+      error_msg_ = std::string(error_msg);\n+    }\n+  }\n \n-  bool has_error() const;\n+  bool has_error() const { return !error_msg_.empty(); }\n \n  private:\n-  std::unique_ptr<std::string> error_msg_;\n+  std::string error_msg_;\n };\n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n+\n }  // namespace gandiva\n #endif  // ERROR_HOLDER_H\ndiff --git a/cpp/src/gandiva/function_registry.cc b/cpp/src/gandiva/function_registry.cc\nindex 6e5bc23d74..81bbdbf986 100644\n--- a/cpp/src/gandiva/function_registry.cc\n+++ b/cpp/src/gandiva/function_registry.cc\n@@ -416,10 +416,10 @@ NativeFunction FunctionRegistry::pc_registry_[] = {\n     BINARY_RELATIONAL_SAFE_NULL_IF_NULL(ends_with, utf8),\n \n     NativeFunction(\"like\", DataTypeVector{utf8(), utf8()}, boolean(), RESULT_NULL_IF_NULL,\n-                   \"like_utf8_utf8\", true /*needs_holder*/),\n+                   \"gdv_fn_like_utf8_utf8\", true /*needs_holder*/),\n \n     NativeFunction(\"to_date\", DataTypeVector{utf8(), utf8(), int32()}, date64(),\n-                   RESULT_NULL_INTERNAL, \"to_date_utf8_utf8_int32\", true, true),\n+                   RESULT_NULL_INTERNAL, \"gdv_fn_to_date_utf8_utf8_int32\", true, true),\n \n     NativeFunction(\"castDATE\", DataTypeVector{utf8()}, date64(), RESULT_NULL_INTERNAL,\n                    \"castDATE_utf8\", false /*needs_holder*/, true /*needs context*/),\ndiff --git a/cpp/src/gandiva/function_holder_stubs.cc b/cpp/src/gandiva/gdv_function_stubs.cc\nsimilarity index 54%\nrename from cpp/src/gandiva/function_holder_stubs.cc\nrename to cpp/src/gandiva/gdv_function_stubs.cc\nindex f37f65333c..b6c6c8a582 100644\n--- a/cpp/src/gandiva/function_holder_stubs.cc\n+++ b/cpp/src/gandiva/gdv_function_stubs.cc\n@@ -15,24 +15,30 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include \"gandiva/gdv_function_stubs.h\"\n+\n+#include <string>\n+\n #include \"gandiva/like_holder.h\"\n #include \"gandiva/to_date_holder.h\"\n \n-// Wrapper C functions for \"like\" to be invoked from LLVM.\n-extern \"C\" bool like_utf8_utf8(int64_t ptr, const char* data, int data_len,\n-                               const char* pattern, int pattern_len) {\n-  gandiva::helpers::LikeHolder* holder =\n-      reinterpret_cast<gandiva::helpers::LikeHolder*>(ptr);\n+/// Stub functions that can be accessed from LLVM or the pre-compiled library.\n+\n+extern \"C\" {\n+\n+bool gdv_fn_like_utf8_utf8(int64_t ptr, const char* data, int data_len,\n+                           const char* pattern, int pattern_len) {\n+  gandiva::LikeHolder* holder = reinterpret_cast<gandiva::LikeHolder*>(ptr);\n   return (*holder)(std::string(data, data_len));\n }\n \n-extern \"C\" int64_t to_date_utf8_utf8_int32(int64_t ptr, const char* data, int data_len,\n-                                           bool in1_validity, const char* pattern,\n-                                           int pattern_len, bool in2_validity,\n-                                           int32_t suppress_errors, bool in3_validity,\n-                                           int64_t execution_context, bool* out_valid) {\n-  gandiva::helpers::ToDateHolder* holder =\n-      reinterpret_cast<gandiva::helpers::ToDateHolder*>(ptr);\n+int64_t gdv_fn_to_date_utf8_utf8_int32(int64_t ptr, const char* data, int data_len,\n+                                       bool in1_validity, const char* pattern,\n+                                       int pattern_len, bool in2_validity,\n+                                       int32_t suppress_errors, bool in3_validity,\n+                                       int64_t execution_context, bool* out_valid) {\n+  gandiva::ToDateHolder* holder = reinterpret_cast<gandiva::ToDateHolder*>(ptr);\n   return (*holder)(std::string(data, data_len), in1_validity, execution_context,\n                    out_valid);\n }\n+}\ndiff --git a/cpp/src/gandiva/execution_context.cc b/cpp/src/gandiva/gdv_function_stubs.h\nsimilarity index 50%\nrename from cpp/src/gandiva/execution_context.cc\nrename to cpp/src/gandiva/gdv_function_stubs.h\nindex 1ff44c7ccd..9480b7575e 100644\n--- a/cpp/src/gandiva/execution_context.cc\n+++ b/cpp/src/gandiva/gdv_function_stubs.h\n@@ -15,32 +15,25 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"gandiva/execution_context.h\"\n+#include <cstdint>\n \n-namespace gandiva {\n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n+#ifndef GDV_FUNCTION_STUBS_H\n+#define GDV_FUNCTION_STUBS_H\n \n-void ExecutionContext::set_error_msg(const char* error_msg) {\n-  if (error_msg_.get() == nullptr) {\n-    error_msg_.reset(new std::string(error_msg));\n-  }\n-}\n+/// Stub functions that can be accessed from LLVM.\n \n-std::string ExecutionContext::get_error() const {\n-  if (error_msg_.get() != nullptr) {\n-    return *(error_msg_.get());\n-  }\n-  return std::string(\"\");\n-}\n+extern \"C\" {\n \n-bool ExecutionContext::has_error() const {\n-  return error_msg_.get() != nullptr && !(error_msg_.get()->empty());\n-}\n+bool gdv_fn_like_utf8_utf8(int64_t ptr, const char* data, int data_len,\n+                           const char* pattern, int pattern_len);\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n+int64_t gdv_fn_to_date_utf8_utf8_int32(int64_t ptr, const char* data, int data_len,\n+                                       bool in1_validity, const char* pattern,\n+                                       int pattern_len, bool in2_validity,\n+                                       int32_t suppress_errors, bool in3_validity,\n+                                       int64_t execution_context, bool* out_valid);\n+\n+void gdv_fn_context_set_error_msg(int64_t context_ptr, const char* err_msg);\n+}\n \n-}  // namespace gandiva\n+#endif  // GDV_FUNCTION_STUBS_H\ndiff --git a/cpp/src/gandiva/jni/config_builder.cc b/cpp/src/gandiva/jni/config_builder.cc\nindex 9c9eb8d0ff..b224279c1a 100644\n--- a/cpp/src/gandiva/jni/config_builder.cc\n+++ b/cpp/src/gandiva/jni/config_builder.cc\n@@ -36,20 +36,12 @@ Java_org_apache_arrow_gandiva_evaluator_ConfigurationBuilder_buildConfigInstance\n     JNIEnv* env, jobject configuration) {\n   jstring byte_code_file_path =\n       (jstring)env->CallObjectMethod(configuration, byte_code_accessor_method_id_, 0);\n-  jstring helper_library_file_path = (jstring)env->CallObjectMethod(\n-      configuration, helper_library_accessor_method_id_, 0);\n   ConfigurationBuilder configuration_builder;\n   if (byte_code_file_path != nullptr) {\n     const char* byte_code_file_path_cpp = env->GetStringUTFChars(byte_code_file_path, 0);\n     configuration_builder.set_byte_code_file_path(byte_code_file_path_cpp);\n     env->ReleaseStringUTFChars(byte_code_file_path, byte_code_file_path_cpp);\n   }\n-  if (helper_library_file_path != nullptr) {\n-    const char* helper_library_file_path_cpp =\n-        env->GetStringUTFChars(helper_library_file_path, 0);\n-    configuration_builder.set_helper_lib_file_path(helper_library_file_path_cpp);\n-    env->ReleaseStringUTFChars(helper_library_file_path, helper_library_file_path_cpp);\n-  }\n   std::shared_ptr<Configuration> config = configuration_builder.build();\n   env->DeleteLocalRef(byte_code_file_path);\n   return ConfigHolder::MapInsert(config);\ndiff --git a/cpp/src/gandiva/jni/env_helper.h b/cpp/src/gandiva/jni/env_helper.h\nindex 2de9a924b3..c1bfbaa82a 100644\n--- a/cpp/src/gandiva/jni/env_helper.h\n+++ b/cpp/src/gandiva/jni/env_helper.h\n@@ -25,6 +25,5 @@ extern jclass configuration_builder_class_;\n \n // method references\n extern jmethodID byte_code_accessor_method_id_;\n-extern jmethodID helper_library_accessor_method_id_;\n \n #endif  // ENV_HELPER_H\ndiff --git a/cpp/src/gandiva/jni/jni_common.cc b/cpp/src/gandiva/jni/jni_common.cc\nindex af1b99bece..f2cafc8ea3 100644\n--- a/cpp/src/gandiva/jni/jni_common.cc\n+++ b/cpp/src/gandiva/jni/jni_common.cc\n@@ -68,7 +68,6 @@ static jint JNI_VERSION = JNI_VERSION_1_6;\n // extern refs - initialized for other modules.\n jclass configuration_builder_class_;\n jmethodID byte_code_accessor_method_id_;\n-jmethodID helper_library_accessor_method_id_;\n \n // refs for self.\n static jclass gandiva_exception_;\n@@ -98,9 +97,6 @@ jint JNI_OnLoad(JavaVM* vm, void* reserved) {\n   byte_code_accessor_method_id_ =\n       env->GetMethodID(configuration_builder_class_, method_name, return_type);\n \n-  const char helper_method_name[] = \"getHelperLibraryFilePath\";\n-  helper_library_accessor_method_id_ =\n-      env->GetMethodID(configuration_builder_class_, helper_method_name, return_type);\n   env->ExceptionDescribe();\n \n   return JNI_VERSION;\ndiff --git a/cpp/src/gandiva/like_holder.cc b/cpp/src/gandiva/like_holder.cc\nindex 5f72a696ff..9509b59448 100644\n--- a/cpp/src/gandiva/like_holder.cc\n+++ b/cpp/src/gandiva/like_holder.cc\n@@ -23,10 +23,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n RE2 LikeHolder::starts_with_regex_(R\"((\\w|\\s)*\\.\\*)\");\n RE2 LikeHolder::ends_with_regex_(R\"(\\.\\*(\\w|\\s)*)\");\n \n@@ -92,8 +88,4 @@ Status LikeHolder::Make(const std::string& sql_pattern,\n   return Status::OK();\n }\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n-\n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/like_holder.h b/cpp/src/gandiva/like_holder.h\nindex b023e085c3..4d5a32c8ff 100644\n--- a/cpp/src/gandiva/like_holder.h\n+++ b/cpp/src/gandiva/like_holder.h\n@@ -28,10 +28,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n /// Function Holder for SQL 'like'\n class LikeHolder : public FunctionHolder {\n  public:\n@@ -57,10 +53,6 @@ class LikeHolder : public FunctionHolder {\n   static RE2 ends_with_regex_;    // pre-compiled pattern for matching ends_with\n };\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n-\n }  // namespace gandiva\n \n #endif  // GANDIVA_LIKE_HOLDER_H\ndiff --git a/cpp/src/gandiva/llvm_generator.cc b/cpp/src/gandiva/llvm_generator.cc\nindex 7713900b2d..d8f857897f 100644\n--- a/cpp/src/gandiva/llvm_generator.cc\n+++ b/cpp/src/gandiva/llvm_generator.cc\n@@ -45,7 +45,7 @@ Status LLVMGenerator::Make(std::shared_ptr<Configuration> config,\n   std::unique_ptr<LLVMGenerator> llvmgen_obj(new LLVMGenerator());\n   Status status = Engine::Make(config, &(llvmgen_obj->engine_));\n   GANDIVA_RETURN_NOT_OK(status);\n-  llvmgen_obj->types_.reset(new LLVMTypes(*(llvmgen_obj->engine_)->context()));\n+\n   *llvm_generator = std::move(llvmgen_obj);\n   return Status::OK();\n }\n@@ -120,7 +120,7 @@ llvm::Value* LLVMGenerator::LoadVectorAtIndex(llvm::Value* arg_addrs, int idx,\n                                               const std::string& name) {\n   llvm::IRBuilder<>& builder = ir_builder();\n   llvm::Value* offset =\n-      builder.CreateGEP(arg_addrs, types_->i32_constant(idx), name + \"_mem_addr\");\n+      builder.CreateGEP(arg_addrs, types().i32_constant(idx), name + \"_mem_addr\");\n   return builder.CreateLoad(offset, name + \"_mem\");\n }\n \n@@ -129,7 +129,7 @@ llvm::Value* LLVMGenerator::GetValidityReference(llvm::Value* arg_addrs, int idx\n                                                  FieldPtr field) {\n   const std::string& name = field->name();\n   llvm::Value* load = LoadVectorAtIndex(arg_addrs, idx, name);\n-  return ir_builder().CreateIntToPtr(load, types_->i64_ptr_type(), name + \"_varray\");\n+  return ir_builder().CreateIntToPtr(load, types().i64_ptr_type(), name + \"_varray\");\n }\n \n /// Get reference to data array at specified index in the args list.\n@@ -137,12 +137,12 @@ llvm::Value* LLVMGenerator::GetDataReference(llvm::Value* arg_addrs, int idx,\n                                              FieldPtr field) {\n   const std::string& name = field->name();\n   llvm::Value* load = LoadVectorAtIndex(arg_addrs, idx, name);\n-  llvm::Type* base_type = types_->DataVecType(field->type());\n+  llvm::Type* base_type = types().DataVecType(field->type());\n   llvm::Value* ret;\n   if (base_type->isPointerTy()) {\n     ret = ir_builder().CreateIntToPtr(load, base_type, name + \"_darray\");\n   } else {\n-    llvm::Type* pointer_type = types_->ptr_type(base_type);\n+    llvm::Type* pointer_type = types().ptr_type(base_type);\n     ret = ir_builder().CreateIntToPtr(load, pointer_type, name + \"_darray\");\n   }\n   return ret;\n@@ -153,13 +153,13 @@ llvm::Value* LLVMGenerator::GetOffsetsReference(llvm::Value* arg_addrs, int idx,\n                                                 FieldPtr field) {\n   const std::string& name = field->name();\n   llvm::Value* load = LoadVectorAtIndex(arg_addrs, idx, name);\n-  return ir_builder().CreateIntToPtr(load, types_->i32_ptr_type(), name + \"_oarray\");\n+  return ir_builder().CreateIntToPtr(load, types().i32_ptr_type(), name + \"_oarray\");\n }\n \n /// Get reference to local bitmap array at specified index in the args list.\n llvm::Value* LLVMGenerator::GetLocalBitMapReference(llvm::Value* arg_bitmaps, int idx) {\n   llvm::Value* load = LoadVectorAtIndex(arg_bitmaps, idx, \"\");\n-  return ir_builder().CreateIntToPtr(load, types_->i64_ptr_type(),\n+  return ir_builder().CreateIntToPtr(load, types().i64_ptr_type(),\n                                      std::to_string(idx) + \"_lbmap\");\n }\n \n@@ -220,12 +220,12 @@ Status LLVMGenerator::CodeGenExprValue(DexPtr value_expr, FieldDescriptorPtr out\n   // Create fn prototype :\n   //   int expr_1 (long **addrs, long **bitmaps, long *context_ptr, long nrec)\n   std::vector<llvm::Type*> arguments;\n-  arguments.push_back(types_->i64_ptr_type());\n-  arguments.push_back(types_->i64_ptr_type());\n-  arguments.push_back(types_->i64_type());\n-  arguments.push_back(types_->i64_type());\n+  arguments.push_back(types().i64_ptr_type());\n+  arguments.push_back(types().i64_ptr_type());\n+  arguments.push_back(types().i64_type());\n+  arguments.push_back(types().i64_type());\n   llvm::FunctionType* prototype =\n-      llvm::FunctionType::get(types_->i32_type(), arguments, false /*isVarArg*/);\n+      llvm::FunctionType::get(types().i32_type(), arguments, false /*isVarArg*/);\n \n   // Create fn\n   std::string func_name = \"expr_\" + std::to_string(suffix_idx);\n@@ -261,7 +261,7 @@ Status LLVMGenerator::CodeGenExprValue(DexPtr value_expr, FieldDescriptorPtr out\n   builder.SetInsertPoint(loop_body);\n \n   // define loop_var : start with 0, +1 after each iter\n-  llvm::PHINode* loop_var = builder.CreatePHI(types_->i64_type(), 2, \"loop_var\");\n+  llvm::PHINode* loop_var = builder.CreatePHI(types().i64_type(), 2, \"loop_var\");\n \n   // The visitor can add code to both the entry/loop blocks.\n   Visitor visitor(this, *fn, loop_entry, arg_addrs, arg_local_bitmaps, arg_context_ptr,\n@@ -287,9 +287,9 @@ Status LLVMGenerator::CodeGenExprValue(DexPtr value_expr, FieldDescriptorPtr out\n   ADD_TRACE(\"saving result \" + output->Name() + \" value %T\", output_value->data());\n \n   // check loop_var\n-  loop_var->addIncoming(types_->i64_constant(0), loop_entry);\n+  loop_var->addIncoming(types().i64_constant(0), loop_entry);\n   llvm::Value* loop_update =\n-      builder.CreateAdd(loop_var, types_->i64_constant(1), \"loop_var+1\");\n+      builder.CreateAdd(loop_var, types().i64_constant(1), \"loop_var+1\");\n   loop_var->addIncoming(loop_update, loop_body_tail);\n \n   llvm::Value* loop_var_check =\n@@ -298,7 +298,7 @@ Status LLVMGenerator::CodeGenExprValue(DexPtr value_expr, FieldDescriptorPtr out\n \n   // Loop exit\n   builder.SetInsertPoint(loop_exit);\n-  builder.CreateRet(types_->i32_constant(0));\n+  builder.CreateRet(types().i32_constant(0));\n   return Status::OK();\n }\n \n@@ -308,8 +308,8 @@ llvm::Value* LLVMGenerator::GetPackedBitValue(llvm::Value* bitmap,\n   ADD_TRACE(\"fetch bit at position %T\", position);\n \n   llvm::Value* bitmap8 = ir_builder().CreateBitCast(\n-      bitmap, types_->ptr_type(types_->i8_type()), \"bitMapCast\");\n-  return AddFunctionCall(\"bitMapGetBit\", types_->i1_type(), {bitmap8, position});\n+      bitmap, types().ptr_type(types().i8_type()), \"bitMapCast\");\n+  return AddFunctionCall(\"bitMapGetBit\", types().i1_type(), {bitmap8, position});\n }\n \n /// Set the value of a bit in bitMap.\n@@ -319,8 +319,8 @@ void LLVMGenerator::SetPackedBitValue(llvm::Value* bitmap, llvm::Value* position\n   ADD_TRACE(\"  to value %T \", value);\n \n   llvm::Value* bitmap8 = ir_builder().CreateBitCast(\n-      bitmap, types_->ptr_type(types_->i8_type()), \"bitMapCast\");\n-  AddFunctionCall(\"bitMapSetBit\", types_->void_type(), {bitmap8, position, value});\n+      bitmap, types().ptr_type(types().i8_type()), \"bitMapCast\");\n+  AddFunctionCall(\"bitMapSetBit\", types().void_type(), {bitmap8, position, value});\n }\n \n /// Clear the bit in bitMap if value = false.\n@@ -330,8 +330,8 @@ void LLVMGenerator::ClearPackedBitValueIfFalse(llvm::Value* bitmap, llvm::Value*\n   ADD_TRACE(\"   value %T \", value);\n \n   llvm::Value* bitmap8 = ir_builder().CreateBitCast(\n-      bitmap, types_->ptr_type(types_->i8_type()), \"bitMapCast\");\n-  AddFunctionCall(\"bitMapClearBitIfFalse\", types_->void_type(),\n+      bitmap, types().ptr_type(types().i8_type()), \"bitMapCast\");\n+  AddFunctionCall(\"bitMapClearBitIfFalse\", types().void_type(),\n                   {bitmap8, position, value});\n }\n \n@@ -354,37 +354,10 @@ void LLVMGenerator::ComputeBitMapsForExpr(const CompiledExpr& compiled_expr,\n   accumulator.ComputeResult(dst_bitmap);\n }\n \n-void LLVMGenerator::CheckAndAddPrototype(const std::string& full_name,\n-                                         llvm::Type* ret_type,\n-                                         const std::vector<llvm::Value*>& args) {\n-  auto fn = module()->getFunction(full_name);\n-  if (fn != nullptr) {\n-    // prototype already added to module.\n-    return;\n-  }\n-\n-  // must be a function in the helper library.\n-  DCHECK_EQ(engine_->CheckFunctionFromLoadedLib(full_name), true)\n-      << \"missing cpp function in library \" + full_name;\n-\n-  // Create fn prototype for evaluation\n-  std::vector<llvm::Type*> arg_types;\n-  for (auto& value : args) {\n-    arg_types.push_back(value->getType());\n-  }\n-  llvm::FunctionType* prototype =\n-      llvm::FunctionType::get(ret_type, arg_types, false /*isVarArg*/);\n-\n-  fn = llvm::Function::Create(prototype, llvm::GlobalValue::ExternalLinkage, full_name,\n-                              module());\n-  DCHECK_NE(fn, nullptr) << \" cpp function \" << full_name << \" does not exist\";\n-}\n-\n llvm::Value* LLVMGenerator::AddFunctionCall(const std::string& full_name,\n                                             llvm::Type* ret_type,\n                                             const std::vector<llvm::Value*>& args) {\n   // find the llvm function.\n-  CheckAndAddPrototype(full_name, ret_type, args);\n   llvm::Function* fn = module()->getFunction(full_name);\n   DCHECK_NE(fn, nullptr) << \"missing function \" << full_name;\n \n@@ -458,7 +431,7 @@ void LLVMGenerator::Visitor::Visit(const VectorReadVarLenValueDex& dex) {\n \n   // => offset_end = offsets[loop_var + 1]\n   llvm::Value* loop_var_next =\n-      builder.CreateAdd(loop_var_, generator_->types_->i64_constant(1), \"loop_var+1\");\n+      builder.CreateAdd(loop_var_, generator_->types().i64_constant(1), \"loop_var+1\");\n   slot = builder.CreateGEP(offsets_slot_ref, loop_var_next);\n   llvm::Value* offset_end = builder.CreateLoad(slot, \"offset_end\");\n \n@@ -495,87 +468,87 @@ void LLVMGenerator::Visitor::Visit(const LocalBitMapValidityDex& dex) {\n }\n \n void LLVMGenerator::Visitor::Visit(const TrueDex& dex) {\n-  result_.reset(new LValue(generator_->types_->true_constant()));\n+  result_.reset(new LValue(generator_->types().true_constant()));\n }\n \n void LLVMGenerator::Visitor::Visit(const FalseDex& dex) {\n-  result_.reset(new LValue(generator_->types_->false_constant()));\n+  result_.reset(new LValue(generator_->types().false_constant()));\n }\n \n void LLVMGenerator::Visitor::Visit(const LiteralDex& dex) {\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n   llvm::Value* value = nullptr;\n   llvm::Value* len = nullptr;\n \n   switch (dex.type()->id()) {\n     case arrow::Type::BOOL:\n-      value = types->i1_constant(boost::get<bool>(dex.holder()));\n+      value = types.i1_constant(boost::get<bool>(dex.holder()));\n       break;\n \n     case arrow::Type::UINT8:\n-      value = types->i8_constant(boost::get<uint8_t>(dex.holder()));\n+      value = types.i8_constant(boost::get<uint8_t>(dex.holder()));\n       break;\n \n     case arrow::Type::UINT16:\n-      value = types->i16_constant(boost::get<uint16_t>(dex.holder()));\n+      value = types.i16_constant(boost::get<uint16_t>(dex.holder()));\n       break;\n \n     case arrow::Type::UINT32:\n-      value = types->i32_constant(boost::get<uint32_t>(dex.holder()));\n+      value = types.i32_constant(boost::get<uint32_t>(dex.holder()));\n       break;\n \n     case arrow::Type::UINT64:\n-      value = types->i64_constant(boost::get<uint64_t>(dex.holder()));\n+      value = types.i64_constant(boost::get<uint64_t>(dex.holder()));\n       break;\n \n     case arrow::Type::INT8:\n-      value = types->i8_constant(boost::get<int8_t>(dex.holder()));\n+      value = types.i8_constant(boost::get<int8_t>(dex.holder()));\n       break;\n \n     case arrow::Type::INT16:\n-      value = types->i16_constant(boost::get<int16_t>(dex.holder()));\n+      value = types.i16_constant(boost::get<int16_t>(dex.holder()));\n       break;\n \n     case arrow::Type::INT32:\n-      value = types->i32_constant(boost::get<int32_t>(dex.holder()));\n+      value = types.i32_constant(boost::get<int32_t>(dex.holder()));\n       break;\n \n     case arrow::Type::INT64:\n-      value = types->i64_constant(boost::get<int64_t>(dex.holder()));\n+      value = types.i64_constant(boost::get<int64_t>(dex.holder()));\n       break;\n \n     case arrow::Type::FLOAT:\n-      value = types->float_constant(boost::get<float>(dex.holder()));\n+      value = types.float_constant(boost::get<float>(dex.holder()));\n       break;\n \n     case arrow::Type::DOUBLE:\n-      value = types->double_constant(boost::get<double>(dex.holder()));\n+      value = types.double_constant(boost::get<double>(dex.holder()));\n       break;\n \n     case arrow::Type::STRING:\n     case arrow::Type::BINARY: {\n       const std::string& str = boost::get<std::string>(dex.holder());\n \n-      llvm::Constant* str_int_cast = types->i64_constant((int64_t)str.c_str());\n-      value = llvm::ConstantExpr::getIntToPtr(str_int_cast, types->i8_ptr_type());\n-      len = types->i32_constant(static_cast<int32_t>(str.length()));\n+      llvm::Constant* str_int_cast = types.i64_constant((int64_t)str.c_str());\n+      value = llvm::ConstantExpr::getIntToPtr(str_int_cast, types.i8_ptr_type());\n+      len = types.i32_constant(static_cast<int32_t>(str.length()));\n       break;\n     }\n \n     case arrow::Type::DATE64:\n-      value = types->i64_constant(boost::get<int64_t>(dex.holder()));\n+      value = types.i64_constant(boost::get<int64_t>(dex.holder()));\n       break;\n \n     case arrow::Type::TIME32:\n-      value = types->i32_constant(boost::get<int32_t>(dex.holder()));\n+      value = types.i32_constant(boost::get<int32_t>(dex.holder()));\n       break;\n \n     case arrow::Type::TIME64:\n-      value = types->i64_constant(boost::get<int64_t>(dex.holder()));\n+      value = types.i64_constant(boost::get<int64_t>(dex.holder()));\n       break;\n \n     case arrow::Type::TIMESTAMP:\n-      value = types->i64_constant(boost::get<int64_t>(dex.holder()));\n+      value = types.i64_constant(boost::get<int64_t>(dex.holder()));\n       break;\n \n     default:\n@@ -588,7 +561,7 @@ void LLVMGenerator::Visitor::Visit(const LiteralDex& dex) {\n void LLVMGenerator::Visitor::Visit(const NonNullableFuncDex& dex) {\n   ADD_VISITOR_TRACE(\"visit NonNullableFunc base function \" +\n                     dex.func_descriptor()->name());\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n \n   const NativeFunction* native_function = dex.native_function();\n \n@@ -596,7 +569,7 @@ void LLVMGenerator::Visitor::Visit(const NonNullableFuncDex& dex) {\n   auto params = BuildParams(dex.function_holder().get(), dex.args(), false,\n                             native_function->needs_context());\n \n-  llvm::Type* ret_type = types->IRType(native_function->signature().ret_type()->id());\n+  llvm::Type* ret_type = types.IRType(native_function->signature().ret_type()->id());\n \n   llvm::Value* value =\n       generator_->AddFunctionCall(native_function->pc_name(), ret_type, params);\n@@ -605,7 +578,7 @@ void LLVMGenerator::Visitor::Visit(const NonNullableFuncDex& dex) {\n \n void LLVMGenerator::Visitor::Visit(const NullableNeverFuncDex& dex) {\n   ADD_VISITOR_TRACE(\"visit NullableNever base function \" + dex.func_descriptor()->name());\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n \n   const NativeFunction* native_function = dex.native_function();\n \n@@ -613,7 +586,7 @@ void LLVMGenerator::Visitor::Visit(const NullableNeverFuncDex& dex) {\n   auto params = BuildParams(dex.function_holder().get(), dex.args(), true,\n                             native_function->needs_context());\n \n-  llvm::Type* ret_type = types->IRType(native_function->signature().ret_type()->id());\n+  llvm::Type* ret_type = types.IRType(native_function->signature().ret_type()->id());\n   llvm::Value* value =\n       generator_->AddFunctionCall(native_function->pc_name(), ret_type, params);\n   result_.reset(new LValue(value));\n@@ -623,7 +596,7 @@ void LLVMGenerator::Visitor::Visit(const NullableInternalFuncDex& dex) {\n   ADD_VISITOR_TRACE(\"visit NullableInternal base function \" +\n                     dex.func_descriptor()->name());\n   llvm::IRBuilder<>& builder = ir_builder();\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n \n   const NativeFunction* native_function = dex.native_function();\n \n@@ -633,16 +606,16 @@ void LLVMGenerator::Visitor::Visit(const NullableInternalFuncDex& dex) {\n \n   // add an extra arg for validity (alloced on stack).\n   llvm::AllocaInst* result_valid_ptr =\n-      new llvm::AllocaInst(types->i8_type(), 0, \"result_valid\", entry_block_);\n+      new llvm::AllocaInst(types.i8_type(), 0, \"result_valid\", entry_block_);\n   params.push_back(result_valid_ptr);\n \n-  llvm::Type* ret_type = types->IRType(native_function->signature().ret_type()->id());\n+  llvm::Type* ret_type = types.IRType(native_function->signature().ret_type()->id());\n   llvm::Value* value =\n       generator_->AddFunctionCall(native_function->pc_name(), ret_type, params);\n \n   // load the result validity and truncate to i1.\n   llvm::Value* result_valid_i8 = builder.CreateLoad(result_valid_ptr);\n-  llvm::Value* result_valid = builder.CreateTrunc(result_valid_i8, types->i1_type());\n+  llvm::Value* result_valid = builder.CreateTrunc(result_valid_i8, types.i1_type());\n \n   // set validity bit in the local bitmap.\n   ClearLocalBitMapIfNotValid(dex.local_bitmap_idx(), result_valid);\n@@ -653,7 +626,7 @@ void LLVMGenerator::Visitor::Visit(const NullableInternalFuncDex& dex) {\n void LLVMGenerator::Visitor::Visit(const IfDex& dex) {\n   ADD_VISITOR_TRACE(\"visit IfExpression\");\n   llvm::IRBuilder<>& builder = ir_builder();\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n \n   // Evaluate condition.\n   LValuePtr if_condition = BuildValueAndValidity(dex.condition_vv());\n@@ -708,14 +681,14 @@ void LLVMGenerator::Visitor::Visit(const IfDex& dex) {\n \n   // Emit the merge block.\n   builder.SetInsertPoint(merge_bb);\n-  llvm::Type* result_llvm_type = types->DataVecType(dex.result_type());\n+  llvm::Type* result_llvm_type = types.DataVecType(dex.result_type());\n   llvm::PHINode* result_value = builder.CreatePHI(result_llvm_type, 2, \"res_value\");\n   result_value->addIncoming(then_lvalue->data(), then_bb);\n   result_value->addIncoming(else_lvalue->data(), else_bb);\n \n   llvm::PHINode* result_length = nullptr;\n   if (then_lvalue->length() != nullptr) {\n-    result_length = builder.CreatePHI(types->i32_type(), 2, \"res_length\");\n+    result_length = builder.CreatePHI(types.i32_type(), 2, \"res_length\");\n     result_length->addIncoming(then_lvalue->length(), then_bb);\n     result_length->addIncoming(else_lvalue->length(), else_bb);\n \n@@ -737,7 +710,7 @@ void LLVMGenerator::Visitor::Visit(const IfDex& dex) {\n void LLVMGenerator::Visitor::Visit(const BooleanAndDex& dex) {\n   ADD_VISITOR_TRACE(\"visit BooleanAndExpression\");\n   llvm::IRBuilder<>& builder = ir_builder();\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n   llvm::LLVMContext& context = generator_->context();\n \n   // Create blocks for short-circuit.\n@@ -747,7 +720,7 @@ void LLVMGenerator::Visitor::Visit(const BooleanAndDex& dex) {\n       llvm::BasicBlock::Create(context, \"non_short_circuit\", function_);\n   llvm::BasicBlock* merge_bb = llvm::BasicBlock::Create(context, \"merge\", function_);\n \n-  llvm::Value* all_exprs_valid = types->true_constant();\n+  llvm::Value* all_exprs_valid = types.true_constant();\n   for (auto& pair : dex.args()) {\n     LValuePtr current = BuildValueAndValidity(*pair);\n \n@@ -787,9 +760,9 @@ void LLVMGenerator::Visitor::Visit(const BooleanAndDex& dex) {\n   builder.CreateBr(merge_bb);\n \n   builder.SetInsertPoint(merge_bb);\n-  llvm::PHINode* result_value = builder.CreatePHI(types->i1_type(), 2, \"res_value\");\n-  result_value->addIncoming(types->false_constant(), short_circuit_bb);\n-  result_value->addIncoming(types->true_constant(), non_short_circuit_bb);\n+  llvm::PHINode* result_value = builder.CreatePHI(types.i1_type(), 2, \"res_value\");\n+  result_value->addIncoming(types.false_constant(), short_circuit_bb);\n+  result_value->addIncoming(types.true_constant(), non_short_circuit_bb);\n   result_.reset(new LValue(result_value));\n }\n \n@@ -804,7 +777,7 @@ void LLVMGenerator::Visitor::Visit(const BooleanAndDex& dex) {\n void LLVMGenerator::Visitor::Visit(const BooleanOrDex& dex) {\n   ADD_VISITOR_TRACE(\"visit BooleanOrExpression\");\n   llvm::IRBuilder<>& builder = ir_builder();\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n   llvm::LLVMContext& context = generator_->context();\n \n   // Create blocks for short-circuit.\n@@ -814,7 +787,7 @@ void LLVMGenerator::Visitor::Visit(const BooleanOrDex& dex) {\n       llvm::BasicBlock::Create(context, \"non_short_circuit\", function_);\n   llvm::BasicBlock* merge_bb = llvm::BasicBlock::Create(context, \"merge\", function_);\n \n-  llvm::Value* all_exprs_valid = types->true_constant();\n+  llvm::Value* all_exprs_valid = types.true_constant();\n   for (auto& pair : dex.args()) {\n     LValuePtr current = BuildValueAndValidity(*pair);\n \n@@ -853,9 +826,9 @@ void LLVMGenerator::Visitor::Visit(const BooleanOrDex& dex) {\n   builder.CreateBr(merge_bb);\n \n   builder.SetInsertPoint(merge_bb);\n-  llvm::PHINode* result_value = builder.CreatePHI(types->i1_type(), 2, \"res_value\");\n-  result_value->addIncoming(types->true_constant(), short_circuit_bb);\n-  result_value->addIncoming(types->false_constant(), non_short_circuit_bb);\n+  llvm::PHINode* result_value = builder.CreatePHI(types.i1_type(), 2, \"res_value\");\n+  result_value->addIncoming(types.true_constant(), short_circuit_bb);\n+  result_value->addIncoming(types.false_constant(), non_short_circuit_bb);\n   result_.reset(new LValue(result_value));\n }\n \n@@ -875,13 +848,12 @@ LValuePtr LLVMGenerator::Visitor::BuildValueAndValidity(const ValueValidityPair&\n std::vector<llvm::Value*> LLVMGenerator::Visitor::BuildParams(\n     FunctionHolder* holder, const ValueValidityPairVector& args, bool with_validity,\n     bool with_context) {\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n   std::vector<llvm::Value*> params;\n \n   // if the function has holder, add the holder pointer first.\n   if (holder != nullptr) {\n-    llvm::Constant* ptr_int_cast = types->i64_constant((int64_t)holder);\n-    auto ptr = llvm::ConstantExpr::getIntToPtr(ptr_int_cast, types->i8_ptr_type());\n+    auto ptr = types.i64_constant((int64_t)holder);\n     params.push_back(ptr);\n   }\n \n@@ -916,9 +888,9 @@ std::vector<llvm::Value*> LLVMGenerator::Visitor::BuildParams(\n // Bitwise-AND of a vector of bits to get the combined validity.\n llvm::Value* LLVMGenerator::Visitor::BuildCombinedValidity(const DexVector& validities) {\n   llvm::IRBuilder<>& builder = ir_builder();\n-  LLVMTypes* types = generator_->types_.get();\n+  LLVMTypes& types = generator_->types();\n \n-  llvm::Value* isValid = types->true_constant();\n+  llvm::Value* isValid = types.true_constant();\n   for (auto& dex : validities) {\n     dex->Accept(*this);\n     isValid = builder.CreateAnd(isValid, result()->data(), \"validityBitAnd\");\n@@ -1031,16 +1003,16 @@ void LLVMGenerator::AddTrace(const std::string& msg, llvm::Value* value) {\n \n   // cast this to an llvm pointer.\n   const char* str = trace_strings_.back().c_str();\n-  llvm::Constant* str_int_cast = types_->i64_constant((int64_t)str);\n+  llvm::Constant* str_int_cast = types().i64_constant((int64_t)str);\n   llvm::Constant* str_ptr_cast =\n-      llvm::ConstantExpr::getIntToPtr(str_int_cast, types_->i8_ptr_type());\n+      llvm::ConstantExpr::getIntToPtr(str_int_cast, types().i8_ptr_type());\n \n   std::vector<llvm::Value*> args;\n   args.push_back(str_ptr_cast);\n   if (value != nullptr) {\n     args.push_back(value);\n   }\n-  AddFunctionCall(print_fn_name, types_->i32_type(), args);\n+  AddFunctionCall(print_fn_name, types().i32_type(), args);\n }\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/llvm_generator.h b/cpp/src/gandiva/llvm_generator.h\nindex 547e0bea7e..8f323c893c 100644\n--- a/cpp/src/gandiva/llvm_generator.h\n+++ b/cpp/src/gandiva/llvm_generator.h\n@@ -58,7 +58,7 @@ class LLVMGenerator {\n   Status Execute(const arrow::RecordBatch& record_batch,\n                  const ArrayDataVector& output_vector);\n \n-  LLVMTypes& types() { return *types_; }\n+  LLVMTypes& types() { return engine_->types(); }\n   llvm::Module* module() { return engine_->module(); }\n \n  private:\n@@ -167,10 +167,6 @@ class LLVMGenerator {\n   void ClearPackedBitValueIfFalse(llvm::Value* bitmap, llvm::Value* position,\n                                   llvm::Value* value);\n \n-  /// For non-IR functions, add prototype to the module on first encounter.\n-  void CheckAndAddPrototype(const std::string& full_name, llvm::Type* ret_type,\n-                            const std::vector<llvm::Value*>& args);\n-\n   /// Generate code to make a function call (to a pre-compiled IR function) which takes\n   /// 'args' and has a return type 'ret_type'.\n   llvm::Value* AddFunctionCall(const std::string& full_name, llvm::Type* ret_type,\n@@ -194,7 +190,6 @@ class LLVMGenerator {\n \n   std::unique_ptr<Engine> engine_;\n   std::vector<std::unique_ptr<CompiledExpr>> compiled_exprs_;\n-  std::unique_ptr<LLVMTypes> types_;\n   FunctionRegistry function_registry_;\n   Annotator annotator_;\n \ndiff --git a/cpp/src/gandiva/llvm_generator_test.cc b/cpp/src/gandiva/llvm_generator_test.cc\nindex ae83b02f7a..798df2009a 100644\n--- a/cpp/src/gandiva/llvm_generator_test.cc\n+++ b/cpp/src/gandiva/llvm_generator_test.cc\n@@ -45,14 +45,8 @@ TEST_F(TestLLVMGenerator, VerifyPCFunctions) {\n \n   llvm::Module* module = generator->module();\n   for (auto& iter : registry_) {\n-    bool found = false;\n     llvm::Function* fn = module->getFunction(iter.pc_name());\n-    if (fn == nullptr) {\n-      found = generator->engine_->CheckFunctionFromLoadedLib(iter.pc_name());\n-    } else {\n-      found = true;\n-    }\n-    EXPECT_EQ(found, true) << \"function \" << iter.pc_name()\n+    EXPECT_NE(fn, nullptr) << \"function \" << iter.pc_name()\n                            << \" missing in precompiled module\\n\";\n   }\n }\ndiff --git a/cpp/src/gandiva/precompiled/CMakeLists.txt b/cpp/src/gandiva/precompiled/CMakeLists.txt\nindex aa93f5b61d..630d270362 100644\n--- a/cpp/src/gandiva/precompiled/CMakeLists.txt\n+++ b/cpp/src/gandiva/precompiled/CMakeLists.txt\n@@ -20,7 +20,6 @@ project(gandiva)\n set(PRECOMPILED_SRCS\n     arithmetic_ops.cc\n     bitmap.cc\n-    context_helper.cc\n     extended_math_ops.cc\n     hash.cc\n     print.cc\n@@ -37,7 +36,7 @@ foreach(SRC_FILE ${PRECOMPILED_SRCS})\n   add_custom_command(\n     OUTPUT ${BC_FILE}\n     COMMAND ${CLANG_EXECUTABLE}\n-            -D GDV_HELPERS -std=c++11 -emit-llvm -O2 -c ${ABSOLUTE_SRC} -o ${BC_FILE}\n+            -std=c++11 -emit-llvm -O2 -c ${ABSOLUTE_SRC} -o ${BC_FILE}\n             -I${CMAKE_SOURCE_DIR}/src\n     DEPENDS ${SRC_FILE})\n   list(APPEND BC_FILES ${BC_FILE})\n@@ -46,7 +45,7 @@ endforeach()\n # link all of the bitcode files into a single bitcode file.\n add_custom_command(\n   OUTPUT ${GANDIVA_BC_OUTPUT_PATH}\n-  COMMAND ${LINK_EXECUTABLE}\n+  COMMAND ${LLVM_LINK_EXECUTABLE}\n           -o ${GANDIVA_BC_OUTPUT_PATH}\n           ${BC_FILES}\n   DEPENDS ${BC_FILES})\n@@ -56,9 +55,9 @@ add_custom_target(precompiled ALL DEPENDS ${GANDIVA_BC_OUTPUT_PATH})\n # testing\n add_precompiled_unit_test(bitmap_test.cc bitmap.cc)\n add_precompiled_unit_test(epoch_time_point_test.cc)\n-add_precompiled_unit_test(time_test.cc time.cc timestamp_arithmetic.cc context_helper.cc ../execution_context.cc)\n+add_precompiled_unit_test(time_test.cc time.cc timestamp_arithmetic.cc ../context_helper.cc)\n add_precompiled_unit_test(hash_test.cc hash.cc)\n add_precompiled_unit_test(sample_test.cc sample.cc)\n-add_precompiled_unit_test(string_ops_test.cc string_ops.cc context_helper.cc ../execution_context.cc)\n-add_precompiled_unit_test(arithmetic_ops_test.cc arithmetic_ops.cc context_helper.cc ../execution_context.cc)\n-add_precompiled_unit_test(extended_math_ops_test.cc extended_math_ops.cc context_helper.cc ../execution_context.cc)\n+add_precompiled_unit_test(string_ops_test.cc string_ops.cc ../context_helper.cc)\n+add_precompiled_unit_test(arithmetic_ops_test.cc arithmetic_ops.cc ../context_helper.cc)\n+add_precompiled_unit_test(extended_math_ops_test.cc extended_math_ops.cc ../context_helper.cc)\ndiff --git a/cpp/src/gandiva/precompiled/arithmetic_ops.cc b/cpp/src/gandiva/precompiled/arithmetic_ops.cc\nindex 61a77b8554..758dc86bc7 100644\n--- a/cpp/src/gandiva/precompiled/arithmetic_ops.cc\n+++ b/cpp/src/gandiva/precompiled/arithmetic_ops.cc\n@@ -168,7 +168,7 @@ NUMERIC_BOOL_DATE_FUNCTION(IS_NOT_DISTINCT_FROM)\n     }                                                                                   \\\n     if (in2 == 0) {                                                                     \\\n       char const* err_msg = \"divide by zero error\";                                     \\\n-      context_set_error_msg(execution_context, err_msg);                                \\\n+      gdv_fn_context_set_error_msg(execution_context, err_msg);                         \\\n       return 0;                                                                         \\\n     }                                                                                   \\\n     *out_valid = true;                                                                  \\\ndiff --git a/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc b/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc\nindex 0a56d2ef9d..b9fa7ae2bd 100644\n--- a/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc\n+++ b/cpp/src/gandiva/precompiled/arithmetic_ops_test.cc\n@@ -37,7 +37,7 @@ TEST(TestArithmeticOps, TestMod) { EXPECT_EQ(mod_int64_int32(10, 0), 10); }\n \n TEST(TestArithmeticOps, TestDivide) {\n   boolean is_valid;\n-  gandiva::helpers::ExecutionContext error_holder;\n+  gandiva::ExecutionContext error_holder;\n   int64 out = divide_int64_int64(10, true, 0, true,\n                                  reinterpret_cast<int64>(&error_holder), &is_valid);\n   EXPECT_EQ(out, 0);\n@@ -45,7 +45,7 @@ TEST(TestArithmeticOps, TestDivide) {\n   EXPECT_EQ(error_holder.has_error(), true);\n   EXPECT_EQ(error_holder.get_error(), \"divide by zero error\");\n \n-  gandiva::helpers::ExecutionContext error_holder1;\n+  gandiva::ExecutionContext error_holder1;\n   out = divide_int64_int64(10, true, 2, true, reinterpret_cast<int64>(&error_holder),\n                            &is_valid);\n   EXPECT_EQ(out, 5);\ndiff --git a/cpp/src/gandiva/precompiled/extended_math_ops.cc b/cpp/src/gandiva/precompiled/extended_math_ops.cc\nindex 2872e93566..1021a294e5 100644\n--- a/cpp/src/gandiva/precompiled/extended_math_ops.cc\n+++ b/cpp/src/gandiva/precompiled/extended_math_ops.cc\n@@ -33,32 +33,38 @@ extern \"C\" {\n   INNER(float64, OUT_TYPE)\n \n // Cubic root\n-#define CBRT(IN_TYPE, OUT_TYPE)                                     \\\n-  FORCE_INLINE                                                      \\\n-  OUT_TYPE cbrt_##IN_TYPE(IN_TYPE in) {                             \\\n-    return static_cast<float64>((cbrtl(static_cast<float64>(in)))); \\\n+#define CBRT(IN_TYPE, OUT_TYPE)                                    \\\n+  FORCE_INLINE                                                     \\\n+  OUT_TYPE cbrt_##IN_TYPE(IN_TYPE in) {                            \\\n+    return static_cast<float64>((cbrt(static_cast<float64>(in)))); \\\n   }\n \n ENUMERIC_TYPES_UNARY(CBRT, float64)\n \n // Exponent\n-#define EXP(IN_TYPE, OUT_TYPE) \\\n-  FORCE_INLINE                 \\\n-  OUT_TYPE exp_##IN_TYPE(IN_TYPE in) { return static_cast<float64>(expl(in)); }\n+#define EXP(IN_TYPE, OUT_TYPE)                                  \\\n+  FORCE_INLINE                                                  \\\n+  OUT_TYPE exp_##IN_TYPE(IN_TYPE in) {                          \\\n+    return static_cast<float64>(exp(static_cast<float64>(in))); \\\n+  }\n \n ENUMERIC_TYPES_UNARY(EXP, float64)\n \n // log\n-#define LOG(IN_TYPE, OUT_TYPE) \\\n-  FORCE_INLINE                 \\\n-  OUT_TYPE log_##IN_TYPE(IN_TYPE in) { return static_cast<float64>(logl(in)); }\n+#define LOG(IN_TYPE, OUT_TYPE)                                  \\\n+  FORCE_INLINE                                                  \\\n+  OUT_TYPE log_##IN_TYPE(IN_TYPE in) {                          \\\n+    return static_cast<float64>(log(static_cast<float64>(in))); \\\n+  }\n \n ENUMERIC_TYPES_UNARY(LOG, float64)\n \n // log base 10\n-#define LOG10(IN_TYPE, OUT_TYPE) \\\n-  FORCE_INLINE                   \\\n-  OUT_TYPE log10_##IN_TYPE(IN_TYPE in) { return static_cast<float64>(log10l(in)); }\n+#define LOG10(IN_TYPE, OUT_TYPE)                                  \\\n+  FORCE_INLINE                                                    \\\n+  OUT_TYPE log10_##IN_TYPE(IN_TYPE in) {                          \\\n+    return static_cast<float64>(log10(static_cast<float64>(in))); \\\n+  }\n \n ENUMERIC_TYPES_UNARY(LOG10, float64)\n \n@@ -68,27 +74,28 @@ void set_error_for_logbase(int64_t execution_context, double base) {\n   int size = static_cast<int>(strlen(prefix)) + 64;\n   char* error = reinterpret_cast<char*>(malloc(size));\n   snprintf(error, size, \"%s %f\", prefix, base);\n-  context_set_error_msg(execution_context, error);\n+  gdv_fn_context_set_error_msg(execution_context, error);\n   free(static_cast<char*>(error));\n }\n \n // log with base\n-#define LOG_WITH_BASE(IN_TYPE1, IN_TYPE2, OUT_TYPE)                            \\\n-  FORCE_INLINE                                                                 \\\n-  OUT_TYPE log_##IN_TYPE1##_##IN_TYPE2(IN_TYPE1 base, boolean is_base_valid,   \\\n-                                       IN_TYPE2 value, boolean is_value_valid, \\\n-                                       int64 context, boolean* out_valid) {    \\\n-    *out_valid = false;                                                        \\\n-    if (!is_base_valid || !is_value_valid) {                                   \\\n-      return 0;                                                                \\\n-    }                                                                          \\\n-    OUT_TYPE log_of_base = static_cast<float64>(logl(base));                   \\\n-    if (log_of_base == 0) {                                                    \\\n-      set_error_for_logbase(context, static_cast<double>(base));               \\\n-      return 0;                                                                \\\n-    }                                                                          \\\n-    *out_valid = true;                                                         \\\n-    return static_cast<float64>(logl(value) / logl(base));                     \\\n+#define LOG_WITH_BASE(IN_TYPE1, IN_TYPE2, OUT_TYPE)                               \\\n+  FORCE_INLINE                                                                    \\\n+  OUT_TYPE log_##IN_TYPE1##_##IN_TYPE2(IN_TYPE1 base, boolean is_base_valid,      \\\n+                                       IN_TYPE2 value, boolean is_value_valid,    \\\n+                                       int64 context, boolean* out_valid) {       \\\n+    *out_valid = false;                                                           \\\n+    if (!is_base_valid || !is_value_valid) {                                      \\\n+      return 0;                                                                   \\\n+    }                                                                             \\\n+    OUT_TYPE log_of_base = static_cast<float64>(log(static_cast<float64>(base))); \\\n+    if (log_of_base == 0) {                                                       \\\n+      set_error_for_logbase(context, static_cast<float64>(base));                 \\\n+      return 0;                                                                   \\\n+    }                                                                             \\\n+    *out_valid = true;                                                            \\\n+    return static_cast<float64>(log(static_cast<float64>(value)) /                \\\n+                                log(static_cast<float64>(base)));                 \\\n   }\n \n LOG_WITH_BASE(int32, int32, float64)\n@@ -102,7 +109,8 @@ LOG_WITH_BASE(float64, float64, float64)\n #define POWER(IN_TYPE1, IN_TYPE2, OUT_TYPE)                            \\\n   FORCE_INLINE                                                         \\\n   OUT_TYPE power_##IN_TYPE1##_##IN_TYPE2(IN_TYPE1 in1, IN_TYPE2 in2) { \\\n-    return static_cast<float64>(powl(in1, in2));                       \\\n+    return static_cast<float64>(                                       \\\n+        pow(static_cast<float64>(in1), static_cast<float64>(in2)));    \\\n   }\n \n POWER(float64, float64, float64)\ndiff --git a/cpp/src/gandiva/precompiled/extended_math_ops_test.cc b/cpp/src/gandiva/precompiled/extended_math_ops_test.cc\nindex cb8e8ab94a..ddc45e0f16 100644\n--- a/cpp/src/gandiva/precompiled/extended_math_ops_test.cc\n+++ b/cpp/src/gandiva/precompiled/extended_math_ops_test.cc\n@@ -66,7 +66,7 @@ TEST(TestExtendedMathOps, TestPower) {\n \n TEST(TestArithmeticOps, TestLogWithBase) {\n   boolean is_valid;\n-  gandiva::helpers::ExecutionContext error_holder;\n+  gandiva::ExecutionContext error_holder;\n   float64 out = log_int32_int32(1, true, 10, true, reinterpret_cast<int64>(&error_holder),\n                                 &is_valid);\n   EXPECT_EQ(out, 0);\n@@ -75,7 +75,7 @@ TEST(TestArithmeticOps, TestLogWithBase) {\n   EXPECT_TRUE(error_holder.get_error().find(\"divide by zero error\") != std::string::npos)\n       << error_holder.get_error();\n \n-  gandiva::helpers::ExecutionContext error_holder1;\n+  gandiva::ExecutionContext error_holder1;\n   out = log_int32_int32(2, true, 64, true, reinterpret_cast<int64>(&error_holder),\n                         &is_valid);\n   EXPECT_EQ(out, 6);\ndiff --git a/cpp/src/gandiva/precompiled/string_ops.cc b/cpp/src/gandiva/precompiled/string_ops.cc\nindex 29e10ba2db..7f3747cc33 100644\n--- a/cpp/src/gandiva/precompiled/string_ops.cc\n+++ b/cpp/src/gandiva/precompiled/string_ops.cc\n@@ -110,7 +110,7 @@ void set_error_for_invalid_utf(int64_t execution_context, char val) {\n   int size = static_cast<int>(strlen(fmt)) + 64;\n   char* error = reinterpret_cast<char*>(malloc(size));\n   snprintf(error, size, fmt, (unsigned char)val);\n-  context_set_error_msg(execution_context, error);\n+  gdv_fn_context_set_error_msg(execution_context, error);\n   free(error);\n }\n \ndiff --git a/cpp/src/gandiva/precompiled/string_ops_test.cc b/cpp/src/gandiva/precompiled/string_ops_test.cc\nindex e69ebb671b..91f40606b5 100644\n--- a/cpp/src/gandiva/precompiled/string_ops_test.cc\n+++ b/cpp/src/gandiva/precompiled/string_ops_test.cc\n@@ -70,7 +70,7 @@ TEST(TestStringOps, TestCharLength) {\n   EXPECT_TRUE(valid);\n \n   // invalid utf8\n-  gandiva::helpers::ExecutionContext ctx;\n+  gandiva::ExecutionContext ctx;\n   std::string c(\"\\xf8\\x28\");\n   EXPECT_EQ(utf8_length(c.data(), static_cast<int>(c.length()), true,\n                         reinterpret_cast<int64>(&ctx), &valid),\ndiff --git a/cpp/src/gandiva/precompiled/time.cc b/cpp/src/gandiva/precompiled/time.cc\nindex c87a8f263b..836eb5cda7 100644\n--- a/cpp/src/gandiva/precompiled/time.cc\n+++ b/cpp/src/gandiva/precompiled/time.cc\n@@ -513,7 +513,7 @@ void set_error_for_date(int32 length, const char* input, const char* msg,\n   int size = length + static_cast<int>(strlen(msg)) + 1;\n   char* error = reinterpret_cast<char*>(malloc(size));\n   snprintf(error, size, \"%s%s\", msg, input);\n-  context_set_error_msg(execution_context, error);\n+  gdv_fn_context_set_error_msg(execution_context, error);\n   free(error);\n }\n \ndiff --git a/cpp/src/gandiva/precompiled/time_test.cc b/cpp/src/gandiva/precompiled/time_test.cc\nindex 56a66de045..72b9577f46 100644\n--- a/cpp/src/gandiva/precompiled/time_test.cc\n+++ b/cpp/src/gandiva/precompiled/time_test.cc\n@@ -32,7 +32,7 @@ timestamp StringToTimestamp(const char* buf) {\n \n TEST(TestTime, TestCastDate) {\n   const char* date = \"1967-12-1\";\n-  helpers::ExecutionContext context;\n+  ExecutionContext context;\n   bool valid;\n   int64_t cast_to_date = castDATE_utf8(date, 9, true, (int64_t)&context, &valid);\n   EXPECT_EQ(cast_to_date, -65836800000);\ndiff --git a/cpp/src/gandiva/precompiled/types.h b/cpp/src/gandiva/precompiled/types.h\nindex da62cc0bf2..f6944abf23 100644\n--- a/cpp/src/gandiva/precompiled/types.h\n+++ b/cpp/src/gandiva/precompiled/types.h\n@@ -18,6 +18,7 @@\n #ifndef PRECOMPILED_TYPES_H\n #define PRECOMPILED_TYPES_H\n \n+#include <gandiva/gdv_function_stubs.h>\n #include <cstdint>\n \n // Use the same names as in arrow data types. Makes it easy to write pre-processor macros.\n@@ -50,7 +51,6 @@ extern \"C\" {\n bool bitMapGetBit(const unsigned char* bmap, int64_t position);\n void bitMapSetBit(unsigned char* bmap, int64_t position, bool value);\n void bitMapClearBitIfFalse(unsigned char* bmap, int64_t position, bool value);\n-void context_set_error_msg(int64_t context_ptr, const char* err_msg);\n \n int64 extractMillennium_timestamp(timestamp millis);\n int64 extractCentury_timestamp(timestamp millis);\ndiff --git a/cpp/src/gandiva/regex_util.cc b/cpp/src/gandiva/regex_util.cc\nindex ec388b44c6..893af095a3 100644\n--- a/cpp/src/gandiva/regex_util.cc\n+++ b/cpp/src/gandiva/regex_util.cc\n@@ -19,10 +19,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n const std::set<char> RegexUtil::pcre_regex_specials_ = {\n     '[', ']', '(', ')', '|', '^', '-', '+', '*', '?', '{', '}', '$', '\\\\'};\n \n@@ -68,8 +64,4 @@ Status RegexUtil::SqlLikePatternToPcre(const std::string& sql_pattern, char esca\n   return Status::OK();\n }\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n-\n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/regex_util.h b/cpp/src/gandiva/regex_util.h\nindex 34303a5a78..99bb40ae64 100644\n--- a/cpp/src/gandiva/regex_util.h\n+++ b/cpp/src/gandiva/regex_util.h\n@@ -25,10 +25,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n /// \\brief Utility class for converting sql patterns to pcre patterns.\n class RegexUtil {\n  public:\n@@ -45,10 +41,6 @@ class RegexUtil {\n   static const std::set<char> pcre_regex_specials_;\n };\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n-\n }  // namespace gandiva\n \n #endif  // GANDIVA_REGEX_UTIL_H\ndiff --git a/cpp/src/gandiva/tests/projector_test.cc b/cpp/src/gandiva/tests/projector_test.cc\nindex e97c3a461e..9888417652 100644\n--- a/cpp/src/gandiva/tests/projector_test.cc\n+++ b/cpp/src/gandiva/tests/projector_test.cc\n@@ -366,12 +366,12 @@ TEST_F(TestProjector, TestExtendedMath) {\n   std::vector<double> logb_vals;\n   std::vector<double> power_vals;\n   for (int i = 0; i < num_records; i++) {\n-    cbrt_vals.push_back(static_cast<double>(cbrtl(input0[i])));\n-    exp_vals.push_back(static_cast<double>(expl(input0[i])));\n-    log_vals.push_back(static_cast<double>(logl(input0[i])));\n-    log10_vals.push_back(static_cast<double>(log10l(input0[i])));\n-    logb_vals.push_back(static_cast<double>(logl(input1[i]) / logl(input0[i])));\n-    power_vals.push_back(static_cast<double>(powl(input0[i], input1[i])));\n+    cbrt_vals.push_back(cbrt(input0[i]));\n+    exp_vals.push_back(exp(input0[i]));\n+    log_vals.push_back(log(input0[i]));\n+    log10_vals.push_back(log10(input0[i]));\n+    logb_vals.push_back(log(input1[i]) / log(input0[i]));\n+    power_vals.push_back(pow(input0[i], input1[i]));\n   }\n   auto expected_cbrt = MakeArrowArray<arrow::DoubleType, double>(cbrt_vals, validity);\n   auto expected_exp = MakeArrowArray<arrow::DoubleType, double>(exp_vals, validity);\ndiff --git a/cpp/src/gandiva/to_date_holder.cc b/cpp/src/gandiva/to_date_holder.cc\nindex 71ba99607d..ceb7aada34 100644\n--- a/cpp/src/gandiva/to_date_holder.cc\n+++ b/cpp/src/gandiva/to_date_holder.cc\n@@ -26,10 +26,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n Status ToDateHolder::Make(const FunctionNode& node,\n                           std::shared_ptr<ToDateHolder>* holder) {\n   if (node.children().size() != 3) {\n@@ -111,8 +107,5 @@ void ToDateHolder::return_error(int64_t execution_context, const std::string& da\n   std::string err_msg = \"Error parsing value \" + data + \" for given format.\";\n   (execution_context_ptr)->set_error_msg(err_msg.c_str());\n }\n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n \n }  // namespace gandiva\ndiff --git a/cpp/src/gandiva/to_date_holder.h b/cpp/src/gandiva/to_date_holder.h\nindex d69fe120ad..d86f6780dc 100644\n--- a/cpp/src/gandiva/to_date_holder.h\n+++ b/cpp/src/gandiva/to_date_holder.h\n@@ -28,10 +28,6 @@\n \n namespace gandiva {\n \n-#ifdef GDV_HELPERS\n-namespace helpers {\n-#endif\n-\n /// Function Holder for SQL 'to_date'\n class ToDateHolder : public FunctionHolder {\n  public:\n@@ -57,8 +53,5 @@ class ToDateHolder : public FunctionHolder {\n   int32_t suppress_errors_;  // should throw exception on runtime errors\n };\n \n-#ifdef GDV_HELPERS\n-}  // namespace helpers\n-#endif\n }  // namespace gandiva\n #endif  // TO_DATE_HOLDER_H\ndiff --git a/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/ConfigurationBuilder.java b/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/ConfigurationBuilder.java\nindex b52bc89440..e1c6e6d381 100644\n--- a/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/ConfigurationBuilder.java\n+++ b/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/ConfigurationBuilder.java\n@@ -26,7 +26,6 @@\n public class ConfigurationBuilder {\n \n   private String byteCodeFilePath = \"\";\n-  private String helperLibraryFilePath = \"\";\n \n   private static volatile long defaultConfiguration = 0L;\n \n@@ -43,19 +42,10 @@ public ConfigurationBuilder withByteCodeFilePath(final String byteCodeFilePath)\n     return this;\n   }\n \n-  public ConfigurationBuilder withHelperLibraryFilePath(final String helperLibraryFilePath) {\n-    this.helperLibraryFilePath = helperLibraryFilePath;\n-    return this;\n-  }\n-\n   public String getByteCodeFilePath() {\n     return byteCodeFilePath;\n   }\n \n-  public String getHelperLibraryFilePath() {\n-    return helperLibraryFilePath;\n-  }\n-\n   /**\n    * Get the default configuration to invoke gandiva.\n    * @return default configuration\n@@ -66,11 +56,9 @@ static long getDefaultConfiguration() throws GandivaException {\n       synchronized (ConfigurationBuilder.class) {\n         if (defaultConfiguration == 0L) {\n           String defaultByteCodeFilePath = JniWrapper.getInstance().getByteCodeFilePath();\n-          String defaultHelperLibraryFilePath = JniWrapper.getInstance().getHelperLibraryFilePath();\n \n           defaultConfiguration = new ConfigurationBuilder()\n             .withByteCodeFilePath(defaultByteCodeFilePath)\n-            .withHelperLibraryFilePath(defaultHelperLibraryFilePath)\n             .buildConfigInstance();\n         }\n       }\ndiff --git a/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/JniWrapper.java b/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/JniWrapper.java\nindex bc75d9e4f3..6f223816aa 100644\n--- a/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/JniWrapper.java\n+++ b/java/gandiva/src/main/java/org/apache/arrow/gandiva/evaluator/JniWrapper.java\n@@ -34,17 +34,14 @@\n  */\n class JniWrapper {\n   private static final String LIBRARY_NAME = \"gandiva_jni\";\n-  private static final String HELPER_LIBRARY_NAME = \"gandiva_helpers\";\n   private static final String IRHELPERS_BC = \"irhelpers.bc\";\n \n   private static volatile JniWrapper INSTANCE;\n \n   private final String byteCodeFilePath;\n-  private final String helperLibraryFilePath;\n \n-  private JniWrapper(String byteCodeFilePath, String helperLibraryFilePath) {\n+  private JniWrapper(String byteCodeFilePath) {\n     this.byteCodeFilePath = byteCodeFilePath;\n-    this.helperLibraryFilePath = helperLibraryFilePath;\n   }\n \n   static JniWrapper getInstance() throws GandivaException {\n@@ -63,10 +60,7 @@ private static JniWrapper setupInstance() throws GandivaException {\n       String tempDir = System.getProperty(\"java.io.tmpdir\");\n       loadGandivaLibraryFromJar(tempDir);\n       File byteCodeFile = moveFileFromJarToTemp(tempDir, IRHELPERS_BC);\n-\n-      final String libraryToLoad = System.mapLibraryName(HELPER_LIBRARY_NAME);\n-      final File helperLibraryFile = moveFileFromJarToTemp(tempDir, libraryToLoad);\n-      return new JniWrapper(byteCodeFile.getAbsolutePath(), helperLibraryFile.getAbsolutePath());\n+      return new JniWrapper(byteCodeFile.getAbsolutePath());\n     } catch (IOException ioException) {\n       throw new GandivaException(\"unable to create native instance\", ioException);\n     }\n@@ -119,13 +113,6 @@ public String getByteCodeFilePath() {\n     return byteCodeFilePath;\n   }\n \n-  /**\n-   * Returns the helper library file path extracted from jar.\n-   */\n-  public String getHelperLibraryFilePath() {\n-    return helperLibraryFilePath;\n-  }\n-\n   /**\n    * Generates the projector module to evaluate the expressions with\n    * custom configuration.\ndiff --git a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\nindex fffe8ccaa5..85503f138a 100644\n--- a/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\n+++ b/java/gandiva/src/test/java/org/apache/arrow/gandiva/evaluator/ProjectorTest.java\n@@ -516,7 +516,7 @@ public void testStringFields() throws GandivaException {\n   @Test\n   public void testRegex() throws GandivaException {\n     /*\n-     * like \"map%\"\n+     * like \"%map%\"\n      */\n \n     Field x = Field.nullable(\"x\", new ArrowType.Utf8());\n@@ -524,7 +524,7 @@ public void testRegex() throws GandivaException {\n     TreeNode cond =\n         TreeBuilder.makeFunction(\n             \"like\",\n-            Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeStringLiteral(\"map%\")),\n+            Lists.newArrayList(TreeBuilder.makeField(x), TreeBuilder.makeStringLiteral(\"%map%\")),\n             boolType);\n     ExpressionTree expr = TreeBuilder.makeExpression(cond, Field.nullable(\"res\", boolType));\n     Schema schema = new Schema(Lists.newArrayList(x));\n@@ -533,7 +533,7 @@ public void testRegex() throws GandivaException {\n     int numRows = 5;\n     byte[] validity = new byte[]{(byte) 255, 0};\n     String[] valuesX = new String[]{\"mapD\", \"maps\", \"google maps\", \"map\", \"MapR\"};\n-    boolean[] expected = new boolean[]{true, true, false, true, false};\n+    boolean[] expected = new boolean[]{true, true, true, true, false};\n \n     ArrowBuf validityX = buf(validity);\n     List<ArrowBuf> dataBufsX = stringBufs(valuesX);\ndiff --git a/java/pom.xml b/java/pom.xml\nindex f6847ae7ac..d8e1944bb2 100644\n--- a/java/pom.xml\n+++ b/java/pom.xml\n@@ -368,7 +368,7 @@\n         </plugin>\n         <plugin>\n           <artifactId>maven-surefire-plugin</artifactId>\n-          <version>2.20</version>\n+          <version>2.19</version>\n           <configuration>\n             <enableAssertions>true</enableAssertions>\n             <childDelegation>true</childDelegation>\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T18:25:55.020+0000",
                    "updated": "2018-10-22T18:25:55.020+0000",
                    "started": "2018-10-22T18:25:55.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156880",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/156887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2765: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2765#issuecomment-431808389\n \n \n   Closing this PR. will open a fresh one on top of the changes for ARROW-3472.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T18:28:04.675+0000",
                    "updated": "2018-10-22T18:28:04.675+0000",
                    "started": "2018-10-22T18:28:04.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156887",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/156896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra opened a new pull request #2813: [WIP] ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T18:33:44.968+0000",
                    "updated": "2018-10-22T18:33:44.968+0000",
                    "started": "2018-10-22T18:33:44.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "156896",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/157076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2813: [WIP] ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#discussion_r227038918\n \n \n\n ##########\n File path: ci/travis_install_toolchain.sh\n ##########\n @@ -41,5 +45,6 @@ if [ ! -e $CPP_TOOLCHAIN ]; then\n         zlib \\\n         glog \\\n         zstd \\\n+        ${CONDA_LLVM} \\\n \n Review comment:\n   Would be nice if people strived to keep this list alphabetically-ordered.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:31:55.045+0000",
                    "updated": "2018-10-22T19:31:55.045+0000",
                    "started": "2018-10-22T19:31:55.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157076",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/157077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2813: [WIP] ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#discussion_r227039866\n \n \n\n ##########\n File path: cpp/src/gandiva/engine.cc\n ##########\n @@ -218,6 +203,45 @@ void* Engine::CompiledFunction(llvm::Function* irFunction) {\n   return execution_engine_->getPointerToFunction(irFunction);\n }\n \n+void Engine::AddGlobalMappingForFunc(const std::string& name, llvm::Type* ret_type,\n+                                     const std::vector<llvm::Type*>& args,\n+                                     void* function_ptr) {\n+  auto prototype = llvm::FunctionType::get(ret_type, args, false /*isVarArg*/);\n+  auto fn = llvm::Function::Create(prototype, llvm::GlobalValue::ExternalLinkage, name,\n+                                   module());\n+  execution_engine_->addGlobalMapping(fn, function_ptr);\n+}\n+\n+void Engine::AddGlobalMappings() {\n+  std::vector<llvm::Type*> args;\n+\n+  // gdv_fn_like_utf8_utf8\n+  args = {types().i64_type(), types().i8_ptr_type(), types().i32_type(),\n \n Review comment:\n   I'm curious: is it possible to declare those signatures in the same file as the function they describe? It would probably makes things easier to follow and maintain.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:32:32.048+0000",
                    "updated": "2018-10-22T19:32:32.048+0000",
                    "started": "2018-10-22T19:32:32.047+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157077",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/157078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2813: [WIP] ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#discussion_r227040268\n \n \n\n ##########\n File path: cpp/src/gandiva/engine.cc\n ##########\n @@ -218,6 +203,45 @@ void* Engine::CompiledFunction(llvm::Function* irFunction) {\n   return execution_engine_->getPointerToFunction(irFunction);\n }\n \n+void Engine::AddGlobalMappingForFunc(const std::string& name, llvm::Type* ret_type,\n+                                     const std::vector<llvm::Type*>& args,\n+                                     void* function_ptr) {\n+  auto prototype = llvm::FunctionType::get(ret_type, args, false /*isVarArg*/);\n+  auto fn = llvm::Function::Create(prototype, llvm::GlobalValue::ExternalLinkage, name,\n+                                   module());\n+  execution_engine_->addGlobalMapping(fn, function_ptr);\n+}\n+\n+void Engine::AddGlobalMappings() {\n+  std::vector<llvm::Type*> args;\n+\n+  // gdv_fn_like_utf8_utf8\n+  args = {types().i64_type(), types().i8_ptr_type(), types().i32_type(),\n \n Review comment:\n   Also, perhaps some kind of registry mechanism would be more future-proof.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:32:51.069+0000",
                    "updated": "2018-10-22T19:32:51.069+0000",
                    "started": "2018-10-22T19:32:51.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157078",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/157096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2813: [WIP] ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#issuecomment-431890289\n \n \n   @pitrou - sorry, this PR is incomplete. I'm having trouble testing this with travis.\r\n   \r\n   Can you please review https://github.com/apache/arrow/pull/2747 instead ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-22T19:38:34.595+0000",
                    "updated": "2018-10-22T19:38:34.595+0000",
                    "started": "2018-10-22T19:38:34.594+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157096",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/157699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2813: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#issuecomment-432328122\n \n \n   @pitrou - I've addressed your review comments.\r\n   \r\n   @wesm @praveenbingo - can you please review ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-23T16:48:44.474+0000",
                    "updated": "2018-10-23T16:48:44.474+0000",
                    "started": "2018-10-23T16:48:44.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157699",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/157989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "praveenbingo commented on a change in pull request #2813: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#discussion_r227661971\n \n \n\n ##########\n File path: .travis.yml\n ##########\n @@ -139,6 +139,27 @@ matrix:\n     - if [ $ARROW_CI_CPP_AFFECTED == \"1\" ]; then $TRAVIS_BUILD_DIR/ci/travis_script_cpp.sh; fi\n     - $TRAVIS_BUILD_DIR/ci/travis_script_python.sh 2.7\n     - $TRAVIS_BUILD_DIR/ci/travis_script_python.sh 3.6\n+  # [OS X] Gandiva C++ w/ XCode 8.3 & Java\n+  - compiler: clang\n+    language: cpp\n+    # xcode 7.3 has a bug in strptime.\n+    osx_image: xcode8.3\n+    os: osx\n+    cache:\n+    addons:\n+    env:\n+    - ARROW_TRAVIS_GANDIVA=1\n+    - ARROW_TRAVIS_USE_TOOLCHAIN=1\n+    - ARROW_BUILD_WARNING_LEVEL=CHECKIN\n+    before_script:\n+    # Run if something changed in CPP or Java.\n+    - if [ $ARROW_CI_CPP_AFFECTED != \"1\" ] && [ $ARROW_CI_JAVA_AFFECTED != \"1\" ]; then exit; fi\n+    # If either C++ or Python changed, we must install the C++ libraries\n \n Review comment:\n   is this needed for us?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T07:02:58.950+0000",
                    "updated": "2018-10-24T07:02:58.950+0000",
                    "started": "2018-10-24T07:02:58.949+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "157989",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/158063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2813: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#issuecomment-432594064\n \n \n   Can you resolve conflict?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T09:59:42.335+0000",
                    "updated": "2018-10-24T09:59:42.335+0000",
                    "started": "2018-10-24T09:59:42.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158063",
                    "issueId": "13190282"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/worklog/158075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on issue #2813: ARROW-3469: [Gandiva] Add gandiva travis OSX entry\nURL: https://github.com/apache/arrow/pull/2813#issuecomment-432604649\n \n \n   > Can you resolve conflict?\r\n   \r\n   done. thank you.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-24T10:35:21.724+0000",
                    "updated": "2018-10-24T10:35:21.724+0000",
                    "started": "2018-10-24T10:35:21.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "158075",
                    "issueId": "13190282"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@65517d2f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@218232ea[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55680094[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@65cd6db1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@504f115e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1e6981fc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b905e05[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@53e1a23[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2dd33e3b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7f673c1c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@768e3583[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@394d673[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 24 12:05:39 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-24T12:05:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3469/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-10-09T05:28:43.000+0000",
        "updated": "2018-10-24T12:08:12.000+0000",
        "timeoriginalestimate": null,
        "description": "ARROW-3382 adds a travis job for gandiva on ubuntu. We need to do the same for OSX.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva] add travis entry for gandiva on OSX",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/comment/16650623",
                    "id": "16650623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~pravindra] I've been adding {{[Gandiva]}} to a lot of Gandiva JIRA titles. If you could do this when creating them it would be a help. The JIRA titles are what show up in the changelog (https://github.com/apache/arrow/blob/master/CHANGELOG.md) so this helps us keep an clean and readable changelog",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-15T18:55:31.172+0000",
                    "updated": "2018-10-15T18:55:31.172+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/comment/16651266",
                    "id": "16651266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "body": "sure @wesm, will do.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pravindra",
                        "name": "pravindra",
                        "key": "pravindra",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34055",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34055",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34055",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34055"
                        },
                        "displayName": "Pindikura Ravindra",
                        "active": true,
                        "timeZone": "Asia/Kolkata"
                    },
                    "created": "2018-10-16T07:41:21.439+0000",
                    "updated": "2018-10-16T07:41:21.439+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13190282/comment/16662191",
                    "id": "16662191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 2813\n[https://github.com/apache/arrow/pull/2813]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-24T12:05:39.570+0000",
                    "updated": "2018-10-24T12:05:39.570+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yz4n:",
        "customfield_12314139": null
    }
}