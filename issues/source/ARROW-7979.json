{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13288615",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615",
    "key": "ARROW-7979",
    "fields": {
        "parent": {
            "id": "13006642",
            "key": "ARROW-300",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13006642",
            "fields": {
                "summary": "[Format] Add body buffer compression option to IPC message protocol using LZ4 or ZSTD",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12583940",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12583940",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13293886",
                    "key": "ARROW-8217",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13293886",
                    "fields": {
                        "summary": "[R][C++] Fix crashing test in test-dataset.R on 32-bit Windows from ARROW-7979",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12583738",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12583738",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13263300",
                    "key": "ARROW-6940",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13263300",
                    "fields": {
                        "summary": "[C++] Expose Message-level IPC metadata in both read and write interfaces",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12584963",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12584963",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13270022",
                    "key": "ARROW-7233",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13270022",
                    "fields": {
                        "summary": "[C++] Add Result<T> APIs to IPC module",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 47400,
            "total": 47400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 47400,
            "total": 47400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7979/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 95,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/404384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638\n \n \n   I apologize for the complexity of this patch, there was some necessary refactoring and then as I needed to add a `IpcReadOptions` struct, it made sense to port some APIs from Status to Result. \r\n   \r\n   Summary of what's here\r\n   \r\n   * Add IpcReadOptions struct\r\n   * Serialize and write custom_metadata field in Message Flatbuffer struct\r\n   * Move `MemoryPool*` arguments in IPC functions to options structs\r\n   * Adds EXPERIMENTAL compression option to IpcOptions (which should be renamed IpcWriteOptions) which causes each buffer in a record batch body to be separately compressed with e.g. ZSTD. This is intended to be used internally in Feather V2 and not exported for general use. Based on the mailing list discussion, if we were to adopt this in the IPC protocol then this can be promoted to non-experimental\r\n   * Add \"included_fields\" option to select a subset of fields to load from a record batch when doing an IPC load. The motivation for this was to avoid unnecessary decompression when reading a subset of columns from an IPC stream\r\n   * Migrate most IPC read APIs to use Result, deprecate old methods\r\n   * Deprecate Status-returning IPC write method\r\n   \r\n   Some other small changes:\r\n   \r\n   * Add `check_metadata` option to `RecordBatch::Equals`\r\n   * Add `Codec::GetCompressionType` method for looking up `Compression::type` given a codec name\r\n   \r\n   I don't have size/perf benchmarks about how the compression helps with file sizes or read performance, so I'll do that next in the course of completing ARROW-5510 (\"Feather V2\" file format)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T01:16:07.352+0000",
                    "updated": "2020-03-17T01:16:07.352+0000",
                    "started": "2020-03-17T01:16:07.352+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404384",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/404385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#issuecomment-599828796\n \n \n   https://issues.apache.org/jira/browse/ARROW-7979\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T01:16:36.774+0000",
                    "updated": "2020-03-17T01:16:36.774+0000",
                    "started": "2020-03-17T01:16:36.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404385",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/404423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#issuecomment-599853952\n \n \n   I'll fix the glib issues and other things tomorrow\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-17T03:06:43.436+0000",
                    "updated": "2020-03-17T03:06:43.436+0000",
                    "started": "2020-03-17T03:06:43.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "404423",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394255307\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -18,17 +18,32 @@\n #pragma once\n \n #include <cstdint>\n+#include <memory>\n+#include <unordered_set>\n+#include <vector>\n \n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/compression.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+namespace util {\n+\n+class Codec;\n+\n+}  // namespace util\n+\n namespace ipc {\n \n // ARROW-109: We set this number arbitrarily to help catch user mistakes. For\n // deeply nested schemas, it is expected the user will indicate explicitly the\n // maximum allowed recursion depth\n constexpr int kMaxNestingDepth = 64;\n \n+// TODO: Should IpcOptions be renamed IpcWriteOptions?\n \n Review comment:\n   +1\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.134+0000",
                    "updated": "2020-03-18T11:03:50.134+0000",
                    "started": "2020-03-18T11:03:50.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405337",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394255204\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/metadata_internal.h\n ##########\n @@ -34,6 +34,7 @@\n #include \"arrow/sparse_tensor.h\"\n #include \"arrow/status.h\"\n #include \"arrow/type_fwd.h\"\n+#include \"arrow/util/key_value_metadata.h\"\n \n Review comment:\n   Isn't `KeyValueMetadata` in `type_fwd.h`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.137+0000",
                    "updated": "2020-03-18T11:03:50.137+0000",
                    "started": "2020-03-18T11:03:50.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405338",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394255516\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -44,8 +59,31 @@ struct ARROW_EXPORT IpcOptions {\n   /// consisting of a 4-byte prefix instead of 8 byte\n   bool write_legacy_ipc_format = false;\n \n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Codec to use for compressing and decompressing\n+  /// record batch body buffers. This is not part of the Arrow IPC protocol and\n+  /// only for internal use (e.g. Feather files)\n+  Compression::type compression = Compression::UNCOMPRESSED;\n+  int compression_level = Compression::kUseDefaultCompressionLevel;\n+\n   static IpcOptions Defaults();\n };\n \n+struct ARROW_EXPORT IpcReadOptions {\n+  // The maximum permitted schema nesting depth.\n+  int max_recursion_depth = kMaxNestingDepth;\n+\n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Top-level schema fields to include when\n+  /// deserializing RecordBatch. Null means to return all deserialized fields\n+  std::shared_ptr<std::unordered_set<int>> included_fields;\n \n Review comment:\n   Could be a `shared_ptr<vector>` to avoid pulling `unordered_set`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.263+0000",
                    "updated": "2020-03-18T11:03:50.263+0000",
                    "started": "2020-03-18T11:03:50.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405339",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394255989\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/reader.cc\n ##########\n @@ -59,8 +62,6 @@ namespace ipc {\n using internal::FileBlock;\n using internal::kArrowMagicBytes;\n \n-namespace {\n \n Review comment:\n   Is there a reason for this change?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.266+0000",
                    "updated": "2020-03-18T11:03:50.266+0000",
                    "started": "2020-03-18T11:03:50.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405341",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394261235\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/reader.cc\n ##########\n @@ -89,16 +90,96 @@ Status InvalidMessageType(Message::Type expected, Message::Type actual) {\n     }                                                                   \\\n   } while (0)\n \n-}  // namespace\n-\n // ----------------------------------------------------------------------\n // Record batch read path\n \n-/// Accessor class for flatbuffers metadata\n-class IpcComponentSource {\n+/// The field_index and buffer_index are incremented based on how much of the\n+/// batch is \"consumed\" (through nested data reconstruction, for example)\n+class ArrayLoader {\n  public:\n-  IpcComponentSource(const flatbuf::RecordBatch* metadata, io::RandomAccessFile* file)\n-      : metadata_(metadata), file_(file) {}\n+  explicit ArrayLoader(const flatbuf::RecordBatch* metadata, io::RandomAccessFile* file,\n+                       const DictionaryMemo* dictionary_memo,\n+                       const IpcReadOptions& options,\n+                       Compression::type compression = Compression::UNCOMPRESSED)\n+      : metadata_(metadata),\n+        file_(file),\n+        dictionary_memo_(dictionary_memo),\n+        options_(options),\n+        compression_(compression),\n+        max_recursion_depth_(options.max_recursion_depth),\n+        buffer_index_(0),\n+        field_index_(0),\n+        skip_io_(false) {}\n+\n+  Status ReadBuffer(int64_t offset, int64_t length, std::shared_ptr<Buffer>* out) {\n+    if (skip_io_) {\n+      return Status::OK();\n+    }\n+\n+    // This construct permits overriding GetBuffer at compile time\n+    if (!BitUtil::IsMultipleOf8(offset)) {\n+      return Status::Invalid(\"Buffer \", buffer_index_,\n+                             \" did not start on 8-byte aligned offset: \", offset);\n+    }\n+    return file_->ReadAt(offset, length).Value(out);\n+  }\n+\n+  // Use this to disable calls to RandomAccessFile::ReadAt, for field skipping\n+  void SkipIO(bool skip_io = true) { skip_io_ = skip_io; }\n+\n+  Status LoadType(const DataType& type) { return VisitTypeInline(type, this); }\n+\n+  Status DecompressBuffers() {\n+    // If the buffers are indicated to be compressed, instantiate the codec and\n+    // decompress them\n+    std::unique_ptr<util::Codec> codec;\n+    ARROW_ASSIGN_OR_RAISE(codec, util::Codec::Create(compression_));\n+\n+    // TODO: Parallelize decompression\n \n Review comment:\n   There are at most 3 or 4 buffers in a Arrow array, and they have very different sizes. I don't think parallelizing at this level makes sense.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.266+0000",
                    "updated": "2020-03-18T11:03:50.266+0000",
                    "started": "2020-03-18T11:03:50.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405340",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394264336\n \n \n\n ##########\n File path: cpp/src/arrow/util/compression_test.cc\n ##########\n @@ -324,6 +324,22 @@ TEST(TestCodecMisc, GetCodecAsString) {\n   ASSERT_EQ(\"BROTLI\", Codec::GetCodecAsString(Compression::BROTLI));\n   ASSERT_EQ(\"LZ4\", Codec::GetCodecAsString(Compression::LZ4));\n   ASSERT_EQ(\"ZSTD\", Codec::GetCodecAsString(Compression::ZSTD));\n+  ASSERT_EQ(\"BZ2\", Codec::GetCodecAsString(Compression::BZ2));\n+}\n+\n+TEST(TestCodecMisc, GetCompressionType) {\n+  ASSERT_EQ(Compression::UNCOMPRESSED,\n \n Review comment:\n   Can use `ASSERT_OK_AND_EQ`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.282+0000",
                    "updated": "2020-03-18T11:03:50.282+0000",
                    "started": "2020-03-18T11:03:50.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405342",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394263834\n \n \n\n ##########\n File path: cpp/src/arrow/util/compression.cc\n ##########\n @@ -85,6 +85,29 @@ std::string Codec::GetCodecAsString(Compression::type t) {\n   }\n }\n \n+Result<Compression::type> Codec::GetCompressionType(const std::string& name) {\n+  // Could use an unordered_map, but probably not worth the trouble\n \n Review comment:\n   Agreed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T11:03:50.292+0000",
                    "updated": "2020-03-18T11:03:50.292+0000",
                    "started": "2020-03-18T11:03:50.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405343",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394536979\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -44,8 +59,31 @@ struct ARROW_EXPORT IpcOptions {\n   /// consisting of a 4-byte prefix instead of 8 byte\n   bool write_legacy_ipc_format = false;\n \n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Codec to use for compressing and decompressing\n+  /// record batch body buffers. This is not part of the Arrow IPC protocol and\n+  /// only for internal use (e.g. Feather files)\n+  Compression::type compression = Compression::UNCOMPRESSED;\n+  int compression_level = Compression::kUseDefaultCompressionLevel;\n+\n   static IpcOptions Defaults();\n };\n \n+struct ARROW_EXPORT IpcReadOptions {\n+  // The maximum permitted schema nesting depth.\n+  int max_recursion_depth = kMaxNestingDepth;\n+\n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Top-level schema fields to include when\n+  /// deserializing RecordBatch. Null means to return all deserialized fields\n+  std::shared_ptr<std::unordered_set<int>> included_fields;\n \n Review comment:\n   I wanted to amortize the creation of the set. \r\n   \r\n   For example, suppose you select 500 out of 1000 fields during deserialization and have 1000 batches. If you use `std::vector` then either you create the set 1000 times or you use `std::find` with `std::vector` and live with linear time lookups. Neither is a very good option.\r\n   \r\n   Aside, I'm wondering if we should create a simple fixed-size-hash-set implementation that we can use in this project to avoid including `unordered_set`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T17:55:53.670+0000",
                    "updated": "2020-03-18T17:55:53.670+0000",
                    "started": "2020-03-18T17:55:53.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405633",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394543694\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -44,8 +59,31 @@ struct ARROW_EXPORT IpcOptions {\n   /// consisting of a 4-byte prefix instead of 8 byte\n   bool write_legacy_ipc_format = false;\n \n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Codec to use for compressing and decompressing\n+  /// record batch body buffers. This is not part of the Arrow IPC protocol and\n+  /// only for internal use (e.g. Feather files)\n+  Compression::type compression = Compression::UNCOMPRESSED;\n+  int compression_level = Compression::kUseDefaultCompressionLevel;\n+\n   static IpcOptions Defaults();\n };\n \n+struct ARROW_EXPORT IpcReadOptions {\n+  // The maximum permitted schema nesting depth.\n+  int max_recursion_depth = kMaxNestingDepth;\n+\n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Top-level schema fields to include when\n+  /// deserializing RecordBatch. Null means to return all deserialized fields\n+  std::shared_ptr<std::unordered_set<int>> included_fields;\n \n Review comment:\n   Well, if there was some kind of IPCReader that you could instantiate and that would keep the desired data structure under the hood, we wouldn't have this problem :-)\r\n   \r\n   In this case and if you want fast lookups, the best is probably a `std::vector<bool>`...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T18:07:06.663+0000",
                    "updated": "2020-03-18T18:07:06.663+0000",
                    "started": "2020-03-18T18:07:06.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405648",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394656157\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -44,8 +59,31 @@ struct ARROW_EXPORT IpcOptions {\n   /// consisting of a 4-byte prefix instead of 8 byte\n   bool write_legacy_ipc_format = false;\n \n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Codec to use for compressing and decompressing\n+  /// record batch body buffers. This is not part of the Arrow IPC protocol and\n+  /// only for internal use (e.g. Feather files)\n+  Compression::type compression = Compression::UNCOMPRESSED;\n+  int compression_level = Compression::kUseDefaultCompressionLevel;\n+\n   static IpcOptions Defaults();\n };\n \n+struct ARROW_EXPORT IpcReadOptions {\n+  // The maximum permitted schema nesting depth.\n+  int max_recursion_depth = kMaxNestingDepth;\n+\n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Top-level schema fields to include when\n+  /// deserializing RecordBatch. Null means to return all deserialized fields\n+  std::shared_ptr<std::unordered_set<int>> included_fields;\n \n Review comment:\n   Alright, I'll refactor to use `std::vector<bool>`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T21:42:14.181+0000",
                    "updated": "2020-03-18T21:42:14.181+0000",
                    "started": "2020-03-18T21:42:14.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405760",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394661958\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -44,8 +59,31 @@ struct ARROW_EXPORT IpcOptions {\n   /// consisting of a 4-byte prefix instead of 8 byte\n   bool write_legacy_ipc_format = false;\n \n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Codec to use for compressing and decompressing\n+  /// record batch body buffers. This is not part of the Arrow IPC protocol and\n+  /// only for internal use (e.g. Feather files)\n+  Compression::type compression = Compression::UNCOMPRESSED;\n+  int compression_level = Compression::kUseDefaultCompressionLevel;\n+\n   static IpcOptions Defaults();\n };\n \n+struct ARROW_EXPORT IpcReadOptions {\n+  // The maximum permitted schema nesting depth.\n+  int max_recursion_depth = kMaxNestingDepth;\n+\n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Top-level schema fields to include when\n+  /// deserializing RecordBatch. Null means to return all deserialized fields\n+  std::shared_ptr<std::unordered_set<int>> included_fields;\n \n Review comment:\n   I meant use `vector<bool>` internally if you want fast lookups. I think the user-exposed `IpcReadOptions` would be more ergonomic with a `vector<int>`.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T21:55:26.918+0000",
                    "updated": "2020-03-18T21:55:26.918+0000",
                    "started": "2020-03-18T21:55:26.918+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405767",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/405790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394676492\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -44,8 +59,31 @@ struct ARROW_EXPORT IpcOptions {\n   /// consisting of a 4-byte prefix instead of 8 byte\n   bool write_legacy_ipc_format = false;\n \n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Codec to use for compressing and decompressing\n+  /// record batch body buffers. This is not part of the Arrow IPC protocol and\n+  /// only for internal use (e.g. Feather files)\n+  Compression::type compression = Compression::UNCOMPRESSED;\n+  int compression_level = Compression::kUseDefaultCompressionLevel;\n+\n   static IpcOptions Defaults();\n };\n \n+struct ARROW_EXPORT IpcReadOptions {\n+  // The maximum permitted schema nesting depth.\n+  int max_recursion_depth = kMaxNestingDepth;\n+\n+  /// \\brief The memory pool to use for allocations made during IPC writing\n+  MemoryPool* memory_pool = default_memory_pool();\n+\n+  /// \\brief EXPERIMENTAL: Top-level schema fields to include when\n+  /// deserializing RecordBatch. Null means to return all deserialized fields\n+  std::shared_ptr<std::unordered_set<int>> included_fields;\n \n Review comment:\n   Hm, okay. This isn't that trivial to do because we have single-use `ReadRecordBatch` functions as well as the stream reader classes that read multiple record batches. I'll see what I can do\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-18T22:29:55.184+0000",
                    "updated": "2020-03-18T22:29:55.184+0000",
                    "started": "2020-03-18T22:29:55.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "405790",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/406192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394520297\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_ipc.cc\n ##########\n @@ -41,12 +41,11 @@ Result<std::shared_ptr<ipc::RecordBatchFileReader>> OpenReader(\n   }\n \n   std::shared_ptr<ipc::RecordBatchFileReader> reader;\n-  auto status = ipc::RecordBatchFileReader::Open(std::move(input), &reader);\n+  auto status = ipc::RecordBatchFileReader::Open(std::move(input)).Value(&reader);\n   if (!status.ok()) {\n     return status.WithMessage(\"Could not open IPC input source '\", source.path(),\n                               \"': \", status.message());\n   }\n \n Review comment:\n   nit: avoid using `Result::Value` unless wrapping a result returning API into a status returning API\r\n   ```suggestion\r\n     auto maybe_reader = ipc::RecordBatchFileReader::Open(std::move(input));\r\n     auto status = maybe_reader.status();\r\n     if (!status.ok()) {\r\n       return status.WithMessage(\"Could not open IPC input source '\", source.path(),\r\n                                 \"': \", status.message());\r\n     }\r\n     return std::move(maybe_reader).ValueOrDie();\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-19T14:05:32.530+0000",
                    "updated": "2020-03-19T14:05:32.530+0000",
                    "started": "2020-03-19T14:05:32.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "406192",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/406193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394542829\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/file_to_stream.cc\n ##########\n @@ -34,14 +34,14 @@ namespace ipc {\n \n // Reads a file on the file system and prints to stdout the stream version of it.\n Status ConvertToStream(const char* path) {\n-  std::shared_ptr<RecordBatchFileReader> reader;\n-\n   ARROW_ASSIGN_OR_RAISE(auto in_file, io::ReadableFile::Open(path));\n-  RETURN_NOT_OK(ipc::RecordBatchFileReader::Open(in_file.get(), &reader));\n+\n+  std::shared_ptr<RecordBatchFileReader> reader;\n+  ARROW_ASSIGN_OR_RAISE(reader, ipc::RecordBatchFileReader::Open(in_file.get()));\n \n   io::StdoutStream sink;\n   std::shared_ptr<RecordBatchWriter> writer;\n-  RETURN_NOT_OK(RecordBatchStreamWriter::Open(&sink, reader->schema(), &writer));\n+  ARROW_ASSIGN_OR_RAISE(writer, RecordBatchStreamWriter::Open(&sink, reader->schema()));\n \n Review comment:\n   ```suggestion\r\n     ARROW_ASSIGN_OR_RAISE(auto writer, RecordBatchStreamWriter::Open(&sink, reader->schema()));\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-19T14:05:32.831+0000",
                    "updated": "2020-03-19T14:05:32.831+0000",
                    "started": "2020-03-19T14:05:32.831+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "406193",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/406194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394543517\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/message.cc\n ##########\n @@ -86,11 +92,18 @@ class Message::MessageImpl {\n \n   std::shared_ptr<Buffer> metadata() const { return metadata_; }\n \n+  std::shared_ptr<const KeyValueMetadata> custom_metadata() const {\n \n Review comment:\n   ```suggestion\r\n     const std::shared_ptr<const KeyValueMetadata>& custom_metadata() const {\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-19T14:05:32.851+0000",
                    "updated": "2020-03-19T14:05:32.851+0000",
                    "started": "2020-03-19T14:05:32.850+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "406194",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/406195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394547222\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/options.h\n ##########\n @@ -18,17 +18,32 @@\n #pragma once\n \n #include <cstdint>\n+#include <memory>\n+#include <unordered_set>\n+#include <vector>\n \n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/util/compression.h\"\n #include \"arrow/util/visibility.h\"\n \n namespace arrow {\n+\n+namespace util {\n+\n+class Codec;\n+\n+}  // namespace util\n+\n namespace ipc {\n \n // ARROW-109: We set this number arbitrarily to help catch user mistakes. For\n // deeply nested schemas, it is expected the user will indicate explicitly the\n // maximum allowed recursion depth\n constexpr int kMaxNestingDepth = 64;\n \n+// TODO: Should IpcOptions be renamed IpcWriteOptions?\n \n Review comment:\n   +1\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-19T14:05:32.997+0000",
                    "updated": "2020-03-19T14:05:32.997+0000",
                    "started": "2020-03-19T14:05:32.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "406195",
                    "issueId": "13288615"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/worklog/406196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6638: ARROW-7979: [C++] Add experimental buffer compression to IPC write path. Add \"field\" selection to read path. Migrate some APIs to Result<T>. Read/write Message metadata\nURL: https://github.com/apache/arrow/pull/6638#discussion_r394546177\n \n \n\n ##########\n File path: cpp/src/arrow/ipc/metadata_internal.cc\n ##########\n @@ -1031,24 +1008,47 @@ Status MakeSparseTensor(FBB& fbb, const SparseTensor& sparse_tensor, int64_t bod\n \n }  // namespace\n \n+Status GetKeyValueMetadata(const KVVector* fb_metadata,\n+                           std::shared_ptr<const KeyValueMetadata>* out) {\n+  if (fb_metadata == nullptr) {\n+    *out = nullptr;\n+    return Status::OK();\n+  }\n+\n+  auto metadata = std::make_shared<KeyValueMetadata>();\n+\n+  metadata->reserve(fb_metadata->size());\n+  for (const auto& pair : *fb_metadata) {\n+    CHECK_FLATBUFFERS_NOT_NULL(pair->key(), \"custom_metadata.key\");\n+    CHECK_FLATBUFFERS_NOT_NULL(pair->value(), \"custom_metadata.value\");\n+    metadata->Append(pair->key()->str(), pair->value()->str());\n+  }\n+\n+  *out = metadata;\n \n Review comment:\n   ```suggestion\r\n     *out = std::move(metadata);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-19T14:05:33.016+0000",
                    "updated": "2020-03-19T14:05:33.016+0000",
                    "started": "2020-03-19T14:05:33.016+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "406196",
                    "issueId": "13288615"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 47400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@43662853[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3515a7ba[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d0bb284[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@15bbfce8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9edfdfa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1feaa492[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fa5ba79[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@53353d9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63576ca8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@29538a64[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b478b45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@54f5b46f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 47400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 25 17:35:55 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-25T17:35:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7979/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-03-02T06:02:04.000+0000",
        "updated": "2020-04-06T12:26:35.000+0000",
        "timeoriginalestimate": null,
        "description": "The idea is that this can be used for experiments and bespoke applications (e.g. in the context of ARROW-5510). If this is adopted formally into the IPC format then the experimental implementation can be altered to match the specification",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "13h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 47400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement experimental buffer compression in IPC messages",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13288615/comment/17066905",
                    "id": "17066905",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6638\n[https://github.com/apache/arrow/pull/6638]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-25T17:35:55.583+0000",
                    "updated": "2020-03-25T17:35:55.583+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0c21s:",
        "customfield_12314139": null
    }
}