{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13258371",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371",
    "key": "ARROW-6669",
    "fields": {
        "parent": {
            "id": "13230559",
            "key": "ARROW-5227",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13230559",
            "fields": {
                "summary": "[Rust] [DataFusion] Re-implement query execution with an extensible physical query plan",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                    "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                    "name": "Closed",
                    "id": "6",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6669/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371/worklog/316893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5478: ARROW-6669: [Rust] [DataFusion] Implement binary expression for physical plan\nURL: https://github.com/apache/arrow/pull/5478\n \n \n   This PR adds the binary expression to the new physical execution plan, with support for comparison operators (`<`, `<=`, `>`, `>=`, `==`, `!=`) and boolean operators `AND` and `OR`.\r\n   \r\n   Other binary expressions, such as math expressions will be added in a future PR.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-23T18:20:24.403+0000",
                    "updated": "2019-09-23T18:20:24.403+0000",
                    "started": "2019-09-23T18:20:24.402+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "316893",
                    "issueId": "13258371"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371/worklog/317141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5478: ARROW-6669: [Rust] [DataFusion] Implement binary expression for physical plan\nURL: https://github.com/apache/arrow/pull/5478#discussion_r327413378\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -196,6 +198,118 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// Invoke a compute kernel on a pair of arrays\n+macro_rules! compute_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        let rr = $RIGHT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        Ok(Arc::new($OP(&ll, &rr)?))\n+    }};\n+}\n+\n+/// Invoke a compute kernel on a pair of arrays\n+macro_rules! comparison_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident) => {{\n+        match $LEFT.data_type() {\n+            DataType::Int8 => compute_op!($LEFT, $RIGHT, $OP, Int8Array),\n+            DataType::Int16 => compute_op!($LEFT, $RIGHT, $OP, Int16Array),\n+            DataType::Int32 => compute_op!($LEFT, $RIGHT, $OP, Int32Array),\n+            DataType::Int64 => compute_op!($LEFT, $RIGHT, $OP, Int64Array),\n+            DataType::UInt8 => compute_op!($LEFT, $RIGHT, $OP, UInt8Array),\n+            DataType::UInt16 => compute_op!($LEFT, $RIGHT, $OP, UInt16Array),\n+            DataType::UInt32 => compute_op!($LEFT, $RIGHT, $OP, UInt32Array),\n+            DataType::UInt64 => compute_op!($LEFT, $RIGHT, $OP, UInt64Array),\n+            DataType::Float32 => compute_op!($LEFT, $RIGHT, $OP, Float32Array),\n+            DataType::Float64 => compute_op!($LEFT, $RIGHT, $OP, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"Unsupported data type {:?}\",\n+                other\n+            ))),\n+        }\n+    }};\n+}\n+\n+/// Invoke a boolean kernel on a pair of arrays\n+macro_rules! boolean_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"boolean_op failed to downcast array\");\n+        let rr = $RIGHT\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"boolean_op failed to downcast array\");\n+        Ok(Arc::new($OP(&ll, &rr)?))\n+    }};\n+}\n+/// Binary expression\n+pub struct BinaryExpr {\n+    left: Arc<dyn PhysicalExpr>,\n+    op: Operator,\n+    right: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl BinaryExpr {\n+    /// Create new binary expression\n+    pub fn new(\n+        left: Arc<dyn PhysicalExpr>,\n+        op: Operator,\n+        right: Arc<dyn PhysicalExpr>,\n+    ) -> Self {\n+        Self { left, op, right }\n+    }\n+}\n+\n+impl PhysicalExpr for BinaryExpr {\n+    fn name(&self) -> String {\n+        format!(\"{:?}\", self.op)\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        self.left.data_type(input_schema)\n+    }\n+\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n+        let left = self.left.evaluate(batch)?;\n+        let right = self.right.evaluate(batch)?;\n+        if left.data_type() != right.data_type() {\n+            return Err(ExecutionError::General(format!(\n+                \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n+                self.op,\n+                left.data_type(),\n+                right.data_type()\n+            )));\n+        }\n+        match &self.op {\n+            Operator::Lt => comparison_op!(left, right, lt),\n+            Operator::LtEq => comparison_op!(left, right, lt_eq),\n+            Operator::Gt => comparison_op!(left, right, gt),\n+            Operator::GtEq => comparison_op!(left, right, gt_eq),\n+            Operator::Eq => comparison_op!(left, right, eq),\n+            Operator::NotEq => comparison_op!(left, right, neq),\n+            Operator::And => boolean_op!(left, right, and),\n \n Review comment:\n   I think you need to check that `left.data_type()` is boolean before using the `boolean_op` macro.  If you pass an array with another data type though here it will downcast to a boolean array but, of course, would be incorrect.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-24T03:29:57.093+0000",
                    "updated": "2019-09-24T03:29:57.093+0000",
                    "started": "2019-09-24T03:29:57.093+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317141",
                    "issueId": "13258371"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371/worklog/317155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #5478: ARROW-6669: [Rust] [DataFusion] Implement binary expression for physical plan\nURL: https://github.com/apache/arrow/pull/5478#discussion_r327421515\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -196,6 +198,118 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// Invoke a compute kernel on a pair of arrays\n+macro_rules! compute_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        let rr = $RIGHT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        Ok(Arc::new($OP(&ll, &rr)?))\n+    }};\n+}\n+\n+/// Invoke a compute kernel on a pair of arrays\n+macro_rules! comparison_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident) => {{\n+        match $LEFT.data_type() {\n+            DataType::Int8 => compute_op!($LEFT, $RIGHT, $OP, Int8Array),\n+            DataType::Int16 => compute_op!($LEFT, $RIGHT, $OP, Int16Array),\n+            DataType::Int32 => compute_op!($LEFT, $RIGHT, $OP, Int32Array),\n+            DataType::Int64 => compute_op!($LEFT, $RIGHT, $OP, Int64Array),\n+            DataType::UInt8 => compute_op!($LEFT, $RIGHT, $OP, UInt8Array),\n+            DataType::UInt16 => compute_op!($LEFT, $RIGHT, $OP, UInt16Array),\n+            DataType::UInt32 => compute_op!($LEFT, $RIGHT, $OP, UInt32Array),\n+            DataType::UInt64 => compute_op!($LEFT, $RIGHT, $OP, UInt64Array),\n+            DataType::Float32 => compute_op!($LEFT, $RIGHT, $OP, Float32Array),\n+            DataType::Float64 => compute_op!($LEFT, $RIGHT, $OP, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"Unsupported data type {:?}\",\n+                other\n+            ))),\n+        }\n+    }};\n+}\n+\n+/// Invoke a boolean kernel on a pair of arrays\n+macro_rules! boolean_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"boolean_op failed to downcast array\");\n+        let rr = $RIGHT\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"boolean_op failed to downcast array\");\n+        Ok(Arc::new($OP(&ll, &rr)?))\n+    }};\n+}\n+/// Binary expression\n+pub struct BinaryExpr {\n+    left: Arc<dyn PhysicalExpr>,\n+    op: Operator,\n+    right: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl BinaryExpr {\n+    /// Create new binary expression\n+    pub fn new(\n+        left: Arc<dyn PhysicalExpr>,\n+        op: Operator,\n+        right: Arc<dyn PhysicalExpr>,\n+    ) -> Self {\n+        Self { left, op, right }\n+    }\n+}\n+\n+impl PhysicalExpr for BinaryExpr {\n+    fn name(&self) -> String {\n+        format!(\"{:?}\", self.op)\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        self.left.data_type(input_schema)\n+    }\n+\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n+        let left = self.left.evaluate(batch)?;\n+        let right = self.right.evaluate(batch)?;\n+        if left.data_type() != right.data_type() {\n+            return Err(ExecutionError::General(format!(\n+                \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n+                self.op,\n+                left.data_type(),\n+                right.data_type()\n+            )));\n+        }\n+        match &self.op {\n+            Operator::Lt => comparison_op!(left, right, lt),\n+            Operator::LtEq => comparison_op!(left, right, lt_eq),\n+            Operator::Gt => comparison_op!(left, right, gt),\n+            Operator::GtEq => comparison_op!(left, right, gt_eq),\n+            Operator::Eq => comparison_op!(left, right, eq),\n+            Operator::NotEq => comparison_op!(left, right, neq),\n+            Operator::And => boolean_op!(left, right, and),\n \n Review comment:\n   Good catch, thanks. I think the current code would have failed on the downcast resulting in a panic if the types were wrong (not great), and explicit checks make sense. I pushed this change and also rebased.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-24T04:20:42.787+0000",
                    "updated": "2019-09-24T04:20:42.787+0000",
                    "started": "2019-09-24T04:20:42.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317155",
                    "issueId": "13258371"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371/worklog/317534",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5478: ARROW-6669: [Rust] [DataFusion] Implement binary expression for physical plan\nURL: https://github.com/apache/arrow/pull/5478#discussion_r327646124\n \n \n\n ##########\n File path: rust/datafusion/src/execution/physical_plan/expressions.rs\n ##########\n @@ -197,6 +199,140 @@ pub fn sum(expr: Arc<dyn PhysicalExpr>) -> Arc<dyn AggregateExpr> {\n     Arc::new(Sum::new(expr))\n }\n \n+/// Invoke a compute kernel on a pair of arrays\n+macro_rules! compute_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident, $DT:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        let rr = $RIGHT\n+            .as_any()\n+            .downcast_ref::<$DT>()\n+            .expect(\"compute_op failed to downcast array\");\n+        Ok(Arc::new($OP(&ll, &rr)?))\n+    }};\n+}\n+\n+/// Invoke a compute kernel on a pair of arrays\n+macro_rules! comparison_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident) => {{\n+        match $LEFT.data_type() {\n+            DataType::Int8 => compute_op!($LEFT, $RIGHT, $OP, Int8Array),\n+            DataType::Int16 => compute_op!($LEFT, $RIGHT, $OP, Int16Array),\n+            DataType::Int32 => compute_op!($LEFT, $RIGHT, $OP, Int32Array),\n+            DataType::Int64 => compute_op!($LEFT, $RIGHT, $OP, Int64Array),\n+            DataType::UInt8 => compute_op!($LEFT, $RIGHT, $OP, UInt8Array),\n+            DataType::UInt16 => compute_op!($LEFT, $RIGHT, $OP, UInt16Array),\n+            DataType::UInt32 => compute_op!($LEFT, $RIGHT, $OP, UInt32Array),\n+            DataType::UInt64 => compute_op!($LEFT, $RIGHT, $OP, UInt64Array),\n+            DataType::Float32 => compute_op!($LEFT, $RIGHT, $OP, Float32Array),\n+            DataType::Float64 => compute_op!($LEFT, $RIGHT, $OP, Float64Array),\n+            other => Err(ExecutionError::General(format!(\n+                \"Unsupported data type {:?}\",\n+                other\n+            ))),\n+        }\n+    }};\n+}\n+\n+/// Invoke a boolean kernel on a pair of arrays\n+macro_rules! boolean_op {\n+    ($LEFT:expr, $RIGHT:expr, $OP:ident) => {{\n+        let ll = $LEFT\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"boolean_op failed to downcast array\");\n+        let rr = $RIGHT\n+            .as_any()\n+            .downcast_ref::<BooleanArray>()\n+            .expect(\"boolean_op failed to downcast array\");\n+        Ok(Arc::new($OP(&ll, &rr)?))\n+    }};\n+}\n+/// Binary expression\n+pub struct BinaryExpr {\n+    left: Arc<dyn PhysicalExpr>,\n+    op: Operator,\n+    right: Arc<dyn PhysicalExpr>,\n+}\n+\n+impl BinaryExpr {\n+    /// Create new binary expression\n+    pub fn new(\n+        left: Arc<dyn PhysicalExpr>,\n+        op: Operator,\n+        right: Arc<dyn PhysicalExpr>,\n+    ) -> Self {\n+        Self { left, op, right }\n+    }\n+}\n+\n+impl PhysicalExpr for BinaryExpr {\n+    fn name(&self) -> String {\n+        format!(\"{:?}\", self.op)\n+    }\n+\n+    fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n+        self.left.data_type(input_schema)\n+    }\n+\n+    fn evaluate(&self, batch: &RecordBatch) -> Result<ArrayRef> {\n+        let left = self.left.evaluate(batch)?;\n+        let right = self.right.evaluate(batch)?;\n+        if left.data_type() != right.data_type() {\n+            return Err(ExecutionError::General(format!(\n+                \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n+                self.op,\n+                left.data_type(),\n+                right.data_type()\n+            )));\n+        }\n+        match &self.op {\n+            Operator::Lt => comparison_op!(left, right, lt),\n+            Operator::LtEq => comparison_op!(left, right, lt_eq),\n+            Operator::Gt => comparison_op!(left, right, gt),\n+            Operator::GtEq => comparison_op!(left, right, gt_eq),\n+            Operator::Eq => comparison_op!(left, right, eq),\n+            Operator::NotEq => comparison_op!(left, right, neq),\n+            Operator::And => {\n+                if left.data_type() == &DataType::Boolean {\n+                    boolean_op!(left, right, and)\n+                } else {\n+                    return Err(ExecutionError::General(format!(\n+                        \"Cannot evaluate binary expression {:?} with types {:?} and {:?}\",\n+                        self.op,\n+                        left.data_type(),\n+                        right.data_type()\n+                    )));\n+                }\n+            }\n+            Operator::Or => {\n \n Review comment:\n   It's a shame this has to be repeated instead of using `Operator::And | Operator::Or`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-24T14:25:36.248+0000",
                    "updated": "2019-09-24T14:25:36.248+0000",
                    "started": "2019-09-24T14:25:36.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317534",
                    "issueId": "13258371"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371/worklog/317537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #5478: ARROW-6669: [Rust] [DataFusion] Implement binary expression for physical plan\nURL: https://github.com/apache/arrow/pull/5478\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-24T14:29:15.556+0000",
                    "updated": "2019-09-24T14:29:15.556+0000",
                    "started": "2019-09-24T14:29:15.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "317537",
                    "issueId": "13258371"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@180c3d7e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a783e96[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58e73f95[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@23102691[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c0f878f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@559738ce[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@346dbe7e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@166b22cc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5698fc71[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3a25ef24[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63622850[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2cd01bb2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 24 14:29:18 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-24T14:29:18.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6669/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-09-23T17:55:30.000+0000",
        "updated": "2019-09-24T14:29:18.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement comparison operators (<, <=, >, >=, =, !=) as well as binary operators AND and OR.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Implement physical expression for binary expressions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13258371/comment/16936865",
                    "id": "16936865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5478\n[https://github.com/apache/arrow/pull/5478]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
                        "name": "paddyhoran",
                        "key": "paddyhoran",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Paddy Horan",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-24T14:29:18.568+0000",
                    "updated": "2019-09-24T14:29:18.568+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06xk8:",
        "customfield_12314139": null
    }
}