{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13118965",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118965",
    "key": "ARROW-1828",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1828/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@f505ecd[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33b40fe[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@471a2be4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1effaf49[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50d4683c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@17b03b15[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@163670c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6285058e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1163146a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@71dedc0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d5cb128[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@57bf6e78[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 23 14:42:03 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-23T14:42:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1828/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-11-16T16:24:23.000+0000",
        "updated": "2017-11-23T14:42:03.000+0000",
        "timeoriginalestimate": null,
        "description": "Follow up to ARROW-1559",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement hash kernel specialization for BooleanType",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118965/comment/16263274",
                    "id": "16263274",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1350: ARROW-1828: [C++] Hash kernel specialization for BooleanType\nURL: https://github.com/apache/arrow/pull/1350\n \n \n   This is a bit tedious because we want to preserve the order in which the unique values were observed. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T20:06:01.896+0000",
                    "updated": "2017-11-22T20:06:01.896+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118965/comment/16263325",
                    "id": "16263325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1350: ARROW-1828: [C++] Hash kernel specialization for BooleanType\nURL: https://github.com/apache/arrow/pull/1350#discussion_r152676160\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/hash.cc\n ##########\n @@ -368,6 +368,79 @@ class HashTableKernel<Type, Action, enable_if_has_c_type<Type>> : public HashTab\n   HashDictionary<Type> dict_;\n };\n \n+// ----------------------------------------------------------------------\n+// Hash table for boolean types\n+\n+template <typename Type, typename Action>\n+class HashTableKernel<Type, Action, enable_if_boolean<Type>> : public HashTable {\n+ public:\n+  HashTableKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : HashTable(type, pool) {\n+    std::fill(table_, table_ + 2, kHashSlotEmpty);\n+  }\n+\n+  Status Append(const ArrayData& arr) override {\n+    auto action = static_cast<Action*>(this);\n+\n+    RETURN_NOT_OK(action->Reserve(arr.length));\n+\n+    internal::BitmapReader value_reader(arr.buffers[1]->data(), arr.offset, arr.length);\n+\n+#define HASH_INNER_LOOP()                                      \\\n+  if (slot == kHashSlotEmpty) {                                \\\n+    if (!Action::allow_expand) {                               \\\n+      throw HashException(\"Encountered new dictionary value\"); \\\n+    }                                                          \\\n+    table_[j] = slot = static_cast<hash_slot_t>(dict_.size()); \\\n+    dict_.push_back(value);                                    \\\n+    action->ObserveNotFound(slot);                             \\\n+  } else {                                                     \\\n+    action->ObserveFound(slot);                                \\\n+  }\n+\n+    if (arr.null_count != 0) {\n+      internal::BitmapReader valid_reader(arr.buffers[0]->data(), arr.offset, arr.length);\n+      for (int64_t i = 0; i < arr.length; ++i) {\n+        const bool is_null = valid_reader.IsNotSet();\n+        const bool value = value_reader.IsSet();\n+        const int j = value ? 1 : 0;\n+        hash_slot_t slot = table_[j];\n+        valid_reader.Next();\n+        value_reader.Next();\n+        if (is_null) {\n+          action->ObserveNull();\n+          continue;\n+        }\n+        HASH_INNER_LOOP();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < arr.length; ++i) {\n+        const bool value = value_reader.IsSet();\n+        const int j = value ? 1 : 0;\n+        hash_slot_t slot = table_[j];\n+        value_reader.Next();\n+        HASH_INNER_LOOP();\n+      }\n+    }\n \n Review comment:\n   The macro strategy used elsewhere doesn't quite work here because the the bit reader for the data has to be advanced. We can address this in later refactoring...\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-22T20:51:16.193+0000",
                    "updated": "2017-11-22T20:51:16.193+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118965/comment/16264415",
                    "id": "16264415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1350: ARROW-1828: [C++] Hash kernel specialization for BooleanType\nURL: https://github.com/apache/arrow/pull/1350#issuecomment-346635323\n \n \n   Appveyor build https://ci.appveyor.com/project/wesm/arrow/build/1.0.1487\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T14:41:26.779+0000",
                    "updated": "2017-11-23T14:41:26.779+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118965/comment/16264416",
                    "id": "16264416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1350: ARROW-1828: [C++] Hash kernel specialization for BooleanType\nURL: https://github.com/apache/arrow/pull/1350\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex fa408ae40..96edd8f01 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -843,6 +843,40 @@ TEST_F(TestHashKernel, UniqueTimeTimestamp) {\n                                       {});\n }\n \n+TEST_F(TestHashKernel, UniqueBoolean) {\n+  CheckUnique<BooleanType, bool>(&this->ctx_, boolean(), {true, true, false, true},\n+                                 {true, false, true, true}, {true, false}, {});\n+\n+  CheckUnique<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true},\n+                                 {true, false, true, true}, {false, true}, {});\n+\n+  // No nulls\n+  CheckUnique<BooleanType, bool>(&this->ctx_, boolean(), {true, true, false, true}, {},\n+                                 {true, false}, {});\n+\n+  CheckUnique<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true}, {},\n+                                 {false, true}, {});\n+}\n+\n+TEST_F(TestHashKernel, DictEncodeBoolean) {\n+  CheckDictEncode<BooleanType, bool>(\n+      &this->ctx_, boolean(), {true, true, false, true, false},\n+      {true, false, true, true, true}, {true, false}, {}, {0, 0, 1, 0, 1});\n+\n+  CheckDictEncode<BooleanType, bool>(\n+      &this->ctx_, boolean(), {false, true, false, true, false},\n+      {true, false, true, true, true}, {false, true}, {}, {0, 0, 0, 1, 0});\n+\n+  // No nulls\n+  CheckDictEncode<BooleanType, bool>(&this->ctx_, boolean(),\n+                                     {true, true, false, true, false}, {}, {true, false},\n+                                     {}, {0, 0, 1, 0, 1});\n+\n+  CheckDictEncode<BooleanType, bool>(&this->ctx_, boolean(),\n+                                     {false, true, false, true, false}, {}, {false, true},\n+                                     {}, {0, 1, 0, 1, 0});\n+}\n+\n TEST_F(TestHashKernel, UniqueBinary) {\n   CheckUnique<BinaryType, std::string>(&this->ctx_, binary(),\n                                        {\"test\", \"\", \"test2\", \"test\"},\ndiff --git a/cpp/src/arrow/compute/kernels/hash.cc b/cpp/src/arrow/compute/kernels/hash.cc\nindex 95f039932..e47759d4d 100644\n--- a/cpp/src/arrow/compute/kernels/hash.cc\n+++ b/cpp/src/arrow/compute/kernels/hash.cc\n@@ -368,6 +368,79 @@ class HashTableKernel<Type, Action, enable_if_has_c_type<Type>> : public HashTab\n   HashDictionary<Type> dict_;\n };\n \n+// ----------------------------------------------------------------------\n+// Hash table for boolean types\n+\n+template <typename Type, typename Action>\n+class HashTableKernel<Type, Action, enable_if_boolean<Type>> : public HashTable {\n+ public:\n+  HashTableKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : HashTable(type, pool) {\n+    std::fill(table_, table_ + 2, kHashSlotEmpty);\n+  }\n+\n+  Status Append(const ArrayData& arr) override {\n+    auto action = static_cast<Action*>(this);\n+\n+    RETURN_NOT_OK(action->Reserve(arr.length));\n+\n+    internal::BitmapReader value_reader(arr.buffers[1]->data(), arr.offset, arr.length);\n+\n+#define HASH_INNER_LOOP()                                      \\\n+  if (slot == kHashSlotEmpty) {                                \\\n+    if (!Action::allow_expand) {                               \\\n+      throw HashException(\"Encountered new dictionary value\"); \\\n+    }                                                          \\\n+    table_[j] = slot = static_cast<hash_slot_t>(dict_.size()); \\\n+    dict_.push_back(value);                                    \\\n+    action->ObserveNotFound(slot);                             \\\n+  } else {                                                     \\\n+    action->ObserveFound(slot);                                \\\n+  }\n+\n+    if (arr.null_count != 0) {\n+      internal::BitmapReader valid_reader(arr.buffers[0]->data(), arr.offset, arr.length);\n+      for (int64_t i = 0; i < arr.length; ++i) {\n+        const bool is_null = valid_reader.IsNotSet();\n+        const bool value = value_reader.IsSet();\n+        const int j = value ? 1 : 0;\n+        hash_slot_t slot = table_[j];\n+        valid_reader.Next();\n+        value_reader.Next();\n+        if (is_null) {\n+          action->ObserveNull();\n+          continue;\n+        }\n+        HASH_INNER_LOOP();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < arr.length; ++i) {\n+        const bool value = value_reader.IsSet();\n+        const int j = value ? 1 : 0;\n+        hash_slot_t slot = table_[j];\n+        value_reader.Next();\n+        HASH_INNER_LOOP();\n+      }\n+    }\n+\n+#undef HASH_INNER_LOOP\n+\n+    return Status::OK();\n+  }\n+\n+  Status GetDictionary(std::shared_ptr<ArrayData>* out) override {\n+    BooleanBuilder builder(pool_);\n+    for (const bool value : dict_) {\n+      RETURN_NOT_OK(builder.Append(value));\n+    }\n+    return builder.FinishInternal(out);\n+  }\n+\n+ private:\n+  hash_slot_t table_[2];\n+  std::vector<bool> dict_;\n+};\n+\n // ----------------------------------------------------------------------\n // Hash table pass for variable-length binary types\n \n@@ -698,7 +771,7 @@ Status GetUniqueKernel(FunctionContext* ctx, const std::shared_ptr<DataType>& ty\n \n   switch (type->id()) {\n     UNIQUE_CASE(NullType);\n-    // UNIQUE_CASE(BooleanType);\n+    UNIQUE_CASE(BooleanType);\n     UNIQUE_CASE(UInt8Type);\n     UNIQUE_CASE(Int8Type);\n     UNIQUE_CASE(UInt16Type);\n@@ -741,7 +814,7 @@ Status GetDictionaryEncodeKernel(FunctionContext* ctx,\n \n   switch (type->id()) {\n     DICTIONARY_ENCODE_CASE(NullType);\n-    // DICTIONARY_ENCODE_CASE(BooleanType);\n+    DICTIONARY_ENCODE_CASE(BooleanType);\n     DICTIONARY_ENCODE_CASE(UInt8Type);\n     DICTIONARY_ENCODE_CASE(Int8Type);\n     DICTIONARY_ENCODE_CASE(UInt16Type);\ndiff --git a/cpp/src/arrow/compute/kernels/util-internal.h b/cpp/src/arrow/compute/kernels/util-internal.h\nindex 70c506286..7633fed4a 100644\n--- a/cpp/src/arrow/compute/kernels/util-internal.h\n+++ b/cpp/src/arrow/compute/kernels/util-internal.h\n@@ -59,6 +59,10 @@ template <typename T>\n using enable_if_binary =\n     typename std::enable_if<std::is_base_of<BinaryType, T>::value>::type;\n \n+template <typename T>\n+using enable_if_boolean =\n+    typename std::enable_if<std::is_same<BooleanType, T>::value>::type;\n+\n template <typename T>\n using enable_if_fixed_size_binary =\n     typename std::enable_if<std::is_base_of<FixedSizeBinaryType, T>::value>::type;\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex f1f59384b..324648178 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -209,7 +209,8 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n         int byte_width()\n         int bit_width()\n \n-    cdef cppclass CDecimal128Type\" arrow::Decimal128Type\"(CFixedSizeBinaryType):\n+    cdef cppclass CDecimal128Type \\\n+            \" arrow::Decimal128Type\"(CFixedSizeBinaryType):\n         CDecimal128Type(int precision, int scale)\n         int precision()\n         int scale()\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-23T14:41:56.391+0000",
                    "updated": "2017-11-23T14:41:56.391+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13118965/comment/16264417",
                    "id": "16264417",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1350\n[https://github.com/apache/arrow/pull/1350]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-23T14:42:03.844+0000",
                    "updated": "2017-11-23T14:42:03.844+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3mvsv:",
        "customfield_12314139": null
    }
}