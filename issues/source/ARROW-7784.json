{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13283732",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732",
    "key": "ARROW-7784",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589602",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589602",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13307842",
                    "key": "ARROW-8970",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13307842",
                    "fields": {
                        "summary": "[C++] Reduce shared library / binary code size (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7784/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/worklog/439310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #7311:\nURL: https://github.com/apache/arrow/pull/7311\n\n\n   This refactors diff.cc slightly to instantiate fewer templates.\r\n   \r\n   On my machine with clang-8:\r\n   \r\n   * Before: 15.5s compilation time of diff.cc in -03, 1175528 bytes of object code\r\n   * After: 4.5s compilation time, 558368 bytes of object code\r\n   \r\n   There are probably more improvements here both in compilation time and code size but cutting 10 seconds out of release builds is already a good improvement. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-01T00:49:49.684+0000",
                    "updated": "2020-06-01T00:49:49.684+0000",
                    "started": "2020-06-01T00:49:49.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439310",
                    "issueId": "13283732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/worklog/439311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7311:\nURL: https://github.com/apache/arrow/pull/7311#issuecomment-636561996\n\n\n   https://issues.apache.org/jira/browse/ARROW-7784\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-01T01:05:52.052+0000",
                    "updated": "2020-06-01T01:05:52.052+0000",
                    "started": "2020-06-01T01:05:52.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439311",
                    "issueId": "13283732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/worklog/439312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #7311:\nURL: https://github.com/apache/arrow/pull/7311#issuecomment-636563551\n\n\n   FTR it seems like the custom value formatters here could be merged with some code elsewhere in the codebase (`Scalar::ToString`?) since they are among the largest symbols in this file\r\n   \r\n   https://gist.github.com/wesm/9d4c5850d218ef722a77825f1da6f991\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-01T01:12:16.354+0000",
                    "updated": "2020-06-01T01:12:16.354+0000",
                    "started": "2020-06-01T01:12:16.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439312",
                    "issueId": "13283732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/worklog/439563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7311:\nURL: https://github.com/apache/arrow/pull/7311#discussion_r433297868\n\n\n\n##########\nFile path: cpp/src/arrow/array/diff.cc\n##########\n@@ -181,17 +146,37 @@ internal::LazyRange<NullOrViewGenerator<ArrayType>> MakeNullOrViewRange(\n /// representation is minimal in the common case where the sequences differ only slightly,\n /// since most of the elements are shared between base and target and are represented\n /// implicitly.\n-template <typename Iterator>\n class QuadraticSpaceMyersDiff {\n  public:\n-  // represents an intermediate state in the comparison of two arrays\n-  struct EditPoint {\n-    Iterator base, target;\n+  QuadraticSpaceMyersDiff(const Array& base, const Array& target, MemoryPool* pool)\n+      : base_(base),\n+        target_(target),\n+        pool_(pool),\n+        value_comparator_(GetValueComparator(*base.type())),\n+        base_begin_(0),\n+        base_end_(base.length()),\n+        target_begin_(0),\n+        target_end_(target.length()),\n+        endpoint_base_({ExtendFrom({base_begin_, target_begin_}).base}),\n+        insert_({true}) {\n+    if ((base_end_ - base_begin_ == target_end_ - target_begin_) &&\n+        endpoint_base_[0] == base_end_) {\n+      // trivial case: base == target\n+      finish_index_ = 0;\n+    }\n+  }\n \n-    bool operator==(EditPoint other) const {\n-      return base == other.base && target == other.target;\n+  bool ValuesEqual(int64_t base_index, int64_t target_index) const {\n+    bool base_null = base_.IsNull(base_index);\n+    bool target_null = target_.IsNull(target_index);\n+    if (base_null && target_null) {\n+      return true;\n+    } else if (base_null || target_null) {\n\nReview comment:\n       Coding style: don't use `else` if the previous block returns\n\n##########\nFile path: cpp/src/arrow/array/diff.cc\n##########\n@@ -342,106 +311,74 @@ class QuadraticSpaceMyersDiff {\n         {field(\"insert\", boolean()), field(\"run_length\", int64())});\n   }\n \n+  Result<std::shared_ptr<StructArray>> Diff() {\n+    while (!Done()) {\n+      Next();\n+    }\n+    return GetEdits(pool_);\n+  }\n+\n  private:\n+  const Array& base_;\n+  const Array& target_;\n+  MemoryPool* pool_;\n+  ValueComparator value_comparator_;\n   int64_t finish_index_ = -1;\n   int64_t edit_count_ = 0;\n-  Iterator base_begin_, base_end_;\n-  Iterator target_begin_, target_end_;\n+  int64_t base_begin_, base_end_;\n+  int64_t target_begin_, target_end_;\n   // each element of endpoint_base_ is the furthest position in base reachable given an\n   // edit_count and (# insertions) - (# deletions). Each bit of insert_ records whether\n   // the corresponding furthest position was reached via an insertion or a deletion\n   // (followed by a run of shared elements). See StorageOffset for the\n   // layout of these vectors\n-  std::vector<Iterator> endpoint_base_;\n+  std::vector<int64_t> endpoint_base_;\n   std::vector<bool> insert_;\n };\n \n-struct DiffImpl {\n-  Status Visit(const NullType&) {\n-    bool insert = base_.length() < target_.length();\n-    auto run_length = std::min(base_.length(), target_.length());\n-    auto edit_count = std::max(base_.length(), target_.length()) - run_length;\n-\n-    TypedBufferBuilder<bool> insert_builder(pool_);\n-    RETURN_NOT_OK(insert_builder.Resize(edit_count + 1));\n-    insert_builder.UnsafeAppend(false);\n-    TypedBufferBuilder<int64_t> run_length_builder(pool_);\n-    RETURN_NOT_OK(run_length_builder.Resize(edit_count + 1));\n-    run_length_builder.UnsafeAppend(run_length);\n-    if (edit_count > 0) {\n-      insert_builder.UnsafeAppend(edit_count, insert);\n-      run_length_builder.UnsafeAppend(edit_count, 0);\n-    }\n-\n-    std::shared_ptr<Buffer> insert_buf, run_length_buf;\n-    RETURN_NOT_OK(insert_builder.Finish(&insert_buf));\n-    RETURN_NOT_OK(run_length_builder.Finish(&run_length_buf));\n-\n-    ARROW_ASSIGN_OR_RAISE(\n-        out_,\n-        StructArray::Make({std::make_shared<BooleanArray>(edit_count + 1, insert_buf),\n-                           std::make_shared<Int64Array>(edit_count + 1, run_length_buf)},\n-                          {field(\"insert\", boolean()), field(\"run_length\", int64())}));\n-    return Status::OK();\n-  }\n-\n-  template <typename T>\n-  Status Visit(const T&) {\n-    using ArrayType = typename TypeTraits<T>::ArrayType;\n-    if (base_.null_count() == 0 && target_.null_count() == 0) {\n-      auto base = MakeViewRange<ArrayType>(base_);\n-      auto target = MakeViewRange<ArrayType>(target_);\n-      ARROW_ASSIGN_OR_RAISE(out_,\n-                            Diff(base.begin(), base.end(), target.begin(), target.end()));\n-    } else {\n-      auto base = MakeNullOrViewRange<ArrayType>(base_);\n-      auto target = MakeNullOrViewRange<ArrayType>(target_);\n-      ARROW_ASSIGN_OR_RAISE(out_,\n-                            Diff(base.begin(), base.end(), target.begin(), target.end()));\n-    }\n-    return Status::OK();\n-  }\n-\n-  Status Visit(const ExtensionType&) {\n-    auto base = checked_cast<const ExtensionArray&>(base_).storage();\n-    auto target = checked_cast<const ExtensionArray&>(target_).storage();\n-    ARROW_ASSIGN_OR_RAISE(out_, arrow::Diff(*base, *target, pool_));\n-    return Status::OK();\n-  }\n-\n-  Status Visit(const DictionaryType& t) {\n-    return Status::NotImplemented(\"diffing arrays of type \", t);\n-  }\n-\n-  Result<std::shared_ptr<StructArray>> Diff() {\n-    RETURN_NOT_OK(VisitTypeInline(*base_.type(), this));\n-    return out_;\n-  }\n-\n-  template <typename Iterator>\n-  Result<std::shared_ptr<StructArray>> Diff(Iterator base_begin, Iterator base_end,\n-                                            Iterator target_begin, Iterator target_end) {\n-    QuadraticSpaceMyersDiff<Iterator> impl(base_begin, base_end, target_begin,\n-                                           target_end);\n-    while (!impl.Done()) {\n-      impl.Next();\n-    }\n-    return impl.GetEdits(pool_);\n-  }\n-\n-  const Array& base_;\n-  const Array& target_;\n-  MemoryPool* pool_;\n-  std::shared_ptr<StructArray> out_;\n-};\n+Result<std::shared_ptr<StructArray>> NullDiff(const Array& base, const Array& target,\n+                                              MemoryPool* pool) {\n+  bool insert = base.length() < target.length();\n+  auto run_length = std::min(base.length(), target.length());\n+  auto edit_count = std::max(base.length(), target.length()) - run_length;\n+\n+  TypedBufferBuilder<bool> insert_builder(pool);\n+  RETURN_NOT_OK(insert_builder.Resize(edit_count + 1));\n+  insert_builder.UnsafeAppend(false);\n+  TypedBufferBuilder<int64_t> run_length_builder(pool);\n+  RETURN_NOT_OK(run_length_builder.Resize(edit_count + 1));\n+  run_length_builder.UnsafeAppend(run_length);\n+  if (edit_count > 0) {\n+    insert_builder.UnsafeAppend(edit_count, insert);\n+    run_length_builder.UnsafeAppend(edit_count, 0);\n+  }\n+\n+  std::shared_ptr<Buffer> insert_buf, run_length_buf;\n+  RETURN_NOT_OK(insert_builder.Finish(&insert_buf));\n+  RETURN_NOT_OK(run_length_builder.Finish(&run_length_buf));\n+\n+  return StructArray::Make({std::make_shared<BooleanArray>(edit_count + 1, insert_buf),\n+                            std::make_shared<Int64Array>(edit_count + 1, run_length_buf)},\n+                           {field(\"insert\", boolean()), field(\"run_length\", int64())});\n+}\n \n Result<std::shared_ptr<StructArray>> Diff(const Array& base, const Array& target,\n                                           MemoryPool* pool) {\n   if (!base.type()->Equals(target.type())) {\n     return Status::TypeError(\"only taking the diff of like-typed arrays is supported.\");\n   }\n \n-  return DiffImpl{base, target, pool, nullptr}.Diff();\n+  if (base.type()->id() == Type::NA) {\n+    return NullDiff(base, target, pool);\n+  } else if (base.type()->id() == Type::EXTENSION) {\n+    auto base_storage = checked_cast<const ExtensionArray&>(base).storage();\n+    auto target_storage = checked_cast<const ExtensionArray&>(target).storage();\n+    return Diff(*base_storage, *target_storage, pool);\n+  } else if (base.type()->id() == Type::EXTENSION) {\n\nReview comment:\n       ```suggestion\r\n     } else if (base.type()->id() == Type::DICTIONARY) {\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-01T15:20:26.005+0000",
                    "updated": "2020-06-01T15:20:26.005+0000",
                    "started": "2020-06-01T15:20:26.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439563",
                    "issueId": "13283732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/worklog/439592",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #7311:\nURL: https://github.com/apache/arrow/pull/7311#discussion_r433349705\n\n\n\n##########\nFile path: cpp/src/arrow/array/diff.cc\n##########\n@@ -342,106 +311,74 @@ class QuadraticSpaceMyersDiff {\n         {field(\"insert\", boolean()), field(\"run_length\", int64())});\n   }\n \n+  Result<std::shared_ptr<StructArray>> Diff() {\n+    while (!Done()) {\n+      Next();\n+    }\n+    return GetEdits(pool_);\n+  }\n+\n  private:\n+  const Array& base_;\n+  const Array& target_;\n+  MemoryPool* pool_;\n+  ValueComparator value_comparator_;\n   int64_t finish_index_ = -1;\n   int64_t edit_count_ = 0;\n-  Iterator base_begin_, base_end_;\n-  Iterator target_begin_, target_end_;\n+  int64_t base_begin_, base_end_;\n+  int64_t target_begin_, target_end_;\n   // each element of endpoint_base_ is the furthest position in base reachable given an\n   // edit_count and (# insertions) - (# deletions). Each bit of insert_ records whether\n   // the corresponding furthest position was reached via an insertion or a deletion\n   // (followed by a run of shared elements). See StorageOffset for the\n   // layout of these vectors\n-  std::vector<Iterator> endpoint_base_;\n+  std::vector<int64_t> endpoint_base_;\n   std::vector<bool> insert_;\n };\n \n-struct DiffImpl {\n-  Status Visit(const NullType&) {\n-    bool insert = base_.length() < target_.length();\n-    auto run_length = std::min(base_.length(), target_.length());\n-    auto edit_count = std::max(base_.length(), target_.length()) - run_length;\n-\n-    TypedBufferBuilder<bool> insert_builder(pool_);\n-    RETURN_NOT_OK(insert_builder.Resize(edit_count + 1));\n-    insert_builder.UnsafeAppend(false);\n-    TypedBufferBuilder<int64_t> run_length_builder(pool_);\n-    RETURN_NOT_OK(run_length_builder.Resize(edit_count + 1));\n-    run_length_builder.UnsafeAppend(run_length);\n-    if (edit_count > 0) {\n-      insert_builder.UnsafeAppend(edit_count, insert);\n-      run_length_builder.UnsafeAppend(edit_count, 0);\n-    }\n-\n-    std::shared_ptr<Buffer> insert_buf, run_length_buf;\n-    RETURN_NOT_OK(insert_builder.Finish(&insert_buf));\n-    RETURN_NOT_OK(run_length_builder.Finish(&run_length_buf));\n-\n-    ARROW_ASSIGN_OR_RAISE(\n-        out_,\n-        StructArray::Make({std::make_shared<BooleanArray>(edit_count + 1, insert_buf),\n-                           std::make_shared<Int64Array>(edit_count + 1, run_length_buf)},\n-                          {field(\"insert\", boolean()), field(\"run_length\", int64())}));\n-    return Status::OK();\n-  }\n-\n-  template <typename T>\n-  Status Visit(const T&) {\n-    using ArrayType = typename TypeTraits<T>::ArrayType;\n-    if (base_.null_count() == 0 && target_.null_count() == 0) {\n-      auto base = MakeViewRange<ArrayType>(base_);\n-      auto target = MakeViewRange<ArrayType>(target_);\n-      ARROW_ASSIGN_OR_RAISE(out_,\n-                            Diff(base.begin(), base.end(), target.begin(), target.end()));\n-    } else {\n-      auto base = MakeNullOrViewRange<ArrayType>(base_);\n-      auto target = MakeNullOrViewRange<ArrayType>(target_);\n-      ARROW_ASSIGN_OR_RAISE(out_,\n-                            Diff(base.begin(), base.end(), target.begin(), target.end()));\n-    }\n-    return Status::OK();\n-  }\n-\n-  Status Visit(const ExtensionType&) {\n-    auto base = checked_cast<const ExtensionArray&>(base_).storage();\n-    auto target = checked_cast<const ExtensionArray&>(target_).storage();\n-    ARROW_ASSIGN_OR_RAISE(out_, arrow::Diff(*base, *target, pool_));\n-    return Status::OK();\n-  }\n-\n-  Status Visit(const DictionaryType& t) {\n-    return Status::NotImplemented(\"diffing arrays of type \", t);\n-  }\n-\n-  Result<std::shared_ptr<StructArray>> Diff() {\n-    RETURN_NOT_OK(VisitTypeInline(*base_.type(), this));\n-    return out_;\n-  }\n-\n-  template <typename Iterator>\n-  Result<std::shared_ptr<StructArray>> Diff(Iterator base_begin, Iterator base_end,\n-                                            Iterator target_begin, Iterator target_end) {\n-    QuadraticSpaceMyersDiff<Iterator> impl(base_begin, base_end, target_begin,\n-                                           target_end);\n-    while (!impl.Done()) {\n-      impl.Next();\n-    }\n-    return impl.GetEdits(pool_);\n-  }\n-\n-  const Array& base_;\n-  const Array& target_;\n-  MemoryPool* pool_;\n-  std::shared_ptr<StructArray> out_;\n-};\n+Result<std::shared_ptr<StructArray>> NullDiff(const Array& base, const Array& target,\n+                                              MemoryPool* pool) {\n+  bool insert = base.length() < target.length();\n+  auto run_length = std::min(base.length(), target.length());\n+  auto edit_count = std::max(base.length(), target.length()) - run_length;\n+\n+  TypedBufferBuilder<bool> insert_builder(pool);\n+  RETURN_NOT_OK(insert_builder.Resize(edit_count + 1));\n+  insert_builder.UnsafeAppend(false);\n+  TypedBufferBuilder<int64_t> run_length_builder(pool);\n+  RETURN_NOT_OK(run_length_builder.Resize(edit_count + 1));\n+  run_length_builder.UnsafeAppend(run_length);\n+  if (edit_count > 0) {\n+    insert_builder.UnsafeAppend(edit_count, insert);\n+    run_length_builder.UnsafeAppend(edit_count, 0);\n+  }\n+\n+  std::shared_ptr<Buffer> insert_buf, run_length_buf;\n+  RETURN_NOT_OK(insert_builder.Finish(&insert_buf));\n+  RETURN_NOT_OK(run_length_builder.Finish(&run_length_buf));\n+\n+  return StructArray::Make({std::make_shared<BooleanArray>(edit_count + 1, insert_buf),\n+                            std::make_shared<Int64Array>(edit_count + 1, run_length_buf)},\n+                           {field(\"insert\", boolean()), field(\"run_length\", int64())});\n+}\n \n Result<std::shared_ptr<StructArray>> Diff(const Array& base, const Array& target,\n                                           MemoryPool* pool) {\n   if (!base.type()->Equals(target.type())) {\n     return Status::TypeError(\"only taking the diff of like-typed arrays is supported.\");\n   }\n \n-  return DiffImpl{base, target, pool, nullptr}.Diff();\n+  if (base.type()->id() == Type::NA) {\n+    return NullDiff(base, target, pool);\n+  } else if (base.type()->id() == Type::EXTENSION) {\n+    auto base_storage = checked_cast<const ExtensionArray&>(base).storage();\n+    auto target_storage = checked_cast<const ExtensionArray&>(target).storage();\n+    return Diff(*base_storage, *target_storage, pool);\n+  } else if (base.type()->id() == Type::EXTENSION) {\n\nReview comment:\n       I added a unit test for this path because it was not exercised. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-01T16:31:56.334+0000",
                    "updated": "2020-06-01T16:31:56.334+0000",
                    "started": "2020-06-01T16:31:56.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439592",
                    "issueId": "13283732"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/worklog/439633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz closed pull request #7311:\nURL: https://github.com/apache/arrow/pull/7311\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-06-01T17:51:09.053+0000",
                    "updated": "2020-06-01T17:51:09.053+0000",
                    "started": "2020-06-01T17:51:09.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "439633",
                    "issueId": "13283732"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@76f24fdd[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d856d81[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b60e4d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2d2f695f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55349130[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7c07a368[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@704db663[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@26fe4ca4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5732f45a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@166f1137[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b8c5337[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5f43b58e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jun 01 17:50:58 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-06-01T17:50:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7784/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-02-06T15:54:53.000+0000",
        "updated": "2020-06-01T17:51:09.000+0000",
        "timeoriginalestimate": null,
        "description": "This comes up especially when doing an optimized build. {{diff.cc}} is always enabled even if all components are disabled, and it takes multiple seconds to compile. ",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] diff.cc is extremely slow to compile",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/comment/17031724",
                    "id": "17031724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Using [CLangBuildAnalyzer|https://github.com/aras-p/ClangBuildAnalyzer] I get the following results:\r\n\r\n{code}\r\n**** Files that took longest to codegen (compiler backend):\r\n 66372 ms: build-clang-profile/src/arrow/CMakeFiles/arrow_objlib.dir/sparse_tensor.cc.o\r\n 16457 ms: build-clang-profile/src/arrow/CMakeFiles/arrow_objlib.dir/array/diff.cc.o\r\n  6283 ms: build-clang-profile/src/arrow/CMakeFiles/arrow_objlib.dir/scalar.cc.o\r\n  5284 ms: build-clang-profile/src/arrow/CMakeFiles/arrow_objlib.dir/builder.cc.o\r\n  5090 ms: build-clang-profile/src/arrow/CMakeFiles/arrow_objlib.dir/array/dict_internal.cc.o\r\n\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-02-06T16:22:01.437+0000",
                    "updated": "2020-02-06T16:22:01.437+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/comment/17116238",
                    "id": "17116238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "\"QuadraticSpaceMyersDiff\" is being instantiated for every Arrow type. Given that this code is not performance sensitive, I would suggest refactoring this code to only instantiate a single implementation of the Diff algorithm (rather than 25+ instantiations) and where relevant introduce a virtual interface for interacting with values in different-type arrays. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-25T20:22:42.576+0000",
                    "updated": "2020-05-25T20:22:42.576+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283732/comment/17121208",
                    "id": "17121208",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7311\n[https://github.com/apache/arrow/pull/7311]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-01T17:50:58.771+0000",
                    "updated": "2020-06-01T17:50:58.771+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0b868:",
        "customfield_12314139": null
    }
}