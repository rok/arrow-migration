{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13327795",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795",
    "key": "ARROW-10021",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
            "name": "yibocai",
            "key": "yibo",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
            },
            "displayName": "Yibo Cai",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10021/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 opened a new pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637\n\n\n   This patch generalize mode kernel to return top-n modes.\r\n   No performance difference for normal benchmarks.\r\n   About 20% performance drop for 100% null benchmarks.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T09:39:07.881+0000",
                    "updated": "2020-11-11T09:39:07.881+0000",
                    "started": "2020-11-11T09:39:07.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510153",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#issuecomment-725320345\n\n\n   https://issues.apache.org/jira/browse/ARROW-10021\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T09:46:08.045+0000",
                    "updated": "2020-11-11T09:46:08.045+0000",
                    "started": "2020-11-11T09:46:08.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510155",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521255222\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -140,7 +140,7 @@ Aggregations\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n | min_max                  | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n-| mode                     | Unary      | Numeric            | Scalar Struct  (2)    |                                            |\n+| mode                     | Unary      | Numeric            | Scalar Struct  (2)    | :struct:`ModeOptions`                      |\n\nReview comment:\n       Replace \"Scalar Struct\" with \"Struct\".\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -735,71 +735,63 @@ class TestPrimitiveModeKernel : public ::testing::Test {\n  public:\n   using ArrowType = T;\n   using Traits = TypeTraits<ArrowType>;\n-  using c_type = typename ArrowType::c_type;\n-  using ModeType = typename Traits::ScalarType;\n-  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n-\n-  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n-    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n-    const StructScalar& value = out.scalar_as<StructScalar>();\n+  using CType = typename ArrowType::c_type;\n+\n+  void AssertModesAre(const Datum& array, const int n,\n+                      const std::vector<CType>& expected_modes,\n+                      const std::vector<int64_t>& expected_counts) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array, ModeOptions{n}));\n+    const StructArray out_array(out.array());\n+    ASSERT_EQ(out_array.length(), expected_modes.size());\n+    ASSERT_EQ(out_array.num_fields(), 2);\n+\n+    const CType* out_modes = out_array.field(0)->data()->GetValues<CType>(1);\n+    const int64_t* out_counts = out_array.field(1)->data()->GetValues<int64_t>(1);\n+    for (int i = 0; i < out_array.length(); ++i) {\n+      // equal or nan equal\n+      ASSERT_TRUE(\n+          (expected_modes[i] == out_modes[i]) ||\n+          (expected_modes[i] != expected_modes[i] && out_modes[i] != out_modes[i]));\n+      ASSERT_EQ(expected_counts[i], out_counts[i]);\n+    }\n+  }\n \n-    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n-    ASSERT_EQ(expected_mode, out_mode.value);\n+  void AssertModesAre(const std::string& json, const int n,\n+                      const std::vector<CType>& expected_modes,\n+                      const std::vector<int64_t>& expected_counts) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModesAre(array, n, expected_modes, expected_counts);\n+  }\n \n-    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n-    ASSERT_EQ(expected_count, out_count.value);\n+  void AssertModeIs(const Datum& array, CType expected_mode, int64_t expected_count) {\n+    AssertModesAre(array, 1, {expected_mode}, {expected_count});\n   }\n \n-  void AssertModeIs(const std::string& json, c_type expected_mode,\n+  void AssertModeIs(const std::string& json, CType expected_mode,\n                     int64_t expected_count) {\n     auto array = ArrayFromJSON(type_singleton(), json);\n     AssertModeIs(array, expected_mode, expected_count);\n   }\n \n-  void AssertModeIs(const std::vector<std::string>& json, c_type expected_mode,\n+  void AssertModeIs(const std::vector<std::string>& json, CType expected_mode,\n                     int64_t expected_count) {\n     auto chunked = ChunkedArrayFromJSON(type_singleton(), json);\n     AssertModeIs(chunked, expected_mode, expected_count);\n   }\n \n-  void AssertModeIsNull(const Datum& array) {\n-    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n-    const StructScalar& value = out.scalar_as<StructScalar>();\n-\n-    for (const auto& val : value.value) {\n-      ASSERT_FALSE(val->is_valid);\n-    }\n+  void AssertModeIsNull(const Datum& array, int n) {\n\nReview comment:\n       This should be renamed, since it's not null anymore. `AssertModesEmpty`?\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -76,6 +76,18 @@ struct ARROW_EXPORT MinMaxOptions : public FunctionOptions {\n   enum Mode null_handling;\n };\n \n+/// \\brief Control Mode kernel behavior\n+///\n+/// Returns top-n common values and counts.\n+/// By default, returns the most common value and count.\n+struct ARROW_EXPORT ModeOptions : public FunctionOptions {\n+  explicit ModeOptions(int n = 1) : n(n) {}\n\nReview comment:\n       Can we use `int64_t` everywhere for this?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -735,71 +735,63 @@ class TestPrimitiveModeKernel : public ::testing::Test {\n  public:\n   using ArrowType = T;\n   using Traits = TypeTraits<ArrowType>;\n-  using c_type = typename ArrowType::c_type;\n-  using ModeType = typename Traits::ScalarType;\n-  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n-\n-  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n-    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n-    const StructScalar& value = out.scalar_as<StructScalar>();\n+  using CType = typename ArrowType::c_type;\n+\n+  void AssertModesAre(const Datum& array, const int n,\n+                      const std::vector<CType>& expected_modes,\n+                      const std::vector<int64_t>& expected_counts) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array, ModeOptions{n}));\n\nReview comment:\n       Can you call `ValidateFull` on `Mode` results in these test functions?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -205,35 +243,59 @@ struct ModeImpl : public ScalarAggregator {\n     this->state.MergeFrom(std::move(other.state));\n   }\n \n-  void Finalize(KernelContext*, Datum* out) override {\n-    using ModeType = typename TypeTraits<ArrowType>::ScalarType;\n-    using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+  static std::shared_ptr<ArrayData> MakeArrayData(\n+      const std::shared_ptr<DataType>& data_type, int64_t n) {\n+    auto data = ArrayData::Make(data_type, n, 0);\n+    data->buffers.resize(2);\n+    data->buffers[0] = nullptr;\n+    return data;\n+  }\n \n-    std::vector<std::shared_ptr<Scalar>> values;\n-    auto mode_count = this->state.Finalize();\n-    auto mode = mode_count.first;\n-    auto count = mode_count.second;\n-    if (count == 0) {\n-      values = {std::make_shared<ModeType>(), std::make_shared<CountType>()};\n-    } else {\n-      values = {std::make_shared<ModeType>(mode), std::make_shared<CountType>(count)};\n+  void Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& mode_type = TypeTraits<ArrowType>::type_singleton();\n+    const auto& count_type = int64();\n+    const auto& out_type =\n+        struct_({field(kModeFieldName, mode_type), field(kCountFieldName, count_type)});\n+\n+    int n = this->options.n;\n+    if (n > state.DistinctValues()) {\n+      n = state.DistinctValues();\n+    }\n+    if (n <= 0) {\n+      *out = Datum(StructArray(out_type, 0, ArrayVector{}).data());\n+      return;\n     }\n-    out->value = std::make_shared<StructScalar>(std::move(values), this->out_type);\n+\n+    auto mode_data = this->MakeArrayData(mode_type, n);\n+    auto count_data = this->MakeArrayData(count_type, n);\n+    KERNEL_ASSIGN_OR_RAISE(mode_data->buffers[1], ctx, ctx->Allocate(n * sizeof(CType)));\n+    KERNEL_ASSIGN_OR_RAISE(count_data->buffers[1], ctx,\n+                           ctx->Allocate(n * sizeof(int64_t)));\n+\n+    CType* mode_buffer = mode_data->template GetMutableValues<CType>(1);\n+    int64_t* count_buffer = count_data->template GetMutableValues<int64_t>(1);\n+    this->state.Finalize(mode_buffer, count_buffer, n);\n+\n+    *out = Datum(\n+        StructArray(out_type, n, ArrayVector{MakeArray(mode_data), MakeArray(count_data)})\n\nReview comment:\n       You could perhaps construct the `ArrayData` directly instead of going through a temporary `StructArray`.\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -153,7 +153,7 @@ Notes:\n \n * \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n \n-* \\(2) Output is a ``{\"mode\": input type, \"count\": Int64}`` Struct\n+* \\(2) Output is an array of ``{\"mode\": input type, \"count\": Int64}`` Struct\n\nReview comment:\n       Explain a bit more what the array represents?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -28,6 +29,9 @@ namespace internal {\n \n namespace {\n \n+constexpr char kModeFieldName[] = \"modes\";\n+constexpr char kCountFieldName[] = \"counts\";\n\nReview comment:\n       Can you keep \"mode\", \"count\" as documented?\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -205,35 +243,59 @@ struct ModeImpl : public ScalarAggregator {\n     this->state.MergeFrom(std::move(other.state));\n   }\n \n-  void Finalize(KernelContext*, Datum* out) override {\n-    using ModeType = typename TypeTraits<ArrowType>::ScalarType;\n-    using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+  static std::shared_ptr<ArrayData> MakeArrayData(\n+      const std::shared_ptr<DataType>& data_type, int64_t n) {\n+    auto data = ArrayData::Make(data_type, n, 0);\n+    data->buffers.resize(2);\n+    data->buffers[0] = nullptr;\n+    return data;\n+  }\n \n-    std::vector<std::shared_ptr<Scalar>> values;\n-    auto mode_count = this->state.Finalize();\n-    auto mode = mode_count.first;\n-    auto count = mode_count.second;\n-    if (count == 0) {\n-      values = {std::make_shared<ModeType>(), std::make_shared<CountType>()};\n-    } else {\n-      values = {std::make_shared<ModeType>(mode), std::make_shared<CountType>(count)};\n+  void Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& mode_type = TypeTraits<ArrowType>::type_singleton();\n+    const auto& count_type = int64();\n+    const auto& out_type =\n+        struct_({field(kModeFieldName, mode_type), field(kCountFieldName, count_type)});\n+\n+    int n = this->options.n;\n+    if (n > state.DistinctValues()) {\n+      n = state.DistinctValues();\n+    }\n+    if (n <= 0) {\n+      *out = Datum(StructArray(out_type, 0, ArrayVector{}).data());\n\nReview comment:\n       I'm not convinced this is correct. The struct array should have two child arrays, even if empty.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-11T10:30:47.948+0000",
                    "updated": "2020-11-11T10:30:47.948+0000",
                    "started": "2020-11-11T10:30:47.948+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510173",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521776788\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -140,7 +140,7 @@ Aggregations\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n | min_max                  | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n-| mode                     | Unary      | Numeric            | Scalar Struct  (2)    |                                            |\n+| mode                     | Unary      | Numeric            | Scalar Struct  (2)    | :struct:`ModeOptions`                      |\n\nReview comment:\n       Mode now returns an array of struct. Should it be \"Struct Array\"? or simply \"Struct'.\r\n   Should I also change above line (min_max) to \"Struct\"? or leave it \"Scalar Struct\".\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T02:24:49.366+0000",
                    "updated": "2020-11-12T02:24:49.366+0000",
                    "started": "2020-11-12T02:24:49.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510565",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521865103\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -76,6 +76,18 @@ struct ARROW_EXPORT MinMaxOptions : public FunctionOptions {\n   enum Mode null_handling;\n };\n \n+/// \\brief Control Mode kernel behavior\n+///\n+/// Returns top-n common values and counts.\n+/// By default, returns the most common value and count.\n+struct ARROW_EXPORT ModeOptions : public FunctionOptions {\n+  explicit ModeOptions(int n = 1) : n(n) {}\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T06:24:52.657+0000",
                    "updated": "2020-11-12T06:24:52.657+0000",
                    "started": "2020-11-12T06:24:52.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510610",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521865178\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -28,6 +29,9 @@ namespace internal {\n \n namespace {\n \n+constexpr char kModeFieldName[] = \"modes\";\n+constexpr char kCountFieldName[] = \"counts\";\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T06:25:06.482+0000",
                    "updated": "2020-11-12T06:25:06.482+0000",
                    "started": "2020-11-12T06:25:06.482+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510611",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521865256\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -205,35 +243,59 @@ struct ModeImpl : public ScalarAggregator {\n     this->state.MergeFrom(std::move(other.state));\n   }\n \n-  void Finalize(KernelContext*, Datum* out) override {\n-    using ModeType = typename TypeTraits<ArrowType>::ScalarType;\n-    using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+  static std::shared_ptr<ArrayData> MakeArrayData(\n+      const std::shared_ptr<DataType>& data_type, int64_t n) {\n+    auto data = ArrayData::Make(data_type, n, 0);\n+    data->buffers.resize(2);\n+    data->buffers[0] = nullptr;\n+    return data;\n+  }\n \n-    std::vector<std::shared_ptr<Scalar>> values;\n-    auto mode_count = this->state.Finalize();\n-    auto mode = mode_count.first;\n-    auto count = mode_count.second;\n-    if (count == 0) {\n-      values = {std::make_shared<ModeType>(), std::make_shared<CountType>()};\n-    } else {\n-      values = {std::make_shared<ModeType>(mode), std::make_shared<CountType>(count)};\n+  void Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& mode_type = TypeTraits<ArrowType>::type_singleton();\n+    const auto& count_type = int64();\n+    const auto& out_type =\n+        struct_({field(kModeFieldName, mode_type), field(kCountFieldName, count_type)});\n+\n+    int n = this->options.n;\n+    if (n > state.DistinctValues()) {\n+      n = state.DistinctValues();\n+    }\n+    if (n <= 0) {\n+      *out = Datum(StructArray(out_type, 0, ArrayVector{}).data());\n\nReview comment:\n       Done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_mode.cc\n##########\n@@ -205,35 +243,59 @@ struct ModeImpl : public ScalarAggregator {\n     this->state.MergeFrom(std::move(other.state));\n   }\n \n-  void Finalize(KernelContext*, Datum* out) override {\n-    using ModeType = typename TypeTraits<ArrowType>::ScalarType;\n-    using CountType = typename TypeTraits<Int64Type>::ScalarType;\n+  static std::shared_ptr<ArrayData> MakeArrayData(\n+      const std::shared_ptr<DataType>& data_type, int64_t n) {\n+    auto data = ArrayData::Make(data_type, n, 0);\n+    data->buffers.resize(2);\n+    data->buffers[0] = nullptr;\n+    return data;\n+  }\n \n-    std::vector<std::shared_ptr<Scalar>> values;\n-    auto mode_count = this->state.Finalize();\n-    auto mode = mode_count.first;\n-    auto count = mode_count.second;\n-    if (count == 0) {\n-      values = {std::make_shared<ModeType>(), std::make_shared<CountType>()};\n-    } else {\n-      values = {std::make_shared<ModeType>(mode), std::make_shared<CountType>(count)};\n+  void Finalize(KernelContext* ctx, Datum* out) override {\n+    const auto& mode_type = TypeTraits<ArrowType>::type_singleton();\n+    const auto& count_type = int64();\n+    const auto& out_type =\n+        struct_({field(kModeFieldName, mode_type), field(kCountFieldName, count_type)});\n+\n+    int n = this->options.n;\n+    if (n > state.DistinctValues()) {\n+      n = state.DistinctValues();\n+    }\n+    if (n <= 0) {\n+      *out = Datum(StructArray(out_type, 0, ArrayVector{}).data());\n+      return;\n     }\n-    out->value = std::make_shared<StructScalar>(std::move(values), this->out_type);\n+\n+    auto mode_data = this->MakeArrayData(mode_type, n);\n+    auto count_data = this->MakeArrayData(count_type, n);\n+    KERNEL_ASSIGN_OR_RAISE(mode_data->buffers[1], ctx, ctx->Allocate(n * sizeof(CType)));\n+    KERNEL_ASSIGN_OR_RAISE(count_data->buffers[1], ctx,\n+                           ctx->Allocate(n * sizeof(int64_t)));\n+\n+    CType* mode_buffer = mode_data->template GetMutableValues<CType>(1);\n+    int64_t* count_buffer = count_data->template GetMutableValues<int64_t>(1);\n+    this->state.Finalize(mode_buffer, count_buffer, n);\n+\n+    *out = Datum(\n+        StructArray(out_type, n, ArrayVector{MakeArray(mode_data), MakeArray(count_data)})\n\nReview comment:\n       Done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -735,71 +735,63 @@ class TestPrimitiveModeKernel : public ::testing::Test {\n  public:\n   using ArrowType = T;\n   using Traits = TypeTraits<ArrowType>;\n-  using c_type = typename ArrowType::c_type;\n-  using ModeType = typename Traits::ScalarType;\n-  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n-\n-  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n-    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n-    const StructScalar& value = out.scalar_as<StructScalar>();\n+  using CType = typename ArrowType::c_type;\n+\n+  void AssertModesAre(const Datum& array, const int n,\n+                      const std::vector<CType>& expected_modes,\n+                      const std::vector<int64_t>& expected_counts) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array, ModeOptions{n}));\n\nReview comment:\n       Done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -735,71 +735,63 @@ class TestPrimitiveModeKernel : public ::testing::Test {\n  public:\n   using ArrowType = T;\n   using Traits = TypeTraits<ArrowType>;\n-  using c_type = typename ArrowType::c_type;\n-  using ModeType = typename Traits::ScalarType;\n-  using CountType = typename TypeTraits<Int64Type>::ScalarType;\n-\n-  void AssertModeIs(const Datum& array, c_type expected_mode, int64_t expected_count) {\n-    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n-    const StructScalar& value = out.scalar_as<StructScalar>();\n+  using CType = typename ArrowType::c_type;\n+\n+  void AssertModesAre(const Datum& array, const int n,\n+                      const std::vector<CType>& expected_modes,\n+                      const std::vector<int64_t>& expected_counts) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array, ModeOptions{n}));\n+    const StructArray out_array(out.array());\n+    ASSERT_EQ(out_array.length(), expected_modes.size());\n+    ASSERT_EQ(out_array.num_fields(), 2);\n+\n+    const CType* out_modes = out_array.field(0)->data()->GetValues<CType>(1);\n+    const int64_t* out_counts = out_array.field(1)->data()->GetValues<int64_t>(1);\n+    for (int i = 0; i < out_array.length(); ++i) {\n+      // equal or nan equal\n+      ASSERT_TRUE(\n+          (expected_modes[i] == out_modes[i]) ||\n+          (expected_modes[i] != expected_modes[i] && out_modes[i] != out_modes[i]));\n+      ASSERT_EQ(expected_counts[i], out_counts[i]);\n+    }\n+  }\n \n-    const auto& out_mode = checked_cast<const ModeType&>(*value.value[0]);\n-    ASSERT_EQ(expected_mode, out_mode.value);\n+  void AssertModesAre(const std::string& json, const int n,\n+                      const std::vector<CType>& expected_modes,\n+                      const std::vector<int64_t>& expected_counts) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertModesAre(array, n, expected_modes, expected_counts);\n+  }\n \n-    const auto& out_count = checked_cast<const CountType&>(*value.value[1]);\n-    ASSERT_EQ(expected_count, out_count.value);\n+  void AssertModeIs(const Datum& array, CType expected_mode, int64_t expected_count) {\n+    AssertModesAre(array, 1, {expected_mode}, {expected_count});\n   }\n \n-  void AssertModeIs(const std::string& json, c_type expected_mode,\n+  void AssertModeIs(const std::string& json, CType expected_mode,\n                     int64_t expected_count) {\n     auto array = ArrayFromJSON(type_singleton(), json);\n     AssertModeIs(array, expected_mode, expected_count);\n   }\n \n-  void AssertModeIs(const std::vector<std::string>& json, c_type expected_mode,\n+  void AssertModeIs(const std::vector<std::string>& json, CType expected_mode,\n                     int64_t expected_count) {\n     auto chunked = ChunkedArrayFromJSON(type_singleton(), json);\n     AssertModeIs(chunked, expected_mode, expected_count);\n   }\n \n-  void AssertModeIsNull(const Datum& array) {\n-    ASSERT_OK_AND_ASSIGN(Datum out, Mode(array));\n-    const StructScalar& value = out.scalar_as<StructScalar>();\n-\n-    for (const auto& val : value.value) {\n-      ASSERT_FALSE(val->is_valid);\n-    }\n+  void AssertModeIsNull(const Datum& array, int n) {\n\nReview comment:\n       Done\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -153,7 +153,7 @@ Notes:\n \n * \\(1) Output is a ``{\"min\": input type, \"max\": input type}`` Struct\n \n-* \\(2) Output is a ``{\"mode\": input type, \"count\": Int64}`` Struct\n+* \\(2) Output is an array of ``{\"mode\": input type, \"count\": Int64}`` Struct\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T06:25:50.425+0000",
                    "updated": "2020-11-12T06:25:50.425+0000",
                    "started": "2020-11-12T06:25:50.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510612",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#issuecomment-725891740\n\n\n   Python unit test failed. I'm updating mode kernel python binding per cpp changes.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T07:22:51.014+0000",
                    "updated": "2020-11-12T07:22:51.014+0000",
                    "started": "2020-11-12T07:22:51.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510641",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521967685\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -140,7 +140,7 @@ Aggregations\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n | min_max                  | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n-| mode                     | Unary      | Numeric            | Scalar Struct  (2)    |                                            |\n+| mode                     | Unary      | Numeric            | Scalar Struct  (2)    | :struct:`ModeOptions`                      |\n\nReview comment:\n       `min_max` returns a scalar, AFAIK.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T09:40:12.563+0000",
                    "updated": "2020-11-12T09:40:12.563+0000",
                    "started": "2020-11-12T09:40:12.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510687",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521968240\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -140,7 +140,7 @@ Aggregations\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n | min_max                  | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n-| mode                     | Unary      | Numeric            | Scalar Struct  (2)    |                                            |\n+| mode                     | Unary      | Numeric            | Scalar Struct  (2)    | :struct:`ModeOptions`                      |\n\nReview comment:\n       And `mode` should be changed to \"Struct\".\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T09:40:59.457+0000",
                    "updated": "2020-11-12T09:40:59.457+0000",
                    "started": "2020-11-12T09:40:59.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510689",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637#discussion_r521973124\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -140,7 +140,7 @@ Aggregations\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n | min_max                  | Unary      | Numeric            | Scalar Struct  (1)    | :struct:`MinMaxOptions`                    |\n +--------------------------+------------+--------------------+-----------------------+--------------------------------------------+\n-| mode                     | Unary      | Numeric            | Scalar Struct  (2)    |                                            |\n+| mode                     | Unary      | Numeric            | Scalar Struct  (2)    | :struct:`ModeOptions`                      |\n\nReview comment:\n       Thanks. Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T09:48:39.952+0000",
                    "updated": "2020-11-12T09:48:39.952+0000",
                    "started": "2020-11-12T09:48:39.951+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510693",
                    "issueId": "13327795"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/worklog/510754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8637:\nURL: https://github.com/apache/arrow/pull/8637\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T11:47:39.200+0000",
                    "updated": "2020-11-12T11:47:39.200+0000",
                    "started": "2020-11-12T11:47:39.200+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510754",
                    "issueId": "13327795"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7402abbb[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7005fb24[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@764a9406[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29499d30[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1cc1d86e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2ed6d46c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c1e9f14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@695b23ba[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bcb9457[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@63265af6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b389fb9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2b4e2997[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 12 11:47:26 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-12T11:47:26.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10021/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-16T06:51:45.000+0000",
        "updated": "2020-11-12T11:47:40.000+0000",
        "timeoriginalestimate": null,
        "description": "Mode kernel only returns the most frequently used value. From [history talk|https://issues.apache.org/jira/browse/ARROW-9638?focusedCommentId=17173464&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17173464], it may be useful to find the nth frequently used value.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Support finding nth frequently used value in mode kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327795/comment/17230558",
                    "id": "17230558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8637\n[https://github.com/apache/arrow/pull/8637]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-11-12T11:47:26.357+0000",
                    "updated": "2020-11-12T11:47:26.357+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0in48:",
        "customfield_12314139": null
    }
}