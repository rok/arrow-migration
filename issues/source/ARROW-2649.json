{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13162944",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944",
    "key": "ARROW-2649",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2649/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/107708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093\n \n \n   Also a GenerateBitsUnrolled() for higher performance where warranted.\r\n   \r\n   Benchmarks:\r\n   - GenerateBits is 1.8x faster than BitmapWriter\r\n   - GenerateBitsUnrolled is 2.9x faster than BitmapWriter\r\n   - BooleanBuilder is now 3x faster than with BitmapWriter\r\n     (and around 9x faster than it was with SetBitTo calls)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T15:40:36.820+0000",
                    "updated": "2018-05-31T15:40:36.820+0000",
                    "started": "2018-05-31T15:40:36.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107708",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/107757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093#issuecomment-393603069\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=h1) Report\n   > Merging [#2093](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/d19089e5a1179c654cb30df62433698c93e3cd60?src=pr&el=desc) will **increase** coverage by `0.01%`.\n   > The diff coverage is `97.95%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2093/graphs/tree.svg?width=650&height=150&token=LpTCFbqVT1&src=pr)](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2093      +/-   ##\n   ==========================================\n   + Coverage   86.35%   86.36%   +0.01%     \n   ==========================================\n     Files         230      230              \n     Lines       40392    40452      +60     \n   ==========================================\n   + Hits        34880    34937      +57     \n   - Misses       5512     5515       +3\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/compute/kernels/cast.cc](https://codecov.io/gh/apache/arrow/pull/2093/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jb21wdXRlL2tlcm5lbHMvY2FzdC5jYw==) | `89.35% <100%> (-0.14%)` | :arrow_down: |\n   | [cpp/src/arrow/builder.cc](https://codecov.io/gh/apache/arrow/pull/2093/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9idWlsZGVyLmNj) | `81.79% <100%> (-0.43%)` | :arrow_down: |\n   | [cpp/src/arrow/util/bit-util.h](https://codecov.io/gh/apache/arrow/pull/2093/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLmg=) | `98.5% <100%> (+0.49%)` | :arrow_up: |\n   | [cpp/src/arrow/util/bit-util-test.cc](https://codecov.io/gh/apache/arrow/pull/2093/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL2JpdC11dGlsLXRlc3QuY2M=) | `99.45% <94.28%> (-0.55%)` | :arrow_down: |\n   | [cpp/src/arrow/util/thread-pool-test.cc](https://codecov.io/gh/apache/arrow/pull/2093/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy91dGlsL3RocmVhZC1wb29sLXRlc3QuY2M=) | `98.91% <0%> (-0.55%)` | :arrow_down: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=footer). Last update [d19089e...0ef0d12](https://codecov.io/gh/apache/arrow/pull/2093?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T17:04:52.006+0000",
                    "updated": "2018-05-31T17:04:52.006+0000",
                    "started": "2018-05-31T17:04:52.005+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107757",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/107866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093#discussion_r192218918\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -775,16 +775,9 @@ Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n                                     const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i] != 0) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++] != 0; });\n \n Review comment:\n   I have often wondered if lambda functions have much overhead vs. inlined functions, is there a good reference on how the various compilers behave? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T20:13:28.535+0000",
                    "updated": "2018-05-31T20:13:28.535+0000",
                    "started": "2018-05-31T20:13:28.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107866",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/107867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093#discussion_r192222549\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -561,7 +564,83 @@ class FirstTimeBitmapWriter {\n   int64_t byte_offset_;\n };\n \n-// TODO: add a std::generate-like function for writing bitmaps?\n+// A std::generate() like function to write sequential bits into a bitmap area.\n+// Bits preceding the bitmap area are preserved, bits following the bitmap\n+// area may be clobbered.\n+\n+template <class Generator>\n+void GenerateBits(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+  if (length == 0) {\n+    return;\n+  }\n+  uint8_t* cur = bitmap + start_offset / 8;\n+  uint8_t bit_mask = BitUtil::kBitmask[start_offset % 8];\n+  uint8_t current_byte = *cur & BitUtil::kPrecedingBitmask[start_offset % 8];\n+\n+  for (int64_t index = 0; index < length; ++index) {\n+    const bool bit = g();\n+    current_byte = bit ? (current_byte | bit_mask) : current_byte;\n+    bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+    if (bit_mask == 0) {\n+      bit_mask = 1;\n+      *cur++ = current_byte;\n+      current_byte = 0;\n+    }\n+  }\n+  if (bit_mask != 1) {\n+    *cur++ = current_byte;\n+  }\n+}\n+\n+// Like GenerateBits(), but unrolls its main loop for higher performance.\n+\n+template <class Generator>\n+void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n+                          Generator&& g) {\n+  if (length == 0) {\n+    return;\n+  }\n+  uint8_t current_byte;\n+  uint8_t* cur = bitmap + start_offset / 8;\n+  const uint64_t start_bit_offset = start_offset % 8;\n+  uint8_t bit_mask = BitUtil::kBitmask[start_bit_offset];\n+  int64_t remaining = length;\n+\n+  if (bit_mask != 0x01) {\n+    current_byte = *cur & BitUtil::kPrecedingBitmask[start_bit_offset];\n+    while (bit_mask != 0 && remaining > 0) {\n+      current_byte = g() ? (current_byte | bit_mask) : current_byte;\n+      bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+      --remaining;\n+    }\n+    *cur++ = current_byte;\n+  }\n+\n+  int64_t remaining_bytes = remaining / 8;\n+  while (remaining_bytes-- > 0) {\n+    current_byte = 0;\n+    current_byte = g() ? current_byte | 0x01 : current_byte;\n \n Review comment:\n   Out of curiousity, would `current_byte = current_byte | (0x01 * static_cast<uint8_t>(g()))` have any better performance (to avoid branching)? I guess it's possible the compiler is doing some kind of optimization anyway\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T20:13:28.559+0000",
                    "updated": "2018-05-31T20:13:28.559+0000",
                    "started": "2018-05-31T20:13:28.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107867",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/107894",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093#discussion_r192245656\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -775,16 +775,9 @@ Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n                                     const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i] != 0) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++] != 0; });\n \n Review comment:\n   A bit of Googling suggests that in instances like this (where the type of the lambda is a template argument), the lambda will be inlined https://www.quora.com/Are-C++-lambda-functions-always-inlined). If you passed a lambda into a function accepting an `std::function` of some kind, it wouldn't be necessarily\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-05-31T21:38:26.585+0000",
                    "updated": "2018-05-31T21:38:26.585+0000",
                    "started": "2018-05-31T21:38:26.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "107894",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/108287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093#discussion_r192559509\n \n \n\n ##########\n File path: cpp/src/arrow/util/bit-util.h\n ##########\n @@ -561,7 +564,83 @@ class FirstTimeBitmapWriter {\n   int64_t byte_offset_;\n };\n \n-// TODO: add a std::generate-like function for writing bitmaps?\n+// A std::generate() like function to write sequential bits into a bitmap area.\n+// Bits preceding the bitmap area are preserved, bits following the bitmap\n+// area may be clobbered.\n+\n+template <class Generator>\n+void GenerateBits(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+  if (length == 0) {\n+    return;\n+  }\n+  uint8_t* cur = bitmap + start_offset / 8;\n+  uint8_t bit_mask = BitUtil::kBitmask[start_offset % 8];\n+  uint8_t current_byte = *cur & BitUtil::kPrecedingBitmask[start_offset % 8];\n+\n+  for (int64_t index = 0; index < length; ++index) {\n+    const bool bit = g();\n+    current_byte = bit ? (current_byte | bit_mask) : current_byte;\n+    bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+    if (bit_mask == 0) {\n+      bit_mask = 1;\n+      *cur++ = current_byte;\n+      current_byte = 0;\n+    }\n+  }\n+  if (bit_mask != 1) {\n+    *cur++ = current_byte;\n+  }\n+}\n+\n+// Like GenerateBits(), but unrolls its main loop for higher performance.\n+\n+template <class Generator>\n+void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n+                          Generator&& g) {\n+  if (length == 0) {\n+    return;\n+  }\n+  uint8_t current_byte;\n+  uint8_t* cur = bitmap + start_offset / 8;\n+  const uint64_t start_bit_offset = start_offset % 8;\n+  uint8_t bit_mask = BitUtil::kBitmask[start_bit_offset];\n+  int64_t remaining = length;\n+\n+  if (bit_mask != 0x01) {\n+    current_byte = *cur & BitUtil::kPrecedingBitmask[start_bit_offset];\n+    while (bit_mask != 0 && remaining > 0) {\n+      current_byte = g() ? (current_byte | bit_mask) : current_byte;\n+      bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+      --remaining;\n+    }\n+    *cur++ = current_byte;\n+  }\n+\n+  int64_t remaining_bytes = remaining / 8;\n+  while (remaining_bytes-- > 0) {\n+    current_byte = 0;\n+    current_byte = g() ? current_byte | 0x01 : current_byte;\n \n Review comment:\n   I've tried it quickly and, while the BooleanBuilder benchmark isn't affected, the bit-util microbenchmark became 2x faster. I'm wondering whether in this trivial case, perhaps the whole thing is SIMDed by the compiler. I should take a closer look.\r\n   \r\n   (this is with gcc 4.9 on an AMD Ryzen)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-02T13:19:08.830+0000",
                    "updated": "2018-06-02T13:19:08.830+0000",
                    "started": "2018-06-02T13:19:08.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "108287",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/108288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2093: [WIP] ARROW-2649: [C++] Add GenerateBits() function\nURL: https://github.com/apache/arrow/pull/2093#discussion_r192559523\n \n \n\n ##########\n File path: cpp/src/arrow/builder.cc\n ##########\n @@ -775,16 +775,9 @@ Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n                                     const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i] != 0) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++] != 0; });\n \n Review comment:\n   Yes, apparently the recommended idiom is to let the callable argument be a template parameter so as to select a favorable specialization.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-02T13:19:54.307+0000",
                    "updated": "2018-06-02T13:19:54.307+0000",
                    "started": "2018-06-02T13:19:54.307+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "108288",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/110243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2093: ARROW-2649: [C++] Add GenerateBits() function to improve bitmap writing performance\nURL: https://github.com/apache/arrow/pull/2093#issuecomment-395869628\n \n \n   +1, merging this. We can do further performance explorations in follow up patches\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-08T19:47:19.244+0000",
                    "updated": "2018-06-08T19:47:19.244+0000",
                    "started": "2018-06-08T19:47:19.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "110243",
                    "issueId": "13162944"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/worklog/110244",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2093: ARROW-2649: [C++] Add GenerateBits() function to improve bitmap writing performance\nURL: https://github.com/apache/arrow/pull/2093\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 65018dee32..9a8fc7d9e3 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -210,7 +210,7 @@ void ArrayBuilder::UnsafeSetNotNull(int64_t length) {\n   memset(null_bitmap_data_ + ((length_ + pad_to_byte) / 8), 0xFF,\n          static_cast<size_t>(fast_length));\n \n-  // Trailing bytes\n+  // Trailing bits\n   for (int64_t i = length_ + pad_to_byte + (fast_length * 8); i < new_length; ++i) {\n     BitUtil::SetBit(null_bitmap_data_, i);\n   }\n@@ -775,16 +775,9 @@ Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n                                     const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i] != 0) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++] != 0; });\n \n   // this updates length_\n   ArrayBuilder::UnsafeAppendToBitmap(valid_bytes, length);\n@@ -801,16 +794,9 @@ Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n   RETURN_NOT_OK(Reserve(length));\n   DCHECK_EQ(length, static_cast<int64_t>(is_valid.size()));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i]) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++]; });\n \n   // this updates length_\n   ArrayBuilder::UnsafeAppendToBitmap(is_valid);\n@@ -846,16 +832,9 @@ Status BooleanBuilder::AppendValues(const std::vector<bool>& values,\n   RETURN_NOT_OK(Reserve(length));\n   DCHECK_EQ(length, static_cast<int64_t>(is_valid.size()));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i]) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++]; });\n \n   // this updates length_\n   ArrayBuilder::UnsafeAppendToBitmap(is_valid);\n@@ -871,16 +850,9 @@ Status BooleanBuilder::AppendValues(const std::vector<bool>& values) {\n   const int64_t length = static_cast<int64_t>(values.size());\n   RETURN_NOT_OK(Reserve(length));\n \n-  internal::FirstTimeBitmapWriter bit_writer(raw_data_, length_, length);\n-  for (int64_t i = 0; i < length; ++i) {\n-    if (values[i]) {\n-      bit_writer.Set();\n-    } else {\n-      bit_writer.Clear();\n-    }\n-    bit_writer.Next();\n-  }\n-  bit_writer.Finish();\n+  int64_t i = 0;\n+  internal::GenerateBitsUnrolled(raw_data_, length_, length,\n+                                 [values, &i]() -> bool { return values[i++]; });\n \n   // this updates length_\n   ArrayBuilder::UnsafeSetNotNull(length);\ndiff --git a/cpp/src/arrow/compute/kernels/cast.cc b/cpp/src/arrow/compute/kernels/cast.cc\nindex 7987a1c95d..39925d7835 100644\n--- a/cpp/src/arrow/compute/kernels/cast.cc\n+++ b/cpp/src/arrow/compute/kernels/cast.cc\n@@ -200,18 +200,9 @@ struct CastFunctor<O, I,\n   void operator()(FunctionContext* ctx, const CastOptions& options,\n                   const ArrayData& input, ArrayData* output) {\n     auto in_data = GetValues<typename I::c_type>(input, 1);\n-    internal::FirstTimeBitmapWriter writer(output->buffers[1]->mutable_data(),\n-                                           output->offset, input.length);\n-\n-    for (int64_t i = 0; i < input.length; ++i) {\n-      if (*in_data++ != 0) {\n-        writer.Set();\n-      } else {\n-        writer.Clear();\n-      }\n-      writer.Next();\n-    }\n-    writer.Finish();\n+    const auto generate = [&in_data]() -> bool { return *in_data++ != 0; };\n+    internal::GenerateBitsUnrolled(output->buffers[1]->mutable_data(), output->offset,\n+                                   input.length, generate);\n   }\n };\n \ndiff --git a/cpp/src/arrow/util/bit-util-benchmark.cc b/cpp/src/arrow/util/bit-util-benchmark.cc\nindex 43f461cc8c..47f4bfe82f 100644\n--- a/cpp/src/arrow/util/bit-util-benchmark.cc\n+++ b/cpp/src/arrow/util/bit-util-benchmark.cc\n@@ -126,26 +126,48 @@ static void BenchmarkBitmapWriter(benchmark::State& state, int64_t nbytes) {\n \n   const int64_t num_bits = nbytes * 8;\n   uint8_t* bitmap = buffer->mutable_data();\n+  const bool pattern[] = {false, false, false, true, true, true};\n \n   while (state.KeepRunning()) {\n-    {\n-      BitmapWriterType writer(bitmap, 0, num_bits);\n-      for (int64_t i = 0; i < num_bits; i++) {\n+    int64_t pattern_index = 0;\n+    BitmapWriterType writer(bitmap, 0, num_bits);\n+    for (int64_t i = 0; i < num_bits; i++) {\n+      if (pattern[pattern_index++]) {\n         writer.Set();\n-        writer.Next();\n-      }\n-      writer.Finish();\n-      benchmark::ClobberMemory();\n-    }\n-    {\n-      BitmapWriterType writer(bitmap, 0, num_bits);\n-      for (int64_t i = 0; i < num_bits; i++) {\n+      } else {\n         writer.Clear();\n-        writer.Next();\n       }\n-      writer.Finish();\n-      benchmark::ClobberMemory();\n+      if (pattern_index == sizeof(pattern) / sizeof(bool)) {\n+        pattern_index = 0;\n+      }\n+      writer.Next();\n     }\n+    writer.Finish();\n+    benchmark::ClobberMemory();\n+  }\n+  state.SetBytesProcessed(int64_t(state.iterations()) * nbytes);\n+}\n+\n+template <typename GenerateBitsFunctorType>\n+static void BenchmarkGenerateBits(benchmark::State& state, int64_t nbytes) {\n+  std::shared_ptr<Buffer> buffer = CreateRandomBuffer(nbytes);\n+\n+  const int64_t num_bits = nbytes * 8;\n+  uint8_t* bitmap = buffer->mutable_data();\n+  // pattern should be the same as in BenchmarkBitmapWriter\n+  const bool pattern[] = {false, false, false, true, true, true};\n+\n+  while (state.KeepRunning()) {\n+    int64_t pattern_index = 0;\n+    const auto generate = [&]() -> bool {\n+      bool b = pattern[pattern_index++];\n+      if (pattern_index == sizeof(pattern) / sizeof(bool)) {\n+        pattern_index = 0;\n+      }\n+      return b;\n+    };\n+    GenerateBitsFunctorType()(bitmap, 0, num_bits, generate);\n+    benchmark::ClobberMemory();\n   }\n   state.SetBytesProcessed(2 * int64_t(state.iterations()) * nbytes);\n }\n@@ -170,6 +192,28 @@ static void BM_FirstTimeBitmapWriter(benchmark::State& state) {\n   BenchmarkBitmapWriter<internal::FirstTimeBitmapWriter>(state, state.range(0));\n }\n \n+struct GenerateBitsFunctor {\n+  template <class Generator>\n+  void operator()(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+    return internal::GenerateBits(bitmap, start_offset, length, g);\n+  }\n+};\n+\n+struct GenerateBitsUnrolledFunctor {\n+  template <class Generator>\n+  void operator()(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+    return internal::GenerateBitsUnrolled(bitmap, start_offset, length, g);\n+  }\n+};\n+\n+static void BM_GenerateBits(benchmark::State& state) {\n+  BenchmarkGenerateBits<GenerateBitsFunctor>(state, state.range(0));\n+}\n+\n+static void BM_GenerateBitsUnrolled(benchmark::State& state) {\n+  BenchmarkGenerateBits<GenerateBitsUnrolledFunctor>(state, state.range(0));\n+}\n+\n static void BM_CopyBitmap(benchmark::State& state) {  // NOLINT non-const reference\n   const int kBufferSize = state.range(0);\n   std::shared_ptr<Buffer> buffer = CreateRandomBuffer(kBufferSize);\n@@ -201,13 +245,31 @@ BENCHMARK(BM_BitmapReader)->Args({100000})->MinTime(1.0)->Unit(benchmark::kMicro\n \n BENCHMARK(BM_NaiveBitmapWriter)\n     ->Args({100000})\n+    ->Repetitions(2)\n     ->MinTime(1.0)\n     ->Unit(benchmark::kMicrosecond);\n \n-BENCHMARK(BM_BitmapWriter)->Args({100000})->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+BENCHMARK(BM_BitmapWriter)\n+    ->Args({100000})\n+    ->Repetitions(2)\n+    ->MinTime(1.0)\n+    ->Unit(benchmark::kMicrosecond);\n \n BENCHMARK(BM_FirstTimeBitmapWriter)\n     ->Args({100000})\n+    ->Repetitions(2)\n+    ->MinTime(1.0)\n+    ->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_GenerateBits)\n+    ->Args({100000})\n+    ->Repetitions(2)\n+    ->MinTime(1.0)\n+    ->Unit(benchmark::kMicrosecond);\n+\n+BENCHMARK(BM_GenerateBitsUnrolled)\n+    ->Args({100000})\n+    ->Repetitions(2)\n     ->MinTime(1.0)\n     ->Unit(benchmark::kMicrosecond);\n \ndiff --git a/cpp/src/arrow/util/bit-util-test.cc b/cpp/src/arrow/util/bit-util-test.cc\nindex 5e0b6963cb..ae8923d668 100644\n--- a/cpp/src/arrow/util/bit-util-test.cc\n+++ b/cpp/src/arrow/util/bit-util-test.cc\n@@ -282,6 +282,80 @@ TEST(FirstTimeBitmapWriter, NormalOperation) {\n   }\n }\n \n+// Tests for GenerateBits and GenerateBitsUnrolled\n+\n+struct GenerateBitsFunctor {\n+  template <class Generator>\n+  void operator()(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+    return internal::GenerateBits(bitmap, start_offset, length, g);\n+  }\n+};\n+\n+struct GenerateBitsUnrolledFunctor {\n+  template <class Generator>\n+  void operator()(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+    return internal::GenerateBitsUnrolled(bitmap, start_offset, length, g);\n+  }\n+};\n+\n+template <typename T>\n+class TestGenerateBits : public ::testing::Test {};\n+\n+typedef ::testing::Types<GenerateBitsFunctor, GenerateBitsUnrolledFunctor>\n+    GenerateBitsTypes;\n+TYPED_TEST_CASE(TestGenerateBits, GenerateBitsTypes);\n+\n+TYPED_TEST(TestGenerateBits, NormalOperation) {\n+  const int kSourceSize = 256;\n+  uint8_t source[kSourceSize];\n+  test::random_bytes(kSourceSize, 0, source);\n+\n+  const int64_t start_offsets[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 21, 31, 32};\n+  const int64_t lengths[] = {0,  1,  2,  3,  4,   5,   6,   7,   8,   9,   12,  16,\n+                             17, 21, 31, 32, 100, 201, 202, 203, 204, 205, 206, 207};\n+  const uint8_t fill_bytes[] = {0x00, 0xff};\n+\n+  for (const int64_t start_offset : start_offsets) {\n+    for (const int64_t length : lengths) {\n+      for (const uint8_t fill_byte : fill_bytes) {\n+        uint8_t bitmap[kSourceSize];\n+        memset(bitmap, fill_byte, kSourceSize);\n+        // First call GenerateBits\n+        {\n+          int64_t ncalled = 0;\n+          internal::BitmapReader reader(source, 0, length);\n+          TypeParam()(bitmap, start_offset, length, [&]() -> bool {\n+            bool b = reader.IsSet();\n+            reader.Next();\n+            ++ncalled;\n+            return b;\n+          });\n+          ASSERT_EQ(ncalled, length);\n+        }\n+        // Then check generated contents\n+        {\n+          internal::BitmapReader source_reader(source, 0, length);\n+          internal::BitmapReader result_reader(bitmap, start_offset, length);\n+          for (int64_t i = 0; i < length; ++i) {\n+            ASSERT_EQ(source_reader.IsSet(), result_reader.IsSet())\n+                << \"mismatch at bit #\" << i;\n+            source_reader.Next();\n+            result_reader.Next();\n+          }\n+        }\n+        // Check bits preceding and following generated contents weren't clobbered\n+        {\n+          internal::BitmapReader reader_before(bitmap, 0, start_offset);\n+          for (int64_t i = 0; i < start_offset; ++i) {\n+            ASSERT_EQ(reader_before.IsSet(), fill_byte == 0xff)\n+                << \"mismatch at preceding bit #\" << start_offset - i;\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n TEST(BitmapAnd, Aligned) {\n   std::shared_ptr<Buffer> left, right, out;\n   int64_t length;\ndiff --git a/cpp/src/arrow/util/bit-util.h b/cpp/src/arrow/util/bit-util.h\nindex c012f7c412..6c06d9c030 100644\n--- a/cpp/src/arrow/util/bit-util.h\n+++ b/cpp/src/arrow/util/bit-util.h\n@@ -99,6 +99,9 @@ static constexpr uint8_t kFlippedBitmask[] = {254, 253, 251, 247, 239, 223, 191,\n // Bitmask selecting the (k - 1) preceding bits in a byte\n static constexpr uint8_t kPrecedingBitmask[] = {0, 1, 3, 7, 15, 31, 63, 127};\n \n+// the bitwise complement version of kPrecedingBitmask\n+static constexpr uint8_t kTrailingBitmask[] = {255, 254, 252, 248, 240, 224, 192, 128};\n+\n static inline int64_t CeilByte(int64_t size) { return (size + 7) & ~7; }\n \n static inline int64_t BytesForBits(int64_t size) { return CeilByte(size) / 8; }\n@@ -465,7 +468,7 @@ class BitmapWriter {\n   BitmapWriter(uint8_t* bitmap, int64_t start_offset, int64_t length)\n       : bitmap_(bitmap), position_(0), length_(length) {\n     byte_offset_ = start_offset / 8;\n-    bit_mask_ = static_cast<uint8_t>(1 << (start_offset % 8));\n+    bit_mask_ = BitUtil::kBitmask[start_offset % 8];\n     if (length > 0) {\n       current_byte_ = bitmap[byte_offset_];\n     } else {\n@@ -519,7 +522,7 @@ class FirstTimeBitmapWriter {\n       : bitmap_(bitmap), position_(0), length_(length) {\n     current_byte_ = 0;\n     byte_offset_ = start_offset / 8;\n-    bit_mask_ = static_cast<uint8_t>(1 << (start_offset % 8));\n+    bit_mask_ = BitUtil::kBitmask[start_offset % 8];\n     if (length > 0) {\n       current_byte_ = bitmap[byte_offset_] & BitUtil::kPrecedingBitmask[start_offset % 8];\n     } else {\n@@ -561,7 +564,83 @@ class FirstTimeBitmapWriter {\n   int64_t byte_offset_;\n };\n \n-// TODO: add a std::generate-like function for writing bitmaps?\n+// A std::generate() like function to write sequential bits into a bitmap area.\n+// Bits preceding the bitmap area are preserved, bits following the bitmap\n+// area may be clobbered.\n+\n+template <class Generator>\n+void GenerateBits(uint8_t* bitmap, int64_t start_offset, int64_t length, Generator&& g) {\n+  if (length == 0) {\n+    return;\n+  }\n+  uint8_t* cur = bitmap + start_offset / 8;\n+  uint8_t bit_mask = BitUtil::kBitmask[start_offset % 8];\n+  uint8_t current_byte = *cur & BitUtil::kPrecedingBitmask[start_offset % 8];\n+\n+  for (int64_t index = 0; index < length; ++index) {\n+    const bool bit = g();\n+    current_byte = bit ? (current_byte | bit_mask) : current_byte;\n+    bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+    if (bit_mask == 0) {\n+      bit_mask = 1;\n+      *cur++ = current_byte;\n+      current_byte = 0;\n+    }\n+  }\n+  if (bit_mask != 1) {\n+    *cur++ = current_byte;\n+  }\n+}\n+\n+// Like GenerateBits(), but unrolls its main loop for higher performance.\n+\n+template <class Generator>\n+void GenerateBitsUnrolled(uint8_t* bitmap, int64_t start_offset, int64_t length,\n+                          Generator&& g) {\n+  if (length == 0) {\n+    return;\n+  }\n+  uint8_t current_byte;\n+  uint8_t* cur = bitmap + start_offset / 8;\n+  const uint64_t start_bit_offset = start_offset % 8;\n+  uint8_t bit_mask = BitUtil::kBitmask[start_bit_offset];\n+  int64_t remaining = length;\n+\n+  if (bit_mask != 0x01) {\n+    current_byte = *cur & BitUtil::kPrecedingBitmask[start_bit_offset];\n+    while (bit_mask != 0 && remaining > 0) {\n+      current_byte = g() ? (current_byte | bit_mask) : current_byte;\n+      bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+      --remaining;\n+    }\n+    *cur++ = current_byte;\n+  }\n+\n+  int64_t remaining_bytes = remaining / 8;\n+  while (remaining_bytes-- > 0) {\n+    current_byte = 0;\n+    current_byte = g() ? current_byte | 0x01 : current_byte;\n+    current_byte = g() ? current_byte | 0x02 : current_byte;\n+    current_byte = g() ? current_byte | 0x04 : current_byte;\n+    current_byte = g() ? current_byte | 0x08 : current_byte;\n+    current_byte = g() ? current_byte | 0x10 : current_byte;\n+    current_byte = g() ? current_byte | 0x20 : current_byte;\n+    current_byte = g() ? current_byte | 0x40 : current_byte;\n+    current_byte = g() ? current_byte | 0x80 : current_byte;\n+    *cur++ = current_byte;\n+  }\n+\n+  int64_t remaining_bits = remaining % 8;\n+  if (remaining_bits) {\n+    current_byte = 0;\n+    bit_mask = 0x01;\n+    while (remaining_bits-- > 0) {\n+      current_byte = g() ? (current_byte | bit_mask) : current_byte;\n+      bit_mask = static_cast<uint8_t>(bit_mask << 1);\n+    }\n+    *cur++ = current_byte;\n+  }\n+}\n \n }  // namespace internal\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-06-08T19:48:00.567+0000",
                    "updated": "2018-06-08T19:48:00.567+0000",
                    "started": "2018-06-08T19:48:00.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "110244",
                    "issueId": "13162944"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1fe83773[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26d1a6e1[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b737a1c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@103e253d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67df10c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@76e3c331[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5660e46b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@37962457[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2850534a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4042f73a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11d000e5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@17e23a14[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 08 19:48:00 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-06-08T19:48:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2649/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-05-30T16:48:13.000+0000",
        "updated": "2018-06-08T19:48:00.000+0000",
        "timeoriginalestimate": null,
        "description": "A {{std::generate}}-like function can benefit from advanced optimizations such as unrolling.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add std::generate()-like function for faster bitmap writing",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13162944/comment/16506500",
                    "id": "16506500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2093\n[https://github.com/apache/arrow/pull/2093]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-06-08T19:48:00.046+0000",
                    "updated": "2018-06-08T19:48:00.046+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3ubkn:",
        "customfield_12314139": null
    }
}