{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13251681",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681",
    "key": "ARROW-6292",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6292/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/302912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217\n \n \n   mimalloc is a cross-platform memory allocator that promises good performance, by Microsoft.\r\n   https://github.com/microsoft/mimalloc/\r\n   \r\n   Also refactor the memory pool API and tests to expose all available memory pool\r\n   implementations, not just the default one.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T14:30:37.819+0000",
                    "updated": "2019-08-28T14:30:37.819+0000",
                    "started": "2019-08-28T14:30:37.818+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "302912",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5217: [WIP] ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r318668241\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -144,6 +152,16 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n /// Return the process-wide default memory pool.\n ARROW_EXPORT MemoryPool* default_memory_pool();\n \n+ARROW_EXPORT MemoryPool* system_memory_pool();\n+\n+#ifdef ARROW_JEMALLOC\n \n Review comment:\n   Note this is changing the library API depending on the compilation options. I don't know if that's desirable (though it would only be a problem if calling one of those functions).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T16:08:55.992+0000",
                    "updated": "2019-08-28T16:08:55.992+0000",
                    "started": "2019-08-28T16:08:55.992+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303002",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #5217: [WIP] ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#issuecomment-525816768\n \n \n   @ursabot build\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T16:16:05.983+0000",
                    "updated": "2019-08-28T16:16:05.983+0000",
                    "started": "2019-08-28T16:16:05.982+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303009",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5217: [WIP] ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#issuecomment-525817177\n \n \n   Here are some builder benchmarks on Ubuntu 18.04.\r\n   ### jemalloc\r\n   ```\r\n   BuildBooleanArrayNoNulls              74276370 ns   74094476 ns          8   3.37407GB/s\r\n   BuildIntArrayNoNulls                 100167339 ns   99885463 ns          7   2.50287GB/s\r\n   BuildAdaptiveIntNoNulls               38526266 ns   38314882 ns         18   6.52488GB/s\r\n   BuildAdaptiveIntNoNullsScalarAppend  256890072 ns  256757146 ns          3   997.051MB/s\r\n   BuildBinaryArray                     765304063 ns  763166736 ns          1   335.444MB/s\r\n   BuildChunkedBinaryArray              562859306 ns  562392265 ns          1   455.198MB/s\r\n   BuildFixedSizeBinaryArray            433497460 ns  432849329 ns          2    591.43MB/s\r\n   BuildDecimalArray                    707405716 ns  706233881 ns          1   724.972MB/s\r\n   BuildInt64DictionaryArrayRandom      567658859 ns  567498732 ns          1   451.102MB/s\r\n   BuildInt64DictionaryArraySequential  553848082 ns  553671639 ns          1   462.368MB/s\r\n   BuildInt64DictionaryArraySimilar     792605270 ns  792404016 ns          1   323.068MB/s\r\n   BuildStringDictionaryArray          1474137106 ns 1473564522 ns          1   231.775MB/s\r\n   ```\r\n   ### mimalloc\r\n   ```\r\n   BuildBooleanArrayNoNulls              42640858 ns   42612607 ns         16   5.86681GB/s\r\n   BuildIntArrayNoNulls                 251661873 ns  250780401 ns          3   1020.81MB/s\r\n   BuildAdaptiveIntNoNulls               48525877 ns   48288881 ns         14   5.17718GB/s\r\n   BuildAdaptiveIntNoNullsScalarAppend  251730236 ns  251655962 ns          3   1017.26MB/s\r\n   BuildBinaryArray                     791121016 ns  786811687 ns          1   325.364MB/s\r\n   BuildChunkedBinaryArray              563158593 ns  562747126 ns          1   454.911MB/s\r\n   BuildFixedSizeBinaryArray            619441757 ns  616826068 ns          1   415.028MB/s\r\n   BuildDecimalArray                   1103273055 ns 1100933684 ns          1    465.06MB/s\r\n   BuildInt64DictionaryArrayRandom      580926981 ns  580342914 ns          1   441.119MB/s\r\n   BuildInt64DictionaryArraySequential  566534124 ns  566351591 ns          1   452.016MB/s\r\n   BuildInt64DictionaryArraySimilar     815753240 ns  815327030 ns          1   313.984MB/s\r\n   BuildStringDictionaryArray          1506459440 ns 1505203767 ns          1   226.903MB/s\r\n   ```\r\n   ### system (glibc) allocator\r\n   ```\r\n   BuildBooleanArrayNoNulls             110038461 ns  109787541 ns          5   2.27713GB/s\r\n   BuildIntArrayNoNulls                 410357811 ns  408636698 ns          2   626.473MB/s\r\n   BuildAdaptiveIntNoNulls              110562371 ns  110004564 ns          6   2.27263GB/s\r\n   BuildAdaptiveIntNoNullsScalarAppend  265685649 ns  265574583 ns          3   963.948MB/s\r\n   BuildBinaryArray                    1003602377 ns 1001422515 ns          1   255.636MB/s\r\n   BuildChunkedBinaryArray              605066945 ns  603859093 ns          1    423.94MB/s\r\n   BuildFixedSizeBinaryArray            770560241 ns  766574117 ns          1   333.953MB/s\r\n   BuildDecimalArray                   1367764643 ns 1361969548 ns          1   375.926MB/s\r\n   BuildInt64DictionaryArrayRandom      649778764 ns  649486539 ns          1   394.158MB/s\r\n   BuildInt64DictionaryArraySequential  647419063 ns  646682221 ns          1   395.867MB/s\r\n   BuildInt64DictionaryArraySimilar     888502530 ns  887294599 ns          1   288.517MB/s\r\n   BuildStringDictionaryArray          1601959588 ns 1601238920 ns          1   213.294MB/s\r\n   ````\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T16:17:10.636+0000",
                    "updated": "2019-08-28T16:17:10.636+0000",
                    "started": "2019-08-28T16:17:10.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303010",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5217: [WIP] ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#issuecomment-525821627\n \n \n   @emkornfield \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T16:28:51.316+0000",
                    "updated": "2019-08-28T16:28:51.316+0000",
                    "started": "2019-08-28T16:28:51.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303026",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#issuecomment-525842518\n \n \n   I've also run the builder benchmarks on Windows 7. It's on a VM, so take the results with a grain of salt:\r\n   ### mimalloc\r\n   ```\r\n   BuildBooleanArrayNoNulls             716817081 ns    714843750 ns            4 bytes_per_second=358.12M/s\r\n   BuildIntArrayNoNulls                 320958235 ns    319444444 ns            9 bytes_per_second=801.391M/s\r\n   BuildAdaptiveIntNoNulls               68958525 ns     69196429 ns           42 bytes_per_second=3.6129G/s\r\n   BuildAdaptiveIntNoNullsScalarAppend  385890944 ns    386160714 ns            7 bytes_per_second=662.936M/s\r\n   BuildBinaryArray                    1195201624 ns   1195312500 ns            2 bytes_per_second=214.17M/s\r\n   BuildChunkedBinaryArray              883791376 ns    885416667 ns            3 bytes_per_second=289.129M/s\r\n   BuildFixedSizeBinaryArray            815379981 ns    812500000 ns            3 bytes_per_second=315.077M/s\r\n   BuildDecimalArray                   1143211358 ns   1140625000 ns            2 bytes_per_second=448.877M/s\r\n   BuildInt64DictionaryArrayRandom      939496500 ns    937500000 ns            3 bytes_per_second=273.067M/s\r\n   BuildInt64DictionaryArraySequential  931547352 ns    932291667 ns            3 bytes_per_second=274.592M/s\r\n   BuildInt64DictionaryArraySimilar    1228586035 ns   1226562500 ns            2 bytes_per_second=208.713M/s\r\n   BuildStringDictionaryArray          2366846066 ns   2375000000 ns            1 bytes_per_second=144.817M/s\r\n   ````\r\n   ### system allocator\r\n   ```\r\n   BuildBooleanArrayNoNulls             853392168 ns    843750000 ns            3 bytes_per_second=303.407M/s\r\n   BuildIntArrayNoNulls                 493460249 ns    489583333 ns            6 bytes_per_second=522.894M/s\r\n   BuildAdaptiveIntNoNulls              155757987 ns    155381944 ns           18 bytes_per_second=1.60894G/s\r\n   BuildAdaptiveIntNoNullsScalarAppend  452317869 ns    447916667 ns            6 bytes_per_second=571.535M/s\r\n   BuildBinaryArray                    1501523238 ns   1500000000 ns            2 bytes_per_second=170.667M/s\r\n   BuildChunkedBinaryArray             1190399758 ns   1187500000 ns            2 bytes_per_second=215.579M/s\r\n   BuildFixedSizeBinaryArray           1025575783 ns   1015625000 ns            3 bytes_per_second=252.062M/s\r\n   BuildDecimalArray                   1483240328 ns   1484375000 ns            2 bytes_per_second=344.926M/s\r\n   BuildInt64DictionaryArrayRandom     1069301638 ns   1052083333 ns            3 bytes_per_second=243.327M/s\r\n   BuildInt64DictionaryArraySequential 1013390715 ns   1015625000 ns            3 bytes_per_second=252.062M/s\r\n   BuildInt64DictionaryArraySimilar    1348361174 ns   1351562500 ns            2 bytes_per_second=189.41M/s\r\n   BuildStringDictionaryArray          2503895327 ns   2500000000 ns            1 bytes_per_second=137.576M/s\r\n   ```\r\n   \r\n   (I have no idea why the \"bytes_per_second\" message is different on Windows)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T17:26:17.628+0000",
                    "updated": "2019-08-28T17:26:17.628+0000",
                    "started": "2019-08-28T17:26:17.627+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303064",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#issuecomment-525959523\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=h1) Report\n   > Merging [#5217](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/e29732be86958e563801c55d3fcd8dc3fe4e9801?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n   > The diff coverage is `80.39%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5217/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5217      +/-   ##\n   ==========================================\n   - Coverage   87.67%   87.66%   -0.01%     \n   ==========================================\n     Files        1025     1025              \n     Lines      147008   147085      +77     \n     Branches     1437     1437              \n   ==========================================\n   + Hits       128886   128945      +59     \n   - Misses      17760    17778      +18     \n     Partials      362      362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/arrow/memory\\_pool.h](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/io/file\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9maWxlX3Rlc3QuY2M=) | `95.1% <0%> (-0.16%)` | :arrow_down: |\n   | [cpp/src/arrow/allocator.h](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9hbGxvY2F0b3IuaA==) | `83.87% <0%> (-2.8%)` | :arrow_down: |\n   | [cpp/src/arrow/memory\\_pool\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbF90ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/memory\\_pool.cc](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9tZW1vcnlfcG9vbC5jYw==) | `80.76% <79.31%> (-4.82%)` | :arrow_down: |\n   | [cpp/src/arrow/dataset/file\\_parquet\\_test.cc](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9kYXRhc2V0L2ZpbGVfcGFycXVldF90ZXN0LmNj) | `93.84% <0%> (-6.16%)` | :arrow_down: |\n   | [js/src/visitor/indexof.ts](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-anMvc3JjL3Zpc2l0b3IvaW5kZXhvZi50cw==) | `97.26% <0%> (-1.37%)` | :arrow_down: |\n   | [python/pyarrow/table.pxi](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGFibGUucHhp) | `87.44% <0%> (-0.69%)` | :arrow_down: |\n   | [cpp/src/arrow/vendored/xxhash/xxhash.c](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy92ZW5kb3JlZC94eGhhc2gveHhoYXNoLmM=) | `73.6% <0%> (-0.38%)` | :arrow_down: |\n   | [python/pyarrow/tests/test\\_table.py](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF90YWJsZS5weQ==) | `99.62% <0%> (\u00f8)` | :arrow_up: |\n   | ... and [4 more](https://codecov.io/gh/apache/arrow/pull/5217/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=footer). Last update [e29732b...155343a](https://codecov.io/gh/apache/arrow/pull/5217?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-28T23:22:52.242+0000",
                    "updated": "2019-08-28T23:22:52.242+0000",
                    "started": "2019-08-28T23:22:52.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303295",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r318899587\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -144,6 +152,16 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n /// Return the process-wide default memory pool.\n ARROW_EXPORT MemoryPool* default_memory_pool();\n \n+ARROW_EXPORT MemoryPool* system_memory_pool();\n+\n+#ifdef ARROW_JEMALLOC\n \n Review comment:\n   I'm not sure which is better conditional compilation or immediate exit  if a method is called and the value isn't linked.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-29T06:11:38.614+0000",
                    "updated": "2019-08-29T06:11:38.614+0000",
                    "started": "2019-08-29T06:11:38.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303384",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on issue #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#issuecomment-526039818\n \n \n   Overall, looks OK to me, but my CMake knowledge is rusty, it might be good for someone else to take a look and offer a second opinion on conditional API changes.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-29T06:12:23.822+0000",
                    "updated": "2019-08-29T06:12:23.822+0000",
                    "started": "2019-08-29T06:12:23.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303385",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/303465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r318955346\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -144,6 +152,16 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n /// Return the process-wide default memory pool.\n ARROW_EXPORT MemoryPool* default_memory_pool();\n \n+ARROW_EXPORT MemoryPool* system_memory_pool();\n+\n+#ifdef ARROW_JEMALLOC\n \n Review comment:\n   @xhochy What do you think?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-29T08:49:26.787+0000",
                    "updated": "2019-08-29T08:49:26.787+0000",
                    "started": "2019-08-29T08:49:26.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "303465",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319572657\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -144,6 +152,16 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n /// Return the process-wide default memory pool.\n ARROW_EXPORT MemoryPool* default_memory_pool();\n \n+ARROW_EXPORT MemoryPool* system_memory_pool();\n+\n+#ifdef ARROW_JEMALLOC\n \n Review comment:\n   I would rather return `null` or status instead of changing ABI based on compilation options. This makes it hard for binaries to built against Arrow and also use the different allocators explicitly.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T15:48:09.454+0000",
                    "updated": "2019-08-30T15:48:09.454+0000",
                    "started": "2019-08-30T15:48:09.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304339",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319572803\n \n \n\n ##########\n File path: cpp/thirdparty/jemalloc/README.md\n ##########\n @@ -1,22 +0,0 @@\n-<!---\n-  Licensed to the Apache Software Foundation (ASF) under one\n-  or more contributor license agreements.  See the NOTICE file\n-  distributed with this work for additional information\n-  regarding copyright ownership.  The ASF licenses this file\n-  to you under the Apache License, Version 2.0 (the\n-  \"License\"); you may not use this file except in compliance\n-  with the License.  You may obtain a copy of the License at\n-\n-    http://www.apache.org/licenses/LICENSE-2.0\n-\n-  Unless required by applicable law or agreed to in writing,\n-  software distributed under the License is distributed on an\n-  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-  KIND, either express or implied.  See the License for the\n-  specific language governing permissions and limitations\n-  under the License.\n--->\n-\n-This directory contains a vendored commit from the jemalloc stable-4 branch.\n \n Review comment:\n   Why do you remove this README?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-30T15:48:27.350+0000",
                    "updated": "2019-08-30T15:48:27.350+0000",
                    "started": "2019-08-30T15:48:27.349+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304340",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304703",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319707784\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.h\n ##########\n @@ -144,6 +152,16 @@ class ARROW_EXPORT ProxyMemoryPool : public MemoryPool {\n /// Return the process-wide default memory pool.\n ARROW_EXPORT MemoryPool* default_memory_pool();\n \n+ARROW_EXPORT MemoryPool* system_memory_pool();\n+\n+#ifdef ARROW_JEMALLOC\n \n Review comment:\n   I like @xhochy 's idea.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T02:38:35.965+0000",
                    "updated": "2019-08-31T02:38:35.965+0000",
                    "started": "2019-08-31T02:38:35.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304703",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319707532\n \n \n\n ##########\n File path: cpp/cmake_modules/ThirdpartyToolchain.cmake\n ##########\n @@ -1399,6 +1411,52 @@ if(ARROW_JEMALLOC)\n   add_dependencies(toolchain jemalloc_ep)\n endif()\n \n+# ----------------------------------------------------------------------\n+# mimalloc - Cross-platform high-performance allocator, from Microsoft\n+\n+if(ARROW_MIMALLOC)\n+  message(STATUS \"Building (vendored) mimalloc from source\")\n+  # We only use a vendored mimalloc as we want to control its build options.\n+\n+  # XXX Careful: mimalloc library naming varies depend on build type capitalization:\n+  # https://github.com/microsoft/mimalloc/issues/144\n+  string(TOLOWER ${CMAKE_BUILD_TYPE} _lowercase_build_type)\n \n Review comment:\n   Could you define `LOWERCASE_BUILD_TYPE` https://github.com/apache/arrow/blob/master/cpp/CMakeLists.txt#L31 and use it?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T02:38:36.120+0000",
                    "updated": "2019-08-31T02:38:36.120+0000",
                    "started": "2019-08-31T02:38:36.120+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304704",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319707823\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -152,47 +227,108 @@ MemoryPool::~MemoryPool() {}\n int64_t MemoryPool::max_memory() const { return -1; }\n \n ///////////////////////////////////////////////////////////////////////\n-// Default MemoryPool implementation\n+// MemoryPool implementation that delegates its core duty\n+// to an Allocator class.\n \n-class DefaultMemoryPool : public MemoryPool {\n+template <typename Allocator>\n+class BaseMemoryPoolImpl : public MemoryPool {\n  public:\n-  ~DefaultMemoryPool() override {}\n+  ~BaseMemoryPoolImpl() override {}\n \n   Status Allocate(int64_t size, uint8_t** out) override {\n-    RETURN_NOT_OK(AllocateAligned(size, out));\n+    if (size < 0) {\n+      return Status::Invalid(\"negative malloc size\");\n+    }\n+    if (static_cast<uint64_t>(size) >= std::numeric_limits<size_t>::max()) {\n+      return Status::CapacityError(\"malloc size overflows size_t\");\n+    }\n+    RETURN_NOT_OK(Allocator::AllocateAligned(size, out));\n \n     stats_.UpdateAllocatedBytes(size);\n     return Status::OK();\n   }\n \n   Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n-    RETURN_NOT_OK(ReallocateAligned(old_size, new_size, ptr));\n+    if (new_size < 0) {\n+      return Status::Invalid(\"negative realloc size\");\n+    }\n+    if (static_cast<uint64_t>(new_size) >= std::numeric_limits<size_t>::max()) {\n+      return Status::CapacityError(\"realloc overflows size_t\");\n+    }\n+    RETURN_NOT_OK(Allocator::ReallocateAligned(old_size, new_size, ptr));\n \n     stats_.UpdateAllocatedBytes(new_size - old_size);\n     return Status::OK();\n   }\n \n-  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n-\n   void Free(uint8_t* buffer, int64_t size) override {\n-    DeallocateAligned(buffer, size);\n+    Allocator::DeallocateAligned(buffer, size);\n \n     stats_.UpdateAllocatedBytes(-size);\n   }\n \n+  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n+\n   int64_t max_memory() const override { return stats_.max_memory(); }\n \n- private:\n+ protected:\n   internal::MemoryPoolStats stats_;\n };\n \n+class SystemMemoryPool : public BaseMemoryPoolImpl<SystemAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"system\"; }\n+};\n+\n+#ifdef ARROW_JEMALLOC\n+class JemallocMemoryPool : public BaseMemoryPoolImpl<JemallocAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"jemalloc\"; }\n+};\n+#endif\n+\n+#ifdef ARROW_MIMALLOC\n+class MimallocMemoryPool : public BaseMemoryPoolImpl<MimallocAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"mimalloc\"; }\n+};\n+#endif\n+\n+#ifdef ARROW_JEMALLOC\n+using DefaultMemoryPool = JemallocMemoryPool;\n+#elif ARROW_MIMALLOC\n+using DefaultMemoryPool = MimallocMemoryPool;\n+#else\n+using DefaultMemoryPool = SystemMemoryPool;\n+#endif\n+\n std::unique_ptr<MemoryPool> MemoryPool::CreateDefault() {\n   return std::unique_ptr<MemoryPool>(new DefaultMemoryPool);\n }\n \n+MemoryPool* system_memory_pool() {\n+  static SystemMemoryPool pool;\n+  return &pool;\n+}\n+\n+#ifdef ARROW_JEMALLOC\n+MemoryPool* jemalloc_memory_pool() {\n+  static JemallocMemoryPool pool;\n+  return &pool;\n+}\n+#endif\n+\n+#ifdef ARROW_MIMALLOC\n+MemoryPool* mimalloc_memory_pool() {\n+  static MimallocMemoryPool pool;\n+  return &pool;\n+}\n+#endif\n+\n MemoryPool* default_memory_pool() {\n-  static DefaultMemoryPool default_memory_pool_;\n-  return &default_memory_pool_;\n+  // XXX should it return the same instance as system_memory_pool() etc.?\n \n Review comment:\n   I think so.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T02:38:36.199+0000",
                    "updated": "2019-08-31T02:38:36.199+0000",
                    "started": "2019-08-31T02:38:36.199+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304705",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319707917\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -44,104 +48,175 @@ namespace {\n // an aligned non-null pointer.\n alignas(kAlignment) static uint8_t zero_size_area[1];\n \n-// Allocate memory according to the alignment requirements for Arrow\n-// (as of May 2016 64 bytes)\n-Status AllocateAligned(int64_t size, uint8_t** out) {\n-  // TODO(emkornfield) find something compatible with windows\n-  if (size < 0) {\n-    return Status::Invalid(\"negative malloc size\");\n-  }\n-  if (size == 0) {\n-    *out = zero_size_area;\n-    return Status::OK();\n-  }\n-  if (static_cast<uint64_t>(size) >= std::numeric_limits<size_t>::max()) {\n-    return Status::CapacityError(\"malloc size overflows size_t\");\n-  }\n+// Helper class directing allocations to the standard system allocator.\n+class SystemAllocator {\n+ public:\n+  // Allocate memory according to the alignment requirements for Arrow\n+  // (as of May 2016 64 bytes)\n+  static Status AllocateAligned(int64_t size, uint8_t** out) {\n+    if (size == 0) {\n+      *out = zero_size_area;\n+      return Status::OK();\n+    }\n #ifdef _WIN32\n-  // Special code path for Windows\n-  *out =\n-      reinterpret_cast<uint8_t*>(_aligned_malloc(static_cast<size_t>(size), kAlignment));\n-  if (!*out) {\n-    return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n-  }\n-#elif defined(ARROW_JEMALLOC)\n-  *out = reinterpret_cast<uint8_t*>(\n-      mallocx(static_cast<size_t>(size), MALLOCX_ALIGN(kAlignment)));\n-  if (*out == NULL) {\n-    return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n-  }\n+    // Special code path for Windows\n+    *out = reinterpret_cast<uint8_t*>(\n+        _aligned_malloc(static_cast<size_t>(size), kAlignment));\n+    if (!*out) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n #else\n-  const int result = posix_memalign(reinterpret_cast<void**>(out), kAlignment,\n-                                    static_cast<size_t>(size));\n-  if (result == ENOMEM) {\n-    return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    const int result = posix_memalign(reinterpret_cast<void**>(out), kAlignment,\n+                                      static_cast<size_t>(size));\n+    if (result == ENOMEM) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n+\n+    if (result == EINVAL) {\n+      return Status::Invalid(\"invalid alignment parameter: \", kAlignment);\n+    }\n+#endif\n+    return Status::OK();\n   }\n \n-  if (result == EINVAL) {\n-    return Status::Invalid(\"invalid alignment parameter: \", kAlignment);\n+  static Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    uint8_t* previous_ptr = *ptr;\n+    if (previous_ptr == zero_size_area) {\n+      DCHECK_EQ(old_size, 0);\n+      return AllocateAligned(new_size, ptr);\n+    }\n+    if (new_size == 0) {\n+      DeallocateAligned(previous_ptr, old_size);\n+      *ptr = zero_size_area;\n+      return Status::OK();\n+    }\n+    // Note: We cannot use realloc() here as it doesn't guarantee alignment.\n+\n+    // Allocate new chunk\n+    uint8_t* out = nullptr;\n+    RETURN_NOT_OK(AllocateAligned(new_size, &out));\n+    DCHECK(out);\n+    // Copy contents and release old memory chunk\n+    memcpy(out, *ptr, static_cast<size_t>(std::min(new_size, old_size)));\n+#ifdef _WIN32\n+    _aligned_free(*ptr);\n+#else\n+    free(*ptr);\n+#endif  // defined(_WIN32)\n+    *ptr = out;\n+    return Status::OK();\n   }\n-#endif\n-  return Status::OK();\n-}\n \n-void DeallocateAligned(uint8_t* ptr, int64_t size) {\n-  if (ptr == zero_size_area) {\n-    DCHECK_EQ(size, 0);\n-  } else {\n+  static void DeallocateAligned(uint8_t* ptr, int64_t size) {\n+    if (ptr == zero_size_area) {\n+      DCHECK_EQ(size, 0);\n+    } else {\n #ifdef _WIN32\n-    _aligned_free(ptr);\n-#elif defined(ARROW_JEMALLOC)\n-    dallocx(ptr, MALLOCX_ALIGN(kAlignment));\n+      _aligned_free(ptr);\n #else\n-    std::free(ptr);\n+      free(ptr);\n #endif\n+    }\n   }\n-}\n+};\n+\n+#ifdef ARROW_JEMALLOC\n \n-Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n-  uint8_t* previous_ptr = *ptr;\n-  if (previous_ptr == zero_size_area) {\n-    DCHECK_EQ(old_size, 0);\n-    return AllocateAligned(new_size, ptr);\n+// Helper class directing allocations to the jemalloc allocator.\n+class JemallocAllocator {\n+ public:\n+  static Status AllocateAligned(int64_t size, uint8_t** out) {\n+    if (size == 0) {\n+      *out = zero_size_area;\n+      return Status::OK();\n+    }\n+    *out = reinterpret_cast<uint8_t*>(\n+        mallocx(static_cast<size_t>(size), MALLOCX_ALIGN(kAlignment)));\n+    if (*out == NULL) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n+    return Status::OK();\n   }\n-  if (new_size == 0) {\n-    DeallocateAligned(previous_ptr, old_size);\n-    *ptr = zero_size_area;\n+\n+  static Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    uint8_t* previous_ptr = *ptr;\n+    if (previous_ptr == zero_size_area) {\n+      DCHECK_EQ(old_size, 0);\n+      return AllocateAligned(new_size, ptr);\n+    }\n+    if (new_size == 0) {\n+      DeallocateAligned(previous_ptr, old_size);\n+      *ptr = zero_size_area;\n+      return Status::OK();\n+    }\n+    *ptr = reinterpret_cast<uint8_t*>(\n+        rallocx(*ptr, static_cast<size_t>(new_size), MALLOCX_ALIGN(kAlignment)));\n+    if (*ptr == NULL) {\n+      *ptr = previous_ptr;\n+      return Status::OutOfMemory(\"realloc of size \", new_size, \" failed\");\n+    }\n     return Status::OK();\n   }\n-#ifdef ARROW_JEMALLOC\n-  if (new_size < 0) {\n-    return Status::Invalid(\"negative realloc size\");\n+\n+  static void DeallocateAligned(uint8_t* ptr, int64_t size) {\n+    if (ptr == zero_size_area) {\n+      DCHECK_EQ(size, 0);\n+    } else {\n+      dallocx(ptr, MALLOCX_ALIGN(kAlignment));\n+    }\n   }\n-  if (static_cast<uint64_t>(new_size) >= std::numeric_limits<size_t>::max()) {\n-    return Status::CapacityError(\"realloc overflows size_t\");\n+};\n+\n+#endif  // defined(ARROW_JEMALLOC)\n+\n+#ifdef ARROW_MIMALLOC\n+\n+// Helper class directing allocations to the mimalloc allocator.\n+class MimallocAllocator {\n+ public:\n+  static Status AllocateAligned(int64_t size, uint8_t** out) {\n+    if (size == 0) {\n+      *out = zero_size_area;\n+      return Status::OK();\n+    }\n+    *out = reinterpret_cast<uint8_t*>(\n+        mi_malloc_aligned(static_cast<size_t>(size), kAlignment));\n+    if (*out == NULL) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n+    return Status::OK();\n   }\n-  *ptr = reinterpret_cast<uint8_t*>(\n-      rallocx(*ptr, static_cast<size_t>(new_size), MALLOCX_ALIGN(kAlignment)));\n-  if (*ptr == NULL) {\n-    *ptr = previous_ptr;\n-    return Status::OutOfMemory(\"realloc of size \", new_size, \" failed\");\n+\n+  static Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    uint8_t* previous_ptr = *ptr;\n \n Review comment:\n   Can we use `auto` here?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T02:38:36.202+0000",
                    "updated": "2019-08-31T02:38:36.202+0000",
                    "started": "2019-08-31T02:38:36.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304706",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319707729\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -152,47 +227,108 @@ MemoryPool::~MemoryPool() {}\n int64_t MemoryPool::max_memory() const { return -1; }\n \n ///////////////////////////////////////////////////////////////////////\n-// Default MemoryPool implementation\n+// MemoryPool implementation that delegates its core duty\n+// to an Allocator class.\n \n-class DefaultMemoryPool : public MemoryPool {\n+template <typename Allocator>\n+class BaseMemoryPoolImpl : public MemoryPool {\n  public:\n-  ~DefaultMemoryPool() override {}\n+  ~BaseMemoryPoolImpl() override {}\n \n   Status Allocate(int64_t size, uint8_t** out) override {\n-    RETURN_NOT_OK(AllocateAligned(size, out));\n+    if (size < 0) {\n+      return Status::Invalid(\"negative malloc size\");\n+    }\n+    if (static_cast<uint64_t>(size) >= std::numeric_limits<size_t>::max()) {\n+      return Status::CapacityError(\"malloc size overflows size_t\");\n+    }\n+    RETURN_NOT_OK(Allocator::AllocateAligned(size, out));\n \n     stats_.UpdateAllocatedBytes(size);\n     return Status::OK();\n   }\n \n   Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n-    RETURN_NOT_OK(ReallocateAligned(old_size, new_size, ptr));\n+    if (new_size < 0) {\n+      return Status::Invalid(\"negative realloc size\");\n+    }\n+    if (static_cast<uint64_t>(new_size) >= std::numeric_limits<size_t>::max()) {\n+      return Status::CapacityError(\"realloc overflows size_t\");\n+    }\n+    RETURN_NOT_OK(Allocator::ReallocateAligned(old_size, new_size, ptr));\n \n     stats_.UpdateAllocatedBytes(new_size - old_size);\n     return Status::OK();\n   }\n \n-  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n-\n   void Free(uint8_t* buffer, int64_t size) override {\n-    DeallocateAligned(buffer, size);\n+    Allocator::DeallocateAligned(buffer, size);\n \n     stats_.UpdateAllocatedBytes(-size);\n   }\n \n+  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n+\n   int64_t max_memory() const override { return stats_.max_memory(); }\n \n- private:\n+ protected:\n   internal::MemoryPoolStats stats_;\n };\n \n+class SystemMemoryPool : public BaseMemoryPoolImpl<SystemAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"system\"; }\n+};\n+\n+#ifdef ARROW_JEMALLOC\n+class JemallocMemoryPool : public BaseMemoryPoolImpl<JemallocAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"jemalloc\"; }\n+};\n+#endif\n+\n+#ifdef ARROW_MIMALLOC\n+class MimallocMemoryPool : public BaseMemoryPoolImpl<MimallocAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"mimalloc\"; }\n+};\n+#endif\n+\n+#ifdef ARROW_JEMALLOC\n+using DefaultMemoryPool = JemallocMemoryPool;\n+#elif ARROW_MIMALLOC\n \n Review comment:\n   `defined(ARROW_MIMALLOC)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T02:38:36.202+0000",
                    "updated": "2019-08-31T02:38:36.202+0000",
                    "started": "2019-08-31T02:38:36.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304707",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/304708",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319708501\n \n \n\n ##########\n File path: cpp/CMakeLists.txt\n ##########\n @@ -750,6 +750,11 @@ if(ARROW_JEMALLOC)\n   list(APPEND ARROW_SYSTEM_LINK_LIBS jemalloc::jemalloc)\n endif(ARROW_JEMALLOC)\n \n+if(ARROW_MIMALLOC)\n+  add_definitions(-DARROW_MIMALLOC)\n+  list(APPEND ARROW_SYSTEM_LINK_LIBS mimalloc::mimalloc)\n+endif(ARROW_MIMALLOC)\n \n Review comment:\n   Could you remove `ARROW_MIMALLOC` here?\r\n   Normally, we don't put any content to `endif()`.\r\n   \r\n   (We can also remove `ARROW_JEMALLOC` in `endif(ARROW_JEMALLOC)`.)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-31T02:38:36.206+0000",
                    "updated": "2019-08-31T02:38:36.206+0000",
                    "started": "2019-08-31T02:38:36.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "304708",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/305175",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319951286\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -44,104 +48,175 @@ namespace {\n // an aligned non-null pointer.\n alignas(kAlignment) static uint8_t zero_size_area[1];\n \n-// Allocate memory according to the alignment requirements for Arrow\n-// (as of May 2016 64 bytes)\n-Status AllocateAligned(int64_t size, uint8_t** out) {\n-  // TODO(emkornfield) find something compatible with windows\n-  if (size < 0) {\n-    return Status::Invalid(\"negative malloc size\");\n-  }\n-  if (size == 0) {\n-    *out = zero_size_area;\n-    return Status::OK();\n-  }\n-  if (static_cast<uint64_t>(size) >= std::numeric_limits<size_t>::max()) {\n-    return Status::CapacityError(\"malloc size overflows size_t\");\n-  }\n+// Helper class directing allocations to the standard system allocator.\n+class SystemAllocator {\n+ public:\n+  // Allocate memory according to the alignment requirements for Arrow\n+  // (as of May 2016 64 bytes)\n+  static Status AllocateAligned(int64_t size, uint8_t** out) {\n+    if (size == 0) {\n+      *out = zero_size_area;\n+      return Status::OK();\n+    }\n #ifdef _WIN32\n-  // Special code path for Windows\n-  *out =\n-      reinterpret_cast<uint8_t*>(_aligned_malloc(static_cast<size_t>(size), kAlignment));\n-  if (!*out) {\n-    return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n-  }\n-#elif defined(ARROW_JEMALLOC)\n-  *out = reinterpret_cast<uint8_t*>(\n-      mallocx(static_cast<size_t>(size), MALLOCX_ALIGN(kAlignment)));\n-  if (*out == NULL) {\n-    return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n-  }\n+    // Special code path for Windows\n+    *out = reinterpret_cast<uint8_t*>(\n+        _aligned_malloc(static_cast<size_t>(size), kAlignment));\n+    if (!*out) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n #else\n-  const int result = posix_memalign(reinterpret_cast<void**>(out), kAlignment,\n-                                    static_cast<size_t>(size));\n-  if (result == ENOMEM) {\n-    return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    const int result = posix_memalign(reinterpret_cast<void**>(out), kAlignment,\n+                                      static_cast<size_t>(size));\n+    if (result == ENOMEM) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n+\n+    if (result == EINVAL) {\n+      return Status::Invalid(\"invalid alignment parameter: \", kAlignment);\n+    }\n+#endif\n+    return Status::OK();\n   }\n \n-  if (result == EINVAL) {\n-    return Status::Invalid(\"invalid alignment parameter: \", kAlignment);\n+  static Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    uint8_t* previous_ptr = *ptr;\n+    if (previous_ptr == zero_size_area) {\n+      DCHECK_EQ(old_size, 0);\n+      return AllocateAligned(new_size, ptr);\n+    }\n+    if (new_size == 0) {\n+      DeallocateAligned(previous_ptr, old_size);\n+      *ptr = zero_size_area;\n+      return Status::OK();\n+    }\n+    // Note: We cannot use realloc() here as it doesn't guarantee alignment.\n+\n+    // Allocate new chunk\n+    uint8_t* out = nullptr;\n+    RETURN_NOT_OK(AllocateAligned(new_size, &out));\n+    DCHECK(out);\n+    // Copy contents and release old memory chunk\n+    memcpy(out, *ptr, static_cast<size_t>(std::min(new_size, old_size)));\n+#ifdef _WIN32\n+    _aligned_free(*ptr);\n+#else\n+    free(*ptr);\n+#endif  // defined(_WIN32)\n+    *ptr = out;\n+    return Status::OK();\n   }\n-#endif\n-  return Status::OK();\n-}\n \n-void DeallocateAligned(uint8_t* ptr, int64_t size) {\n-  if (ptr == zero_size_area) {\n-    DCHECK_EQ(size, 0);\n-  } else {\n+  static void DeallocateAligned(uint8_t* ptr, int64_t size) {\n+    if (ptr == zero_size_area) {\n+      DCHECK_EQ(size, 0);\n+    } else {\n #ifdef _WIN32\n-    _aligned_free(ptr);\n-#elif defined(ARROW_JEMALLOC)\n-    dallocx(ptr, MALLOCX_ALIGN(kAlignment));\n+      _aligned_free(ptr);\n #else\n-    std::free(ptr);\n+      free(ptr);\n #endif\n+    }\n   }\n-}\n+};\n+\n+#ifdef ARROW_JEMALLOC\n \n-Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n-  uint8_t* previous_ptr = *ptr;\n-  if (previous_ptr == zero_size_area) {\n-    DCHECK_EQ(old_size, 0);\n-    return AllocateAligned(new_size, ptr);\n+// Helper class directing allocations to the jemalloc allocator.\n+class JemallocAllocator {\n+ public:\n+  static Status AllocateAligned(int64_t size, uint8_t** out) {\n+    if (size == 0) {\n+      *out = zero_size_area;\n+      return Status::OK();\n+    }\n+    *out = reinterpret_cast<uint8_t*>(\n+        mallocx(static_cast<size_t>(size), MALLOCX_ALIGN(kAlignment)));\n+    if (*out == NULL) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n+    return Status::OK();\n   }\n-  if (new_size == 0) {\n-    DeallocateAligned(previous_ptr, old_size);\n-    *ptr = zero_size_area;\n+\n+  static Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    uint8_t* previous_ptr = *ptr;\n+    if (previous_ptr == zero_size_area) {\n+      DCHECK_EQ(old_size, 0);\n+      return AllocateAligned(new_size, ptr);\n+    }\n+    if (new_size == 0) {\n+      DeallocateAligned(previous_ptr, old_size);\n+      *ptr = zero_size_area;\n+      return Status::OK();\n+    }\n+    *ptr = reinterpret_cast<uint8_t*>(\n+        rallocx(*ptr, static_cast<size_t>(new_size), MALLOCX_ALIGN(kAlignment)));\n+    if (*ptr == NULL) {\n+      *ptr = previous_ptr;\n+      return Status::OutOfMemory(\"realloc of size \", new_size, \" failed\");\n+    }\n     return Status::OK();\n   }\n-#ifdef ARROW_JEMALLOC\n-  if (new_size < 0) {\n-    return Status::Invalid(\"negative realloc size\");\n+\n+  static void DeallocateAligned(uint8_t* ptr, int64_t size) {\n+    if (ptr == zero_size_area) {\n+      DCHECK_EQ(size, 0);\n+    } else {\n+      dallocx(ptr, MALLOCX_ALIGN(kAlignment));\n+    }\n   }\n-  if (static_cast<uint64_t>(new_size) >= std::numeric_limits<size_t>::max()) {\n-    return Status::CapacityError(\"realloc overflows size_t\");\n+};\n+\n+#endif  // defined(ARROW_JEMALLOC)\n+\n+#ifdef ARROW_MIMALLOC\n+\n+// Helper class directing allocations to the mimalloc allocator.\n+class MimallocAllocator {\n+ public:\n+  static Status AllocateAligned(int64_t size, uint8_t** out) {\n+    if (size == 0) {\n+      *out = zero_size_area;\n+      return Status::OK();\n+    }\n+    *out = reinterpret_cast<uint8_t*>(\n+        mi_malloc_aligned(static_cast<size_t>(size), kAlignment));\n+    if (*out == NULL) {\n+      return Status::OutOfMemory(\"malloc of size \", size, \" failed\");\n+    }\n+    return Status::OK();\n   }\n-  *ptr = reinterpret_cast<uint8_t*>(\n-      rallocx(*ptr, static_cast<size_t>(new_size), MALLOCX_ALIGN(kAlignment)));\n-  if (*ptr == NULL) {\n-    *ptr = previous_ptr;\n-    return Status::OutOfMemory(\"realloc of size \", new_size, \" failed\");\n+\n+  static Status ReallocateAligned(int64_t old_size, int64_t new_size, uint8_t** ptr) {\n+    uint8_t* previous_ptr = *ptr;\n \n Review comment:\n   I'd rather keep the type explicit for clarity.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-02T13:08:15.376+0000",
                    "updated": "2019-09-02T13:08:15.376+0000",
                    "started": "2019-09-02T13:08:15.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305175",
                    "issueId": "13251681"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/worklog/305176",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5217: ARROW-6292: [C++] Add option to use the mimalloc allocator\nURL: https://github.com/apache/arrow/pull/5217#discussion_r319951321\n \n \n\n ##########\n File path: cpp/src/arrow/memory_pool.cc\n ##########\n @@ -152,47 +227,108 @@ MemoryPool::~MemoryPool() {}\n int64_t MemoryPool::max_memory() const { return -1; }\n \n ///////////////////////////////////////////////////////////////////////\n-// Default MemoryPool implementation\n+// MemoryPool implementation that delegates its core duty\n+// to an Allocator class.\n \n-class DefaultMemoryPool : public MemoryPool {\n+template <typename Allocator>\n+class BaseMemoryPoolImpl : public MemoryPool {\n  public:\n-  ~DefaultMemoryPool() override {}\n+  ~BaseMemoryPoolImpl() override {}\n \n   Status Allocate(int64_t size, uint8_t** out) override {\n-    RETURN_NOT_OK(AllocateAligned(size, out));\n+    if (size < 0) {\n+      return Status::Invalid(\"negative malloc size\");\n+    }\n+    if (static_cast<uint64_t>(size) >= std::numeric_limits<size_t>::max()) {\n+      return Status::CapacityError(\"malloc size overflows size_t\");\n+    }\n+    RETURN_NOT_OK(Allocator::AllocateAligned(size, out));\n \n     stats_.UpdateAllocatedBytes(size);\n     return Status::OK();\n   }\n \n   Status Reallocate(int64_t old_size, int64_t new_size, uint8_t** ptr) override {\n-    RETURN_NOT_OK(ReallocateAligned(old_size, new_size, ptr));\n+    if (new_size < 0) {\n+      return Status::Invalid(\"negative realloc size\");\n+    }\n+    if (static_cast<uint64_t>(new_size) >= std::numeric_limits<size_t>::max()) {\n+      return Status::CapacityError(\"realloc overflows size_t\");\n+    }\n+    RETURN_NOT_OK(Allocator::ReallocateAligned(old_size, new_size, ptr));\n \n     stats_.UpdateAllocatedBytes(new_size - old_size);\n     return Status::OK();\n   }\n \n-  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n-\n   void Free(uint8_t* buffer, int64_t size) override {\n-    DeallocateAligned(buffer, size);\n+    Allocator::DeallocateAligned(buffer, size);\n \n     stats_.UpdateAllocatedBytes(-size);\n   }\n \n+  int64_t bytes_allocated() const override { return stats_.bytes_allocated(); }\n+\n   int64_t max_memory() const override { return stats_.max_memory(); }\n \n- private:\n+ protected:\n   internal::MemoryPoolStats stats_;\n };\n \n+class SystemMemoryPool : public BaseMemoryPoolImpl<SystemAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"system\"; }\n+};\n+\n+#ifdef ARROW_JEMALLOC\n+class JemallocMemoryPool : public BaseMemoryPoolImpl<JemallocAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"jemalloc\"; }\n+};\n+#endif\n+\n+#ifdef ARROW_MIMALLOC\n+class MimallocMemoryPool : public BaseMemoryPoolImpl<MimallocAllocator> {\n+ public:\n+  std::string backend_name() const override { return \"mimalloc\"; }\n+};\n+#endif\n+\n+#ifdef ARROW_JEMALLOC\n+using DefaultMemoryPool = JemallocMemoryPool;\n+#elif ARROW_MIMALLOC\n+using DefaultMemoryPool = MimallocMemoryPool;\n+#else\n+using DefaultMemoryPool = SystemMemoryPool;\n+#endif\n+\n std::unique_ptr<MemoryPool> MemoryPool::CreateDefault() {\n   return std::unique_ptr<MemoryPool>(new DefaultMemoryPool);\n }\n \n+MemoryPool* system_memory_pool() {\n+  static SystemMemoryPool pool;\n+  return &pool;\n+}\n+\n+#ifdef ARROW_JEMALLOC\n+MemoryPool* jemalloc_memory_pool() {\n+  static JemallocMemoryPool pool;\n+  return &pool;\n+}\n+#endif\n+\n+#ifdef ARROW_MIMALLOC\n+MemoryPool* mimalloc_memory_pool() {\n+  static MimallocMemoryPool pool;\n+  return &pool;\n+}\n+#endif\n+\n MemoryPool* default_memory_pool() {\n-  static DefaultMemoryPool default_memory_pool_;\n-  return &default_memory_pool_;\n+  // XXX should it return the same instance as system_memory_pool() etc.?\n \n Review comment:\n   Will do.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-02T13:08:22.710+0000",
                    "updated": "2019-09-02T13:08:22.710+0000",
                    "started": "2019-09-02T13:08:22.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "305176",
                    "issueId": "13251681"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1b65c441[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cc0f54[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39d258bc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5a87467d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@385ca6a8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@32e3ee7c[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@195f4724[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@790b4edc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@243fceb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@9825446[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a875435[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@49d98a17[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 10 02:06:51 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-10T02:06:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6292/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-08-19T20:43:27.000+0000",
        "updated": "2019-09-10T02:07:31.000+0000",
        "timeoriginalestimate": null,
        "description": "It's a new allocator, Apache-licensed, by Microsoft. It claims very good performance and is cross-platform (works on Windows and Unix).\r\nhttps://github.com/microsoft/mimalloc/\r\n\r\nThere's a detailed set of APIs including aligned allocation and zero-initialized allocation. However, zero-initialized reallocation doesn't seem provided.\r\nhttps://microsoft.github.io/mimalloc/group__malloc.html#details\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add an option to build with mimalloc",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/comment/16910745",
                    "id": "16910745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Opened issue upstream at [https://github.com/microsoft/mimalloc/issues/133]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-08-19T20:45:58.011+0000",
                    "updated": "2019-08-19T20:45:58.011+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13251681/comment/16926255",
                    "id": "16926255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5217\n[https://github.com/apache/arrow/pull/5217]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-09-10T02:06:51.034+0000",
                    "updated": "2019-09-10T02:06:51.034+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z05t6o:",
        "customfield_12314139": null
    }
}