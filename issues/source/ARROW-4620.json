{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13216482",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482",
    "key": "ARROW-4620",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "test"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=govindarajanprashanth%40gmail.com",
            "name": "govindarajanprashanth@gmail.com",
            "key": "govindarajanprashanth@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Prashanth Govindarajan",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334712",
                "id": "12334712",
                "name": "C#"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=govindarajanprashanth%40gmail.com",
            "name": "govindarajanprashanth@gmail.com",
            "key": "govindarajanprashanth@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Prashanth Govindarajan",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=govindarajanprashanth%40gmail.com",
            "name": "govindarajanprashanth@gmail.com",
            "key": "govindarajanprashanth@gmail.com",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Prashanth Govindarajan",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 25200,
            "total": 25200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 25200,
            "total": 25200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4620/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 42,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/201698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pgovind commented on pull request #3662: ARROW-4620: Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r257854019\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,38 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            if (this == obj)\n+            {\n+                return true;\n+            }\n+            if (obj == null || !this.GetType().Equals(obj.GetType()))\n+            {\n+                return false;\n+            }\n+\n+            Field other = (Field)obj;\n+            if (this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n \n Review comment:\n   Is there a more efficient way to do this? As it stands, this is 2 iterations over the dictionaries. While not really bad in this case, since presumably the metadata will usually be small, I wonder how this performs with huge dictionaries.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T00:12:17.123+0000",
                    "updated": "2019-02-21T00:12:17.123+0000",
                    "started": "2019-02-21T00:12:17.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "201698",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259009671\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Schema.cs\n ##########\n @@ -63,5 +63,68 @@ public int GetFieldIndex(string name, StringComparer comparer = default)\n             return _fields.IndexOf(\n                 _fields.Single(x => comparer.Compare(x.Name, name) == 0));\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            if (obj == null || !this.GetType().Equals(obj.GetType()))\n \n Review comment:\n   Checkout the code generated by VS, it is a simpler implementation:\r\n   \r\n   [https://docs.microsoft.com/en-us/visualstudio/ide/reference/generate-equals-gethashcode-methods?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/ide/reference/generate-equals-gethashcode-methods?view=vs-2017)\r\n   \r\n   ```C#\r\n   public override bool Equals(object obj)\r\n   {\r\n       return Equals(obj as XXX);\r\n   }\r\n   \r\n   public bool Equals(XXX other)\r\n   {\r\n       return other != null && ...\r\n   }\r\n   ```\r\n   \r\n   Plus, the way you have it below, `Equals(Schema other)` will null ref if other is null.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T16:31:51.303+0000",
                    "updated": "2019-02-21T16:31:51.303+0000",
                    "started": "2019-02-21T16:31:51.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202051",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259009910\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Schema.cs\n ##########\n @@ -63,5 +63,68 @@ public int GetFieldIndex(string name, StringComparer comparer = default)\n             return _fields.IndexOf(\n                 _fields.Single(x => comparer.Compare(x.Name, name) == 0));\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            if (obj == null || !this.GetType().Equals(obj.GetType()))\n+            {\n+                return false;\n+            }\n+            return Equals((Schema)obj);\n+        }\n+\n+        public bool Equals(Schema other)\n+        {\n+            if (this == other)\n+            {\n+                return true;\n+            }\n+            var otherFields = other._fields;\n+\n+            if (this.HasMetadata != other.HasMetadata)\n+            {\n+                return false;\n+            }\n+            if (this._fields.Count != otherFields.Count)\n+            {\n+                return false;\n+            }\n+            \n+            for (int ii = 0; ii < _fields.Count; ii++)\n+            {\n+                if (!_fields[ii].Equals(otherFields[ii]))\n+                {\n+                    return false;\n+                }\n+            }\n+\n+            if (this.HasMetadata && other.HasMetadata)\n+            {\n+                return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                       this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                       other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n+                //return this.Metadata.OrderBy(r => r.Key).SequenceEqual(other.Metadata.OrderBy(r => r.Key));\n \n Review comment:\n   In general, we shouldn't check in commented out code unless there is a super good reason for it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T16:32:23.604+0000",
                    "updated": "2019-02-21T16:32:23.604+0000",
                    "started": "2019-02-21T16:32:23.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202052",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259018359\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Schema.cs\n ##########\n @@ -63,5 +63,68 @@ public int GetFieldIndex(string name, StringComparer comparer = default)\n             return _fields.IndexOf(\n                 _fields.Single(x => comparer.Compare(x.Name, name) == 0));\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            if (obj == null || !this.GetType().Equals(obj.GetType()))\n+            {\n+                return false;\n+            }\n+            return Equals((Schema)obj);\n+        }\n+\n+        public bool Equals(Schema other)\n+        {\n+            if (this == other)\n+            {\n+                return true;\n+            }\n+            var otherFields = other._fields;\n+\n+            if (this.HasMetadata != other.HasMetadata)\n+            {\n+                return false;\n+            }\n+            if (this._fields.Count != otherFields.Count)\n+            {\n+                return false;\n+            }\n+            \n+            for (int ii = 0; ii < _fields.Count; ii++)\n+            {\n+                if (!_fields[ii].Equals(otherFields[ii]))\n+                {\n+                    return false;\n+                }\n+            }\n+\n+            if (this.HasMetadata && other.HasMetadata)\n+            {\n+                return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                       this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                       other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n+                //return this.Metadata.OrderBy(r => r.Key).SequenceEqual(other.Metadata.OrderBy(r => r.Key));\n+            }\n+            return true;\n+        }\n+\n+        public override int GetHashCode()\n+        {\n+            int fieldHashCodes = 0;\n \n Review comment:\n   If you want some really good reading on hash codes, check out [https://blogs.msdn.microsoft.com/ericlippert/2011/02/28/guidelines-and-rules-for-gethashcode/](https://blogs.msdn.microsoft.com/ericlippert/2011/02/28/guidelines-and-rules-for-gethashcode/).\r\n   \r\n   There are also numerous articles on stack overflow, like [https://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode](https://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode).\r\n   \r\n   The .NET BCL (base class library) finally decided to make it easier to implement GetHashCode by providing some hash APIs:\r\n   \r\n   [https://github.com/dotnet/corefx/issues/14354](https://github.com/dotnet/corefx/issues/14354)\r\n   \r\n   But the issue there is that the new `HashCode` APIs are only available on `.NET Core 2.1`. So we will have to write our own GetHashCode implementations.\r\n   \r\n   Maybe one option is using the [HashCodeCombiner](https://github.com/aspnet/Extensions/blob/master/src/Shared/src/HashCodeCombiner/HashCodeCombiner.cs) from ASP.NET's code? It is already Apache License 2.0, so we shouldn't have any problems with the license.\r\n   \r\n   @wesm - would copying that one file into this repo be an issue?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T16:50:20.567+0000",
                    "updated": "2019-02-21T16:50:20.567+0000",
                    "started": "2019-02-21T16:50:20.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202070",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259018736\n \n \n\n ##########\n File path: csharp/test/Apache.Arrow.Tests/SchemaBuilderTests.cs\n ##########\n @@ -57,6 +58,81 @@ public void FieldNameIsRequired()\n                 });\n             }\n \n+            [Fact]\n+            public void GetFieldIndex()\n+            {\n+                var schema = new Schema.Builder()\n+                    .Field(f => f.Name(\"f0\").DataType(Int32Type.Default))\n+                    .Field(f => f.Name(\"f1\").DataType(Int8Type.Default))\n+                    .Build();\n+                Assert.True(schema.GetFieldIndex(\"f0\") == 0 && schema.GetFieldIndex(\"f1\") == 1);\n+            }\n+\n+\n+            [Fact]\n+            public void GetFieldByName()\n+            {\n+                Field f0 = new Field.Builder().Name(\"f0\").DataType(Int32Type.Default).Build();\n+                Field f1 = new Field.Builder().Name(\"f1\").DataType(Int8Type.Default).Build();\n+\n+                var schema = new Schema.Builder()\n+                    .Field(f0)\n+                    .Field(f1)\n+                    .Build();\n+                Assert.True(schema.GetFieldByName(\"f0\") == f0 && schema.GetFieldByName(\"f1\") == f1);\n+            }\n+\n+            [Fact]\n+            public void MetadataConstruction()\n+            {\n+\n+                var metadata0 = new Dictionary<string, string> { { \"foo\", \"bar\" }, { \"bizz\", \"buzz\" } };\n+                var metadata1 = new Dictionary<string, string> { { \"foo\", \"bar\" } };\n+                var metadata0Copy = new Dictionary<string, string>(metadata0);\n+                var metadata1Copy = new Dictionary<string, string>(metadata1);\n+                Field f0 = new Field.Builder().Name(\"f0\").DataType(Int32Type.Default).Build();\n+                Field f1 = new Field.Builder().Name(\"f1\").DataType(UInt8Type.Default).Nullable(false).Build();\n+                Field f2 = new Field.Builder().Name(\"f2\").DataType(StringType.Default).Build();\n+                Field f3 = new Field.Builder().Name(\"f2\").DataType(StringType.Default).Metadata(metadata1Copy).Build();\n+\n+                var schema0 = new Schema.Builder()\n+                    .Field(f0)\n+                    .Field(f1)\n+                    .Field(f2)\n+                    .Metadata(metadata0)\n+                    .Build();\n+                var schema1 = new Schema.Builder()\n+                    .Field(f0)\n+                    .Field(f1)\n+                    .Field(f2)\n+                    .Metadata(metadata1)\n+                    .Build();\n+                var schema2 = new Schema.Builder()\n+                    .Field(f0)\n+                    .Field(f1)\n+                    .Field(f2)\n+                    .Metadata(metadata0Copy)\n+                    .Build();\n+                var schema3 = new Schema.Builder()\n+                    .Field(f0)\n+                    .Field(f1)\n+                    .Field(f3)\n+                    .Metadata(metadata0Copy)\n+                    .Build();\n+\n+                Assert.True(metadata0.Keys.SequenceEqual(schema0.Metadata.Keys) && metadata0.Values.SequenceEqual(schema0.Metadata.Values));\n+                Assert.True(metadata1.Keys.SequenceEqual(schema1.Metadata.Keys) && metadata1.Values.SequenceEqual(schema1.Metadata.Values));\n+                Assert.True(metadata0.Keys.SequenceEqual(schema2.Metadata.Keys) && metadata0.Values.SequenceEqual(schema2.Metadata.Values));\n+                Assert.True(schema0.Equals(schema2));\n+                Assert.True(schema0.GetHashCode() == schema2.GetHashCode());\n \n Review comment:\n   Don't use `Assert.True` for equality.  Instead use `Assert.Equal` and `Assert.NotEqual`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T16:51:05.527+0000",
                    "updated": "2019-02-21T16:51:05.527+0000",
                    "started": "2019-02-21T16:51:05.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202072",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259033319\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Schema.cs\n ##########\n @@ -63,5 +63,68 @@ public int GetFieldIndex(string name, StringComparer comparer = default)\n             return _fields.IndexOf(\n                 _fields.Single(x => comparer.Compare(x.Name, name) == 0));\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            if (obj == null || !this.GetType().Equals(obj.GetType()))\n+            {\n+                return false;\n+            }\n+            return Equals((Schema)obj);\n+        }\n+\n+        public bool Equals(Schema other)\n+        {\n+            if (this == other)\n+            {\n+                return true;\n+            }\n+            var otherFields = other._fields;\n+\n+            if (this.HasMetadata != other.HasMetadata)\n+            {\n+                return false;\n+            }\n+            if (this._fields.Count != otherFields.Count)\n+            {\n+                return false;\n+            }\n+            \n+            for (int ii = 0; ii < _fields.Count; ii++)\n+            {\n+                if (!_fields[ii].Equals(otherFields[ii]))\n+                {\n+                    return false;\n+                }\n+            }\n+\n+            if (this.HasMetadata && other.HasMetadata)\n \n Review comment:\n   @stephentoub - have you ever seen a type that internally has a `Dictionary` that overrides `Equals`? Is there a \"typical\" way of comparing and hashing a `Dictionary`?\r\n   \r\n   @pgovind - maybe the question should be: do we need to override `Equals` on `Schema` and `Field`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T17:25:42.138+0000",
                    "updated": "2019-02-21T17:25:42.138+0000",
                    "started": "2019-02-21T17:25:42.137+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202103",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259093849\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Schema.cs\n ##########\n @@ -63,5 +63,68 @@ public int GetFieldIndex(string name, StringComparer comparer = default)\n             return _fields.IndexOf(\n                 _fields.Single(x => comparer.Compare(x.Name, name) == 0));\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            if (obj == null || !this.GetType().Equals(obj.GetType()))\n+            {\n+                return false;\n+            }\n+            return Equals((Schema)obj);\n+        }\n+\n+        public bool Equals(Schema other)\n+        {\n+            if (this == other)\n+            {\n+                return true;\n+            }\n+            var otherFields = other._fields;\n+\n+            if (this.HasMetadata != other.HasMetadata)\n+            {\n+                return false;\n+            }\n+            if (this._fields.Count != otherFields.Count)\n+            {\n+                return false;\n+            }\n+            \n+            for (int ii = 0; ii < _fields.Count; ii++)\n+            {\n+                if (!_fields[ii].Equals(otherFields[ii]))\n+                {\n+                    return false;\n+                }\n+            }\n+\n+            if (this.HasMetadata && other.HasMetadata)\n \n Review comment:\n   > have you ever seen a type that internally has a Dictionary that overrides Equals? Is there a \"typical\" way of comparing and hashing a Dictionary?\r\n   \r\n   Yeah, they come up here and there.  For example, it's not exactly a `Dictionary`, but it's the same idea:\r\n   https://github.com/dotnet/corefx/blob/1c802d6d8c06b727c102c00e5eb4224de9608a16/src/System.Net.Http/src/System/Net/Http/Headers/MediaTypeHeaderValue.cs#L113-L124\r\n   \r\n   > Is there a \"typical\" way of comparing and hashing a Dictionary?\r\n   \r\n   In such cases I often see the collection left out of the hash.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-21T20:03:51.890+0000",
                    "updated": "2019-02-21T20:03:51.890+0000",
                    "started": "2019-02-21T20:03:51.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202194",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259435233\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   This makes Equals quite expensive.\r\n   \r\n   Does Field actually need to be `IEquatable<Field>`?  What benefit does it provide?  I'm curious because this PR is titled being about tests but is updating public API in the src.\r\n   \r\n   If for some reason it is required, it'd be better to avoid LINQ as part of this, calls to Count(), etc.  There are faster ways to achieve this that allocate less.  In particular, `Metadata` is being exposed as an `IReadOnlyDictionary<>`, but we create it as a `Dictionary<>` and so could operate on it as such; that would mean changing the property from `public IReadOnlyDictionary<string, string> Metadata { get; }` to `public IReadOnlyDictionary<string, string> Metadata => _metadata;` and declaring a field `private readonly Dictionary<string, string> _metdata;` that's then initialized in the ctor and that we directly acces in places like this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T17:19:32.893+0000",
                    "updated": "2019-02-22T17:19:32.893+0000",
                    "started": "2019-02-22T17:19:32.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202745",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pgovind commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259462619\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   Yup, I agree that this makes Equals expensive. On the other hand, I don't see any faster paths to compare 2 dictionaries when I need to ensure that the data in the 2 dictionaries are exactly the same though. \r\n   \r\n   I could add a parameter to the method to skip the metadata checks by default. That would make the method faster, but that means 2 Field objects, one with metadata and one without, would evaluate to equal => GetHashCode() would need similar behavior. I'm ok with doing that if that seems acceptable? Also, I haven't seen real big datasets yet, so this may not be true, but I think the metadata dictionary will be pretty small(if even present) for most cases?\r\n   \r\n   For why Field needs IEquatable<>, TypeTests::Equality() calls \r\n   `Assert.True(f0_nullable.Equals(f0_other));`\r\n   Granted, this is a trivial test case now, but I need this to build tests around other things. For ex: I'm writing a test now to roundtrip a Schema to a stream to test I/O. After the read back from the stream, I'm calling `readInSchema.Equals(inSchema)`. Schema.Equals internally calls Field.Equals. \r\n   \r\n   I'll push an update to avoid the LINQ calls soon\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T18:36:59.210+0000",
                    "updated": "2019-02-22T18:36:59.210+0000",
                    "started": "2019-02-22T18:36:59.210+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202786",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259499794\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   @stephentoub @eerhardt Should there be IEqualityComparer<Schema> / IEqualityComparer<Field> types in order to test schema/field equality? A clear use case would be to check if two schemas are equivalent, although you can make an argument that equivalence and equality are different concerns. A question out of curiosity. Our internal product will eventually involve checking for schema equivalence.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T20:30:03.716+0000",
                    "updated": "2019-02-22T20:30:03.716+0000",
                    "started": "2019-02-22T20:30:03.712+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202856",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "chutchinson commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259499794\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   @stephentoub @eerhardt Should there be **IEqualityComparer&lt;Schema&gt;** / **IEqualityComparer&lt;Field&gt;** types in order to test schema/field equality? A clear use case would be to check if two schemas are equivalent, although you can make an argument that equivalence and equality are different concerns. A question out of curiosity. Our internal product will eventually involve checking for schema equivalence.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T20:30:34.318+0000",
                    "updated": "2019-02-22T20:30:34.318+0000",
                    "started": "2019-02-22T20:30:34.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202857",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/202870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pgovind commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259509482\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   I filed https://issues.apache.org/jira/browse/ARROW-4666 to implement IEqualityComparer<Schema/Field>\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-22T21:04:00.891+0000",
                    "updated": "2019-02-22T21:04:00.891+0000",
                    "started": "2019-02-22T21:04:00.891+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "202870",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/203314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259639488\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   > For why Field needs IEquatable<>, TypeTests::Equality() calls\r\n   Assert.True(f0_nullable.Equals(f0_other));\r\n   \r\n   That's a brand new test you're adding, specifically around Equals... so this is saying that the API needs to override Equals because a new test that's being added expects it to override Equals.  That doesn't make sense to me.  Can you clarify?\r\n   \r\n   If your goal is just to validate that two schemas/fields are equal, then you can do that in whatever way the tests desire in those tests, e.g. by creating a method that compares two fields or schemas, or by providing an `IEqualityComparer<Field/Schema>` in the tests.  As @chutchinson suggests, there could even be such a comparer added to the source rather than or in addition to in the tests, but that should be driven by code we actually expect developers to write/need to write against the public APIs, not what a particular test may need to be simpler.  Similarly, it might be desirable for Field/Schema to override Equals/GetHashCode, but that should be driven by what consumers of these APIs need, not by a desire to use them in tests.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:50:07.836+0000",
                    "updated": "2019-02-24T20:50:07.836+0000",
                    "started": "2019-02-24T20:50:07.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203314",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/203316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259639488\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   > For why Field needs IEquatable<>, TypeTests::Equality() calls\r\n   Assert.True(f0_nullable.Equals(f0_other));\r\n   \r\n   That's a brand new test you're adding, specifically around Equals... so this is saying that the API needs to override Equals because a new test that's being added expects it to override Equals.  That doesn't make sense to me.  Can you clarify?\r\n   \r\n   If your goal is just to validate that two schemas/fields are equal, then you can do that in whatever way the tests desire in those tests (all of the state the Equals method is relying on is even already public), e.g. by creating a method that compares two fields or schemas, or by providing an `IEqualityComparer<Field/Schema>` in the tests.  As @chutchinson suggests, there could even be such a comparer added to the source rather than or in addition to in the tests, but that should be driven by code we actually expect developers to write/need to write against the public APIs, not what a particular test may need to be simpler.  Similarly, it might be desirable for Field/Schema to override Equals/GetHashCode, but that should be driven by what consumers of these APIs need, not by a desire to use them in tests.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:52:00.366+0000",
                    "updated": "2019-02-24T20:52:00.366+0000",
                    "started": "2019-02-24T20:52:00.364+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203316",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/203317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stephentoub commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r259639488\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -45,5 +45,41 @@ public partial class Field\n             IsNullable = nullable;\n             Metadata = metadata?.ToDictionary(kv => kv.Key, kv => kv.Value);\n         }\n+\n+        public override bool Equals(object obj)\n+        {\n+            return Equals(obj as Field);\n+        }\n+\n+        public bool Equals(Field other)\n+        {\n+            if (other != null && this.Name == other.Name && this.IsNullable == other.IsNullable &&\n+                this.DataType.TypeId == other.DataType.TypeId && HasMetadata == other.HasMetadata)\n+            {\n+                if (this.HasMetadata && other.HasMetadata)\n+                {\n+                    return this.Metadata.Keys.Count() == other.Metadata.Keys.Count() &&\n+                           this.Metadata.Keys.All(k => other.Metadata.ContainsKey(k) && this.Metadata[k] == other.Metadata[k]) &&\n+                           other.Metadata.Keys.All(k => this.Metadata.ContainsKey(k) && other.Metadata[k] == this.Metadata[k]);\n \n Review comment:\n   > For why Field needs IEquatable<>, TypeTests::Equality() calls\r\n   Assert.True(f0_nullable.Equals(f0_other));\r\n   \r\n   That's a brand new test you're adding, specifically around Equals... so this is saying that the API needs to override Equals because a new test that's being added expects it to override Equals.  That doesn't make sense to me.  Can you clarify?\r\n   \r\n   If your goal is just to validate that two schemas/fields are equal, then you can do that in whatever way the tests desire in those tests (all of the state the Equals method is relying on is even already public), e.g. by creating a method that compares two fields or schemas, or by providing an `IEqualityComparer<Field/Schema>` in the tests.  As @chutchinson suggests, there could even be such a comparer added to the source rather than or in addition to in the tests, but that should be driven by code we actually expect developers to write/need to write against the public APIs, not what a particular test may need to be simpler.  Similarly, it might be desirable for Field/Schema to override Equals/GetHashCode, but that should be driven by what consumers of these APIs need, not by a desire to use them in tests, i.e. what are the use cases that drive that need?  Do these implementations meet those production scenarios, even with the costs they incur?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-24T20:52:35.512+0000",
                    "updated": "2019-02-24T20:52:35.512+0000",
                    "started": "2019-02-24T20:52:35.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203317",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/203999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pgovind commented on issue #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#issuecomment-467244651\n \n \n   Ok, so I see Stephen's point and I updated the PR to make it much narrower now. Like he suggested, I added the equality checks as static methods in the test case code. It's static because other unit tests will likely need those methods. I also didn't need to implement GetHashCode or IEquatable this way. If we really want IEquatable, we can implement it against https://issues.apache.org/jira/browse/ARROW-4666 when the need comes up. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T00:43:29.883+0000",
                    "updated": "2019-02-26T00:43:29.883+0000",
                    "started": "2019-02-26T00:43:29.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "203999",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/204610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r260403914\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Schema.cs\n ##########\n @@ -19,7 +19,7 @@\n \n namespace Apache.Arrow\n {\n-    public partial class Schema\n+    public partial class Schema \n \n Review comment:\n   (nit) - revert the change to this file.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T17:37:33.634+0000",
                    "updated": "2019-02-26T17:37:33.634+0000",
                    "started": "2019-02-26T17:37:33.634+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204610",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/204611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r260404108\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.cs\n ##########\n @@ -13,10 +13,10 @@\n // See the License for the specific language governing permissions and\n // limitations under the License.\n \n+using Apache.Arrow.Types;\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using Apache.Arrow.Types;\n \n Review comment:\n   (nit) we should revert this change. It isn't worth cluttering the history of the file for sorting namespaces.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T17:38:00.536+0000",
                    "updated": "2019-02-26T17:38:00.536+0000",
                    "started": "2019-02-26T17:38:00.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204611",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/204612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r260404605\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.Builder.cs\n ##########\n @@ -70,6 +70,15 @@ public Builder Metadata(string key, string value)\n                 return this;\n             }\n \n+            public Builder Metadata(IEnumerable<KeyValuePair<string, string>> dict)\n \n Review comment:\n   Should check for `null` dict.\r\n   \r\n   Also `dict` should be spelled out. See [https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions)\r\n   \r\n   > X DO NOT use abbreviations or contractions as part of identifier names.\r\n   > For example, use GetWindow rather than GetWin.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T17:39:05.647+0000",
                    "updated": "2019-02-26T17:39:05.647+0000",
                    "started": "2019-02-26T17:39:05.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204612",
                    "issueId": "13216482"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/worklog/204614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "eerhardt commented on pull request #3662: ARROW-4620: [C#] Add unit tests for \"Types\" in arrow/csharp\nURL: https://github.com/apache/arrow/pull/3662#discussion_r260405198\n \n \n\n ##########\n File path: csharp/src/Apache.Arrow/Field.Builder.cs\n ##########\n @@ -70,6 +70,15 @@ public Builder Metadata(string key, string value)\n                 return this;\n             }\n \n+            public Builder Metadata(IEnumerable<KeyValuePair<string, string>> dict)\n+            {\n+                foreach (KeyValuePair<string, string> entry in dict)\n+                {\n+                    this.Metadata(entry.Key, entry.Value);\n \n Review comment:\n   I'm not sure on the coding styles used in this repo, but on our team we prefer to not use `this` when it isn't necessary.\r\n   \r\n   See (4) here: [https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-02-26T17:40:34.041+0000",
                    "updated": "2019-02-26T17:40:34.041+0000",
                    "started": "2019-02-26T17:40:34.040+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "204614",
                    "issueId": "13216482"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 25200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@15c6f734[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4fc8bd31[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@261a0ff7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2cb11f30[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29ca5a7a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@14086718[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@629bb7d9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@46f77c25[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d15f70b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6a726716[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@556830fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@28037822[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 25200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Mar 12 16:14:47 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-03-12T16:14:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4620/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-02-19T00:18:57.000+0000",
        "updated": "2019-03-12T16:15:24.000+0000",
        "timeoriginalestimate": null,
        "description": "Arrow/cpp has tests for \"Types\" under type-test.cc. Port all applicable tests to the csharp implementation",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 25200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C#] Add unit tests for \"Types\" in arrow/csharp",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13216482/comment/16790699",
                    "id": "16790699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 3662\n[https://github.com/apache/arrow/pull/3662]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-03-12T16:14:47.191+0000",
                    "updated": "2019-03-12T16:14:47.191+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi13ww:",
        "customfield_12314139": null
    }
}