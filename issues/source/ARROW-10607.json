{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13340750",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750",
    "key": "ARROW-10607",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10607/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/523041",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield opened a new pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897\n\n\n   - Refactor common code (DecimalSize, FromBigEndian) to places in arrow\r\n   - Support writing Decimal256 as FLBA\r\n   - Support reading Decimal256 from bytes and FLBA.  Integer types\r\n     don't seem like they would be worthwhile to ever convert to Decimal256\r\n     and the code path is hard to test.\r\n   - Adds addition and shift operators to Decimal256 to support testing.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-11T06:41:49.167+0000",
                    "updated": "2020-12-11T06:41:49.167+0000",
                    "started": "2020-12-11T06:41:49.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523041",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/523058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#issuecomment-743022849\n\n\n   https://issues.apache.org/jira/browse/ARROW-10607\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-11T07:20:10.643+0000",
                    "updated": "2020-12-11T07:20:10.643+0000",
                    "started": "2020-12-11T07:20:10.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523058",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/523088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#issuecomment-743054664\n\n\n   will fix build tomorrow.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-11T08:35:49.618+0000",
                    "updated": "2020-12-11T08:35:49.618+0000",
                    "started": "2020-12-11T08:35:49.618+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523088",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/523893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542391497\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_cast_numeric.cc\n##########\n@@ -655,6 +666,7 @@ std::vector<std::shared_ptr<CastFunction>> GetNumericCasts() {\n   functions.push_back(GetCastToFloating<DoubleType>(\"cast_double\"));\n \n   functions.push_back(GetCastToDecimal());\n\nReview comment:\n       Nit: `GetCastToDecimal128`?\n\n##########\nFile path: cpp/src/arrow/type.cc\n##########\n@@ -747,6 +747,75 @@ std::vector<std::shared_ptr<Field>> StructType::GetAllFieldsByName(\n   return result;\n }\n \n+// Taken from the Apache Impala codebase. The comments next\n+// to the return values are the maximum value that can be represented in 2's\n+// complement with the returned number of bytes.\n+int32_t DecimalType::DecimalSize(int32_t precision) {\n+  DCHECK_GE(precision, 1) << \"decimal precision must be greater than or equal to 1, got \"\n+                          << precision;\n+\n+  switch (precision) {\n+    case 1:\n+    case 2:\n+      return 1;  // 127\n+    case 3:\n+    case 4:\n+      return 2;  // 32,767\n+    case 5:\n+    case 6:\n+      return 3;  // 8,388,607\n+    case 7:\n+    case 8:\n+    case 9:\n+      return 4;  // 2,147,483,427\n+    case 10:\n+    case 11:\n+      return 5;  // 549,755,813,887\n+    case 12:\n+    case 13:\n+    case 14:\n+      return 6;  // 140,737,488,355,327\n+    case 15:\n+    case 16:\n+      return 7;  // 36,028,797,018,963,967\n+    case 17:\n+    case 18:\n+      return 8;  // 9,223,372,036,854,775,807\n+    case 19:\n+    case 20:\n+    case 21:\n+      return 9;  // 2,361,183,241,434,822,606,847\n+    case 22:\n+    case 23:\n+      return 10;  // 604,462,909,807,314,587,353,087\n+    case 24:\n+    case 25:\n+    case 26:\n+      return 11;  // 154,742,504,910,672,534,362,390,527\n+    case 27:\n+    case 28:\n+      return 12;  // 39,614,081,257,132,168,796,771,975,167\n+    case 29:\n+    case 30:\n+    case 31:\n+      return 13;  // 10,141,204,801,825,835,211,973,625,643,007\n+    case 32:\n+    case 33:\n+      return 14;  // 2,596,148,429,267,413,814,265,248,164,610,047\n+    case 34:\n+    case 35:\n+      return 15;  // 664,613,997,892,457,936,451,903,530,140,172,287\n+    case 36:\n+    case 37:\n+    case 38:\n+      return 16;  // 170,141,183,460,469,231,731,687,303,715,884,105,727\n+    default:\n+      return static_cast<int32_t>(std::ceil((precision / 8.0) * std::log2(10)));\n\nReview comment:\n       The entire range can be precomputed:\r\n   ```python\r\n   >>> decimal_size = lambda prec: int(math.ceil((prec * math.log2(10) + 1) / 8))\r\n   >>> [decimal_size(i) for i in range(1, 77)]\r\n   [1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 18, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 26, 26, 26, 27, 27, 28, 28, 28, 29, 29, 30, 30, 31, 31, 31, 32, 32]\r\n   ```\r\n   \r\n   So just make it a static array of integers instead of the humongous switch statement + runtime computation?\r\n   (also your formula above is incorrect, it misses the adjustment for the sign bit)\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.h\n##########\n@@ -303,6 +314,10 @@ ARROW_EXPORT inline bool operator>=(const BasicDecimal256& left,\n   return !operator<(left, right);\n }\n \n+ARROW_EXPORT BasicDecimal256 operator-(const BasicDecimal256& operand);\n+ARROW_EXPORT BasicDecimal256 operator~(const BasicDecimal256& operand);\n+ARROW_EXPORT BasicDecimal256 operator+(const BasicDecimal256& left,\n+                                       const BasicDecimal256& right);\n\nReview comment:\n       No binary `operator-`? \n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -369,225 +371,134 @@ Status TransferBinary(RecordReader* reader, MemoryPool* pool,\n }\n \n // ----------------------------------------------------------------------\n-// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128\n-\n-static uint64_t BytesToInteger(const uint8_t* bytes, int32_t start, int32_t stop) {\n-  const int32_t length = stop - start;\n-\n-  DCHECK_GE(length, 0);\n-  DCHECK_LE(length, 8);\n-\n-  switch (length) {\n-    case 0:\n-      return 0;\n-    case 1:\n-      return bytes[start];\n-    case 2:\n-      return FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-    case 3: {\n-      const uint64_t first_two_bytes = FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_two_bytes << 8 | last_byte;\n-    }\n-    case 4:\n-      return FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-    case 5: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 8 | last_byte;\n-    }\n-    case 6: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      return first_four_bytes << 16 | last_two_bytes;\n-    }\n-    case 7: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t second_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 24 | second_two_bytes << 8 | last_byte;\n-    }\n-    case 8:\n-      return FromBigEndian(SafeLoadAs<uint64_t>(bytes + start));\n-    default: {\n-      DCHECK(false);\n-      return UINT64_MAX;\n-    }\n-  }\n-}\n-\n-static constexpr int32_t kMinDecimalBytes = 1;\n-static constexpr int32_t kMaxDecimalBytes = 16;\n-\n-/// \\brief Convert a sequence of big-endian bytes to one int64_t (high bits) and one\n-/// uint64_t (low bits).\n-static void BytesToIntegerPair(const uint8_t* bytes, const int32_t length,\n-                               int64_t* out_high, uint64_t* out_low) {\n-  DCHECK_GE(length, kMinDecimalBytes);\n-  DCHECK_LE(length, kMaxDecimalBytes);\n-\n-  // XXX This code is copied from Decimal::FromBigEndian\n-\n-  int64_t high, low;\n-\n-  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n-  // sign bit.\n-  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n-\n-  // 1. Extract the high bytes\n-  // Stop byte of the high bytes\n-  const int32_t high_bits_offset = std::max(0, length - 8);\n-  const auto high_bits = BytesToInteger(bytes, 0, high_bits_offset);\n-\n-  if (high_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    high = high_bits;\n-  } else {\n-    high = -1 * (is_negative && length < kMaxDecimalBytes);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    high = SafeLeftShift(high, high_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    high |= high_bits;\n-  }\n-\n-  // 2. Extract the low bytes\n-  // Stop byte of the low bytes\n-  const int32_t low_bits_offset = std::min(length, 8);\n-  const auto low_bits = BytesToInteger(bytes, high_bits_offset, length);\n-\n-  if (low_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    low = low_bits;\n-  } else {\n-    // Sign extend the low bits if necessary\n-    low = -1 * (is_negative && length < 8);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    low = SafeLeftShift(low, low_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    low |= low_bits;\n-  }\n-\n-  *out_high = high;\n-  *out_low = static_cast<uint64_t>(low);\n+// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128 || Decimal256\n+\n+template <typename DecimalType>\n+Status RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n+                              uint8_t* out_buf) {\n+  ARROW_ASSIGN_OR_RAISE(DecimalType t, DecimalType::FromBigEndian(value, byte_width));\n+  t.ToBytes(out_buf);\n+  return ::arrow::Status::OK();\n }\n \n-static inline void RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n-                                          uint8_t* out_buf) {\n-  // view the first 8 bytes as an unsigned 64-bit integer\n-  auto low = reinterpret_cast<uint64_t*>(out_buf);\n+template <typename DecimalArrayType>\n+struct DecimalTypeTrait;\n \n-  // view the second 8 bytes as a signed 64-bit integer\n-  auto high = reinterpret_cast<int64_t*>(out_buf + sizeof(uint64_t));\n-\n-  // Convert the fixed size binary array bytes into a Decimal128 compatible layout\n-  BytesToIntegerPair(value, byte_width, high, low);\n-}\n-\n-template <typename T>\n-Status ConvertToDecimal128(const Array& array, const std::shared_ptr<DataType>&,\n-                           MemoryPool* pool, std::shared_ptr<Array>*) {\n-  return Status::NotImplemented(\"not implemented\");\n-}\n+template <>\n+struct DecimalTypeTrait<::arrow::Decimal128Array> {\n+  using value = ::arrow::Decimal128;\n+};\n \n template <>\n-Status ConvertToDecimal128<FLBAType>(const Array& array,\n-                                     const std::shared_ptr<DataType>& type,\n-                                     MemoryPool* pool, std::shared_ptr<Array>* out) {\n-  const auto& fixed_size_binary_array =\n-      static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n-\n-  // The byte width of each decimal value\n-  const int32_t type_length =\n-      static_cast<const ::arrow::Decimal128Type&>(*type).byte_width();\n-\n-  // number of elements in the entire array\n-  const int64_t length = fixed_size_binary_array.length();\n-\n-  // Get the byte width of the values in the FixedSizeBinaryArray. Most of the time\n-  // this will be different from the decimal array width because we write the minimum\n-  // number of bytes necessary to represent a given precision\n-  const int32_t byte_width =\n-      static_cast<const ::arrow::FixedSizeBinaryType&>(*fixed_size_binary_array.type())\n-          .byte_width();\n-  if (byte_width < kMinDecimalBytes || byte_width > kMaxDecimalBytes) {\n-    return Status::Invalid(\"Invalid FIXED_LEN_BYTE_ARRAY length for Decimal128\");\n+struct DecimalTypeTrait<::arrow::Decimal256Array> {\n+  using value = ::arrow::Decimal256;\n+};\n+\n+template <typename DecimalArrayType, typename ParquetType>\n+struct DecimalConverter {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>&,\n+                                        MemoryPool* pool, std::shared_ptr<Array>*) {\n+    return Status::NotImplemented(\"not implemented\");\n   }\n-\n-  // allocate memory for the decimal array\n-  ARROW_ASSIGN_OR_RAISE(auto data, ::arrow::AllocateBuffer(length * type_length, pool));\n-\n-  // raw bytes that we can write to\n-  uint8_t* out_ptr = data->mutable_data();\n-\n-  // convert each FixedSizeBinary value to valid decimal bytes\n-  const int64_t null_count = fixed_size_binary_array.null_count();\n-  if (null_count > 0) {\n-    for (int64_t i = 0; i < length; ++i, out_ptr += type_length) {\n-      if (!fixed_size_binary_array.IsNull(i)) {\n-        RawBytesToDecimalBytes(fixed_size_binary_array.GetValue(i), byte_width, out_ptr);\n+};\n+\n+template <typename DecimalArrayType>\n+struct DecimalConverter<DecimalArrayType, FLBAType> {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>& type,\n+                                        MemoryPool* pool, std::shared_ptr<Array>* out) {\n+    const auto& fixed_size_binary_array =\n+        static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n\nReview comment:\n       Use `checked_cast`?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -369,225 +371,134 @@ Status TransferBinary(RecordReader* reader, MemoryPool* pool,\n }\n \n // ----------------------------------------------------------------------\n-// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128\n-\n-static uint64_t BytesToInteger(const uint8_t* bytes, int32_t start, int32_t stop) {\n-  const int32_t length = stop - start;\n-\n-  DCHECK_GE(length, 0);\n-  DCHECK_LE(length, 8);\n-\n-  switch (length) {\n-    case 0:\n-      return 0;\n-    case 1:\n-      return bytes[start];\n-    case 2:\n-      return FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-    case 3: {\n-      const uint64_t first_two_bytes = FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_two_bytes << 8 | last_byte;\n-    }\n-    case 4:\n-      return FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-    case 5: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 8 | last_byte;\n-    }\n-    case 6: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      return first_four_bytes << 16 | last_two_bytes;\n-    }\n-    case 7: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t second_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 24 | second_two_bytes << 8 | last_byte;\n-    }\n-    case 8:\n-      return FromBigEndian(SafeLoadAs<uint64_t>(bytes + start));\n-    default: {\n-      DCHECK(false);\n-      return UINT64_MAX;\n-    }\n-  }\n-}\n-\n-static constexpr int32_t kMinDecimalBytes = 1;\n-static constexpr int32_t kMaxDecimalBytes = 16;\n-\n-/// \\brief Convert a sequence of big-endian bytes to one int64_t (high bits) and one\n-/// uint64_t (low bits).\n-static void BytesToIntegerPair(const uint8_t* bytes, const int32_t length,\n-                               int64_t* out_high, uint64_t* out_low) {\n-  DCHECK_GE(length, kMinDecimalBytes);\n-  DCHECK_LE(length, kMaxDecimalBytes);\n-\n-  // XXX This code is copied from Decimal::FromBigEndian\n-\n-  int64_t high, low;\n-\n-  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n-  // sign bit.\n-  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n-\n-  // 1. Extract the high bytes\n-  // Stop byte of the high bytes\n-  const int32_t high_bits_offset = std::max(0, length - 8);\n-  const auto high_bits = BytesToInteger(bytes, 0, high_bits_offset);\n-\n-  if (high_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    high = high_bits;\n-  } else {\n-    high = -1 * (is_negative && length < kMaxDecimalBytes);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    high = SafeLeftShift(high, high_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    high |= high_bits;\n-  }\n-\n-  // 2. Extract the low bytes\n-  // Stop byte of the low bytes\n-  const int32_t low_bits_offset = std::min(length, 8);\n-  const auto low_bits = BytesToInteger(bytes, high_bits_offset, length);\n-\n-  if (low_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    low = low_bits;\n-  } else {\n-    // Sign extend the low bits if necessary\n-    low = -1 * (is_negative && length < 8);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    low = SafeLeftShift(low, low_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    low |= low_bits;\n-  }\n-\n-  *out_high = high;\n-  *out_low = static_cast<uint64_t>(low);\n+// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128 || Decimal256\n+\n+template <typename DecimalType>\n+Status RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n+                              uint8_t* out_buf) {\n+  ARROW_ASSIGN_OR_RAISE(DecimalType t, DecimalType::FromBigEndian(value, byte_width));\n+  t.ToBytes(out_buf);\n+  return ::arrow::Status::OK();\n }\n \n-static inline void RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n-                                          uint8_t* out_buf) {\n-  // view the first 8 bytes as an unsigned 64-bit integer\n-  auto low = reinterpret_cast<uint64_t*>(out_buf);\n+template <typename DecimalArrayType>\n+struct DecimalTypeTrait;\n \n-  // view the second 8 bytes as a signed 64-bit integer\n-  auto high = reinterpret_cast<int64_t*>(out_buf + sizeof(uint64_t));\n-\n-  // Convert the fixed size binary array bytes into a Decimal128 compatible layout\n-  BytesToIntegerPair(value, byte_width, high, low);\n-}\n-\n-template <typename T>\n-Status ConvertToDecimal128(const Array& array, const std::shared_ptr<DataType>&,\n-                           MemoryPool* pool, std::shared_ptr<Array>*) {\n-  return Status::NotImplemented(\"not implemented\");\n-}\n+template <>\n+struct DecimalTypeTrait<::arrow::Decimal128Array> {\n+  using value = ::arrow::Decimal128;\n+};\n \n template <>\n-Status ConvertToDecimal128<FLBAType>(const Array& array,\n-                                     const std::shared_ptr<DataType>& type,\n-                                     MemoryPool* pool, std::shared_ptr<Array>* out) {\n-  const auto& fixed_size_binary_array =\n-      static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n-\n-  // The byte width of each decimal value\n-  const int32_t type_length =\n-      static_cast<const ::arrow::Decimal128Type&>(*type).byte_width();\n-\n-  // number of elements in the entire array\n-  const int64_t length = fixed_size_binary_array.length();\n-\n-  // Get the byte width of the values in the FixedSizeBinaryArray. Most of the time\n-  // this will be different from the decimal array width because we write the minimum\n-  // number of bytes necessary to represent a given precision\n-  const int32_t byte_width =\n-      static_cast<const ::arrow::FixedSizeBinaryType&>(*fixed_size_binary_array.type())\n-          .byte_width();\n-  if (byte_width < kMinDecimalBytes || byte_width > kMaxDecimalBytes) {\n-    return Status::Invalid(\"Invalid FIXED_LEN_BYTE_ARRAY length for Decimal128\");\n+struct DecimalTypeTrait<::arrow::Decimal256Array> {\n+  using value = ::arrow::Decimal256;\n+};\n+\n+template <typename DecimalArrayType, typename ParquetType>\n+struct DecimalConverter {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>&,\n+                                        MemoryPool* pool, std::shared_ptr<Array>*) {\n+    return Status::NotImplemented(\"not implemented\");\n   }\n-\n-  // allocate memory for the decimal array\n-  ARROW_ASSIGN_OR_RAISE(auto data, ::arrow::AllocateBuffer(length * type_length, pool));\n-\n-  // raw bytes that we can write to\n-  uint8_t* out_ptr = data->mutable_data();\n-\n-  // convert each FixedSizeBinary value to valid decimal bytes\n-  const int64_t null_count = fixed_size_binary_array.null_count();\n-  if (null_count > 0) {\n-    for (int64_t i = 0; i < length; ++i, out_ptr += type_length) {\n-      if (!fixed_size_binary_array.IsNull(i)) {\n-        RawBytesToDecimalBytes(fixed_size_binary_array.GetValue(i), byte_width, out_ptr);\n+};\n+\n+template <typename DecimalArrayType>\n+struct DecimalConverter<DecimalArrayType, FLBAType> {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>& type,\n+                                        MemoryPool* pool, std::shared_ptr<Array>* out) {\n+    const auto& fixed_size_binary_array =\n+        static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n+\n+    // The byte width of each decimal value\n+    const int32_t type_length =\n+        static_cast<const ::arrow::Decimal128Type&>(*type).byte_width();\n+\n+    // number of elements in the entire array\n+    const int64_t length = fixed_size_binary_array.length();\n+\n+    // Get the byte width of the values in the FixedSizeBinaryArray. Most of the time\n+    // this will be different from the decimal array width because we write the minimum\n+    // number of bytes necessary to represent a given precision\n+    const int32_t byte_width =\n+        static_cast<const ::arrow::FixedSizeBinaryType&>(*fixed_size_binary_array.type())\n+            .byte_width();\n+    // allocate memory for the decimal array\n+    ARROW_ASSIGN_OR_RAISE(auto data, ::arrow::AllocateBuffer(length * type_length, pool));\n+\n+    // raw bytes that we can write to\n+    uint8_t* out_ptr = data->mutable_data();\n+\n+    // convert each FixedSizeBinary value to valid decimal bytes\n+    const int64_t null_count = fixed_size_binary_array.null_count();\n+\n+    using DecimalType = typename DecimalTypeTrait<DecimalArrayType>::value;\n+    if (null_count > 0) {\n+      for (int64_t i = 0; i < length; ++i, out_ptr += type_length) {\n+        if (!fixed_size_binary_array.IsNull(i)) {\n\nReview comment:\n       You shouldn't leave the null slots uninitialized, otherwise it can leak previous data.\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -723,29 +628,47 @@ Status TransferColumnData(RecordReader* reader, std::shared_ptr<DataType> value_\n       RETURN_NOT_OK(TransferBinary(reader, pool, value_type, &chunked_result));\n       result = chunked_result;\n     } break;\n-    case ::arrow::Type::DECIMAL: {\n+    case ::arrow::Type::DECIMAL128: {\n       switch (descr->physical_type()) {\n         case ::parquet::Type::INT32: {\n-          RETURN_NOT_OK(\n-              DecimalIntegerTransfer<Int32Type>(reader, pool, value_type, &result));\n+          auto fn = DecimalIntegerTransfer<Int32Type>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         case ::parquet::Type::INT64: {\n-          RETURN_NOT_OK(\n-              DecimalIntegerTransfer<Int64Type>(reader, pool, value_type, &result));\n+          auto fn = &DecimalIntegerTransfer<Int64Type>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         case ::parquet::Type::BYTE_ARRAY: {\n-          RETURN_NOT_OK(\n-              TransferDecimal<ByteArrayType>(reader, pool, value_type, &result));\n+          auto fn = &TransferDecimal<Decimal128Array, ByteArrayType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         case ::parquet::Type::FIXED_LEN_BYTE_ARRAY: {\n-          RETURN_NOT_OK(TransferDecimal<FLBAType>(reader, pool, value_type, &result));\n+          auto fn = &TransferDecimal<Decimal128Array, FLBAType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         default:\n           return Status::Invalid(\n               \"Physical type for decimal must be int32, int64, byte array, or fixed \"\n               \"length binary\");\n       }\n     } break;\n+    case ::arrow::Type::DECIMAL256:\n+      switch (descr->physical_type()) {\n+        case ::parquet::Type::BYTE_ARRAY: {\n+          auto fn = &TransferDecimal<Decimal256Array, ByteArrayType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n+        } break;\n+        case ::parquet::Type::FIXED_LEN_BYTE_ARRAY: {\n+          auto fn = &TransferDecimal<Decimal256Array, FLBAType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n+        } break;\n+        default:\n+          return Status::Invalid(\n+              \"Physical type for decimal must be int32, int64, byte array, or fixed \"\n\nReview comment:\n       According to the above, the error message isn't accurate.\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -1333,6 +1333,45 @@ TEST(Decimal256Test, Multiply) {\n   }\n }\n \n+TEST(Decimal256Test, Shift) {\n+  Decimal256 v(1024);\n\nReview comment:\n       1024 has only one bit set. Perhaps test with more interesting values?\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -599,7 +510,10 @@ template <\n                                     std::is_same<ParquetIntegerType, Int64Type>::value>>\n static Status DecimalIntegerTransfer(RecordReader* reader, MemoryPool* pool,\n                                      const std::shared_ptr<DataType>& type, Datum* out) {\n-  DCHECK_EQ(type->id(), ::arrow::Type::DECIMAL);\n+  // Decimal256 isn't relevant here because this library never writes\n\nReview comment:\n       \"This library\" meaning parquet-cpp? But what do other implementations do?\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -718,6 +718,48 @@ Result<Decimal256> Decimal256::FromString(const char* s) {\n   return FromString(util::string_view(s));\n }\n \n+Result<Decimal256> Decimal256::FromBigEndian(const uint8_t* bytes, int32_t length) {\n+  static constexpr int32_t kMinDecimalBytes = 1;\n+  static constexpr int32_t kMaxDecimalBytes = 32;\n+\n+  std::array<uint64_t, 4> little_endian_array;\n+\n+  if (ARROW_PREDICT_FALSE(length < kMinDecimalBytes || length > kMaxDecimalBytes)) {\n+    return Status::Invalid(\"Length of byte array passed to Decimal128::FromBigEndian \",\n+                           \"was \", length, \", but must be between \", kMinDecimalBytes,\n+                           \" and \", kMaxDecimalBytes);\n+  }\n+\n+  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n+  // sign bit.\n+  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n+\n+  for (int word_idx = 0; word_idx < 4; word_idx++) {\n+    const int32_t word_length = std::min(length, static_cast<int32_t>(sizeof(uint64_t)));\n+\n+    if (word_length == 8) {\n+      // Full words can be assigned as is (and are UB with the shift below).\n+      little_endian_array[word_idx] =\n+          UInt64FromBigEndian(bytes + length - word_length, word_length);\n+    } else {\n+      // Sign extend the word its if necessary\n+      uint64_t word = -1 * is_negative;\n+      if (length > 0) {\n+        // Incorporate the actual values if present.\n+        // Shift left enough bits to make room for the incoming int64_t\n+        word = SafeLeftShift(word, word_length * CHAR_BIT);\n+        // Preserve the upper bits by inplace OR-ing the int64_t\n+        word |= UInt64FromBigEndian(bytes + length - word_length, word_length);\n+      }\n+      little_endian_array[word_idx] = word;\n+    }\n+    // Move on to the next word.\n+    length -= sizeof(uint64_t);\n\nReview comment:\n       Is it deliberate that `length` can become negative?\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -33,7 +33,10 @@ using ::arrow::internal::checked_cast;\n \n Result<std::shared_ptr<ArrowType>> MakeArrowDecimal(const LogicalType& logical_type) {\n   const auto& decimal = checked_cast<const DecimalLogicalType&>(logical_type);\n-  return ::arrow::Decimal128Type::Make(decimal.precision(), decimal.scale());\n+  if (decimal.precision() <= ::arrow::Decimal128Type::kMaxPrecision) {\n+    return ::arrow::Decimal128Type::Make(decimal.precision(), decimal.scale());\n+  }\n+  return ::arrow::Decimal256Type::Make(decimal.precision(), decimal.scale());\n\nReview comment:\n       While we are at it, can we catch cases where the precision doesn't fit in `Decimal256` and error out?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T14:24:34.193+0000",
                    "updated": "2020-12-14T14:24:34.193+0000",
                    "started": "2020-12-14T14:24:34.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523893",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542586637\n\n\n\n##########\nFile path: cpp/src/arrow/type.cc\n##########\n@@ -747,6 +747,75 @@ std::vector<std::shared_ptr<Field>> StructType::GetAllFieldsByName(\n   return result;\n }\n \n+// Taken from the Apache Impala codebase. The comments next\n+// to the return values are the maximum value that can be represented in 2's\n+// complement with the returned number of bytes.\n+int32_t DecimalType::DecimalSize(int32_t precision) {\n+  DCHECK_GE(precision, 1) << \"decimal precision must be greater than or equal to 1, got \"\n+                          << precision;\n+\n+  switch (precision) {\n+    case 1:\n+    case 2:\n+      return 1;  // 127\n+    case 3:\n+    case 4:\n+      return 2;  // 32,767\n+    case 5:\n+    case 6:\n+      return 3;  // 8,388,607\n+    case 7:\n+    case 8:\n+    case 9:\n+      return 4;  // 2,147,483,427\n+    case 10:\n+    case 11:\n+      return 5;  // 549,755,813,887\n+    case 12:\n+    case 13:\n+    case 14:\n+      return 6;  // 140,737,488,355,327\n+    case 15:\n+    case 16:\n+      return 7;  // 36,028,797,018,963,967\n+    case 17:\n+    case 18:\n+      return 8;  // 9,223,372,036,854,775,807\n+    case 19:\n+    case 20:\n+    case 21:\n+      return 9;  // 2,361,183,241,434,822,606,847\n+    case 22:\n+    case 23:\n+      return 10;  // 604,462,909,807,314,587,353,087\n+    case 24:\n+    case 25:\n+    case 26:\n+      return 11;  // 154,742,504,910,672,534,362,390,527\n+    case 27:\n+    case 28:\n+      return 12;  // 39,614,081,257,132,168,796,771,975,167\n+    case 29:\n+    case 30:\n+    case 31:\n+      return 13;  // 10,141,204,801,825,835,211,973,625,643,007\n+    case 32:\n+    case 33:\n+      return 14;  // 2,596,148,429,267,413,814,265,248,164,610,047\n+    case 34:\n+    case 35:\n+      return 15;  // 664,613,997,892,457,936,451,903,530,140,172,287\n+    case 36:\n+    case 37:\n+    case 38:\n+      return 16;  // 170,141,183,460,469,231,731,687,303,715,884,105,727\n+    default:\n+      return static_cast<int32_t>(std::ceil((precision / 8.0) * std::log2(10)));\n\nReview comment:\n       done.  I left open ended computation, because it seems like the \"least\" surprise option but I can remove if you prefere.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T17:54:25.214+0000",
                    "updated": "2020-12-14T17:54:25.214+0000",
                    "started": "2020-12-14T17:54:25.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524019",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524020",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542592454\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.h\n##########\n@@ -303,6 +314,10 @@ ARROW_EXPORT inline bool operator>=(const BasicDecimal256& left,\n   return !operator<(left, right);\n }\n \n+ARROW_EXPORT BasicDecimal256 operator-(const BasicDecimal256& operand);\n+ARROW_EXPORT BasicDecimal256 operator~(const BasicDecimal256& operand);\n+ARROW_EXPORT BasicDecimal256 operator+(const BasicDecimal256& left,\n+                                       const BasicDecimal256& right);\n\nReview comment:\n       I opened up a few JIRAs for Decimal256 the binary operator would be covered under one of the compute ones I believe.  The new functions are just what I needed to for adding parquet + testing the additions needed for parquet.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:02:33.580+0000",
                    "updated": "2020-12-14T18:02:33.580+0000",
                    "started": "2020-12-14T18:02:33.579+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524020",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524021",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542593201\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/schema_internal.cc\n##########\n@@ -33,7 +33,10 @@ using ::arrow::internal::checked_cast;\n \n Result<std::shared_ptr<ArrowType>> MakeArrowDecimal(const LogicalType& logical_type) {\n   const auto& decimal = checked_cast<const DecimalLogicalType&>(logical_type);\n-  return ::arrow::Decimal128Type::Make(decimal.precision(), decimal.scale());\n+  if (decimal.precision() <= ::arrow::Decimal128Type::kMaxPrecision) {\n+    return ::arrow::Decimal128Type::Make(decimal.precision(), decimal.scale());\n+  }\n+  return ::arrow::Decimal256Type::Make(decimal.precision(), decimal.scale());\n\nReview comment:\n       This is done in the [Make](https://github.com/apache/arrow/blob/master/cpp/src/arrow/type.cc#L801) functions (same as lower bound for Decimal128\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:03:50.183+0000",
                    "updated": "2020-12-14T18:03:50.183+0000",
                    "started": "2020-12-14T18:03:50.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524021",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524031",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542606601\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -718,6 +718,48 @@ Result<Decimal256> Decimal256::FromString(const char* s) {\n   return FromString(util::string_view(s));\n }\n \n+Result<Decimal256> Decimal256::FromBigEndian(const uint8_t* bytes, int32_t length) {\n+  static constexpr int32_t kMinDecimalBytes = 1;\n+  static constexpr int32_t kMaxDecimalBytes = 32;\n+\n+  std::array<uint64_t, 4> little_endian_array;\n+\n+  if (ARROW_PREDICT_FALSE(length < kMinDecimalBytes || length > kMaxDecimalBytes)) {\n+    return Status::Invalid(\"Length of byte array passed to Decimal128::FromBigEndian \",\n+                           \"was \", length, \", but must be between \", kMinDecimalBytes,\n+                           \" and \", kMaxDecimalBytes);\n+  }\n+\n+  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n+  // sign bit.\n+  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n+\n+  for (int word_idx = 0; word_idx < 4; word_idx++) {\n+    const int32_t word_length = std::min(length, static_cast<int32_t>(sizeof(uint64_t)));\n+\n+    if (word_length == 8) {\n+      // Full words can be assigned as is (and are UB with the shift below).\n+      little_endian_array[word_idx] =\n+          UInt64FromBigEndian(bytes + length - word_length, word_length);\n+    } else {\n+      // Sign extend the word its if necessary\n+      uint64_t word = -1 * is_negative;\n+      if (length > 0) {\n+        // Incorporate the actual values if present.\n+        // Shift left enough bits to make room for the incoming int64_t\n+        word = SafeLeftShift(word, word_length * CHAR_BIT);\n+        // Preserve the upper bits by inplace OR-ing the int64_t\n+        word |= UInt64FromBigEndian(bytes + length - word_length, word_length);\n+      }\n+      little_endian_array[word_idx] = word;\n+    }\n+    // Move on to the next word.\n+    length -= sizeof(uint64_t);\n\nReview comment:\n       yes, I added a comment.  do you think this is a bug?  Is there a way of framing this logic that is less surprising to you?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:21:57.683+0000",
                    "updated": "2020-12-14T18:21:57.683+0000",
                    "started": "2020-12-14T18:21:57.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524031",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542612683\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -718,6 +718,48 @@ Result<Decimal256> Decimal256::FromString(const char* s) {\n   return FromString(util::string_view(s));\n }\n \n+Result<Decimal256> Decimal256::FromBigEndian(const uint8_t* bytes, int32_t length) {\n+  static constexpr int32_t kMinDecimalBytes = 1;\n+  static constexpr int32_t kMaxDecimalBytes = 32;\n+\n+  std::array<uint64_t, 4> little_endian_array;\n+\n+  if (ARROW_PREDICT_FALSE(length < kMinDecimalBytes || length > kMaxDecimalBytes)) {\n+    return Status::Invalid(\"Length of byte array passed to Decimal128::FromBigEndian \",\n+                           \"was \", length, \", but must be between \", kMinDecimalBytes,\n+                           \" and \", kMaxDecimalBytes);\n+  }\n+\n+  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n+  // sign bit.\n+  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n+\n+  for (int word_idx = 0; word_idx < 4; word_idx++) {\n+    const int32_t word_length = std::min(length, static_cast<int32_t>(sizeof(uint64_t)));\n+\n+    if (word_length == 8) {\n+      // Full words can be assigned as is (and are UB with the shift below).\n+      little_endian_array[word_idx] =\n+          UInt64FromBigEndian(bytes + length - word_length, word_length);\n+    } else {\n+      // Sign extend the word its if necessary\n+      uint64_t word = -1 * is_negative;\n+      if (length > 0) {\n+        // Incorporate the actual values if present.\n+        // Shift left enough bits to make room for the incoming int64_t\n+        word = SafeLeftShift(word, word_length * CHAR_BIT);\n+        // Preserve the upper bits by inplace OR-ing the int64_t\n+        word |= UInt64FromBigEndian(bytes + length - word_length, word_length);\n+      }\n+      little_endian_array[word_idx] = word;\n+    }\n+    // Move on to the next word.\n+    length -= sizeof(uint64_t);\n\nReview comment:\n       I would have expected `length -= word_length`. It's probably not a bug, just bizarre.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:27:17.681+0000",
                    "updated": "2020-12-14T18:27:17.681+0000",
                    "started": "2020-12-14T18:27:17.680+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524034",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542619050\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -369,225 +371,134 @@ Status TransferBinary(RecordReader* reader, MemoryPool* pool,\n }\n \n // ----------------------------------------------------------------------\n-// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128\n-\n-static uint64_t BytesToInteger(const uint8_t* bytes, int32_t start, int32_t stop) {\n-  const int32_t length = stop - start;\n-\n-  DCHECK_GE(length, 0);\n-  DCHECK_LE(length, 8);\n-\n-  switch (length) {\n-    case 0:\n-      return 0;\n-    case 1:\n-      return bytes[start];\n-    case 2:\n-      return FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-    case 3: {\n-      const uint64_t first_two_bytes = FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_two_bytes << 8 | last_byte;\n-    }\n-    case 4:\n-      return FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-    case 5: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 8 | last_byte;\n-    }\n-    case 6: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      return first_four_bytes << 16 | last_two_bytes;\n-    }\n-    case 7: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t second_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 24 | second_two_bytes << 8 | last_byte;\n-    }\n-    case 8:\n-      return FromBigEndian(SafeLoadAs<uint64_t>(bytes + start));\n-    default: {\n-      DCHECK(false);\n-      return UINT64_MAX;\n-    }\n-  }\n-}\n-\n-static constexpr int32_t kMinDecimalBytes = 1;\n-static constexpr int32_t kMaxDecimalBytes = 16;\n-\n-/// \\brief Convert a sequence of big-endian bytes to one int64_t (high bits) and one\n-/// uint64_t (low bits).\n-static void BytesToIntegerPair(const uint8_t* bytes, const int32_t length,\n-                               int64_t* out_high, uint64_t* out_low) {\n-  DCHECK_GE(length, kMinDecimalBytes);\n-  DCHECK_LE(length, kMaxDecimalBytes);\n-\n-  // XXX This code is copied from Decimal::FromBigEndian\n-\n-  int64_t high, low;\n-\n-  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n-  // sign bit.\n-  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n-\n-  // 1. Extract the high bytes\n-  // Stop byte of the high bytes\n-  const int32_t high_bits_offset = std::max(0, length - 8);\n-  const auto high_bits = BytesToInteger(bytes, 0, high_bits_offset);\n-\n-  if (high_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    high = high_bits;\n-  } else {\n-    high = -1 * (is_negative && length < kMaxDecimalBytes);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    high = SafeLeftShift(high, high_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    high |= high_bits;\n-  }\n-\n-  // 2. Extract the low bytes\n-  // Stop byte of the low bytes\n-  const int32_t low_bits_offset = std::min(length, 8);\n-  const auto low_bits = BytesToInteger(bytes, high_bits_offset, length);\n-\n-  if (low_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    low = low_bits;\n-  } else {\n-    // Sign extend the low bits if necessary\n-    low = -1 * (is_negative && length < 8);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    low = SafeLeftShift(low, low_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    low |= low_bits;\n-  }\n-\n-  *out_high = high;\n-  *out_low = static_cast<uint64_t>(low);\n+// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128 || Decimal256\n+\n+template <typename DecimalType>\n+Status RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n+                              uint8_t* out_buf) {\n+  ARROW_ASSIGN_OR_RAISE(DecimalType t, DecimalType::FromBigEndian(value, byte_width));\n+  t.ToBytes(out_buf);\n+  return ::arrow::Status::OK();\n }\n \n-static inline void RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n-                                          uint8_t* out_buf) {\n-  // view the first 8 bytes as an unsigned 64-bit integer\n-  auto low = reinterpret_cast<uint64_t*>(out_buf);\n+template <typename DecimalArrayType>\n+struct DecimalTypeTrait;\n \n-  // view the second 8 bytes as a signed 64-bit integer\n-  auto high = reinterpret_cast<int64_t*>(out_buf + sizeof(uint64_t));\n-\n-  // Convert the fixed size binary array bytes into a Decimal128 compatible layout\n-  BytesToIntegerPair(value, byte_width, high, low);\n-}\n-\n-template <typename T>\n-Status ConvertToDecimal128(const Array& array, const std::shared_ptr<DataType>&,\n-                           MemoryPool* pool, std::shared_ptr<Array>*) {\n-  return Status::NotImplemented(\"not implemented\");\n-}\n+template <>\n+struct DecimalTypeTrait<::arrow::Decimal128Array> {\n+  using value = ::arrow::Decimal128;\n+};\n \n template <>\n-Status ConvertToDecimal128<FLBAType>(const Array& array,\n-                                     const std::shared_ptr<DataType>& type,\n-                                     MemoryPool* pool, std::shared_ptr<Array>* out) {\n-  const auto& fixed_size_binary_array =\n-      static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n-\n-  // The byte width of each decimal value\n-  const int32_t type_length =\n-      static_cast<const ::arrow::Decimal128Type&>(*type).byte_width();\n-\n-  // number of elements in the entire array\n-  const int64_t length = fixed_size_binary_array.length();\n-\n-  // Get the byte width of the values in the FixedSizeBinaryArray. Most of the time\n-  // this will be different from the decimal array width because we write the minimum\n-  // number of bytes necessary to represent a given precision\n-  const int32_t byte_width =\n-      static_cast<const ::arrow::FixedSizeBinaryType&>(*fixed_size_binary_array.type())\n-          .byte_width();\n-  if (byte_width < kMinDecimalBytes || byte_width > kMaxDecimalBytes) {\n-    return Status::Invalid(\"Invalid FIXED_LEN_BYTE_ARRAY length for Decimal128\");\n+struct DecimalTypeTrait<::arrow::Decimal256Array> {\n+  using value = ::arrow::Decimal256;\n+};\n+\n+template <typename DecimalArrayType, typename ParquetType>\n+struct DecimalConverter {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>&,\n+                                        MemoryPool* pool, std::shared_ptr<Array>*) {\n+    return Status::NotImplemented(\"not implemented\");\n   }\n-\n-  // allocate memory for the decimal array\n-  ARROW_ASSIGN_OR_RAISE(auto data, ::arrow::AllocateBuffer(length * type_length, pool));\n-\n-  // raw bytes that we can write to\n-  uint8_t* out_ptr = data->mutable_data();\n-\n-  // convert each FixedSizeBinary value to valid decimal bytes\n-  const int64_t null_count = fixed_size_binary_array.null_count();\n-  if (null_count > 0) {\n-    for (int64_t i = 0; i < length; ++i, out_ptr += type_length) {\n-      if (!fixed_size_binary_array.IsNull(i)) {\n-        RawBytesToDecimalBytes(fixed_size_binary_array.GetValue(i), byte_width, out_ptr);\n+};\n+\n+template <typename DecimalArrayType>\n+struct DecimalConverter<DecimalArrayType, FLBAType> {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>& type,\n+                                        MemoryPool* pool, std::shared_ptr<Array>* out) {\n+    const auto& fixed_size_binary_array =\n+        static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n\nReview comment:\n       done.\r\n   \n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -369,225 +371,134 @@ Status TransferBinary(RecordReader* reader, MemoryPool* pool,\n }\n \n // ----------------------------------------------------------------------\n-// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128\n-\n-static uint64_t BytesToInteger(const uint8_t* bytes, int32_t start, int32_t stop) {\n-  const int32_t length = stop - start;\n-\n-  DCHECK_GE(length, 0);\n-  DCHECK_LE(length, 8);\n-\n-  switch (length) {\n-    case 0:\n-      return 0;\n-    case 1:\n-      return bytes[start];\n-    case 2:\n-      return FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-    case 3: {\n-      const uint64_t first_two_bytes = FromBigEndian(SafeLoadAs<uint16_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_two_bytes << 8 | last_byte;\n-    }\n-    case 4:\n-      return FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-    case 5: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 8 | last_byte;\n-    }\n-    case 6: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t last_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      return first_four_bytes << 16 | last_two_bytes;\n-    }\n-    case 7: {\n-      const uint64_t first_four_bytes =\n-          FromBigEndian(SafeLoadAs<uint32_t>(bytes + start));\n-      const uint64_t second_two_bytes =\n-          FromBigEndian(SafeLoadAs<uint16_t>(bytes + start + 4));\n-      const uint64_t last_byte = bytes[stop - 1];\n-      return first_four_bytes << 24 | second_two_bytes << 8 | last_byte;\n-    }\n-    case 8:\n-      return FromBigEndian(SafeLoadAs<uint64_t>(bytes + start));\n-    default: {\n-      DCHECK(false);\n-      return UINT64_MAX;\n-    }\n-  }\n-}\n-\n-static constexpr int32_t kMinDecimalBytes = 1;\n-static constexpr int32_t kMaxDecimalBytes = 16;\n-\n-/// \\brief Convert a sequence of big-endian bytes to one int64_t (high bits) and one\n-/// uint64_t (low bits).\n-static void BytesToIntegerPair(const uint8_t* bytes, const int32_t length,\n-                               int64_t* out_high, uint64_t* out_low) {\n-  DCHECK_GE(length, kMinDecimalBytes);\n-  DCHECK_LE(length, kMaxDecimalBytes);\n-\n-  // XXX This code is copied from Decimal::FromBigEndian\n-\n-  int64_t high, low;\n-\n-  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n-  // sign bit.\n-  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n-\n-  // 1. Extract the high bytes\n-  // Stop byte of the high bytes\n-  const int32_t high_bits_offset = std::max(0, length - 8);\n-  const auto high_bits = BytesToInteger(bytes, 0, high_bits_offset);\n-\n-  if (high_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    high = high_bits;\n-  } else {\n-    high = -1 * (is_negative && length < kMaxDecimalBytes);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    high = SafeLeftShift(high, high_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    high |= high_bits;\n-  }\n-\n-  // 2. Extract the low bytes\n-  // Stop byte of the low bytes\n-  const int32_t low_bits_offset = std::min(length, 8);\n-  const auto low_bits = BytesToInteger(bytes, high_bits_offset, length);\n-\n-  if (low_bits_offset == 8) {\n-    // Avoid undefined shift by 64 below\n-    low = low_bits;\n-  } else {\n-    // Sign extend the low bits if necessary\n-    low = -1 * (is_negative && length < 8);\n-    // Shift left enough bits to make room for the incoming int64_t\n-    low = SafeLeftShift(low, low_bits_offset * CHAR_BIT);\n-    // Preserve the upper bits by inplace OR-ing the int64_t\n-    low |= low_bits;\n-  }\n-\n-  *out_high = high;\n-  *out_low = static_cast<uint64_t>(low);\n+// INT32 / INT64 / BYTE_ARRAY / FIXED_LEN_BYTE_ARRAY -> Decimal128 || Decimal256\n+\n+template <typename DecimalType>\n+Status RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n+                              uint8_t* out_buf) {\n+  ARROW_ASSIGN_OR_RAISE(DecimalType t, DecimalType::FromBigEndian(value, byte_width));\n+  t.ToBytes(out_buf);\n+  return ::arrow::Status::OK();\n }\n \n-static inline void RawBytesToDecimalBytes(const uint8_t* value, int32_t byte_width,\n-                                          uint8_t* out_buf) {\n-  // view the first 8 bytes as an unsigned 64-bit integer\n-  auto low = reinterpret_cast<uint64_t*>(out_buf);\n+template <typename DecimalArrayType>\n+struct DecimalTypeTrait;\n \n-  // view the second 8 bytes as a signed 64-bit integer\n-  auto high = reinterpret_cast<int64_t*>(out_buf + sizeof(uint64_t));\n-\n-  // Convert the fixed size binary array bytes into a Decimal128 compatible layout\n-  BytesToIntegerPair(value, byte_width, high, low);\n-}\n-\n-template <typename T>\n-Status ConvertToDecimal128(const Array& array, const std::shared_ptr<DataType>&,\n-                           MemoryPool* pool, std::shared_ptr<Array>*) {\n-  return Status::NotImplemented(\"not implemented\");\n-}\n+template <>\n+struct DecimalTypeTrait<::arrow::Decimal128Array> {\n+  using value = ::arrow::Decimal128;\n+};\n \n template <>\n-Status ConvertToDecimal128<FLBAType>(const Array& array,\n-                                     const std::shared_ptr<DataType>& type,\n-                                     MemoryPool* pool, std::shared_ptr<Array>* out) {\n-  const auto& fixed_size_binary_array =\n-      static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n-\n-  // The byte width of each decimal value\n-  const int32_t type_length =\n-      static_cast<const ::arrow::Decimal128Type&>(*type).byte_width();\n-\n-  // number of elements in the entire array\n-  const int64_t length = fixed_size_binary_array.length();\n-\n-  // Get the byte width of the values in the FixedSizeBinaryArray. Most of the time\n-  // this will be different from the decimal array width because we write the minimum\n-  // number of bytes necessary to represent a given precision\n-  const int32_t byte_width =\n-      static_cast<const ::arrow::FixedSizeBinaryType&>(*fixed_size_binary_array.type())\n-          .byte_width();\n-  if (byte_width < kMinDecimalBytes || byte_width > kMaxDecimalBytes) {\n-    return Status::Invalid(\"Invalid FIXED_LEN_BYTE_ARRAY length for Decimal128\");\n+struct DecimalTypeTrait<::arrow::Decimal256Array> {\n+  using value = ::arrow::Decimal256;\n+};\n+\n+template <typename DecimalArrayType, typename ParquetType>\n+struct DecimalConverter {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>&,\n+                                        MemoryPool* pool, std::shared_ptr<Array>*) {\n+    return Status::NotImplemented(\"not implemented\");\n   }\n-\n-  // allocate memory for the decimal array\n-  ARROW_ASSIGN_OR_RAISE(auto data, ::arrow::AllocateBuffer(length * type_length, pool));\n-\n-  // raw bytes that we can write to\n-  uint8_t* out_ptr = data->mutable_data();\n-\n-  // convert each FixedSizeBinary value to valid decimal bytes\n-  const int64_t null_count = fixed_size_binary_array.null_count();\n-  if (null_count > 0) {\n-    for (int64_t i = 0; i < length; ++i, out_ptr += type_length) {\n-      if (!fixed_size_binary_array.IsNull(i)) {\n-        RawBytesToDecimalBytes(fixed_size_binary_array.GetValue(i), byte_width, out_ptr);\n+};\n+\n+template <typename DecimalArrayType>\n+struct DecimalConverter<DecimalArrayType, FLBAType> {\n+  static inline Status ConvertToDecimal(const Array& array,\n+                                        const std::shared_ptr<DataType>& type,\n+                                        MemoryPool* pool, std::shared_ptr<Array>* out) {\n+    const auto& fixed_size_binary_array =\n+        static_cast<const ::arrow::FixedSizeBinaryArray&>(array);\n+\n+    // The byte width of each decimal value\n+    const int32_t type_length =\n+        static_cast<const ::arrow::Decimal128Type&>(*type).byte_width();\n+\n+    // number of elements in the entire array\n+    const int64_t length = fixed_size_binary_array.length();\n+\n+    // Get the byte width of the values in the FixedSizeBinaryArray. Most of the time\n+    // this will be different from the decimal array width because we write the minimum\n+    // number of bytes necessary to represent a given precision\n+    const int32_t byte_width =\n+        static_cast<const ::arrow::FixedSizeBinaryType&>(*fixed_size_binary_array.type())\n+            .byte_width();\n+    // allocate memory for the decimal array\n+    ARROW_ASSIGN_OR_RAISE(auto data, ::arrow::AllocateBuffer(length * type_length, pool));\n+\n+    // raw bytes that we can write to\n+    uint8_t* out_ptr = data->mutable_data();\n+\n+    // convert each FixedSizeBinary value to valid decimal bytes\n+    const int64_t null_count = fixed_size_binary_array.null_count();\n+\n+    using DecimalType = typename DecimalTypeTrait<DecimalArrayType>::value;\n+    if (null_count > 0) {\n+      for (int64_t i = 0; i < length; ++i, out_ptr += type_length) {\n+        if (!fixed_size_binary_array.IsNull(i)) {\n\nReview comment:\n       yes, nice catch, this appears to be an existing bug.  Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:32:54.775+0000",
                    "updated": "2020-12-14T18:32:54.775+0000",
                    "started": "2020-12-14T18:32:54.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524039",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542626028\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -599,7 +510,10 @@ template <\n                                     std::is_same<ParquetIntegerType, Int64Type>::value>>\n static Status DecimalIntegerTransfer(RecordReader* reader, MemoryPool* pool,\n                                      const std::shared_ptr<DataType>& type, Datum* out) {\n-  DCHECK_EQ(type->id(), ::arrow::Type::DECIMAL);\n+  // Decimal256 isn't relevant here because this library never writes\n\nReview comment:\n       I added some clarification to this comment.  Let me know if it makes sense.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:39:14.271+0000",
                    "updated": "2020-12-14T18:39:14.271+0000",
                    "started": "2020-12-14T18:39:14.271+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524043",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542626449\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader_internal.cc\n##########\n@@ -723,29 +628,47 @@ Status TransferColumnData(RecordReader* reader, std::shared_ptr<DataType> value_\n       RETURN_NOT_OK(TransferBinary(reader, pool, value_type, &chunked_result));\n       result = chunked_result;\n     } break;\n-    case ::arrow::Type::DECIMAL: {\n+    case ::arrow::Type::DECIMAL128: {\n       switch (descr->physical_type()) {\n         case ::parquet::Type::INT32: {\n-          RETURN_NOT_OK(\n-              DecimalIntegerTransfer<Int32Type>(reader, pool, value_type, &result));\n+          auto fn = DecimalIntegerTransfer<Int32Type>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         case ::parquet::Type::INT64: {\n-          RETURN_NOT_OK(\n-              DecimalIntegerTransfer<Int64Type>(reader, pool, value_type, &result));\n+          auto fn = &DecimalIntegerTransfer<Int64Type>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         case ::parquet::Type::BYTE_ARRAY: {\n-          RETURN_NOT_OK(\n-              TransferDecimal<ByteArrayType>(reader, pool, value_type, &result));\n+          auto fn = &TransferDecimal<Decimal128Array, ByteArrayType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         case ::parquet::Type::FIXED_LEN_BYTE_ARRAY: {\n-          RETURN_NOT_OK(TransferDecimal<FLBAType>(reader, pool, value_type, &result));\n+          auto fn = &TransferDecimal<Decimal128Array, FLBAType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n         } break;\n         default:\n           return Status::Invalid(\n               \"Physical type for decimal must be int32, int64, byte array, or fixed \"\n               \"length binary\");\n       }\n     } break;\n+    case ::arrow::Type::DECIMAL256:\n+      switch (descr->physical_type()) {\n+        case ::parquet::Type::BYTE_ARRAY: {\n+          auto fn = &TransferDecimal<Decimal256Array, ByteArrayType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n+        } break;\n+        case ::parquet::Type::FIXED_LEN_BYTE_ARRAY: {\n+          auto fn = &TransferDecimal<Decimal256Array, FLBAType>;\n+          RETURN_NOT_OK(fn(reader, pool, value_type, &result));\n+        } break;\n+        default:\n+          return Status::Invalid(\n+              \"Physical type for decimal must be int32, int64, byte array, or fixed \"\n\nReview comment:\n       Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:39:47.557+0000",
                    "updated": "2020-12-14T18:39:47.557+0000",
                    "started": "2020-12-14T18:39:47.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524044",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524045",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#issuecomment-744633148\n\n\n   @pitrou I think I addressed all comments.  Thank you for the review!\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T18:41:11.799+0000",
                    "updated": "2020-12-14T18:41:11.799+0000",
                    "started": "2020-12-14T18:41:11.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524045",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542911455\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal.cc\n##########\n@@ -718,6 +718,48 @@ Result<Decimal256> Decimal256::FromString(const char* s) {\n   return FromString(util::string_view(s));\n }\n \n+Result<Decimal256> Decimal256::FromBigEndian(const uint8_t* bytes, int32_t length) {\n+  static constexpr int32_t kMinDecimalBytes = 1;\n+  static constexpr int32_t kMaxDecimalBytes = 32;\n+\n+  std::array<uint64_t, 4> little_endian_array;\n+\n+  if (ARROW_PREDICT_FALSE(length < kMinDecimalBytes || length > kMaxDecimalBytes)) {\n+    return Status::Invalid(\"Length of byte array passed to Decimal128::FromBigEndian \",\n+                           \"was \", length, \", but must be between \", kMinDecimalBytes,\n+                           \" and \", kMaxDecimalBytes);\n+  }\n+\n+  // Bytes are coming in big-endian, so the first byte is the MSB and therefore holds the\n+  // sign bit.\n+  const bool is_negative = static_cast<int8_t>(bytes[0]) < 0;\n+\n+  for (int word_idx = 0; word_idx < 4; word_idx++) {\n+    const int32_t word_length = std::min(length, static_cast<int32_t>(sizeof(uint64_t)));\n+\n+    if (word_length == 8) {\n+      // Full words can be assigned as is (and are UB with the shift below).\n+      little_endian_array[word_idx] =\n+          UInt64FromBigEndian(bytes + length - word_length, word_length);\n+    } else {\n+      // Sign extend the word its if necessary\n+      uint64_t word = -1 * is_negative;\n+      if (length > 0) {\n+        // Incorporate the actual values if present.\n+        // Shift left enough bits to make room for the incoming int64_t\n+        word = SafeLeftShift(word, word_length * CHAR_BIT);\n+        // Preserve the upper bits by inplace OR-ing the int64_t\n+        word |= UInt64FromBigEndian(bytes + length - word_length, word_length);\n+      }\n+      little_endian_array[word_idx] = word;\n+    }\n+    // Move on to the next word.\n+    length -= sizeof(uint64_t);\n\nReview comment:\n       fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T23:06:54.521+0000",
                    "updated": "2020-12-14T23:06:54.521+0000",
                    "started": "2020-12-14T23:06:54.521+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524164",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542911792\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -1333,6 +1333,45 @@ TEST(Decimal256Test, Multiply) {\n   }\n }\n \n+TEST(Decimal256Test, Shift) {\n+  Decimal256 v(1024);\n\nReview comment:\n       oops, missed this one.  will do shortly.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T23:07:27.470+0000",
                    "updated": "2020-12-14T23:07:27.470+0000",
                    "started": "2020-12-14T23:07:27.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524165",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897#discussion_r542958756\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -1333,6 +1333,45 @@ TEST(Decimal256Test, Multiply) {\n   }\n }\n \n+TEST(Decimal256Test, Shift) {\n+  Decimal256 v(1024);\n\nReview comment:\n       added more values and caught a bug.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T00:46:12.111+0000",
                    "updated": "2020-12-15T00:46:12.111+0000",
                    "started": "2020-12-15T00:46:12.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524191",
                    "issueId": "13340750"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/worklog/524388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8897:\nURL: https://github.com/apache/arrow/pull/8897\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T12:24:46.727+0000",
                    "updated": "2020-12-15T12:24:46.727+0000",
                    "started": "2020-12-15T12:24:46.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524388",
                    "issueId": "13340750"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4c7c7886[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12b0f361[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@40ca5b55[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@557493d6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67d4f7d3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@65b8b3ef[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@773a4cfe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6218bec[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@468b9e94[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@668c7a61[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@437497f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@49801a9b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 15 12:24:33 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-15T12:24:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10607/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-16T04:20:21.000+0000",
        "updated": "2020-12-15T12:24:47.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Support Reading/Writing Decimal256 type in Parquet",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340750/comment/17249655",
                    "id": "17249655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8897\n[https://github.com/apache/arrow/pull/8897]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-12-15T12:24:33.813+0000",
                    "updated": "2020-12-15T12:24:33.813+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0km1k:",
        "customfield_12314139": null
    }
}