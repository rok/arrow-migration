{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13390887",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887",
    "key": "ARROW-13404",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350125",
                "id": "12350125",
                "name": "4.0.1",
                "archived": false,
                "released": true,
                "releaseDate": "2021-05-26"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12619618",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619618",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13390911",
                    "key": "ARROW-13407",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390911",
                    "fields": {
                        "summary": "[Documentation] Documentation Improvements",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13404/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/641717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- opened a new pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999\n\n\n   * Add link to the cookbooks\r\n   * Improve a bit landing page for PyArrow for people that don't already know Arrow\r\n   * Add a Getting Started section to introduce people to Arrow and PyArrow\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:34:05.395+0000",
                    "updated": "2021-08-25T14:34:05.395+0000",
                    "started": "2021-08-25T14:34:05.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641717",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/641718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#issuecomment-905555431\n\n\n   https://issues.apache.org/jira/browse/ARROW-13404\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-25T14:34:29.379+0000",
                    "updated": "2021-08-25T14:34:29.379+0000",
                    "started": "2021-08-25T14:34:29.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "641718",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/642771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#issuecomment-907091135\n\n\n   @jorisvandenbossche mind taking a look?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-27T10:13:03.990+0000",
                    "updated": "2021-08-27T10:13:03.990+0000",
                    "started": "2021-08-27T10:13:03.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "642771",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698272830\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n\nReview comment:\n       ```suggestion\r\n   :ref:`parquet`, :ref:`ipc` (:ref:`feather`), :ref:`csv` or :ref:`json` formats.\r\n   ```\r\n   \r\n   ? (there might be quite some people that know Feather instead, and it's actually also still a bit more convenient to use)\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       I would personally avoid the term \"Big Data\" (although you maybe didn't mean \"Big Data\" with capitals here :), it's still what many people will read)\r\n   \r\n   Not directly sure what would be a good alternative. \"Working with datasets\" is probably not specific enough. \"Working with partitioned datasets\"? (or \"Working with larger, partitioned datasets\" ..)\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n+---------------------\n+\n+Arrow also provides the :class:`pyarrow.dataset` api to work with\n+big data, which will handle for you partitioning of your data in\n+smaller chunks\n+\n+.. ipython:: python\n+\n+    import pyarrow.dataset as ds\n+\n+    ds.write_dataset(birthdays_table, \"savedir\", format=\"parquet\", \n+                     partitioning=ds.partitioning(\n+                        pa.schema([birthdays_table.schema.field(\"years\")])\n+                    ))\n+\n+Loading back the partitioned dataset will detect the chunks\n+\n+.. ipython:: python\n+\n+    birthdays_dataset = ds.dataset(\"savedir\", schema=birthdays_table.schema,\n+                                   partitioning=ds.partitioning(field_names=[\"years\"]))\n+\n+    birthdays_dataset.files\n+\n+and will lazily load chunks of data only when iterating over them\n+\n+.. ipython:: python\n+\n+    import datetime\n+\n+    current_year = datetime.datetime.utcnow().year\n+    for table_chunk in birthdays_dataset.to_batches():\n+        print(\"AGES\", pc.abs(pc.subtract(table_chunk[\"years\"], current_year)))\n+\n+For further details on how to work with big datasets, how to filter them,\n+how to project them etc... refer to :ref:`dataset` documentation.\n\nReview comment:\n       ```suggestion\r\n   how to project them, etc., refer to :ref:`dataset` documentation.\r\n   ```\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n+---------------------\n+\n+Arrow also provides the :class:`pyarrow.dataset` api to work with\n+big data, which will handle for you partitioning of your data in\n+smaller chunks\n+\n+.. ipython:: python\n+\n+    import pyarrow.dataset as ds\n+\n+    ds.write_dataset(birthdays_table, \"savedir\", format=\"parquet\", \n+                     partitioning=ds.partitioning(\n+                        pa.schema([birthdays_table.schema.field(\"years\")])\n+                    ))\n+\n+Loading back the partitioned dataset will detect the chunks\n+\n+.. ipython:: python\n+\n+    birthdays_dataset = ds.dataset(\"savedir\", schema=birthdays_table.schema,\n+                                   partitioning=ds.partitioning(field_names=[\"years\"]))\n\nReview comment:\n       ```suggestion\r\n       birthdays_dataset = ds.dataset(\"savedir\", format=\"parquet\", partitioning=[\"years\"])\r\n   ```\r\n   \r\n   I would explicitly pass the format, because we don't actually \"infer\" it (this just happens to work because \"parquet\" is the default format, but it won't work if used a different format for writing). \r\n   The schema is not really needed in this case, I think.\r\n   \n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n\nReview comment:\n       ```suggestion\r\n   Arrow also provides support for various formats to get those tabular\r\n   ```\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n\nReview comment:\n       ```suggestion\r\n   Multiple arrays can be combined in tables to form the columns\r\n   ```\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n+---------------------\n+\n+Arrow also provides the :class:`pyarrow.dataset` api to work with\n+big data, which will handle for you partitioning of your data in\n+smaller chunks\n+\n+.. ipython:: python\n+\n+    import pyarrow.dataset as ds\n+\n+    ds.write_dataset(birthdays_table, \"savedir\", format=\"parquet\", \n+                     partitioning=ds.partitioning(\n+                        pa.schema([birthdays_table.schema.field(\"years\")])\n+                    ))\n+\n+Loading back the partitioned dataset will detect the chunks\n+\n+.. ipython:: python\n+\n+    birthdays_dataset = ds.dataset(\"savedir\", schema=birthdays_table.schema,\n+                                   partitioning=ds.partitioning(field_names=[\"years\"]))\n+\n+    birthdays_dataset.files\n+\n+and will lazily load chunks of data only when iterating over them\n+\n+.. ipython:: python\n+\n+    import datetime\n+\n+    current_year = datetime.datetime.utcnow().year\n+    for table_chunk in birthdays_dataset.to_batches():\n+        print(\"AGES\", pc.abs(pc.subtract(table_chunk[\"years\"], current_year)))\n\nReview comment:\n       ```suggestion\r\n           print(\"AGES\", pc.subtract(current_year, table_chunk[\"years\"]))\r\n   ```\r\n   \r\n   (didn't test!)\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n\nReview comment:\n       Not only arrays but also tables (depending on the compute kernel)\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n\nReview comment:\n       ```suggestion\r\n   Once you have tabular data, Arrow provides out of the box\r\n   the features to save and restore that data for common formats\r\n   like Parquet:\r\n   ```\r\n   \r\n   Also, \"Arrow provides out of the box the features\" reads a bit strange I think. Maybe just something like \"Arrow provides the functionality to save ...\"\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n\nReview comment:\n       In this case, it's actually easier to only provide the field names `names=[\"days\", \"months\", \"years\"]` (it's not needed to create a schema manually if you already have arrays with a type). \r\n   \r\n   Unless it's to illustrate that a table consists of a list of column arrays according to a certain schema. But maybe for that you could also show the `table.schema` afterwards.\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n\nReview comment:\n       This links to the python page, which doesn't actually have a list of them ... (but not sure if directly linking to the C++ ones is better, though, it's just not ideal ;))\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n\nReview comment:\n       ```suggestion\r\n   :ref:`Parquet <parquet>`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\r\n   ```\r\n   etc.\r\n   \r\n   Otherwise I _think_ that those links get replaced with the full title of each of those pages? \n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n\nReview comment:\n       In general it's good to avoid terms as \"easy\" and \"just\" in explanations, according to best practices (not that I always do that!)\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n\nReview comment:\n       ```suggestion\r\n   perform computations on it. So each array is meant to have data and\r\n   ```\n\n##########\nFile path: docs/source/python/index.rst\n##########\n@@ -15,12 +15,17 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n-Python bindings\n-===============\n+PyArrow - Apache Arrow Python bindings\n+======================================\n \n This is the documentation of the Python API of Apache Arrow. For more details\n-on the Arrow format and other language bindings see the\n-:doc:`parent documentation <../index>`.\n+on the Arrow format and other language bindings \n\nReview comment:\n       here is missing something?\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n\nReview comment:\n       ```suggestion\r\n   Arrow to use the best performing implementation to store the data and\r\n   ```\r\n   \r\n   maybe \"optimal implementation\" instead of \"best performing\"?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T08:28:21.356+0000",
                    "updated": "2021-08-30T08:28:21.356+0000",
                    "started": "2021-08-30T08:28:21.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643334",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643466",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698498745\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n\nReview comment:\n       Fair point, I wrote that tables are arrays+schema but in reality they are arrays+names as arrays already provide type information.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:42:21.969+0000",
                    "updated": "2021-08-30T13:42:21.969+0000",
                    "started": "2021-08-30T13:42:21.968+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643466",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698498745\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n\nReview comment:\n       Fair point, I wrote that tables are arrays+schema but in reality they are arrays+names as arrays already provide type information.\r\n   \r\n   Replaced the schema with `names=...`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:42:35.126+0000",
                    "updated": "2021-08-30T13:42:35.126+0000",
                    "started": "2021-08-30T13:42:35.126+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643467",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698501391\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n\nReview comment:\n       :+1: replaced with explicit names\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:45:30.989+0000",
                    "updated": "2021-08-30T13:45:30.989+0000",
                    "started": "2021-08-30T13:45:30.989+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643470",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698501996\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n\nReview comment:\n       You are correct, I wanted to express that it's just 1 line of code like writing, but I couldn't come with a better phrase than \"as easy\". I tried rewording it now.\n\n##########\nFile path: docs/source/python/index.rst\n##########\n@@ -15,12 +15,17 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n-Python bindings\n-===============\n+PyArrow - Apache Arrow Python bindings\n+======================================\n \n This is the documentation of the Python API of Apache Arrow. For more details\n-on the Arrow format and other language bindings see the\n-:doc:`parent documentation <../index>`.\n+on the Arrow format and other language bindings \n\nReview comment:\n       fixed\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:46:24.537+0000",
                    "updated": "2021-08-30T13:46:24.537+0000",
                    "started": "2021-08-30T13:46:24.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643471",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#issuecomment-908356956\n\n\n   @jorisvandenbossche I think this should have addressed all your concerns and should be ready to go\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:46:51.272+0000",
                    "updated": "2021-08-30T13:46:51.272+0000",
                    "started": "2021-08-30T13:46:51.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643473",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698506856\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       I see what you mean, but I explicitly avoided using \"partitioned data\" because I perceive partitioning as the solution to a problem, not the problem itself. And here I was looking for a title that described what the following paragraphs are going to explain how to solve.\r\n   \r\n   I guess we can use \"large data\"? instead of \"big data\"? That doesn't change much from the title meaning point of view but it would avoid using a word that people explicitly map to something specific.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:52:08.927+0000",
                    "updated": "2021-08-30T13:52:08.927+0000",
                    "started": "2021-08-30T13:52:08.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643477",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698508598\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n\nReview comment:\n       Yes, it's actually something I want to fix as we already have https://arrow.apache.org/docs/python/api/compute.html which does list compute functions in python\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:54:16.614+0000",
                    "updated": "2021-08-30T13:54:16.614+0000",
                    "started": "2021-08-30T13:54:16.613+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643481",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/643482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698508598\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n\nReview comment:\n       Yes, it's actually something I want to fix (the empty compute page) as we already have https://arrow.apache.org/docs/python/api/compute.html which does list compute functions in python\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-30T13:54:29.770+0000",
                    "updated": "2021-08-30T13:54:29.770+0000",
                    "started": "2021-08-30T13:54:29.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "643482",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r699283643\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       (personally I would be in favor of using \"large\" instead of \"big\", that seems a bit more neutral)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T12:42:09.652+0000",
                    "updated": "2021-08-31T12:42:09.652+0000",
                    "started": "2021-08-31T12:42:09.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644009",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r699349194\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       :+1: renamed \"big\" to \"large\"\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T13:55:54.699+0000",
                    "updated": "2021-08-31T13:55:54.699+0000",
                    "started": "2021-08-31T13:55:54.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644048",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r699350011\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n\nReview comment:\n       :+1: added tables\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T13:56:48.037+0000",
                    "updated": "2021-08-31T13:56:48.037+0000",
                    "started": "2021-08-31T13:56:48.037+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644049",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r698498745\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n\nReview comment:\n       Fair point, I wrote that tables are arrays+schema but in reality they are arrays+names as arrays already provide type information.\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n\nReview comment:\n       Fair point, I wrote that tables are arrays+schema but in reality they are arrays+names as arrays already provide type information.\r\n   \r\n   Replaced the schema with `names=...`\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n\nReview comment:\n       :+1: replaced with explicit names\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n\nReview comment:\n       You are correct, I wanted to express that it's just 1 line of code like writing, but I couldn't come with a better phrase than \"as easy\". I tried rewording it now.\n\n##########\nFile path: docs/source/python/index.rst\n##########\n@@ -15,12 +15,17 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n-Python bindings\n-===============\n+PyArrow - Apache Arrow Python bindings\n+======================================\n \n This is the documentation of the Python API of Apache Arrow. For more details\n-on the Arrow format and other language bindings see the\n-:doc:`parent documentation <../index>`.\n+on the Arrow format and other language bindings \n\nReview comment:\n       fixed\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       I see what you mean, but I explicitly avoided using \"partitioned data\" because I perceive partitioning as the solution to a problem, not the problem itself. And here I was looking for a title that described what the following paragraphs are going to explain how to solve.\r\n   \r\n   I guess we can use \"large data\"? instead of \"big data\"? That doesn't change much from the title meaning point of view but it would avoid using a word that people explicitly map to something specific.\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n\nReview comment:\n       Yes, it's actually something I want to fix as we already have https://arrow.apache.org/docs/python/api/compute.html which does list compute functions in python\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n\nReview comment:\n       Yes, it's actually something I want to fix (the empty compute page) as we already have https://arrow.apache.org/docs/python/api/compute.html which does list compute functions in python\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       :+1: renamed \"big\" to \"large\"\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n\nReview comment:\n       :+1: added tables\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T15:04:27.530+0000",
                    "updated": "2021-08-31T15:04:27.530+0000",
                    "started": "2021-08-31T15:04:27.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644261",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#issuecomment-908356956\n\n\n   @jorisvandenbossche I think this should have addressed all your concerns and should be ready to go\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T15:12:39.343+0000",
                    "updated": "2021-08-31T15:12:39.343+0000",
                    "started": "2021-08-31T15:12:39.343+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644332",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644432",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r699283643\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,149 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also exposes supports for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n+\n+Creating Arrays and Tables\n+--------------------------\n+\n+Arrays in Arrow are collections of data of uniform type. That allows\n+arrow to use the best performing implementation to store the data and\n+perform computation of it. So each array is meant to have data and\n+a type\n+\n+.. ipython:: python\n+\n+    import pyarrow as pa\n+\n+    days = pa.array([1, 12, 17, 23, 28], type=pa.int8())\n+\n+multiple arrays can be combined in tables to form the columns\n+in tabular data according to a provided schema\n+\n+.. ipython:: python\n+\n+    months = pa.array([1, 3, 5, 7, 1], type=pa.int8())\n+    years = pa.array([1990, 2000, 1995, 2000, 1995], type=pa.int16())\n+\n+    birthdays_table = pa.table([days, months, years], \n+                               schema=pa.schema([\n+                                    ('days', days.type),\n+                                    ('months', months.type),\n+                                    ('years', years.type)\n+                               ]))\n+    \n+    birthdays_table\n+\n+See :ref:`data` for more details.\n+\n+Saving and Loading Tables\n+-------------------------\n+\n+Once you have a tabular data, Arrow provides out of the box\n+the features to save and restore that data for common formats\n+like parquet\n+\n+.. ipython:: python   \n+\n+    import pyarrow.parquet as pq\n+\n+    pq.write_table(birthdays_table, 'birthdays.parquet')\n+\n+Once you have your data on disk, loading it back is as easy,\n+and Arrow is heavily optimized for memory and speed so loading\n+data will be as quick as possible\n+\n+.. ipython:: python\n+\n+    reloaded_birthdays = pq.read_table('birthdays.parquet')\n+\n+    reloaded_birthdays\n+\n+Saving and loading back data in arrow is usually done through\n+:ref:`parquet`, :ref:`ipc`, :ref:`csv` or :ref:`json` formats.\n+\n+Performing Computations\n+-----------------------\n+\n+Arrow ships with a bunch of compute functions that can be applied\n+to its arrays, so through the compute functions it's possible to apply\n+transformations to the data\n+\n+.. ipython:: python\n+\n+    import pyarrow.compute as pc\n+\n+    pc.value_counts(birthdays_table[\"years\"])\n+\n+See :ref:`compute` for a list of available compute functions and\n+how to use them.\n+\n+Working with big data\n\nReview comment:\n       (personally I would be in favor of using \"large\" instead of \"big\", that seems a bit more neutral)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T15:24:02.657+0000",
                    "updated": "2021-08-31T15:24:02.657+0000",
                    "started": "2021-08-31T15:24:02.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644432",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r699503165\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,145 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n\nReview comment:\n       Lowercase \"Arrays\" since \"tables\" is lowercased just after?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T16:45:44.797+0000",
                    "updated": "2021-08-31T16:45:44.797+0000",
                    "started": "2021-08-31T16:45:44.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644523",
                    "issueId": "13390887"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/worklog/644524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10999:\nURL: https://github.com/apache/arrow/pull/10999#discussion_r699503951\n\n\n\n##########\nFile path: docs/source/python/getstarted.rst\n##########\n@@ -0,0 +1,145 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. _getstarted:\n+\n+Getting Started\n+===============\n+\n+Arrow manages data in Arrays (:class:`pyarrow.Array`), which can be\n+grouped in tables (:class:`pyarrow.Table`) to represent columns of data\n+in tabular data.\n+\n+Arrow also provides support for various formats to get those tabular\n+data in and out of disk and networks. Most commonly used formats are\n+Parquet (:ref:`parquet`) and the IPC format (:ref:`ipc`). \n\nReview comment:\n       I'm not sure the IPC format is really commonly used compared to, say, CSV :-)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-31T16:46:48.217+0000",
                    "updated": "2021-08-31T16:46:48.217+0000",
                    "started": "2021-08-31T16:46:48.217+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644524",
                    "issueId": "13390887"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@256cd8e4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55072405[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d2dad9d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@41668331[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a4a8f6a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6b54ee41[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b55e7f3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5e5f96a3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@201073dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6cfab778[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6814bf6b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a5cd644[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 01 10:20:30 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-01T10:20:30.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13404/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-07-20T10:10:34.000+0000",
        "updated": "2021-09-01T10:20:42.000+0000",
        "timeoriginalestimate": null,
        "description": "When a Python developer lands on Arrow docs, it easily gets confused because the page takes for granted you know what's arrow, what's its purpose and why you should use it.\r\n\r\nMost of the documentation seems to be written like you are a developer that already knows arrow and needs to use it in 3-4 different languages. While in reality it's more common the opposite, you land on the docs because you are approaching arrow for the first time and you are probably only going to ever use the bindings for your daily job language.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] [Doc] Make Python landing page less coupled to the rest of arrow documentation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390887/comment/17408081",
                    "id": "17408081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10999\n[https://github.com/apache/arrow/pull/10999]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-09-01T10:20:30.274+0000",
                    "updated": "2021-09-01T10:20:30.274+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0t5rs:",
        "customfield_12314139": null
    }
}