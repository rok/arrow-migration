{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13239280",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280",
    "key": "ARROW-5588",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12563188",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12563188",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13239320",
                    "key": "ARROW-5594",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239320",
                    "fields": {
                        "summary": "[C++] add support for UnionArrays to Take and Filter",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5588/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 27,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/271286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4781: ARROW-5588: [C++] better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781\n \n \n   - Simplify DenseUnionBuilder\r\n   - Add SparesUnionBuilder\r\n   - MakeBuilder can now produce a {Sparse,Dense}UnionBuilder\r\n   - ArrayFromJSON can now produce union arrays\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-02T23:51:33.545+0000",
                    "updated": "2019-07-02T23:51:33.545+0000",
                    "started": "2019-07-02T23:51:33.544+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "271286",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/271288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #4781: ARROW-5588: [C++] better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#issuecomment-507886464\n \n \n   ```\r\n   [ RUN      ] TestDictionary.ListOfDictionary\r\n   WARNING: Logging before InitGoogleLogging() is written to STDERR\r\n   F0702 23:55:33.778414  6046 array.cc:287]  Check failed: list_type_->value_type()->Equals(data->child_data[0]->type)\r\n   *** Check failure stack trace: ***\r\n   /buildbot/AMD64_Conda_C__/cpp/build-support/run-test.sh: line 97:  6046 Aborted                 (core dumped) $TEST_EXECUTABLE \"$@\" 2>&1\r\n         6047 Done                    | $ROOT/build-support/asan_symbolize.py\r\n         6048 Done                    | ${CXXFILT:-c++filt}\r\n         6049 Done                    | $ROOT/build-support/stacktrace_addr2line.pl $TEST_EXECUTABLE\r\n         6050 Done                    | $pipe_cmd 2>&1\r\n         6051 Done                    | tee $LOGFILE\r\n   /buildbot/AMD64_Conda_C__/cpp/build/src/arrow\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-02T23:57:56.477+0000",
                    "updated": "2019-07-02T23:57:56.477+0000",
                    "started": "2019-07-02T23:57:56.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "271288",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/271292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #4781: ARROW-5588: [C++] better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#issuecomment-507887737\n \n \n   I'll disable that test until I can address the issue in ListBuilder\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-03T00:04:23.445+0000",
                    "updated": "2019-07-03T00:04:23.445+0000",
                    "started": "2019-07-03T00:04:23.445+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "271292",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/272730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r300775516\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,129 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n+DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {}\n+\n DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n+                                     std::vector<std::shared_ptr<ArrayBuilder>> children,\n                                      const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  type_id_to_child_num_.resize(union_type->max_type_code() + 1, -1);\n+  DCHECK_EQ(union_type->mode(), UnionMode::DENSE);\n+  int child_i = 0;\n+  for (auto type_id : union_type->type_codes()) {\n+    type_id_to_child_num_[type_id] = child_i++;\n+  }\n+  children_ = std::move(children);\n+}\n \n Status DenseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  std::shared_ptr<Buffer> types;\n+  std::shared_ptr<Buffer> types, offsets, null_bitmap;\n+  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n   RETURN_NOT_OK(types_builder_.Finish(&types));\n-  std::shared_ptr<Buffer> offsets;\n   RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n \n-  std::shared_ptr<Buffer> null_bitmap;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n+  for (size_t i = 0; i < children_.size(); ++i) {\n+    std::shared_ptr<ArrayData> data;\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n+    child_data[i] = data;\n+  }\n+\n+  // If the type has not been specified in the constructor, infer it\n+  if (!type_) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<uint8_t> type_ids;\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      fields.push_back(field(field_names_[i], children_[i]->type()));\n+      type_ids.push_back(static_cast<uint8_t>(i));\n+    }\n+    type_ = union_(fields, type_ids, UnionMode::DENSE);\n+  }\n+\n+  *out = ArrayData::Make(type_, length(), {null_bitmap, types, offsets}, null_count_);\n+  (*out)->child_data = std::move(child_data);\n+  return Status::OK();\n+}\n+\n+SparseUnionBuilder::SparseUnionBuilder(MemoryPool* pool)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool) {}\n+\n+SparseUnionBuilder::SparseUnionBuilder(\n+    MemoryPool* pool, std::vector<std::shared_ptr<ArrayBuilder>> children,\n+    const std::shared_ptr<DataType>& type)\n+    : ArrayBuilder(type, pool), types_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  type_id_to_child_num_.resize(union_type->max_type_code() + 1, -1);\n+  DCHECK_EQ(union_type->mode(), UnionMode::SPARSE);\n+  int child_i = 0;\n+  for (auto type_id : union_type->type_codes()) {\n+    type_id_to_child_num_[type_id] = child_i++;\n+  }\n+  children_ = std::move(children);\n+  for (auto&& child : children_) {\n+    DCHECK_EQ(child->length(), 0);\n+  }\n+}\n+\n+Status SparseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  std::shared_ptr<Buffer> types, offsets, null_bitmap;\n   RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n+  RETURN_NOT_OK(types_builder_.Finish(&types));\n \n-  std::vector<std::shared_ptr<Field>> fields;\n   std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n-  std::vector<uint8_t> type_ids;\n   for (size_t i = 0; i < children_.size(); ++i) {\n     std::shared_ptr<ArrayData> data;\n     RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n     child_data[i] = data;\n-    fields.push_back(field(field_names_[i], children_[i]->type()));\n-    type_ids.push_back(static_cast<uint8_t>(i));\n   }\n \n   // If the type has not been specified in the constructor, infer it\n   if (!type_) {\n-    type_ = union_(fields, type_ids, UnionMode::DENSE);\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<uint8_t> type_ids;\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      fields.push_back(field(field_names_[i], children_[i]->type()));\n+      type_ids.push_back(static_cast<uint8_t>(i));\n+    }\n+    type_ = union_(fields, type_ids, UnionMode::SPARSE);\n   }\n \n   *out = ArrayData::Make(type_, length(), {null_bitmap, types, offsets}, null_count_);\n   (*out)->child_data = std::move(child_data);\n   return Status::OK();\n }\n \n+int8_t SparseUnionBuilder::AppendChild(const std::shared_ptr<ArrayBuilder>& child,\n+                                       const std::string& field_name) {\n+  // force type inferrence in Finish\n+  type_ = NULLPTR;\n \n Review comment:\n   This can be a `nullptr` unless it gets pulled into a public header.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T20:19:11.318+0000",
                    "updated": "2019-07-05T20:19:11.318+0000",
                    "started": "2019-07-05T20:19:11.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272730",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/272731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r300777424\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -92,15 +87,93 @@ class ARROW_EXPORT DenseUnionBuilder : public ArrayBuilder {\n   /// the union array.\n   int8_t AppendChild(const std::shared_ptr<ArrayBuilder>& child,\n                      const std::string& field_name = \"\") {\n+    // force type inferrence in Finish\n+    type_ = NULLPTR;\n+\n     children_.push_back(child);\n     field_names_.push_back(field_name);\n-    return static_cast<int8_t>(children_.size() - 1);\n+    auto child_num = static_cast<int8_t>(children_.size() - 1);\n+    // search for an available type_id\n+    // FIXME(bkietz) far from optimal\n+    auto max_type = static_cast<int8_t>(type_id_to_child_num_.size());\n+    for (int8_t type = 0; type < max_type; ++type) {\n+      if (type_id_to_child_num_[type] == -1) {\n+        type_id_to_child_num_[type] = child_num;\n+        return type;\n+      }\n+    }\n+    type_id_to_child_num_.push_back(child_num);\n+    return max_type;\n   }\n \n  private:\n   TypedBufferBuilder<int8_t> types_builder_;\n   TypedBufferBuilder<int32_t> offsets_builder_;\n   std::vector<std::string> field_names_;\n+  std::vector<int8_t> type_id_to_child_num_;\n+};\n+\n+/// \\class SparseUnionBuilder\n+///\n+/// This API is EXPERIMENTAL.\n+class ARROW_EXPORT SparseUnionBuilder : public ArrayBuilder {\n+ public:\n \n Review comment:\n   `UnionArray` exports `type_id_t` as `uint8_t` yet, all this code is using `int8_t`. Is this intended? Seems like a small but important discrepancy! Note that this bug exists in DenseBuilder, we might want to add a test why we didn't catch it. The [spec](https://github.com/apache/arrow/blob/master/docs/source/format/Layout.rst#dense-union-type) says it should be `int8_t` capped from 0 to 127.\r\n   \r\n   To properly fix this, we should do:\r\n   - [ ] Export type_id_t in UnionType\r\n   - [ ] Import UnionArray's type_id_t from UnionType\r\n   - [ ] Import *UnionBuilder type_id_t from UnionType\r\n   \r\n   I'm not sure if this needs to be done in this PR or open a new ticket, I'll let you judge the time it takes.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T20:19:11.344+0000",
                    "updated": "2019-07-05T20:19:11.344+0000",
                    "started": "2019-07-05T20:19:11.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272731",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/272732",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r300782248\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,129 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n+DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {}\n+\n DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n+                                     std::vector<std::shared_ptr<ArrayBuilder>> children,\n                                      const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  type_id_to_child_num_.resize(union_type->max_type_code() + 1, -1);\n+  DCHECK_EQ(union_type->mode(), UnionMode::DENSE);\n+  int child_i = 0;\n+  for (auto type_id : union_type->type_codes()) {\n+    type_id_to_child_num_[type_id] = child_i++;\n+  }\n+  children_ = std::move(children);\n+}\n \n Status DenseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  std::shared_ptr<Buffer> types;\n+  std::shared_ptr<Buffer> types, offsets, null_bitmap;\n+  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n   RETURN_NOT_OK(types_builder_.Finish(&types));\n-  std::shared_ptr<Buffer> offsets;\n   RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n \n-  std::shared_ptr<Buffer> null_bitmap;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n+  for (size_t i = 0; i < children_.size(); ++i) {\n+    std::shared_ptr<ArrayData> data;\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n+    child_data[i] = data;\n+  }\n+\n+  // If the type has not been specified in the constructor, infer it\n+  if (!type_) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<uint8_t> type_ids;\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      fields.push_back(field(field_names_[i], children_[i]->type()));\n \n Review comment:\n   Regarding the missing children_ in the constructor, this would fail here since we can lose information for the type?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T20:19:11.355+0000",
                    "updated": "2019-07-05T20:19:11.355+0000",
                    "started": "2019-07-05T20:19:11.354+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272732",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/272733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r300781962\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,129 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n+DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {}\n+\n DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n+                                     std::vector<std::shared_ptr<ArrayBuilder>> children,\n                                      const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  type_id_to_child_num_.resize(union_type->max_type_code() + 1, -1);\n+  DCHECK_EQ(union_type->mode(), UnionMode::DENSE);\n+  int child_i = 0;\n+  for (auto type_id : union_type->type_codes()) {\n \n Review comment:\n   Would it simplify to require for children.size() the same as max_type_code()? If you're not, you're asking for trouble. The user can always fill with NullBuilder.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T20:19:11.425+0000",
                    "updated": "2019-07-05T20:19:11.425+0000",
                    "started": "2019-07-05T20:19:11.424+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272733",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/272734",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r300785952\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -92,15 +87,93 @@ class ARROW_EXPORT DenseUnionBuilder : public ArrayBuilder {\n   /// the union array.\n   int8_t AppendChild(const std::shared_ptr<ArrayBuilder>& child,\n                      const std::string& field_name = \"\") {\n+    // force type inferrence in Finish\n+    type_ = NULLPTR;\n+\n     children_.push_back(child);\n     field_names_.push_back(field_name);\n-    return static_cast<int8_t>(children_.size() - 1);\n+    auto child_num = static_cast<int8_t>(children_.size() - 1);\n+    // search for an available type_id\n+    // FIXME(bkietz) far from optimal\n+    auto max_type = static_cast<int8_t>(type_id_to_child_num_.size());\n+    for (int8_t type = 0; type < max_type; ++type) {\n+      if (type_id_to_child_num_[type] == -1) {\n+        type_id_to_child_num_[type] = child_num;\n+        return type;\n+      }\n+    }\n+    type_id_to_child_num_.push_back(child_num);\n+    return max_type;\n   }\n \n  private:\n   TypedBufferBuilder<int8_t> types_builder_;\n   TypedBufferBuilder<int32_t> offsets_builder_;\n   std::vector<std::string> field_names_;\n+  std::vector<int8_t> type_id_to_child_num_;\n \n Review comment:\n   This might be unnecessary if we maintain an invariant on children_.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T20:19:11.481+0000",
                    "updated": "2019-07-05T20:19:11.481+0000",
                    "started": "2019-07-05T20:19:11.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272734",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/272735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r300780404\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -54,22 +49,22 @@ class ARROW_EXPORT DenseUnionBuilder : public ArrayBuilder {\n   }\n \n   Status AppendNulls(int64_t length) final {\n-    ARROW_RETURN_NOT_OK(types_builder_.Reserve(length));\n-    ARROW_RETURN_NOT_OK(offsets_builder_.Reserve(length));\n-    ARROW_RETURN_NOT_OK(Reserve(length));\n-    for (int64_t i = 0; i < length; ++i) {\n-      types_builder_.UnsafeAppend(0);\n-      offsets_builder_.UnsafeAppend(0);\n-    }\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(length, 0));\n+    ARROW_RETURN_NOT_OK(offsets_builder_.Append(length, 0));\n     return AppendToBitmap(length, false);\n   }\n \n   /// \\brief Append an element to the UnionArray. This must be followed\n   ///        by an append to the appropriate child builder.\n-  /// \\param[in] type index of the child the value will be appended\n-  /// \\param[in] offset offset of the value in that child\n-  Status Append(int8_t type, int32_t offset) {\n-    ARROW_RETURN_NOT_OK(types_builder_.Append(type));\n+  ///\n+  /// \\param[in] next_type type_id of the child to which the next value will be appended.\n+  ///\n+  /// The corresponding child builder must be appended to independently after this method\n+  /// is called.\n+  Status Append(int8_t next_type) {\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(next_type));\n+    auto offset =\n \n Review comment:\n   First, this is going to be costly (one indirection in type_id_to_child + children pointer(s) chasing), how about we cache the length at which the builder was added, code would look like\r\n   \r\n   `offset = length_ - children_epoch_[next_type]`\r\n   \r\n   Second, the `static_cast<int32_t>` hides the fact that we could go over 2B elements, should we report the error? For consistency, do what ListBuilder::Append does.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-05T20:19:11.484+0000",
                    "updated": "2019-07-05T20:19:11.484+0000",
                    "started": "2019-07-05T20:19:11.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "272735",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/273325",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r301144085\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -92,15 +87,93 @@ class ARROW_EXPORT DenseUnionBuilder : public ArrayBuilder {\n   /// the union array.\n   int8_t AppendChild(const std::shared_ptr<ArrayBuilder>& child,\n                      const std::string& field_name = \"\") {\n+    // force type inferrence in Finish\n+    type_ = NULLPTR;\n+\n     children_.push_back(child);\n     field_names_.push_back(field_name);\n-    return static_cast<int8_t>(children_.size() - 1);\n+    auto child_num = static_cast<int8_t>(children_.size() - 1);\n+    // search for an available type_id\n+    // FIXME(bkietz) far from optimal\n+    auto max_type = static_cast<int8_t>(type_id_to_child_num_.size());\n+    for (int8_t type = 0; type < max_type; ++type) {\n+      if (type_id_to_child_num_[type] == -1) {\n+        type_id_to_child_num_[type] = child_num;\n+        return type;\n+      }\n+    }\n+    type_id_to_child_num_.push_back(child_num);\n+    return max_type;\n   }\n \n  private:\n   TypedBufferBuilder<int8_t> types_builder_;\n   TypedBufferBuilder<int32_t> offsets_builder_;\n   std::vector<std::string> field_names_;\n+  std::vector<int8_t> type_id_to_child_num_;\n+};\n+\n+/// \\class SparseUnionBuilder\n+///\n+/// This API is EXPERIMENTAL.\n+class ARROW_EXPORT SparseUnionBuilder : public ArrayBuilder {\n+ public:\n \n Review comment:\n   I'm going to retract this as @bkietz explained it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-08T15:03:35.108+0000",
                    "updated": "2019-07-08T15:03:35.108+0000",
                    "started": "2019-07-08T15:03:35.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "273325",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/274881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302081589\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,129 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n+DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {}\n+\n DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n+                                     std::vector<std::shared_ptr<ArrayBuilder>> children,\n                                      const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  type_id_to_child_num_.resize(union_type->max_type_code() + 1, -1);\n+  DCHECK_EQ(union_type->mode(), UnionMode::DENSE);\n+  int child_i = 0;\n+  for (auto type_id : union_type->type_codes()) {\n \n Review comment:\n   I can let `children_[i]` be the builder for `type_id == i` instead of the builder which will finish into `child_data[i]`. The latter seems like it might be an implicit contract though; I'll investigate\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T14:02:08.290+0000",
                    "updated": "2019-07-10T14:02:08.290+0000",
                    "started": "2019-07-10T14:02:08.289+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274881",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/274907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302111042\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,129 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+using internal::checked_cast;\n+\n+DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool)\n+    : ArrayBuilder(nullptr, pool), types_builder_(pool), offsets_builder_(pool) {}\n+\n DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n+                                     std::vector<std::shared_ptr<ArrayBuilder>> children,\n                                      const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  type_id_to_child_num_.resize(union_type->max_type_code() + 1, -1);\n+  DCHECK_EQ(union_type->mode(), UnionMode::DENSE);\n+  int child_i = 0;\n+  for (auto type_id : union_type->type_codes()) {\n+    type_id_to_child_num_[type_id] = child_i++;\n+  }\n+  children_ = std::move(children);\n+}\n \n Status DenseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  std::shared_ptr<Buffer> types;\n+  std::shared_ptr<Buffer> types, offsets, null_bitmap;\n+  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n   RETURN_NOT_OK(types_builder_.Finish(&types));\n-  std::shared_ptr<Buffer> offsets;\n   RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n \n-  std::shared_ptr<Buffer> null_bitmap;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n+  for (size_t i = 0; i < children_.size(); ++i) {\n+    std::shared_ptr<ArrayData> data;\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n+    child_data[i] = data;\n+  }\n+\n+  // If the type has not been specified in the constructor, infer it\n+  if (!type_) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    std::vector<uint8_t> type_ids;\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      fields.push_back(field(field_names_[i], children_[i]->type()));\n \n Review comment:\n   I'll read the type from finished child_data\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T14:55:31.585+0000",
                    "updated": "2019-07-10T14:55:31.585+0000",
                    "started": "2019-07-10T14:55:31.584+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "274907",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#issuecomment-510208496\n \n \n   @fsaintjacques Travis is green https://travis-ci.org/bkietz/arrow/builds/556909415\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-10T20:05:52.487+0000",
                    "updated": "2019-07-10T20:05:52.487+0000",
                    "started": "2019-07-10T20:05:52.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275039",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302677955\n \n \n\n ##########\n File path: cpp/src/arrow/compare.cc\n ##########\n @@ -773,30 +761,16 @@ class TypeEqualsVisitor {\n   Status Visit(const UnionType& left) {\n     const auto& right = checked_cast<const UnionType&>(right_);\n \n-    if (left.mode() != right.mode() ||\n-        left.type_codes().size() != right.type_codes().size()) {\n+    if (left.mode() != right.mode() || left.type_codes() != right.type_codes()) {\n       result_ = false;\n       return Status::OK();\n     }\n \n-    const std::vector<uint8_t>& left_codes = left.type_codes();\n-    const std::vector<uint8_t>& right_codes = right.type_codes();\n-\n-    for (size_t i = 0; i < left_codes.size(); ++i) {\n-      if (left_codes[i] != right_codes[i]) {\n-        result_ = false;\n-        return Status::OK();\n-      }\n-    }\n-\n-    for (int i = 0; i < left.num_children(); ++i) {\n-      if (!left.child(i)->Equals(right_.child(i), check_metadata_)) {\n-        result_ = false;\n-        return Status::OK();\n-      }\n-    }\n-\n-    result_ = true;\n+    result_ = std::equal(\n+        left.children().begin(), left.children().end(), right.children().begin(),\n+        [this](const std::shared_ptr<Field>& l, const std::shared_ptr<Field>& r) {\n \n Review comment:\n   You only need to capture `check_metadata_`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T18:40:34.982+0000",
                    "updated": "2019-07-11T18:40:34.982+0000",
                    "started": "2019-07-11T18:40:34.981+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275460",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302675786\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,90 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n-DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n-                                     const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+using internal::checked_cast;\n \n-Status DenseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  std::shared_ptr<Buffer> types;\n+Status BasicUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  std::shared_ptr<Buffer> types, null_bitmap;\n+  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n   RETURN_NOT_OK(types_builder_.Finish(&types));\n-  std::shared_ptr<Buffer> offsets;\n-  RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n \n-  std::shared_ptr<Buffer> null_bitmap;\n-  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n+  // If the type has not been specified in the constructor, gather type_codes\n+  std::vector<uint8_t> type_codes;\n+  if (type_ == nullptr) {\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      if (type_id_to_children_[i] != nullptr) {\n+        type_codes.push_back(static_cast<uint8_t>(i));\n+      }\n+    }\n+  } else {\n+    type_codes = checked_cast<const UnionType&>(*type_).type_codes();\n+  }\n \n-  std::vector<std::shared_ptr<Field>> fields;\n-  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n-  std::vector<uint8_t> type_ids;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(type_codes.size());\n \n Review comment:\n   Shouldn't you pre-allocate to children_.size()?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T18:40:34.990+0000",
                    "updated": "2019-07-11T18:40:34.990+0000",
                    "started": "2019-07-11T18:40:34.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275461",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275462",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302680608\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,90 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n-DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n-                                     const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+using internal::checked_cast;\n \n-Status DenseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  std::shared_ptr<Buffer> types;\n+Status BasicUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  std::shared_ptr<Buffer> types, null_bitmap;\n+  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n   RETURN_NOT_OK(types_builder_.Finish(&types));\n-  std::shared_ptr<Buffer> offsets;\n-  RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n \n-  std::shared_ptr<Buffer> null_bitmap;\n-  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n+  // If the type has not been specified in the constructor, gather type_codes\n+  std::vector<uint8_t> type_codes;\n+  if (type_ == nullptr) {\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      if (type_id_to_children_[i] != nullptr) {\n+        type_codes.push_back(static_cast<uint8_t>(i));\n+      }\n+    }\n+  } else {\n+    type_codes = checked_cast<const UnionType&>(*type_).type_codes();\n+  }\n \n-  std::vector<std::shared_ptr<Field>> fields;\n-  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n-  std::vector<uint8_t> type_ids;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(type_codes.size());\n   for (size_t i = 0; i < children_.size(); ++i) {\n-    std::shared_ptr<ArrayData> data;\n-    RETURN_NOT_OK(children_[i]->FinishInternal(&data));\n-    child_data[i] = data;\n-    fields.push_back(field(field_names_[i], children_[i]->type()));\n-    type_ids.push_back(static_cast<uint8_t>(i));\n+    RETURN_NOT_OK(children_[i]->FinishInternal(&child_data[i]));\n   }\n \n   // If the type has not been specified in the constructor, infer it\n-  if (!type_) {\n-    type_ = union_(fields, type_ids, UnionMode::DENSE);\n+  if (type_ == nullptr) {\n+    std::vector<std::shared_ptr<Field>> fields;\n+    auto field_names_it = field_names_.begin();\n+    for (auto&& data : child_data) {\n+      fields.push_back(field(*field_names_it++, data->type));\n+    }\n+    type_ = union_(fields, type_codes, mode_);\n   }\n \n-  *out = ArrayData::Make(type_, length(), {null_bitmap, types, offsets}, null_count_);\n+  *out = ArrayData::Make(type_, length(), {null_bitmap, types, nullptr}, null_count_);\n   (*out)->child_data = std::move(child_data);\n   return Status::OK();\n }\n \n+BasicUnionBuilder::BasicUnionBuilder(\n+    MemoryPool* pool, UnionMode::type mode,\n+    const std::vector<std::shared_ptr<ArrayBuilder>>& children,\n+    const std::shared_ptr<DataType>& type)\n+    : ArrayBuilder(type, pool), mode_(mode), types_builder_(pool) {\n+  auto union_type = checked_cast<const UnionType*>(type.get());\n+  DCHECK_NE(union_type, nullptr);\n+  DCHECK_EQ(union_type->mode(), mode);\n+\n+  children_ = children;\n+  type_id_to_children_.resize(union_type->max_type_code() + 1, nullptr);\n+\n+  auto field_it = type->children().begin();\n+  auto children_it = children.begin();\n+  for (auto type_id : union_type->type_codes()) {\n+    type_id_to_children_[type_id] = *children_it++;\n+    field_names_.push_back((*field_it++)->name());\n+  }\n+  DCHECK_EQ(children_it, children.end());\n+  DCHECK_EQ(field_it, type->children().end());\n+}\n+\n+int8_t BasicUnionBuilder::AppendChild(const std::shared_ptr<ArrayBuilder>& new_child,\n+                                      const std::string& field_name) {\n+  // force type inferrence in Finish\n+  type_ = nullptr;\n+\n+  field_names_.push_back(field_name);\n+  children_.push_back(new_child);\n+\n+  for (; static_cast<size_t>(dense_type_id_) < type_id_to_children_.size();\n \n Review comment:\n   I'd DCHECK we reached (U)INT8_MAX . I think it's worthy of comment as it's not exactly clear what and why it's doing.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T18:40:34.992+0000",
                    "updated": "2019-07-11T18:40:34.992+0000",
                    "started": "2019-07-11T18:40:34.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275462",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302677059\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -54,53 +94,78 @@ class ARROW_EXPORT DenseUnionBuilder : public ArrayBuilder {\n   }\n \n   Status AppendNulls(int64_t length) final {\n-    ARROW_RETURN_NOT_OK(types_builder_.Reserve(length));\n-    ARROW_RETURN_NOT_OK(offsets_builder_.Reserve(length));\n-    ARROW_RETURN_NOT_OK(Reserve(length));\n-    for (int64_t i = 0; i < length; ++i) {\n-      types_builder_.UnsafeAppend(0);\n-      offsets_builder_.UnsafeAppend(0);\n-    }\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(length, 0));\n+    ARROW_RETURN_NOT_OK(offsets_builder_.Append(length, 0));\n     return AppendToBitmap(length, false);\n   }\n \n   /// \\brief Append an element to the UnionArray. This must be followed\n   ///        by an append to the appropriate child builder.\n-  /// \\param[in] type index of the child the value will be appended\n-  /// \\param[in] offset offset of the value in that child\n-  Status Append(int8_t type, int32_t offset) {\n-    ARROW_RETURN_NOT_OK(types_builder_.Append(type));\n+  ///\n+  /// \\param[in] next_type type_id of the child to which the next value will be appended.\n+  ///\n+  /// The corresponding child builder must be appended to independently after this method\n+  /// is called.\n+  Status Append(int8_t next_type) {\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(next_type));\n+    if (type_id_to_children_[next_type]->length() == kListMaximumElements) {\n \n Review comment:\n   Do we want to defer this to Finish? We'd save a lot of checks for the \"general\" case.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T18:40:35.005+0000",
                    "updated": "2019-07-11T18:40:35.005+0000",
                    "started": "2019-07-11T18:40:35.005+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275463",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302686883\n \n \n\n ##########\n File path: cpp/src/arrow/array-dict-test.cc\n ##########\n @@ -948,4 +948,49 @@ TEST(TestDictionary, TransposeNulls) {\n   AssertArraysEqual(*expected, *out);\n }\n \n+TEST(TestDictionary, DISABLED_ListOfDictionary) {\n+  std::unique_ptr<ArrayBuilder> root_builder;\n+  ASSERT_OK(MakeBuilder(default_memory_pool(), list(dictionary(int8(), utf8())),\n+                        &root_builder));\n+  auto list_builder = checked_cast<ListBuilder*>(root_builder.get());\n+  auto dict_builder =\n+      checked_cast<DictionaryBuilder<StringType>*>(list_builder->value_builder());\n+\n+  ASSERT_OK(list_builder->Append());\n+  std::vector<std::string> expected;\n+  for (char a : \"abc\") {\n+    for (char d : \"def\") {\n+      for (char g : \"ghi\") {\n+        for (char j : \"jkl\") {\n+          for (char m : \"mno\") {\n+            for (char p : \"pqr\") {\n+              if ((static_cast<int>(a) + d + g + j + m + p) % 16 == 0) {\n+                ASSERT_OK(list_builder->Append());\n+              }\n+              // 3**6 distinct strings; too large for int8\n+              char str[6] = {a, d, g, j, m, p};\n+              ASSERT_OK(dict_builder->Append(str));\n+              expected.push_back(str);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+  std::shared_ptr<Array> expected_dict;\n+  ArrayFromVector<StringType, std::string>(expected, &expected_dict);\n+\n+  std::shared_ptr<Array> array;\n+  ASSERT_OK(root_builder->Finish(&array));\n+  ASSERT_OK(ValidateArray(*array));\n+\n+  auto expected_type = list(dictionary(int16(), utf8()));\n+  ASSERT_EQ(array->type()->ToString(), expected_type->ToString());\n \n Review comment:\n   ToString? Applies to other reference.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T18:40:35.033+0000",
                    "updated": "2019-07-11T18:40:35.033+0000",
                    "started": "2019-07-11T18:40:35.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275464",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275475",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302705538\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.cc\n ##########\n @@ -19,42 +19,90 @@\n \n #include <utility>\n \n+#include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n-DenseUnionBuilder::DenseUnionBuilder(MemoryPool* pool,\n-                                     const std::shared_ptr<DataType>& type)\n-    : ArrayBuilder(type, pool), types_builder_(pool), offsets_builder_(pool) {}\n+using internal::checked_cast;\n \n-Status DenseUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n-  std::shared_ptr<Buffer> types;\n+Status BasicUnionBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n+  std::shared_ptr<Buffer> types, null_bitmap;\n+  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n   RETURN_NOT_OK(types_builder_.Finish(&types));\n-  std::shared_ptr<Buffer> offsets;\n-  RETURN_NOT_OK(offsets_builder_.Finish(&offsets));\n \n-  std::shared_ptr<Buffer> null_bitmap;\n-  RETURN_NOT_OK(null_bitmap_builder_.Finish(&null_bitmap));\n+  // If the type has not been specified in the constructor, gather type_codes\n+  std::vector<uint8_t> type_codes;\n+  if (type_ == nullptr) {\n+    for (size_t i = 0; i < children_.size(); ++i) {\n+      if (type_id_to_children_[i] != nullptr) {\n+        type_codes.push_back(static_cast<uint8_t>(i));\n+      }\n+    }\n+  } else {\n+    type_codes = checked_cast<const UnionType&>(*type_).type_codes();\n+  }\n \n-  std::vector<std::shared_ptr<Field>> fields;\n-  std::vector<std::shared_ptr<ArrayData>> child_data(children_.size());\n-  std::vector<uint8_t> type_ids;\n+  std::vector<std::shared_ptr<ArrayData>> child_data(type_codes.size());\n \n Review comment:\n   The two should have identical size at this point, but I can change it for clarity.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T19:24:19.768+0000",
                    "updated": "2019-07-11T19:24:19.768+0000",
                    "started": "2019-07-11T19:24:19.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275475",
                    "issueId": "13239280"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/worklog/275478",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #4781: ARROW-5588: [C++] Better support for building union arrays\nURL: https://github.com/apache/arrow/pull/4781#discussion_r302706107\n \n \n\n ##########\n File path: cpp/src/arrow/array/builder_union.h\n ##########\n @@ -54,53 +94,78 @@ class ARROW_EXPORT DenseUnionBuilder : public ArrayBuilder {\n   }\n \n   Status AppendNulls(int64_t length) final {\n-    ARROW_RETURN_NOT_OK(types_builder_.Reserve(length));\n-    ARROW_RETURN_NOT_OK(offsets_builder_.Reserve(length));\n-    ARROW_RETURN_NOT_OK(Reserve(length));\n-    for (int64_t i = 0; i < length; ++i) {\n-      types_builder_.UnsafeAppend(0);\n-      offsets_builder_.UnsafeAppend(0);\n-    }\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(length, 0));\n+    ARROW_RETURN_NOT_OK(offsets_builder_.Append(length, 0));\n     return AppendToBitmap(length, false);\n   }\n \n   /// \\brief Append an element to the UnionArray. This must be followed\n   ///        by an append to the appropriate child builder.\n-  /// \\param[in] type index of the child the value will be appended\n-  /// \\param[in] offset offset of the value in that child\n-  Status Append(int8_t type, int32_t offset) {\n-    ARROW_RETURN_NOT_OK(types_builder_.Append(type));\n+  ///\n+  /// \\param[in] next_type type_id of the child to which the next value will be appended.\n+  ///\n+  /// The corresponding child builder must be appended to independently after this method\n+  /// is called.\n+  Status Append(int8_t next_type) {\n+    ARROW_RETURN_NOT_OK(types_builder_.Append(next_type));\n+    if (type_id_to_children_[next_type]->length() == kListMaximumElements) {\n \n Review comment:\n   We'll get signed overflow in the offsets buffer if we don't do the check here. I can slap that into defined behavior with casts, though. Is that preferable?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-07-11T19:25:52.346+0000",
                    "updated": "2019-07-11T19:25:52.346+0000",
                    "started": "2019-07-11T19:25:52.345+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "275478",
                    "issueId": "13239280"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@10163101[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b2c239b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e8bd0c5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4c10474[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5560afa7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@294855a4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9e5b5b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@58bf25c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@554668dd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3e48f2a4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a2498e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@40e780e2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jul 12 14:40:21 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-12T14:40:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5588/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-06-13T13:03:23.000+0000",
        "updated": "2019-08-01T22:39:27.000+0000",
        "timeoriginalestimate": null,
        "description": "UnionBuilders (for both sparse and dense mode unions) are not currently supported by MakeBuilder or ArrayFromJSON. This increases friction when working with and testing against union arrays, and support should be added to both. For ArrayFromJSON each entry must be specified with a (type code, value) pair:\r\n\r\n{code}\r\nArrayFromJSON(union_({field(\"lint\", list(int32())), field(\"str\", utf8())}), R\"([\r\n  [0, null],\r\n  [1, \"hello\"],\r\n  [0, [1, 2]],\r\n  [1, \"world\"]\r\n])\");\r\n{code}\r\n\r\nDenseUnionBuilder currently requires the user to explicitly input offsets, but if it were modified to hold pointers to child builders (as ListBuilder, for example) then those offsets could be derived from the lengths of child builders (which is much more user friendly).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Better support for building UnionArrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13239280/comment/16883870",
                    "id": "16883870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 4781\n[https://github.com/apache/arrow/pull/4781]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-07-12T14:40:21.083+0000",
                    "updated": "2019-07-12T14:40:21.083+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z03pg0:",
        "customfield_12314139": null
    }
}