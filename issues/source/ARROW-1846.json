{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13120293",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293",
    "key": "ARROW-1846",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "analytics",
            "dataframe",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12589305",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12589305",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12616174",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616174",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13335267",
                    "key": "ARROW-10301",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335267",
                    "fields": {
                        "summary": "[C++] Add \"all\" boolean reducing kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12616172",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616172",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13335106",
                    "key": "ARROW-10291",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13335106",
                    "fields": {
                        "summary": "[C++] Add all_kleene boolean reducing kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=arw2019",
            "name": "arw2019",
            "key": "arw2019",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Andrew Wieteska",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1846/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 22,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/492267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 opened a new pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294\n\n\n   As discussed on Jira this is a short-circuiting Max for booleans implemented on top of the existing `min_max` kernel.\r\n   \r\n   As is there are no options: null is always taken to evaluate to false. \r\n   \r\n   If we want to include control over null handling I can either add `Options` to the kernel or I can implement an `any_kleene` kernel by analogy with the `and_kleene` and `or_kleene` logical kernels that we have. \r\n   \r\n   In Python the two options would look like:\r\n   \r\n   ``` python\r\n   In []: a = pa.array([True, None], type='bool') \r\n       ...:  \r\n       ...: # option 1 \r\n       ...: pc.any(a).as_py() is True \r\n       ...: pc.any_kleene(a).as_py() is None \r\n       ...:  \r\n       ...: # option 2 \r\n       ...: pc.any(null_handling='skip') is True \r\n       ...: pc.any(null_handling='emit_null') is None                                                     \r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T05:10:00.760+0000",
                    "updated": "2020-09-29T05:10:00.760+0000",
                    "started": "2020-09-29T05:10:00.760+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492267",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/492275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#issuecomment-700440254\n\n\n   https://issues.apache.org/jira/browse/ARROW-1846\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T05:38:39.035+0000",
                    "updated": "2020-09-29T05:38:39.035+0000",
                    "started": "2020-09-29T05:38:39.035+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492275",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/492541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r496875601\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    ArrayType arr(batch[0].array());\n+    const auto true_count = arr.true_count();\n+    if (true_count > 0) {\n+      this->state.max = true;\n+    }\n+  }\n+\n+  void Finalize(KernelContext*, Datum* out) override {\n+    using ScalarType = typename TypeTraits<BooleanType>::ScalarType;\n\nReview comment:\n       Just use BooleanScalar here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    ArrayType arr(batch[0].array());\n+    const auto true_count = arr.true_count();\n+    if (true_count > 0) {\n+      this->state.max = true;\n+    }\n+  }\n+\n+  void Finalize(KernelContext*, Datum* out) override {\n+    using ScalarType = typename TypeTraits<BooleanType>::ScalarType;\n+\n+    if (this->state.max == true) {\n+      out->value = std::make_shared<ScalarType>(true);\n+    } else {\n+      out->value = std::make_shared<ScalarType>(false);\n+    }\n\nReview comment:\n       Collapse all this to\r\n   \r\n   `out->value = std::make_shared<BooleanScalar>(this->state.max)`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n\nReview comment:\n       maybe just `bool` here?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+\n+  AnyResult result;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto true_count = array_numeric.true_count();\n+\n+  if (true_count > 0) {\n+    result.any = true;\n+  }\n+  return result;\n+}\n+\n+void ValidateAny(const Array& array) {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+  const ScalarType& out_any = out.scalar_as<ScalarType>();\n+\n+  auto expected = NaiveAny(array);\n+  const auto& expected_any = static_cast<const ScalarType>(expected.any);\n+\n+  ASSERT_EQ(out_any, expected_any);\n+}\n+\n+class TestRandomBooleanAnyKernel : public ::testing::Test {};\n+\n+TEST_F(TestRandomBooleanAnyKernel, RandomArrayAny) {\n+  auto rand = random::RandomArrayGenerator(0x8afc055);\n+  // Test size up to 1<<11 (2048).\n+  for (size_t i = 3; i < 12; i += 2) {\n+    for (auto null_probability : {0.0, 0.01, 0.1, 0.5, 0.99, 1.0}) {\n+      int64_t base_length = (1UL << i) + 2;\n+      auto array = rand.Boolean(base_length, null_probability, null_probability);\n+      for (auto length_adjust : {-2, -1, 0, 1, 2}) {\n+        int64_t length = (1UL << i) + length_adjust;\n+        ValidateAny(*array->Slice(0, length));\n+      }\n+    }\n+  }\n+}\n\nReview comment:\n       It's unclear how useful randomly generated cases are for Any by its nature\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n\nReview comment:\n       Not used\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n\nReview comment:\n       These typedefs probably not needed, just use the Boolean* types within\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    ArrayType arr(batch[0].array());\n\nReview comment:\n       Just use `BooleanArray` here\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n\nReview comment:\n       Is this needed?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -584,6 +614,33 @@ struct MinMaxInitState {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct AnyInitState {\n+  std::unique_ptr<KernelState> state;\n+  KernelContext* ctx;\n+  const DataType& in_type;\n+  const std::shared_ptr<DataType>& out_type;\n+  const MinMaxOptions& options;\n+\n+  AnyInitState(KernelContext* ctx, const DataType& in_type,\n+               const std::shared_ptr<DataType>& out_type, const MinMaxOptions& options)\n+      : ctx(ctx), in_type(in_type), out_type(out_type), options(options) {}\n+\n+  Status Visit(const DataType&) {\n+    return Status::NotImplemented(\"No any kernel implemented\");\n+  }\n+\n+  Status Visit(const BooleanType&) {\n+    state.reset(new BooleanAnyImpl<SimdLevel>(out_type, options));\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<KernelState> Create() {\n+    ctx->SetStatus(VisitTypeInline(in_type, this));\n+    return std::move(state);\n+  }\n+};\n\nReview comment:\n       Is this really needed? Since there is only one type handled seems like you could omit all this and do something simpler in `AnyInit`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+\n+  AnyResult result;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n\nReview comment:\n       use `checked_cast<const BooleanArray&>` here\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-29T16:33:23.363+0000",
                    "updated": "2020-09-29T16:33:23.363+0000",
                    "started": "2020-09-29T16:33:23.362+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492541",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/492797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r497262235\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    ArrayType arr(batch[0].array());\n+    const auto true_count = arr.true_count();\n+    if (true_count > 0) {\n+      this->state.max = true;\n+    }\n+  }\n+\n+  void Finalize(KernelContext*, Datum* out) override {\n+    using ScalarType = typename TypeTraits<BooleanType>::ScalarType;\n\nReview comment:\n       Switched to that here (and in other places)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    ArrayType arr(batch[0].array());\n\nReview comment:\n       Switched to that here (and in other places)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n\nReview comment:\n       Got rid of all these\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    ArrayType arr(batch[0].array());\n+    const auto true_count = arr.true_count();\n+    if (true_count > 0) {\n+      this->state.max = true;\n+    }\n+  }\n+\n+  void Finalize(KernelContext*, Datum* out) override {\n+    using ScalarType = typename TypeTraits<BooleanType>::ScalarType;\n+\n+    if (this->state.max == true) {\n+      out->value = std::make_shared<ScalarType>(true);\n+    } else {\n+      out->value = std::make_shared<ScalarType>(false);\n+    }\n\nReview comment:\n       Done!\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -547,6 +547,36 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using StateType = MinMaxState<BooleanType, SimdLevel>;\n\nReview comment:\n       Done\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+\n+  AnyResult result;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto true_count = array_numeric.true_count();\n+\n+  if (true_count > 0) {\n+    result.any = true;\n+  }\n+  return result;\n+}\n+\n+void ValidateAny(const Array& array) {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+  const ScalarType& out_any = out.scalar_as<ScalarType>();\n+\n+  auto expected = NaiveAny(array);\n+  const auto& expected_any = static_cast<const ScalarType>(expected.any);\n+\n+  ASSERT_EQ(out_any, expected_any);\n+}\n+\n+class TestRandomBooleanAnyKernel : public ::testing::Test {};\n+\n+TEST_F(TestRandomBooleanAnyKernel, RandomArrayAny) {\n+  auto rand = random::RandomArrayGenerator(0x8afc055);\n+  // Test size up to 1<<11 (2048).\n+  for (size_t i = 3; i < 12; i += 2) {\n+    for (auto null_probability : {0.0, 0.01, 0.1, 0.5, 0.99, 1.0}) {\n+      int64_t base_length = (1UL << i) + 2;\n+      auto array = rand.Boolean(base_length, null_probability, null_probability);\n+      for (auto length_adjust : {-2, -1, 0, 1, 2}) {\n+        int64_t length = (1UL << i) + length_adjust;\n+        ValidateAny(*array->Slice(0, length));\n+      }\n+    }\n+  }\n+}\n\nReview comment:\n       Right. Should I drop this part of the test altogether?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+\n+  AnyResult result;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n\nReview comment:\n       Done!\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n\nReview comment:\n       No - switched to plain bool variable in the new commit as you suggest below\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T06:18:05.188+0000",
                    "updated": "2020-09-30T06:18:05.188+0000",
                    "started": "2020-09-30T06:18:05.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492797",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/492920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#issuecomment-701357437\n\n\n   Just a high level remark (didn't yet look at the code), but I think the example you gave:\r\n   \r\n   ```\r\n   In []: a = pa.array([True, None], type='bool') \r\n       ...:  \r\n       ...: # option 1 \r\n       ...: pc.any(a).as_py() is True \r\n       ...: pc.any_kleene(a).as_py() is None \r\n       ...:  \r\n       ...: # option 2 \r\n       ...: pc.any(null_handling='skip') is True \r\n       ...: pc.any(null_handling='emit_null') is None                                                     \r\n   ```\r\n   \r\n   has a wrong output for the kleene version. With Kleene logic, also the second output would be True, as the array already contains a True, the missing value doesn't matter anymore. \r\n   \r\n   Using Kleene logic or not is not the same as the skip/emit null handling. By default, if nulls are skipped, then it doesn't matter if you use Kleene logic or not, since there are no nulls to behave in certain ways. So only when not skipping nulls, you get a different behaviour: ``any([True, None], skipna=False)`` or `any_kleene([True, None], skipna=False)` would still both give True as result, since there is any True. But eg  ``any([False, None], skipna=False)`` woud give False (the missing being False) vs `any_kleene([False, None], skipna=False)` giving null as result.\r\n   \r\n   See also our discussions in pandas about this (https://github.com/pandas-dev/pandas/issues/29686; https://pandas.pydata.org/pandas-docs/stable/user_guide/boolean.html#kleene-logical-operations)\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T12:27:12.370+0000",
                    "updated": "2020-09-30T12:27:12.370+0000",
                    "started": "2020-09-30T12:27:12.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492920",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/492996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r497568545\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+\n+  AnyResult result;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto true_count = array_numeric.true_count();\n+\n+  if (true_count > 0) {\n+    result.any = true;\n+  }\n+  return result;\n+}\n+\n+void ValidateAny(const Array& array) {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+  const ScalarType& out_any = out.scalar_as<ScalarType>();\n+\n+  auto expected = NaiveAny(array);\n+  const auto& expected_any = static_cast<const ScalarType>(expected.any);\n+\n+  ASSERT_EQ(out_any, expected_any);\n+}\n+\n+class TestRandomBooleanAnyKernel : public ::testing::Test {};\n+\n+TEST_F(TestRandomBooleanAnyKernel, RandomArrayAny) {\n+  auto rand = random::RandomArrayGenerator(0x8afc055);\n+  // Test size up to 1<<11 (2048).\n+  for (size_t i = 3; i < 12; i += 2) {\n+    for (auto null_probability : {0.0, 0.01, 0.1, 0.5, 0.99, 1.0}) {\n+      int64_t base_length = (1UL << i) + 2;\n+      auto array = rand.Boolean(base_length, null_probability, null_probability);\n+      for (auto length_adjust : {-2, -1, 0, 1, 2}) {\n+        int64_t length = (1UL << i) + length_adjust;\n+        ValidateAny(*array->Slice(0, length));\n+      }\n+    }\n+  }\n+}\n\nReview comment:\n       I think you can\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T14:45:17.872+0000",
                    "updated": "2020-09-30T14:45:17.872+0000",
                    "started": "2020-09-30T14:45:17.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "492996",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/493088",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r497678828\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,109 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ArrayType = typename Traits::ArrayType;\n+  using c_type = typename BooleanType::c_type;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+ public:\n+  void AssertAnyIs(const Datum& array, c_type expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const ScalarType& out_any = out.scalar_as<ScalarType>();\n+    const auto expected_any = static_cast<const ScalarType>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, c_type expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, c_type expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() { return Traits::type_singleton(); }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n+  this->AssertAnyIs(\"[true, false]\", true);\n+  this->AssertAnyIs(\"[null, null, null]\", false);\n+  this->AssertAnyIs(\"[false, false, false]\", false);\n+  this->AssertAnyIs(\"[false, false, false, null]\", false);\n+  this->AssertAnyIs(\"[true, null, true, true]\", true);\n+  this->AssertAnyIs(\"[false, null, false, true]\", true);\n+  this->AssertAnyIs(\"[true, null, false, true]\", true);\n+  this->AssertAnyIs(chunked_input0, true);\n+  this->AssertAnyIs(chunked_input1, true);\n+  this->AssertAnyIs(chunked_input2, false);\n+  this->AssertAnyIs(chunked_input3, false);\n+}\n+\n+struct AnyResult {\n+  using c_type = typename BooleanType::c_type;\n+\n+  c_type any = false;\n+};\n+\n+static AnyResult NaiveAny(const Array& array) {\n+  using ArrayType = typename TypeTraits<BooleanType>::ArrayType;\n+\n+  AnyResult result;\n+\n+  const auto& array_numeric = reinterpret_cast<const ArrayType&>(array);\n+  const auto true_count = array_numeric.true_count();\n+\n+  if (true_count > 0) {\n+    result.any = true;\n+  }\n+  return result;\n+}\n+\n+void ValidateAny(const Array& array) {\n+  using Traits = TypeTraits<BooleanType>;\n+  using ScalarType = typename Traits::ScalarType;\n+\n+  ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+  const ScalarType& out_any = out.scalar_as<ScalarType>();\n+\n+  auto expected = NaiveAny(array);\n+  const auto& expected_any = static_cast<const ScalarType>(expected.any);\n+\n+  ASSERT_EQ(out_any, expected_any);\n+}\n+\n+class TestRandomBooleanAnyKernel : public ::testing::Test {};\n+\n+TEST_F(TestRandomBooleanAnyKernel, RandomArrayAny) {\n+  auto rand = random::RandomArrayGenerator(0x8afc055);\n+  // Test size up to 1<<11 (2048).\n+  for (size_t i = 3; i < 12; i += 2) {\n+    for (auto null_probability : {0.0, 0.01, 0.1, 0.5, 0.99, 1.0}) {\n+      int64_t base_length = (1UL << i) + 2;\n+      auto array = rand.Boolean(base_length, null_probability, null_probability);\n+      for (auto length_adjust : {-2, -1, 0, 1, 2}) {\n+        int64_t length = (1UL << i) + length_adjust;\n+        ValidateAny(*array->Slice(0, length));\n+      }\n+    }\n+  }\n+}\n\nReview comment:\n       Done!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-30T17:22:48.110+0000",
                    "updated": "2020-09-30T17:22:48.110+0000",
                    "started": "2020-09-30T17:22:48.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493088",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/493554",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r498344896\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -549,6 +549,28 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n\nReview comment:\n       I don't really understand why this is inheriting from MinMax. Does it help reduce the code size in any way?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,57 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+\n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+ public:\n+  void AssertAnyIs(const Datum& array, bool expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const BooleanScalar& out_any = out.scalar_as<BooleanScalar>();\n+    const auto expected_any = static_cast<const BooleanScalar>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, bool expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, bool expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<BooleanType>::type_singleton();\n+  }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n\nReview comment:\n       Please also test with an empty array.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -549,6 +549,28 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    BooleanArray arr(batch[0].array());\n+    const auto true_count = arr.true_count();\n\nReview comment:\n       This forces counting the set bits in the whole array, but we're only interested in the presence of a single set bit, so we should be able to shortcut much more aggressively.\r\n   \r\n   You may try to use `OptionalBinaryBitBlockCounter` for that. Untested:\r\n   ```c++\r\n   const auto& data = *batch[0].array();\r\n   OptionalBinaryBitBlockCounter counter(data.buffers[0], data.offset, data.buffers[1], data.offset, data.length);\r\n   int64_t position = 0;\r\n   while (position < data.length) {\r\n     const auto block = counter.NextAndBlock();\r\n     if (block.popcount > 0) {\r\n       this->state.max = true;\r\n       break;\r\n     }\r\n     position += block.length;\r\n   }\r\n   ```\r\n   }\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-01T15:52:35.257+0000",
                    "updated": "2020-10-01T15:52:35.257+0000",
                    "started": "2020-10-01T15:52:35.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "493554",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500043",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r503927482\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       Is this the behaviour we want? (the *\"null values are taken to evaluate to false.\"*\r\n   \r\n   Any/all are of course not the most typical reductions (so I am also not fully sure about the desired behaviour), but, for other reductions we actually skip nulls. And skipping nulls is not the same as evaluating them to False\r\n   \r\n   (somewhat related to my comment at https://github.com/apache/arrow/pull/8294#issuecomment-701357437)\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T12:56:41.652+0000",
                    "updated": "2020-10-13T12:56:41.652+0000",
                    "started": "2020-10-13T12:56:41.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500043",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r503927482\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       Is this the behaviour we want? (the *\"null values are taken to evaluate to false\"*)\r\n   \r\n   Any/all are of course not the most typical reductions (so I am also not fully sure about the desired behaviour), but, for other reductions we actually skip nulls. And skipping nulls is not the same as evaluating them to False\r\n   \r\n   (somewhat related to my comment at https://github.com/apache/arrow/pull/8294#issuecomment-701357437)\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T12:56:55.727+0000",
                    "updated": "2020-10-13T12:56:55.727+0000",
                    "started": "2020-10-13T12:56:55.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500044",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r504080604\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -584,6 +614,33 @@ struct MinMaxInitState {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct AnyInitState {\n+  std::unique_ptr<KernelState> state;\n+  KernelContext* ctx;\n+  const DataType& in_type;\n+  const std::shared_ptr<DataType>& out_type;\n+  const MinMaxOptions& options;\n+\n+  AnyInitState(KernelContext* ctx, const DataType& in_type,\n+               const std::shared_ptr<DataType>& out_type, const MinMaxOptions& options)\n+      : ctx(ctx), in_type(in_type), out_type(out_type), options(options) {}\n+\n+  Status Visit(const DataType&) {\n+    return Status::NotImplemented(\"No any kernel implemented\");\n+  }\n+\n+  Status Visit(const BooleanType&) {\n+    state.reset(new BooleanAnyImpl<SimdLevel>(out_type, options));\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<KernelState> Create() {\n+    ctx->SetStatus(VisitTypeInline(in_type, this));\n+    return std::move(state);\n+  }\n+};\n\nReview comment:\n       It's not. I've simplified it\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -549,6 +549,28 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n+  using MinMaxImpl<BooleanType, SimdLevel>::MinMaxImpl;\n+\n+  void Consume(KernelContext*, const ExecBatch& batch) override {\n+    // short-circuit if seen a True already\n+    if (this->state.max == true) {\n+      return;\n+    }\n+\n+    BooleanArray arr(batch[0].array());\n+    const auto true_count = arr.true_count();\n\nReview comment:\n       This worked pretty much straight away. Thanks @pitrou!!!\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       I'm not sure about the desired behavior either (although if it was up to me I would want to shoot for consistency with existing kernels).\r\n   \r\n   That said I may need to improve the phrasing in the docstring. I think he current kernel behavior is what you describe: we skip nulls and return whether we saw any `True` values so perhaps it's better to just say that. I *think* that as is treating `null` as `false` or skipping is the same in this case, since neither evaluate to true.\r\n   \r\n   A bit off-topic, but for an `all` kernel (which could be nice to have) I think we'd want to have null handling options, so that users could switch between\r\n   ```\r\n   any([true, null]) = true # skip nulls\r\n   any([true, null]) = false # null evaluates as false\r\n   any([true, null]) = false # kleene logic (I think?)\r\n   ```\r\n   (PS Apologies for  not replying to your comment directly - I have opened ARROW-10291 to track that discussion )\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_basic_internal.h\n##########\n@@ -549,6 +549,28 @@ struct BooleanMinMaxImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n   }\n };\n \n+template <SimdLevel::type SimdLevel>\n+struct BooleanAnyImpl : public MinMaxImpl<BooleanType, SimdLevel> {\n\nReview comment:\n       It doesn't. I've rewritten it so it inherits from `ScalarAggregator` directly\r\n   \r\n   Also since it's no longer a template I moved it to `aggregate_basic.cc`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/aggregate_test.cc\n##########\n@@ -726,6 +726,57 @@ TYPED_TEST(TestRandomNumericMinMaxKernel, RandomArrayMinMax) {\n   }\n }\n \n+\n+//\n+// Any\n+//\n+\n+class TestPrimitiveAnyKernel : public ::testing::Test {\n+ public:\n+  void AssertAnyIs(const Datum& array, bool expected) {\n+    ASSERT_OK_AND_ASSIGN(Datum out, Any(array));\n+    const BooleanScalar& out_any = out.scalar_as<BooleanScalar>();\n+    const auto expected_any = static_cast<const BooleanScalar>(expected);\n+    ASSERT_EQ(out_any, expected_any);\n+  }\n+\n+  void AssertAnyIs(const std::string& json, bool expected) {\n+    auto array = ArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  void AssertAnyIs(const std::vector<std::string>& json, bool expected) {\n+    auto array = ChunkedArrayFromJSON(type_singleton(), json);\n+    AssertAnyIs(array, expected);\n+  }\n+\n+  std::shared_ptr<DataType> type_singleton() {\n+    return TypeTraits<BooleanType>::type_singleton();\n+  }\n+};\n+\n+class TestAnyKernel : public TestPrimitiveAnyKernel {};\n+\n+TEST_F(TestAnyKernel, Basics) {\n+  std::vector<std::string> chunked_input0 = {\"[]\", \"[true]\"};\n+  std::vector<std::string> chunked_input1 = {\"[true, true, null]\", \"[true, null]\"};\n+  std::vector<std::string> chunked_input2 = {\"[false, false, false]\", \"[false]\"};\n+  std::vector<std::string> chunked_input3 = {\"[false, null]\", \"[null, false]\"};\n+\n+  this->AssertAnyIs(\"[false]\", false);\n\nReview comment:\n       Done\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T16:39:30.157+0000",
                    "updated": "2020-10-13T16:39:30.157+0000",
                    "started": "2020-10-13T16:39:30.157+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500158",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r504113404\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       Ah, yes, you're correct that for this PR there is not yet a difference: you are only dealing with `any`, and it's only for `all` that there is a difference between \"skipping nulls\" and \"treating nulls as False\"\r\n   \r\n   So I would indeed update the docstring to simply state that nulls are skipped.\r\n   \r\n   For your example about `all` (I assume the code was meant to use `all` and not `any` ?), for the last line about Kleene logic I expect a return value of `null` (as the `\u01f9ull` in the values can be both True or False, meaning that the result can be True of False, meaning it is unknown)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T16:55:27.011+0000",
                    "updated": "2020-10-13T16:55:27.011+0000",
                    "started": "2020-10-13T16:55:27.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500174",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r504128151\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       Docstring updated.\r\n   \r\n   Sorry yes. The examples were for `all`. Just to make sure I understand, with kleene logic, we emit null if there's a null anywhere in the input\r\n   ```\r\n   any_kleene([true, null]) = null\r\n   any_kleene([false, null]) = null\r\n   all_kleene([true, null]) = null\r\n   all_kleene([false, null]) = null\r\n   ```\r\n   I opened ARROW-10301 re: `all` kernel\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-13T17:19:24.643+0000",
                    "updated": "2020-10-13T17:19:24.643+0000",
                    "started": "2020-10-13T17:19:24.643+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500187",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500446",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r504419732\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       > Sorry yes. The examples were for all. Just to make sure I understand, with kleene logic, we emit null if there's a null anywhere in the input\r\n   \r\n   No, we only emit null if the presence of the null (the fact that it could be either True or False) would influence the result:\r\n   \r\n   ```\r\n   any_kleene([true, null]) = true\r\n   any_kleene([false, null]) = null\r\n   all_kleene([true, null]) = null\r\n   all_kleene([false, null]) = false\r\n   ```\r\n   \r\n   But, the above is only when *not* skipping nulls (because with the default of skipping, there is no difference with non-kleene logic)\r\n   \r\n   See the links I mentioned in https://github.com/apache/arrow/pull/8294#issuecomment-701357437, and also the Julia docs have a good explanation of three-valued (Kleene) logic: https://docs.julialang.org/en/v1/manual/missing/index.html#Logical-operators-1\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T05:57:35.306+0000",
                    "updated": "2020-10-14T05:57:35.306+0000",
                    "started": "2020-10-14T05:57:35.306+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500446",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/500493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r504462669\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -142,6 +142,20 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are taken to evaluate to false.\n\nReview comment:\n       BTW, the result you show (a null as result in all cases) is what I expect for the *non*-kleene version when not skipping nulls (I would expect that nulls propagate in that case, and not necessarily be interpreted as false)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-14T07:34:47.377+0000",
                    "updated": "2020-10-14T07:34:47.377+0000",
                    "started": "2020-10-14T07:34:47.377+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "500493",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/510598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 commented on pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#issuecomment-725852668\n\n\n   Turning to draft while I work on the rebase\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-12T05:45:48.967+0000",
                    "updated": "2020-11-12T05:45:48.967+0000",
                    "started": "2020-11-12T05:45:48.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510598",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/511345",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r522941736\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.h\n##########\n@@ -154,7 +154,21 @@ Result<Datum> MinMax(const Datum& value,\n                      const MinMaxOptions& options = MinMaxOptions::Defaults(),\n                      ExecContext* ctx = NULLPTR);\n \n-/// \\brief Calculate the modal (most common) values of a numeric array\n+/// \\brief Test whether any element in a boolean array evaluates to true.\n+///\n+/// This function returns true if any of the elements in the array evaluates\n+/// to true and false otherwise. Null values are skipped.\n+///\n+/// \\param[in] value input datum, expecting a boolean array\n+/// \\param[in] ctx the function execution context, optional\n+/// \\return resulting datum as a BooleanScalar\n+\n+/// \\since 2.0.0\n\nReview comment:\n       ```suggestion\r\n   /// \\since 3.0.0\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T13:14:07.044+0000",
                    "updated": "2020-11-13T13:14:07.044+0000",
                    "started": "2020-11-13T13:14:07.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511345",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/511346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r522942123\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.cc\n##########\n@@ -41,8 +41,12 @@ Result<Datum> MinMax(const Datum& value, const MinMaxOptions& options, ExecConte\n   return CallFunction(\"min_max\", {value}, &options, ctx);\n }\n \n-Result<Datum> Mode(const Datum& value, const ModeOptions& options, ExecContext* ctx) {\n-  return CallFunction(\"mode\", {value}, &options, ctx);\n+Result<Datum> Any(const Datum& value, ExecContext* ctx) {\n+  return CallFunction(\"any\", {value}, ctx);\n+}\n+\n+Result<Datum> Mode(const Datum& value, ExecContext* ctx) {\n\nReview comment:\n       The ModeOptions are dropped here, might be a rebase error?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T13:14:44.625+0000",
                    "updated": "2020-11-13T13:14:44.625+0000",
                    "started": "2020-11-13T13:14:44.625+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511346",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/511423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "arw2019 commented on a change in pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#discussion_r523059162\n\n\n\n##########\nFile path: cpp/src/arrow/compute/api_aggregate.cc\n##########\n@@ -41,8 +41,12 @@ Result<Datum> MinMax(const Datum& value, const MinMaxOptions& options, ExecConte\n   return CallFunction(\"min_max\", {value}, &options, ctx);\n }\n \n-Result<Datum> Mode(const Datum& value, const ModeOptions& options, ExecContext* ctx) {\n-  return CallFunction(\"mode\", {value}, &options, ctx);\n+Result<Datum> Any(const Datum& value, ExecContext* ctx) {\n+  return CallFunction(\"any\", {value}, ctx);\n+}\n+\n+Result<Datum> Mode(const Datum& value, ExecContext* ctx) {\n\nReview comment:\n       Thanks - yes, that's the problem!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-13T16:24:37.827+0000",
                    "updated": "2020-11-13T16:24:37.827+0000",
                    "started": "2020-11-13T16:24:37.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "511423",
                    "issueId": "13120293"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/worklog/516218",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8294:\nURL: https://github.com/apache/arrow/pull/8294#issuecomment-733069559\n\n\n   I've rebased now.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-24T16:02:40.296+0000",
                    "updated": "2020-11-24T16:02:40.296+0000",
                    "started": "2020-11-24T16:02:40.296+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "516218",
                    "issueId": "13120293"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1f5962a3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c11567[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@21ba0967[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2bda4a1a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@20734cea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@44bd930f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35bd4bce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4cce5df9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76604c96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5e6d8cbe[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1515f86[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3fcefbc0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 24 17:40:01 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-24T17:40:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1846/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-11-22T18:06:03.000+0000",
        "updated": "2021-05-25T20:32:01.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement \"any\" reduction kernel for boolean data",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/comment/16846883",
                    "id": "16846883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think the chunked array short-circuiting should be a dataframe-level optimization",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-05-23T17:21:52.491+0000",
                    "updated": "2019-05-23T17:21:52.491+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/comment/17116060",
                    "id": "17116060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "With fresh eyes and ARROW-8792 in the rear view mirror, I believe Any should be implemented as a ScalarAggregateFunction, with some way for agg functions to communicate that they have short-circuited to the KernelContext",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-25T14:13:36.781+0000",
                    "updated": "2020-05-25T14:13:36.781+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/comment/17148736",
                    "id": "17148736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Isn't this the same thing as Max for booleans?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-06-30T14:42:24.574+0000",
                    "updated": "2020-06-30T14:42:24.574+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/comment/17203293",
                    "id": "17203293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It is, but it just needs to be able to short-circuit (i.e. if the max/any value in the state is already true, then skip examining the data chunk) for when we have parallel evaluation",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-09-28T15:18:07.283+0000",
                    "updated": "2020-09-28T15:18:07.283+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120293/comment/17238284",
                    "id": "17238284",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8294\n[https://github.com/apache/arrow/pull/8294]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-11-24T17:40:01.185+0000",
                    "updated": "2020-11-24T17:40:01.185+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3n3yn:",
        "customfield_12314139": null
    }
}